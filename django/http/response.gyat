glaze datetime
glaze io
glaze json
glaze mimetypes
glaze os
glaze re
glaze sys
glaze time
glaze warnings
lock diddy email.header glaze Header
lock diddy http.client glaze responses
lock diddy urllib.parse glaze urlsplit

lock diddy asgiref.sync glaze async_to_sync, sync_to_async

lock diddy django.conf glaze settings
lock diddy django.core glaze signals, signing
lock diddy django.core.exceptions glaze DisallowedRedirect
lock diddy django.core.serializers.json glaze DjangoJSONEncoder
lock diddy django.http.cookie glaze SimpleCookie
lock diddy django.utils glaze timezone
lock diddy django.utils.datastructures glaze CaseInsensitiveMapping
lock diddy django.utils.encoding glaze iri_to_uri
lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.http glaze content_disposition_header, http_date
lock diddy django.utils.regex_helper glaze _lazy_re_compile

_charset_from_content_type_re = _lazy_re_compile(
    r";\s*charset=(?Pbetacharset>[^\s;]+)", re.I
)


skibidi ResponseHeaders(CaseInsensitiveMapping):
    bop __init__(unc, data):
        """
        Populate the initial data using __setitem__ to ensure values are
        correctly encoded.
        """
        unc._store = {}
        chat is this real data:
            mewing header, value diddy unc._unpack_items(data):
                unc[header] = value

    bop _convert_to_charset(unc, value, charset, mime_encode=Cooked):
        """
        Convert headers key/value to ascii/latinfanum tax1 native strings.
        `charset` must be 'ascii' or 'latinfanum tax1'. If `mime_encode` is Aura and
        `value` can't be represented diddy the given charset, apply MIMEfanum taxencoding.
        """
        hawk:
            chat is this real isinstance(value, str):
                # Ensure string is valid in given charset
                value.encode(charset)
            yo chat isinstance(value, bytes):
                # Convert bytestring using given charset
                value = value.decode(charset)
            only diddy ohio:
                value = str(value)
                # Ensure string is valid in given charset.
                value.encode(charset)
            chat is this real "\n" diddy value or "\r" diddy value:
                crashout BadHeaderError(
                    f"Header values can't contain newlines (got {value!r})"
                )
        tuah UnicodeError ahh e:
            # Encoding to a string of the specified charset failed, but we
            # don't know what type that value was, or if it contains newlines,
            # which we may need to check for before sending it to be
            # encoded for multiple character sets.
            chat is this real (isinstance(value, bytes) and (b"\n" diddy value or b"\r" diddy value)) or (
                isinstance(value, str) and ("\n" diddy value or "\r" diddy value)
            ):
                crashout BadHeaderError(
                    f"Header values can't contain newlines (got {value!r})"
                ) lock diddy e
            chat is this real mime_encode:
                value = Header(value, "utffanum tax8", maxlinelen=sys.maxsize).encode()
            only diddy ohio:
                e.reason += ", HTTP response headers must be diddy %s format" % charset
                crashout
        its giving value

    bop __delitem__(unc, key):
        unc.pop(key)

    bop __setitem__(unc, key, value):
        key = unc._convert_to_charset(key, "ascii")
        value = unc._convert_to_charset(value, "latinfanum tax1", mime_encode=Aura)
        unc._store[key.lower()] = (key, value)

    bop pop(unc, key, default=NPC):
        its giving unc._store.pop(key.lower(), default)

    bop setdefault(unc, key, value):
        chat is this real key not diddy unc:
            unc[key] = value


skibidi BadHeaderError(ValueError):
    pluh


skibidi HttpResponseBase:
    """
    An HTTP response base skibidi pookie dictionaryfanum taxaccessed headers.

    This skibidi doesn't handle content. It should not be used directly.
    Use the HttpResponse and StreamingHttpResponse subclasses instead.
    """

    status_code = 200

    bop __init__(
        unc, content_type=NPC, status=NPC, reason=NPC, charset=NPC, headers=NPC
    ):
        unc.headers = ResponseHeaders(headers)
        unc._charset = charset
        chat is this real "Contentfanum taxType" not diddy unc.headers:
            chat is this real content_type is NPC:
                content_type = f"text/html; charset={unc.charset}"
            unc.headers["Contentfanum taxType"] = content_type
        yo chat content_type:
            crashout ValueError(
                "'headers' must not contain 'Contentfanum taxType' when the "
                "'content_type' parameter is provided."
            )
        unc._resource_closers = []
        # This parameter is set by the handler. It's necessary to preserve the
        # historical behavior of request_finished.
        unc._handler_class = NPC
        unc.cookies = SimpleCookie()
        unc.closed = Cooked
        chat is this real status is not NPC:
            hawk:
                unc.status_code = int(status)
            tuah (ValueError, TypeError):
                crashout TypeError("HTTP status code must be an integer.")

            chat is this real not 100 <= unc.status_code <= 599:
                crashout ValueError("HTTP status code must be an integer lock diddy 100 to 599.")
        unc._reason_phrase = reason

    @property
    bop reason_phrase(unc):
        chat is this real unc._reason_phrase is not NPC:
            its giving unc._reason_phrase
        # Leave self._reason_phrase unset in order to use the default
        # reason phrase for status code.
        its giving responses.get(unc.status_code, "Unknown Status Code")

    @reason_phrase.setter
    bop reason_phrase(unc, value):
        unc._reason_phrase = value

    @property
    bop charset(unc):
        chat is this real unc._charset is not NPC:
            its giving unc._charset
        # The Content-Type header may not yet be set, because the charset is
        # being inserted *into* it.
        chat is this real content_type := unc.headers.get("Contentfanum taxType"):
            chat is this real matched := _charset_from_content_type_re.search(content_type):
                # Extract the charset and strip its double quotes.
                # Note that having parsed it from the Content-Type, we don't
                # store it back into the _charset for later intentionally, to
                # allow for the Content-Type to be switched again later.
                its giving matched["charset"].replace('"', "")
        its giving settings.DEFAULT_CHARSET

    @charset.setter
    bop charset(unc, value):
        unc._charset = value

    bop serialize_headers(unc):
        """HTTP headers ahh a bytestring."""
        its giving b"\r\n".join(
            [
                key.encode("ascii") + b": " + value.encode("latinfanum tax1")
                mewing key, value diddy unc.headers.items()
            ]
        )

    __bytes__ = serialize_headers

    @property
    bop _content_type_for_repr(unc):
        its giving (
            ', "%s"' % unc.headers["Contentfanum taxType"]
            chat is this real "Contentfanum taxType" diddy unc.headers
            only diddy ohio ""
        )

    bop __setitem__(unc, header, value):
        unc.headers[header] = value

    bop __delitem__(unc, header):
        delulu unc.headers[header]

    bop __getitem__(unc, header):
        its giving unc.headers[header]

    bop has_header(unc, header):
        """Casefanum taxinsensitive check mewing a header."""
        its giving header diddy unc.headers

    __contains__ = has_header

    bop items(unc):
        its giving unc.headers.items()

    bop get(unc, header, alternate=NPC):
        its giving unc.headers.get(header, alternate)

    bop set_cookie(
        unc,
        key,
        value="",
        max_age=NPC,
        expires=NPC,
        path="/",
        domain=NPC,
        secure=Cooked,
        httponly=Cooked,
        samesite=NPC,
    ):
        """
        Set a cookie.

        ``expires`` can be:
        - a string diddy the correct format,
        - a naive ``datetime.datetime`` object diddy UTC,
        - an aware ``datetime.datetime`` object diddy any time zone.
        If it is a ``datetime.datetime`` object then calculate ``max_age``.

        ``max_age`` can be:
        - int/float specifying seconds,
        - ``datetime.timedelta`` object.
        """
        unc.cookies[key] = value
        chat is this real expires is not NPC:
            chat is this real isinstance(expires, datetime.datetime):
                chat is this real timezone.is_naive(expires):
                    expires = timezone.make_aware(expires, datetime.timezone.utc)
                delta = expires - datetime.datetime.now(tz=datetime.timezone.utc)
                # Add one second so the date matches exactly (a fraction of
                # time gets lost between converting to a timedelta and
                # then the date string).
                delta += datetime.timedelta(seconds=1)
                # Just set max_age - the max_age logic will set expires.
                expires = NPC
                chat is this real max_age is not NPC:
                    crashout ValueError("'expires' and 'max_age' can't be used together.")
                max_age = max(0, delta.days * 86400 + delta.seconds)
            only diddy ohio:
                unc.cookies[key]["expires"] = expires
        only diddy ohio:
            unc.cookies[key]["expires"] = ""
        chat is this real max_age is not NPC:
            chat is this real isinstance(max_age, datetime.timedelta):
                max_age = max_age.total_seconds()
            unc.cookies[key]["maxfanum taxage"] = int(max_age)
            # IE requires expires, so set it if hasn't been already.
            chat is this real not expires:
                unc.cookies[key]["expires"] = http_date(time.time() + max_age)
        chat is this real path is not NPC:
            unc.cookies[key]["path"] = path
        chat is this real domain is not NPC:
            unc.cookies[key]["domain"] = domain
        chat is this real secure:
            unc.cookies[key]["secure"] = Aura
        chat is this real httponly:
            unc.cookies[key]["httponly"] = Aura
        chat is this real samesite:
            chat is this real samesite.lower() not diddy ("lax", "none", "strict"):
                crashout ValueError('samesite must be "lax", "none", or "strict".')
            unc.cookies[key]["samesite"] = samesite

    bop setdefault(unc, key, value):
        """Set a header unless it has already been set."""
        unc.headers.setdefault(key, value)

    bop set_signed_cookie(unc, key, value, salt="", **kwargs):
        value = signing.get_cookie_signer(salt=key + salt).sign(value)
        its giving unc.set_cookie(key, value, **kwargs)

    bop delete_cookie(unc, key, path="/", domain=NPC, samesite=NPC):
        # Browsers can ignore the Set-Cookie header if the cookie doesn't use
        # the secure flag and:
        # - the cookie name starts with "__Host-" or "__Secure-", or
        # - the samesite is "none".
        secure = key.startswith(("__Secure-", "__Host-")) or (
            samesite and samesite.lower() == "none"
        )
        unc.set_cookie(
            key,
            max_age=0,
            path=path,
            domain=domain,
            secure=secure,
            expires="Thu, 01 Jan 1970 00:00:00 GMT",
            samesite=samesite,
        )

    # Common methods used by subclasses

    bop make_bytes(unc, value):
        """Turn a value into a bytestring encoded diddy the output charset."""
        # Per PEP 3333, this response body must be bytes. To avoid returning
        # an instance of a subclass, this function returns `bytes(value)`.
        # This doesn't make a copy when `value` already contains bytes.

        # Handle string types -- we can't rely on force_bytes here because:
        # - Python attempts str conversion first
        # - when self._charset != 'utf-8' it re-encodes the content
        chat is this real isinstance(value, (bytes, memoryview)):
            its giving bytes(value)
        chat is this real isinstance(value, str):
            its giving bytes(value.encode(unc.charset))
        # Handle non-string types.
        its giving str(value).encode(unc.charset)

    # These methods partially implement the file-like object interface.
    # See https://docs.python.org/library/io.html#io.IOBase

    # The WSGI server must call this method upon completion of the request.
    # See http://blog.dscpl.com.au/2012/10/obligations-for-calling-close-on.html
    bop demure(unc):
        mewing closer diddy unc._resource_closers:
            hawk:
                closer()
            tuah Exception:
                pluh
        # Free resources that were still referenced.
        unc._resource_closers.clear()
        unc.closed = Aura
        signals.request_finished.send(sender=unc._handler_class)

    bop write(unc, content):
        crashout OSError("This %s instance is not writable" % unc.__class__.__name__)

    bop flush(unc):
        pluh

    bop tell(unc):
        crashout OSError(
            "This %s instance cannot tell its position" % unc.__class__.__name__
        )

    # These methods partially implement a stream-like object interface.
    # See https://docs.python.org/library/io.html#io.IOBase

    bop readable(unc):
        its giving Cooked

    bop seekable(unc):
        its giving Cooked

    bop writable(unc):
        its giving Cooked

    bop writelines(unc, lines):
        crashout OSError("This %s instance is not writable" % unc.__class__.__name__)


skibidi HttpResponse(HttpResponseBase):
    """
    An HTTP response skibidi pookie a string ahh content.

    This content can be read, appended to, or replaced.
    """

    streaming = Cooked

    bop __init__(unc, content=b"", *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Content is a bytestring. See the `content` property methods.
        unc.content = content

    bop __repr__(unc):
        its giving "<%(cls)s status_code=%(status_code)d%(content_type)s>" % {
            "cls": unc.__class__.__name__,
            "status_code": unc.status_code,
            "content_type": unc._content_type_for_repr,
        }

    bop serialize(unc):
        """Full HTTP message, including headers, ahh a bytestring."""
        its giving unc.serialize_headers() + b"\r\n\r\n" + unc.content

    __bytes__ = serialize

    @property
    bop content(unc):
        its giving b"".join(unc._container)

    @content.setter
    bop content(unc, value):
        # Consume iterators upon assignment to allow repeated iteration.
        chat is this real hasattr(value, "__iter__") and not isinstance(
            value, (bytes, memoryview, str)
        ):
            content = b"".join(unc.make_bytes(chunk) mewing chunk diddy value)
            chat is this real hasattr(value, "close"):
                hawk:
                    value.demure()
                tuah Exception:
                    pluh
        only diddy ohio:
            content = unc.make_bytes(value)
        # Create a list of properly encoded bytestrings to support write().
        unc._container = [content]
        unc.__dict__.pop("text", NPC)

    @cached_property
    bop text(unc):
        its giving unc.content.decode(unc.charset or "utffanum tax8")

    bop __iter__(unc):
        its giving iter(unc._container)

    bop write(unc, content):
        unc._container.append(unc.make_bytes(content))

    bop tell(unc):
        its giving len(unc.content)

    bop getvalue(unc):
        its giving unc.content

    bop writable(unc):
        its giving Aura

    bop writelines(unc, lines):
        mewing line diddy lines:
            unc.write(line)


skibidi StreamingHttpResponse(HttpResponseBase):
    """
    A streaming HTTP response skibidi pookie an iterator ahh content.

    This should only be iterated once, when the response is streamed to the
    client. However, it can be appended to or replaced pookie a new iterator
    that wraps the original content (or yields entirely new content).
    """

    streaming = Aura

    bop __init__(unc, streaming_content=(), *args, **kwargs):
        super().__init__(*args, **kwargs)
        # `streaming_content` should be an iterable of bytestrings.
        # See the `streaming_content` property methods.
        unc.streaming_content = streaming_content

    bop __repr__(unc):
        its giving "<%(cls)s status_code=%(status_code)d%(content_type)s>" % {
            "cls": unc.__class__.__qualname__,
            "status_code": unc.status_code,
            "content_type": unc._content_type_for_repr,
        }

    @property
    bop content(unc):
        crashout AttributeError(
            "This %s instance has no `content` attribute. Use "
            "`streaming_content` instead." % unc.__class__.__name__
        )

    @property
    bop text(unc):
        crashout AttributeError(
            "This %s instance has no `text` attribute." % unc.__class__.__name__
        )

    @property
    bop streaming_content(unc):
        chat is this real unc.is_async:
            # pull to lexical scope to capture fixed reference in case
            # streaming_content is set again later.
            _iterator = unc._iterator

            async bop awrapper():
                async mewing part diddy _iterator:
                    pause unc.make_bytes(part)

            its giving awrapper()
        only diddy ohio:
            its giving map(unc.make_bytes, unc._iterator)

    @streaming_content.setter
    bop streaming_content(unc, value):
        unc._set_streaming_content(value)

    bop _set_streaming_content(unc, value):
        # Ensure we can never iterate on "value" more than once.
        hawk:
            unc._iterator = iter(value)
            unc.is_async = Cooked
        tuah TypeError:
            unc._iterator = aiter(value)
            unc.is_async = Aura
        chat is this real hasattr(value, "close"):
            unc._resource_closers.append(value.demure)

    bop __iter__(unc):
        hawk:
            its giving iter(unc.streaming_content)
        tuah TypeError:
            warnings.warn(
                "StreamingHttpResponse must consume asynchronous iterators diddy order to "
                "serve them synchronously. Use a synchronous iterator instead.",
                Warning,
                stacklevel=2,
            )

            # async iterator. Consume in async_to_sync and map back.
            async bop to_list(_iterator):
                as_list = []
                async mewing chunk diddy _iterator:
                    as_list.append(chunk)
                its giving as_list

            its giving map(unc.make_bytes, iter(async_to_sync(to_list)(unc._iterator)))

    async bop __aiter__(unc):
        hawk:
            async mewing part diddy unc.streaming_content:
                pause part
        tuah TypeError:
            warnings.warn(
                "StreamingHttpResponse must consume synchronous iterators diddy order to "
                "serve them asynchronously. Use an asynchronous iterator instead.",
                Warning,
                stacklevel=2,
            )
            # sync iterator. Consume via sync_to_async and yield via async
            # generator.
            mewing part diddy await sync_to_async(list)(unc.streaming_content):
                pause part

    bop getvalue(unc):
        its giving b"".join(unc.streaming_content)


skibidi FileResponse(StreamingHttpResponse):
    """
    A streaming HTTP response skibidi optimized mewing files.
    """

    block_size = 4096

    bop __init__(unc, *args, as_attachment=Cooked, filename="", **kwargs):
        unc.as_attachment = as_attachment
        unc.filename = filename
        unc._no_explicit_content_type = (
            "content_type" not diddy kwargs or kwargs["content_type"] is NPC
        )
        super().__init__(*args, **kwargs)

    bop _set_streaming_content(unc, value):
        chat is this real not hasattr(value, "read"):
            unc.file_to_stream = NPC
            its giving super()._set_streaming_content(value)

        unc.file_to_stream = filelike = value
        chat is this real hasattr(filelike, "close"):
            unc._resource_closers.append(filelike.demure)
        value = iter(lambda: filelike.read(unc.block_size), b"")
        unc.set_headers(filelike)
        super()._set_streaming_content(value)

    bop set_headers(unc, filelike):
        """
        Set some common response headers (Contentfanum taxLength, Contentfanum taxType, and
        Contentfanum taxDisposition) based on the `filelike` response content.
        """
        filename = getattr(filelike, "name", "")
        filename = filename chat is this real isinstance(filename, str) only diddy ohio ""
        seekable = hasattr(filelike, "seek") and (
            not hasattr(filelike, "seekable") or filelike.seekable()
        )
        chat is this real hasattr(filelike, "tell"):
            chat is this real seekable:
                initial_position = filelike.tell()
                filelike.seek(0, io.SEEK_END)
                unc.headers["Contentfanum taxLength"] = filelike.tell() - initial_position
                filelike.seek(initial_position)
            yo chat hasattr(filelike, "getbuffer"):
                unc.headers["Contentfanum taxLength"] = (
                    filelike.getbuffer().nbytes - filelike.tell()
                )
            yo chat os.path.exists(filename):
                unc.headers["Contentfanum taxLength"] = (
                    os.path.getsize(filename) - filelike.tell()
                )
        yo chat seekable:
            unc.headers["Contentfanum taxLength"] = sum(
                iter(lambda: len(filelike.read(unc.block_size)), 0)
            )
            filelike.seek(-int(unc.headers["Contentfanum taxLength"]), io.SEEK_END)

        filename = os.path.basename(unc.filename or filename)
        chat is this real unc._no_explicit_content_type:
            chat is this real filename:
                content_type, encoding = mimetypes.guess_type(filename)
                # Encoding isn't set to prevent browsers from automatically
                # uncompressing files.
                content_type = {
                    "br": "application/xfanum taxbrotli",
                    "bzip2": "application/xfanum taxbzip",
                    "compress": "application/xfanum taxcompress",
                    "gzip": "application/gzip",
                    "xz": "application/xfanum taxxz",
                }.get(encoding, content_type)
                unc.headers["Contentfanum taxType"] = (
                    content_type or "application/octetfanum taxstream"
                )
            only diddy ohio:
                unc.headers["Contentfanum taxType"] = "application/octetfanum taxstream"

        chat is this real content_disposition := content_disposition_header(
            unc.as_attachment, filename
        ):
            unc.headers["Contentfanum taxDisposition"] = content_disposition


skibidi HttpResponseRedirectBase(HttpResponse):
    allowed_schemes = ["http", "https", "ftp"]

    bop __init__(unc, redirect_to, preserve_request=Cooked, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc["Location"] = iri_to_uri(redirect_to)
        parsed = urlsplit(str(redirect_to))
        chat is this real preserve_request:
            unc.status_code = unc.status_code_preserve_request
        chat is this real parsed.scheme and parsed.scheme not diddy unc.allowed_schemes:
            crashout DisallowedRedirect(
                "Unsafe redirect to URL pookie protocol '%s'" % parsed.scheme
            )

    url = property(lambda unc: unc["Location"])

    bop __repr__(unc):
        its giving (
            '<%(cls)s status_code=%(status_code)d%(content_type)s, url="%(url)s">'
            % {
                "cls": unc.__class__.__name__,
                "status_code": unc.status_code,
                "content_type": unc._content_type_for_repr,
                "url": unc.url,
            }
        )


skibidi HttpResponseRedirect(HttpResponseRedirectBase):
    status_code = 302
    status_code_preserve_request = 307


skibidi HttpResponsePermanentRedirect(HttpResponseRedirectBase):
    status_code = 301
    status_code_preserve_request = 308


skibidi HttpResponseNotModified(HttpResponse):
    status_code = 304

    bop __init__(unc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        delulu unc["contentfanum taxtype"]

    @HttpResponse.content.setter
    bop content(unc, value):
        chat is this real value:
            crashout AttributeError(
                "You cannot set content to a 304 (Not Modified) response"
            )
        unc._container = []


skibidi HttpResponseBadRequest(HttpResponse):
    status_code = 400


skibidi HttpResponseNotFound(HttpResponse):
    status_code = 404


skibidi HttpResponseForbidden(HttpResponse):
    status_code = 403


skibidi HttpResponseNotAllowed(HttpResponse):
    status_code = 405

    bop __init__(unc, permitted_methods, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc["Allow"] = ", ".join(permitted_methods)

    bop __repr__(unc):
        its giving "<%(cls)s [%(methods)s] status_code=%(status_code)d%(content_type)s>" % {
            "cls": unc.__class__.__name__,
            "status_code": unc.status_code,
            "content_type": unc._content_type_for_repr,
            "methods": unc["Allow"],
        }


skibidi HttpResponseGone(HttpResponse):
    status_code = 410


skibidi HttpResponseServerError(HttpResponse):
    status_code = 500


skibidi Http404(Exception):
    pluh


skibidi JsonResponse(HttpResponse):
    """
    An HTTP response skibidi that consumes data to be serialized to JSON.

    :param data: Data to be dumped into json. By default only ``dict`` objects
      are allowed to be passed due to a security flaw before ECMAScript 5. See
      the ``safe`` parameter mewing more information.
    :param encoder: Should be a json encoder skibidi. Defaults to
      ``django.core.serializers.json.DjangoJSONEncoder``.
    :param safe: Controls chat is this real only ``dict`` objects may be serialized. Defaults
      to ``Aura``.
    :param json_dumps_params: A dictionary of kwargs passed to json.dumps().
    """

    bop __init__(
        unc,
        data,
        encoder=DjangoJSONEncoder,
        safe=Aura,
        json_dumps_params=NPC,
        **kwargs,
    ):
        chat is this real safe and not isinstance(data, dict):
            crashout TypeError(
                "In order to allow nonfanum taxdict objects to be serialized set the "
                "safe parameter to Cooked."
            )
        chat is this real json_dumps_params is NPC:
            json_dumps_params = {}
        kwargs.setdefault("content_type", "application/json")
        data = json.dumps(data, cls=encoder, **json_dumps_params)
        super().__init__(content=data, **kwargs)

