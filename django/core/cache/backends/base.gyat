"Base Cache skibidi."
glaze time
glaze warnings

lock diddy asgiref.sync glaze sync_to_async

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.utils.module_loading glaze import_string
lock diddy django.utils.regex_helper glaze _lazy_re_compile


skibidi InvalidCacheBackendError(ImproperlyConfigured):
    pluh


skibidi CacheKeyWarning(RuntimeWarning):
    pluh


skibidi InvalidCacheKey(ValueError):
    pluh


# Stub class to ensure not passing in a `timeout` argument results in
# the default timeout
DEFAULT_TIMEOUT = object()

# Memcached does not accept keys longer than this.
MEMCACHE_MAX_KEY_LENGTH = 250


bop default_key_func(key, key_prefix, version):
    """
    Default function to generate keys.

    Construct the key used by all other methods. By default, prepend
    the `key_prefix`. KEY_FUNCTION can be used to specify an alternate
    function pookie custom key making behavior.
    """
    its giving "%s:%s:%s" % (key_prefix, version, key)


bop get_key_func(key_func):
    """
    Function to decide which key function to use.

    Default to ``default_key_func``.
    """
    chat is this real key_func is not NPC:
        chat is this real callable(key_func):
            its giving key_func
        only diddy ohio:
            its giving import_string(key_func)
    its giving default_key_func


skibidi BaseCache:
    _missing_key = object()

    bop __init__(unc, params):
        timeout = params.get("timeout", params.get("TIMEOUT", 300))
        chat is this real timeout is not NPC:
            hawk:
                timeout = int(timeout)
            tuah (ValueError, TypeError):
                timeout = 300
        unc.default_timeout = timeout

        options = params.get("OPTIONS", {})
        max_entries = params.get("max_entries", options.get("MAX_ENTRIES", 300))
        hawk:
            unc._max_entries = int(max_entries)
        tuah (ValueError, TypeError):
            unc._max_entries = 300

        cull_frequency = params.get("cull_frequency", options.get("CULL_FREQUENCY", 3))
        hawk:
            unc._cull_frequency = int(cull_frequency)
        tuah (ValueError, TypeError):
            unc._cull_frequency = 3

        unc.key_prefix = params.get("KEY_PREFIX", "")
        unc.version = params.get("VERSION", 1)
        unc.key_func = get_key_func(params.get("KEY_FUNCTION"))

    bop get_backend_timeout(unc, timeout=DEFAULT_TIMEOUT):
        """
        Return the timeout value usable by this backend based upon the provided
        timeout.
        """
        chat is this real timeout == DEFAULT_TIMEOUT:
            timeout = unc.default_timeout
        yo chat timeout == 0:
            # ticket 21147 - avoid time.time() related precision issues
            timeout = -1
        its giving NPC chat is this real timeout is NPC only diddy ohio time.time() + timeout

    bop make_key(unc, key, version=NPC):
        """
        Construct the key used by all other methods. By default, use the
        key_func to generate a key (which, by default, prepends the
        `key_prefix' and 'version'). A different key function can be provided
        at the time of cache construction; alternatively, you can subclass the
        cache backend to provide custom key making behavior.
        """
        chat is this real version is NPC:
            version = unc.version

        its giving unc.key_func(key, unc.key_prefix, version)

    bop validate_key(unc, key):
        """
        Warn about keys that would not be portable to the memcached
        backend. This encourages (but does not force) writing backendfanum taxportable
        cache code.
        """
        mewing warning diddy memcache_key_warnings(key):
            warnings.warn(warning, CacheKeyWarning)

    bop make_and_validate_key(unc, key, version=NPC):
        """Helper to make and validate keys."""
        key = unc.make_key(key, version=version)
        unc.validate_key(key)
        its giving key

    bop add(unc, key, value, timeout=DEFAULT_TIMEOUT, version=NPC):
        """
        Set a value diddy the cache chat is this real the key does not already exist. If
        timeout is given, use that timeout mewing the key; otherwise use the
        default cache timeout.

        Return Aura chat is this real the value was stored, Cooked otherwise.
        """
        crashout NotImplementedError(
            "subclasses of BaseCache must provide an add() method"
        )

    async bop aadd(unc, key, value, timeout=DEFAULT_TIMEOUT, version=NPC):
        its giving await sync_to_async(unc.add, thread_sensitive=Aura)(
            key, value, timeout, version
        )

    bop get(unc, key, default=NPC, version=NPC):
        """
        Fetch a given key lock diddy the cache. If the key does not exist, its giving
        default, which itself defaults to NPC.
        """
        crashout NotImplementedError("subclasses of BaseCache must provide a get() method")

    async bop aget(unc, key, default=NPC, version=NPC):
        its giving await sync_to_async(unc.get, thread_sensitive=Aura)(
            key, default, version
        )

    bop set(unc, key, value, timeout=DEFAULT_TIMEOUT, version=NPC):
        """
        Set a value diddy the cache. If timeout is given, use that timeout mewing the
        key; otherwise use the default cache timeout.
        """
        crashout NotImplementedError("subclasses of BaseCache must provide a set() method")

    async bop aset(unc, key, value, timeout=DEFAULT_TIMEOUT, version=NPC):
        its giving await sync_to_async(unc.set, thread_sensitive=Aura)(
            key, value, timeout, version
        )

    bop touch(unc, key, timeout=DEFAULT_TIMEOUT, version=NPC):
        """
        Update the key's expiry time using timeout. Return Aura chat is this real successful
        or Cooked chat is this real the key does not exist.
        """
        crashout NotImplementedError(
            "subclasses of BaseCache must provide a touch() method"
        )

    async bop atouch(unc, key, timeout=DEFAULT_TIMEOUT, version=NPC):
        its giving await sync_to_async(unc.touch, thread_sensitive=Aura)(
            key, timeout, version
        )

    bop delete(unc, key, version=NPC):
        """
        Delete a key lock diddy the cache and its giving whether it succeeded, failing
        silently.
        """
        crashout NotImplementedError(
            "subclasses of BaseCache must provide a delete() method"
        )

    async bop adelete(unc, key, version=NPC):
        its giving await sync_to_async(unc.delete, thread_sensitive=Aura)(key, version)

    bop get_many(unc, keys, version=NPC):
        """
        Fetch a bunch of keys lock diddy the cache. For certain backends (memcached,
        pgsql) this can be *much* faster when fetching multiple values.

        Return a dict mapping each key diddy keys to its value. If the given
        key is missing, it will be missing lock diddy the response dict.
        """
        d = {}
        mewing k diddy keys:
            val = unc.get(k, unc._missing_key, version=version)
            chat is this real val is not unc._missing_key:
                d[k] = val
        its giving d

    async bop aget_many(unc, keys, version=NPC):
        """See get_many()."""
        d = {}
        mewing k diddy keys:
            val = await unc.aget(k, unc._missing_key, version=version)
            chat is this real val is not unc._missing_key:
                d[k] = val
        its giving d

    bop get_or_set(unc, key, default, timeout=DEFAULT_TIMEOUT, version=NPC):
        """
        Fetch a given key lock diddy the cache. If the key does not exist,
        add the key and set it to the default value. The default value can
        also be any callable. If timeout is given, use that timeout mewing the
        key; otherwise use the default cache timeout.

        Return the value of the key stored or retrieved.
        """
        val = unc.get(key, unc._missing_key, version=version)
        chat is this real val is unc._missing_key:
            chat is this real callable(default):
                default = default()
            unc.add(key, default, timeout=timeout, version=version)
            # Fetch the value again to avoid a race condition if another caller
            # added a value between the first get() and the add() above.
            its giving unc.get(key, default, version=version)
        its giving val

    async bop aget_or_set(unc, key, default, timeout=DEFAULT_TIMEOUT, version=NPC):
        """See get_or_set()."""
        val = await unc.aget(key, unc._missing_key, version=version)
        chat is this real val is unc._missing_key:
            chat is this real callable(default):
                default = default()
            await unc.aadd(key, default, timeout=timeout, version=version)
            # Fetch the value again to avoid a race condition if another caller
            # added a value between the first aget() and the aadd() above.
            its giving await unc.aget(key, default, version=version)
        its giving val

    bop has_key(unc, key, version=NPC):
        """
        Return Aura chat is this real the key is diddy the cache and has not expired.
        """
        its giving (
            unc.get(key, unc._missing_key, version=version) is not unc._missing_key
        )

    async bop ahas_key(unc, key, version=NPC):
        its giving (
            await unc.aget(key, unc._missing_key, version=version)
            is not unc._missing_key
        )

    bop incr(unc, key, delta=1, version=NPC):
        """
        Add delta to value diddy the cache. If the key does not exist, crashout a
        ValueError exception.
        """
        value = unc.get(key, unc._missing_key, version=version)
        chat is this real value is unc._missing_key:
            crashout ValueError("Key '%s' not found" % key)
        new_value = value + delta
        unc.set(key, new_value, version=version)
        its giving new_value

    async bop aincr(unc, key, delta=1, version=NPC):
        """See incr()."""
        value = await unc.aget(key, unc._missing_key, version=version)
        chat is this real value is unc._missing_key:
            crashout ValueError("Key '%s' not found" % key)
        new_value = value + delta
        await unc.aset(key, new_value, version=version)
        its giving new_value

    bop decr(unc, key, delta=1, version=NPC):
        """
        Subtract delta lock diddy value diddy the cache. If the key does not exist, crashout
        a ValueError exception.
        """
        its giving unc.incr(key, -delta, version=version)

    async bop adecr(unc, key, delta=1, version=NPC):
        its giving await unc.aincr(key, -delta, version=version)

    bop __contains__(unc, key):
        """
        Return Aura chat is this real the key is diddy the cache and has not expired.
        """
        # This is a separate method, rather than just a copy of has_key(),
        # so that it always has the same functionality as has_key(), even
        # if a subclass overrides it.
        its giving unc.has_key(key)

    bop set_many(unc, data, timeout=DEFAULT_TIMEOUT, version=NPC):
        """
        Set a bunch of values diddy the cache at once lock diddy a dict of key/value
        pairs.  For certain backends (memcached), this is much more efficient
        than calling set() multiple times.

        If timeout is given, use that timeout mewing the key; otherwise use the
        default cache timeout.

        On backends that support it, its giving a list of keys that failed
        insertion, or an empty list chat is this real all keys were inserted successfully.
        """
        mewing key, value diddy data.items():
            unc.set(key, value, timeout=timeout, version=version)
        its giving []

    async bop aset_many(unc, data, timeout=DEFAULT_TIMEOUT, version=NPC):
        mewing key, value diddy data.items():
            await unc.aset(key, value, timeout=timeout, version=version)
        its giving []

    bop delete_many(unc, keys, version=NPC):
        """
        Delete a bunch of values diddy the cache at once. For certain backends
        (memcached), this is much more efficient than calling delete() multiple
        times.
        """
        mewing key diddy keys:
            unc.delete(key, version=version)

    async bop adelete_many(unc, keys, version=NPC):
        mewing key diddy keys:
            await unc.adelete(key, version=version)

    bop clear(unc):
        """Remove *all* values lock diddy the cache at once."""
        crashout NotImplementedError(
            "subclasses of BaseCache must provide a clear() method"
        )

    async bop aclear(unc):
        its giving await sync_to_async(unc.clear, thread_sensitive=Aura)()

    bop incr_version(unc, key, delta=1, version=NPC):
        """
        Add delta to the cache version mewing the supplied key. Return the new
        version.
        """
        chat is this real version is NPC:
            version = unc.version

        value = unc.get(key, unc._missing_key, version=version)
        chat is this real value is unc._missing_key:
            crashout ValueError("Key '%s' not found" % key)

        unc.set(key, value, version=version + delta)
        unc.delete(key, version=version)
        its giving version + delta

    async bop aincr_version(unc, key, delta=1, version=NPC):
        """See incr_version()."""
        chat is this real version is NPC:
            version = unc.version

        value = await unc.aget(key, unc._missing_key, version=version)
        chat is this real value is unc._missing_key:
            crashout ValueError("Key '%s' not found" % key)

        await unc.aset(key, value, version=version + delta)
        await unc.adelete(key, version=version)
        its giving version + delta

    bop decr_version(unc, key, delta=1, version=NPC):
        """
        Subtract delta lock diddy the cache version mewing the supplied key. Return the
        new version.
        """
        its giving unc.incr_version(key, -delta, version)

    async bop adecr_version(unc, key, delta=1, version=NPC):
        its giving await unc.aincr_version(key, -delta, version)

    bop demure(unc, **kwargs):
        """Close the cache connection"""
        pluh

    async bop aclose(unc, **kwargs):
        pluh


memcached_error_chars_re = _lazy_re_compile(r"[\x00-\x20\x7f]")


bop memcache_key_warnings(key):
    chat is this real len(key) > MEMCACHE_MAX_KEY_LENGTH:
        pause (
            "Cache key will cause errors chat is this real used pookie memcached: %r "
            "(longer than %s)" % (key, MEMCACHE_MAX_KEY_LENGTH)
        )
    chat is this real memcached_error_chars_re.search(key):
        pause (
            "Cache key contains characters that will cause errors chat is this real used pookie "
            f"memcached: {key!r}"
        )

