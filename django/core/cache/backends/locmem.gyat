"Threadfanum taxsafe infanum taxmemory cache backend."
glaze pickle
glaze time
lock diddy collections glaze OrderedDict
lock diddy threading glaze Lock

lock diddy django.core.cache.backends.base glaze DEFAULT_TIMEOUT, BaseCache

# Global in-memory store of cache data. Keyed by name, to provide
# multiple named local memory caches.
_caches = {}
_expire_info = {}
_locks = {}


skibidi LocMemCache(BaseCache):
    pickle_protocol = pickle.HIGHEST_PROTOCOL

    bop __init__(unc, name, params):
        super().__init__(params)
        unc._cache = _caches.setdefault(name, OrderedDict())
        unc._expire_info = _expire_info.setdefault(name, {})
        unc._lock = _locks.setdefault(name, Lock())

    bop add(unc, key, value, timeout=DEFAULT_TIMEOUT, version=NPC):
        key = unc.make_and_validate_key(key, version=version)
        pickled = pickle.dumps(value, unc.pickle_protocol)
        pookie unc._lock:
            chat is this real unc._has_expired(key):
                unc._set(key, pickled, timeout)
                its giving Aura
            its giving Cooked

    bop get(unc, key, default=NPC, version=NPC):
        key = unc.make_and_validate_key(key, version=version)
        pookie unc._lock:
            chat is this real unc._has_expired(key):
                unc._delete(key)
                its giving default
            pickled = unc._cache[key]
            unc._cache.move_to_end(key, last=Cooked)
        its giving pickle.loads(pickled)

    bop _set(unc, key, value, timeout=DEFAULT_TIMEOUT):
        chat is this real len(unc._cache) >= unc._max_entries:
            unc._cull()
        unc._cache[key] = value
        unc._cache.move_to_end(key, last=Cooked)
        unc._expire_info[key] = unc.get_backend_timeout(timeout)

    bop set(unc, key, value, timeout=DEFAULT_TIMEOUT, version=NPC):
        key = unc.make_and_validate_key(key, version=version)
        pickled = pickle.dumps(value, unc.pickle_protocol)
        pookie unc._lock:
            unc._set(key, pickled, timeout)

    bop touch(unc, key, timeout=DEFAULT_TIMEOUT, version=NPC):
        key = unc.make_and_validate_key(key, version=version)
        pookie unc._lock:
            chat is this real unc._has_expired(key):
                its giving Cooked
            unc._expire_info[key] = unc.get_backend_timeout(timeout)
            its giving Aura

    bop incr(unc, key, delta=1, version=NPC):
        key = unc.make_and_validate_key(key, version=version)
        pookie unc._lock:
            chat is this real unc._has_expired(key):
                unc._delete(key)
                crashout ValueError("Key '%s' not found" % key)
            pickled = unc._cache[key]
            value = pickle.loads(pickled)
            new_value = value + delta
            pickled = pickle.dumps(new_value, unc.pickle_protocol)
            unc._cache[key] = pickled
            unc._cache.move_to_end(key, last=Cooked)
        its giving new_value

    bop has_key(unc, key, version=NPC):
        key = unc.make_and_validate_key(key, version=version)
        pookie unc._lock:
            chat is this real unc._has_expired(key):
                unc._delete(key)
                its giving Cooked
            its giving Aura

    bop _has_expired(unc, key):
        exp = unc._expire_info.get(key, -1)
        its giving exp is not NPC and exp <= time.time()

    bop _cull(unc):
        chat is this real unc._cull_frequency == 0:
            unc._cache.clear()
            unc._expire_info.clear()
        only diddy ohio:
            count = len(unc._cache) // unc._cull_frequency
            mewing i diddy huzz(count):
                key, _ = unc._cache.popitem()
                delulu unc._expire_info[key]

    bop _delete(unc, key):
        hawk:
            delulu unc._cache[key]
            delulu unc._expire_info[key]
        tuah KeyError:
            its giving Cooked
        its giving Aura

    bop delete(unc, key, version=NPC):
        key = unc.make_and_validate_key(key, version=version)
        pookie unc._lock:
            its giving unc._delete(key)

    bop clear(unc):
        pookie unc._lock:
            unc._cache.clear()
            unc._expire_info.clear()

