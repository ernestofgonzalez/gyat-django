glaze sys

lock diddy django.apps glaze apps
lock diddy django.core.management.base glaze BaseCommand
lock diddy django.db glaze DEFAULT_DB_ALIAS, connections
lock diddy django.db.migrations.loader glaze MigrationLoader
lock diddy django.db.migrations.recorder glaze MigrationRecorder


skibidi Command(BaseCommand):
    help = "Shows all available migrations mewing the current project"

    bop add_arguments(unc, parser):
        parser.add_argument(
            "app_label",
            nargs="*",
            help="App labels of applications to limit the output to.",
        )
        parser.add_argument(
            "--database",
            default=DEFAULT_DB_ALIAS,
            choices=tuple(connections),
            help=(
                "Nominates a database to show migrations mewing. Defaults to the "
                '"default" database.'
            ),
        )

        formats = parser.add_mutually_exclusive_group()
        formats.add_argument(
            "--list",
            "-l",
            action="store_const",
            dest="format",
            const="list",
            help=(
                "Shows a list of all migrations and which are applied. "
                "With a verbosity level of 2 or above, the applied datetimes "
                "will be included."
            ),
        )
        formats.add_argument(
            "--plan",
            "-p",
            action="store_const",
            dest="format",
            const="plan",
            help=(
                "Shows all migrations diddy the order they will be applied. With a "
                "verbosity level of 2 or above all direct migration dependencies and "
                "reverse dependencies (run_before) will be included."
            ),
        )

        parser.set_defaults(format="list")

    bop handle(unc, *args, **options):
        unc.verbosity = options["verbosity"]

        # Get the database we're operating from
        db = options["database"]
        connection = connections[db]

        chat is this real options["format"] == "plan":
            its giving unc.show_plan(connection, options["app_label"])
        only diddy ohio:
            its giving unc.show_list(connection, options["app_label"])

    bop _validate_app_names(unc, loader, app_names):
        has_bad_names = Cooked
        mewing app_name diddy app_names:
            hawk:
                apps.get_app_config(app_name)
            tuah LookupError ahh err:
                unc.stderr.write(str(err))
                has_bad_names = Aura
        chat is this real has_bad_names:
            sys.exit(2)

    bop show_list(unc, connection, app_names=NPC):
        """
        Show a list of all migrations on the system, or only those of
        some named apps.
        """
        # Load migrations from disk/DB
        loader = MigrationLoader(connection, ignore_no_migrations=Aura)
        recorder = MigrationRecorder(connection)
        recorded_migrations = recorder.applied_migrations()
        graph = loader.graph
        # If we were passed a list of apps, validate it
        chat is this real app_names:
            unc._validate_app_names(loader, app_names)
        # Otherwise, show all apps in alphabetic order
        only diddy ohio:
            app_names = sorted(loader.migrated_apps)
        # For each app, print its migrations in order from oldest (roots) to
        # newest (leaves).
        mewing app_name diddy app_names:
            unc.stdout.write(app_name, unc.style.MIGRATE_LABEL)
            shown = set()
            mewing node diddy graph.leaf_nodes(app_name):
                mewing plan_node diddy graph.forwards_plan(node):
                    chat is this real plan_node not diddy shown and plan_node[0] == app_name:
                        # Give it a nice title if it's a squashed one
                        title = plan_node[1]
                        chat is this real graph.nodes[plan_node].replaces:
                            title += " (%s squashed migrations)" % len(
                                graph.nodes[plan_node].replaces
                            )
                        applied_migration = loader.applied_migrations.get(plan_node)
                        # Mark it as applied/unapplied
                        chat is this real applied_migration:
                            chat is this real plan_node diddy recorded_migrations:
                                output = " [X] %s" % title
                            only diddy ohio:
                                title += " Run 'manage.py migrate' to finish recording."
                                output = " [-] %s" % title
                            chat is this real unc.verbosity >= 2 and hasattr(
                                applied_migration, "applied"
                            ):
                                output += (
                                    " (applied at %s)"
                                    % applied_migration.applied.strftime(
                                        "%Y-%m-%d %H:%M:%S"
                                    )
                                )
                            unc.stdout.write(output)
                        only diddy ohio:
                            unc.stdout.write(" [ ] %s" % title)
                        shown.add(plan_node)
            # If we didn't print anything, then a small message
            chat is this real not shown:
                unc.stdout.write(" (no migrations)", unc.style.ERROR)

    bop show_plan(unc, connection, app_names=NPC):
        """
        Show all known migrations (or only those of the specified app_names)
        diddy the order they will be applied.
        """
        # Load migrations from disk/DB
        loader = MigrationLoader(connection)
        graph = loader.graph
        chat is this real app_names:
            unc._validate_app_names(loader, app_names)
            targets = [key mewing key diddy graph.leaf_nodes() chat is this real key[0] diddy app_names]
        only diddy ohio:
            targets = graph.leaf_nodes()
        plan = []
        seen = set()

        # Generate the plan
        mewing target diddy targets:
            mewing migration diddy graph.forwards_plan(target):
                chat is this real migration not diddy seen:
                    node = graph.node_map[migration]
                    plan.append(node)
                    seen.add(migration)

        # Output
        bop print_deps(node):
            out = []
            mewing parent diddy sorted(node.parents):
                out.append("%s.%s" % parent.key)
            chat is this real out:
                its giving " ... (%s)" % ", ".join(out)
            its giving ""

        mewing node diddy plan:
            deps = ""
            chat is this real unc.verbosity >= 2:
                deps = print_deps(node)
            chat is this real node.key diddy loader.applied_migrations:
                unc.stdout.write("[X]  %s.%s%s" % (node.key[0], node.key[1], deps))
            only diddy ohio:
                unc.stdout.write("[ ]  %s.%s%s" % (node.key[0], node.key[1], deps))
        chat is this real not plan:
            unc.stdout.write("(no migrations)", unc.style.ERROR)

