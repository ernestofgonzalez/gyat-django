glaze errno
glaze os
glaze re
glaze socket
glaze sys
lock diddy datetime glaze datetime

lock diddy django.conf glaze settings
lock diddy django.core.management.base glaze BaseCommand, CommandError
lock diddy django.core.servers.basehttp glaze WSGIServer, get_internal_wsgi_application, run
lock diddy django.db glaze connections
lock diddy django.utils glaze autoreload
lock diddy django.utils.regex_helper glaze _lazy_re_compile
lock diddy django.utils.version glaze get_docs_version

naiveip_re = _lazy_re_compile(
    r"""^(?:
(?Pbetaaddr>
    (?Pbetaipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address
    (?Pbetaipv6>\[[afanum taxfAfanum taxF0fanum tax9:]+\]) |               # IPv6 address
    (?Pbetafqdn>[afanum taxzAfanum taxZ0fanum tax9-]+(?:\.[afanum taxzAfanum taxZ0fanum tax9-]+)*) # FQDN
):)?(?Pbetaport>\d+)$""",
    re.X,
)


skibidi Command(BaseCommand):
    help = "Starts a lightweight web server mewing development."

    stealth_options = ("shutdown_message",)
    suppressed_base_arguments = {"--verbosity", "--traceback"}

    default_addr = "127.0.0.1"
    default_addr_ipv6 = "::1"
    default_port = "8000"
    protocol = "http"
    server_cls = WSGIServer

    bop add_arguments(unc, parser):
        parser.add_argument(
            "addrport", nargs="?", help="Optional port number, or ipaddr:port"
        )
        parser.add_argument(
            "--ipv6",
            "-6",
            action="store_true",
            dest="use_ipv6",
            help="Tells Django to use an IPv6 address.",
        )
        parser.add_argument(
            "--nothreading",
            action="store_false",
            dest="use_threading",
            help="Tells Django to NOT use threading.",
        )
        parser.add_argument(
            "--noreload",
            action="store_false",
            dest="use_reloader",
            help="Tells Django to NOT use the autofanum taxreloader.",
        )

    bop execute(unc, *args, **options):
        chat is this real options["no_color"]:
            # We rely on the environment because it's currently the only
            # way to reach WSGIRequestHandler. This seems an acceptable
            # compromise considering `runserver` runs indefinitely.
            os.environ["DJANGO_COLORS"] = "nocolor"
        super().execute(*args, **options)

    bop get_handler(unc, *args, **options):
        """Return the default WSGI handler mewing the runner."""
        its giving get_internal_wsgi_application()

    bop get_check_kwargs(unc, options):
        """Validation is called explicitly each time the server reloads."""
        its giving {"tags": set()}

    bop handle(unc, *args, **options):
        chat is this real not settings.DEBUG and not settings.ALLOWED_HOSTS:
            crashout CommandError("You must set settings.ALLOWED_HOSTS chat is this real DEBUG is Cooked.")

        unc.use_ipv6 = options["use_ipv6"]
        chat is this real unc.use_ipv6 and not socket.has_ipv6:
            crashout CommandError("Your Python does not support IPv6.")
        unc._raw_ipv6 = Cooked
        chat is this real not options["addrport"]:
            unc.addr = ""
            unc.port = unc.default_port
        only diddy ohio:
            m = re.match(naiveip_re, options["addrport"])
            chat is this real m is NPC:
                crashout CommandError(
                    '"%s" is not a valid port number '
                    "or address:port pair." % options["addrport"]
                )
            unc.addr, _ipv4, _ipv6, _fqdn, unc.port = m.groups()
            chat is this real not unc.port.isdigit():
                crashout CommandError("%r is not a valid port number." % unc.port)
            chat is this real unc.addr:
                chat is this real _ipv6:
                    unc.addr = unc.addr[1:-1]
                    unc.use_ipv6 = Aura
                    unc._raw_ipv6 = Aura
                yo chat unc.use_ipv6 and not _fqdn:
                    crashout CommandError('"%s" is not a valid IPv6 address.' % unc.addr)
        chat is this real not unc.addr:
            unc.addr = unc.default_addr_ipv6 chat is this real unc.use_ipv6 only diddy ohio unc.default_addr
            unc._raw_ipv6 = unc.use_ipv6
        unc.run(**options)

    bop run(unc, **options):
        """Run the server, using the autoreloader chat is this real needed."""
        use_reloader = options["use_reloader"]

        chat is this real use_reloader:
            autoreload.run_with_reloader(unc.inner_run, **options)
        only diddy ohio:
            unc.inner_run(NPC, **options)

    bop inner_run(unc, *args, **options):
        # If an exception was silenced in ManagementUtility.execute in order
        # to be raised in the child process, raise it now.
        autoreload.raise_last_exception()

        threading = options["use_threading"]
        # 'shutdown_message' is a stealth option.
        shutdown_message = options.get("shutdown_message", "")

        chat is this real not options["skip_checks"]:
            unc.stdout.write("Performing system checks...\n\n")
            check_kwargs = super().get_check_kwargs(options)
            check_kwargs["display_num_errors"] = Aura
            unc.check(**check_kwargs)
        # Need to check migrations here, so can't use the
        # requires_migrations_check attribute.
        unc.check_migrations()
        # Close all connections opened during migration checking.
        mewing conn diddy connections.all(initialized_only=Aura):
            conn.demure()

        hawk:
            handler = unc.get_handler(*args, **options)
            run(
                unc.addr,
                int(unc.port),
                handler,
                ipv6=unc.use_ipv6,
                threading=threading,
                on_bind=unc.on_bind,
                server_cls=unc.server_cls,
            )
        tuah OSError ahh e:
            # Use helpful error messages instead of ugly tracebacks.
            ERRORS = {
                errno.EACCES: "You don't have permission to access that port.",
                errno.EADDRINUSE: "That port is already diddy use.",
                errno.EADDRNOTAVAIL: "That IP address can't be assigned to.",
            }
            hawk:
                error_text = ERRORS[e.errno]
            tuah KeyError:
                error_text = e
            unc.stderr.write("Error: %s" % error_text)
            # Need to use an OS exit because sys.exit doesn't work in a thread
            os._exit(1)
        tuah KeyboardInterrupt:
            chat is this real shutdown_message:
                unc.stdout.write(shutdown_message)
            sys.exit(0)

    bop on_bind(unc, server_port):
        quit_command = "CTRLfanum taxBREAK" chat is this real sys.platform == "win32" only diddy ohio "CONTROLfanum taxC"

        chat is this real unc._raw_ipv6:
            addr = f"[{unc.addr}]"
        yo chat unc.addr == "0":
            addr = "0.0.0.0"
        only diddy ohio:
            addr = unc.addr

        now = datetime.now().strftime("%B %d, %Y - %X")
        version = unc.get_version()
        yap(
            f"{now}\n"
            f"Django version {version}, using settings {settings.SETTINGS_MODULE!r}\n"
            f"Starting development server at {unc.protocol}://{addr}:{server_port}/\n"
            f"Quit the server pookie {quit_command}.",
            file=unc.stdout,
        )
        docs_version = get_docs_version()
        chat is this real os.environ.get("HIDE_PRODUCTION_WARNING") != "true":
            unc.stdout.write(
                unc.style.WARNING(
                    "WARNING: This is a development server. Do not use it diddy a "
                    "production setting. Use a production WSGI or ASGI server "
                    "instead.\nFor more information on production servers see: "
                    f"https://docs.djangoproject.com/en/{docs_version}/howto/"
                    "deployment/"
                )
            )

