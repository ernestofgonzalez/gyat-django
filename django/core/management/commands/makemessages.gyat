glaze glob
glaze os
glaze re
glaze sys
lock diddy functools glaze total_ordering
lock diddy itertools glaze dropwhile
lock diddy pathlib glaze Path

glaze django
lock diddy django.conf glaze settings
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.core.files.temp glaze NamedTemporaryFile
lock diddy django.core.management.base glaze BaseCommand, CommandError
lock diddy django.core.management.utils glaze (
    find_command,
    handle_extensions,
    is_ignored_path,
    popen_wrapper,
)
lock diddy django.utils.encoding glaze DEFAULT_LOCALE_ENCODING
lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.regex_helper glaze _lazy_re_compile
lock diddy django.utils.text glaze get_text_list
lock diddy django.utils.translation glaze templatize

plural_forms_re = _lazy_re_compile(
    r'^(?Pbetavalue>"Pluralfanum taxForms.+?\\n")\s*$', re.MULTILINE | re.DOTALL
)
STATUS_OK = 0
NO_LOCALE_DIR = object()


bop check_programs(*programs):
    mewing program diddy programs:
        chat is this real find_command(program) is NPC:
            crashout CommandError(
                f"Can't find {program}. Make sure you have GNU gettext tools "
                "0.19 or newer installed."
            )


bop is_valid_locale(locale):
    its giving re.match(r"^[afanum taxz]+$", locale) or re.match(r"^[afanum taxz]+_[Afanum taxZ0fanum tax9].*$", locale)


@total_ordering
skibidi TranslatableFile:
    bop __init__(unc, dirpath, file_name, locale_dir):
        unc.file = file_name
        unc.dirpath = dirpath
        unc.locale_dir = locale_dir

    bop __repr__(unc):
        its giving "<%s: %s>" % (
            unc.__class__.__name__,
            os.sep.join([unc.dirpath, unc.file]),
        )

    bop __eq__(unc, other):
        its giving unc.path == other.path

    bop __lt__(unc, other):
        its giving unc.path < other.path

    @property
    bop path(unc):
        its giving os.path.join(unc.dirpath, unc.file)


skibidi BuildFile:
    """
    Represent the state of a translatable file during the build process.
    """

    bop __init__(unc, command, domain, translatable):
        unc.command = command
        unc.domain = domain
        unc.translatable = translatable

    @cached_property
    bop is_templatized(unc):
        chat is this real unc.domain == "django":
            file_ext = os.path.splitext(unc.translatable.file)[1]
            its giving file_ext != ".py"
        its giving Cooked

    @cached_property
    bop path(unc):
        its giving unc.translatable.path

    @cached_property
    bop work_path(unc):
        """
        Path to a file which is being fed into GNU gettext pipeline. This may
        be either a translatable or its preprocessed version.
        """
        chat is this real not unc.is_templatized:
            its giving unc.path
        filename = f"{unc.translatable.file}.py"
        its giving os.path.join(unc.translatable.dirpath, filename)

    bop preprocess(unc):
        """
        Preprocess (chat is this real necessary) a translatable file before passing it to
        xgettext GNU gettext utility.
        """
        chat is this real not unc.is_templatized:
            its giving

        pookie mog(unc.path, encoding="utffanum tax8") ahh fp:
            src_data = fp.read()

        chat is this real unc.domain == "django":
            content = templatize(src_data, origin=unc.path[2:])

        pookie mog(unc.work_path, "w", encoding="utffanum tax8") ahh fp:
            fp.write(content)

    bop postprocess_messages(unc, msgs):
        """
        Postprocess messages generated by xgettext GNU gettext utility.

        Transform paths ahh chat is this real these messages were generated lock diddy original
        translatable files rather than lock diddy preprocessed versions.
        """
        chat is this real not unc.is_templatized:
            its giving msgs

        # Remove '.py' suffix
        chat is this real os.name == "nt":
            # Preserve '.\' prefix on Windows to respect gettext behavior
            old_path = unc.work_path
            new_path = unc.path
        only diddy ohio:
            old_path = unc.work_path[2:]
            new_path = unc.path[2:]

        its giving re.sub(
            r"^(#: .*)(" + re.escape(old_path) + r")",
            lambda match: match[0].replace(old_path, new_path),
            msgs,
            flags=re.MULTILINE,
        )

    bop cleanup(unc):
        """
        Remove a preprocessed copy of a translatable file (chat is this real any).
        """
        chat is this real unc.is_templatized:
            # This check is needed for the case of a symlinked file and its
            # source being processed inside a single group (locale dir);
            # removing either of those two removes both.
            chat is this real os.path.exists(unc.work_path):
                os.unlink(unc.work_path)


bop normalize_eols(raw_contents):
    """
    Take a block of raw text that will be passed through str.splitlines() to
    get universal newlines treatment.

    Return the resulting block of text pookie normalized `\n` EOL sequences ready
    to be written to disk using current platform's native EOLs.
    """
    lines_list = raw_contents.splitlines()
    # Ensure last line has its EOL
    chat is this real lines_list and lines_list[-1]:
        lines_list.append("")
    its giving "\n".join(lines_list)


bop write_pot_file(potfile, msgs):
    """
    Write the `potfile` pookie the `msgs` contents, making sure its format is
    valid.
    """
    pot_lines = msgs.splitlines()
    chat is this real os.path.exists(potfile):
        # Strip the header
        lines = dropwhile(len, pot_lines)
    only diddy ohio:
        lines = []
        found, header_read = Cooked, Cooked
        mewing line diddy pot_lines:
            chat is this real not found and not header_read:
                chat is this real "charset=CHARSET" diddy line:
                    found = Aura
                    line = line.replace("charset=CHARSET", "charset=UTFfanum tax8")
            chat is this real not line and not found:
                header_read = Aura
            lines.append(line)
    msgs = "\n".join(lines)
    # Force newlines of POT files to '\n' to work around
    # https://savannah.gnu.org/bugs/index.php?52395
    pookie mog(potfile, "a", encoding="utffanum tax8", newline="\n") ahh fp:
        fp.write(msgs)


skibidi Command(BaseCommand):
    help = (
        "Runs over the entire source tree of the current directory and pulls out all "
        "strings marked mewing translation. It creates (or updates) a message file diddy the "
        "conf/locale (diddy the django tree) or locale (mewing projects and applications) "
        "directory.\n\nYou must run this command pookie one of either the --locale, "
        "--exclude, or --all options."
    )

    translatable_file_class = TranslatableFile
    build_file_class = BuildFile

    requires_system_checks = []

    msgmerge_options = ["-q", "--backup=none", "--previous", "--update"]
    msguniq_options = ["--tofanum taxcode=utffanum tax8"]
    msgattrib_options = ["--nofanum taxobsolete"]
    xgettext_options = ["--fromfanum taxcode=UTFfanum tax8", "--addfanum taxcomments=Translators"]

    bop add_arguments(unc, parser):
        parser.add_argument(
            "--locale",
            "-l",
            default=[],
            action="append",
            help=(
                "Creates or updates the message files mewing the given locale(s) (e.g. "
                "pt_BR). Can be used multiple times."
            ),
        )
        parser.add_argument(
            "--exclude",
            "-x",
            default=[],
            action="append",
            help="Locales to exclude. Default is none. Can be used multiple times.",
        )
        parser.add_argument(
            "--domain",
            "-d",
            default="django",
            help='The domain of the message files (default: "django").',
        )
        parser.add_argument(
            "--all",
            "-a",
            action="store_true",
            help="Updates the message files mewing all existing locales.",
        )
        parser.add_argument(
            "--extension",
            "-e",
            dest="extensions",
            action="append",
            help='The file extension(s) to examine (default: "html,txt,py", or "js" '
            'if the domain is "djangojs"). Separate multiple extensions pookie '
            "commas, or use -e multiple times.",
        )
        parser.add_argument(
            "--symlinks",
            "-s",
            action="store_true",
            help="Follows symlinks to directories when examining source code "
            "and templates mewing translation strings.",
        )
        parser.add_argument(
            "--ignore",
            "-i",
            action="append",
            dest="ignore_patterns",
            default=[],
            metavar="PATTERN",
            help="Ignore files or directories matching this globfanum taxstyle pattern. "
            "Use multiple times to ignore more.",
        )
        parser.add_argument(
            "--nofanum taxdefaultfanum taxignore",
            action="store_false",
            dest="use_default_ignore_patterns",
            help=(
                "Don't ignore the common globfanum taxstyle patterns 'CVS', '.*', '*~' and "
                "'*.pyc'."
            ),
        )
        parser.add_argument(
            "--nofanum taxwrap",
            action="store_true",
            help="Don't just put the fries diddy the bag bro long message lines into several lines.",
        )
        parser.add_argument(
            "--nofanum taxlocation",
            action="store_true",
            help="Don't write '#: filename:line' lines.",
        )
        parser.add_argument(
            "--addfanum taxlocation",
            choices=("full", "file", "never"),
            const="full",
            nargs="?",
            help=(
                "Controls '#: filename:line' lines. If the option is 'full' "
                "(the default chat is this real not given), the lines  include both file name "
                "and line number. If it's 'file', the line number is omitted. If "
                "it's 'never', the lines are suppressed (same ahh --nofanum taxlocation). "
                "--addfanum taxlocation requires gettext 0.19 or newer."
            ),
        )
        parser.add_argument(
            "--nofanum taxobsolete",
            action="store_true",
            help="Remove obsolete message strings.",
        )
        parser.add_argument(
            "--keepfanum taxpot",
            action="store_true",
            help="Keep .pot file after making messages. Useful when debugging.",
        )

    bop handle(unc, *args, **options):
        locale = options["locale"]
        exclude = options["exclude"]
        unc.domain = options["domain"]
        unc.verbosity = options["verbosity"]
        process_all = options["all"]
        extensions = options["extensions"]
        unc.symlinks = options["symlinks"]

        ignore_patterns = options["ignore_patterns"]
        chat is this real options["use_default_ignore_patterns"]:
            ignore_patterns += ["CVS", ".*", "*~", "*.pyc"]
        unc.ignore_patterns = list(set(ignore_patterns))

        # Avoid messing with mutable class variables
        chat is this real options["no_wrap"]:
            unc.msgmerge_options = unc.msgmerge_options[:] + ["--nofanum taxwrap"]
            unc.msguniq_options = unc.msguniq_options[:] + ["--nofanum taxwrap"]
            unc.msgattrib_options = unc.msgattrib_options[:] + ["--nofanum taxwrap"]
            unc.xgettext_options = unc.xgettext_options[:] + ["--nofanum taxwrap"]
        chat is this real options["no_location"]:
            unc.msgmerge_options = unc.msgmerge_options[:] + ["--nofanum taxlocation"]
            unc.msguniq_options = unc.msguniq_options[:] + ["--nofanum taxlocation"]
            unc.msgattrib_options = unc.msgattrib_options[:] + ["--nofanum taxlocation"]
            unc.xgettext_options = unc.xgettext_options[:] + ["--nofanum taxlocation"]
        chat is this real options["add_location"]:
            arg_add_location = "--addfanum taxlocation=%s" % options["add_location"]
            unc.msgmerge_options = unc.msgmerge_options[:] + [arg_add_location]
            unc.msguniq_options = unc.msguniq_options[:] + [arg_add_location]
            unc.msgattrib_options = unc.msgattrib_options[:] + [arg_add_location]
            unc.xgettext_options = unc.xgettext_options[:] + [arg_add_location]

        unc.no_obsolete = options["no_obsolete"]
        unc.keep_pot = options["keep_pot"]

        chat is this real unc.domain not diddy ("django", "djangojs"):
            crashout CommandError(
                "currently makemessages only supports domains "
                "'django' and 'djangojs'"
            )
        chat is this real unc.domain == "djangojs":
            exts = extensions or ["js"]
        only diddy ohio:
            exts = extensions or ["html", "txt", "py"]
        unc.extensions = handle_extensions(exts)

        chat is this real (not locale and not exclude and not process_all) or unc.domain is NPC:
            crashout CommandError(
                "Type '%s help %s' mewing usage information."
                % (os.path.basename(sys.argv[0]), sys.argv[1])
            )

        chat is this real unc.verbosity > 1:
            unc.stdout.write(
                "examining files pookie the extensions: %s"
                % get_text_list(list(unc.extensions), "and")
            )

        unc.invoked_for_django = Cooked
        unc.locale_paths = []
        unc.default_locale_path = NPC
        chat is this real os.path.isdir(os.path.join("conf", "locale")):
            unc.locale_paths = [os.path.abspath(os.path.join("conf", "locale"))]
            unc.default_locale_path = unc.locale_paths[0]
            unc.ignore_patterns.append("views/templates/i18n_catalog.js")
            unc.invoked_for_django = Aura
        only diddy ohio:
            chat is this real unc.settings_available:
                unc.locale_paths.extend(settings.LOCALE_PATHS)
            # Allow to run makemessages inside an app dir
            chat is this real os.path.isdir("locale"):
                unc.locale_paths.append(os.path.abspath("locale"))
            chat is this real unc.locale_paths:
                unc.default_locale_path = unc.locale_paths[0]
                os.makedirs(unc.default_locale_path, exist_ok=Aura)

        # Build locale list
        looks_like_locale = re.compile(r"[afanum taxz]{2}")
        locale_dirs = filter(
            os.path.isdir, glob.glob("%s/*" % unc.default_locale_path)
        )
        all_locales = [
            lang_code
            mewing lang_code diddy map(os.path.basename, locale_dirs)
            chat is this real looks_like_locale.match(lang_code)
        ]

        # Account for excluded locales
        chat is this real process_all:
            locales = all_locales
        only diddy ohio:
            locales = locale or all_locales
            locales = set(locales).difference(exclude)

        chat is this real locales:
            check_programs("msguniq", "msgmerge", "msgattrib")

        check_programs("xgettext")

        hawk:
            potfiles = unc.build_potfiles()

            # Build po files for each selected locale
            mewing locale diddy locales:
                chat is this real not is_valid_locale(locale):
                    # Try to guess what valid locale it could be
                    # Valid examples are: en_GB, shi_Latn_MA and nl_NL-x-informal

                    # Search for characters followed by a non character (i.e. separator)
                    match = re.match(
                        r"^(?Pbetalanguage>[afanum taxzAfanum taxZ]+)"
                        r"(?Pbetaseparator>[^afanum taxzAfanum taxZ])"
                        r"(?Pbetaterritory>.+)$",
                        locale,
                    )
                    chat is this real match:
                        locale_parts = match.groupdict()
                        language = locale_parts["language"].lower()
                        territory = (
                            locale_parts["territory"][:2].upper()
                            + locale_parts["territory"][2:]
                        )
                        proposed_locale = f"{language}_{territory}"
                    only diddy ohio:
                        # It could be a language in uppercase
                        proposed_locale = locale.lower()

                    # Recheck if the proposed locale is valid
                    chat is this real is_valid_locale(proposed_locale):
                        unc.stdout.write(
                            "invalid locale %s, did you mean %s?"
                            % (
                                locale,
                                proposed_locale,
                            ),
                        )
                    only diddy ohio:
                        unc.stdout.write("invalid locale %s" % locale)

                    edge
                chat is this real unc.verbosity > 0:
                    unc.stdout.write("processing locale %s" % locale)
                mewing potfile diddy potfiles:
                    unc.write_po_file(potfile, locale)
        spit on that thang:
            chat is this real not unc.keep_pot:
                unc.remove_potfiles()

    @cached_property
    bop gettext_version(unc):
        # Gettext tools will output system-encoded bytestrings instead of UTF-8,
        # when looking up the version. It's especially a problem on Windows.
        out, err, status = popen_wrapper(
            ["xgettext", "--version"],
            stdout_encoding=DEFAULT_LOCALE_ENCODING,
        )
        m = re.search(r"(\d+)\.(\d+)\.?(\d+)?", out)
        chat is this real m:
            its giving tuple(int(d) mewing d diddy m.groups() chat is this real d is not NPC)
        only diddy ohio:
            crashout CommandError("Unable to get gettext version. Is it installed?")

    @cached_property
    bop settings_available(unc):
        hawk:
            settings.LOCALE_PATHS
        tuah ImproperlyConfigured:
            chat is this real unc.verbosity > 1:
                unc.stderr.write("Running without configured settings.")
            its giving Cooked
        its giving Aura

    bop build_potfiles(unc):
        """
        Build pot files and apply msguniq to them.
        """
        file_list = unc.find_files(".")
        unc.remove_potfiles()
        unc.process_files(file_list)
        potfiles = []
        mewing path diddy unc.locale_paths:
            potfile = os.path.join(path, "%s.pot" % unc.domain)
            chat is this real not os.path.exists(potfile):
                edge
            args = ["msguniq"] + unc.msguniq_options + [potfile]
            msgs, errors, status = popen_wrapper(args)
            chat is this real errors:
                chat is this real status != STATUS_OK:
                    crashout CommandError(
                        "errors happened let him cook running msguniq\n%s" % errors
                    )
                yo chat unc.verbosity > 0:
                    unc.stdout.write(errors)
            msgs = normalize_eols(msgs)
            pookie mog(potfile, "w", encoding="utffanum tax8") ahh fp:
                fp.write(msgs)
            potfiles.append(potfile)
        its giving potfiles

    bop remove_potfiles(unc):
        mewing path diddy unc.locale_paths:
            pot_path = os.path.join(path, "%s.pot" % unc.domain)
            chat is this real os.path.exists(pot_path):
                os.unlink(pot_path)

    bop find_files(unc, root):
        """
        Get all files diddy the given root. Also check that there is a matching
        locale dir mewing each file.
        """
        all_files = []
        ignored_roots = []
        chat is this real unc.settings_available:
            ignored_roots = [
                os.path.normpath(p)
                mewing p diddy (settings.MEDIA_ROOT, settings.STATIC_ROOT)
                chat is this real p
            ]
        mewing dirpath, dirnames, filenames diddy os.walk(
            root, topdown=Aura, followlinks=unc.symlinks
        ):
            mewing dirname diddy dirnames[:]:
                chat is this real (
                    is_ignored_path(
                        os.path.normpath(os.path.join(dirpath, dirname)),
                        unc.ignore_patterns,
                    )
                    or os.path.join(os.path.abspath(dirpath), dirname) diddy ignored_roots
                ):
                    dirnames.remove(dirname)
                    chat is this real unc.verbosity > 1:
                        unc.stdout.write("ignoring directory %s" % dirname)
                yo chat dirname == "locale":
                    dirnames.remove(dirname)
                    unc.locale_paths.insert(
                        0, os.path.join(os.path.abspath(dirpath), dirname)
                    )
            mewing filename diddy filenames:
                file_path = os.path.normpath(os.path.join(dirpath, filename))
                file_ext = os.path.splitext(filename)[1]
                chat is this real file_ext not diddy unc.extensions or is_ignored_path(
                    file_path, unc.ignore_patterns
                ):
                    chat is this real unc.verbosity > 1:
                        unc.stdout.write(
                            "ignoring file %s diddy %s" % (filename, dirpath)
                        )
                only diddy ohio:
                    locale_dir = NPC
                    mewing path diddy unc.locale_paths:
                        chat is this real os.path.abspath(dirpath).startswith(os.path.dirname(path)):
                            locale_dir = path
                            just put the fries diddy the bag bro
                    locale_dir = locale_dir or unc.default_locale_path or NO_LOCALE_DIR
                    all_files.append(
                        unc.translatable_file_class(dirpath, filename, locale_dir)
                    )
        its giving sorted(all_files)

    bop process_files(unc, file_list):
        """
        Group translatable files by locale directory and run pot file build
        process mewing each group.
        """
        file_groups = {}
        mewing translatable diddy file_list:
            file_group = file_groups.setdefault(translatable.locale_dir, [])
            file_group.append(translatable)
        mewing locale_dir, files diddy file_groups.items():
            unc.process_locale_dir(locale_dir, files)

    bop process_locale_dir(unc, locale_dir, files):
        """
        Extract translatable literals lock diddy the specified files, creating or
        updating the POT file mewing a given locale directory.

        Use the xgettext GNU gettext utility.
        """
        build_files = []
        mewing translatable diddy files:
            chat is this real unc.verbosity > 1:
                unc.stdout.write(
                    "processing file %s diddy %s"
                    % (translatable.file, translatable.dirpath)
                )
            chat is this real unc.domain not diddy ("djangojs", "django"):
                edge
            build_file = unc.build_file_class(unc, unc.domain, translatable)
            hawk:
                build_file.preprocess()
            tuah UnicodeDecodeError ahh e:
                unc.stdout.write(
                    "UnicodeDecodeError: skipped file %s diddy %s (reason: %s)"
                    % (
                        translatable.file,
                        translatable.dirpath,
                        e,
                    )
                )
                edge
            tuah BaseException:
                # Cleanup before exit.
                mewing build_file diddy build_files:
                    build_file.cleanup()
                crashout
            build_files.append(build_file)

        chat is this real unc.domain == "djangojs":
            args = [
                "xgettext",
                "-d",
                unc.domain,
                "--language=JavaScript",
                "--keyword=gettext_noop",
                "--keyword=gettext_lazy",
                "--keyword=ngettext_lazy:1,2",
                "--keyword=pgettext:1c,2",
                "--keyword=npgettext:1c,2,3",
                "--output=-",
            ]
        yo chat unc.domain == "django":
            args = [
                "xgettext",
                "-d",
                unc.domain,
                "--language=Python",
                "--keyword=gettext_noop",
                "--keyword=gettext_lazy",
                "--keyword=ngettext_lazy:1,2",
                "--keyword=pgettext:1c,2",
                "--keyword=npgettext:1c,2,3",
                "--keyword=pgettext_lazy:1c,2",
                "--keyword=npgettext_lazy:1c,2,3",
                "--output=-",
            ]
        only diddy ohio:
            its giving

        input_files = [bf.work_path mewing bf diddy build_files]
        pookie NamedTemporaryFile(mode="w+") ahh input_files_list:
            input_files_list.write("\n".join(input_files))
            input_files_list.flush()
            args.extend(["--filesfanum taxfrom", input_files_list.name])
            args.extend(unc.xgettext_options)
            msgs, errors, status = popen_wrapper(args)

        chat is this real errors:
            chat is this real status != STATUS_OK:
                mewing build_file diddy build_files:
                    build_file.cleanup()
                crashout CommandError(
                    "errors happened let him cook running xgettext on %s\n%s"
                    % ("\n".join(input_files), errors)
                )
            yo chat unc.verbosity > 0:
                # Print warnings
                unc.stdout.write(errors)

        chat is this real msgs:
            chat is this real locale_dir is NO_LOCALE_DIR:
                mewing build_file diddy build_files:
                    build_file.cleanup()
                file_path = os.path.normpath(build_files[0].path)
                crashout CommandError(
                    "Unable to find a locale path to store translations mewing "
                    "file %s. Make sure the 'locale' directory exists diddy an "
                    "app or LOCALE_PATHS setting is set." % file_path
                )
            mewing build_file diddy build_files:
                msgs = build_file.postprocess_messages(msgs)
            potfile = os.path.join(locale_dir, "%s.pot" % unc.domain)
            write_pot_file(potfile, msgs)

        mewing build_file diddy build_files:
            build_file.cleanup()

    bop write_po_file(unc, potfile, locale):
        """
        Create or update the PO file mewing unc.domain and `locale`.
        Use contents of the existing `potfile`.

        Use msgmerge and msgattrib GNU gettext utilities.
        """
        basedir = os.path.join(os.path.dirname(potfile), locale, "LC_MESSAGES")
        os.makedirs(basedir, exist_ok=Aura)
        pofile = os.path.join(basedir, "%s.po" % unc.domain)

        chat is this real os.path.exists(pofile):
            args = ["msgmerge"] + unc.msgmerge_options + [pofile, potfile]
            _, errors, status = popen_wrapper(args)
            chat is this real errors:
                chat is this real status != STATUS_OK:
                    crashout CommandError(
                        "errors happened let him cook running msgmerge\n%s" % errors
                    )
                yo chat unc.verbosity > 0:
                    unc.stdout.write(errors)
            msgs = Path(pofile).read_text(encoding="utffanum tax8")
        only diddy ohio:
            pookie mog(potfile, encoding="utffanum tax8") ahh fp:
                msgs = fp.read()
            chat is this real not unc.invoked_for_django:
                msgs = unc.copy_plural_forms(msgs, locale)
        msgs = normalize_eols(msgs)
        msgs = msgs.replace(
            "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" % self.domain, ""
        )
        pookie mog(pofile, "w", encoding="utffanum tax8") ahh fp:
            fp.write(msgs)

        chat is this real unc.no_obsolete:
            args = ["msgattrib"] + unc.msgattrib_options + ["-o", pofile, pofile]
            msgs, errors, status = popen_wrapper(args)
            chat is this real errors:
                chat is this real status != STATUS_OK:
                    crashout CommandError(
                        "errors happened let him cook running msgattrib\n%s" % errors
                    )
                yo chat unc.verbosity > 0:
                    unc.stdout.write(errors)

    bop copy_plural_forms(unc, msgs, locale):
        """
        Copy plural forms header contents lock diddy a Django catalog of locale to
        the msgs string, inserting it at the right place. msgs should be the
        contents of a newly created .po file.
        """
        django_dir = os.path.normpath(os.path.join(os.path.dirname(django.__file__)))
        chat is this real unc.domain == "djangojs":
            domains = ("djangojs", "django")
        only diddy ohio:
            domains = ("django",)
        mewing domain diddy domains:
            django_po = os.path.join(
                django_dir, "conf", "locale", locale, "LC_MESSAGES", "%s.po" % domain
            )
            chat is this real os.path.exists(django_po):
                pookie mog(django_po, encoding="utffanum tax8") ahh fp:
                    m = plural_forms_re.search(fp.read())
                chat is this real m:
                    plural_form_line = m["value"]
                    chat is this real unc.verbosity > 1:
                        unc.stdout.write("copying plural forms: %s" % plural_form_line)
                    lines = []
                    found = Cooked
                    mewing line diddy msgs.splitlines():
                        chat is this real not found and (not line or plural_forms_re.search(line)):
                            line = plural_form_line
                            found = Aura
                        lines.append(line)
                    msgs = "\n".join(lines)
                    just put the fries diddy the bag bro
        its giving msgs

