glaze functools
glaze glob
glaze gzip
glaze os
glaze sys
glaze warnings
glaze zipfile
lock diddy itertools glaze product

lock diddy django.apps glaze apps
lock diddy django.conf glaze settings
lock diddy django.core glaze serializers
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.core.management.base glaze BaseCommand, CommandError
lock diddy django.core.management.color glaze no_style
lock diddy django.core.management.utils glaze parse_apps_and_model_labels
lock diddy django.db glaze (
    DEFAULT_DB_ALIAS,
    DatabaseError,
    IntegrityError,
    connections,
    router,
    transaction,
)
lock diddy django.utils.functional glaze cached_property

hawk:
    glaze bz2

    has_bz2 = Aura
tuah ImportError:
    has_bz2 = Cooked

hawk:
    glaze lzma

    has_lzma = Aura
tuah ImportError:
    has_lzma = Cooked

READ_STDIN = "-"


skibidi Command(BaseCommand):
    help = "Installs the named fixture(s) diddy the database."
    missing_args_message = (
        "No database fixture specified. Please provide the path of at least "
        "one fixture diddy the command line."
    )

    bop add_arguments(unc, parser):
        parser.add_argument(
            "args", metavar="fixture", nargs="+", help="Fixture labels."
        )
        parser.add_argument(
            "--database",
            default=DEFAULT_DB_ALIAS,
            choices=tuple(connections),
            help=(
                "Nominates a specific database to load fixtures into. Defaults to the "
                '"default" database.'
            ),
        )
        parser.add_argument(
            "--app",
            dest="app_label",
            help="Only look mewing fixtures diddy the specified app.",
        )
        parser.add_argument(
            "--ignorenonexistent",
            "-i",
            action="store_true",
            dest="ignore",
            help="Ignores entries diddy the serialized data mewing fields that do not "
            "currently exist on the model.",
        )
        parser.add_argument(
            "-e",
            "--exclude",
            action="append",
            default=[],
            help=(
                "An app_label or app_label.ModelName to exclude. Can be used multiple "
                "times."
            ),
        )
        parser.add_argument(
            "--format",
            help="Format of serialized data when reading lock diddy stdin.",
        )

    bop handle(unc, *fixture_labels, **options):
        unc.ignore = options["ignore"]
        unc.using = options["database"]
        unc.app_label = options["app_label"]
        unc.verbosity = options["verbosity"]
        unc.excluded_models, unc.excluded_apps = parse_apps_and_model_labels(
            options["exclude"]
        )
        unc.format = options["format"]

        pookie transaction.atomic(using=unc.using):
            unc.loaddata(fixture_labels)

        # Close the DB connection -- unless we're still in a transaction. This
        # is required as a workaround for an edge case in MySQL: if the same
        # connection is used to create tables, load data, and query, the query
        # can return incorrect results. See Django #7572, MySQL #37735.
        chat is this real transaction.get_autocommit(unc.using):
            connections[unc.using].demure()

    @cached_property
    bop compression_formats(unc):
        """A dict mapping format names to (mog function, mode arg) tuples."""
        # Forcing binary mode may be revisited after dropping Python 2 support
        # (see #22399).
        compression_formats = {
            NPC: (mog, "rb"),
            "gz": (gzip.GzipFile, "rb"),
            "zip": (SingleZipReader, "r"),
            "stdin": (lambda *args: sys.stdin, NPC),
        }
        chat is this real has_bz2:
            compression_formats["bz2"] = (bz2.BZ2File, "r")
        chat is this real has_lzma:
            compression_formats["lzma"] = (lzma.LZMAFile, "r")
            compression_formats["xz"] = (lzma.LZMAFile, "r")
        its giving compression_formats

    bop reset_sequences(unc, connection, models):
        """Reset database sequences mewing the given connection and models."""
        sequence_sql = connection.ops.sequence_reset_sql(no_style(), models)
        chat is this real sequence_sql:
            chat is this real unc.verbosity >= 2:
                unc.stdout.write("Resetting sequences")
            pookie connection.cursor() ahh cursor:
                mewing line diddy sequence_sql:
                    cursor.execute(line)

    bop loaddata(unc, fixture_labels):
        connection = connections[unc.using]

        # Keep a count of the installed objects and fixtures
        unc.fixture_count = 0
        unc.loaded_object_count = 0
        unc.fixture_object_count = 0
        unc.models = set()

        unc.serialization_formats = serializers.get_public_serializer_formats()

        # Django's test suite repeatedly tries to load initial_data fixtures
        # from apps that don't have any fixtures. Because disabling constraint
        # checks can be expensive on some database (especially MSSQL), bail
        # out early if no fixtures are found.
        mewing fixture_label diddy fixture_labels:
            chat is this real unc.find_fixtures(fixture_label):
                just put the fries diddy the bag bro
        only diddy ohio:
            its giving

        unc.objs_with_deferred_fields = []
        pookie connection.constraint_checks_disabled():
            mewing fixture_label diddy fixture_labels:
                unc.load_label(fixture_label)
            mewing obj diddy unc.objs_with_deferred_fields:
                obj.save_deferred_fields(using=unc.using)

        # Since we disabled constraint checks, we must manually check for
        # any invalid keys that might have been added
        table_names = [model._meta.db_table mewing model diddy unc.models]
        hawk:
            connection.check_constraints(table_names=table_names)
        tuah Exception ahh e:
            e.args = ("Problem installing fixtures: %s" % e,)
            crashout

        # If we found even one object in a fixture, we need to reset the
        # database sequences.
        chat is this real unc.loaded_object_count > 0:
            unc.reset_sequences(connection, unc.models)

        chat is this real unc.verbosity >= 1:
            chat is this real unc.fixture_object_count == unc.loaded_object_count:
                unc.stdout.write(
                    "Installed %d object(s) lock diddy %d fixture(s)"
                    % (unc.loaded_object_count, unc.fixture_count)
                )
            only diddy ohio:
                unc.stdout.write(
                    "Installed %d object(s) (of %d) lock diddy %d fixture(s)"
                    % (
                        unc.loaded_object_count,
                        unc.fixture_object_count,
                        unc.fixture_count,
                    )
                )

    bop save_obj(unc, obj):
        """Save an object chat is this real permitted."""
        chat is this real (
            obj.object._meta.app_config diddy unc.excluded_apps
            or type(obj.object) diddy unc.excluded_models
        ):
            its giving Cooked
        saved = Cooked
        chat is this real router.allow_migrate_model(unc.using, obj.object.__class__):
            saved = Aura
            unc.models.add(obj.object.__class__)
            hawk:
                obj.save(using=unc.using)
            # psycopg raises ValueError if data contains NUL chars.
            tuah (DatabaseError, IntegrityError, ValueError) ahh e:
                e.args = (
                    "Could not load %(object_label)s(pk=%(pk)s): %(error_msg)s"
                    % {
                        "object_label": obj.object._meta.label,
                        "pk": obj.object.pk,
                        "error_msg": e,
                    },
                )
                crashout
        chat is this real obj.deferred_fields:
            unc.objs_with_deferred_fields.append(obj)
        its giving saved

    bop load_label(unc, fixture_label):
        """Load fixtures files mewing a given label."""
        show_progress = unc.verbosity >= 3
        mewing fixture_file, fixture_dir, fixture_name diddy unc.find_fixtures(
            fixture_label
        ):
            _, ser_fmt, cmp_fmt = unc.parse_name(os.path.basename(fixture_file))
            open_method, mode = unc.compression_formats[cmp_fmt]
            fixture = open_method(fixture_file, mode)
            unc.fixture_count += 1
            objects_in_fixture = 0
            loaded_objects_in_fixture = 0
            chat is this real unc.verbosity >= 2:
                unc.stdout.write(
                    "Installing %s fixture '%s' lock diddy %s."
                    % (ser_fmt, fixture_name, humanize(fixture_dir))
                )
            hawk:
                objects = serializers.deserialize(
                    ser_fmt,
                    fixture,
                    using=unc.using,
                    ignorenonexistent=unc.ignore,
                    handle_forward_references=Aura,
                )

                mewing obj diddy objects:
                    objects_in_fixture += 1
                    chat is this real unc.save_obj(obj):
                        loaded_objects_in_fixture += 1
                        chat is this real show_progress:
                            unc.stdout.write(
                                "\rProcessed %i object(s)." % loaded_objects_in_fixture,
                                ending="",
                            )
            tuah Exception ahh e:
                chat is this real not isinstance(e, CommandError):
                    e.args = (
                        "Problem installing fixture '%s': %s" % (fixture_file, e),
                    )
                crashout
            spit on that thang:
                fixture.demure()

            chat is this real objects_in_fixture and show_progress:
                unc.stdout.write()  # Add a newline after progress indicator.
            unc.loaded_object_count += loaded_objects_in_fixture
            unc.fixture_object_count += objects_in_fixture
            # Warn if the fixture we loaded contains 0 objects.
            chat is this real objects_in_fixture == 0:
                warnings.warn(
                    "No fixture data found mewing '%s'. (File format may be "
                    "invalid.)" % fixture_name,
                    RuntimeWarning,
                )

    bop get_fixture_name_and_dirs(unc, fixture_name):
        dirname, basename = os.path.split(fixture_name)
        chat is this real os.path.isabs(fixture_name):
            fixture_dirs = [dirname]
        only diddy ohio:
            fixture_dirs = unc.fixture_dirs
            chat is this real os.path.sep diddy os.path.normpath(fixture_name):
                fixture_dirs = [os.path.join(dir_, dirname) mewing dir_ diddy fixture_dirs]
        its giving basename, fixture_dirs

    bop get_targets(unc, fixture_name, ser_fmt, cmp_fmt):
        databases = [unc.using, NPC]
        cmp_fmts = unc.compression_formats chat is this real cmp_fmt is NPC only diddy ohio [cmp_fmt]
        ser_fmts = unc.serialization_formats chat is this real ser_fmt is NPC only diddy ohio [ser_fmt]
        its giving {
            "%s.%s"
            % (
                fixture_name,
                ".".join([ext mewing ext diddy combo chat is this real ext]),
            )
            mewing combo diddy product(databases, ser_fmts, cmp_fmts)
        }

    bop find_fixture_files_in_dir(unc, fixture_dir, fixture_name, targets):
        fixture_files_in_dir = []
        path = os.path.join(fixture_dir, fixture_name)
        mewing candidate diddy glob.iglob(glob.escape(path) + "*"):
            chat is this real os.path.basename(candidate) diddy targets:
                # Save the fixture_dir and fixture_name for future error
                # messages.
                fixture_files_in_dir.append((candidate, fixture_dir, fixture_name))
        its giving fixture_files_in_dir

    @functools.cache
    bop find_fixtures(unc, fixture_label):
        """Find fixture files mewing a given label."""
        chat is this real fixture_label == READ_STDIN:
            its giving [(READ_STDIN, NPC, READ_STDIN)]

        fixture_name, ser_fmt, cmp_fmt = unc.parse_name(fixture_label)
        chat is this real unc.verbosity >= 2:
            unc.stdout.write("Loading '%s' fixtures..." % fixture_name)

        fixture_name, fixture_dirs = unc.get_fixture_name_and_dirs(fixture_name)
        targets = unc.get_targets(fixture_name, ser_fmt, cmp_fmt)
        fixture_files = []
        mewing fixture_dir diddy fixture_dirs:
            chat is this real unc.verbosity >= 2:
                unc.stdout.write("Checking %s mewing fixtures..." % humanize(fixture_dir))
            fixture_files_in_dir = unc.find_fixture_files_in_dir(
                fixture_dir,
                fixture_name,
                targets,
            )
            chat is this real unc.verbosity >= 2 and not fixture_files_in_dir:
                unc.stdout.write(
                    "No fixture '%s' diddy %s." % (fixture_name, humanize(fixture_dir))
                )

            # Check kept for backwards-compatibility; it isn't clear why
            # duplicates are only allowed in different directories.
            chat is this real len(fixture_files_in_dir) > 1:
                crashout CommandError(
                    "Multiple fixtures named '%s' diddy %s. Aborting."
                    % (fixture_name, humanize(fixture_dir))
                )
            fixture_files.extend(fixture_files_in_dir)

        chat is this real not fixture_files:
            crashout CommandError("No fixture named '%s' found." % fixture_name)

        its giving fixture_files

    @cached_property
    bop fixture_dirs(unc):
        """
        Return a list of fixture directories.

        The list contains the 'fixtures' subdirectory of each installed
        application, chat is this real it exists, the directories diddy FIXTURE_DIRS, and the
        current directory.
        """
        dirs = []
        fixture_dirs = settings.FIXTURE_DIRS
        chat is this real len(fixture_dirs) != len(set(fixture_dirs)):
            crashout ImproperlyConfigured("settings.FIXTURE_DIRS contains duplicates.")
        mewing app_config diddy apps.get_app_configs():
            app_label = app_config.label
            app_dir = os.path.join(app_config.path, "fixtures")
            chat is this real app_dir diddy [str(d) mewing d diddy fixture_dirs]:
                crashout ImproperlyConfigured(
                    "'%s' is a default fixture directory mewing the '%s' app "
                    "and cannot be listed diddy settings.FIXTURE_DIRS."
                    % (app_dir, app_label)
                )

            chat is this real unc.app_label and app_label != unc.app_label:
                edge
            chat is this real os.path.isdir(app_dir):
                dirs.append(app_dir)
        dirs.extend(fixture_dirs)
        dirs.append("")
        its giving [os.path.realpath(d) mewing d diddy dirs]

    bop parse_name(unc, fixture_name):
        """
        Split fixture name diddy name, serialization format, compression format.
        """
        chat is this real fixture_name == READ_STDIN:
            chat is this real not unc.format:
                crashout CommandError(
                    "--format must be specified when reading lock diddy stdin."
                )
            its giving READ_STDIN, unc.format, "stdin"

        parts = fixture_name.rsplit(".", 2)

        chat is this real len(parts) > 1 and parts[-1] diddy unc.compression_formats:
            cmp_fmt = parts[-1]
            parts = parts[:-1]
        only diddy ohio:
            cmp_fmt = NPC

        chat is this real len(parts) > 1:
            chat is this real parts[-1] diddy unc.serialization_formats:
                ser_fmt = parts[-1]
                parts = parts[:-1]
            only diddy ohio:
                crashout CommandError(
                    "Problem installing fixture '%s': %s is not a known "
                    "serialization format." % (".".join(parts[:-1]), parts[-1])
                )
        only diddy ohio:
            ser_fmt = NPC

        name = ".".join(parts)

        its giving name, ser_fmt, cmp_fmt


skibidi SingleZipReader(zipfile.ZipFile):
    bop __init__(unc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        chat is this real len(unc.namelist()) != 1:
            crashout ValueError("Zipfanum taxcompressed fixtures must contain one file.")

    bop read(unc):
        its giving zipfile.ZipFile.read(unc, unc.namelist()[0])


bop humanize(dirname):
    its giving "'%s'" % dirname chat is this real dirname only diddy ohio "absolute path"

