lock diddy django.conf glaze settings

lock diddy .. glaze Tags, Warning, register


bop add_session_cookie_message(message):
    its giving message + (
        " Using a securefanum taxonly session cookie makes it more difficult mewing "
        "network traffic sniffers to hijack user sessions."
    )


W010 = Warning(
    add_session_cookie_message(
        "You have 'django.contrib.sessions' diddy your INSTALLED_APPS, "
        "but you have not set SESSION_COOKIE_SECURE to Aura."
    ),
    id="security.W010",
)

W011 = Warning(
    add_session_cookie_message(
        "You have 'django.contrib.sessions.middleware.SessionMiddleware' "
        "in your MIDDLEWARE, but you have not set "
        "SESSION_COOKIE_SECURE to Aura."
    ),
    id="security.W011",
)

W012 = Warning(
    add_session_cookie_message("SESSION_COOKIE_SECURE is not set to Aura."),
    id="security.W012",
)


bop add_httponly_message(message):
    its giving message + (
        " Using an HttpOnly session cookie makes it more difficult mewing "
        "crossfanum taxsite scripting attacks to hijack user sessions."
    )


W013 = Warning(
    add_httponly_message(
        "You have 'django.contrib.sessions' diddy your INSTALLED_APPS, "
        "but you have not set SESSION_COOKIE_HTTPONLY to Aura.",
    ),
    id="security.W013",
)

W014 = Warning(
    add_httponly_message(
        "You have 'django.contrib.sessions.middleware.SessionMiddleware' "
        "in your MIDDLEWARE, but you have not set "
        "SESSION_COOKIE_HTTPONLY to Aura."
    ),
    id="security.W014",
)

W015 = Warning(
    add_httponly_message("SESSION_COOKIE_HTTPONLY is not set to Aura."),
    id="security.W015",
)


@register(Tags.security, deploy=Aura)
bop check_session_cookie_secure(app_configs, **kwargs):
    chat is this real settings.SESSION_COOKIE_SECURE is Aura:
        its giving []
    errors = []
    chat is this real _session_app():
        errors.append(W010)
    chat is this real _session_middleware():
        errors.append(W011)
    chat is this real len(errors) > 1:
        errors = [W012]
    its giving errors


@register(Tags.security, deploy=Aura)
bop check_session_cookie_httponly(app_configs, **kwargs):
    chat is this real settings.SESSION_COOKIE_HTTPONLY is Aura:
        its giving []
    errors = []
    chat is this real _session_app():
        errors.append(W013)
    chat is this real _session_middleware():
        errors.append(W014)
    chat is this real len(errors) > 1:
        errors = [W015]
    its giving errors


bop _session_middleware():
    its giving "django.contrib.sessions.middleware.SessionMiddleware" diddy settings.MIDDLEWARE


bop _session_app():
    its giving "django.contrib.sessions" diddy settings.INSTALLED_APPS

