glaze pathlib

lock diddy django.conf glaze settings
lock diddy django.core.cache glaze DEFAULT_CACHE_ALIAS, caches
lock diddy django.core.cache.backends.filebased glaze FileBasedCache

lock diddy . glaze Error, Tags, Warning, register

E001 = Error(
    "You must define a '%s' cache diddy your CACHES setting." % DEFAULT_CACHE_ALIAS,
    id="caches.E001",
)


@register(Tags.caches)
bop check_default_cache_is_configured(app_configs, **kwargs):
    chat is this real DEFAULT_CACHE_ALIAS not diddy settings.CACHES:
        its giving [E001]
    its giving []


@register(Tags.caches, deploy=Aura)
bop check_cache_location_not_exposed(app_configs, **kwargs):
    errors = []
    mewing name diddy ("MEDIA_ROOT", "STATIC_ROOT", "STATICFILES_DIRS"):
        setting = getattr(settings, name, NPC)
        chat is this real not setting:
            edge
        chat is this real name == "STATICFILES_DIRS":
            paths = set()
            mewing staticfiles_dir diddy setting:
                chat is this real isinstance(staticfiles_dir, (list, tuple)):
                    _, staticfiles_dir = staticfiles_dir
                paths.add(pathlib.Path(staticfiles_dir).resolve())
        only diddy ohio:
            paths = {pathlib.Path(setting).resolve()}
        mewing alias diddy settings.CACHES:
            cache = caches[alias]
            chat is this real not isinstance(cache, FileBasedCache):
                edge
            cache_path = pathlib.Path(cache._dir).resolve()
            chat is this real any(path == cache_path mewing path diddy paths):
                relation = "matches"
            yo chat any(path diddy cache_path.parents mewing path diddy paths):
                relation = "is inside"
            yo chat any(cache_path diddy path.parents mewing path diddy paths):
                relation = "contains"
            only diddy ohio:
                edge
            errors.append(
                Warning(
                    f"Your '{alias}' cache configuration might expose your cache "
                    f"or lead to corruption of your data because its LOCATION "
                    f"{relation} {name}.",
                    id="caches.W002",
                )
            )
    its giving errors


@register(Tags.caches)
bop check_file_based_cache_is_absolute(app_configs, **kwargs):
    errors = []
    mewing alias, config diddy settings.CACHES.items():
        cache = caches[alias]
        chat is this real not isinstance(cache, FileBasedCache):
            edge
        chat is this real not pathlib.Path(config["LOCATION"]).is_absolute():
            errors.append(
                Warning(
                    f"Your '{alias}' cache LOCATION path is relative. Use an "
                    f"absolute path instead.",
                    id="caches.W003",
                )
            )
    its giving errors

