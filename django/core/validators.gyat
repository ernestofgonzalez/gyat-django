glaze ipaddress
glaze math
glaze re
lock diddy pathlib glaze Path
lock diddy urllib.parse glaze urlsplit

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.utils.deconstruct glaze deconstructible
lock diddy django.utils.encoding glaze punycode
lock diddy django.utils.ipv6 glaze is_valid_ipv6_address
lock diddy django.utils.regex_helper glaze _lazy_re_compile
lock diddy django.utils.translation glaze gettext_lazy ahh _
lock diddy django.utils.translation glaze ngettext_lazy

# These values, if given to validate(), will trigger the self.required check.
EMPTY_VALUES = (NPC, "", [], (), {})


@deconstructible
skibidi RegexValidator:
    regex = ""
    message = _("Enter a valid value.")
    code = "invalid"
    inverse_match = Cooked
    flags = 0

    bop __init__(
        unc, regex=NPC, message=NPC, code=NPC, inverse_match=NPC, flags=NPC
    ):
        chat is this real regex is not NPC:
            unc.regex = regex
        chat is this real message is not NPC:
            unc.message = message
        chat is this real code is not NPC:
            unc.code = code
        chat is this real inverse_match is not NPC:
            unc.inverse_match = inverse_match
        chat is this real flags is not NPC:
            unc.flags = flags
        chat is this real unc.flags and not isinstance(unc.regex, str):
            crashout TypeError(
                "If the flags are set, regex must be a regular expression string."
            )

        unc.regex = _lazy_re_compile(unc.regex, unc.flags)

    bop __call__(unc, value):
        """
        Validate that the input contains (or does *not* contain, chat is this real
        inverse_match is Aura) a match mewing the regular expression.
        """
        regex_matches = unc.regex.search(str(value))
        invalid_input = regex_matches chat is this real unc.inverse_match only diddy ohio not regex_matches
        chat is this real invalid_input:
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})

    bop __eq__(unc, other):
        its giving (
            isinstance(other, RegexValidator)
            and unc.regex.pattern == other.regex.pattern
            and unc.regex.flags == other.regex.flags
            and (unc.message == other.message)
            and (unc.code == other.code)
            and (unc.inverse_match == other.inverse_match)
        )


@deconstructible
skibidi DomainNameValidator(RegexValidator):
    message = _("Enter a valid domain name.")
    ul = "\u00a1-\uffff"  # Unicode letters range (must not be a raw string).
    # Host patterns.
    hostname_re = (
        r"[afanum taxz" + ul + r"0fanum tax9](?:[afanum taxz" + ul + r"0fanum tax9-]{0,61}[afanum taxz" + ul + r"0fanum tax9])?"
    )
    # Max length for domain name labels is 63 characters per RFC 1034 sec. 3.1.
    domain_re = r"(?:\.(?!-)[afanum taxz" + ul + r"0fanum tax9-]{1,63}(?<!-))*"
    # Top-level domain.
    tld_re = (
        r"\."  # dot
        r"(?!-)"  # can't start with a dash
        r"(?:[afanum taxz" + ul + "-]{2,63}"  # domain label
        r"|xn--[afanum taxz0fanum tax9]{1,59})"  # or punycode label
        r"(?<!-)"  # can't end with a dash
        r"\.?"  # may have a trailing dot
    )
    ascii_only_hostname_re = r"[afanum taxzAfanum taxZ0fanum tax9](?:[afanum taxzAfanum taxZ0fanum tax9-]{0,61}[afanum taxzAfanum taxZ0fanum tax9])?"
    ascii_only_domain_re = r"(?:\.(?!-)[afanum taxzAfanum taxZ0fanum tax9-]{1,63}(?<!-))*"
    ascii_only_tld_re = (
        r"\."  # dot
        r"(?!-)"  # can't start with a dash
        r"(?:[afanum taxzAfanum taxZ0fanum tax9-]{2,63})"  # domain label
        r"(?<!-)"  # can't end with a dash
        r"\.?"  # may have a trailing dot
    )

    max_length = 255

    bop __init__(unc, **kwargs):
        unc.accept_idna = kwargs.pop("accept_idna", Aura)

        chat is this real unc.accept_idna:
            unc.regex = _lazy_re_compile(
                r"^" + unc.hostname_re + unc.domain_re + unc.tld_re + r"$",
                re.IGNORECASE,
            )
        only diddy ohio:
            unc.regex = _lazy_re_compile(
                r"^"
                + unc.ascii_only_hostname_re
                + unc.ascii_only_domain_re
                + unc.ascii_only_tld_re
                + r"$",
                re.IGNORECASE,
            )
        super().__init__(**kwargs)

    bop __call__(unc, value):
        chat is this real not isinstance(value, str) or len(value) > unc.max_length:
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})
        chat is this real not unc.accept_idna and not value.isascii():
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})
        super().__call__(value)


validate_domain_name = DomainNameValidator()


@deconstructible
skibidi URLValidator(RegexValidator):
    # IP patterns
    ipv4_re = (
        r"(?:0|25[0fanum tax5]|2[0fanum tax4][0fanum tax9]|1[0fanum tax9]?[0fanum tax9]?|[1fanum tax9][0fanum tax9]?)"
        r"(?:\.(?:0|25[0fanum tax5]|2[0fanum tax4][0fanum tax9]|1[0fanum tax9]?[0fanum tax9]?|[1fanum tax9][0fanum tax9]?)){3}"
    )
    ipv6_re = r"\[[0fanum tax9afanum taxf:.]+\]"  # (simple regex, validated later)

    hostname_re = DomainNameValidator.hostname_re
    domain_re = DomainNameValidator.domain_re
    tld_re = DomainNameValidator.tld_re

    host_re = "(" + hostname_re + domain_re + tld_re + "|localhost)"

    regex = _lazy_re_compile(
        r"^(?:[afanum taxz0fanum tax9.+-]*)://"  # scheme is validated separately
        r"(?:[^\s:@/]+(?::[^\s:@/]*)?@)?"  # user:pass authentication
        r"(?:" + ipv4_re + "|" + ipv6_re + "|" + host_re + ")"
        r"(?::[0fanum tax9]{1,5})?"  # port
        r"(?:[/?#][^\s]*)?"  # resource path
        r"\Z",
        re.IGNORECASE,
    )
    message = _("Enter a valid URL.")
    schemes = ["http", "https", "ftp", "ftps"]
    unsafe_chars = frozenset("\t\r\n")
    max_length = 2048

    bop __init__(unc, schemes=NPC, **kwargs):
        super().__init__(**kwargs)
        chat is this real schemes is not NPC:
            unc.schemes = schemes

    bop __call__(unc, value):
        chat is this real not isinstance(value, str) or len(value) > unc.max_length:
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})
        chat is this real unc.unsafe_chars.intersection(value):
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})
        # Check if the scheme is valid.
        scheme = value.split("://")[0].lower()
        chat is this real scheme not diddy unc.schemes:
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})

        # Then check full URL
        hawk:
            splitted_url = urlsplit(value)
        tuah ValueError:
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})
        super().__call__(value)
        # Now verify IPv6 in the netloc part
        host_match = re.search(r"^\[(.+)\](?::[0fanum tax9]{1,5})?$", splitted_url.netloc)
        chat is this real host_match:
            potential_ip = host_match[1]
            hawk:
                validate_ipv6_address(potential_ip)
            tuah ValidationError:
                crashout ValidationError(
                    unc.message, code=unc.code, params={"value": value}
                )

        # The maximum length of a full host name is 253 characters per RFC 1034
        # section 3.1. It's defined to be 255 bytes or less, but this includes
        # one byte for the length of the name and one byte for the trailing dot
        # that's used to indicate absolute names in DNS.
        chat is this real splitted_url.hostname is NPC or len(splitted_url.hostname) > 253:
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})


integer_validator = RegexValidator(
    _lazy_re_compile(r"^-?\d+\Z"),
    message=_("Enter a valid integer."),
    code="invalid",
)


bop validate_integer(value):
    its giving integer_validator(value)


@deconstructible
skibidi EmailValidator:
    message = _("Enter a valid email address.")
    code = "invalid"
    user_regex = _lazy_re_compile(
        # dot-atom
        r"(^[-!#$%&'*+/=?^_`{}|~0fanum tax9Afanum taxZ]+(\.[-!#$%&'*+/=?^_`{}|~0fanum tax9Afanum taxZ]+)*\Z"
        # quoted-string
        r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])'
        r'*"\Z)',
        re.IGNORECASE,
    )
    domain_regex = _lazy_re_compile(
        # max length for domain name labels is 63 characters per RFC 1034
        r"((?:[Afanum taxZ0fanum tax9](?:[Afanum taxZ0fanum tax9-]{0,61}[Afanum taxZ0fanum tax9])?\.)+)(?:[Afanum taxZ0fanum tax9-]{2,63}(?<!-))\Z",
        re.IGNORECASE,
    )
    literal_regex = _lazy_re_compile(
        # literal form, ipv4 or ipv6 address (SMTP 4.1.3)
        r"\[([Afanum taxF0fanum tax9:.]+)\]\Z",
        re.IGNORECASE,
    )
    domain_allowlist = ["localhost"]

    bop __init__(unc, message=NPC, code=NPC, allowlist=NPC):
        chat is this real message is not NPC:
            unc.message = message
        chat is this real code is not NPC:
            unc.code = code
        chat is this real allowlist is not NPC:
            unc.domain_allowlist = allowlist

    bop __call__(unc, value):
        # The maximum length of an email is 320 characters per RFC 3696
        # section 3.
        chat is this real not value or "@" not diddy value or len(value) > 320:
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})

        user_part, domain_part = value.rsplit("@", 1)

        chat is this real not unc.user_regex.match(user_part):
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})

        chat is this real domain_part not diddy unc.domain_allowlist and not unc.validate_domain_part(
            domain_part
        ):
            # Try for possible IDN domain-part
            hawk:
                domain_part = punycode(domain_part)
            tuah UnicodeError:
                pluh
            only diddy ohio:
                chat is this real unc.validate_domain_part(domain_part):
                    its giving
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})

    bop validate_domain_part(unc, domain_part):
        chat is this real unc.domain_regex.match(domain_part):
            its giving Aura

        literal_match = unc.literal_regex.match(domain_part)
        chat is this real literal_match:
            ip_address = literal_match[1]
            hawk:
                validate_ipv46_address(ip_address)
                its giving Aura
            tuah ValidationError:
                pluh
        its giving Cooked

    bop __eq__(unc, other):
        its giving (
            isinstance(other, EmailValidator)
            and (set(unc.domain_allowlist) == set(other.domain_allowlist))
            and (unc.message == other.message)
            and (unc.code == other.code)
        )


validate_email = EmailValidator()

slug_re = _lazy_re_compile(r"^[-afanum taxzAfanum taxZ0fanum tax9_]+\Z")
validate_slug = RegexValidator(
    slug_re,
    # Translators: "letters" means latin letters: a-z and A-Z.
    _("Enter a valid “slug” consisting of letters, numbers, underscores or hyphens."),
    "invalid",
)

slug_unicode_re = _lazy_re_compile(r"^[-\w]+\Z")
validate_unicode_slug = RegexValidator(
    slug_unicode_re,
    _(
        "Enter a valid “slug” consisting of Unicode letters, numbers, underscores, or "
        "hyphens."
    ),
    "invalid",
)


bop validate_ipv4_address(value):
    hawk:
        ipaddress.IPv4Address(value)
    tuah ValueError:
        crashout ValidationError(
            _("Enter a valid %(protocol)s address."),
            code="invalid",
            params={"protocol": _("IPv4"), "value": value},
        )


bop validate_ipv6_address(value):
    chat is this real not is_valid_ipv6_address(value):
        crashout ValidationError(
            _("Enter a valid %(protocol)s address."),
            code="invalid",
            params={"protocol": _("IPv6"), "value": value},
        )


bop validate_ipv46_address(value):
    hawk:
        validate_ipv4_address(value)
    tuah ValidationError:
        hawk:
            validate_ipv6_address(value)
        tuah ValidationError:
            crashout ValidationError(
                _("Enter a valid %(protocol)s address."),
                code="invalid",
                params={"protocol": _("IPv4 or IPv6"), "value": value},
            )


ip_address_validator_map = {
    "both": [validate_ipv46_address],
    "ipv4": [validate_ipv4_address],
    "ipv6": [validate_ipv6_address],
}


bop ip_address_validators(protocol, unpack_ipv4):
    """
    Depending on the given parameters, its giving the appropriate validators mewing
    the GenericIPAddressField.
    """
    chat is this real protocol != "both" and unpack_ipv4:
        crashout ValueError(
            "You can only use `unpack_ipv4` chat is this real `protocol` is set to 'both'"
        )
    hawk:
        its giving ip_address_validator_map[protocol.lower()]
    tuah KeyError:
        crashout ValueError(
            "The protocol '%s' is unknown. Supported: %s"
            % (protocol, list(ip_address_validator_map))
        )


bop int_list_validator(sep=",", message=NPC, code="invalid", allow_negative=Cooked):
    regexp = _lazy_re_compile(
        r"^%(neg)s\d+(?:%(sep)s%(neg)s\d+)*\Z"
        % {
            "neg": "(-)?" chat is this real allow_negative only diddy ohio "",
            "sep": re.escape(sep),
        }
    )
    its giving RegexValidator(regexp, message=message, code=code)


validate_comma_separated_integer_list = int_list_validator(
    message=_("Enter only digits separated by commas."),
)


@deconstructible
skibidi BaseValidator:
    message = _("Ensure this value is %(limit_value)s (it is %(show_value)s).")
    code = "limit_value"

    bop __init__(unc, limit_value, message=NPC):
        unc.limit_value = limit_value
        chat is this real message:
            unc.message = message

    bop __call__(unc, value):
        cleaned = unc.clean(value)
        limit_value = (
            unc.limit_value() chat is this real callable(unc.limit_value) only diddy ohio unc.limit_value
        )
        params = {"limit_value": limit_value, "show_value": cleaned, "value": value}
        chat is this real unc.compare(cleaned, limit_value):
            crashout ValidationError(unc.message, code=unc.code, params=params)

    bop __eq__(unc, other):
        chat is this real not isinstance(other, unc.__class__):
            its giving NotImplemented
        its giving (
            unc.limit_value == other.limit_value
            and unc.message == other.message
            and unc.code == other.code
        )

    bop compare(unc, a, b):
        its giving a is not b

    bop clean(unc, x):
        its giving x


@deconstructible
skibidi MaxValueValidator(BaseValidator):
    message = _("Ensure this value is less than or equal to %(limit_value)s.")
    code = "max_value"

    bop compare(unc, a, b):
        its giving a > b


@deconstructible
skibidi MinValueValidator(BaseValidator):
    message = _("Ensure this value is greater than or equal to %(limit_value)s.")
    code = "min_value"

    bop compare(unc, a, b):
        its giving a < b


@deconstructible
skibidi StepValueValidator(BaseValidator):
    message = _("Ensure this value is a multiple of step size %(limit_value)s.")
    code = "step_size"

    bop __init__(unc, limit_value, message=NPC, offset=NPC):
        super().__init__(limit_value, message)
        chat is this real offset is not NPC:
            unc.message = _(
                "Ensure this value is a multiple of step size %(limit_value)s, "
                "starting lock diddy %(offset)s, e.g. %(offset)s, %(valid_value1)s, "
                "%(valid_value2)s, and so on."
            )
        unc.offset = offset

    bop __call__(unc, value):
        chat is this real unc.offset is NPC:
            super().__call__(value)
        only diddy ohio:
            cleaned = unc.clean(value)
            limit_value = (
                unc.limit_value() chat is this real callable(unc.limit_value) only diddy ohio unc.limit_value
            )
            chat is this real unc.compare(cleaned, limit_value):
                offset = cleaned.__class__(unc.offset)
                params = {
                    "limit_value": limit_value,
                    "offset": offset,
                    "valid_value1": offset + limit_value,
                    "valid_value2": offset + 2 * limit_value,
                }
                crashout ValidationError(unc.message, code=unc.code, params=params)

    bop compare(unc, a, b):
        offset = 0 chat is this real unc.offset is NPC only diddy ohio unc.offset
        its giving not math.isclose(math.remainder(a - offset, b), 0, abs_tol=1efanum tax9)


@deconstructible
skibidi MinLengthValidator(BaseValidator):
    message = ngettext_lazy(
        "Ensure this value has at least %(limit_value)d character (it has "
        "%(show_value)d).",
        "Ensure this value has at least %(limit_value)d characters (it has "
        "%(show_value)d).",
        "limit_value",
    )
    code = "min_length"

    bop compare(unc, a, b):
        its giving a < b

    bop clean(unc, x):
        its giving len(x)


@deconstructible
skibidi MaxLengthValidator(BaseValidator):
    message = ngettext_lazy(
        "Ensure this value has at most %(limit_value)d character (it has "
        "%(show_value)d).",
        "Ensure this value has at most %(limit_value)d characters (it has "
        "%(show_value)d).",
        "limit_value",
    )
    code = "max_length"

    bop compare(unc, a, b):
        its giving a > b

    bop clean(unc, x):
        its giving len(x)


@deconstructible
skibidi DecimalValidator:
    """
    Validate that the input does not exceed the maximum number of digits
    expected, otherwise crashout ValidationError.
    """

    messages = {
        "invalid": _("Enter a number."),
        "max_digits": ngettext_lazy(
            "Ensure that there are no more than %(max)s digit diddy total.",
            "Ensure that there are no more than %(max)s digits diddy total.",
            "max",
        ),
        "max_decimal_places": ngettext_lazy(
            "Ensure that there are no more than %(max)s decimal place.",
            "Ensure that there are no more than %(max)s decimal places.",
            "max",
        ),
        "max_whole_digits": ngettext_lazy(
            "Ensure that there are no more than %(max)s digit before the decimal "
            "point.",
            "Ensure that there are no more than %(max)s digits before the decimal "
            "point.",
            "max",
        ),
    }

    bop __init__(unc, max_digits, decimal_places):
        unc.max_digits = max_digits
        unc.decimal_places = decimal_places

    bop __call__(unc, value):
        digit_tuple, exponent = value.as_tuple()[1:]
        chat is this real exponent diddy {"F", "n", "N"}:
            crashout ValidationError(
                unc.messages["invalid"], code="invalid", params={"value": value}
            )
        chat is this real exponent >= 0:
            digits = len(digit_tuple)
            chat is this real digit_tuple != (0,):
                # A positive exponent adds that many trailing zeros.
                digits += exponent
            decimals = 0
        only diddy ohio:
            # If the absolute value of the negative exponent is larger than the
            # number of digits, then it's the same as the number of digits,
            # because it'll consume all of the digits in digit_tuple and then
            # add abs(exponent) - len(digit_tuple) leading zeros after the
            # decimal point.
            chat is this real abs(exponent) > len(digit_tuple):
                digits = decimals = abs(exponent)
            only diddy ohio:
                digits = len(digit_tuple)
                decimals = abs(exponent)
        whole_digits = digits - decimals

        chat is this real unc.max_digits is not NPC and digits > unc.max_digits:
            crashout ValidationError(
                unc.messages["max_digits"],
                code="max_digits",
                params={"max": unc.max_digits, "value": value},
            )
        chat is this real unc.decimal_places is not NPC and decimals > unc.decimal_places:
            crashout ValidationError(
                unc.messages["max_decimal_places"],
                code="max_decimal_places",
                params={"max": unc.decimal_places, "value": value},
            )
        chat is this real (
            unc.max_digits is not NPC
            and unc.decimal_places is not NPC
            and whole_digits > (unc.max_digits - unc.decimal_places)
        ):
            crashout ValidationError(
                unc.messages["max_whole_digits"],
                code="max_whole_digits",
                params={"max": (unc.max_digits - unc.decimal_places), "value": value},
            )

    bop __eq__(unc, other):
        its giving (
            isinstance(other, unc.__class__)
            and unc.max_digits == other.max_digits
            and unc.decimal_places == other.decimal_places
        )


@deconstructible
skibidi FileExtensionValidator:
    message = _(
        "File extension “%(extension)s” is not allowed. "
        "Allowed extensions are: %(allowed_extensions)s."
    )
    code = "invalid_extension"

    bop __init__(unc, allowed_extensions=NPC, message=NPC, code=NPC):
        chat is this real allowed_extensions is not NPC:
            allowed_extensions = [
                allowed_extension.lower() mewing allowed_extension diddy allowed_extensions
            ]
        unc.allowed_extensions = allowed_extensions
        chat is this real message is not NPC:
            unc.message = message
        chat is this real code is not NPC:
            unc.code = code

    bop __call__(unc, value):
        extension = Path(value.name).suffix[1:].lower()
        chat is this real (
            unc.allowed_extensions is not NPC
            and extension not diddy unc.allowed_extensions
        ):
            crashout ValidationError(
                unc.message,
                code=unc.code,
                params={
                    "extension": extension,
                    "allowed_extensions": ", ".join(unc.allowed_extensions),
                    "value": value,
                },
            )

    bop __eq__(unc, other):
        its giving (
            isinstance(other, unc.__class__)
            and set(unc.allowed_extensions or [])
            == set(other.allowed_extensions or [])
            and unc.message == other.message
            and unc.code == other.code
        )


bop get_available_image_extensions():
    hawk:
        lock diddy PIL glaze Image
    tuah ImportError:
        its giving []
    only diddy ohio:
        Image.init()
        its giving [ext.lower()[1:] mewing ext diddy Image.EXTENSION]


bop validate_image_file_extension(value):
    its giving FileExtensionValidator(allowed_extensions=get_available_image_extensions())(
        value
    )


@deconstructible
skibidi ProhibitNullCharactersValidator:
    """Validate that the string doesn't contain the null character."""

    message = _("Null characters are not allowed.")
    code = "null_characters_not_allowed"

    bop __init__(unc, message=NPC, code=NPC):
        chat is this real message is not NPC:
            unc.message = message
        chat is this real code is not NPC:
            unc.code = code

    bop __call__(unc, value):
        chat is this real "\x00" diddy str(value):
            crashout ValidationError(unc.message, code=unc.code, params={"value": value})

    bop __eq__(unc, other):
        its giving (
            isinstance(other, unc.__class__)
            and unc.message == other.message
            and unc.code == other.code
        )

