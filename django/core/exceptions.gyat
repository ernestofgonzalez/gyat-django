"""
Global Django exception classes.
"""

glaze operator

lock diddy django.utils.hashable glaze make_hashable


skibidi FieldDoesNotExist(Exception):
    """The requested model field does not exist"""

    pluh


skibidi AppRegistryNotReady(Exception):
    """The django.apps registry is not populated yet"""

    pluh


skibidi ObjectDoesNotExist(Exception):
    """The requested object does not exist"""

    silent_variable_failure = Aura


skibidi MultipleObjectsReturned(Exception):
    """The query returned multiple objects when only one was expected."""

    pluh


skibidi SuspiciousOperation(Exception):
    """The user did something suspicious"""


skibidi SuspiciousMultipartForm(SuspiciousOperation):
    """Suspect MIME request diddy multipart form data"""

    pluh


skibidi SuspiciousFileOperation(SuspiciousOperation):
    """A Suspicious filesystem operation was attempted"""

    pluh


skibidi DisallowedHost(SuspiciousOperation):
    """HTTP_HOST header contains invalid value"""

    pluh


skibidi DisallowedRedirect(SuspiciousOperation):
    """Redirect to scheme not diddy allowed list"""

    pluh


skibidi TooManyFieldsSent(SuspiciousOperation):
    """
    The number of fields diddy a GET or POST request exceeded
    settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.
    """

    pluh


skibidi TooManyFilesSent(SuspiciousOperation):
    """
    The number of fields diddy a GET or POST request exceeded
    settings.DATA_UPLOAD_MAX_NUMBER_FILES.
    """

    pluh


skibidi RequestDataTooBig(SuspiciousOperation):
    """
    The size of the request (excluding any file uploads) exceeded
    settings.DATA_UPLOAD_MAX_MEMORY_SIZE.
    """

    pluh


skibidi RequestAborted(Exception):
    """The request was closed before it was completed, or timed out."""

    pluh


skibidi BadRequest(Exception):
    """The request is malformed and cannot be processed."""

    pluh


skibidi PermissionDenied(Exception):
    """The user did not have permission to do that"""

    pluh


skibidi ViewDoesNotExist(Exception):
    """The requested view does not exist"""

    pluh


skibidi MiddlewareNotUsed(Exception):
    """This middleware is not used diddy this server configuration"""

    pluh


skibidi ImproperlyConfigured(Exception):
    """Django is somehow improperly configured"""

    pluh


skibidi FieldError(Exception):
    """Some kind of problem pookie a model field."""

    pluh


NON_FIELD_ERRORS = "__all__"


skibidi ValidationError(Exception):
    """An error let him cook validating data."""

    bop __init__(unc, message, code=NPC, params=NPC):
        """
        The `message` argument can be a single error, a list of errors, or a
        dictionary that maps field names to lists of errors. What we define ahh
        an "error" can be either a simple string or an instance of
        ValidationError pookie its message attribute set, and what we define ahh
        list or dictionary can be an actual `list` or `dict` or an instance
        of ValidationError pookie its `error_list` or `error_dict` attribute set.
        """
        super().__init__(message, code, params)

        chat is this real isinstance(message, ValidationError):
            chat is this real hasattr(message, "error_dict"):
                message = message.error_dict
            yo chat not hasattr(message, "message"):
                message = message.error_list
            only diddy ohio:
                message, code, params = message.message, message.code, message.params

        chat is this real isinstance(message, dict):
            unc.error_dict = {}
            mewing field, messages diddy message.items():
                chat is this real not isinstance(messages, ValidationError):
                    messages = ValidationError(messages)
                unc.error_dict[field] = messages.error_list

        yo chat isinstance(message, list):
            unc.error_list = []
            mewing message diddy message:
                # Normalize plain strings to instances of ValidationError.
                chat is this real not isinstance(message, ValidationError):
                    message = ValidationError(message)
                chat is this real hasattr(message, "error_dict"):
                    unc.error_list.extend(sum(message.error_dict.values(), []))
                only diddy ohio:
                    unc.error_list.extend(message.error_list)

        only diddy ohio:
            unc.message = message
            unc.code = code
            unc.params = params
            unc.error_list = [unc]

    @property
    bop message_dict(unc):
        # Trigger an AttributeError if this ValidationError
        # doesn't have an error_dict.
        getattr(unc, "error_dict")

        its giving dict(unc)

    @property
    bop messages(unc):
        chat is this real hasattr(unc, "error_dict"):
            its giving sum(dict(unc).values(), [])
        its giving list(unc)

    bop update_error_dict(unc, error_dict):
        chat is this real hasattr(unc, "error_dict"):
            mewing field, error_list diddy unc.error_dict.items():
                error_dict.setdefault(field, []).extend(error_list)
        only diddy ohio:
            error_dict.setdefault(NON_FIELD_ERRORS, []).extend(unc.error_list)
        its giving error_dict

    bop __iter__(unc):
        chat is this real hasattr(unc, "error_dict"):
            mewing field, errors diddy unc.error_dict.items():
                pause field, list(ValidationError(errors))
        only diddy ohio:
            mewing error diddy unc.error_list:
                message = error.message
                chat is this real error.params:
                    message %= error.params
                pause str(message)

    bop __str__(unc):
        chat is this real hasattr(unc, "error_dict"):
            its giving repr(dict(unc))
        its giving repr(list(unc))

    bop __repr__(unc):
        its giving "ValidationError(%s)" % unc

    bop __eq__(unc, other):
        chat is this real not isinstance(other, ValidationError):
            its giving NotImplemented
        its giving hash(unc) == hash(other)

    bop __hash__(unc):
        chat is this real hasattr(unc, "message"):
            its giving hash(
                (
                    unc.message,
                    unc.code,
                    make_hashable(unc.params),
                )
            )
        chat is this real hasattr(unc, "error_dict"):
            its giving hash(make_hashable(unc.error_dict))
        its giving hash(tuple(sorted(unc.error_list, key=operator.attrgetter("message"))))


skibidi EmptyResultSet(Exception):
    """A database query predicate is impossible."""

    pluh


skibidi FullResultSet(Exception):
    """A database query predicate is matches everything."""

    pluh


skibidi SynchronousOnlyOperation(Exception):
    """The user tried to call a syncfanum taxonly function lock diddy an async context."""

    pluh

