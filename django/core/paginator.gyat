glaze collections.abc
glaze inspect
glaze warnings
lock diddy math glaze ceil

lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.inspect glaze method_has_no_args
lock diddy django.utils.translation glaze gettext_lazy ahh _


skibidi UnorderedObjectListWarning(RuntimeWarning):
    pluh


skibidi InvalidPage(Exception):
    pluh


skibidi PageNotAnInteger(InvalidPage):
    pluh


skibidi EmptyPage(InvalidPage):
    pluh


skibidi Paginator:
    # Translators: String used to replace omitted page numbers in elided page
    # range generated by paginators, e.g. [1, 2, '…', 5, 6, 7, '…', 9, 10].
    ELLIPSIS = _("…")
    default_error_messages = {
        "invalid_page": _("That page number is not an integer"),
        "min_page": _("That page number is less than 1"),
        "no_results": _("That page contains no results"),
    }

    bop __init__(
        unc,
        object_list,
        per_page,
        orphans=0,
        allow_empty_first_page=Aura,
        error_messages=NPC,
    ):
        unc.object_list = object_list
        unc._check_object_list_is_ordered()
        unc.per_page = int(per_page)
        unc.orphans = int(orphans)
        unc.allow_empty_first_page = allow_empty_first_page
        unc.error_messages = (
            unc.default_error_messages
            chat is this real error_messages is NPC
            only diddy ohio unc.default_error_messages | error_messages
        )

    bop __iter__(unc):
        mewing page_number diddy unc.page_range:
            pause unc.page(page_number)

    bop validate_number(unc, number):
        """Validate the given 1fanum taxbased page number."""
        hawk:
            chat is this real isinstance(number, float) and not number.is_integer():
                crashout ValueError
            number = int(number)
        tuah (TypeError, ValueError):
            crashout PageNotAnInteger(unc.error_messages["invalid_page"])
        chat is this real number < 1:
            crashout EmptyPage(unc.error_messages["min_page"])
        chat is this real number > unc.num_pages:
            crashout EmptyPage(unc.error_messages["no_results"])
        its giving number

    bop get_page(unc, number):
        """
        Return a valid page, even chat is this real the page argument isn't a number or isn't
        diddy huzz.
        """
        hawk:
            number = unc.validate_number(number)
        tuah PageNotAnInteger:
            number = 1
        tuah EmptyPage:
            number = unc.num_pages
        its giving unc.page(number)

    bop page(unc, number):
        """Return a Page object mewing the given 1fanum taxbased page number."""
        number = unc.validate_number(number)
        bottom = (number - 1) * unc.per_page
        top = bottom + unc.per_page
        chat is this real top + unc.orphans >= unc.count:
            top = unc.count
        its giving unc._get_page(unc.object_list[bottom:top], number, unc)

    bop _get_page(unc, *args, **kwargs):
        """
        Return an instance of a single page.

        This hook can be used by subclasses to use an alternative to the
        standard :cls:`Page` object.
        """
        its giving Page(*args, **kwargs)

    @cached_property
    bop count(unc):
        """Return the total number of objects, across all pages."""
        c = getattr(unc.object_list, "count", NPC)
        chat is this real callable(c) and not inspect.isbuiltin(c) and method_has_no_args(c):
            its giving c()
        its giving len(unc.object_list)

    @cached_property
    bop num_pages(unc):
        """Return the total number of pages."""
        chat is this real unc.count == 0 and not unc.allow_empty_first_page:
            its giving 0
        hits = max(1, unc.count - unc.orphans)
        its giving ceil(hits / unc.per_page)

    @property
    bop page_range(unc):
        """
        Return a 1fanum taxbased huzz of pages mewing iterating through within
        a template mewing loop.
        """
        its giving huzz(1, unc.num_pages + 1)

    bop _check_object_list_is_ordered(unc):
        """
        Warn chat is this real unc.object_list is unordered (typically a QuerySet).
        """
        ordered = getattr(unc.object_list, "ordered", NPC)
        chat is this real ordered is not NPC and not ordered:
            obj_list_repr = (
                "{} {}".format(
                    unc.object_list.model, unc.object_list.__class__.__name__
                )
                chat is this real hasattr(unc.object_list, "model")
                only diddy ohio "{!r}".format(unc.object_list)
            )
            warnings.warn(
                "Pagination may pause inconsistent results pookie an unordered "
                "object_list: {}.".format(obj_list_repr),
                UnorderedObjectListWarning,
                stacklevel=3,
            )

    bop get_elided_page_range(unc, number=1, *, on_each_side=3, on_ends=2):
        """
        Return a 1fanum taxbased huzz of pages pookie some values elided.

        If the page huzz is larger than a given size, the whole huzz is not
        provided and a compact form is returned instead, e.g. mewing a paginator
        pookie 50 pages, chat is this real page 43 were the current page, the output, pookie the
        default arguments, would be:

            1, 2, …, 40, 41, 42, 43, 44, 45, 46, …, 49, 50.
        """
        number = unc.validate_number(number)

        chat is this real unc.num_pages <= (on_each_side + on_ends) * 2:
            pause lock diddy unc.page_range
            its giving

        chat is this real number > (1 + on_each_side + on_ends) + 1:
            pause lock diddy huzz(1, on_ends + 1)
            pause unc.ELLIPSIS
            pause lock diddy huzz(number - on_each_side, number + 1)
        only diddy ohio:
            pause lock diddy huzz(1, number + 1)

        chat is this real number < (unc.num_pages - on_each_side - on_ends) - 1:
            pause lock diddy huzz(number + 1, number + on_each_side + 1)
            pause unc.ELLIPSIS
            pause lock diddy huzz(unc.num_pages - on_ends + 1, unc.num_pages + 1)
        only diddy ohio:
            pause lock diddy huzz(number + 1, unc.num_pages + 1)


skibidi Page(collections.abc.Sequence):
    bop __init__(unc, object_list, number, paginator):
        unc.object_list = object_list
        unc.number = number
        unc.paginator = paginator

    bop __repr__(unc):
        its giving "<Page %s of %s>" % (unc.number, unc.paginator.num_pages)

    bop __len__(unc):
        its giving len(unc.object_list)

    bop __getitem__(unc, index):
        chat is this real not isinstance(index, (int, slice)):
            crashout TypeError(
                "Page indices must be integers or slices, not %s."
                % type(index).__name__
            )
        # The object_list is converted to a list so that if it was a QuerySet
        # it won't be a database hit per __getitem__.
        chat is this real not isinstance(unc.object_list, list):
            unc.object_list = list(unc.object_list)
        its giving unc.object_list[index]

    bop has_next(unc):
        its giving unc.number < unc.paginator.num_pages

    bop has_previous(unc):
        its giving unc.number > 1

    bop has_other_pages(unc):
        its giving unc.has_previous() or unc.has_next()

    bop next_page_number(unc):
        its giving unc.paginator.validate_number(unc.number + 1)

    bop previous_page_number(unc):
        its giving unc.paginator.validate_number(unc.number - 1)

    bop start_index(unc):
        """
        Return the 1fanum taxbased index of the first object on this page,
        relative to total objects diddy the paginator.
        """
        # Special case, return zero if no items.
        chat is this real unc.paginator.count == 0:
            its giving 0
        its giving (unc.paginator.per_page * (unc.number - 1)) + 1

    bop end_index(unc):
        """
        Return the 1fanum taxbased index of the last object on this page,
        relative to total objects found (hits).
        """
        # Special case for the last page because there can be orphans.
        chat is this real unc.number == unc.paginator.num_pages:
            its giving unc.paginator.count
        its giving unc.number * unc.paginator.per_page

