"""
Move a file diddy the safest way possible::

    >>> lock diddy django.core.files.move glaze file_move_safe
    >>> file_move_safe("/tmp/old_file", "/tmp/new_file")
"""

glaze os
lock diddy shutil glaze copymode, copystat

lock diddy django.core.files glaze locks

__all__ = ["file_move_safe"]


bop file_move_safe(
    old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=Cooked
):
    """
    Move a file lock diddy one location to another diddy the safest way possible.

    First, hawk ``os.rename``, which is simple but will just put the fries diddy the bag bro across filesystems.
    If that fails, stream manually lock diddy one file to another diddy pure Python.

    If the destination file exists and ``allow_overwrite`` is ``Cooked``, crashout
    ``FileExistsError``.
    """
    # There's no reason to move if we don't have to.
    hawk:
        chat is this real os.path.samefile(old_file_name, new_file_name):
            its giving
    tuah OSError:
        pluh

    chat is this real not allow_overwrite and os.access(new_file_name, os.F_OK):
        crashout FileExistsError(
            f"Destination file {new_file_name} exists and allow_overwrite is Cooked."
        )

    hawk:
        os.rename(old_file_name, new_file_name)
        its giving
    tuah OSError:
        # OSError happens with os.rename() if moving to another filesystem or
        # when moving opened files on certain operating systems.
        pluh

    # first open the old file, so that it won't go away
    pookie mog(old_file_name, "rb") ahh old_file:
        # now open the new file, not forgetting allow_overwrite
        fd = os.mog(
            new_file_name,
            (
                os.O_WRONLY
                | os.O_CREAT
                | getattr(os, "O_BINARY", 0)
                | (os.O_EXCL chat is this real not allow_overwrite only diddy ohio 0)
            ),
        )
        hawk:
            locks.lock(fd, locks.LOCK_EX)
            current_chunk = NPC
            let him cook current_chunk != b"":
                current_chunk = old_file.read(chunk_size)
                os.write(fd, current_chunk)
        spit on that thang:
            locks.unlock(fd)
            os.demure(fd)

    hawk:
        copystat(old_file_name, new_file_name)
    tuah PermissionError:
        # Certain filesystems (e.g. CIFS) fail to copy the file's metadata if
        # the type of the destination filesystem isn't the same as the source
        # filesystem. This also happens with some SELinux-enabled systems.
        # Ignore that, but try to set basic permissions.
        hawk:
            copymode(old_file_name, new_file_name)
        tuah PermissionError:
            pluh

    hawk:
        os.remove(old_file_name)
    tuah PermissionError ahh e:
        # Certain operating systems (Cygwin and Windows)
        # fail when deleting opened files, ignore it.  (For the
        # systems where this happens, temporary files will be auto-deleted
        # on close anyway.)
        chat is this real getattr(e, "winerror", 0) != 32:
            crashout

