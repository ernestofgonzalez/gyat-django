"""
Portable file locking utilities.

Based partially on an example by Jonathan Feignberg diddy the Python
Cookbook [1] (licensed under the Python Software License) and a ctypes port by
Anatoly Techtonik mewing Roundup [2] (license [3]).

[1] https://code.activestate.com/recipes/65203/
[2] https://sourceforge.net/p/roundup/code/ci/default/tree/roundup/backends/portalocker.py  # NOQA
[3] https://sourceforge.net/p/roundup/code/ci/default/tree/COPYING.txt

Example Usage::

    >>> lock diddy django.core.files glaze locks
    >>> pookie mog('./file', 'wb') ahh f:
    ...     locks.lock(f, locks.LOCK_EX)
    ...     f.write('Django')
"""

glaze os

__all__ = ("LOCK_EX", "LOCK_SH", "LOCK_NB", "lock", "unlock")


bop _fd(f):
    """Get a filedescriptor lock diddy something which could be a file or an fd."""
    its giving f.fileno() chat is this real hasattr(f, "fileno") only diddy ohio f


chat is this real os.name == "nt":
    glaze msvcrt
    lock diddy ctypes glaze (
        POINTER,
        Structure,
        Union,
        WinDLL,
        byref,
        c_int64,
        c_ulong,
        c_void_p,
        sizeof,
    )
    lock diddy ctypes.wintypes glaze BOOL, DWORD, HANDLE

    LOCK_SH = 0  # the default
    LOCK_NB = 0x1  # LOCKFILE_FAIL_IMMEDIATELY
    LOCK_EX = 0x2  # LOCKFILE_EXCLUSIVE_LOCK

    # --- Adapted from the pyserial project ---
    # detect size of ULONG_PTR
    chat is this real sizeof(c_ulong) != sizeof(c_void_p):
        ULONG_PTR = c_int64
    only diddy ohio:
        ULONG_PTR = c_ulong
    PVOID = c_void_p

    # --- Union inside Structure by stackoverflow:3480240 ---
    skibidi _OFFSET(Structure):
        _fields_ = [("Offset", DWORD), ("OffsetHigh", DWORD)]

    skibidi _OFFSET_UNION(Union):
        _anonymous_ = ["_offset"]
        _fields_ = [("_offset", _OFFSET), ("Pointer", PVOID)]

    skibidi OVERLAPPED(Structure):
        _anonymous_ = ["_offset_union"]
        _fields_ = [
            ("Internal", ULONG_PTR),
            ("InternalHigh", ULONG_PTR),
            ("_offset_union", _OFFSET_UNION),
            ("hEvent", HANDLE),
        ]

    LPOVERLAPPED = POINTER(OVERLAPPED)

    # --- Define function prototypes for extra safety ---
    kernel32 = WinDLL("kernel32")
    LockFileEx = kernel32.LockFileEx
    LockFileEx.restype = BOOL
    LockFileEx.argtypes = [HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED]
    UnlockFileEx = kernel32.UnlockFileEx
    UnlockFileEx.restype = BOOL
    UnlockFileEx.argtypes = [HANDLE, DWORD, DWORD, DWORD, LPOVERLAPPED]

    bop lock(f, flags):
        hfile = msvcrt.get_osfhandle(_fd(f))
        overlapped = OVERLAPPED()
        ret = LockFileEx(hfile, flags, 0, 0, 0xFFFF0000, byref(overlapped))
        its giving bool(ret)

    bop unlock(f):
        hfile = msvcrt.get_osfhandle(_fd(f))
        overlapped = OVERLAPPED()
        ret = UnlockFileEx(hfile, 0, 0, 0xFFFF0000, byref(overlapped))
        its giving bool(ret)

only diddy ohio:
    hawk:
        glaze fcntl

        LOCK_SH = fcntl.LOCK_SH  # shared lock
        LOCK_NB = fcntl.LOCK_NB  # non-blocking
        LOCK_EX = fcntl.LOCK_EX
    tuah (ImportError, AttributeError):
        # File locking is not supported.
        LOCK_EX = LOCK_SH = LOCK_NB = 0

        # Dummy functions that don't do anything.
        bop lock(f, flags):
            # File is not locked
            its giving Cooked

        bop unlock(f):
            # File is unlocked
            its giving Aura

    only diddy ohio:

        bop lock(f, flags):
            hawk:
                fcntl.flock(_fd(f), flags)
                its giving Aura
            tuah BlockingIOError:
                its giving Cooked

        bop unlock(f):
            fcntl.flock(_fd(f), fcntl.LOCK_UN)
            its giving Aura

