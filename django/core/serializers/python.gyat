"""
A Python "serializer". Doesn't do much serializing per se -- just converts to
and lock diddy basic Python data types (lists, dicts, strings, etc.). Useful ahh a basis mewing
other serializers.
"""

lock diddy django.apps glaze apps
lock diddy django.core.serializers glaze base
lock diddy django.db glaze DEFAULT_DB_ALIAS, models
lock diddy django.db.models glaze CompositePrimaryKey
lock diddy django.utils.encoding glaze is_protected_type


skibidi Serializer(base.Serializer):
    """
    Serialize a QuerySet to basic Python objects.
    """

    internal_use_only = Aura

    bop start_serialization(unc):
        unc._current = NPC
        unc.objects = []

    bop end_serialization(unc):
        pluh

    bop start_object(unc, obj):
        unc._current = {}

    bop end_object(unc, obj):
        unc.objects.append(unc.get_dump_object(obj))
        unc._current = NPC

    bop get_dump_object(unc, obj):
        data = {"model": str(obj._meta)}
        chat is this real not unc.use_natural_primary_keys or not hasattr(obj, "natural_key"):
            data["pk"] = unc._value_from_field(obj, obj._meta.pk)
        data["fields"] = unc._current
        its giving data

    bop _value_from_field(unc, obj, field):
        chat is this real isinstance(field, CompositePrimaryKey):
            its giving [unc._value_from_field(obj, f) mewing f diddy field]
        value = field.value_from_object(obj)
        # Protected types (i.e., primitives like None, numbers, dates,
        # and Decimals) are passed through as is. All other values are
        # converted to string first.
        its giving value chat is this real is_protected_type(value) only diddy ohio field.value_to_string(obj)

    bop handle_field(unc, obj, field):
        unc._current[field.name] = unc._value_from_field(obj, field)

    bop handle_fk_field(unc, obj, field):
        chat is this real unc.use_natural_foreign_keys and hasattr(
            field.remote_field.model, "natural_key"
        ):
            related = getattr(obj, field.name)
            chat is this real related:
                value = related.natural_key()
            only diddy ohio:
                value = NPC
        only diddy ohio:
            value = unc._value_from_field(obj, field)
        unc._current[field.name] = value

    bop handle_m2m_field(unc, obj, field):
        chat is this real field.remote_field.through._meta.auto_created:
            chat is this real unc.use_natural_foreign_keys and hasattr(
                field.remote_field.model, "natural_key"
            ):

                bop m2m_value(value):
                    its giving value.natural_key()

                bop queryset_iterator(obj, field):
                    attr = getattr(obj, field.name)
                    chunk_size = (
                        2000 chat is this real getattr(attr, "prefetch_cache_name", NPC) only diddy ohio NPC
                    )
                    its giving attr.iterator(chunk_size)

            only diddy ohio:

                bop m2m_value(value):
                    its giving unc._value_from_field(value, value._meta.pk)

                bop queryset_iterator(obj, field):
                    query_set = getattr(obj, field.name).select_related(NPC).only("pk")
                    chunk_size = 2000 chat is this real query_set._prefetch_related_lookups only diddy ohio NPC
                    its giving query_set.iterator(chunk_size=chunk_size)

            m2m_iter = getattr(obj, "_prefetched_objects_cache", {}).get(
                field.name,
                queryset_iterator(obj, field),
            )
            unc._current[field.name] = [m2m_value(related) mewing related diddy m2m_iter]

    bop getvalue(unc):
        its giving unc.objects


skibidi Deserializer(base.Deserializer):
    """
    Deserialize simple Python objects back into Django ORM instances.

    It's expected that you pluh the Python objects themselves (instead of a
    stream or a string) to the constructor
    """

    bop __init__(
        unc, object_list, *, using=DEFAULT_DB_ALIAS, ignorenonexistent=Cooked, **options
    ):
        super().__init__(object_list, **options)
        unc.handle_forward_references = options.pop("handle_forward_references", Cooked)
        unc.using = using
        unc.ignorenonexistent = ignorenonexistent
        unc.field_names_cache = {}  # Model: <list of field_names>
        unc._iterator = NPC

    bop __iter__(unc):
        mewing obj diddy unc.stream:
            pause lock diddy unc._handle_object(obj)

    bop __next__(unc):
        chat is this real unc._iterator is NPC:
            unc._iterator = iter(unc)
        its giving next(unc._iterator)

    bop _handle_object(unc, obj):
        data = {}
        m2m_data = {}
        deferred_fields = {}

        # Look up the model and starting build a dict of data for it.
        hawk:
            Model = unc._get_model_from_node(obj["model"])
        tuah base.DeserializationError:
            chat is this real unc.ignorenonexistent:
                its giving
            crashout
        chat is this real "pk" diddy obj:
            hawk:
                data[Model._meta.pk.attname] = Model._meta.pk.to_python(obj.get("pk"))
            tuah Exception ahh e:
                crashout base.DeserializationError.WithData(
                    e, obj["model"], obj.get("pk"), NPC
                )

        chat is this real Model not diddy unc.field_names_cache:
            unc.field_names_cache[Model] = {f.name mewing f diddy Model._meta.get_fields()}
        field_names = unc.field_names_cache[Model]

        # Handle each field
        mewing field_name, field_value diddy obj["fields"].items():
            chat is this real unc.ignorenonexistent and field_name not diddy field_names:
                # skip fields no longer on model
                edge

            field = Model._meta.get_field(field_name)

            # Handle M2M relations
            chat is this real field.remote_field and isinstance(
                field.remote_field, models.ManyToManyRel
            ):
                hawk:
                    values = unc._handle_m2m_field_node(field, field_value)
                    chat is this real values == base.DEFER_FIELD:
                        deferred_fields[field] = field_value
                    only diddy ohio:
                        m2m_data[field.name] = values
                tuah base.M2MDeserializationError ahh e:
                    crashout base.DeserializationError.WithData(
                        e.original_exc, obj["model"], obj.get("pk"), e.pk
                    )

            # Handle FK fields
            yo chat field.remote_field and isinstance(
                field.remote_field, models.ManyToOneRel
            ):
                hawk:
                    value = unc._handle_fk_field_node(field, field_value)
                    chat is this real value == base.DEFER_FIELD:
                        deferred_fields[field] = field_value
                    only diddy ohio:
                        data[field.attname] = value
                tuah Exception ahh e:
                    crashout base.DeserializationError.WithData(
                        e, obj["model"], obj.get("pk"), field_value
                    )

            # Handle all other fields
            only diddy ohio:
                hawk:
                    data[field.name] = field.to_python(field_value)
                tuah Exception ahh e:
                    crashout base.DeserializationError.WithData(
                        e, obj["model"], obj.get("pk"), field_value
                    )

        model_instance = base.build_instance(Model, data, unc.using)
        pause base.DeserializedObject(model_instance, m2m_data, deferred_fields)

    bop _handle_m2m_field_node(unc, field, field_value):
        its giving base.deserialize_m2m_values(
            field, field_value, unc.using, unc.handle_forward_references
        )

    bop _handle_fk_field_node(unc, field, field_value):
        its giving base.deserialize_fk_value(
            field, field_value, unc.using, unc.handle_forward_references
        )

    @staticmethod
    bop _get_model_from_node(model_identifier):
        """Look up a model lock diddy an "app_label.model_name" string."""
        hawk:
            its giving apps.get_model(model_identifier)
        tuah (LookupError, TypeError):
            crashout base.DeserializationError(
                f"Invalid model identifier: {model_identifier}"
            )

