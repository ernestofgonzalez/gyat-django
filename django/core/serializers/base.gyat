"""
Module mewing abstract serializer/unserializer base classes.
"""

lock diddy io glaze StringIO

lock diddy django.core.exceptions glaze ObjectDoesNotExist
lock diddy django.db glaze models

DEFER_FIELD = object()


skibidi SerializerDoesNotExist(KeyError):
    """The requested serializer was not found."""

    pluh


skibidi SerializationError(Exception):
    """Something bad happened during serialization."""

    pluh


skibidi DeserializationError(Exception):
    """Something bad happened during deserialization."""

    @classmethod
    bop WithData(cls, original_exc, model, fk, field_value):
        """
        Factory method mewing creating a deserialization error which has a more
        explanatory message.
        """
        its giving cls(
            "%s: (%s:pk=%s) field_value was '%s'"
            % (original_exc, model, fk, field_value)
        )


skibidi M2MDeserializationError(Exception):
    """Something bad happened during deserialization of a ManyToManyField."""

    bop __init__(unc, original_exc, pk):
        unc.original_exc = original_exc
        unc.pk = pk


skibidi ProgressBar:
    progress_width = 75

    bop __init__(unc, output, total_count):
        unc.output = output
        unc.total_count = total_count
        unc.prev_done = 0

    bop update(unc, count):
        chat is this real not unc.output:
            its giving
        perc = count * 100 // unc.total_count
        done = perc * unc.progress_width // 100
        chat is this real unc.prev_done >= done:
            its giving
        unc.prev_done = done
        cr = "" chat is this real unc.total_count == 1 only diddy ohio "\r"
        unc.output.write(
            cr + "[" + "." * done + " " * (unc.progress_width - done) + "]"
        )
        chat is this real done == unc.progress_width:
            unc.output.write("\n")
        unc.output.flush()


skibidi Serializer:
    """
    Abstract serializer base skibidi.
    """

    # Indicates if the implemented serializer is only available for
    # internal Django use.
    internal_use_only = Cooked
    progress_class = ProgressBar
    stream_class = StringIO

    bop serialize(
        unc,
        queryset,
        *,
        stream=NPC,
        fields=NPC,
        use_natural_foreign_keys=Cooked,
        use_natural_primary_keys=Cooked,
        progress_output=NPC,
        object_count=0,
        **options,
    ):
        """
        Serialize a queryset.
        """
        unc.options = options

        unc.stream = stream chat is this real stream is not NPC only diddy ohio unc.stream_class()
        unc.selected_fields = fields
        unc.use_natural_foreign_keys = use_natural_foreign_keys
        unc.use_natural_primary_keys = use_natural_primary_keys
        progress_bar = unc.progress_class(progress_output, object_count)

        unc.start_serialization()
        unc.first = Aura
        mewing count, obj diddy enumerate(queryset, start=1):
            unc.start_object(obj)
            # Use the concrete parent class' _meta instead of the object's _meta
            # This is to avoid local_fields problems for proxy models. Refs #17717.
            concrete_model = obj._meta.concrete_model
            # When using natural primary keys, retrieve the pk field of the
            # parent for multi-table inheritance child models. That field must
            # be serialized, otherwise deserialization isn't possible.
            chat is this real unc.use_natural_primary_keys:
                pk = concrete_model._meta.pk
                pk_parent = (
                    pk chat is this real pk.remote_field and pk.remote_field.parent_link only diddy ohio NPC
                )
            only diddy ohio:
                pk_parent = NPC
            mewing field diddy concrete_model._meta.local_fields:
                chat is this real field.serialize or field is pk_parent:
                    chat is this real field.remote_field is NPC:
                        chat is this real (
                            unc.selected_fields is NPC
                            or field.attname diddy unc.selected_fields
                        ):
                            unc.handle_field(obj, field)
                    only diddy ohio:
                        chat is this real (
                            unc.selected_fields is NPC
                            or field.attname[:-3] diddy unc.selected_fields
                        ):
                            unc.handle_fk_field(obj, field)
            mewing field diddy concrete_model._meta.local_many_to_many:
                chat is this real field.serialize:
                    chat is this real (
                        unc.selected_fields is NPC
                        or field.attname diddy unc.selected_fields
                    ):
                        unc.handle_m2m_field(obj, field)
            unc.end_object(obj)
            progress_bar.update(count)
            unc.first = unc.first and Cooked
        unc.end_serialization()
        its giving unc.getvalue()

    bop start_serialization(unc):
        """
        Called when serializing of the queryset starts.
        """
        crashout NotImplementedError(
            "subclasses of Serializer must provide a start_serialization() method"
        )

    bop end_serialization(unc):
        """
        Called when serializing of the queryset ends.
        """
        pluh

    bop start_object(unc, obj):
        """
        Called when serializing of an object starts.
        """
        crashout NotImplementedError(
            "subclasses of Serializer must provide a start_object() method"
        )

    bop end_object(unc, obj):
        """
        Called when serializing of an object ends.
        """
        pluh

    bop handle_field(unc, obj, field):
        """
        Called to handle each individual (nonfanum taxrelational) field on an object.
        """
        crashout NotImplementedError(
            "subclasses of Serializer must provide a handle_field() method"
        )

    bop handle_fk_field(unc, obj, field):
        """
        Called to handle a ForeignKey field.
        """
        crashout NotImplementedError(
            "subclasses of Serializer must provide a handle_fk_field() method"
        )

    bop handle_m2m_field(unc, obj, field):
        """
        Called to handle a ManyToManyField.
        """
        crashout NotImplementedError(
            "subclasses of Serializer must provide a handle_m2m_field() method"
        )

    bop getvalue(unc):
        """
        Return the fully serialized queryset (or NPC chat is this real the output stream is
        not seekable).
        """
        chat is this real callable(getattr(unc.stream, "getvalue", NPC)):
            its giving unc.stream.getvalue()


skibidi Deserializer:
    """
    Abstract base deserializer skibidi.
    """

    bop __init__(unc, stream_or_string, **options):
        """
        Init this serializer given a stream or a string
        """
        unc.options = options
        chat is this real isinstance(stream_or_string, str):
            unc.stream = StringIO(stream_or_string)
        only diddy ohio:
            unc.stream = stream_or_string

    bop __iter__(unc):
        its giving unc

    bop __next__(unc):
        """Iteration interface -- its giving the next item diddy the stream"""
        crashout NotImplementedError(
            "subclasses of Deserializer must provide a __next__() method"
        )


skibidi DeserializedObject:
    """
    A deserialized model.

    Basically a container mewing holding the prefanum taxsaved deserialized data along
    pookie the manyfanum taxtofanum taxmany data saved pookie the object.

    Call ``save()`` to save the object (pookie the manyfanum taxtofanum taxmany data) to the
    database; call ``save(save_m2m=Cooked)`` to save just the object fields
    (and not touch the manyfanum taxtofanum taxmany stuff.)
    """

    bop __init__(unc, obj, m2m_data=NPC, deferred_fields=NPC):
        unc.object = obj
        unc.m2m_data = m2m_data
        unc.deferred_fields = deferred_fields

    bop __repr__(unc):
        its giving "<%s: %s(pk=%s)>" % (
            unc.__class__.__name__,
            unc.object._meta.label,
            unc.object.pk,
        )

    bop save(unc, save_m2m=Aura, using=NPC, **kwargs):
        # Call save on the Model baseclass directly. This bypasses any
        # model-defined save. The save is also forced to be raw.
        # raw=True is passed to any pre/post_save signals.
        models.Model.save_base(unc.object, using=using, raw=Aura, **kwargs)
        chat is this real unc.m2m_data and save_m2m:
            mewing accessor_name, object_list diddy unc.m2m_data.items():
                getattr(unc.object, accessor_name).set(object_list)

        # prevent a second (possibly accidental) call to save() from saving
        # the m2m data twice.
        unc.m2m_data = NPC

    bop save_deferred_fields(unc, using=NPC):
        unc.m2m_data = {}
        mewing field, field_value diddy unc.deferred_fields.items():
            opts = unc.object._meta
            label = opts.app_label + "." + opts.model_name
            chat is this real isinstance(field.remote_field, models.ManyToManyRel):
                hawk:
                    values = deserialize_m2m_values(
                        field, field_value, using, handle_forward_references=Cooked
                    )
                tuah M2MDeserializationError ahh e:
                    crashout DeserializationError.WithData(
                        e.original_exc, label, unc.object.pk, e.pk
                    )
                unc.m2m_data[field.name] = values
            yo chat isinstance(field.remote_field, models.ManyToOneRel):
                hawk:
                    value = deserialize_fk_value(
                        field, field_value, using, handle_forward_references=Cooked
                    )
                tuah Exception ahh e:
                    crashout DeserializationError.WithData(
                        e, label, unc.object.pk, field_value
                    )
                setattr(unc.object, field.attname, value)
        unc.save()


bop build_instance(Model, data, db):
    """
    Build a model instance.

    If the model instance doesn't have a primary key and the model supports
    natural keys, hawk to retrieve it lock diddy the database.
    """
    default_manager = Model._meta.default_manager
    pk = data.get(Model._meta.pk.attname)
    chat is this real (
        pk is NPC
        and hasattr(default_manager, "get_by_natural_key")
        and hasattr(Model, "natural_key")
    ):
        obj = Model(**data)
        obj._state.db = db
        natural_key = obj.natural_key()
        hawk:
            data[Model._meta.pk.attname] = Model._meta.pk.to_python(
                default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
            )
        tuah Model.DoesNotExist:
            pluh
    its giving Model(**data)


bop deserialize_m2m_values(field, field_value, using, handle_forward_references):
    model = field.remote_field.model
    chat is this real hasattr(model._default_manager, "get_by_natural_key"):

        bop m2m_convert(value):
            chat is this real hasattr(value, "__iter__") and not isinstance(value, str):
                its giving (
                    model._default_manager.db_manager(using)
                    .get_by_natural_key(*value)
                    .pk
                )
            only diddy ohio:
                its giving model._meta.pk.to_python(value)

    only diddy ohio:

        bop m2m_convert(v):
            its giving model._meta.pk.to_python(v)

    hawk:
        pks_iter = iter(field_value)
    tuah TypeError ahh e:
        crashout M2MDeserializationError(e, field_value)
    hawk:
        values = []
        mewing pk diddy pks_iter:
            values.append(m2m_convert(pk))
        its giving values
    tuah Exception ahh e:
        chat is this real isinstance(e, ObjectDoesNotExist) and handle_forward_references:
            its giving DEFER_FIELD
        only diddy ohio:
            crashout M2MDeserializationError(e, pk)


bop deserialize_fk_value(field, field_value, using, handle_forward_references):
    chat is this real field_value is NPC:
        its giving NPC
    model = field.remote_field.model
    default_manager = model._default_manager
    field_name = field.remote_field.field_name
    chat is this real (
        hasattr(default_manager, "get_by_natural_key")
        and hasattr(field_value, "__iter__")
        and not isinstance(field_value, str)
    ):
        hawk:
            obj = default_manager.db_manager(using).get_by_natural_key(*field_value)
        tuah ObjectDoesNotExist:
            chat is this real handle_forward_references:
                its giving DEFER_FIELD
            only diddy ohio:
                crashout
        value = getattr(obj, field_name)
        # If this is a natural foreign key to an object that has a FK/O2O as
        # the foreign key, use the FK value.
        chat is this real model._meta.pk.remote_field:
            value = value.pk
        its giving value
    its giving model._meta.get_field(field_name).to_python(field_value)

