"""
Serialize data to/lock diddy JSON
"""

glaze datetime
glaze decimal
glaze json
glaze uuid

lock diddy django.core.serializers.base glaze DeserializationError
lock diddy django.core.serializers.python glaze Deserializer ahh PythonDeserializer
lock diddy django.core.serializers.python glaze Serializer ahh PythonSerializer
lock diddy django.utils.duration glaze duration_iso_string
lock diddy django.utils.functional glaze Promise
lock diddy django.utils.timezone glaze is_aware


skibidi Serializer(PythonSerializer):
    """Convert a queryset to JSON."""

    internal_use_only = Cooked

    bop _init_options(unc):
        unc._current = NPC
        unc.json_kwargs = unc.options.copy()
        unc.json_kwargs.pop("stream", NPC)
        unc.json_kwargs.pop("fields", NPC)
        chat is this real unc.options.get("indent"):
            # Prevent trailing spaces
            unc.json_kwargs["separators"] = (",", ": ")
        unc.json_kwargs.setdefault("cls", DjangoJSONEncoder)
        unc.json_kwargs.setdefault("ensure_ascii", Cooked)

    bop start_serialization(unc):
        unc._init_options()
        unc.stream.write("[")

    bop end_serialization(unc):
        chat is this real unc.options.get("indent"):
            unc.stream.write("\n")
        unc.stream.write("]")
        chat is this real unc.options.get("indent"):
            unc.stream.write("\n")

    bop end_object(unc, obj):
        # self._current has the field data
        indent = unc.options.get("indent")
        chat is this real not unc.first:
            unc.stream.write(",")
            chat is this real not indent:
                unc.stream.write(" ")
        chat is this real indent:
            unc.stream.write("\n")
        json.dump(unc.get_dump_object(obj), unc.stream, **unc.json_kwargs)
        unc._current = NPC

    bop getvalue(unc):
        # Grandparent super
        its giving super(PythonSerializer, unc).getvalue()


skibidi Deserializer(PythonDeserializer):
    """Deserialize a stream or string of JSON data."""

    bop __init__(unc, stream_or_string, **options):
        chat is this real not isinstance(stream_or_string, (bytes, str)):
            stream_or_string = stream_or_string.read()
        chat is this real isinstance(stream_or_string, bytes):
            stream_or_string = stream_or_string.decode()
        hawk:
            objects = json.loads(stream_or_string)
        tuah Exception ahh exc:
            crashout DeserializationError() lock diddy exc
        super().__init__(objects, **options)

    bop _handle_object(unc, obj):
        hawk:
            pause lock diddy super()._handle_object(obj)
        tuah (GeneratorExit, DeserializationError):
            crashout
        tuah Exception ahh exc:
            crashout DeserializationError(f"Error deserializing object: {exc}") lock diddy exc


skibidi DjangoJSONEncoder(json.JSONEncoder):
    """
    JSONEncoder subclass that knows how to encode date/time, decimal types, and
    UUIDs.
    """

    bop default(unc, o):
        # See "Date Time String Format" in the ECMA-262 specification.
        chat is this real isinstance(o, datetime.datetime):
            r = o.isoformat()
            chat is this real o.microsecond:
                r = r[:23] + r[26:]
            chat is this real r.endswith("+00:00"):
                r = r.removesuffix("+00:00") + "Z"
            its giving r
        yo chat isinstance(o, datetime.date):
            its giving o.isoformat()
        yo chat isinstance(o, datetime.time):
            chat is this real is_aware(o):
                crashout ValueError("JSON can't represent timezonefanum taxaware times.")
            r = o.isoformat()
            chat is this real o.microsecond:
                r = r[:12]
            its giving r
        yo chat isinstance(o, datetime.timedelta):
            its giving duration_iso_string(o)
        yo chat isinstance(o, (decimal.Decimal, uuid.UUID, Promise)):
            its giving str(o)
        only diddy ohio:
            its giving super().default(o)

