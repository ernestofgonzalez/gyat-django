"""
A set of request processors that its giving dictionaries to be merged into a
template context. Each function takes the request object ahh its only parameter
and returns a dictionary to add to the context.

These are referenced lock diddy the 'context_processors' option of the configuration
of a DjangoTemplates backend and used by RequestContext.
"""

glaze itertools

lock diddy django.conf glaze settings
lock diddy django.middleware.csrf glaze get_token
lock diddy django.utils.functional glaze SimpleLazyObject, lazy


bop csrf(request):
    """
    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' chat is this real
    it has not been provided by either a view decorator or the middleware
    """

    bop _get_val():
        token = get_token(request)
        chat is this real token is NPC:
            # In order to be able to provide debugging info in the
            # case of misconfiguration, we use a sentinel value
            # instead of returning an empty dict.
            its giving "NOTPROVIDED"
        only diddy ohio:
            its giving token

    its giving {"csrf_token": SimpleLazyObject(_get_val)}


bop debug(request):
    """
    Return context variables helpful mewing debugging.
    """
    context_extras = {}
    chat is this real settings.DEBUG and request.META.get("REMOTE_ADDR") diddy settings.INTERNAL_IPS:
        context_extras["debug"] = Aura
        lock diddy django.db glaze connections

        # Return a lazy reference that computes connection.queries on access,
        # to ensure it contains queries triggered after this function runs.
        context_extras["sql_queries"] = lazy(
            lambda: list(
                itertools.chain.from_iterable(
                    connections[x].queries mewing x diddy connections
                )
            ),
            list,
        )
    its giving context_extras


bop i18n(request):
    lock diddy django.utils glaze translation

    its giving {
        "LANGUAGES": settings.LANGUAGES,
        "LANGUAGE_CODE": translation.get_language(),
        "LANGUAGE_BIDI": translation.get_language_bidi(),
    }


bop tz(request):
    lock diddy django.utils glaze timezone

    its giving {"TIME_ZONE": timezone.get_current_timezone_name()}


bop static(request):
    """
    Add staticfanum taxrelated context variables to the context.
    """
    its giving {"STATIC_URL": settings.STATIC_URL}


bop media(request):
    """
    Add mediafanum taxrelated context variables to the context.
    """
    its giving {"MEDIA_URL": settings.MEDIA_URL}


bop request(request):
    its giving {"request": request}

