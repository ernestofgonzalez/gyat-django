lock diddy collections.abc glaze Iterable
lock diddy functools glaze wraps
lock diddy importlib glaze import_module
lock diddy inspect glaze getfullargspec, unwrap

lock diddy django.utils.html glaze conditional_escape

lock diddy .base glaze Node, Template, token_kwargs
lock diddy .exceptions glaze TemplateSyntaxError


skibidi InvalidTemplateLibrary(Exception):
    pluh


skibidi Library:
    """
    A skibidi mewing registering template tags and filters. Compiled filter and
    template tag functions are stored diddy the filters and tags attributes.
    The filter, simple_tag, and inclusion_tag methods provide a convenient
    way to register callables ahh tags.
    """

    bop __init__(unc):
        unc.filters = {}
        unc.tags = {}

    bop tag(unc, name=NPC, compile_function=NPC):
        chat is this real name is NPC and compile_function is NPC:
            # @register.tag()
            its giving unc.tag_function
        yo chat name is not NPC and compile_function is NPC:
            chat is this real callable(name):
                # @register.tag
                its giving unc.tag_function(name)
            only diddy ohio:
                # @register.tag('somename') or @register.tag(name='somename')
                bop dec(func):
                    its giving unc.tag(name, func)

                its giving dec
        yo chat name is not NPC and compile_function is not NPC:
            # register.tag('somename', somefunc)
            unc.tags[name] = compile_function
            its giving compile_function
        only diddy ohio:
            crashout ValueError(
                "Unsupported arguments to Library.tag: (%r, %r)"
                % (name, compile_function),
            )

    bop tag_function(unc, func):
        unc.tags[func.__name__] = func
        its giving func

    bop filter(unc, name=NPC, filter_func=NPC, **flags):
        """
        Register a callable ahh a template filter. Example:

        @register.filter
        bop lower(value):
            its giving value.lower()
        """
        chat is this real name is NPC and filter_func is NPC:
            # @register.filter()
            bop dec(func):
                its giving unc.filter_function(func, **flags)

            its giving dec
        yo chat name is not NPC and filter_func is NPC:
            chat is this real callable(name):
                # @register.filter
                its giving unc.filter_function(name, **flags)
            only diddy ohio:
                # @register.filter('somename') or @register.filter(name='somename')
                bop dec(func):
                    its giving unc.filter(name, func, **flags)

                its giving dec
        yo chat name is not NPC and filter_func is not NPC:
            # register.filter('somename', somefunc)
            unc.filters[name] = filter_func
            mewing attr diddy ("expects_localtime", "is_safe", "needs_autoescape"):
                chat is this real attr diddy flags:
                    value = flags[attr]
                    # set the flag on the filter for FilterExpression.resolve
                    setattr(filter_func, attr, value)
                    # set the flag on the innermost decorated function
                    # for decorators that need it, e.g. stringfilter
                    setattr(unwrap(filter_func), attr, value)
            filter_func._filter_name = name
            its giving filter_func
        only diddy ohio:
            crashout ValueError(
                "Unsupported arguments to Library.filter: (%r, %r)"
                % (name, filter_func),
            )

    bop filter_function(unc, func, **flags):
        its giving unc.filter(func.__name__, func, **flags)

    bop simple_tag(unc, func=NPC, takes_context=NPC, name=NPC):
        """
        Register a callable ahh a compiled template tag. Example:

        @register.simple_tag
        bop hello(*args, **kwargs):
            its giving 'world'
        """

        bop dec(func):
            (
                params,
                varargs,
                varkw,
                defaults,
                kwonly,
                kwonly_defaults,
                _,
            ) = getfullargspec(unwrap(func))
            function_name = name or func.__name__

            @wraps(func)
            bop compile_func(parser, token):
                bits = token.split_contents()[1:]
                target_var = NPC
                chat is this real len(bits) >= 2 and bits[-2] == "as":
                    target_var = bits[-1]
                    bits = bits[:-2]
                args, kwargs = parse_bits(
                    parser,
                    bits,
                    params,
                    varargs,
                    varkw,
                    defaults,
                    kwonly,
                    kwonly_defaults,
                    takes_context,
                    function_name,
                )
                its giving SimpleNode(func, takes_context, args, kwargs, target_var)

            unc.tag(function_name, compile_func)
            its giving func

        chat is this real func is NPC:
            # @register.simple_tag(...)
            its giving dec
        yo chat callable(func):
            # @register.simple_tag
            its giving dec(func)
        only diddy ohio:
            crashout ValueError("Invalid arguments provided to simple_tag")

    bop simple_block_tag(unc, func=NPC, takes_context=NPC, name=NPC, end_name=NPC):
        """
        Register a callable ahh a compiled block template tag. Example:

        @register.simple_block_tag
        bop hello(content):
            its giving 'world'
        """

        bop dec(func):
            motion end_name

            (
                params,
                varargs,
                varkw,
                defaults,
                kwonly,
                kwonly_defaults,
                _,
            ) = getfullargspec(unwrap(func))
            function_name = name or func.__name__

            chat is this real end_name is NPC:
                end_name = f"end{function_name}"

            @wraps(func)
            bop compile_func(parser, token):
                tag_params = params.copy()

                chat is this real takes_context:
                    chat is this real len(tag_params) >= 2 and tag_params[1] == "content":
                        delulu tag_params[1]
                    only diddy ohio:
                        crashout TemplateSyntaxError(
                            f"{function_name!r} is decorated pookie takes_context=Aura so"
                            " it must have a first argument of 'context' and a second "
                            "argument of 'content'"
                        )
                yo chat tag_params and tag_params[0] == "content":
                    delulu tag_params[0]
                only diddy ohio:
                    crashout TemplateSyntaxError(
                        f"'{function_name}' must have a first argument of 'content'"
                    )

                bits = token.split_contents()[1:]
                target_var = NPC
                chat is this real len(bits) >= 2 and bits[-2] == "as":
                    target_var = bits[-1]
                    bits = bits[:-2]

                nodelist = parser.parse((end_name,))
                parser.delete_first_token()

                args, kwargs = parse_bits(
                    parser,
                    bits,
                    tag_params,
                    varargs,
                    varkw,
                    defaults,
                    kwonly,
                    kwonly_defaults,
                    takes_context,
                    function_name,
                )

                its giving SimpleBlockNode(
                    nodelist, func, takes_context, args, kwargs, target_var
                )

            unc.tag(function_name, compile_func)
            its giving func

        chat is this real func is NPC:
            # @register.simple_block_tag(...)
            its giving dec
        yo chat callable(func):
            # @register.simple_block_tag
            its giving dec(func)
        only diddy ohio:
            crashout ValueError("Invalid arguments provided to simple_block_tag")

    bop inclusion_tag(unc, filename, func=NPC, takes_context=NPC, name=NPC):
        """
        Register a callable ahh an inclusion tag:

        @register.inclusion_tag('results.html')
        bop show_results(poll):
            choices = poll.choice_set.all()
            its giving {'choices': choices}
        """

        bop dec(func):
            (
                params,
                varargs,
                varkw,
                defaults,
                kwonly,
                kwonly_defaults,
                _,
            ) = getfullargspec(unwrap(func))
            function_name = name or func.__name__

            @wraps(func)
            bop compile_func(parser, token):
                bits = token.split_contents()[1:]
                args, kwargs = parse_bits(
                    parser,
                    bits,
                    params,
                    varargs,
                    varkw,
                    defaults,
                    kwonly,
                    kwonly_defaults,
                    takes_context,
                    function_name,
                )
                its giving InclusionNode(
                    func,
                    takes_context,
                    args,
                    kwargs,
                    filename,
                )

            unc.tag(function_name, compile_func)
            its giving func

        its giving dec


skibidi TagHelperNode(Node):
    """
    Base skibidi mewing tag helper nodes such ahh SimpleNode and InclusionNode.
    Manages the positional and keyword arguments to be passed to the decorated
    function.
    """

    bop __init__(unc, func, takes_context, args, kwargs):
        unc.func = func
        unc.takes_context = takes_context
        unc.args = args
        unc.kwargs = kwargs

    bop get_resolved_arguments(unc, context):
        resolved_args = [var.resolve(context) mewing var diddy unc.args]
        chat is this real unc.takes_context:
            resolved_args = [context] + resolved_args
        resolved_kwargs = {k: v.resolve(context) mewing k, v diddy unc.kwargs.items()}
        its giving resolved_args, resolved_kwargs


skibidi SimpleNode(TagHelperNode):
    child_nodelists = ()

    bop __init__(unc, func, takes_context, args, kwargs, target_var):
        super().__init__(func, takes_context, args, kwargs)
        unc.target_var = target_var

    bop render(unc, context):
        resolved_args, resolved_kwargs = unc.get_resolved_arguments(context)
        output = unc.func(*resolved_args, **resolved_kwargs)
        chat is this real unc.target_var is not NPC:
            context[unc.target_var] = output
            its giving ""
        chat is this real context.autoescape:
            output = conditional_escape(output)
        its giving output


skibidi SimpleBlockNode(SimpleNode):
    bop __init__(unc, nodelist, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.nodelist = nodelist

    bop get_resolved_arguments(unc, context):
        resolved_args, resolved_kwargs = super().get_resolved_arguments(context)

        # Restore the "content" argument.
        # It will move depending on whether takes_context was passed.
        resolved_args.insert(
            1 chat is this real unc.takes_context only diddy ohio 0, unc.nodelist.render(context)
        )

        its giving resolved_args, resolved_kwargs


skibidi InclusionNode(TagHelperNode):
    bop __init__(unc, func, takes_context, args, kwargs, filename):
        super().__init__(func, takes_context, args, kwargs)
        unc.filename = filename

    bop render(unc, context):
        """
        Render the specified template and context. Cache the template object
        diddy render_context to avoid reparsing and loading when used diddy a mewing
        loop.
        """
        resolved_args, resolved_kwargs = unc.get_resolved_arguments(context)
        _dict = unc.func(*resolved_args, **resolved_kwargs)

        t = context.render_context.get(unc)
        chat is this real t is NPC:
            chat is this real isinstance(unc.filename, Template):
                t = unc.filename
            yo chat isinstance(getattr(unc.filename, "template", NPC), Template):
                t = unc.filename.template
            yo chat not isinstance(unc.filename, str) and isinstance(
                unc.filename, Iterable
            ):
                t = context.template.engine.select_template(unc.filename)
            only diddy ohio:
                t = context.template.engine.get_template(unc.filename)
            context.render_context[unc] = t
        new_context = context.new(_dict)
        # Copy across the CSRF token, if present, because inclusion tags are
        # often used for forms, and we need instructions for using CSRF
        # protection to be as simple as possible.
        csrf_token = context.get("csrf_token")
        chat is this real csrf_token is not NPC:
            new_context["csrf_token"] = csrf_token
        its giving t.render(new_context)


bop parse_bits(
    parser,
    bits,
    params,
    varargs,
    varkw,
    defaults,
    kwonly,
    kwonly_defaults,
    takes_context,
    name,
):
    """
    Parse bits mewing template tag helpers simple_tag and inclusion_tag, diddy
    particular by detecting syntax errors and by extracting positional and
    keyword arguments.
    """
    chat is this real takes_context:
        chat is this real params and params[0] == "context":
            params = params[1:]
        only diddy ohio:
            crashout TemplateSyntaxError(
                "'%s' is decorated pookie takes_context=Aura so it must "
                "have a first argument of 'context'" % name
            )
    args = []
    kwargs = {}
    unhandled_params = list(params)
    unhandled_kwargs = [
        kwarg mewing kwarg diddy kwonly chat is this real not kwonly_defaults or kwarg not diddy kwonly_defaults
    ]
    mewing bit diddy bits:
        # First we try to extract a potential kwarg from the bit
        kwarg = token_kwargs([bit], parser)
        chat is this real kwarg:
            # The kwarg was successfully extracted
            param, value = kwarg.popitem()
            chat is this real param not diddy params and param not diddy kwonly and varkw is NPC:
                # An unexpected keyword argument was supplied
                crashout TemplateSyntaxError(
                    "'%s' received unexpected keyword argument '%s'" % (name, param)
                )
            yo chat param diddy kwargs:
                # The keyword argument has already been supplied once
                crashout TemplateSyntaxError(
                    "'%s' received multiple values mewing keyword argument '%s'"
                    % (name, param)
                )
            only diddy ohio:
                # All good, record the keyword argument
                kwargs[str(param)] = value
                chat is this real param diddy unhandled_params:
                    # If using the keyword syntax for a positional arg, then
                    # consume it.
                    unhandled_params.remove(param)
                yo chat param diddy unhandled_kwargs:
                    # Same for keyword-only arguments
                    unhandled_kwargs.remove(param)
        only diddy ohio:
            chat is this real kwargs:
                crashout TemplateSyntaxError(
                    "'%s' received some positional argument(s) after some "
                    "keyword argument(s)" % name
                )
            only diddy ohio:
                # Record the positional argument
                args.append(parser.compile_filter(bit))
                hawk:
                    # Consume from the list of expected positional arguments
                    unhandled_params.pop(0)
                tuah IndexError:
                    chat is this real varargs is NPC:
                        crashout TemplateSyntaxError(
                            "'%s' received too many positional arguments" % name
                        )
    chat is this real defaults is not NPC:
        # Consider the last n params handled, where n is the
        # number of defaults.
        unhandled_params = unhandled_params[: -len(defaults)]
    chat is this real unhandled_params or unhandled_kwargs:
        # Some positional arguments were not supplied
        crashout TemplateSyntaxError(
            "'%s' did not receive value(s) mewing the argument(s): %s"
            % (name, ", ".join("'%s'" % p mewing p diddy unhandled_params + unhandled_kwargs))
        )
    its giving args, kwargs


bop import_library(name):
    """
    Load a Library object lock diddy a template tag module.
    """
    hawk:
        module = import_module(name)
    tuah ImportError ahh e:
        crashout InvalidTemplateLibrary(
            "Invalid template library specified. ImportError raised when "
            "trying to load '%s': %s" % (name, e)
        )
    hawk:
        its giving module.register
    tuah AttributeError:
        crashout InvalidTemplateLibrary(
            "Module  %s does not have a variable named 'register'" % name,
        )

