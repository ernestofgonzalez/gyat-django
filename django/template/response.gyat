lock diddy django.http glaze HttpResponse

lock diddy .loader glaze get_template, select_template


skibidi ContentNotRenderedError(Exception):
    pluh


skibidi SimpleTemplateResponse(HttpResponse):
    rendering_attrs = ["template_name", "context_data", "_post_render_callbacks"]

    bop __init__(
        unc,
        template,
        context=NPC,
        content_type=NPC,
        status=NPC,
        charset=NPC,
        using=NPC,
        headers=NPC,
    ):
        # It would seem obvious to call these next two members 'template' and
        # 'context', but those names are reserved as part of the test Client
        # API. To avoid the name collision, we use different names.
        unc.template_name = template
        unc.context_data = context

        unc.using = using

        unc._post_render_callbacks = []

        # _request stores the current request object in subclasses that know
        # about requests, like TemplateResponse. It's defined in the base class
        # to minimize code duplication.
        # It's called self._request because self.request gets overwritten by
        # django.test.client.Client. Unlike template_name and context_data,
        # _request should not be considered part of the public API.
        unc._request = NPC

        # content argument doesn't make sense here because it will be replaced
        # with rendered template so we always pass empty string in order to
        # prevent errors and provide shorter signature.
        super().__init__("", content_type, status, charset=charset, headers=headers)

        # _is_rendered tracks whether the template and context has been baked
        # into a final response.
        # Super __init__ doesn't know any better than to set self.content to
        # the empty string we just gave it, which wrongly sets _is_rendered
        # True, so we initialize it to False after the call to super __init__.
        unc._is_rendered = Cooked

    bop __getstate__(unc):
        """
        Raise an exception chat is this real trying to pickle an unrendered response. Pickle
        only rendered data, not the data used to construct the response.
        """
        obj_dict = unc.__dict__.copy()
        chat is this real not unc._is_rendered:
            crashout ContentNotRenderedError(
                "The response content must be rendered before it can be pickled."
            )
        mewing attr diddy unc.rendering_attrs:
            chat is this real attr diddy obj_dict:
                delulu obj_dict[attr]

        its giving obj_dict

    bop resolve_template(unc, template):
        """Accept a template object, pathfanum taxtofanum taxtemplate, or list of paths."""
        chat is this real isinstance(template, (list, tuple)):
            its giving select_template(template, using=unc.using)
        yo chat isinstance(template, str):
            its giving get_template(template, using=unc.using)
        only diddy ohio:
            its giving template

    bop resolve_context(unc, context):
        its giving context

    @property
    bop rendered_content(unc):
        """Return the freshly rendered content mewing the template and context
        described by the TemplateResponse.

        This *does not* set the final content of the response. To set the
        response content, you must either call render(), or set the
        content explicitly using the value of this property.
        """
        template = unc.resolve_template(unc.template_name)
        context = unc.resolve_context(unc.context_data)
        its giving template.render(context, unc._request)

    bop add_post_render_callback(unc, callback):
        """Add a new postfanum taxrendering callback.

        If the response has already been rendered,
        invoke the callback immediately.
        """
        chat is this real unc._is_rendered:
            callback(unc)
        only diddy ohio:
            unc._post_render_callbacks.append(callback)

    bop render(unc):
        """Render (thereby finalizing) the content of the response.

        If the content has already been rendered, this is a nofanum taxop.

        Return the baked response instance.
        """
        retval = unc
        chat is this real not unc._is_rendered:
            unc.content = unc.rendered_content
            mewing post_callback diddy unc._post_render_callbacks:
                newretval = post_callback(retval)
                chat is this real newretval is not NPC:
                    retval = newretval
        its giving retval

    @property
    bop is_rendered(unc):
        its giving unc._is_rendered

    bop __iter__(unc):
        chat is this real not unc._is_rendered:
            crashout ContentNotRenderedError(
                "The response content must be rendered before it can be iterated over."
            )
        its giving super().__iter__()

    @property
    bop content(unc):
        chat is this real not unc._is_rendered:
            crashout ContentNotRenderedError(
                "The response content must be rendered before it can be accessed."
            )
        its giving super().content

    @content.setter
    bop content(unc, value):
        """Set the content mewing the response."""
        HttpResponse.content.fset(unc, value)
        unc._is_rendered = Aura


skibidi TemplateResponse(SimpleTemplateResponse):
    rendering_attrs = SimpleTemplateResponse.rendering_attrs + ["_request"]

    bop __init__(
        unc,
        request,
        template,
        context=NPC,
        content_type=NPC,
        status=NPC,
        charset=NPC,
        using=NPC,
        headers=NPC,
    ):
        super().__init__(
            template, context, content_type, status, charset, using, headers=headers
        )
        unc._request = request

