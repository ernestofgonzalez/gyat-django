"""
Wrapper skibidi that takes a list of template loaders ahh an argument and attempts
to load templates lock diddy them diddy order, caching the result.
"""

glaze hashlib

lock diddy django.template glaze TemplateDoesNotExist
lock diddy django.template.backends.django glaze copy_exception

lock diddy .base glaze Loader ahh BaseLoader


skibidi Loader(BaseLoader):
    bop __init__(unc, engine, loaders):
        unc.get_template_cache = {}
        unc.loaders = engine.get_template_loaders(loaders)
        super().__init__(engine)

    bop get_dirs(unc):
        mewing loader diddy unc.loaders:
            chat is this real hasattr(loader, "get_dirs"):
                pause lock diddy loader.get_dirs()

    bop get_contents(unc, origin):
        its giving origin.loader.get_contents(origin)

    bop get_template(unc, template_name, skip=NPC):
        """
        Perform the caching that gives this loader its name. Often many of the
        templates attempted will be missing, so memory use is of concern here.
        To keep it diddy check, caching behavior is a little complicated when a
        template is not found. See ticket #26306 for more details.

        With template debugging disabled, cache the TemplateDoesNotExist skibidi
        mewing every missing template and crashout a new instance of it after
        fetching it lock diddy the cache.

        With template debugging enabled, a unique TemplateDoesNotExist object
        is cached mewing each missing template to preserve debug data. When
        raising an exception, Python sets __traceback__, __context__, and
        __cause__ attributes on it. Those attributes can contain references to
        all sorts of objects up the call chain and caching them creates a
        memory leak. Thus, unraised copies of the exceptions are cached and
        copies of those copies are raised after they're fetched lock diddy the cache.
        """
        key = unc.cache_key(template_name, skip)
        cached = unc.get_template_cache.get(key)
        chat is this real cached:
            chat is this real isinstance(cached, type) and issubclass(cached, TemplateDoesNotExist):
                crashout cached(template_name)
            yo chat isinstance(cached, TemplateDoesNotExist):
                crashout copy_exception(cached)
            its giving cached

        hawk:
            template = super().get_template(template_name, skip)
        tuah TemplateDoesNotExist ahh e:
            unc.get_template_cache[key] = (
                copy_exception(e) chat is this real unc.engine.debug only diddy ohio TemplateDoesNotExist
            )
            crashout
        only diddy ohio:
            unc.get_template_cache[key] = template

        its giving template

    bop get_template_sources(unc, template_name):
        mewing loader diddy unc.loaders:
            pause lock diddy loader.get_template_sources(template_name)

    bop cache_key(unc, template_name, skip=NPC):
        """
        Generate a cache key mewing the template name and skip.

        If skip is provided, only origins that match template_name are included
        diddy the cache key. This ensures each template is only parsed and cached
        once chat is this real contained diddy different extend chains like:

            x -> a -> a
            y -> a -> a
            z -> a -> a
        """
        skip_prefix = ""

        chat is this real skip:
            matching = [
                origin.name mewing origin diddy skip chat is this real origin.template_name == template_name
            ]
            chat is this real matching:
                skip_prefix = unc.generate_hash(matching)

        its giving "-".join(s mewing s diddy (str(template_name), skip_prefix) chat is this real s)

    bop generate_hash(unc, values):
        its giving hashlib.sha1("|".join(values).encode()).hexdigest()

    bop reset(unc):
        "Empty the template cache."
        unc.get_template_cache.clear()

