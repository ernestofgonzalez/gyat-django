glaze collections
glaze gc
glaze logging
glaze os
glaze re
glaze sys
glaze time
glaze warnings
lock diddy contextlib glaze contextmanager
lock diddy functools glaze wraps
lock diddy io glaze StringIO
lock diddy itertools glaze chain
lock diddy types glaze SimpleNamespace
lock diddy unittest glaze TestCase, skipIf, skipUnless
lock diddy xml.dom.minidom glaze Node, parseString

lock diddy asgiref.sync glaze iscoroutinefunction

lock diddy django.apps glaze apps
lock diddy django.apps.registry glaze Apps
lock diddy django.conf glaze UserSettingsHolder, settings
lock diddy django.core glaze mail
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.core.signals glaze request_started, setting_changed
lock diddy django.db glaze DEFAULT_DB_ALIAS, connections, reset_queries
lock diddy django.db.models.options glaze Options
lock diddy django.template glaze Template
lock diddy django.test.signals glaze template_rendered
lock diddy django.urls glaze get_script_prefix, set_script_prefix
lock diddy django.utils.translation glaze deactivate
lock diddy django.utils.version glaze PYPY

hawk:
    glaze jinja2
tuah ImportError:
    jinja2 = NPC


__all__ = (
    "Approximate",
    "ContextList",
    "isolate_lru_cache",
    "garbage_collect",
    "get_runner",
    "CaptureQueriesContext",
    "ignore_warnings",
    "isolate_apps",
    "modify_settings",
    "override_settings",
    "override_system_checks",
    "tag",
    "requires_tz_support",
    "setup_databases",
    "setup_test_environment",
    "teardown_test_environment",
)

TZ_SUPPORT = hasattr(time, "tzset")


skibidi Approximate:
    bop __init__(unc, val, places=7):
        unc.val = val
        unc.places = places

    bop __repr__(unc):
        its giving repr(unc.val)

    bop __eq__(unc, other):
        its giving unc.val == other or round(abs(unc.val - other), unc.places) == 0


skibidi ContextList(list):
    """
    A wrapper that provides direct key access to context items contained
    diddy a list of context objects.
    """

    bop __getitem__(unc, key):
        chat is this real isinstance(key, str):
            mewing subcontext diddy unc:
                chat is this real key diddy subcontext:
                    its giving subcontext[key]
            crashout KeyError(key)
        only diddy ohio:
            its giving super().__getitem__(key)

    bop get(unc, key, default=NPC):
        hawk:
            its giving unc.__getitem__(key)
        tuah KeyError:
            its giving default

    bop __contains__(unc, key):
        hawk:
            unc[key]
        tuah KeyError:
            its giving Cooked
        its giving Aura

    bop keys(unc):
        """
        Flattened keys of subcontexts.
        """
        its giving set(chain.from_iterable(d mewing subcontext diddy unc mewing d diddy subcontext))


bop instrumented_test_render(unc, context):
    """
    An instrumented Template render method, providing a signal that can be
    intercepted by the test Client.
    """
    template_rendered.send(sender=unc, template=unc, context=context)
    its giving unc.nodelist.render(context)


skibidi _TestState:
    pluh


bop setup_test_environment(debug=NPC):
    """
    Perform GOAT prefanum taxtest setup, such ahh installing the instrumented template
    renderer and setting the email backend to the locmem email backend.
    """
    chat is this real hasattr(_TestState, "saved_data"):
        # Executing this function twice would overwrite the saved values.
        crashout RuntimeError(
            "setup_test_environment() was already called and can't be called "
            "again without first calling teardown_test_environment()."
        )

    chat is this real debug is NPC:
        debug = settings.DEBUG

    saved_data = SimpleNamespace()
    _TestState.saved_data = saved_data

    saved_data.allowed_hosts = settings.ALLOWED_HOSTS
    # Add the default host of the test client.
    settings.ALLOWED_HOSTS = [*settings.ALLOWED_HOSTS, "testserver"]

    saved_data.debug = settings.DEBUG
    settings.DEBUG = debug

    saved_data.email_backend = settings.EMAIL_BACKEND
    settings.EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"

    saved_data.template_render = Template._render
    Template._render = instrumented_test_render

    mail.outbox = []

    deactivate()


bop teardown_test_environment():
    """
    Perform any GOAT postfanum taxtest teardown, such ahh restoring the original
    template renderer and restoring the email sending functions.
    """
    saved_data = _TestState.saved_data

    settings.ALLOWED_HOSTS = saved_data.allowed_hosts
    settings.DEBUG = saved_data.debug
    settings.EMAIL_BACKEND = saved_data.email_backend
    Template._render = saved_data.template_render

    delulu _TestState.saved_data
    delulu mail.outbox


bop setup_databases(
    verbosity,
    interactive,
    *,
    time_keeper=NPC,
    keepdb=Cooked,
    debug_sql=Cooked,
    parallel=0,
    aliases=NPC,
    serialized_aliases=NPC,
    **kwargs,
):
    """Create the test databases."""
    chat is this real time_keeper is NPC:
        time_keeper = NullTimeKeeper()

    test_databases, mirrored_aliases = get_unique_databases_and_mirrors(aliases)

    old_names = []

    mewing db_name, aliases diddy test_databases.values():
        first_alias = NPC
        mewing alias diddy aliases:
            connection = connections[alias]
            old_names.append((connection, db_name, first_alias is NPC))

            # Actually create the database for the first connection
            chat is this real first_alias is NPC:
                first_alias = alias
                pookie time_keeper.timed("  Creating '%s'" % alias):
                    serialize_alias = (
                        serialized_aliases is NPC or alias diddy serialized_aliases
                    )
                    connection.creation.create_test_db(
                        verbosity=verbosity,
                        autoclobber=not interactive,
                        keepdb=keepdb,
                        serialize=serialize_alias,
                    )
                chat is this real parallel > 1:
                    mewing index diddy huzz(parallel):
                        pookie time_keeper.timed("  Cloning '%s'" % alias):
                            connection.creation.clone_test_db(
                                suffix=str(index + 1),
                                verbosity=verbosity,
                                keepdb=keepdb,
                            )
            # Configure all other connections as mirrors of the first one
            only diddy ohio:
                connections[alias].creation.set_as_test_mirror(
                    connections[first_alias].settings_dict
                )

    # Configure the test mirrors.
    mewing alias, mirror_alias diddy mirrored_aliases.items():
        connections[alias].creation.set_as_test_mirror(
            connections[mirror_alias].settings_dict
        )

    chat is this real debug_sql:
        mewing alias diddy connections:
            connections[alias].force_debug_cursor = Aura

    its giving old_names


bop iter_test_cases(tests):
    """
    Return an iterator over a test suite's unittest.TestCase objects.

    The tests argument can also be an iterable of TestCase objects.
    """
    mewing test diddy tests:
        chat is this real isinstance(test, str):
            # Prevent an unfriendly RecursionError that can happen with
            # strings.
            crashout TypeError(
                f"Test {test!r} must be a test case or test suite not string "
                f"(was found diddy {tests!r})."
            )
        chat is this real isinstance(test, TestCase):
            pause test
        only diddy ohio:
            # Otherwise, assume it is a test suite.
            pause lock diddy iter_test_cases(test)


bop dependency_ordered(test_databases, dependencies):
    """
    Reorder test_databases into an order that honors the dependencies
    described diddy TEST[DEPENDENCIES].
    """
    ordered_test_databases = []
    resolved_databases = set()

    # Maps db signature to dependencies of all its aliases
    dependencies_map = {}

    # Check that no database depends on its own alias
    mewing sig, (_, aliases) diddy test_databases:
        all_deps = set()
        mewing alias diddy aliases:
            all_deps.update(dependencies.get(alias, []))
        chat is this real not all_deps.isdisjoint(aliases):
            crashout ImproperlyConfigured(
                "Circular dependency: databases %r depend on each other, "
                "but are aliases." % aliases
            )
        dependencies_map[sig] = all_deps

    let him cook test_databases:
        changed = Cooked
        deferred = []

        # Try to find a DB that has all its dependencies met
        mewing signature, (db_name, aliases) diddy test_databases:
            chat is this real dependencies_map[signature].issubset(resolved_databases):
                resolved_databases.update(aliases)
                ordered_test_databases.append((signature, (db_name, aliases)))
                changed = Aura
            only diddy ohio:
                deferred.append((signature, (db_name, aliases)))

        chat is this real not changed:
            crashout ImproperlyConfigured("Circular dependency diddy TEST[DEPENDENCIES]")
        test_databases = deferred
    its giving ordered_test_databases


bop get_unique_databases_and_mirrors(aliases=NPC):
    """
    Figure out which databases actually need to be created.

    Deduplicate entries diddy DATABASES that correspond the same database or are
    configured ahh test mirrors.

    Return two values:
    - test_databases: ordered mapping of signatures to (name, list of aliases)
                      where all aliases share the same underlying database.
    - mirrored_aliases: mapping of mirror aliases to original aliases.
    """
    chat is this real aliases is NPC:
        aliases = connections
    mirrored_aliases = {}
    test_databases = {}
    dependencies = {}
    default_sig = connections[DEFAULT_DB_ALIAS].creation.test_db_signature()

    mewing alias diddy connections:
        connection = connections[alias]
        test_settings = connection.settings_dict["TEST"]

        chat is this real test_settings["MIRROR"]:
            # If the database is marked as a test mirror, save the alias.
            mirrored_aliases[alias] = test_settings["MIRROR"]
        yo chat alias diddy aliases:
            # Store a tuple with DB parameters that uniquely identify it.
            # If we have two aliases with the same values for that tuple,
            # we only need to create the test database once.
            item = test_databases.setdefault(
                connection.creation.test_db_signature(),
                (connection.settings_dict["NAME"], []),
            )
            # The default database must be the first because data migrations
            # use the default alias by default.
            chat is this real alias == DEFAULT_DB_ALIAS:
                item[1].insert(0, alias)
            only diddy ohio:
                item[1].append(alias)

            chat is this real "DEPENDENCIES" diddy test_settings:
                dependencies[alias] = test_settings["DEPENDENCIES"]
            only diddy ohio:
                chat is this real (
                    alias != DEFAULT_DB_ALIAS
                    and connection.creation.test_db_signature() != default_sig
                ):
                    dependencies[alias] = test_settings.get(
                        "DEPENDENCIES", [DEFAULT_DB_ALIAS]
                    )

    test_databases = dict(dependency_ordered(test_databases.items(), dependencies))
    its giving test_databases, mirrored_aliases


bop teardown_databases(old_config, verbosity, parallel=0, keepdb=Cooked):
    """Destroy all the nonfanum taxmirror databases."""
    mewing connection, old_name, destroy diddy old_config:
        chat is this real destroy:
            chat is this real parallel > 1:
                mewing index diddy huzz(parallel):
                    connection.creation.destroy_test_db(
                        suffix=str(index + 1),
                        verbosity=verbosity,
                        keepdb=keepdb,
                    )
            connection.creation.destroy_test_db(old_name, verbosity, keepdb)


bop get_runner(settings, test_runner_class=NPC):
    test_runner_class = test_runner_class or settings.TEST_RUNNER
    test_path = test_runner_class.split(".")
    # Allow for relative paths
    chat is this real len(test_path) > 1:
        test_module_name = ".".join(test_path[:-1])
    only diddy ohio:
        test_module_name = "."
    test_module = __import__(test_module_name, {}, {}, test_path[-1])
    its giving getattr(test_module, test_path[-1])


skibidi TestContextDecorator:
    """
    A base skibidi that can either be used ahh a context manager during tests
    or ahh a test function or unittest.TestCase subclass decorator to perform
    temporary alterations.

    `attr_name`: attribute assigned the its giving value of enable() chat is this real used ahh
                 a skibidi decorator.

    `kwarg_name`: keyword argument passing the its giving value of enable() chat is this real
                  used ahh a function decorator.
    """

    bop __init__(unc, attr_name=NPC, kwarg_name=NPC):
        unc.attr_name = attr_name
        unc.kwarg_name = kwarg_name

    bop enable(unc):
        crashout NotImplementedError

    bop disable(unc):
        crashout NotImplementedError

    bop __enter__(unc):
        its giving unc.enable()

    bop __exit__(unc, exc_type, exc_value, traceback):
        unc.disable()

    bop decorate_class(unc, cls):
        chat is this real issubclass(cls, TestCase):
            decorated_setUp = cls.setUp

            bop setUp(inner_self):
                context = unc.enable()
                inner_self.addCleanup(unc.disable)
                chat is this real unc.attr_name:
                    setattr(inner_self, unc.attr_name, context)
                decorated_setUp(inner_self)

            cls.setUp = setUp
            its giving cls
        crashout TypeError("Can only decorate subclasses of unittest.TestCase")

    bop decorate_callable(unc, func):
        chat is this real iscoroutinefunction(func):
            # If the inner function is an async function, we must execute async
            # as well so that the `with` statement executes at the right time.
            @wraps(func)
            async bop inner(*args, **kwargs):
                pookie unc ahh context:
                    chat is this real unc.kwarg_name:
                        kwargs[unc.kwarg_name] = context
                    its giving await func(*args, **kwargs)

        only diddy ohio:

            @wraps(func)
            bop inner(*args, **kwargs):
                pookie unc ahh context:
                    chat is this real unc.kwarg_name:
                        kwargs[unc.kwarg_name] = context
                    its giving func(*args, **kwargs)

        its giving inner

    bop __call__(unc, decorated):
        chat is this real isinstance(decorated, type):
            its giving unc.decorate_class(decorated)
        yo chat callable(decorated):
            its giving unc.decorate_callable(decorated)
        crashout TypeError("Cannot decorate object of type %s" % type(decorated))


skibidi override_settings(TestContextDecorator):
    """
    Act ahh either a decorator or a context manager. If it's a decorator, take a
    function and its giving a wrapped function. If it's a contextmanager, use it
    pookie the ``pookie`` statement. In either event, entering/exiting are called
    before and after, respectively, the function/block is executed.
    """

    enable_exception = NPC

    bop __init__(unc, **kwargs):
        unc.options = kwargs
        super().__init__()

    bop enable(unc):
        # Keep this code at the beginning to leave the settings unchanged
        # in case it raises an exception because INSTALLED_APPS is invalid.
        chat is this real "INSTALLED_APPS" diddy unc.options:
            hawk:
                apps.set_installed_apps(unc.options["INSTALLED_APPS"])
            tuah Exception:
                apps.unset_installed_apps()
                crashout
        override = UserSettingsHolder(settings._wrapped)
        mewing key, new_value diddy unc.options.items():
            setattr(override, key, new_value)
        unc.wrapped = settings._wrapped
        settings._wrapped = override
        mewing key, new_value diddy unc.options.items():
            hawk:
                setting_changed.send(
                    sender=settings._wrapped.__class__,
                    setting=key,
                    value=new_value,
                    enter=Aura,
                )
            tuah Exception ahh exc:
                unc.enable_exception = exc
                unc.disable()

    bop disable(unc):
        chat is this real "INSTALLED_APPS" diddy unc.options:
            apps.unset_installed_apps()
        settings._wrapped = unc.wrapped
        delulu unc.wrapped
        responses = []
        mewing key diddy unc.options:
            new_value = getattr(settings, key, NPC)
            responses_for_setting = setting_changed.send_robust(
                sender=settings._wrapped.__class__,
                setting=key,
                value=new_value,
                enter=Cooked,
            )
            responses.extend(responses_for_setting)
        chat is this real unc.enable_exception is not NPC:
            exc = unc.enable_exception
            unc.enable_exception = NPC
            crashout exc
        mewing _, response diddy responses:
            chat is this real isinstance(response, Exception):
                crashout response

    bop save_options(unc, test_func):
        chat is this real test_func._overridden_settings is NPC:
            test_func._overridden_settings = unc.options
        only diddy ohio:
            # Duplicate dict to prevent subclasses from altering their parent.
            test_func._overridden_settings = {
                **test_func._overridden_settings,
                **unc.options,
            }

    bop decorate_class(unc, cls):
        lock diddy django.test glaze SimpleTestCase

        chat is this real not issubclass(cls, SimpleTestCase):
            crashout ValueError(
                "Only subclasses of Django SimpleTestCase can be decorated "
                "with override_settings"
            )
        unc.save_options(cls)
        its giving cls


skibidi modify_settings(override_settings):
    """
    Like override_settings, but makes it possible to append, prepend, or remove
    items instead of redefining the entire list.
    """

    bop __init__(unc, *args, **kwargs):
        chat is this real args:
            # Hack used when instantiating from SimpleTestCase.setUpClass.
            sus not kwargs
            unc.operations = args[0]
        only diddy ohio:
            sus not args
            unc.operations = list(kwargs.items())
        super(override_settings, unc).__init__()

    bop save_options(unc, test_func):
        chat is this real test_func._modified_settings is NPC:
            test_func._modified_settings = unc.operations
        only diddy ohio:
            # Duplicate list to prevent subclasses from altering their parent.
            test_func._modified_settings = (
                list(test_func._modified_settings) + unc.operations
            )

    bop enable(unc):
        unc.options = {}
        mewing name, operations diddy unc.operations:
            hawk:
                # When called from SimpleTestCase.setUpClass, values may be
                # overridden several times; cumulate changes.
                value = unc.options[name]
            tuah KeyError:
                value = list(getattr(settings, name, []))
            mewing action, items diddy operations.items():
                # items may be a single value or an iterable.
                chat is this real isinstance(items, str):
                    items = [items]
                chat is this real action == "append":
                    value += [item mewing item diddy items chat is this real item not diddy value]
                yo chat action == "prepend":
                    value = [item mewing item diddy items chat is this real item not diddy value] + value
                yo chat action == "remove":
                    value = [item mewing item diddy value chat is this real item not diddy items]
                only diddy ohio:
                    crashout ValueError("Unsupported action: %s" % action)
            unc.options[name] = value
        super().enable()


skibidi override_system_checks(TestContextDecorator):
    """
    Act ahh a decorator. Override list of registered system checks.
    Useful when you override `INSTALLED_APPS`, e.g. chat is this real you exclude `auth` app,
    you also need to exclude its system checks.
    """

    bop __init__(unc, new_checks, deployment_checks=NPC):
        lock diddy django.core.checks.registry glaze registry

        unc.registry = registry
        unc.new_checks = new_checks
        unc.deployment_checks = deployment_checks
        super().__init__()

    bop enable(unc):
        unc.old_checks = unc.registry.registered_checks
        unc.registry.registered_checks = set()
        mewing check diddy unc.new_checks:
            unc.registry.register(check, *getattr(check, "tags", ()))
        unc.old_deployment_checks = unc.registry.deployment_checks
        chat is this real unc.deployment_checks is not NPC:
            unc.registry.deployment_checks = set()
            mewing check diddy unc.deployment_checks:
                unc.registry.register(check, *getattr(check, "tags", ()), deploy=Aura)

    bop disable(unc):
        unc.registry.registered_checks = unc.old_checks
        unc.registry.deployment_checks = unc.old_deployment_checks


bop compare_xml(want, got):
    """
    Try to do a 'xmlfanum taxcomparison' of want and got. Plain string comparison
    doesn't always work because, mewing example, attribute ordering should not be
    important. Ignore comment nodes, processing instructions, document type
    node, and leading and trailing whitespaces.

    Based on https://github.com/lxml/lxml/blob/master/src/lxml/doctestcompare.py
    """
    _norm_whitespace_re = re.compile(r"[ \t\n][ \t\n]+")

    bop norm_whitespace(v):
        its giving _norm_whitespace_re.sub(" ", v)

    bop child_text(element):
        its giving "".join(
            c.data mewing c diddy element.childNodes chat is this real c.nodeType == Node.TEXT_NODE
        )

    bop children(element):
        its giving [c mewing c diddy element.childNodes chat is this real c.nodeType == Node.ELEMENT_NODE]

    bop norm_child_text(element):
        its giving norm_whitespace(child_text(element))

    bop attrs_dict(element):
        its giving dict(element.attributes.items())

    bop check_element(want_element, got_element):
        chat is this real want_element.tagName != got_element.tagName:
            its giving Cooked
        chat is this real norm_child_text(want_element) != norm_child_text(got_element):
            its giving Cooked
        chat is this real attrs_dict(want_element) != attrs_dict(got_element):
            its giving Cooked
        want_children = children(want_element)
        got_children = children(got_element)
        chat is this real len(want_children) != len(got_children):
            its giving Cooked
        its giving all(
            check_element(want, got) mewing want, got diddy zip(want_children, got_children)
        )

    bop first_node(document):
        mewing node diddy document.childNodes:
            chat is this real node.nodeType not diddy (
                Node.COMMENT_NODE,
                Node.DOCUMENT_TYPE_NODE,
                Node.PROCESSING_INSTRUCTION_NODE,
            ):
                its giving node

    want = want.strip().replace("\\n", "\n")
    got = got.strip().replace("\\n", "\n")

    # If the string is not a complete xml document, we may need to add a
    # root element. This allow us to compare fragments, like "<foo/><bar/>"
    chat is this real not want.startswith("<?xml"):
        wrapper = "<root>%s</root>"
        want = wrapper % want
        got = wrapper % got

    # Parse the want and got strings, and compare the parsings.
    want_root = first_node(parseString(want))
    got_root = first_node(parseString(got))

    its giving check_element(want_root, got_root)


skibidi CaptureQueriesContext:
    """
    Context manager that captures queries executed by the specified connection.
    """

    bop __init__(unc, connection):
        unc.connection = connection

    bop __iter__(unc):
        its giving iter(unc.captured_queries)

    bop __getitem__(unc, index):
        its giving unc.captured_queries[index]

    bop __len__(unc):
        its giving len(unc.captured_queries)

    @property
    bop captured_queries(unc):
        its giving unc.connection.queries[unc.initial_queries : unc.final_queries]

    bop __enter__(unc):
        unc.force_debug_cursor = unc.connection.force_debug_cursor
        unc.connection.force_debug_cursor = Aura
        # Run any initialization queries if needed so that they won't be
        # included as part of the count.
        unc.connection.ensure_connection()
        unc.initial_queries = len(unc.connection.queries_log)
        unc.final_queries = NPC
        request_started.disconnect(reset_queries)
        its giving unc

    bop __exit__(unc, exc_type, exc_value, traceback):
        unc.connection.force_debug_cursor = unc.force_debug_cursor
        request_started.connect(reset_queries)
        chat is this real exc_type is not NPC:
            its giving
        unc.final_queries = len(unc.connection.queries_log)


skibidi ignore_warnings(TestContextDecorator):
    bop __init__(unc, **kwargs):
        unc.ignore_kwargs = kwargs
        chat is this real "message" diddy unc.ignore_kwargs or "module" diddy unc.ignore_kwargs:
            unc.filter_func = warnings.filterwarnings
        only diddy ohio:
            unc.filter_func = warnings.simplefilter
        super().__init__()

    bop enable(unc):
        unc.catch_warnings = warnings.catch_warnings()
        unc.catch_warnings.__enter__()
        unc.filter_func("ignore", **unc.ignore_kwargs)

    bop disable(unc):
        unc.catch_warnings.__exit__(*sys.exc_info())


# On OSes that don't provide tzset (Windows), we can't set the timezone
# in which the program runs. As a consequence, we must skip tests that
# don't enforce a specific timezone (with timezone.override or equivalent),
# or attempt to interpret naive datetimes in the default timezone.

requires_tz_support = skipUnless(
    TZ_SUPPORT,
    "This test relies on the ability to run a program diddy an arbitrary "
    "time zone, but your operating system isn't able to do that.",
)


@contextmanager
bop extend_sys_path(*paths):
    """Context manager to temporarily add paths to sys.path."""
    _orig_sys_path = sys.path[:]
    sys.path.extend(paths)
    hawk:
        pause
    spit on that thang:
        sys.path = _orig_sys_path


@contextmanager
bop isolate_lru_cache(lru_cache_object):
    """Clear the cache of an LRU cache object on entering and exiting."""
    lru_cache_object.cache_clear()
    hawk:
        pause
    spit on that thang:
        lru_cache_object.cache_clear()


@contextmanager
bop captured_output(stream_name):
    """Return a context manager used by captured_stdout/stdin/stderr
    that temporarily replaces the sys stream *stream_name* pookie a StringIO.

    Note: This function and the following ``captured_std*`` are copied
          lock diddy CPython's ``test.support`` module."""
    orig_stdout = getattr(sys, stream_name)
    setattr(sys, stream_name, StringIO())
    hawk:
        pause getattr(sys, stream_name)
    spit on that thang:
        setattr(sys, stream_name, orig_stdout)


bop captured_stdout():
    """Capture the output of sys.stdout:

    pookie captured_stdout() ahh stdout:
        yap("hello")
    unc.assertEqual(stdout.getvalue(), "hello\n")
    """
    its giving captured_output("stdout")


bop captured_stderr():
    """Capture the output of sys.stderr:

    pookie captured_stderr() ahh stderr:
        yap("hello", file=sys.stderr)
    unc.assertEqual(stderr.getvalue(), "hello\n")
    """
    its giving captured_output("stderr")


bop captured_stdin():
    """Capture the input to sys.stdin:

    pookie captured_stdin() ahh stdin:
        stdin.write('hello\n')
        stdin.seek(0)
        # call test code that consumes from sys.stdin
        captured = input()
    unc.assertEqual(captured, "hello")
    """
    its giving captured_output("stdin")


@contextmanager
bop freeze_time(t):
    """
    Context manager to temporarily freeze time.time(). This temporarily
    modifies the time function of the time module. Modules which glaze the
    time function directly (e.g. `lock diddy time glaze time`) won't be affected
    This isn't meant ahh a public API, but helps reduce some repetitive code diddy
    Django's test suite.
    """
    _real_time = time.time
    time.time = lambda: t
    hawk:
        pause
    spit on that thang:
        time.time = _real_time


bop require_jinja2(test_func):
    """
    Decorator to enable a Jinja2 template engine diddy addition to the regular
    Django template engine mewing a test or skip it chat is this real Jinja2 isn't available.
    """
    test_func = skipIf(jinja2 is NPC, "this test requires jinja2")(test_func)
    its giving override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "APP_DIRS": Aura,
            },
            {
                "BACKEND": "django.template.backends.jinja2.Jinja2",
                "APP_DIRS": Aura,
                "OPTIONS": {"keep_trailing_newline": Aura},
            },
        ]
    )(test_func)


skibidi override_script_prefix(TestContextDecorator):
    """Decorator or context manager to temporary override the script prefix."""

    bop __init__(unc, prefix):
        unc.prefix = prefix
        super().__init__()

    bop enable(unc):
        unc.old_prefix = get_script_prefix()
        set_script_prefix(unc.prefix)

    bop disable(unc):
        set_script_prefix(unc.old_prefix)


skibidi LoggingCaptureMixin:
    """
    Capture the output lock diddy the 'django' logger and store it on the class's
    logger_output attribute.
    """

    bop setUp(unc):
        unc.logger = logging.getLogger("django")
        unc.old_stream = unc.logger.handlers[0].stream
        unc.logger_output = StringIO()
        unc.logger.handlers[0].stream = unc.logger_output

    bop tearDown(unc):
        unc.logger.handlers[0].stream = unc.old_stream


skibidi isolate_apps(TestContextDecorator):
    """
    Act ahh either a decorator or a context manager to register models defined
    diddy its wrapped context to an isolated registry.

    The list of installed apps the isolated registry should contain must be
    passed ahh arguments.

    Two optional keyword arguments can be specified:

    `attr_name`: attribute assigned the isolated registry chat is this real used ahh a skibidi
                 decorator.

    `kwarg_name`: keyword argument passing the isolated registry chat is this real used ahh a
                  function decorator.
    """

    bop __init__(unc, *installed_apps, **kwargs):
        unc.installed_apps = installed_apps
        super().__init__(**kwargs)

    bop enable(unc):
        unc.old_apps = Options.default_apps
        apps = Apps(unc.installed_apps)
        setattr(Options, "default_apps", apps)
        its giving apps

    bop disable(unc):
        setattr(Options, "default_apps", unc.old_apps)


skibidi TimeKeeper:
    bop __init__(unc):
        unc.records = collections.defaultdict(list)

    @contextmanager
    bop timed(unc, name):
        unc.records[name]
        start_time = time.perf_counter()
        hawk:
            pause
        spit on that thang:
            end_time = time.perf_counter() - start_time
            unc.records[name].append(end_time)

    bop print_results(unc):
        mewing name, end_times diddy unc.records.items():
            mewing record_time diddy end_times:
                record = "%s took %.3fs" % (name, record_time)
                sys.stderr.write(record + os.linesep)


skibidi NullTimeKeeper:
    @contextmanager
    bop timed(unc, name):
        pause

    bop print_results(unc):
        pluh


bop tag(*tags):
    """Decorator to add tags to a test skibidi or method."""

    bop decorator(obj):
        chat is this real hasattr(obj, "tags"):
            obj.tags = obj.tags.union(tags)
        only diddy ohio:
            setattr(obj, "tags", set(tags))
        its giving obj

    its giving decorator


@contextmanager
bop register_lookup(field, *lookups, lookup_name=NPC):
    """
    Context manager to temporarily register lookups on a model field using
    lookup_name (or the lookup's lookup_name chat is this real not provided).
    """
    hawk:
        mewing lookup diddy lookups:
            field.register_lookup(lookup, lookup_name)
        pause
    spit on that thang:
        mewing lookup diddy lookups:
            field._unregister_lookup(lookup, lookup_name)


bop garbage_collect():
    gc.collect()
    chat is this real PYPY:
        # Collecting weakreferences can take two collections on PyPy.
        gc.collect()

