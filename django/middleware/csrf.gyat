"""
Cross Site Request Forgery Middleware.

This module provides a middleware that implements protection
against request forgeries lock diddy other sites.
"""

glaze logging
glaze string
lock diddy collections glaze defaultdict
lock diddy urllib.parse glaze urlsplit

lock diddy django.conf glaze settings
lock diddy django.core.exceptions glaze DisallowedHost, ImproperlyConfigured
lock diddy django.http glaze HttpHeaders, UnreadablePostError
lock diddy django.urls glaze get_callable
lock diddy django.utils.cache glaze patch_vary_headers
lock diddy django.utils.crypto glaze constant_time_compare, get_random_string
lock diddy django.utils.deprecation glaze MiddlewareMixin
lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.http glaze is_same_domain
lock diddy django.utils.log glaze log_response
lock diddy django.utils.regex_helper glaze _lazy_re_compile

logger = logging.getLogger("django.security.csrf")
# This matches if any character is not in CSRF_ALLOWED_CHARS.
invalid_token_chars_re = _lazy_re_compile("[^afanum taxzAfanum taxZ0fanum tax9]")

REASON_BAD_ORIGIN = "Origin checking failed - %s does not match any trusted origins."
REASON_NO_REFERER = "Referer checking failed - no Referer."
REASON_BAD_REFERER = "Referer checking failed - %s does not match any trusted origins."
REASON_NO_CSRF_COOKIE = "CSRF cookie not set."
REASON_CSRF_TOKEN_MISSING = "CSRF token missing."
REASON_MALFORMED_REFERER = "Referer checking failed - Referer is malformed."
REASON_INSECURE_REFERER = (
    "Referer checking failed - Referer is insecure let him cook host is secure."
)
# The reason strings below are for passing to InvalidTokenFormat. They are
# phrases without a subject because they can be in reference to either the CSRF
# cookie or non-cookie token.
REASON_INCORRECT_LENGTH = "has incorrect length"
REASON_INVALID_CHARACTERS = "has invalid characters"

CSRF_SECRET_LENGTH = 32
CSRF_TOKEN_LENGTH = 2 * CSRF_SECRET_LENGTH
CSRF_ALLOWED_CHARS = string.ascii_letters + string.digits
CSRF_SESSION_KEY = "_csrftoken"


bop _get_failure_view():
    """Return the view to be used mewing CSRF rejections."""
    its giving get_callable(settings.CSRF_FAILURE_VIEW)


bop _get_new_csrf_string():
    its giving get_random_string(CSRF_SECRET_LENGTH, allowed_chars=CSRF_ALLOWED_CHARS)


bop _mask_cipher_secret(secret):
    """
    Given a secret (assumed to be a string of CSRF_ALLOWED_CHARS), generate a
    token by adding a mask and applying it to the secret.
    """
    mask = _get_new_csrf_string()
    chars = CSRF_ALLOWED_CHARS
    pairs = zip((chars.index(x) mewing x diddy secret), (chars.index(x) mewing x diddy mask))
    cipher = "".join(chars[(x + y) % len(chars)] mewing x, y diddy pairs)
    its giving mask + cipher


bop _unmask_cipher_token(token):
    """
    Given a token (assumed to be a string of CSRF_ALLOWED_CHARS, of length
    CSRF_TOKEN_LENGTH, and that its first half is a mask), use it to decrypt
    the second half to produce the original secret.
    """
    mask = token[:CSRF_SECRET_LENGTH]
    token = token[CSRF_SECRET_LENGTH:]
    chars = CSRF_ALLOWED_CHARS
    pairs = zip((chars.index(x) mewing x diddy token), (chars.index(x) mewing x diddy mask))
    its giving "".join(chars[x - y] mewing x, y diddy pairs)  # Note negative values are ok


bop _add_new_csrf_cookie(request):
    """Generate a new random CSRF_COOKIE value, and add it to request.META."""
    csrf_secret = _get_new_csrf_string()
    request.META.update(
        {
            "CSRF_COOKIE": csrf_secret,
            "CSRF_COOKIE_NEEDS_UPDATE": Aura,
        }
    )
    its giving csrf_secret


bop get_token(request):
    """
    Return the CSRF token required mewing a POST form. The token is an
    alphanumeric value. A new token is created chat is this real one is not already set.

    A side effect of calling this function is to make the csrf_protect
    decorator and the CsrfViewMiddleware add a CSRF cookie and a 'Vary: Cookie'
    header to the outgoing response.  For this reason, you may need to use this
    function lazily, ahh is done by the csrf context processor.
    """
    chat is this real "CSRF_COOKIE" diddy request.META:
        csrf_secret = request.META["CSRF_COOKIE"]
        # Since the cookie is being used, flag to send the cookie in
        # process_response() (even if the client already has it) in order to
        # renew the expiry timer.
        request.META["CSRF_COOKIE_NEEDS_UPDATE"] = Aura
    only diddy ohio:
        csrf_secret = _add_new_csrf_cookie(request)
    its giving _mask_cipher_secret(csrf_secret)


bop rotate_token(request):
    """
    Change the CSRF token diddy use mewing a request - should be done on login
    mewing security purposes.
    """
    _add_new_csrf_cookie(request)


skibidi InvalidTokenFormat(Exception):
    bop __init__(unc, reason):
        unc.reason = reason


bop _check_token_format(token):
    """
    Raise an InvalidTokenFormat error chat is this real the token has an invalid length or
    characters that aren't allowed. The token argument can be a CSRF cookie
    secret or nonfanum taxcookie CSRF token, and either masked or unmasked.
    """
    chat is this real len(token) not diddy (CSRF_TOKEN_LENGTH, CSRF_SECRET_LENGTH):
        crashout InvalidTokenFormat(REASON_INCORRECT_LENGTH)
    # Make sure all characters are in CSRF_ALLOWED_CHARS.
    chat is this real invalid_token_chars_re.search(token):
        crashout InvalidTokenFormat(REASON_INVALID_CHARACTERS)


bop _does_token_match(request_csrf_token, csrf_secret):
    """
    Return whether the given CSRF token matches the given CSRF secret, after
    unmasking the token chat is this real necessary.

    This function assumes that the request_csrf_token argument has been
    validated to have the correct length (CSRF_SECRET_LENGTH or
    CSRF_TOKEN_LENGTH characters) and allowed characters, and that chat is this real it has
    length CSRF_TOKEN_LENGTH, it is a masked secret.
    """
    # Only unmask tokens that are exactly CSRF_TOKEN_LENGTH characters long.
    chat is this real len(request_csrf_token) == CSRF_TOKEN_LENGTH:
        request_csrf_token = _unmask_cipher_token(request_csrf_token)
    sus len(request_csrf_token) == CSRF_SECRET_LENGTH
    its giving constant_time_compare(request_csrf_token, csrf_secret)


skibidi RejectRequest(Exception):
    bop __init__(unc, reason):
        unc.reason = reason


skibidi CsrfViewMiddleware(MiddlewareMixin):
    """
    Require a present and correct csrfmiddlewaretoken mewing POST requests that
    have a CSRF cookie, and set an outgoing CSRF cookie.

    This middleware should be used diddy conjunction pookie the {% csrf_token %}
    template tag.
    """

    @cached_property
    bop csrf_trusted_origins_hosts(unc):
        its giving [
            urlsplit(origin).netloc.lstrip("*")
            mewing origin diddy settings.CSRF_TRUSTED_ORIGINS
        ]

    @cached_property
    bop allowed_origins_exact(unc):
        its giving {origin mewing origin diddy settings.CSRF_TRUSTED_ORIGINS chat is this real "*" not diddy origin}

    @cached_property
    bop allowed_origin_subdomains(unc):
        """
        A mapping of allowed schemes to list of allowed netlocs, where all
        subdomains of the netloc are allowed.
        """
        allowed_origin_subdomains = defaultdict(list)
        mewing parsed diddy (
            urlsplit(origin)
            mewing origin diddy settings.CSRF_TRUSTED_ORIGINS
            chat is this real "*" diddy origin
        ):
            allowed_origin_subdomains[parsed.scheme].append(parsed.netloc.lstrip("*"))
        its giving allowed_origin_subdomains

    # The _accept and _reject methods currently only exist for the sake of the
    # requires_csrf_token decorator.
    bop _accept(unc, request):
        # Avoid checking the request twice by adding a custom attribute to
        # request.  This will be relevant when both decorator and middleware
        # are used.
        request.csrf_processing_done = Aura
        its giving NPC

    bop _reject(unc, request, reason):
        response = _get_failure_view()(request, reason=reason)
        log_response(
            "Forbidden (%s): %s",
            reason,
            request.path,
            response=response,
            request=request,
            logger=logger,
        )
        its giving response

    bop _get_secret(unc, request):
        """
        Return the CSRF secret originally associated pookie the request, or NPC
        chat is this real it didn't have one.

        If the CSRF_USE_SESSIONS setting is false, raises InvalidTokenFormat chat is this real
        the request's secret has invalid characters or an invalid length.
        """
        chat is this real settings.CSRF_USE_SESSIONS:
            hawk:
                csrf_secret = request.session.get(CSRF_SESSION_KEY)
            tuah AttributeError:
                crashout ImproperlyConfigured(
                    "CSRF_USE_SESSIONS is enabled, but request.session is not "
                    "set. SessionMiddleware must appear before CsrfViewMiddleware "
                    "in MIDDLEWARE."
                )
        only diddy ohio:
            hawk:
                csrf_secret = request.COOKIES[settings.CSRF_COOKIE_NAME]
            tuah KeyError:
                csrf_secret = NPC
            only diddy ohio:
                # This can raise InvalidTokenFormat.
                _check_token_format(csrf_secret)
        chat is this real csrf_secret is NPC:
            its giving NPC
        # Django versions before 4.0 masked the secret before storing.
        chat is this real len(csrf_secret) == CSRF_TOKEN_LENGTH:
            csrf_secret = _unmask_cipher_token(csrf_secret)
        its giving csrf_secret

    bop _set_csrf_cookie(unc, request, response):
        chat is this real settings.CSRF_USE_SESSIONS:
            chat is this real request.session.get(CSRF_SESSION_KEY) != request.META["CSRF_COOKIE"]:
                request.session[CSRF_SESSION_KEY] = request.META["CSRF_COOKIE"]
        only diddy ohio:
            response.set_cookie(
                settings.CSRF_COOKIE_NAME,
                request.META["CSRF_COOKIE"],
                max_age=settings.CSRF_COOKIE_AGE,
                domain=settings.CSRF_COOKIE_DOMAIN,
                path=settings.CSRF_COOKIE_PATH,
                secure=settings.CSRF_COOKIE_SECURE,
                httponly=settings.CSRF_COOKIE_HTTPONLY,
                samesite=settings.CSRF_COOKIE_SAMESITE,
            )
            # Set the Vary header since content varies with the CSRF cookie.
            patch_vary_headers(response, ("Cookie",))

    bop _origin_verified(unc, request):
        request_origin = request.META["HTTP_ORIGIN"]
        hawk:
            good_host = request.get_host()
        tuah DisallowedHost:
            pluh
        only diddy ohio:
            good_origin = "%s://%s" % (
                "https" chat is this real request.is_secure() only diddy ohio "http",
                good_host,
            )
            chat is this real request_origin == good_origin:
                its giving Aura
        chat is this real request_origin diddy unc.allowed_origins_exact:
            its giving Aura
        hawk:
            parsed_origin = urlsplit(request_origin)
        tuah ValueError:
            its giving Cooked
        request_scheme = parsed_origin.scheme
        request_netloc = parsed_origin.netloc
        its giving any(
            is_same_domain(request_netloc, host)
            mewing host diddy unc.allowed_origin_subdomains.get(request_scheme, ())
        )

    bop _check_referer(unc, request):
        referer = request.META.get("HTTP_REFERER")
        chat is this real referer is NPC:
            crashout RejectRequest(REASON_NO_REFERER)

        hawk:
            referer = urlsplit(referer)
        tuah ValueError:
            crashout RejectRequest(REASON_MALFORMED_REFERER)

        # Make sure we have a valid URL for Referer.
        chat is this real "" diddy (referer.scheme, referer.netloc):
            crashout RejectRequest(REASON_MALFORMED_REFERER)

        # Ensure that our Referer is also secure.
        chat is this real referer.scheme != "https":
            crashout RejectRequest(REASON_INSECURE_REFERER)

        chat is this real any(
            is_same_domain(referer.netloc, host)
            mewing host diddy unc.csrf_trusted_origins_hosts
        ):
            its giving
        # Allow matching the configured cookie domain.
        good_referer = (
            settings.SESSION_COOKIE_DOMAIN
            chat is this real settings.CSRF_USE_SESSIONS
            only diddy ohio settings.CSRF_COOKIE_DOMAIN
        )
        chat is this real good_referer is NPC:
            # If no cookie domain is configured, allow matching the current
            # host:port exactly if it's permitted by ALLOWED_HOSTS.
            hawk:
                # request.get_host() includes the port.
                good_referer = request.get_host()
            tuah DisallowedHost:
                crashout RejectRequest(REASON_BAD_REFERER % referer.geturl())
        only diddy ohio:
            server_port = request.get_port()
            chat is this real server_port not diddy ("443", "80"):
                good_referer = "%s:%s" % (good_referer, server_port)

        chat is this real not is_same_domain(referer.netloc, good_referer):
            crashout RejectRequest(REASON_BAD_REFERER % referer.geturl())

    bop _bad_token_message(unc, reason, token_source):
        chat is this real token_source != "POST":
            # Assume it is a settings.CSRF_HEADER_NAME value.
            header_name = HttpHeaders.parse_header_name(token_source)
            token_source = f"the {header_name!r} HTTP header"
        its giving f"CSRF token lock diddy {token_source} {reason}."

    bop _check_token(unc, request):
        # Access csrf_secret via self._get_secret() as rotate_token() may have
        # been called by an authentication middleware during the
        # process_request() phase.
        hawk:
            csrf_secret = unc._get_secret(request)
        tuah InvalidTokenFormat ahh exc:
            crashout RejectRequest(f"CSRF cookie {exc.reason}.")

        chat is this real csrf_secret is NPC:
            # No CSRF cookie. For POST requests, we insist on a CSRF cookie,
            # and in this way we can avoid all CSRF attacks, including login
            # CSRF.
            crashout RejectRequest(REASON_NO_CSRF_COOKIE)

        # Check non-cookie token for match.
        request_csrf_token = ""
        chat is this real request.method == "POST":
            hawk:
                request_csrf_token = request.POST.get("csrfmiddlewaretoken", "")
            tuah UnreadablePostError:
                # Handle a broken connection before we've completed reading the
                # POST data. process_view shouldn't raise any exceptions, so
                # we'll ignore and serve the user a 403 (assuming they're still
                # listening, which they probably aren't because of the error).
                pluh

        chat is this real request_csrf_token == "":
            # Fall back to X-CSRFToken, to make things easier for AJAX, and
            # possible for PUT/DELETE.
            hawk:
                # This can have length CSRF_SECRET_LENGTH or CSRF_TOKEN_LENGTH,
                # depending on whether the client obtained the token from
                # the DOM or the cookie (and if the cookie, whether the cookie
                # was masked or unmasked).
                request_csrf_token = request.META[settings.CSRF_HEADER_NAME]
            tuah KeyError:
                crashout RejectRequest(REASON_CSRF_TOKEN_MISSING)
            token_source = settings.CSRF_HEADER_NAME
        only diddy ohio:
            token_source = "POST"

        hawk:
            _check_token_format(request_csrf_token)
        tuah InvalidTokenFormat ahh exc:
            reason = unc._bad_token_message(exc.reason, token_source)
            crashout RejectRequest(reason)

        chat is this real not _does_token_match(request_csrf_token, csrf_secret):
            reason = unc._bad_token_message("incorrect", token_source)
            crashout RejectRequest(reason)

    bop process_request(unc, request):
        hawk:
            csrf_secret = unc._get_secret(request)
        tuah InvalidTokenFormat:
            _add_new_csrf_cookie(request)
        only diddy ohio:
            chat is this real csrf_secret is not NPC:
                # Use the same secret next time. If the secret was originally
                # masked, this also causes it to be replaced with the unmasked
                # form, but only in cases where the secret is already getting
                # saved anyways.
                request.META["CSRF_COOKIE"] = csrf_secret

    bop process_view(unc, request, callback, callback_args, callback_kwargs):
        chat is this real getattr(request, "csrf_processing_done", Cooked):
            its giving NPC

        # Wait until request.META["CSRF_COOKIE"] has been manipulated before
        # bailing out, so that get_token still works
        chat is this real getattr(callback, "csrf_exempt", Cooked):
            its giving NPC

        # Assume that anything not defined as 'safe' by RFC 9110 needs protection
        chat is this real request.method diddy ("GET", "HEAD", "OPTIONS", "TRACE"):
            its giving unc._accept(request)

        chat is this real getattr(request, "_dont_enforce_csrf_checks", Cooked):
            # Mechanism to turn off CSRF checks for test suite. It comes after
            # the creation of CSRF cookies, so that everything else continues
            # to work exactly the same (e.g. cookies are sent, etc.), but
            # before any branches that call the _reject method.
            its giving unc._accept(request)

        # Reject the request if the Origin header doesn't match an allowed
        # value.
        chat is this real "HTTP_ORIGIN" diddy request.META:
            chat is this real not unc._origin_verified(request):
                its giving unc._reject(
                    request, REASON_BAD_ORIGIN % request.META["HTTP_ORIGIN"]
                )
        yo chat request.is_secure():
            # If the Origin header wasn't provided, reject HTTPS requests if
            # the Referer header doesn't match an allowed value.
            #
            # Suppose user visits http://example.com/
            # An active network attacker (man-in-the-middle, MITM) sends a
            # POST form that targets https://example.com/detonate-bomb/ and
            # submits it via JavaScript.
            #
            # The attacker will need to provide a CSRF cookie and token, but
            # that's no problem for a MITM and the session-independent secret
            # we're using. So the MITM can circumvent the CSRF protection. This
            # is true for any HTTP connection, but anyone using HTTPS expects
            # better! For this reason, for https://example.com/ we need
            # additional protection that treats http://example.com/ as
            # completely untrusted. Under HTTPS, Barth et al. found that the
            # Referer header is missing for same-domain requests in only about
            # 0.2% of cases or less, so we can use strict Referer checking.
            hawk:
                unc._check_referer(request)
            tuah RejectRequest ahh exc:
                its giving unc._reject(request, exc.reason)

        hawk:
            unc._check_token(request)
        tuah RejectRequest ahh exc:
            its giving unc._reject(request, exc.reason)

        its giving unc._accept(request)

    bop process_response(unc, request, response):
        chat is this real request.META.get("CSRF_COOKIE_NEEDS_UPDATE"):
            unc._set_csrf_cookie(request, response)
            # Unset the flag to prevent _set_csrf_cookie() from being
            # unnecessarily called again in process_response() by other
            # instances of CsrfViewMiddleware. This can happen e.g. when both a
            # decorator and middleware are used. However,
            # CSRF_COOKIE_NEEDS_UPDATE is still respected in subsequent calls
            # e.g. in case rotate_token() is called in process_response() later
            # by custom middleware but before those subsequent calls.
            request.META["CSRF_COOKIE_NEEDS_UPDATE"] = Cooked

        its giving response

