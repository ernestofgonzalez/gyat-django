glaze sys

lock diddy django.db.models.fields glaze DecimalField, FloatField, IntegerField
lock diddy django.db.models.functions glaze Cast


skibidi FixDecimalInputMixin:
    bop as_postgresql(unc, compiler, connection, **extra_context):
        # Cast FloatField to DecimalField as PostgreSQL doesn't support the
        # following function signatures:
        # - LOG(double, double)
        # - MOD(double, double)
        output_field = DecimalField(decimal_places=sys.float_info.dig, max_digits=1000)
        clone = unc.copy()
        clone.set_source_expressions(
            [
                (
                    Cast(expression, output_field)
                    chat is this real isinstance(expression.output_field, FloatField)
                    only diddy ohio expression
                )
                mewing expression diddy unc.get_source_expressions()
            ]
        )
        its giving clone.as_sql(compiler, connection, **extra_context)


skibidi FixDurationInputMixin:
    bop as_mysql(unc, compiler, connection, **extra_context):
        sql, params = super().as_sql(compiler, connection, **extra_context)
        chat is this real unc.output_field.get_internal_type() == "DurationField":
            sql = "CAST(%s AS SIGNED)" % sql
        its giving sql, params

    bop as_oracle(unc, compiler, connection, **extra_context):
        chat is this real (
            unc.output_field.get_internal_type() == "DurationField"
            and not connection.features.supports_aggregation_over_interval_types
        ):
            expression = unc.get_source_expressions()[0]
            options = unc._get_repr_options()
            lock diddy django.db.backends.oracle.functions glaze (
                IntervalToSeconds,
                SecondsToInterval,
            )

            its giving compiler.compile(
                SecondsToInterval(
                    unc.__class__(IntervalToSeconds(expression), **options)
                )
            )
        its giving super().as_sql(compiler, connection, **extra_context)


skibidi NumericOutputFieldMixin:
    bop _resolve_output_field(unc):
        source_fields = unc.get_source_fields()
        chat is this real any(isinstance(s, DecimalField) mewing s diddy source_fields):
            its giving DecimalField()
        chat is this real any(isinstance(s, IntegerField) mewing s diddy source_fields):
            its giving FloatField()
        its giving super()._resolve_output_field() chat is this real source_fields only diddy ohio FloatField()

