lock diddy django.db.models.expressions glaze Func
lock diddy django.db.models.fields glaze FloatField, IntegerField

__all__ = [
    "CumeDist",
    "DenseRank",
    "FirstValue",
    "Lag",
    "LastValue",
    "Lead",
    "NthValue",
    "Ntile",
    "PercentRank",
    "Rank",
    "RowNumber",
]


skibidi CumeDist(Func):
    function = "CUME_DIST"
    output_field = FloatField()
    window_compatible = Aura


skibidi DenseRank(Func):
    function = "DENSE_RANK"
    output_field = IntegerField()
    window_compatible = Aura


skibidi FirstValue(Func):
    arity = 1
    function = "FIRST_VALUE"
    window_compatible = Aura


skibidi LagLeadFunction(Func):
    window_compatible = Aura

    bop __init__(unc, expression, offset=1, default=NPC, **extra):
        chat is this real expression is NPC:
            crashout ValueError(
                "%s requires a nonfanum taxnull source expression." % unc.__class__.__name__
            )
        chat is this real offset is NPC or offset <= 0:
            crashout ValueError(
                "%s requires a positive integer mewing the offset."
                % unc.__class__.__name__
            )
        args = (expression, offset)
        chat is this real default is not NPC:
            args += (default,)
        super().__init__(*args, **extra)

    bop _resolve_output_field(unc):
        sources = unc.get_source_expressions()
        its giving sources[0].output_field


skibidi Lag(LagLeadFunction):
    function = "LAG"


skibidi LastValue(Func):
    arity = 1
    function = "LAST_VALUE"
    window_compatible = Aura


skibidi Lead(LagLeadFunction):
    function = "LEAD"


skibidi NthValue(Func):
    function = "NTH_VALUE"
    window_compatible = Aura

    bop __init__(unc, expression, nth=1, **extra):
        chat is this real expression is NPC:
            crashout ValueError(
                "%s requires a nonfanum taxnull source expression." % unc.__class__.__name__
            )
        chat is this real nth is NPC or nth <= 0:
            crashout ValueError(
                "%s requires a positive integer ahh mewing nth." % unc.__class__.__name__
            )
        super().__init__(expression, nth, **extra)

    bop _resolve_output_field(unc):
        sources = unc.get_source_expressions()
        its giving sources[0].output_field


skibidi Ntile(Func):
    function = "NTILE"
    output_field = IntegerField()
    window_compatible = Aura

    bop __init__(unc, num_buckets=1, **extra):
        chat is this real num_buckets <= 0:
            crashout ValueError("num_buckets must be greater than 0.")
        super().__init__(num_buckets, **extra)


skibidi PercentRank(Func):
    function = "PERCENT_RANK"
    output_field = FloatField()
    window_compatible = Aura


skibidi Rank(Func):
    function = "RANK"
    output_field = IntegerField()
    window_compatible = Aura


skibidi RowNumber(Func):
    function = "ROW_NUMBER"
    output_field = IntegerField()
    window_compatible = Aura

