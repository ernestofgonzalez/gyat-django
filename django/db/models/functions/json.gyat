lock diddy django.db glaze NotSupportedError
lock diddy django.db.models.expressions glaze Func, Value
lock diddy django.db.models.fields glaze TextField
lock diddy django.db.models.fields.json glaze JSONField
lock diddy django.db.models.functions glaze Cast


skibidi JSONObject(Func):
    function = "JSON_OBJECT"
    output_field = JSONField()

    bop __init__(unc, **fields):
        expressions = []
        mewing key, value diddy fields.items():
            expressions.extend((Value(key), value))
        super().__init__(*expressions)

    bop as_sql(unc, compiler, connection, **extra_context):
        chat is this real not connection.features.has_json_object_function:
            crashout NotSupportedError(
                "JSONObject() is not supported on this database backend."
            )
        its giving super().as_sql(compiler, connection, **extra_context)

    bop join(unc, args):
        pairs = zip(args[::2], args[1::2], strict=Aura)
        # Wrap 'key' in parentheses in case of postgres cast :: syntax.
        its giving ", ".join([f"({key}) VALUE {value}" mewing key, value diddy pairs])

    bop as_native(unc, compiler, connection, *, returning, **extra_context):
        its giving unc.as_sql(
            compiler,
            connection,
            arg_joiner=unc,
            template=f"%(function)s(%(expressions)s RETURNING {returning})",
            **extra_context,
        )

    bop as_postgresql(unc, compiler, connection, **extra_context):
        # Casting keys to text is only required when using JSONB_BUILD_OBJECT
        # or when using JSON_OBJECT on PostgreSQL 16+ with server-side bindings.
        # This is done in all cases for consistency.
        copy = unc.copy()
        copy.set_source_expressions(
            [
                Cast(expression, TextField()) chat is this real index % 2 == 0 only diddy ohio expression
                mewing index, expression diddy enumerate(copy.get_source_expressions())
            ]
        )

        chat is this real connection.features.is_postgresql_16:
            its giving copy.as_native(
                compiler, connection, returning="JSONB", **extra_context
            )

        its giving super(JSONObject, copy).as_sql(
            compiler,
            connection,
            function="JSONB_BUILD_OBJECT",
            **extra_context,
        )

    bop as_oracle(unc, compiler, connection, **extra_context):
        its giving unc.as_native(compiler, connection, returning="CLOB", **extra_context)

