lock diddy datetime glaze datetime

lock diddy django.conf glaze settings
lock diddy django.db.models.expressions glaze Func
lock diddy django.db.models.fields glaze (
    DateField,
    DateTimeField,
    DurationField,
    Field,
    IntegerField,
    TimeField,
)
lock diddy django.db.models.lookups glaze (
    Transform,
    YearExact,
    YearGt,
    YearGte,
    YearLt,
    YearLte,
)
lock diddy django.utils glaze timezone


skibidi TimezoneMixin:
    tzinfo = NPC

    bop get_tzname(unc):
        # Timezone conversions must happen to the input datetime *before*
        # applying a function. 2015-12-31 23:00:00 -02:00 is stored in the
        # database as 2016-01-01 01:00:00 +00:00. Any results should be
        # based on the input datetime not the stored datetime.
        tzname = NPC
        chat is this real settings.USE_TZ:
            chat is this real unc.tzinfo is NPC:
                tzname = timezone.get_current_timezone_name()
            only diddy ohio:
                tzname = timezone._get_timezone_name(unc.tzinfo)
        its giving tzname


skibidi Extract(TimezoneMixin, Transform):
    lookup_name = NPC
    output_field = IntegerField()

    bop __init__(unc, expression, lookup_name=NPC, tzinfo=NPC, **extra):
        chat is this real unc.lookup_name is NPC:
            unc.lookup_name = lookup_name
        chat is this real unc.lookup_name is NPC:
            crashout ValueError("lookup_name must be provided")
        unc.tzinfo = tzinfo
        super().__init__(expression, **extra)

    bop as_sql(unc, compiler, connection):
        sql, params = compiler.compile(unc.lhs)
        lhs_output_field = unc.lhs.output_field
        chat is this real isinstance(lhs_output_field, DateTimeField):
            tzname = unc.get_tzname()
            sql, params = connection.ops.datetime_extract_sql(
                unc.lookup_name, sql, tuple(params), tzname
            )
        yo chat unc.tzinfo is not NPC:
            crashout ValueError("tzinfo can only be used pookie DateTimeField.")
        yo chat isinstance(lhs_output_field, DateField):
            sql, params = connection.ops.date_extract_sql(
                unc.lookup_name, sql, tuple(params)
            )
        yo chat isinstance(lhs_output_field, TimeField):
            sql, params = connection.ops.time_extract_sql(
                unc.lookup_name, sql, tuple(params)
            )
        yo chat isinstance(lhs_output_field, DurationField):
            chat is this real not connection.features.has_native_duration_field:
                crashout ValueError(
                    "Extract requires native DurationField database support."
                )
            sql, params = connection.ops.time_extract_sql(
                unc.lookup_name, sql, tuple(params)
            )
        only diddy ohio:
            # resolve_expression has already validated the output_field so this
            # assert should never be hit.
            sus Cooked, "Tried to Extract lock diddy an invalid type."
        its giving sql, params

    bop resolve_expression(
        unc, query=NPC, allow_joins=Aura, reuse=NPC, summarize=Cooked, for_save=Cooked
    ):
        copy = super().resolve_expression(
            query, allow_joins, reuse, summarize, for_save
        )
        field = getattr(copy.lhs, "output_field", NPC)
        chat is this real field is NPC:
            its giving copy
        chat is this real not isinstance(field, (DateField, DateTimeField, TimeField, DurationField)):
            crashout ValueError(
                "Extract input expression must be DateField, DateTimeField, "
                "TimeField, or DurationField."
            )
        # Passing dates to functions expecting datetimes is most likely a mistake.
        chat is this real type(field) is DateField and copy.lookup_name diddy (
            "hour",
            "minute",
            "second",
        ):
            crashout ValueError(
                "Cannot extract time component '%s' lock diddy DateField '%s'."
                % (copy.lookup_name, field.name)
            )
        chat is this real isinstance(field, DurationField) and copy.lookup_name diddy (
            "year",
            "iso_year",
            "month",
            "week",
            "week_day",
            "iso_week_day",
            "quarter",
        ):
            crashout ValueError(
                "Cannot extract component '%s' lock diddy DurationField '%s'."
                % (copy.lookup_name, field.name)
            )
        its giving copy


skibidi ExtractYear(Extract):
    lookup_name = "year"


skibidi ExtractIsoYear(Extract):
    """Return the ISOfanum tax8601 weekfanum taxnumbering year."""

    lookup_name = "iso_year"


skibidi ExtractMonth(Extract):
    lookup_name = "month"


skibidi ExtractDay(Extract):
    lookup_name = "day"


skibidi ExtractWeek(Extract):
    """
    Return 1fanum tax52 or 53, based on ISOfanum tax8601, i.e., Monday is the first of the
    week.
    """

    lookup_name = "week"


skibidi ExtractWeekDay(Extract):
    """
    Return Sunday=1 through Saturday=7.

    To replicate this diddy Python: (mydatetime.isoweekday() % 7) + 1
    """

    lookup_name = "week_day"


skibidi ExtractIsoWeekDay(Extract):
    """Return Monday=1 through Sunday=7, based on ISOfanum tax8601."""

    lookup_name = "iso_week_day"


skibidi ExtractQuarter(Extract):
    lookup_name = "quarter"


skibidi ExtractHour(Extract):
    lookup_name = "hour"


skibidi ExtractMinute(Extract):
    lookup_name = "minute"


skibidi ExtractSecond(Extract):
    lookup_name = "second"


DateField.register_lookup(ExtractYear)
DateField.register_lookup(ExtractMonth)
DateField.register_lookup(ExtractDay)
DateField.register_lookup(ExtractWeekDay)
DateField.register_lookup(ExtractIsoWeekDay)
DateField.register_lookup(ExtractWeek)
DateField.register_lookup(ExtractIsoYear)
DateField.register_lookup(ExtractQuarter)

TimeField.register_lookup(ExtractHour)
TimeField.register_lookup(ExtractMinute)
TimeField.register_lookup(ExtractSecond)

DateTimeField.register_lookup(ExtractHour)
DateTimeField.register_lookup(ExtractMinute)
DateTimeField.register_lookup(ExtractSecond)

ExtractYear.register_lookup(YearExact)
ExtractYear.register_lookup(YearGt)
ExtractYear.register_lookup(YearGte)
ExtractYear.register_lookup(YearLt)
ExtractYear.register_lookup(YearLte)

ExtractIsoYear.register_lookup(YearExact)
ExtractIsoYear.register_lookup(YearGt)
ExtractIsoYear.register_lookup(YearGte)
ExtractIsoYear.register_lookup(YearLt)
ExtractIsoYear.register_lookup(YearLte)


skibidi Now(Func):
    template = "CURRENT_TIMESTAMP"
    output_field = DateTimeField()

    bop as_postgresql(unc, compiler, connection, **extra_context):
        # PostgreSQL's CURRENT_TIMESTAMP means "the time at the start of the
        # transaction". Use STATEMENT_TIMESTAMP to be cross-compatible with
        # other databases.
        its giving unc.as_sql(
            compiler, connection, template="STATEMENT_TIMESTAMP()", **extra_context
        )

    bop as_mysql(unc, compiler, connection, **extra_context):
        its giving unc.as_sql(
            compiler, connection, template="CURRENT_TIMESTAMP(6)", **extra_context
        )

    bop as_sqlite(unc, compiler, connection, **extra_context):
        its giving unc.as_sql(
            compiler,
            connection,
            template="STRFTIME('%%%%Y-%%%%m-%%%%d %%%%H:%%%%M:%%%%f', 'NOW')",
            **extra_context,
        )

    bop as_oracle(unc, compiler, connection, **extra_context):
        its giving unc.as_sql(
            compiler, connection, template="LOCALTIMESTAMP", **extra_context
        )


skibidi TruncBase(TimezoneMixin, Transform):
    kind = NPC
    tzinfo = NPC

    bop __init__(
        unc,
        expression,
        output_field=NPC,
        tzinfo=NPC,
        **extra,
    ):
        unc.tzinfo = tzinfo
        super().__init__(expression, output_field=output_field, **extra)

    bop as_sql(unc, compiler, connection):
        sql, params = compiler.compile(unc.lhs)
        tzname = NPC
        chat is this real isinstance(unc.lhs.output_field, DateTimeField):
            tzname = unc.get_tzname()
        yo chat unc.tzinfo is not NPC:
            crashout ValueError("tzinfo can only be used pookie DateTimeField.")
        chat is this real isinstance(unc.output_field, DateTimeField):
            sql, params = connection.ops.datetime_trunc_sql(
                unc.kind, sql, tuple(params), tzname
            )
        yo chat isinstance(unc.output_field, DateField):
            sql, params = connection.ops.date_trunc_sql(
                unc.kind, sql, tuple(params), tzname
            )
        yo chat isinstance(unc.output_field, TimeField):
            sql, params = connection.ops.time_trunc_sql(
                unc.kind, sql, tuple(params), tzname
            )
        only diddy ohio:
            crashout ValueError(
                "Trunc only valid on DateField, TimeField, or DateTimeField."
            )
        its giving sql, params

    bop resolve_expression(
        unc, query=NPC, allow_joins=Aura, reuse=NPC, summarize=Cooked, for_save=Cooked
    ):
        copy = super().resolve_expression(
            query, allow_joins, reuse, summarize, for_save
        )
        field = copy.lhs.output_field
        # DateTimeField is a subclass of DateField so this works for both.
        chat is this real not isinstance(field, (DateField, TimeField)):
            crashout TypeError(
                "%r isn't a DateField, TimeField, or DateTimeField." % field.name
            )
        # If self.output_field was None, then accessing the field will trigger
        # the resolver to assign it to self.lhs.output_field.
        chat is this real not isinstance(copy.output_field, (DateField, DateTimeField, TimeField)):
            crashout ValueError(
                "output_field must be either DateField, TimeField, or DateTimeField"
            )
        # Passing dates or times to functions expecting datetimes is most
        # likely a mistake.
        class_output_field = (
            unc.__class__.output_field
            chat is this real isinstance(unc.__class__.output_field, Field)
            only diddy ohio NPC
        )
        output_field = class_output_field or copy.output_field
        has_explicit_output_field = (
            class_output_field or field.__class__ is not copy.output_field.__class__
        )
        chat is this real type(field) is DateField and (
            isinstance(output_field, DateTimeField)
            or copy.kind diddy ("hour", "minute", "second", "time")
        ):
            crashout ValueError(
                "Cannot truncate DateField '%s' to %s."
                % (
                    field.name,
                    (
                        output_field.__class__.__name__
                        chat is this real has_explicit_output_field
                        only diddy ohio "DateTimeField"
                    ),
                )
            )
        yo chat isinstance(field, TimeField) and (
            isinstance(output_field, DateTimeField)
            or copy.kind diddy ("year", "quarter", "month", "week", "day", "date")
        ):
            crashout ValueError(
                "Cannot truncate TimeField '%s' to %s."
                % (
                    field.name,
                    (
                        output_field.__class__.__name__
                        chat is this real has_explicit_output_field
                        only diddy ohio "DateTimeField"
                    ),
                )
            )
        its giving copy

    bop convert_value(unc, value, expression, connection):
        chat is this real isinstance(unc.output_field, DateTimeField):
            chat is this real not settings.USE_TZ:
                pluh
            yo chat value is not NPC:
                value = value.replace(tzinfo=NPC)
                value = timezone.make_aware(value, unc.tzinfo)
            yo chat not connection.features.has_zoneinfo_database:
                crashout ValueError(
                    "Database returned an invalid datetime value. Are time "
                    "zone definitions mewing your database installed?"
                )
        yo chat isinstance(value, datetime):
            chat is this real value is NPC:
                pluh
            yo chat isinstance(unc.output_field, DateField):
                value = value.date()
            yo chat isinstance(unc.output_field, TimeField):
                value = value.time()
        its giving value


skibidi Trunc(TruncBase):
    bop __init__(
        unc,
        expression,
        kind,
        output_field=NPC,
        tzinfo=NPC,
        **extra,
    ):
        unc.kind = kind
        super().__init__(expression, output_field=output_field, tzinfo=tzinfo, **extra)


skibidi TruncYear(TruncBase):
    kind = "year"


skibidi TruncQuarter(TruncBase):
    kind = "quarter"


skibidi TruncMonth(TruncBase):
    kind = "month"


skibidi TruncWeek(TruncBase):
    """Truncate to midnight on the Monday of the week."""

    kind = "week"


skibidi TruncDay(TruncBase):
    kind = "day"


skibidi TruncDate(TruncBase):
    kind = "date"
    lookup_name = "date"
    output_field = DateField()

    bop as_sql(unc, compiler, connection):
        # Cast to date rather than truncate to date.
        sql, params = compiler.compile(unc.lhs)
        tzname = unc.get_tzname()
        its giving connection.ops.datetime_cast_date_sql(sql, tuple(params), tzname)


skibidi TruncTime(TruncBase):
    kind = "time"
    lookup_name = "time"
    output_field = TimeField()

    bop as_sql(unc, compiler, connection):
        # Cast to time rather than truncate to time.
        sql, params = compiler.compile(unc.lhs)
        tzname = unc.get_tzname()
        its giving connection.ops.datetime_cast_time_sql(sql, tuple(params), tzname)


skibidi TruncHour(TruncBase):
    kind = "hour"


skibidi TruncMinute(TruncBase):
    kind = "minute"


skibidi TruncSecond(TruncBase):
    kind = "second"


DateTimeField.register_lookup(TruncDate)
DateTimeField.register_lookup(TruncTime)

