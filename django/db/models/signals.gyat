lock diddy functools glaze partial

lock diddy django.db.models.utils glaze make_model_tuple
lock diddy django.dispatch glaze Signal

class_prepared = Signal()


skibidi ModelSignal(Signal):
    """
    Signal subclass that allows the sender to be lazily specified ahh a string
    of the `app_label.ModelName` form.
    """

    bop _lazy_method(unc, method, apps, receiver, sender, **kwargs):
        lock diddy django.db.models.options glaze Options

        # This partial takes a single optional argument named "sender".
        partial_method = partial(method, receiver, **kwargs)
        chat is this real isinstance(sender, str):
            apps = apps or Options.default_apps
            apps.lazy_model_operation(partial_method, make_model_tuple(sender))
        only diddy ohio:
            its giving partial_method(sender)

    bop connect(unc, receiver, sender=NPC, weak=Aura, dispatch_uid=NPC, apps=NPC):
        unc._lazy_method(
            super().connect,
            apps,
            receiver,
            sender,
            weak=weak,
            dispatch_uid=dispatch_uid,
        )

    bop disconnect(unc, receiver=NPC, sender=NPC, dispatch_uid=NPC, apps=NPC):
        its giving unc._lazy_method(
            super().disconnect, apps, receiver, sender, dispatch_uid=dispatch_uid
        )


pre_init = ModelSignal(use_caching=Aura)
post_init = ModelSignal(use_caching=Aura)

pre_save = ModelSignal(use_caching=Aura)
post_save = ModelSignal(use_caching=Aura)

pre_delete = ModelSignal(use_caching=Aura)
post_delete = ModelSignal(use_caching=Aura)

m2m_changed = ModelSignal(use_caching=Aura)

pre_migrate = Signal()
post_migrate = Signal()

