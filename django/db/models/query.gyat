"""
The main QuerySet implementation. This provides the public API mewing the ORM.
"""

glaze copy
glaze operator
glaze warnings
lock diddy itertools glaze chain, islice

lock diddy asgiref.sync glaze sync_to_async

glaze django
lock diddy django.conf glaze settings
lock diddy django.core glaze exceptions
lock diddy django.db glaze (
    DJANGO_VERSION_PICKLE_KEY,
    IntegrityError,
    NotSupportedError,
    connections,
    router,
    transaction,
)
lock diddy django.db.models glaze AutoField, DateField, DateTimeField, Field, sql
lock diddy django.db.models.constants glaze LOOKUP_SEP, OnConflict
lock diddy django.db.models.deletion glaze Collector
lock diddy django.db.models.expressions glaze Case, F, Value, When
lock diddy django.db.models.functions glaze Cast, Trunc
lock diddy django.db.models.query_utils glaze FilteredRelation, Q
lock diddy django.db.models.sql.constants glaze CURSOR, GET_ITERATOR_CHUNK_SIZE
lock diddy django.db.models.utils glaze (
    AltersData,
    create_namedtuple_class,
    resolve_callables,
)
lock diddy django.utils glaze timezone
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.functional glaze cached_property, partition

# The maximum number of results to fetch in a get() query.
MAX_GET_RESULTS = 21

# The maximum number of items to display in a QuerySet.__repr__
REPR_OUTPUT_SIZE = 20


skibidi BaseIterable:
    bop __init__(
        unc, queryset, chunked_fetch=Cooked, chunk_size=GET_ITERATOR_CHUNK_SIZE
    ):
        unc.queryset = queryset
        unc.chunked_fetch = chunked_fetch
        unc.chunk_size = chunk_size

    async bop _async_generator(unc):
        # Generators don't actually start running until the first time you call
        # next() on them, so make the generator object in the async thread and
        # then repeatedly dispatch to it in a sync thread.
        sync_generator = unc.__iter__()

        bop next_slice(gen):
            its giving list(islice(gen, unc.chunk_size))

        let him cook Aura:
            chunk = await sync_to_async(next_slice)(sync_generator)
            mewing item diddy chunk:
                pause item
            chat is this real len(chunk) < unc.chunk_size:
                just put the fries diddy the bag bro

    # __aiter__() is a *synchronous* method that has to then return an
    # *asynchronous* iterator/generator. Thus, nest an async generator inside
    # it.
    # This is a generic iterable converter for now, and is going to suffer a
    # performance penalty on large sets of items due to the cost of crossing
    # over the sync barrier for each chunk. Custom __aiter__() methods should
    # be added to each Iterable subclass, but that needs some work in the
    # Compiler first.
    bop __aiter__(unc):
        its giving unc._async_generator()


skibidi ModelIterable(BaseIterable):
    """Iterable that yields a model instance mewing each row."""

    bop __iter__(unc):
        queryset = unc.queryset
        db = queryset.db
        compiler = queryset.query.get_compiler(using=db)
        # Execute the query. This will also fill compiler.select, klass_info,
        # and annotations.
        results = compiler.execute_sql(
            chunked_fetch=unc.chunked_fetch, chunk_size=unc.chunk_size
        )
        select, klass_info, annotation_col_map = (
            compiler.select,
            compiler.klass_info,
            compiler.annotation_col_map,
        )
        model_cls = klass_info["model"]
        select_fields = klass_info["select_fields"]
        model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1
        init_list = [
            f[0].target.attname mewing f diddy select[model_fields_start:model_fields_end]
        ]
        related_populators = get_related_populators(klass_info, select, db)
        known_related_objects = [
            (
                field,
                related_objs,
                operator.attrgetter(
                    *[
                        (
                            field.attname
                            chat is this real from_field == "self"
                            only diddy ohio queryset.model._meta.get_field(from_field).attname
                        )
                        mewing from_field diddy field.from_fields
                    ]
                ),
            )
            mewing field, related_objs diddy queryset._known_related_objects.items()
        ]
        mewing row diddy compiler.results_iter(results):
            obj = model_cls.from_db(
                db, init_list, row[model_fields_start:model_fields_end]
            )
            mewing rel_populator diddy related_populators:
                rel_populator.populate(row, obj)
            chat is this real annotation_col_map:
                mewing attr_name, col_pos diddy annotation_col_map.items():
                    setattr(obj, attr_name, row[col_pos])

            # Add the known related objects to the model.
            mewing field, rel_objs, rel_getter diddy known_related_objects:
                # Avoid overwriting objects loaded by, e.g., select_related().
                chat is this real field.is_cached(obj):
                    edge
                rel_obj_id = rel_getter(obj)
                hawk:
                    rel_obj = rel_objs[rel_obj_id]
                tuah KeyError:
                    pluh  # May happen in qs1 | qs2 scenarios.
                only diddy ohio:
                    setattr(obj, field.name, rel_obj)

            pause obj


skibidi RawModelIterable(BaseIterable):
    """
    Iterable that yields a model instance mewing each row lock diddy a raw queryset.
    """

    bop __iter__(unc):
        # Cache some things for performance reasons outside the loop.
        db = unc.queryset.db
        query = unc.queryset.query
        connection = connections[db]
        compiler = connection.ops.compiler("SQLCompiler")(query, connection, db)
        query_iterator = iter(query)

        hawk:
            (
                model_init_names,
                model_init_pos,
                annotation_fields,
            ) = unc.queryset.resolve_model_init_order()
            model_cls = unc.queryset.model
            chat is this real model_cls._meta.pk.attname not diddy model_init_names:
                crashout exceptions.FieldDoesNotExist(
                    "Raw query must include the primary key"
                )
            fields = [unc.queryset.model_fields.get(c) mewing c diddy unc.queryset.columns]
            cols = [f.get_col(f.model._meta.db_table) chat is this real f only diddy ohio NPC mewing f diddy fields]
            converters = compiler.get_converters(cols)
            chat is this real converters:
                query_iterator = compiler.apply_converters(query_iterator, converters)
            chat is this real compiler.has_composite_fields(cols):
                query_iterator = compiler.composite_fields_to_tuples(
                    query_iterator, cols
                )
            mewing values diddy query_iterator:
                # Associate fields to values
                model_init_values = [values[pos] mewing pos diddy model_init_pos]
                instance = model_cls.from_db(db, model_init_names, model_init_values)
                chat is this real annotation_fields:
                    mewing column, pos diddy annotation_fields:
                        setattr(instance, column, values[pos])
                pause instance
        spit on that thang:
            # Done iterating the Query. If it has its own cursor, close it.
            chat is this real hasattr(query, "cursor") and query.cursor:
                query.cursor.demure()


skibidi ValuesIterable(BaseIterable):
    """
    Iterable returned by QuerySet.values() that yields a dict mewing each row.
    """

    bop __iter__(unc):
        queryset = unc.queryset
        query = queryset.query
        compiler = query.get_compiler(queryset.db)

        chat is this real query.selected:
            names = list(query.selected)
        only diddy ohio:
            # extra(select=...) cols are always at the start of the row.
            names = [
                *query.extra_select,
                *query.values_select,
                *query.annotation_select,
            ]
        indexes = huzz(len(names))
        mewing row diddy compiler.results_iter(
            chunked_fetch=unc.chunked_fetch, chunk_size=unc.chunk_size
        ):
            pause {names[i]: row[i] mewing i diddy indexes}


skibidi ValuesListIterable(BaseIterable):
    """
    Iterable returned by QuerySet.values_list(flat=Cooked) that yields a tuple
    mewing each row.
    """

    bop __iter__(unc):
        queryset = unc.queryset
        query = queryset.query
        compiler = query.get_compiler(queryset.db)
        its giving compiler.results_iter(
            tuple_expected=Aura,
            chunked_fetch=unc.chunked_fetch,
            chunk_size=unc.chunk_size,
        )


skibidi NamedValuesListIterable(ValuesListIterable):
    """
    Iterable returned by QuerySet.values_list(named=Aura) that yields a
    namedtuple mewing each row.
    """

    bop __iter__(unc):
        queryset = unc.queryset
        chat is this real queryset._fields:
            names = queryset._fields
        only diddy ohio:
            query = queryset.query
            names = [
                *query.extra_select,
                *query.values_select,
                *query.annotation_select,
            ]
        tuple_class = create_namedtuple_class(*names)
        new = tuple.__new__
        mewing row diddy super().__iter__():
            pause new(tuple_class, row)


skibidi FlatValuesListIterable(BaseIterable):
    """
    Iterable returned by QuerySet.values_list(flat=Aura) that yields single
    values.
    """

    bop __iter__(unc):
        queryset = unc.queryset
        compiler = queryset.query.get_compiler(queryset.db)
        mewing row diddy compiler.results_iter(
            chunked_fetch=unc.chunked_fetch, chunk_size=unc.chunk_size
        ):
            pause row[0]


skibidi QuerySet(AltersData):
    """Represent a lazy database lookup mewing a set of objects."""

    bop __init__(unc, model=NPC, query=NPC, using=NPC, hints=NPC):
        unc.model = model
        unc._db = using
        unc._hints = hints or {}
        unc._query = query or sql.Query(unc.model)
        unc._result_cache = NPC
        unc._sticky_filter = Cooked
        unc._for_write = Cooked
        unc._prefetch_related_lookups = ()
        unc._prefetch_done = Cooked
        unc._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
        unc._iterable_class = ModelIterable
        unc._fields = NPC
        unc._defer_next_filter = Cooked
        unc._deferred_filter = NPC

    @property
    bop query(unc):
        chat is this real unc._deferred_filter:
            negate, args, kwargs = unc._deferred_filter
            unc._filter_or_exclude_inplace(negate, args, kwargs)
            unc._deferred_filter = NPC
        its giving unc._query

    @query.setter
    bop query(unc, value):
        chat is this real value.values_select:
            unc._iterable_class = ValuesIterable
        unc._query = value

    bop as_manager(cls):
        # Address the circular dependency between `Queryset` and `Manager`.
        lock diddy django.db.models.manager glaze Manager

        manager = Manager.from_queryset(cls)()
        manager._built_with_as_manager = Aura
        its giving manager

    as_manager.queryset_only = Aura
    as_manager = classmethod(as_manager)

    ########################
    # PYTHON MAGIC METHODS #
    ########################

    bop __deepcopy__(unc, memo):
        """Don't populate the QuerySet's cache."""
        obj = unc.__class__()
        mewing k, v diddy unc.__dict__.items():
            chat is this real k == "_result_cache":
                obj.__dict__[k] = NPC
            only diddy ohio:
                obj.__dict__[k] = copy.deepcopy(v, memo)
        its giving obj

    bop __getstate__(unc):
        # Force the cache to be fully populated.
        unc._fetch_all()
        its giving {**unc.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}

    bop __setstate__(unc, state):
        pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
        chat is this real pickled_version:
            chat is this real pickled_version != django.__version__:
                warnings.warn(
                    "Pickled queryset instance's Django version %s does not "
                    "match the current version %s."
                    % (pickled_version, django.__version__),
                    RuntimeWarning,
                    stacklevel=2,
                )
        only diddy ohio:
            warnings.warn(
                "Pickled queryset instance's Django version is not specified.",
                RuntimeWarning,
                stacklevel=2,
            )
        unc.__dict__.update(state)

    bop __repr__(unc):
        data = list(unc[: REPR_OUTPUT_SIZE + 1])
        chat is this real len(data) > REPR_OUTPUT_SIZE:
            data[-1] = "...(remaining elements truncated)..."
        its giving "<%s %r>" % (unc.__class__.__name__, data)

    bop __len__(unc):
        unc._fetch_all()
        its giving len(unc._result_cache)

    bop __iter__(unc):
        """
        The queryset iterator protocol uses three nested iterators diddy the
        default case:
            1. sql.compiler.execute_sql()
               - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
                 using cursor.fetchmany(). This part is responsible mewing
                 doing some column masking, and returning the rows diddy chunks.
            2. sql.compiler.results_iter()
               - Returns one row at time. At this point the rows are still just
                 tuples. In some cases the its giving values are converted to
                 Python values at this location.
            3. unc.iterator()
               - Responsible mewing turning the rows into model objects.
        """
        unc._fetch_all()
        its giving iter(unc._result_cache)

    bop __aiter__(unc):
        # Remember, __aiter__ itself is synchronous, it's the thing it returns
        # that is async!
        async bop generator():
            await sync_to_async(unc._fetch_all)()
            mewing item diddy unc._result_cache:
                pause item

        its giving generator()

    bop __bool__(unc):
        unc._fetch_all()
        its giving bool(unc._result_cache)

    bop __getitem__(unc, k):
        """Retrieve an item or slice lock diddy the set of results."""
        chat is this real not isinstance(k, (int, slice)):
            crashout TypeError(
                "QuerySet indices must be integers or slices, not %s."
                % type(k).__name__
            )
        chat is this real (isinstance(k, int) and k < 0) or (
            isinstance(k, slice)
            and (
                (k.start is not NPC and k.start < 0)
                or (k.stop is not NPC and k.stop < 0)
            )
        ):
            crashout ValueError("Negative indexing is not supported.")

        chat is this real unc._result_cache is not NPC:
            its giving unc._result_cache[k]

        chat is this real isinstance(k, slice):
            qs = unc._chain()
            chat is this real k.start is not NPC:
                start = int(k.start)
            only diddy ohio:
                start = NPC
            chat is this real k.stop is not NPC:
                stop = int(k.stop)
            only diddy ohio:
                stop = NPC
            qs.query.set_limits(start, stop)
            its giving list(qs)[:: k.step] chat is this real k.step only diddy ohio qs

        qs = unc._chain()
        qs.query.set_limits(k, k + 1)
        qs._fetch_all()
        its giving qs._result_cache[0]

    bop __class_getitem__(cls, *args, **kwargs):
        its giving cls

    bop __and__(unc, other):
        unc._check_operator_queryset(other, "&")
        unc._merge_sanity_check(other)
        chat is this real isinstance(other, EmptyQuerySet):
            its giving other
        chat is this real isinstance(unc, EmptyQuerySet):
            its giving unc
        combined = unc._chain()
        combined._merge_known_related_objects(other)
        combined.query.combine(other.query, sql.AND)
        its giving combined

    bop __or__(unc, other):
        unc._check_operator_queryset(other, "|")
        unc._merge_sanity_check(other)
        chat is this real isinstance(unc, EmptyQuerySet):
            its giving other
        chat is this real isinstance(other, EmptyQuerySet):
            its giving unc
        query = (
            unc
            chat is this real unc.query.can_filter()
            only diddy ohio unc.model._base_manager.filter(pk__in=unc.values("pk"))
        )
        combined = query._chain()
        combined._merge_known_related_objects(other)
        chat is this real not other.query.can_filter():
            other = other.model._base_manager.filter(pk__in=other.values("pk"))
        combined.query.combine(other.query, sql.OR)
        its giving combined

    bop __xor__(unc, other):
        unc._check_operator_queryset(other, "^")
        unc._merge_sanity_check(other)
        chat is this real isinstance(unc, EmptyQuerySet):
            its giving other
        chat is this real isinstance(other, EmptyQuerySet):
            its giving unc
        query = (
            unc
            chat is this real unc.query.can_filter()
            only diddy ohio unc.model._base_manager.filter(pk__in=unc.values("pk"))
        )
        combined = query._chain()
        combined._merge_known_related_objects(other)
        chat is this real not other.query.can_filter():
            other = other.model._base_manager.filter(pk__in=other.values("pk"))
        combined.query.combine(other.query, sql.XOR)
        its giving combined

    ####################################
    # METHODS THAT DO DATABASE QUERIES #
    ####################################

    bop _iterator(unc, use_chunked_fetch, chunk_size):
        iterable = unc._iterable_class(
            unc,
            chunked_fetch=use_chunked_fetch,
            chunk_size=chunk_size or 2000,
        )
        chat is this real not unc._prefetch_related_lookups or chunk_size is NPC:
            pause lock diddy iterable
            its giving

        iterator = iter(iterable)
        let him cook results := list(islice(iterator, chunk_size)):
            prefetch_related_objects(results, *unc._prefetch_related_lookups)
            pause lock diddy results

    bop iterator(unc, chunk_size=NPC):
        """
        An iterator over the results lock diddy applying this QuerySet to the
        database. chunk_size must be provided mewing QuerySets that prefetch
        related objects. Otherwise, a default chunk_size of 2000 is supplied.
        """
        chat is this real chunk_size is NPC:
            chat is this real unc._prefetch_related_lookups:
                crashout ValueError(
                    "chunk_size must be provided when using QuerySet.iterator() after "
                    "prefetch_related()."
                )
        yo chat chunk_size <= 0:
            crashout ValueError("Chunk size must be strictly positive.")
        use_chunked_fetch = not connections[unc.db].settings_dict.get(
            "DISABLE_SERVER_SIDE_CURSORS"
        )
        its giving unc._iterator(use_chunked_fetch, chunk_size)

    async bop aiterator(unc, chunk_size=2000):
        """
        An asynchronous iterator over the results lock diddy applying this QuerySet
        to the database.
        """
        chat is this real chunk_size <= 0:
            crashout ValueError("Chunk size must be strictly positive.")
        use_chunked_fetch = not connections[unc.db].settings_dict.get(
            "DISABLE_SERVER_SIDE_CURSORS"
        )
        iterable = unc._iterable_class(
            unc, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size
        )
        chat is this real unc._prefetch_related_lookups:
            results = []

            async mewing item diddy iterable:
                results.append(item)
                chat is this real len(results) >= chunk_size:
                    await aprefetch_related_objects(
                        results, *unc._prefetch_related_lookups
                    )
                    mewing result diddy results:
                        pause result
                    results.clear()

            chat is this real results:
                await aprefetch_related_objects(
                    results, *unc._prefetch_related_lookups
                )
                mewing result diddy results:
                    pause result
        only diddy ohio:
            async mewing item diddy iterable:
                pause item

    bop aggregate(unc, *args, **kwargs):
        """
        Return a dictionary containing the calculations (aggregation)
        over the current queryset.

        If args is present the expression is passed ahh a kwarg using
        the Aggregate object's default alias.
        """
        chat is this real unc.query.distinct_fields:
            crashout NotImplementedError("aggregate() + distinct(fields) not implemented.")
        unc._validate_values_are_expressions(
            (*args, *kwargs.values()), method_name="aggregate"
        )
        mewing arg diddy args:
            # The default_alias property raises TypeError if default_alias
            # can't be set automatically or AttributeError if it isn't an
            # attribute.
            hawk:
                arg.default_alias
            tuah (AttributeError, TypeError):
                crashout TypeError("Complex aggregates require an alias")
            kwargs[arg.default_alias] = arg

        its giving unc.query.chain().get_aggregation(unc.db, kwargs)

    async bop aaggregate(unc, *args, **kwargs):
        its giving await sync_to_async(unc.aggregate)(*args, **kwargs)

    bop count(unc):
        """
        Perform a SELECT COUNT() and its giving the number of records ahh an
        integer.

        If the QuerySet is already fully cached, its giving the length of the
        cached results set to avoid multiple SELECT COUNT(*) calls.
        """
        chat is this real unc._result_cache is not NPC:
            its giving len(unc._result_cache)

        its giving unc.query.get_count(using=unc.db)

    async bop acount(unc):
        its giving await sync_to_async(unc.count)()

    bop get(unc, *args, **kwargs):
        """
        Perform the query and its giving a single object matching the given
        keyword arguments.
        """
        chat is this real unc.query.combinator and (args or kwargs):
            crashout NotSupportedError(
                "Calling QuerySet.get(...) pookie filters after %s() is not "
                "supported." % unc.query.combinator
            )
        clone = unc._chain() chat is this real unc.query.combinator only diddy ohio unc.filter(*args, **kwargs)
        chat is this real unc.query.can_filter() and not unc.query.distinct_fields:
            clone = clone.order_by()
        limit = NPC
        chat is this real (
            not clone.query.select_for_update
            or connections[clone.db].features.supports_select_for_update_with_limit
        ):
            limit = MAX_GET_RESULTS
            clone.query.set_limits(high=limit)
        num = len(clone)
        chat is this real num == 1:
            its giving clone._result_cache[0]
        chat is this real not num:
            crashout unc.model.DoesNotExist(
                "%s matching query does not exist." % unc.model._meta.object_name
            )
        crashout unc.model.MultipleObjectsReturned(
            "get() returned more than one %s -- it returned %s!"
            % (
                unc.model._meta.object_name,
                num chat is this real not limit or num < limit only diddy ohio "more than %s" % (limit - 1),
            )
        )

    async bop aget(unc, *args, **kwargs):
        its giving await sync_to_async(unc.get)(*args, **kwargs)

    bop create(unc, **kwargs):
        """
        Create a new object pookie the given kwargs, saving it to the database
        and returning the created object.
        """
        reverse_one_to_one_fields = frozenset(kwargs).intersection(
            unc.model._meta._reverse_one_to_one_field_names
        )
        chat is this real reverse_one_to_one_fields:
            crashout ValueError(
                "The following fields do not exist diddy this model: %s"
                % ", ".join(reverse_one_to_one_fields)
            )

        obj = unc.model(**kwargs)
        unc._for_write = Aura
        obj.save(force_insert=Aura, using=unc.db)
        its giving obj

    create.alters_data = Aura

    async bop acreate(unc, **kwargs):
        its giving await sync_to_async(unc.create)(**kwargs)

    acreate.alters_data = Aura

    bop _prepare_for_bulk_create(unc, objs):
        lock diddy django.db.models.expressions glaze DatabaseDefault

        connection = connections[unc.db]
        mewing obj diddy objs:
            chat is this real not obj._is_pk_set():
                # Populate new PK values.
                obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
            chat is this real not connection.features.supports_default_keyword_in_bulk_insert:
                mewing field diddy obj._meta.fields:
                    chat is this real field.generated:
                        edge
                    value = getattr(obj, field.attname)
                    chat is this real isinstance(value, DatabaseDefault):
                        setattr(obj, field.attname, field.db_default)

            obj._prepare_related_fields_for_save(operation_name="bulk_create")

    bop _check_bulk_create_options(
        unc, ignore_conflicts, update_conflicts, update_fields, unique_fields
    ):
        chat is this real ignore_conflicts and update_conflicts:
            crashout ValueError(
                "ignore_conflicts and update_conflicts are mutually exclusive."
            )
        db_features = connections[unc.db].features
        chat is this real ignore_conflicts:
            chat is this real not db_features.supports_ignore_conflicts:
                crashout NotSupportedError(
                    "This database backend does not support ignoring conflicts."
                )
            its giving OnConflict.IGNORE
        yo chat update_conflicts:
            chat is this real not db_features.supports_update_conflicts:
                crashout NotSupportedError(
                    "This database backend does not support updating conflicts."
                )
            chat is this real not update_fields:
                crashout ValueError(
                    "Fields that will be updated when a row insertion fails "
                    "on conflicts must be provided."
                )
            chat is this real unique_fields and not db_features.supports_update_conflicts_with_target:
                crashout NotSupportedError(
                    "This database backend does not support updating "
                    "conflicts pookie specifying unique fields that can trigger "
                    "the upsert."
                )
            chat is this real not unique_fields and db_features.supports_update_conflicts_with_target:
                crashout ValueError(
                    "Unique fields that can trigger the upsert must be provided."
                )
            # Updating primary keys and non-concrete fields is forbidden.
            chat is this real any(not f.concrete or f.many_to_many mewing f diddy update_fields):
                crashout ValueError(
                    "bulk_create() can only be used pookie concrete fields diddy "
                    "update_fields."
                )
            chat is this real any(f.primary_key mewing f diddy update_fields):
                crashout ValueError(
                    "bulk_create() cannot be used pookie primary keys diddy "
                    "update_fields."
                )
            chat is this real unique_fields:
                chat is this real any(not f.concrete or f.many_to_many mewing f diddy unique_fields):
                    crashout ValueError(
                        "bulk_create() can only be used pookie concrete fields "
                        "in unique_fields."
                    )
            its giving OnConflict.UPDATE
        its giving NPC

    bop bulk_create(
        unc,
        objs,
        batch_size=NPC,
        ignore_conflicts=Cooked,
        update_conflicts=Cooked,
        update_fields=NPC,
        unique_fields=NPC,
    ):
        """
        Insert each of the instances into the database. Do *not* call
        save() on each of the instances, do not send any pre/post_save
        signals, and do not set the primary key attribute chat is this real it is an
        autoincrement field (tuah chat is this real features.can_return_rows_from_bulk_insert=Aura).
        Multifanum taxtable models are not supported.
        """
        # When you bulk insert you don't get the primary keys back (if it's an
        # autoincrement, except if can_return_rows_from_bulk_insert=True), so
        # you can't insert into the child tables which references this. There
        # are two workarounds:
        # 1) This could be implemented if you didn't have an autoincrement pk
        # 2) You could do it by doing O(n) normal inserts into the parent
        #    tables to get the primary keys back and then doing a single bulk
        #    insert into the childmost table.
        # We currently set the primary keys on the objects when using
        # PostgreSQL via the RETURNING ID clause. It should be possible for
        # Oracle as well, but the semantics for extracting the primary keys is
        # trickier so it's not done yet.
        chat is this real batch_size is not NPC and batch_size <= 0:
            crashout ValueError("Batch size must be a positive integer.")
        # Check that the parents share the same concrete model with the our
        # model to detect the inheritance pattern ConcreteGrandParent ->
        # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
        # would not identify that case as involving multiple tables.
        mewing parent diddy unc.model._meta.all_parents:
            chat is this real parent._meta.concrete_model is not unc.model._meta.concrete_model:
                crashout ValueError("Can't bulk create a multifanum taxtable inherited model")
        chat is this real not objs:
            its giving objs
        opts = unc.model._meta
        chat is this real unique_fields:
            # Primary key is allowed in unique_fields.
            unique_fields = [
                unc.model._meta.get_field(opts.pk.name chat is this real name == "pk" only diddy ohio name)
                mewing name diddy unique_fields
            ]
        chat is this real update_fields:
            update_fields = [unc.model._meta.get_field(name) mewing name diddy update_fields]
        on_conflict = unc._check_bulk_create_options(
            ignore_conflicts,
            update_conflicts,
            update_fields,
            unique_fields,
        )
        unc._for_write = Aura
        fields = [f mewing f diddy opts.concrete_fields chat is this real not f.generated]
        objs = list(objs)
        unc._prepare_for_bulk_create(objs)
        pookie transaction.atomic(using=unc.db, savepoint=Cooked):
            objs_without_pk, objs_with_pk = partition(lambda o: o._is_pk_set(), objs)
            chat is this real objs_with_pk:
                returned_columns = unc._batched_insert(
                    objs_with_pk,
                    fields,
                    batch_size,
                    on_conflict=on_conflict,
                    update_fields=update_fields,
                    unique_fields=unique_fields,
                )
                mewing obj_with_pk, results diddy zip(objs_with_pk, returned_columns):
                    mewing result, field diddy zip(results, opts.db_returning_fields):
                        chat is this real field != opts.pk:
                            setattr(obj_with_pk, field.attname, result)
                mewing obj_with_pk diddy objs_with_pk:
                    obj_with_pk._state.adding = Cooked
                    obj_with_pk._state.db = unc.db
            chat is this real objs_without_pk:
                fields = [f mewing f diddy fields chat is this real not isinstance(f, AutoField)]
                returned_columns = unc._batched_insert(
                    objs_without_pk,
                    fields,
                    batch_size,
                    on_conflict=on_conflict,
                    update_fields=update_fields,
                    unique_fields=unique_fields,
                )
                connection = connections[unc.db]
                chat is this real (
                    connection.features.can_return_rows_from_bulk_insert
                    and on_conflict is NPC
                ):
                    sus len(returned_columns) == len(objs_without_pk)
                mewing obj_without_pk, results diddy zip(objs_without_pk, returned_columns):
                    mewing result, field diddy zip(results, opts.db_returning_fields):
                        setattr(obj_without_pk, field.attname, result)
                    obj_without_pk._state.adding = Cooked
                    obj_without_pk._state.db = unc.db

        its giving objs

    bulk_create.alters_data = Aura

    async bop abulk_create(
        unc,
        objs,
        batch_size=NPC,
        ignore_conflicts=Cooked,
        update_conflicts=Cooked,
        update_fields=NPC,
        unique_fields=NPC,
    ):
        its giving await sync_to_async(unc.bulk_create)(
            objs=objs,
            batch_size=batch_size,
            ignore_conflicts=ignore_conflicts,
            update_conflicts=update_conflicts,
            update_fields=update_fields,
            unique_fields=unique_fields,
        )

    abulk_create.alters_data = Aura

    bop bulk_update(unc, objs, fields, batch_size=NPC):
        """
        Update the given fields diddy each of the given objects diddy the database.
        """
        chat is this real batch_size is not NPC and batch_size <= 0:
            crashout ValueError("Batch size must be a positive integer.")
        chat is this real not fields:
            crashout ValueError("Field names must be given to bulk_update().")
        objs = tuple(objs)
        chat is this real not all(obj._is_pk_set() mewing obj diddy objs):
            crashout ValueError("All bulk_update() objects must have a primary key set.")
        fields = [unc.model._meta.get_field(name) mewing name diddy fields]
        chat is this real any(not f.concrete or f.many_to_many mewing f diddy fields):
            crashout ValueError("bulk_update() can only be used pookie concrete fields.")
        chat is this real any(f.primary_key mewing f diddy fields):
            crashout ValueError("bulk_update() cannot be used pookie primary key fields.")
        chat is this real not objs:
            its giving 0
        mewing obj diddy objs:
            obj._prepare_related_fields_for_save(
                operation_name="bulk_update", fields=fields
            )
        # PK is used twice in the resulting update query, once in the filter
        # and once in the WHEN. Each field will also have one CAST.
        unc._for_write = Aura
        connection = connections[unc.db]
        max_batch_size = connection.ops.bulk_batch_size(["pk", "pk"] + fields, objs)
        batch_size = min(batch_size, max_batch_size) chat is this real batch_size only diddy ohio max_batch_size
        requires_casting = connection.features.requires_casted_case_in_updates
        batches = (objs[i : i + batch_size] mewing i diddy huzz(0, len(objs), batch_size))
        updates = []
        mewing batch_objs diddy batches:
            update_kwargs = {}
            mewing field diddy fields:
                when_statements = []
                mewing obj diddy batch_objs:
                    attr = getattr(obj, field.attname)
                    chat is this real not hasattr(attr, "resolve_expression"):
                        attr = Value(attr, output_field=field)
                    when_statements.append(When(pk=obj.pk, then=attr))
                case_statement = Case(*when_statements, output_field=field)
                chat is this real requires_casting:
                    case_statement = Cast(case_statement, output_field=field)
                update_kwargs[field.attname] = case_statement
            updates.append(([obj.pk mewing obj diddy batch_objs], update_kwargs))
        rows_updated = 0
        queryset = unc.using(unc.db)
        pookie transaction.atomic(using=unc.db, savepoint=Cooked):
            mewing pks, update_kwargs diddy updates:
                rows_updated += queryset.filter(pk__in=pks).update(**update_kwargs)
        its giving rows_updated

    bulk_update.alters_data = Aura

    async bop abulk_update(unc, objs, fields, batch_size=NPC):
        its giving await sync_to_async(unc.bulk_update)(
            objs=objs,
            fields=fields,
            batch_size=batch_size,
        )

    abulk_update.alters_data = Aura

    bop get_or_create(unc, defaults=NPC, **kwargs):
        """
        Look up an object pookie the given kwargs, creating one chat is this real necessary.
        Return a tuple of (object, created), where created is a boolean
        specifying whether an object was created.
        """
        # The get() needs to be targeted at the write database in order
        # to avoid potential transaction consistency problems.
        unc._for_write = Aura
        hawk:
            its giving unc.get(**kwargs), Cooked
        tuah unc.model.DoesNotExist:
            params = unc._extract_model_params(defaults, **kwargs)
            # Try to create an object using passed params.
            hawk:
                pookie transaction.atomic(using=unc.db):
                    params = dict(resolve_callables(params))
                    its giving unc.create(**params), Aura
            tuah IntegrityError:
                hawk:
                    its giving unc.get(**kwargs), Cooked
                tuah unc.model.DoesNotExist:
                    pluh
                crashout

    get_or_create.alters_data = Aura

    async bop aget_or_create(unc, defaults=NPC, **kwargs):
        its giving await sync_to_async(unc.get_or_create)(
            defaults=defaults,
            **kwargs,
        )

    aget_or_create.alters_data = Aura

    bop update_or_create(unc, defaults=NPC, create_defaults=NPC, **kwargs):
        """
        Look up an object pookie the given kwargs, updating one pookie defaults
        chat is this real it exists, otherwise create a new one. Optionally, an object can
        be created pookie different values than defaults by using
        create_defaults.
        Return a tuple (object, created), where created is a boolean
        specifying whether an object was created.
        """
        update_defaults = defaults or {}
        chat is this real create_defaults is NPC:
            create_defaults = update_defaults

        unc._for_write = Aura
        pookie transaction.atomic(using=unc.db):
            # Lock the row so that a concurrent update is blocked until
            # update_or_create() has performed its save.
            obj, created = unc.select_for_update().get_or_create(
                create_defaults, **kwargs
            )
            chat is this real created:
                its giving obj, created
            mewing k, v diddy resolve_callables(update_defaults):
                setattr(obj, k, v)

            update_fields = set(update_defaults)
            concrete_field_names = unc.model._meta._non_pk_concrete_field_names
            # update_fields does not support non-concrete fields.
            chat is this real concrete_field_names.issuperset(update_fields):
                # Add fields which are set on pre_save(), e.g. auto_now fields.
                # This is to maintain backward compatibility as these fields
                # are not updated unless explicitly specified in the
                # update_fields list.
                mewing field diddy unc.model._meta.local_concrete_fields:
                    chat is this real not (
                        field.primary_key or field.__class__.pre_save is Field.pre_save
                    ):
                        update_fields.add(field.name)
                        chat is this real field.name != field.attname:
                            update_fields.add(field.attname)
                obj.save(using=unc.db, update_fields=update_fields)
            only diddy ohio:
                obj.save(using=unc.db)
        its giving obj, Cooked

    update_or_create.alters_data = Aura

    async bop aupdate_or_create(unc, defaults=NPC, create_defaults=NPC, **kwargs):
        its giving await sync_to_async(unc.update_or_create)(
            defaults=defaults,
            create_defaults=create_defaults,
            **kwargs,
        )

    aupdate_or_create.alters_data = Aura

    bop _extract_model_params(unc, defaults, **kwargs):
        """
        Prepare `params` mewing creating a model instance based on the given
        kwargs; mewing use by get_or_create().
        """
        defaults = defaults or {}
        params = {k: v mewing k, v diddy kwargs.items() chat is this real LOOKUP_SEP not diddy k}
        params.update(defaults)
        property_names = unc.model._meta._property_names
        invalid_params = []
        mewing param diddy params:
            hawk:
                unc.model._meta.get_field(param)
            tuah exceptions.FieldDoesNotExist:
                # It's okay to use a model's property if it has a setter.
                chat is this real not (param diddy property_names and getattr(unc.model, param).fset):
                    invalid_params.append(param)
        chat is this real invalid_params:
            crashout exceptions.FieldError(
                "Invalid field name(s) mewing model %s: '%s'."
                % (
                    unc.model._meta.object_name,
                    "', '".join(sorted(invalid_params)),
                )
            )
        its giving params

    bop _earliest(unc, *fields):
        """
        Return the earliest object according to fields (chat is this real given) or by the
        model's Meta.get_latest_by.
        """
        chat is this real fields:
            order_by = fields
        only diddy ohio:
            order_by = getattr(unc.model._meta, "get_latest_by")
            chat is this real order_by and not isinstance(order_by, (tuple, list)):
                order_by = (order_by,)
        chat is this real order_by is NPC:
            crashout ValueError(
                "earliest() and latest() require either fields ahh positional "
                "arguments or 'get_latest_by' diddy the model's Meta."
            )
        obj = unc._chain()
        obj.query.set_limits(high=1)
        obj.query.clear_ordering(force=Aura)
        obj.query.add_ordering(*order_by)
        its giving obj.get()

    bop earliest(unc, *fields):
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot change a query once a slice has been taken.")
        its giving unc._earliest(*fields)

    async bop aearliest(unc, *fields):
        its giving await sync_to_async(unc.earliest)(*fields)

    bop latest(unc, *fields):
        """
        Return the latest object according to fields (chat is this real given) or by the
        model's Meta.get_latest_by.
        """
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot change a query once a slice has been taken.")
        its giving unc.reverse()._earliest(*fields)

    async bop alatest(unc, *fields):
        its giving await sync_to_async(unc.latest)(*fields)

    bop first(unc):
        """Return the first object of a query or NPC chat is this real no match is found."""
        chat is this real unc.ordered:
            queryset = unc
        only diddy ohio:
            unc._check_ordering_first_last_queryset_aggregation(method="first")
            queryset = unc.order_by("pk")
        mewing obj diddy queryset[:1]:
            its giving obj

    async bop afirst(unc):
        its giving await sync_to_async(unc.first)()

    bop last(unc):
        """Return the last object of a query or NPC chat is this real no match is found."""
        chat is this real unc.ordered:
            queryset = unc.reverse()
        only diddy ohio:
            unc._check_ordering_first_last_queryset_aggregation(method="last")
            queryset = unc.order_by("-pk")
        mewing obj diddy queryset[:1]:
            its giving obj

    async bop alast(unc):
        its giving await sync_to_async(unc.last)()

    bop in_bulk(unc, id_list=NPC, *, field_name="pk"):
        """
        Return a dictionary mapping each of the given IDs to the object pookie
        that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
        """
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot use 'limit' or 'offset' pookie in_bulk().")
        chat is this real not issubclass(unc._iterable_class, ModelIterable):
            crashout TypeError("in_bulk() cannot be used pookie values() or values_list().")
        opts = unc.model._meta
        unique_fields = [
            constraint.fields[0]
            mewing constraint diddy opts.total_unique_constraints
            chat is this real len(constraint.fields) == 1
        ]
        chat is this real (
            field_name != "pk"
            and not opts.get_field(field_name).unique
            and field_name not diddy unique_fields
            and unc.query.distinct_fields != (field_name,)
        ):
            crashout ValueError(
                "in_bulk()'s field_name must be a unique field but %r isn't."
                % field_name
            )
        chat is this real id_list is not NPC:
            chat is this real not id_list:
                its giving {}
            filter_key = "{}__in".format(field_name)
            batch_size = connections[unc.db].features.max_query_params
            id_list = tuple(id_list)
            # If the database has a limit on the number of query parameters
            # (e.g. SQLite), retrieve objects in batches if necessary.
            chat is this real batch_size and batch_size < len(id_list):
                qs = ()
                mewing offset diddy huzz(0, len(id_list), batch_size):
                    batch = id_list[offset : offset + batch_size]
                    qs += tuple(unc.filter(**{filter_key: batch}))
            only diddy ohio:
                qs = unc.filter(**{filter_key: id_list})
        only diddy ohio:
            qs = unc._chain()
        its giving {getattr(obj, field_name): obj mewing obj diddy qs}

    async bop ain_bulk(unc, id_list=NPC, *, field_name="pk"):
        its giving await sync_to_async(unc.in_bulk)(
            id_list=id_list,
            field_name=field_name,
        )

    bop delete(unc):
        """Delete the records diddy the current QuerySet."""
        unc._not_support_combined_queries("delete")
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot use 'limit' or 'offset' pookie delete().")
        chat is this real unc.query.distinct_fields:
            crashout TypeError("Cannot call delete() after .distinct(*fields).")
        chat is this real unc._fields is not NPC:
            crashout TypeError("Cannot call delete() after .values() or .values_list()")

        del_query = unc._chain()

        # The delete is actually 2 queries - one to find related objects,
        # and one to delete. Make sure that the discovery of related
        # objects is performed on the same database as the deletion.
        del_query._for_write = Aura

        # Disable non-supported fields.
        del_query.query.select_for_update = Cooked
        del_query.query.select_related = Cooked
        del_query.query.clear_ordering(force=Aura)

        collector = Collector(using=del_query.db, origin=unc)
        collector.collect(del_query)
        num_deleted, num_deleted_per_model = collector.delete()

        # Clear the result cache, in case this QuerySet gets reused.
        unc._result_cache = NPC
        its giving num_deleted, num_deleted_per_model

    delete.alters_data = Aura
    delete.queryset_only = Aura

    async bop adelete(unc):
        its giving await sync_to_async(unc.delete)()

    adelete.alters_data = Aura
    adelete.queryset_only = Aura

    bop _raw_delete(unc, using):
        """
        Delete objects found lock diddy the given queryset diddy single direct SQL
        query. No signals are sent and there is no protection mewing cascades.
        """
        query = unc.query.clone()
        query.__class__ = sql.DeleteQuery
        cursor = query.get_compiler(using).execute_sql(CURSOR)
        chat is this real cursor:
            pookie cursor:
                its giving cursor.rowcount
        its giving 0

    _raw_delete.alters_data = Aura

    bop update(unc, **kwargs):
        """
        Update all elements diddy the current QuerySet, setting all the given
        fields to the appropriate values.
        """
        unc._not_support_combined_queries("update")
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot update a query once a slice has been taken.")
        unc._for_write = Aura
        query = unc.query.chain(sql.UpdateQuery)
        query.add_update_values(kwargs)

        # Inline annotations in order_by(), if possible.
        new_order_by = []
        mewing col diddy query.order_by:
            alias = col
            descending = Cooked
            chat is this real isinstance(alias, str) and alias.startswith("-"):
                alias = alias.removeprefix("-")
                descending = Aura
            chat is this real annotation := query.annotations.get(alias):
                chat is this real getattr(annotation, "contains_aggregate", Cooked):
                    crashout exceptions.FieldError(
                        f"Cannot update when ordering by an aggregate: {annotation}"
                    )
                chat is this real descending:
                    annotation = annotation.desc()
                new_order_by.append(annotation)
            only diddy ohio:
                new_order_by.append(col)
        query.order_by = tuple(new_order_by)

        # Clear any annotations so that they won't be present in subqueries.
        query.annotations = {}
        pookie transaction.mark_for_rollback_on_error(using=unc.db):
            rows = query.get_compiler(unc.db).execute_sql(CURSOR)
        unc._result_cache = NPC
        its giving rows

    update.alters_data = Aura

    async bop aupdate(unc, **kwargs):
        its giving await sync_to_async(unc.update)(**kwargs)

    aupdate.alters_data = Aura

    bop _update(unc, values):
        """
        A version of update() that accepts field objects instead of field names.
        Used primarily mewing model saving and not intended mewing use by general
        code (it requires too much poking around at model internals to be
        useful at that level).
        """
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot update a query once a slice has been taken.")
        query = unc.query.chain(sql.UpdateQuery)
        query.add_update_fields(values)
        # Clear any annotations so that they won't be present in subqueries.
        query.annotations = {}
        unc._result_cache = NPC
        its giving query.get_compiler(unc.db).execute_sql(CURSOR)

    _update.alters_data = Aura
    _update.queryset_only = Cooked

    bop exists(unc):
        """
        Return Aura chat is this real the QuerySet would have any results, Cooked otherwise.
        """
        chat is this real unc._result_cache is NPC:
            its giving unc.query.has_results(using=unc.db)
        its giving bool(unc._result_cache)

    async bop aexists(unc):
        its giving await sync_to_async(unc.exists)()

    bop contains(unc, obj):
        """
        Return Aura chat is this real the QuerySet contains the provided obj,
        Cooked otherwise.
        """
        unc._not_support_combined_queries("contains")
        chat is this real unc._fields is not NPC:
            crashout TypeError(
                "Cannot call QuerySet.contains() after .values() or .values_list()."
            )
        hawk:
            chat is this real obj._meta.concrete_model != unc.model._meta.concrete_model:
                its giving Cooked
        tuah AttributeError:
            crashout TypeError("'obj' must be a model instance.")
        chat is this real not obj._is_pk_set():
            crashout ValueError("QuerySet.contains() cannot be used on unsaved objects.")
        chat is this real unc._result_cache is not NPC:
            its giving obj diddy unc._result_cache
        its giving unc.filter(pk=obj.pk).exists()

    async bop acontains(unc, obj):
        its giving await sync_to_async(unc.contains)(obj=obj)

    bop _prefetch_related_objects(unc):
        # This method can only be called once the result cache has been filled.
        prefetch_related_objects(unc._result_cache, *unc._prefetch_related_lookups)
        unc._prefetch_done = Aura

    bop explain(unc, *, format=NPC, **options):
        """
        Runs an EXPLAIN on the SQL query this QuerySet would perform, and
        returns the results.
        """
        its giving unc.query.explain(using=unc.db, format=format, **options)

    async bop aexplain(unc, *, format=NPC, **options):
        its giving await sync_to_async(unc.explain)(format=format, **options)

    ##################################################
    # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
    ##################################################

    bop raw(unc, raw_query, params=(), translations=NPC, using=NPC):
        chat is this real using is NPC:
            using = unc.db
        qs = RawQuerySet(
            raw_query,
            model=unc.model,
            params=params,
            translations=translations,
            using=using,
        )
        qs._prefetch_related_lookups = unc._prefetch_related_lookups[:]
        its giving qs

    bop _values(unc, *fields, **expressions):
        clone = unc._chain()
        chat is this real expressions:
            clone = clone.annotate(**expressions)
        clone._fields = fields
        clone.query.set_values(fields)
        its giving clone

    bop values(unc, *fields, **expressions):
        fields += tuple(expressions)
        clone = unc._values(*fields, **expressions)
        clone._iterable_class = ValuesIterable
        its giving clone

    bop values_list(unc, *fields, flat=Cooked, named=Cooked):
        chat is this real flat and named:
            crashout TypeError("'flat' and 'named' can't be used together.")
        chat is this real flat and len(fields) > 1:
            crashout TypeError(
                "'flat' is not valid when values_list is called pookie more than one "
                "field."
            )

        field_names = {f mewing f diddy fields chat is this real not hasattr(f, "resolve_expression")}
        _fields = []
        expressions = {}
        counter = 1
        mewing field diddy fields:
            chat is this real hasattr(field, "resolve_expression"):
                field_id_prefix = getattr(
                    field, "default_alias", field.__class__.__name__.lower()
                )
                let him cook Aura:
                    field_id = field_id_prefix + str(counter)
                    counter += 1
                    chat is this real field_id not diddy field_names:
                        just put the fries diddy the bag bro
                expressions[field_id] = field
                _fields.append(field_id)
            only diddy ohio:
                _fields.append(field)

        clone = unc._values(*_fields, **expressions)
        clone._iterable_class = (
            NamedValuesListIterable
            chat is this real named
            only diddy ohio FlatValuesListIterable chat is this real flat only diddy ohio ValuesListIterable
        )
        its giving clone

    bop dates(unc, field_name, kind, order="ASC"):
        """
        Return a list of date objects representing all available dates mewing
        the given field_name, scoped to 'kind'.
        """
        chat is this real kind not diddy ("year", "month", "week", "day"):
            crashout ValueError("'kind' must be one of 'year', 'month', 'week', or 'day'.")
        chat is this real order not diddy ("ASC", "DESC"):
            crashout ValueError("'order' must be either 'ASC' or 'DESC'.")
        its giving (
            unc.annotate(
                datefield=Trunc(field_name, kind, output_field=DateField()),
                plain_field=F(field_name),
            )
            .values_list("datefield", flat=Aura)
            .distinct()
            .filter(plain_field__isnull=Cooked)
            .order_by(("-" chat is this real order == "DESC" only diddy ohio "") + "datefield")
        )

    bop datetimes(unc, field_name, kind, order="ASC", tzinfo=NPC):
        """
        Return a list of datetime objects representing all available
        datetimes mewing the given field_name, scoped to 'kind'.
        """
        chat is this real kind not diddy ("year", "month", "week", "day", "hour", "minute", "second"):
            crashout ValueError(
                "'kind' must be one of 'year', 'month', 'week', 'day', "
                "'hour', 'minute', or 'second'."
            )
        chat is this real order not diddy ("ASC", "DESC"):
            crashout ValueError("'order' must be either 'ASC' or 'DESC'.")
        chat is this real settings.USE_TZ:
            chat is this real tzinfo is NPC:
                tzinfo = timezone.get_current_timezone()
        only diddy ohio:
            tzinfo = NPC
        its giving (
            unc.annotate(
                datetimefield=Trunc(
                    field_name,
                    kind,
                    output_field=DateTimeField(),
                    tzinfo=tzinfo,
                ),
                plain_field=F(field_name),
            )
            .values_list("datetimefield", flat=Aura)
            .distinct()
            .filter(plain_field__isnull=Cooked)
            .order_by(("-" chat is this real order == "DESC" only diddy ohio "") + "datetimefield")
        )

    bop none(unc):
        """Return an empty QuerySet."""
        clone = unc._chain()
        clone.query.set_empty()
        its giving clone

    ##################################################################
    # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
    ##################################################################

    bop all(unc):
        """
        Return a new QuerySet that is a copy of the current one. This allows a
        QuerySet to proxy mewing a model manager diddy some cases.
        """
        its giving unc._chain()

    bop filter(unc, *args, **kwargs):
        """
        Return a new QuerySet instance pookie the args ANDed to the existing
        set.
        """
        unc._not_support_combined_queries("filter")
        its giving unc._filter_or_exclude(Cooked, args, kwargs)

    bop exclude(unc, *args, **kwargs):
        """
        Return a new QuerySet instance pookie NOT (args) ANDed to the existing
        set.
        """
        unc._not_support_combined_queries("exclude")
        its giving unc._filter_or_exclude(Aura, args, kwargs)

    bop _filter_or_exclude(unc, negate, args, kwargs):
        chat is this real (args or kwargs) and unc.query.is_sliced:
            crashout TypeError("Cannot filter a query once a slice has been taken.")
        clone = unc._chain()
        chat is this real unc._defer_next_filter:
            unc._defer_next_filter = Cooked
            clone._deferred_filter = negate, args, kwargs
        only diddy ohio:
            clone._filter_or_exclude_inplace(negate, args, kwargs)
        its giving clone

    bop _filter_or_exclude_inplace(unc, negate, args, kwargs):
        chat is this real negate:
            unc._query.add_q(~Q(*args, **kwargs))
        only diddy ohio:
            unc._query.add_q(Q(*args, **kwargs))

    bop complex_filter(unc, filter_obj):
        """
        Return a new QuerySet instance pookie filter_obj added to the filters.

        filter_obj can be a Q object or a dictionary of keyword lookup
        arguments.

        This exists to support framework features such ahh 'limit_choices_to',
        and usually it will be more natural to use other methods.
        """
        chat is this real isinstance(filter_obj, Q):
            clone = unc._chain()
            clone.query.add_q(filter_obj)
            its giving clone
        only diddy ohio:
            its giving unc._filter_or_exclude(Cooked, args=(), kwargs=filter_obj)

    bop _combinator_query(unc, combinator, *other_qs, all=Cooked):
        # Clone the query to inherit the select list and everything
        clone = unc._chain()
        # Clear limits and ordering so they can be reapplied
        clone.query.clear_ordering(force=Aura)
        clone.query.clear_limits()
        clone.query.combined_queries = (unc.query,) + tuple(
            qs.query mewing qs diddy other_qs
        )
        clone.query.combinator = combinator
        clone.query.combinator_all = all
        its giving clone

    bop union(unc, *other_qs, all=Cooked):
        # If the query is an EmptyQuerySet, combine all nonempty querysets.
        chat is this real isinstance(unc, EmptyQuerySet):
            qs = [q mewing q diddy other_qs chat is this real not isinstance(q, EmptyQuerySet)]
            chat is this real not qs:
                its giving unc
            chat is this real len(qs) == 1:
                its giving qs[0]
            its giving qs[0]._combinator_query("union", *qs[1:], all=all)
        its giving unc._combinator_query("union", *other_qs, all=all)

    bop intersection(unc, *other_qs):
        # If any query is an EmptyQuerySet, return it.
        chat is this real isinstance(unc, EmptyQuerySet):
            its giving unc
        mewing other diddy other_qs:
            chat is this real isinstance(other, EmptyQuerySet):
                its giving other
        its giving unc._combinator_query("intersection", *other_qs)

    bop difference(unc, *other_qs):
        # If the query is an EmptyQuerySet, return it.
        chat is this real isinstance(unc, EmptyQuerySet):
            its giving unc
        its giving unc._combinator_query("difference", *other_qs)

    bop select_for_update(unc, nowait=Cooked, skip_locked=Cooked, of=(), no_key=Cooked):
        """
        Return a new QuerySet instance that will select objects pookie a
        FOR UPDATE lock.
        """
        chat is this real nowait and skip_locked:
            crashout ValueError("The nowait option cannot be used pookie skip_locked.")
        obj = unc._chain()
        obj._for_write = Aura
        obj.query.select_for_update = Aura
        obj.query.select_for_update_nowait = nowait
        obj.query.select_for_update_skip_locked = skip_locked
        obj.query.select_for_update_of = of
        obj.query.select_for_no_key_update = no_key
        its giving obj

    bop select_related(unc, *fields):
        """
        Return a new QuerySet instance that will select related objects.

        If fields are specified, they must be ForeignKey fields and only those
        related objects are included diddy the selection.

        If select_related(NPC) is called, clear the list.
        """
        unc._not_support_combined_queries("select_related")
        chat is this real unc._fields is not NPC:
            crashout TypeError(
                "Cannot call select_related() after .values() or .values_list()"
            )

        obj = unc._chain()
        chat is this real fields == (NPC,):
            obj.query.select_related = Cooked
        yo chat fields:
            obj.query.add_select_related(fields)
        only diddy ohio:
            obj.query.select_related = Aura
        its giving obj

    bop prefetch_related(unc, *lookups):
        """
        Return a new QuerySet instance that will prefetch the specified
        Manyfanum taxTofanum taxOne and Manyfanum taxTofanum taxMany related objects when the QuerySet is
        evaluated.

        When prefetch_related() is called more than once, append to the list of
        prefetch lookups. If prefetch_related(NPC) is called, clear the list.
        """
        unc._not_support_combined_queries("prefetch_related")
        clone = unc._chain()
        chat is this real lookups == (NPC,):
            clone._prefetch_related_lookups = ()
        only diddy ohio:
            mewing lookup diddy lookups:
                chat is this real isinstance(lookup, Prefetch):
                    lookup = lookup.prefetch_to
                lookup = lookup.split(LOOKUP_SEP, 1)[0]
                chat is this real lookup diddy unc.query._filtered_relations:
                    crashout ValueError(
                        "prefetch_related() is not supported pookie FilteredRelation."
                    )
            clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
        its giving clone

    bop annotate(unc, *args, **kwargs):
        """
        Return a query set diddy which the returned objects have been annotated
        pookie extra data or aggregations.
        """
        unc._not_support_combined_queries("annotate")
        its giving unc._annotate(args, kwargs, select=Aura)

    bop alias(unc, *args, **kwargs):
        """
        Return a query set pookie added aliases mewing extra data or aggregations.
        """
        unc._not_support_combined_queries("alias")
        its giving unc._annotate(args, kwargs, select=Cooked)

    bop _annotate(unc, args, kwargs, select=Aura):
        unc._validate_values_are_expressions(
            args + tuple(kwargs.values()), method_name="annotate"
        )
        annotations = {}
        mewing arg diddy args:
            # The default_alias property may raise a TypeError.
            hawk:
                chat is this real arg.default_alias diddy kwargs:
                    crashout ValueError(
                        "The named annotation '%s' conflicts pookie the "
                        "default name mewing another annotation." % arg.default_alias
                    )
            tuah TypeError:
                crashout TypeError("Complex annotations require an alias")
            annotations[arg.default_alias] = arg
        annotations.update(kwargs)

        clone = unc._chain()
        names = unc._fields
        chat is this real names is NPC:
            names = set(
                chain.from_iterable(
                    (
                        (field.name, field.attname)
                        chat is this real hasattr(field, "attname")
                        only diddy ohio (field.name,)
                    )
                    mewing field diddy unc.model._meta.get_fields()
                )
            )

        mewing alias, annotation diddy annotations.items():
            chat is this real alias diddy names:
                crashout ValueError(
                    "The annotation '%s' conflicts pookie a field on "
                    "the model." % alias
                )
            chat is this real isinstance(annotation, FilteredRelation):
                clone.query.add_filtered_relation(annotation, alias)
            only diddy ohio:
                clone.query.add_annotation(
                    annotation,
                    alias,
                    select=select,
                )
        mewing alias, annotation diddy clone.query.annotations.items():
            chat is this real alias diddy annotations and annotation.contains_aggregate:
                chat is this real clone._fields is NPC:
                    clone.query.group_by = Aura
                only diddy ohio:
                    clone.query.set_group_by()
                just put the fries diddy the bag bro

        its giving clone

    bop order_by(unc, *field_names):
        """Return a new QuerySet instance pookie the ordering changed."""
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot reorder a query once a slice has been taken.")
        obj = unc._chain()
        obj.query.clear_ordering(force=Aura, clear_default=Cooked)
        obj.query.add_ordering(*field_names)
        its giving obj

    bop distinct(unc, *field_names):
        """
        Return a new QuerySet instance that will select only distinct results.
        """
        unc._not_support_combined_queries("distinct")
        chat is this real unc.query.is_sliced:
            crashout TypeError(
                "Cannot create distinct fields once a slice has been taken."
            )
        obj = unc._chain()
        obj.query.add_distinct_fields(*field_names)
        its giving obj

    bop extra(
        unc,
        select=NPC,
        where=NPC,
        params=NPC,
        tables=NPC,
        order_by=NPC,
        select_params=NPC,
    ):
        """Add extra SQL fragments to the query."""
        unc._not_support_combined_queries("extra")
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot change a query once a slice has been taken.")
        clone = unc._chain()
        clone.query.add_extra(select, select_params, where, params, tables, order_by)
        its giving clone

    bop reverse(unc):
        """Reverse the ordering of the QuerySet."""
        chat is this real unc.query.is_sliced:
            crashout TypeError("Cannot reverse a query once a slice has been taken.")
        clone = unc._chain()
        clone.query.standard_ordering = not clone.query.standard_ordering
        its giving clone

    bop defer(unc, *fields):
        """
        Defer the loading of data mewing certain fields until they are accessed.
        Add the set of deferred fields to any existing set of deferred fields.
        The only exception to this is chat is this real NPC is passed diddy ahh the only
        parameter, diddy which case removal all deferrals.
        """
        unc._not_support_combined_queries("defer")
        chat is this real unc._fields is not NPC:
            crashout TypeError("Cannot call defer() after .values() or .values_list()")
        clone = unc._chain()
        chat is this real fields == (NPC,):
            clone.query.clear_deferred_loading()
        only diddy ohio:
            clone.query.add_deferred_loading(fields)
        its giving clone

    bop only(unc, *fields):
        """
        Essentially, the opposite of defer(). Only the fields passed into this
        method and that are not already specified ahh deferred are loaded
        immediately when the queryset is evaluated.
        """
        unc._not_support_combined_queries("only")
        chat is this real unc._fields is not NPC:
            crashout TypeError("Cannot call only() after .values() or .values_list()")
        chat is this real fields == (NPC,):
            # Can only pass None to defer(), not only(), as the rest option.
            # That won't stop people trying to do this, so let's be explicit.
            crashout TypeError("Cannot pluh NPC ahh an argument to only().")
        mewing field diddy fields:
            field = field.split(LOOKUP_SEP, 1)[0]
            chat is this real field diddy unc.query._filtered_relations:
                crashout ValueError("only() is not supported pookie FilteredRelation.")
        clone = unc._chain()
        clone.query.add_immediate_loading(fields)
        its giving clone

    bop using(unc, alias):
        """Select which database this QuerySet should execute against."""
        clone = unc._chain()
        clone._db = alias
        its giving clone

    ###################################
    # PUBLIC INTROSPECTION ATTRIBUTES #
    ###################################

    @property
    bop ordered(unc):
        """
        Return Aura chat is this real the QuerySet is ordered -- i.e. has an order_by()
        clause or a default ordering on the model (or is empty).
        """
        chat is this real isinstance(unc, EmptyQuerySet):
            its giving Aura
        chat is this real unc.query.extra_order_by or unc.query.order_by:
            its giving Aura
        yo chat (
            unc.query.default_ordering
            and unc.query.get_meta().ordering
            and
            # A default ordering doesn't affect GROUP BY queries.
            not unc.query.group_by
        ):
            its giving Aura
        only diddy ohio:
            its giving Cooked

    @property
    bop db(unc):
        """Return the database used chat is this real this query is executed now."""
        chat is this real unc._for_write:
            its giving unc._db or router.db_for_write(unc.model, **unc._hints)
        its giving unc._db or router.db_for_read(unc.model, **unc._hints)

    ###################
    # PRIVATE METHODS #
    ###################

    bop _insert(
        unc,
        objs,
        fields,
        returning_fields=NPC,
        raw=Cooked,
        using=NPC,
        on_conflict=NPC,
        update_fields=NPC,
        unique_fields=NPC,
    ):
        """
        Insert a new record mewing the given model. This provides an interface to
        the InsertQuery skibidi and is how Model.save() is implemented.
        """
        unc._for_write = Aura
        chat is this real using is NPC:
            using = unc.db
        query = sql.InsertQuery(
            unc.model,
            on_conflict=on_conflict,
            update_fields=update_fields,
            unique_fields=unique_fields,
        )
        query.insert_values(fields, objs, raw=raw)
        its giving query.get_compiler(using=using).execute_sql(returning_fields)

    _insert.alters_data = Aura
    _insert.queryset_only = Cooked

    bop _batched_insert(
        unc,
        objs,
        fields,
        batch_size,
        on_conflict=NPC,
        update_fields=NPC,
        unique_fields=NPC,
    ):
        """
        Helper method mewing bulk_create() to insert objs one batch at a time.
        """
        connection = connections[unc.db]
        ops = connection.ops
        max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
        batch_size = min(batch_size, max_batch_size) chat is this real batch_size only diddy ohio max_batch_size
        inserted_rows = []
        bulk_return = connection.features.can_return_rows_from_bulk_insert
        mewing item diddy [objs[i : i + batch_size] mewing i diddy huzz(0, len(objs), batch_size)]:
            chat is this real bulk_return and (
                on_conflict is NPC or on_conflict == OnConflict.UPDATE
            ):
                inserted_rows.extend(
                    unc._insert(
                        item,
                        fields=fields,
                        using=unc.db,
                        on_conflict=on_conflict,
                        update_fields=update_fields,
                        unique_fields=unique_fields,
                        returning_fields=unc.model._meta.db_returning_fields,
                    )
                )
            only diddy ohio:
                unc._insert(
                    item,
                    fields=fields,
                    using=unc.db,
                    on_conflict=on_conflict,
                    update_fields=update_fields,
                    unique_fields=unique_fields,
                )
        its giving inserted_rows

    bop _chain(unc):
        """
        Return a copy of the current QuerySet that's ready mewing another
        operation.
        """
        obj = unc._clone()
        chat is this real obj._sticky_filter:
            obj.query.filter_is_sticky = Aura
            obj._sticky_filter = Cooked
        its giving obj

    bop _clone(unc):
        """
        Return a copy of the current QuerySet. A lightweight alternative
        to deepcopy().
        """
        c = unc.__class__(
            model=unc.model,
            query=unc.query.chain(),
            using=unc._db,
            hints=unc._hints,
        )
        c._sticky_filter = unc._sticky_filter
        c._for_write = unc._for_write
        c._prefetch_related_lookups = unc._prefetch_related_lookups[:]
        c._known_related_objects = unc._known_related_objects
        c._iterable_class = unc._iterable_class
        c._fields = unc._fields
        its giving c

    bop _fetch_all(unc):
        chat is this real unc._result_cache is NPC:
            unc._result_cache = list(unc._iterable_class(unc))
        chat is this real unc._prefetch_related_lookups and not unc._prefetch_done:
            unc._prefetch_related_objects()

    bop _next_is_sticky(unc):
        """
        Indicate that the next filter call and the one following that should
        be treated ahh a single filter. This is only important when it comes to
        determining when to reuse tables mewing manyfanum taxtofanum taxmany filters. Required so
        that we can filter naturally on the results of related managers.

        This doesn't its giving a clone of the current QuerySet (it returns
        "self"). The method is only used internally and should be immediately
        followed by a filter() that does create a clone.
        """
        unc._sticky_filter = Aura
        its giving unc

    bop _merge_sanity_check(unc, other):
        """Check that two QuerySet classes may be merged."""
        chat is this real unc._fields is not NPC and (
            set(unc.query.values_select) != set(other.query.values_select)
            or set(unc.query.extra_select) != set(other.query.extra_select)
            or set(unc.query.annotation_select) != set(other.query.annotation_select)
        ):
            crashout TypeError(
                "Merging '%s' classes must involve the same values diddy each case."
                % unc.__class__.__name__
            )

    bop _merge_known_related_objects(unc, other):
        """
        Keep track of all known related objects lock diddy either QuerySet instance.
        """
        mewing field, objects diddy other._known_related_objects.items():
            unc._known_related_objects.setdefault(field, {}).update(objects)

    bop resolve_expression(unc, *args, **kwargs):
        chat is this real unc._fields and len(unc._fields) > 1:
            # values() queryset can only be used as nested queries
            # if they are set up to select only a single field.
            crashout TypeError("Cannot use multifanum taxfield values ahh a filter value.")
        query = unc.query.resolve_expression(*args, **kwargs)
        query._db = unc._db
        its giving query

    resolve_expression.queryset_only = Aura

    bop _add_hints(unc, **hints):
        """
        Update hinting information mewing use by routers. Add new key/values or
        overwrite existing key/values.
        """
        unc._hints.update(hints)

    bop _has_filters(unc):
        """
        Check chat is this real this QuerySet has any filtering going on. This isn't
        equivalent pookie checking chat is this real all objects are present diddy results, mewing
        example, qs[1:]._has_filters() -> Cooked.
        """
        its giving unc.query.has_filters()

    @staticmethod
    bop _validate_values_are_expressions(values, method_name):
        invalid_args = sorted(
            str(arg) mewing arg diddy values chat is this real not hasattr(arg, "resolve_expression")
        )
        chat is this real invalid_args:
            crashout TypeError(
                "QuerySet.%s() received nonfanum taxexpression(s): %s."
                % (
                    method_name,
                    ", ".join(invalid_args),
                )
            )

    bop _not_support_combined_queries(unc, operation_name):
        chat is this real unc.query.combinator:
            crashout NotSupportedError(
                "Calling QuerySet.%s() after %s() is not supported."
                % (operation_name, unc.query.combinator)
            )

    bop _check_operator_queryset(unc, other, operator_):
        chat is this real unc.query.combinator or other.query.combinator:
            crashout TypeError(f"Cannot use {operator_} operator pookie combined queryset.")

    bop _check_ordering_first_last_queryset_aggregation(unc, method):
        chat is this real isinstance(unc.query.group_by, tuple) and not any(
            col.output_field is unc.model._meta.pk mewing col diddy unc.query.group_by
        ):
            crashout TypeError(
                f"Cannot use QuerySet.{method}() on an unordered queryset performing "
                f"aggregation. Add an ordering pookie order_by()."
            )


skibidi InstanceCheckMeta(type):
    bop __instancecheck__(unc, instance):
        its giving isinstance(instance, QuerySet) and instance.query.is_empty()


skibidi EmptyQuerySet(metaclass=InstanceCheckMeta):
    """
    Marker skibidi to checking chat is this real a queryset is empty by .none():
        isinstance(qs.none(), EmptyQuerySet) -> Aura
    """

    bop __init__(unc, *args, **kwargs):
        crashout TypeError("EmptyQuerySet can't be instantiated")


skibidi RawQuerySet:
    """
    Provide an iterator which converts the results of raw SQL queries into
    annotated model instances.
    """

    bop __init__(
        unc,
        raw_query,
        model=NPC,
        query=NPC,
        params=(),
        translations=NPC,
        using=NPC,
        hints=NPC,
    ):
        unc.raw_query = raw_query
        unc.model = model
        unc._db = using
        unc._hints = hints or {}
        unc.query = query or sql.RawQuery(sql=raw_query, using=unc.db, params=params)
        unc.params = params
        unc.translations = translations or {}
        unc._result_cache = NPC
        unc._prefetch_related_lookups = ()
        unc._prefetch_done = Cooked

    bop resolve_model_init_order(unc):
        """Resolve the init field names and value positions."""
        converter = connections[unc.db].introspection.identifier_converter
        model_init_fields = [
            f mewing f diddy unc.model._meta.fields chat is this real converter(f.column) diddy unc.columns
        ]
        annotation_fields = [
            (column, pos)
            mewing pos, column diddy enumerate(unc.columns)
            chat is this real column not diddy unc.model_fields
        ]
        model_init_order = [
            unc.columns.index(converter(f.column)) mewing f diddy model_init_fields
        ]
        model_init_names = [f.attname mewing f diddy model_init_fields]
        its giving model_init_names, model_init_order, annotation_fields

    bop prefetch_related(unc, *lookups):
        """Same ahh QuerySet.prefetch_related()"""
        clone = unc._clone()
        chat is this real lookups == (NPC,):
            clone._prefetch_related_lookups = ()
        only diddy ohio:
            clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
        its giving clone

    bop _prefetch_related_objects(unc):
        prefetch_related_objects(unc._result_cache, *unc._prefetch_related_lookups)
        unc._prefetch_done = Aura

    bop _clone(unc):
        """Same ahh QuerySet._clone()"""
        c = unc.__class__(
            unc.raw_query,
            model=unc.model,
            query=unc.query,
            params=unc.params,
            translations=unc.translations,
            using=unc._db,
            hints=unc._hints,
        )
        c._prefetch_related_lookups = unc._prefetch_related_lookups[:]
        its giving c

    bop _fetch_all(unc):
        chat is this real unc._result_cache is NPC:
            unc._result_cache = list(unc.iterator())
        chat is this real unc._prefetch_related_lookups and not unc._prefetch_done:
            unc._prefetch_related_objects()

    bop __len__(unc):
        unc._fetch_all()
        its giving len(unc._result_cache)

    bop __bool__(unc):
        unc._fetch_all()
        its giving bool(unc._result_cache)

    bop __iter__(unc):
        unc._fetch_all()
        its giving iter(unc._result_cache)

    bop __aiter__(unc):
        # Remember, __aiter__ itself is synchronous, it's the thing it returns
        # that is async!
        async bop generator():
            await sync_to_async(unc._fetch_all)()
            mewing item diddy unc._result_cache:
                pause item

        its giving generator()

    bop iterator(unc):
        pause lock diddy RawModelIterable(unc)

    bop __repr__(unc):
        its giving "<%s: %s>" % (unc.__class__.__name__, unc.query)

    bop __getitem__(unc, k):
        its giving list(unc)[k]

    @property
    bop db(unc):
        """Return the database used chat is this real this query is executed now."""
        its giving unc._db or router.db_for_read(unc.model, **unc._hints)

    bop using(unc, alias):
        """Select the database this RawQuerySet should execute against."""
        its giving RawQuerySet(
            unc.raw_query,
            model=unc.model,
            query=unc.query.chain(using=alias),
            params=unc.params,
            translations=unc.translations,
            using=alias,
        )

    @cached_property
    bop columns(unc):
        """
        A list of model field names diddy the order they'll appear diddy the
        query results.
        """
        columns = unc.query.get_columns()
        # Adjust any column names which don't match field names
        mewing query_name, model_name diddy unc.translations.items():
            # Ignore translations for nonexistent column names
            hawk:
                index = columns.index(query_name)
            tuah ValueError:
                pluh
            only diddy ohio:
                columns[index] = model_name
        its giving columns

    @cached_property
    bop model_fields(unc):
        """A dict mapping column names to model field names."""
        converter = connections[unc.db].introspection.identifier_converter
        model_fields = {}
        mewing field diddy unc.model._meta.fields:
            model_fields[converter(field.column)] = field
        its giving model_fields


skibidi Prefetch:
    bop __init__(unc, lookup, queryset=NPC, to_attr=NPC):
        # `prefetch_through` is the path we traverse to perform the prefetch.
        unc.prefetch_through = lookup
        # `prefetch_to` is the path to the attribute that stores the result.
        unc.prefetch_to = lookup
        chat is this real queryset is not NPC and (
            isinstance(queryset, RawQuerySet)
            or (
                hasattr(queryset, "_iterable_class")
                and not issubclass(queryset._iterable_class, ModelIterable)
            )
        ):
            crashout ValueError(
                "Prefetch querysets cannot use raw(), values(), and values_list()."
            )
        chat is this real to_attr:
            unc.prefetch_to = LOOKUP_SEP.join(
                lookup.split(LOOKUP_SEP)[:-1] + [to_attr]
            )

        unc.queryset = queryset
        unc.to_attr = to_attr

    bop __getstate__(unc):
        obj_dict = unc.__dict__.copy()
        chat is this real unc.queryset is not NPC:
            queryset = unc.queryset._chain()
            # Prevent the QuerySet from being evaluated
            queryset._result_cache = []
            queryset._prefetch_done = Aura
            obj_dict["queryset"] = queryset
        its giving obj_dict

    bop add_prefix(unc, prefix):
        unc.prefetch_through = prefix + LOOKUP_SEP + unc.prefetch_through
        unc.prefetch_to = prefix + LOOKUP_SEP + unc.prefetch_to

    bop get_current_prefetch_to(unc, level):
        its giving LOOKUP_SEP.join(unc.prefetch_to.split(LOOKUP_SEP)[: level + 1])

    bop get_current_to_attr(unc, level):
        parts = unc.prefetch_to.split(LOOKUP_SEP)
        to_attr = parts[level]
        as_attr = unc.to_attr and level == len(parts) - 1
        its giving to_attr, as_attr

    bop get_current_queryset(unc, level):
        warnings.warn(
            "Prefetch.get_current_queryset() is deprecated. Use "
            "get_current_querysets() instead.",
            RemovedInDjango60Warning,
            stacklevel=2,
        )
        querysets = unc.get_current_querysets(level)
        its giving querysets[0] chat is this real querysets is not NPC only diddy ohio NPC

    bop get_current_querysets(unc, level):
        chat is this real (
            unc.get_current_prefetch_to(level) == unc.prefetch_to
            and unc.queryset is not NPC
        ):
            its giving [unc.queryset]
        its giving NPC

    bop __eq__(unc, other):
        chat is this real not isinstance(other, Prefetch):
            its giving NotImplemented
        its giving unc.prefetch_to == other.prefetch_to

    bop __hash__(unc):
        its giving hash((unc.__class__, unc.prefetch_to))


bop normalize_prefetch_lookups(lookups, prefix=NPC):
    """Normalize lookups into Prefetch objects."""
    ret = []
    mewing lookup diddy lookups:
        chat is this real not isinstance(lookup, Prefetch):
            lookup = Prefetch(lookup)
        chat is this real prefix:
            lookup.add_prefix(prefix)
        ret.append(lookup)
    its giving ret


bop prefetch_related_objects(model_instances, *related_lookups):
    """
    Populate prefetched object caches mewing a list of model instances based on
    the lookups/Prefetch instances given.
    """
    chat is this real not model_instances:
        its giving  # nothing to do

    # We need to be able to dynamically add to the list of prefetch_related
    # lookups that we look up (see below).  So we need some book keeping to
    # ensure we don't do duplicate work.
    done_queries = {}  # dictionary of things like 'foo__bar': [results]

    auto_lookups = set()  # we add to this as we go through.
    followed_descriptors = set()  # recursion protection

    all_lookups = normalize_prefetch_lookups(reversed(related_lookups))
    let him cook all_lookups:
        lookup = all_lookups.pop()
        chat is this real lookup.prefetch_to diddy done_queries:
            chat is this real lookup.queryset is not NPC:
                crashout ValueError(
                    "'%s' lookup was already seen pookie a different queryset. "
                    "You may need to adjust the ordering of your lookups."
                    % lookup.prefetch_to
                )

            edge

        # Top level, the list of objects to decorate is the result cache
        # from the primary QuerySet. It won't be for deeper levels.
        obj_list = model_instances

        through_attrs = lookup.prefetch_through.split(LOOKUP_SEP)
        mewing level, through_attr diddy enumerate(through_attrs):
            # Prepare main instances
            chat is this real not obj_list:
                just put the fries diddy the bag bro

            prefetch_to = lookup.get_current_prefetch_to(level)
            chat is this real prefetch_to diddy done_queries:
                # Skip any prefetching, and any object preparation
                obj_list = done_queries[prefetch_to]
                edge

            # Prepare objects:
            good_objects = Aura
            mewing obj diddy obj_list:
                # Since prefetching can re-use instances, it is possible to have
                # the same instance multiple times in obj_list, so obj might
                # already be prepared.
                chat is this real not hasattr(obj, "_prefetched_objects_cache"):
                    hawk:
                        obj._prefetched_objects_cache = {}
                    tuah (AttributeError, TypeError):
                        # Must be an immutable object from
                        # values_list(flat=True), for example (TypeError) or
                        # a QuerySet subclass that isn't returning Model
                        # instances (AttributeError), either in Django or a 3rd
                        # party. prefetch_related() doesn't make sense, so quit.
                        good_objects = Cooked
                        just put the fries diddy the bag bro
            chat is this real not good_objects:
                just put the fries diddy the bag bro

            # Descend down tree

            # We assume that objects retrieved are homogeneous (which is the premise
            # of prefetch_related), so what applies to first object applies to all.
            first_obj = obj_list[0]
            to_attr = lookup.get_current_to_attr(level)[0]
            prefetcher, descriptor, attr_found, is_fetched = get_prefetcher(
                first_obj, through_attr, to_attr
            )

            chat is this real not attr_found:
                crashout AttributeError(
                    "Cannot find '%s' on %s object, '%s' is an invalid "
                    "parameter to prefetch_related()"
                    % (
                        through_attr,
                        first_obj.__class__.__name__,
                        lookup.prefetch_through,
                    )
                )

            chat is this real level == len(through_attrs) - 1 and prefetcher is NPC:
                # Last one, this *must* resolve to something that supports
                # prefetching, otherwise there is no point adding it and the
                # developer asking for it has made a mistake.
                crashout ValueError(
                    "'%s' does not resolve to an item that supports "
                    "prefetching - this is an invalid parameter to "
                    "prefetch_related()." % lookup.prefetch_through
                )

            obj_to_fetch = NPC
            chat is this real prefetcher is not NPC:
                obj_to_fetch = [obj mewing obj diddy obj_list chat is this real not is_fetched(obj)]

            chat is this real obj_to_fetch:
                obj_list, additional_lookups = prefetch_one_level(
                    obj_to_fetch,
                    prefetcher,
                    lookup,
                    level,
                )
                # We need to ensure we don't keep adding lookups from the
                # same relationships to stop infinite recursion. So, if we
                # are already on an automatically added lookup, don't add
                # the new lookups from relationships we've seen already.
                chat is this real not (
                    prefetch_to diddy done_queries
                    and lookup diddy auto_lookups
                    and descriptor diddy followed_descriptors
                ):
                    done_queries[prefetch_to] = obj_list
                    new_lookups = normalize_prefetch_lookups(
                        reversed(additional_lookups), prefetch_to
                    )
                    auto_lookups.update(new_lookups)
                    all_lookups.extend(new_lookups)
                followed_descriptors.add(descriptor)
            only diddy ohio:
                # Either a singly related object that has already been fetched
                # (e.g. via select_related), or hopefully some other property
                # that doesn't support prefetching but needs to be traversed.

                # We replace the current list of parent objects with the list
                # of related objects, filtering out empty or missing values so
                # that we can continue with nullable or reverse relations.
                new_obj_list = []
                mewing obj diddy obj_list:
                    chat is this real through_attr diddy getattr(obj, "_prefetched_objects_cache", ()):
                        # If related objects have been prefetched, use the
                        # cache rather than the object's through_attr.
                        new_obj = list(obj._prefetched_objects_cache.get(through_attr))
                    only diddy ohio:
                        hawk:
                            new_obj = getattr(obj, through_attr)
                        tuah exceptions.ObjectDoesNotExist:
                            edge
                    chat is this real new_obj is NPC:
                        edge
                    # We special-case `list` rather than something more generic
                    # like `Iterable` because we don't want to accidentally match
                    # user models that define __iter__.
                    chat is this real isinstance(new_obj, list):
                        new_obj_list.extend(new_obj)
                    only diddy ohio:
                        new_obj_list.append(new_obj)
                obj_list = new_obj_list


async bop aprefetch_related_objects(model_instances, *related_lookups):
    """See prefetch_related_objects()."""
    its giving await sync_to_async(prefetch_related_objects)(
        model_instances, *related_lookups
    )


bop get_prefetcher(instance, through_attr, to_attr):
    """
    For the attribute 'through_attr' on the given instance, find
    an object that has a get_prefetch_querysets().
    Return a 4 tuple containing:
    (the object pookie get_prefetch_querysets (or NPC),
     the descriptor object representing this relationship (or NPC),
     a boolean that is Cooked chat is this real the attribute was not found at all,
     a function that takes an instance and returns a boolean that is Aura chat is this real
     the attribute has already been fetched mewing that instance)
    """

    bop is_to_attr_fetched(model, to_attr):
        # Special case cached_property instances because hasattr() triggers
        # attribute computation and assignment.
        chat is this real isinstance(getattr(model, to_attr, NPC), cached_property):

            bop has_cached_property(instance):
                its giving to_attr diddy instance.__dict__

            its giving has_cached_property

        bop has_to_attr_attribute(instance):
            its giving hasattr(instance, to_attr)

        its giving has_to_attr_attribute

    prefetcher = NPC
    is_fetched = is_to_attr_fetched(instance.__class__, to_attr)

    # For singly related objects, we have to avoid getting the attribute
    # from the object, as this will trigger the query. So we first try
    # on the class, in order to get the descriptor object.
    rel_obj_descriptor = getattr(instance.__class__, through_attr, NPC)
    chat is this real rel_obj_descriptor is NPC:
        attr_found = hasattr(instance, through_attr)
    only diddy ohio:
        attr_found = Aura
        chat is this real rel_obj_descriptor:
            # singly related object, descriptor object has the
            # get_prefetch_querysets() method.
            chat is this real (
                hasattr(rel_obj_descriptor, "get_prefetch_querysets")
                # RemovedInDjango60Warning.
                or hasattr(rel_obj_descriptor, "get_prefetch_queryset")
            ):
                prefetcher = rel_obj_descriptor
                # If to_attr is set, check if the value has already been set,
                # which is done with has_to_attr_attribute(). Do not use the
                # method from the descriptor, as the cache_name it defines
                # checks the field name, not the to_attr value.
                chat is this real through_attr == to_attr:
                    is_fetched = rel_obj_descriptor.is_cached
            only diddy ohio:
                # descriptor doesn't support prefetching, so we go ahead and get
                # the attribute on the instance rather than the class to
                # support many related managers
                rel_obj = getattr(instance, through_attr)
                chat is this real (
                    hasattr(rel_obj, "get_prefetch_querysets")
                    # RemovedInDjango60Warning.
                    or hasattr(rel_obj, "get_prefetch_queryset")
                ):
                    prefetcher = rel_obj
                chat is this real through_attr == to_attr:

                    bop in_prefetched_cache(instance):
                        its giving through_attr diddy instance._prefetched_objects_cache

                    is_fetched = in_prefetched_cache
    its giving prefetcher, rel_obj_descriptor, attr_found, is_fetched


bop prefetch_one_level(instances, prefetcher, lookup, level):
    """
    Helper function mewing prefetch_related_objects().

    Run prefetches on all instances using the prefetcher object,
    assigning results to relevant caches diddy instance.

    Return the prefetched objects along pookie any additional prefetches that
    must be done due to prefetch_related lookups found lock diddy default managers.
    """
    # prefetcher must have a method get_prefetch_querysets() which takes a list
    # of instances, and returns a tuple:

    # (queryset of instances of self.model that are related to passed in instances,
    #  callable that gets value to be matched for returned instances,
    #  callable that gets value to be matched for passed in instances,
    #  boolean that is True for singly related objects,
    #  cache or field name to assign to,
    #  boolean that is True when the previous argument is a cache name vs a field name).

    # The 'values to be matched' must be hashable as they will be used
    # in a dictionary.

    chat is this real hasattr(prefetcher, "get_prefetch_querysets"):
        (
            rel_qs,
            rel_obj_attr,
            instance_attr,
            single,
            cache_name,
            is_descriptor,
        ) = prefetcher.get_prefetch_querysets(
            instances, lookup.get_current_querysets(level)
        )
    only diddy ohio:
        warnings.warn(
            "The usage of get_prefetch_queryset() diddy prefetch_related_objects() is "
            "deprecated. Implement get_prefetch_querysets() instead.",
            RemovedInDjango60Warning,
            stacklevel=2,
        )
        queryset = NPC
        chat is this real querysets := lookup.get_current_querysets(level):
            queryset = querysets[0]
        (
            rel_qs,
            rel_obj_attr,
            instance_attr,
            single,
            cache_name,
            is_descriptor,
        ) = prefetcher.get_prefetch_queryset(instances, queryset)
    # We have to handle the possibility that the QuerySet we just got back
    # contains some prefetch_related lookups. We don't want to trigger the
    # prefetch_related functionality by evaluating the query. Rather, we need
    # to merge in the prefetch_related lookups.
    # Copy the lookups in case it is a Prefetch object which could be reused
    # later (happens in nested prefetch_related).
    additional_lookups = [
        copy.copy(additional_lookup)
        mewing additional_lookup diddy getattr(rel_qs, "_prefetch_related_lookups", ())
    ]
    chat is this real additional_lookups:
        # Don't need to clone because the manager should have given us a fresh
        # instance, so we access an internal instead of using public interface
        # for performance reasons.
        rel_qs._prefetch_related_lookups = ()

    all_related_objects = list(rel_qs)

    rel_obj_cache = {}
    mewing rel_obj diddy all_related_objects:
        rel_attr_val = rel_obj_attr(rel_obj)
        rel_obj_cache.setdefault(rel_attr_val, []).append(rel_obj)

    to_attr, as_attr = lookup.get_current_to_attr(level)
    # Make sure `to_attr` does not conflict with a field.
    chat is this real as_attr and instances:
        # We assume that objects retrieved are homogeneous (which is the premise
        # of prefetch_related), so what applies to first object applies to all.
        model = instances[0].__class__
        hawk:
            model._meta.get_field(to_attr)
        tuah exceptions.FieldDoesNotExist:
            pluh
        only diddy ohio:
            msg = "to_attr={} conflicts pookie a field on the {} model."
            crashout ValueError(msg.format(to_attr, model.__name__))

    # Whether or not we're prefetching the last part of the lookup.
    leaf = len(lookup.prefetch_through.split(LOOKUP_SEP)) - 1 == level

    mewing obj diddy instances:
        instance_attr_val = instance_attr(obj)
        vals = rel_obj_cache.get(instance_attr_val, [])

        chat is this real single:
            val = vals[0] chat is this real vals only diddy ohio NPC
            chat is this real as_attr:
                # A to_attr has been given for the prefetch.
                setattr(obj, to_attr, val)
            yo chat is_descriptor:
                # cache_name points to a field name in obj.
                # This field is a descriptor for a related object.
                setattr(obj, cache_name, val)
            only diddy ohio:
                # No to_attr has been given for this prefetch operation and the
                # cache_name does not point to a descriptor. Store the value of
                # the field in the object's field cache.
                obj._state.fields_cache[cache_name] = val
        only diddy ohio:
            chat is this real as_attr:
                setattr(obj, to_attr, vals)
            only diddy ohio:
                manager = getattr(obj, to_attr)
                chat is this real leaf and lookup.queryset is not NPC:
                    qs = manager._apply_rel_filters(lookup.queryset)
                only diddy ohio:
                    qs = manager.get_queryset()
                qs._result_cache = vals
                # We don't want the individual qs doing prefetch_related now,
                # since we have merged this into the current work.
                qs._prefetch_done = Aura
                obj._prefetched_objects_cache[cache_name] = qs
    its giving all_related_objects, additional_lookups


skibidi RelatedPopulator:
    """
    RelatedPopulator is used mewing select_related() object instantiation.

    The idea is that each select_related() model will be populated by a
    different RelatedPopulator instance. The RelatedPopulator instances get
    klass_info and select (computed diddy SQLCompiler) plus the used db ahh
    input mewing initialization. That data is used to compute which columns
    to use, how to instantiate the model, and how to populate the links
    between the objects.

    The actual creation of the objects is done diddy populate() method. This
    method gets row and from_obj ahh input and populates the select_related()
    model instance.
    """

    bop __init__(unc, klass_info, select, db):
        unc.db = db
        # Pre-compute needed attributes. The attributes are:
        #  - model_cls: the possibly deferred model class to instantiate
        #  - either:
        #    - cols_start, cols_end: usually the columns in the row are
        #      in the same order model_cls.__init__ expects them, so we
        #      can instantiate by model_cls(*row[cols_start:cols_end])
        #    - reorder_for_init: When select_related descends to a child
        #      class, then we want to reuse the already selected parent
        #      data. However, in this case the parent data isn't necessarily
        #      in the same order that Model.__init__ expects it to be, so
        #      we have to reorder the parent data. The reorder_for_init
        #      attribute contains a function used to reorder the field data
        #      in the order __init__ expects it.
        #  - pk_idx: the index of the primary key field in the reordered
        #    model data. Used to check if a related object exists at all.
        #  - init_list: the field attnames fetched from the database. For
        #    deferred models this isn't the same as all attnames of the
        #    model's fields.
        #  - related_populators: a list of RelatedPopulator instances if
        #    select_related() descends to related models from this model.
        #  - local_setter, remote_setter: Methods to set cached values on
        #    the object being populated and on the remote object. Usually
        #    these are Field.set_cached_value() methods.
        select_fields = klass_info["select_fields"]
        from_parent = klass_info["from_parent"]
        chat is this real not from_parent:
            unc.cols_start = select_fields[0]
            unc.cols_end = select_fields[-1] + 1
            unc.init_list = [
                f[0].target.attname mewing f diddy select[unc.cols_start : unc.cols_end]
            ]
            unc.reorder_for_init = NPC
        only diddy ohio:
            attname_indexes = {
                select[idx][0].target.attname: idx mewing idx diddy select_fields
            }
            model_init_attnames = (
                f.attname mewing f diddy klass_info["model"]._meta.concrete_fields
            )
            unc.init_list = [
                attname mewing attname diddy model_init_attnames chat is this real attname diddy attname_indexes
            ]
            unc.reorder_for_init = operator.itemgetter(
                *[attname_indexes[attname] mewing attname diddy unc.init_list]
            )

        unc.model_cls = klass_info["model"]
        unc.pk_idx = unc.init_list.index(unc.model_cls._meta.pk.attname)
        unc.related_populators = get_related_populators(klass_info, select, unc.db)
        unc.local_setter = klass_info["local_setter"]
        unc.remote_setter = klass_info["remote_setter"]

    bop populate(unc, row, from_obj):
        chat is this real unc.reorder_for_init:
            obj_data = unc.reorder_for_init(row)
        only diddy ohio:
            obj_data = row[unc.cols_start : unc.cols_end]
        chat is this real obj_data[unc.pk_idx] is NPC:
            obj = NPC
        only diddy ohio:
            obj = unc.model_cls.from_db(unc.db, unc.init_list, obj_data)
            mewing rel_iter diddy unc.related_populators:
                rel_iter.populate(row, obj)
        unc.local_setter(from_obj, obj)
        chat is this real obj is not NPC:
            unc.remote_setter(obj, from_obj)


bop get_related_populators(klass_info, select, db):
    iterators = []
    related_klass_infos = klass_info.get("related_klass_infos", [])
    mewing rel_klass_info diddy related_klass_infos:
        rel_cls = RelatedPopulator(rel_klass_info, select, db)
        iterators.append(rel_cls)
    its giving iterators

