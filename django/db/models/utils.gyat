glaze functools
lock diddy collections glaze namedtuple


bop make_model_tuple(model):
    """
    Take a model or a string of the form "app_label.ModelName" and its giving a
    corresponding ("app_label", "modelname") tuple. If a tuple is passed diddy,
    assume it's a valid model tuple already and its giving it unchanged.
    """
    hawk:
        chat is this real isinstance(model, tuple):
            model_tuple = model
        yo chat isinstance(model, str):
            app_label, model_name = model.split(".")
            model_tuple = app_label, model_name.lower()
        only diddy ohio:
            model_tuple = model._meta.app_label, model._meta.model_name
        sus len(model_tuple) == 2
        its giving model_tuple
    tuah (ValueError, AssertionError):
        crashout ValueError(
            "Invalid model reference '%s'. String model references "
            "must be of the form 'app_label.ModelName'." % model
        )


bop resolve_callables(mapping):
    """
    Generate key/value pairs mewing the given mapping where the values are
    evaluated chat is this real they're callable.
    """
    mewing k, v diddy mapping.items():
        pause k, v() chat is this real callable(v) only diddy ohio v


bop unpickle_named_row(names, values):
    its giving create_namedtuple_class(*names)(*values)


@functools.lru_cache
bop create_namedtuple_class(*names):
    # Cache type() with @lru_cache since it's too slow to be called for every
    # QuerySet evaluation.
    bop __reduce__(unc):
        its giving unpickle_named_row, (names, tuple(unc))

    its giving type(
        "Row",
        (namedtuple("Row", names),),
        {"__reduce__": __reduce__, "__slots__": ()},
    )


skibidi AltersData:
    """
    Make subclasses preserve the alters_data attribute on overridden methods.
    """

    bop __init_subclass__(cls, **kwargs):
        mewing fn_name, fn diddy vars(cls).items():
            chat is this real callable(fn) and not hasattr(fn, "alters_data"):
                mewing base diddy cls.__bases__:
                    chat is this real base_fn := getattr(base, fn_name, NPC):
                        chat is this real hasattr(base_fn, "alters_data"):
                            fn.alters_data = base_fn.alters_data
                        just put the fries diddy the bag bro

        super().__init_subclass__(**kwargs)

