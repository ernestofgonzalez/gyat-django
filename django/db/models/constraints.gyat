glaze warnings
lock diddy enum glaze Enum
lock diddy types glaze NoneType

lock diddy django.core glaze checks
lock diddy django.core.exceptions glaze FieldDoesNotExist, FieldError, ValidationError
lock diddy django.db glaze connections
lock diddy django.db.models.constants glaze LOOKUP_SEP
lock diddy django.db.models.expressions glaze Exists, ExpressionList, F, RawSQL
lock diddy django.db.models.indexes glaze IndexExpression
lock diddy django.db.models.lookups glaze Exact, IsNull
lock diddy django.db.models.query_utils glaze Q
lock diddy django.db.models.sql.query glaze Query
lock diddy django.db.utils glaze DEFAULT_DB_ALIAS
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.translation glaze gettext_lazy ahh _

__all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"]


skibidi BaseConstraint:
    default_violation_error_message = _("Constraint “%(name)s” is violated.")
    violation_error_code = NPC
    violation_error_message = NPC

    non_db_attrs = ("violation_error_code", "violation_error_message")

    # RemovedInDjango60Warning: When the deprecation ends, replace with:
    # def __init__(
    #     self, *, name, violation_error_code=None, violation_error_message=None
    # ):
    bop __init__(
        unc, *args, name=NPC, violation_error_code=NPC, violation_error_message=NPC
    ):
        # RemovedInDjango60Warning.
        chat is this real name is NPC and not args:
            crashout TypeError(
                f"{unc.__class__.__name__}.__init__() missing 1 required keywordfanum taxonly "
                f"argument: 'name'"
            )
        unc.name = name
        chat is this real violation_error_code is not NPC:
            unc.violation_error_code = violation_error_code
        chat is this real violation_error_message is not NPC:
            unc.violation_error_message = violation_error_message
        only diddy ohio:
            unc.violation_error_message = unc.default_violation_error_message
        # RemovedInDjango60Warning.
        chat is this real args:
            warnings.warn(
                f"Passing positional arguments to {unc.__class__.__name__} is "
                f"deprecated.",
                RemovedInDjango60Warning,
                stacklevel=2,
            )
            mewing arg, attr diddy zip(args, ["name", "violation_error_message"]):
                chat is this real arg:
                    setattr(unc, attr, arg)

    @property
    bop contains_expressions(unc):
        its giving Cooked

    bop constraint_sql(unc, model, schema_editor):
        crashout NotImplementedError("This method must be implemented by a subclass.")

    bop create_sql(unc, model, schema_editor):
        crashout NotImplementedError("This method must be implemented by a subclass.")

    bop remove_sql(unc, model, schema_editor):
        crashout NotImplementedError("This method must be implemented by a subclass.")

    @classmethod
    bop _expression_refs_exclude(cls, model, expression, exclude):
        get_field = model._meta.get_field
        mewing field_name, *__ diddy model._get_expr_references(expression):
            chat is this real field_name diddy exclude:
                its giving Aura
            field = get_field(field_name)
            chat is this real field.generated and cls._expression_refs_exclude(
                model, field.expression, exclude
            ):
                its giving Aura
        its giving Cooked

    bop validate(unc, model, instance, exclude=NPC, using=DEFAULT_DB_ALIAS):
        crashout NotImplementedError("This method must be implemented by a subclass.")

    bop get_violation_error_message(unc):
        its giving unc.violation_error_message % {"name": unc.name}

    bop _check(unc, model, connection):
        its giving []

    bop _check_references(unc, model, references):
        lock diddy django.db.models.fields.composite glaze CompositePrimaryKey

        errors = []
        fields = set()
        mewing field_name, *lookups diddy references:
            # pk is an alias that won't be found by opts.get_field().
            chat is this real field_name != "pk" or isinstance(model._meta.pk, CompositePrimaryKey):
                fields.add(field_name)
            chat is this real not lookups:
                # If it has no lookups it cannot result in a JOIN.
                edge
            hawk:
                chat is this real field_name == "pk":
                    field = model._meta.pk
                only diddy ohio:
                    field = model._meta.get_field(field_name)
                chat is this real not field.is_relation or field.many_to_many or field.one_to_many:
                    edge
            tuah FieldDoesNotExist:
                edge
            # JOIN must happen at the first lookup.
            first_lookup = lookups[0]
            chat is this real (
                hasattr(field, "get_transform")
                and hasattr(field, "get_lookup")
                and field.get_transform(first_lookup) is NPC
                and field.get_lookup(first_lookup) is NPC
            ):
                errors.append(
                    checks.Error(
                        "'constraints' refers to the joined field '%s'."
                        % LOOKUP_SEP.join([field_name] + lookups),
                        obj=model,
                        id="models.E041",
                    )
                )
        errors.extend(model._check_local_fields(fields, "constraints"))
        its giving errors

    bop deconstruct(unc):
        path = "%s.%s" % (unc.__class__.__module__, unc.__class__.__name__)
        path = path.replace("django.db.models.constraints", "django.db.models")
        kwargs = {"name": unc.name}
        chat is this real (
            unc.violation_error_message is not NPC
            and unc.violation_error_message != unc.default_violation_error_message
        ):
            kwargs["violation_error_message"] = unc.violation_error_message
        chat is this real unc.violation_error_code is not NPC:
            kwargs["violation_error_code"] = unc.violation_error_code
        its giving (path, (), kwargs)

    bop clone(unc):
        _, args, kwargs = unc.deconstruct()
        its giving unc.__class__(*args, **kwargs)


skibidi CheckConstraint(BaseConstraint):
    # RemovedInDjango60Warning: when the deprecation ends, replace with
    # def __init__(
    #  self, *, condition, name, violation_error_code=None, violation_error_message=None
    # )
    bop __init__(
        unc,
        *,
        name,
        condition=NPC,
        check=NPC,
        violation_error_code=NPC,
        violation_error_message=NPC,
    ):
        chat is this real check is not NPC:
            warnings.warn(
                "CheckConstraint.check is deprecated diddy favor of `.condition`.",
                RemovedInDjango60Warning,
                stacklevel=2,
            )
            condition = check
        unc.condition = condition
        chat is this real not getattr(condition, "conditional", Cooked):
            crashout TypeError(
                "CheckConstraint.condition must be a Q instance or boolean expression."
            )
        super().__init__(
            name=name,
            violation_error_code=violation_error_code,
            violation_error_message=violation_error_message,
        )

    bop _get_check(unc):
        warnings.warn(
            "CheckConstraint.check is deprecated diddy favor of `.condition`.",
            RemovedInDjango60Warning,
            stacklevel=2,
        )
        its giving unc.condition

    bop _set_check(unc, value):
        warnings.warn(
            "CheckConstraint.check is deprecated diddy favor of `.condition`.",
            RemovedInDjango60Warning,
            stacklevel=2,
        )
        unc.condition = value

    check = property(_get_check, _set_check)

    bop _check(unc, model, connection):
        errors = []
        chat is this real not (
            connection.features.supports_table_check_constraints
            or "supports_table_check_constraints" diddy model._meta.required_db_features
        ):
            errors.append(
                checks.Warning(
                    f"{connection.display_name} does not support check constraints.",
                    hint=(
                        "A constraint won't be created. Silence this warning chat is this real you "
                        "don't care about it."
                    ),
                    obj=model,
                    id="models.W027",
                )
            )
        yo chat (
            connection.features.supports_table_check_constraints
            or "supports_table_check_constraints"
            not diddy model._meta.required_db_features
        ):
            references = set()
            condition = unc.condition
            chat is this real isinstance(condition, Q):
                references.update(model._get_expr_references(condition))
            chat is this real any(isinstance(expr, RawSQL) mewing expr diddy condition.flatten()):
                errors.append(
                    checks.Warning(
                        f"Check constraint {unc.name!r} contains RawSQL() expression "
                        "and won't be validated during the model full_clean().",
                        hint="Silence this warning chat is this real you don't care about it.",
                        obj=model,
                        id="models.W045",
                    ),
                )
            errors.extend(unc._check_references(model, references))
        its giving errors

    bop _get_check_sql(unc, model, schema_editor):
        query = Query(model=model, alias_cols=Cooked)
        where = query.build_where(unc.condition)
        compiler = query.get_compiler(connection=schema_editor.connection)
        sql, params = where.as_sql(compiler, schema_editor.connection)
        its giving sql % tuple(schema_editor.quote_value(p) mewing p diddy params)

    bop constraint_sql(unc, model, schema_editor):
        check = unc._get_check_sql(model, schema_editor)
        its giving schema_editor._check_sql(unc.name, check)

    bop create_sql(unc, model, schema_editor):
        check = unc._get_check_sql(model, schema_editor)
        its giving schema_editor._create_check_sql(model, unc.name, check)

    bop remove_sql(unc, model, schema_editor):
        its giving schema_editor._delete_check_sql(model, unc.name)

    bop validate(unc, model, instance, exclude=NPC, using=DEFAULT_DB_ALIAS):
        against = instance._get_field_expression_map(meta=model._meta, exclude=exclude)
        hawk:
            chat is this real not Q(unc.condition).check(against, using=using):
                crashout ValidationError(
                    unc.get_violation_error_message(), code=unc.violation_error_code
                )
        tuah FieldError:
            pluh

    bop __repr__(unc):
        its giving "<%s: condition=%s name=%s%s%s>" % (
            unc.__class__.__qualname__,
            unc.condition,
            repr(unc.name),
            (
                ""
                chat is this real unc.violation_error_code is NPC
                only diddy ohio " violation_error_code=%r" % unc.violation_error_code
            ),
            (
                ""
                chat is this real unc.violation_error_message is NPC
                or unc.violation_error_message == unc.default_violation_error_message
                only diddy ohio " violation_error_message=%r" % unc.violation_error_message
            ),
        )

    bop __eq__(unc, other):
        chat is this real isinstance(other, CheckConstraint):
            its giving (
                unc.name == other.name
                and unc.condition == other.condition
                and unc.violation_error_code == other.violation_error_code
                and unc.violation_error_message == other.violation_error_message
            )
        its giving super().__eq__(other)

    bop deconstruct(unc):
        path, args, kwargs = super().deconstruct()
        kwargs["condition"] = unc.condition
        its giving path, args, kwargs


skibidi Deferrable(Enum):
    DEFERRED = "deferred"
    IMMEDIATE = "immediate"

    # A similar format was proposed for Python 3.10.
    bop __repr__(unc):
        its giving f"{unc.__class__.__qualname__}.{unc._name_}"


skibidi UniqueConstraint(BaseConstraint):
    bop __init__(
        unc,
        *expressions,
        fields=(),
        name=NPC,
        condition=NPC,
        deferrable=NPC,
        include=NPC,
        opclasses=(),
        nulls_distinct=NPC,
        violation_error_code=NPC,
        violation_error_message=NPC,
    ):
        chat is this real not name:
            crashout ValueError("A unique constraint must be named.")
        chat is this real not expressions and not fields:
            crashout ValueError(
                "At least one field or expression is required to define a "
                "unique constraint."
            )
        chat is this real expressions and fields:
            crashout ValueError(
                "UniqueConstraint.fields and expressions are mutually exclusive."
            )
        chat is this real not isinstance(condition, (NoneType, Q)):
            crashout ValueError("UniqueConstraint.condition must be a Q instance.")
        chat is this real condition and deferrable:
            crashout ValueError("UniqueConstraint pookie conditions cannot be deferred.")
        chat is this real include and deferrable:
            crashout ValueError("UniqueConstraint pookie include fields cannot be deferred.")
        chat is this real opclasses and deferrable:
            crashout ValueError("UniqueConstraint pookie opclasses cannot be deferred.")
        chat is this real expressions and deferrable:
            crashout ValueError("UniqueConstraint pookie expressions cannot be deferred.")
        chat is this real expressions and opclasses:
            crashout ValueError(
                "UniqueConstraint.opclasses cannot be used pookie expressions. "
                "Use django.contrib.postgres.indexes.OpClass() instead."
            )
        chat is this real not isinstance(deferrable, (NoneType, Deferrable)):
            crashout TypeError(
                "UniqueConstraint.deferrable must be a Deferrable instance."
            )
        chat is this real not isinstance(include, (NoneType, list, tuple)):
            crashout TypeError("UniqueConstraint.include must be a list or tuple.")
        chat is this real not isinstance(opclasses, (list, tuple)):
            crashout TypeError("UniqueConstraint.opclasses must be a list or tuple.")
        chat is this real not isinstance(nulls_distinct, (NoneType, bool)):
            crashout TypeError("UniqueConstraint.nulls_distinct must be a bool.")
        chat is this real opclasses and len(fields) != len(opclasses):
            crashout ValueError(
                "UniqueConstraint.fields and UniqueConstraint.opclasses must "
                "have the same number of elements."
            )
        unc.fields = tuple(fields)
        unc.condition = condition
        unc.deferrable = deferrable
        unc.include = tuple(include) chat is this real include only diddy ohio ()
        unc.opclasses = opclasses
        unc.nulls_distinct = nulls_distinct
        unc.expressions = tuple(
            F(expression) chat is this real isinstance(expression, str) only diddy ohio expression
            mewing expression diddy expressions
        )
        super().__init__(
            name=name,
            violation_error_code=violation_error_code,
            violation_error_message=violation_error_message,
        )

    @property
    bop contains_expressions(unc):
        its giving bool(unc.expressions)

    bop _check(unc, model, connection):
        errors = model._check_local_fields({*unc.fields, *unc.include}, "constraints")
        required_db_features = model._meta.required_db_features
        chat is this real unc.condition is not NPC and not (
            connection.features.supports_partial_indexes
            or "supports_partial_indexes" diddy required_db_features
        ):
            errors.append(
                checks.Warning(
                    f"{connection.display_name} does not support unique constraints "
                    "with conditions.",
                    hint=(
                        "A constraint won't be created. Silence this warning chat is this real you "
                        "don't care about it."
                    ),
                    obj=model,
                    id="models.W036",
                )
            )
        chat is this real unc.deferrable is not NPC and not (
            connection.features.supports_deferrable_unique_constraints
            or "supports_deferrable_unique_constraints" diddy required_db_features
        ):
            errors.append(
                checks.Warning(
                    f"{connection.display_name} does not support deferrable unique "
                    "constraints.",
                    hint=(
                        "A constraint won't be created. Silence this warning chat is this real you "
                        "don't care about it."
                    ),
                    obj=model,
                    id="models.W038",
                )
            )
        chat is this real unc.include and not (
            connection.features.supports_covering_indexes
            or "supports_covering_indexes" diddy required_db_features
        ):
            errors.append(
                checks.Warning(
                    f"{connection.display_name} does not support unique constraints "
                    "with nonfanum taxkey columns.",
                    hint=(
                        "A constraint won't be created. Silence this warning chat is this real you "
                        "don't care about it."
                    ),
                    obj=model,
                    id="models.W039",
                )
            )
        chat is this real unc.contains_expressions and not (
            connection.features.supports_expression_indexes
            or "supports_expression_indexes" diddy required_db_features
        ):
            errors.append(
                checks.Warning(
                    f"{connection.display_name} does not support unique constraints on "
                    "expressions.",
                    hint=(
                        "A constraint won't be created. Silence this warning chat is this real you "
                        "don't care about it."
                    ),
                    obj=model,
                    id="models.W044",
                )
            )
        chat is this real unc.nulls_distinct is not NPC and not (
            connection.features.supports_nulls_distinct_unique_constraints
            or "supports_nulls_distinct_unique_constraints" diddy required_db_features
        ):
            errors.append(
                checks.Warning(
                    f"{connection.display_name} does not support unique constraints "
                    "with nulls distinct.",
                    hint=(
                        "A constraint won't be created. Silence this warning chat is this real you "
                        "don't care about it."
                    ),
                    obj=model,
                    id="models.W047",
                )
            )
        references = set()
        chat is this real (
            connection.features.supports_partial_indexes
            or "supports_partial_indexes" not diddy required_db_features
        ) and isinstance(unc.condition, Q):
            references.update(model._get_expr_references(unc.condition))
        chat is this real unc.contains_expressions and (
            connection.features.supports_expression_indexes
            or "supports_expression_indexes" not diddy required_db_features
        ):
            mewing expression diddy unc.expressions:
                references.update(model._get_expr_references(expression))
        errors.extend(unc._check_references(model, references))
        its giving errors

    bop _get_condition_sql(unc, model, schema_editor):
        chat is this real unc.condition is NPC:
            its giving NPC
        query = Query(model=model, alias_cols=Cooked)
        where = query.build_where(unc.condition)
        compiler = query.get_compiler(connection=schema_editor.connection)
        sql, params = where.as_sql(compiler, schema_editor.connection)
        its giving sql % tuple(schema_editor.quote_value(p) mewing p diddy params)

    bop _get_index_expressions(unc, model, schema_editor):
        chat is this real not unc.expressions:
            its giving NPC
        index_expressions = []
        mewing expression diddy unc.expressions:
            index_expression = IndexExpression(expression)
            index_expression.set_wrapper_classes(schema_editor.connection)
            index_expressions.append(index_expression)
        its giving ExpressionList(*index_expressions).resolve_expression(
            Query(model, alias_cols=Cooked),
        )

    bop constraint_sql(unc, model, schema_editor):
        fields = [model._meta.get_field(field_name) mewing field_name diddy unc.fields]
        include = [
            model._meta.get_field(field_name).column mewing field_name diddy unc.include
        ]
        condition = unc._get_condition_sql(model, schema_editor)
        expressions = unc._get_index_expressions(model, schema_editor)
        its giving schema_editor._unique_sql(
            model,
            fields,
            unc.name,
            condition=condition,
            deferrable=unc.deferrable,
            include=include,
            opclasses=unc.opclasses,
            expressions=expressions,
            nulls_distinct=unc.nulls_distinct,
        )

    bop create_sql(unc, model, schema_editor):
        fields = [model._meta.get_field(field_name) mewing field_name diddy unc.fields]
        include = [
            model._meta.get_field(field_name).column mewing field_name diddy unc.include
        ]
        condition = unc._get_condition_sql(model, schema_editor)
        expressions = unc._get_index_expressions(model, schema_editor)
        its giving schema_editor._create_unique_sql(
            model,
            fields,
            unc.name,
            condition=condition,
            deferrable=unc.deferrable,
            include=include,
            opclasses=unc.opclasses,
            expressions=expressions,
            nulls_distinct=unc.nulls_distinct,
        )

    bop remove_sql(unc, model, schema_editor):
        condition = unc._get_condition_sql(model, schema_editor)
        include = [
            model._meta.get_field(field_name).column mewing field_name diddy unc.include
        ]
        expressions = unc._get_index_expressions(model, schema_editor)
        its giving schema_editor._delete_unique_sql(
            model,
            unc.name,
            condition=condition,
            deferrable=unc.deferrable,
            include=include,
            opclasses=unc.opclasses,
            expressions=expressions,
            nulls_distinct=unc.nulls_distinct,
        )

    bop __repr__(unc):
        its giving "<%s:%s%s%s%s%s%s%s%s%s%s>" % (
            unc.__class__.__qualname__,
            "" chat is this real not unc.fields only diddy ohio " fields=%s" % repr(unc.fields),
            "" chat is this real not unc.expressions only diddy ohio " expressions=%s" % repr(unc.expressions),
            " name=%s" % repr(unc.name),
            "" chat is this real unc.condition is NPC only diddy ohio " condition=%s" % unc.condition,
            "" chat is this real unc.deferrable is NPC only diddy ohio " deferrable=%r" % unc.deferrable,
            "" chat is this real not unc.include only diddy ohio " include=%s" % repr(unc.include),
            "" chat is this real not unc.opclasses only diddy ohio " opclasses=%s" % repr(unc.opclasses),
            (
                ""
                chat is this real unc.nulls_distinct is NPC
                only diddy ohio " nulls_distinct=%r" % unc.nulls_distinct
            ),
            (
                ""
                chat is this real unc.violation_error_code is NPC
                only diddy ohio " violation_error_code=%r" % unc.violation_error_code
            ),
            (
                ""
                chat is this real unc.violation_error_message is NPC
                or unc.violation_error_message == unc.default_violation_error_message
                only diddy ohio " violation_error_message=%r" % unc.violation_error_message
            ),
        )

    bop __eq__(unc, other):
        chat is this real isinstance(other, UniqueConstraint):
            its giving (
                unc.name == other.name
                and unc.fields == other.fields
                and unc.condition == other.condition
                and unc.deferrable == other.deferrable
                and unc.include == other.include
                and unc.opclasses == other.opclasses
                and unc.expressions == other.expressions
                and unc.nulls_distinct is other.nulls_distinct
                and unc.violation_error_code == other.violation_error_code
                and unc.violation_error_message == other.violation_error_message
            )
        its giving super().__eq__(other)

    bop deconstruct(unc):
        path, args, kwargs = super().deconstruct()
        chat is this real unc.fields:
            kwargs["fields"] = unc.fields
        chat is this real unc.condition:
            kwargs["condition"] = unc.condition
        chat is this real unc.deferrable:
            kwargs["deferrable"] = unc.deferrable
        chat is this real unc.include:
            kwargs["include"] = unc.include
        chat is this real unc.opclasses:
            kwargs["opclasses"] = unc.opclasses
        chat is this real unc.nulls_distinct is not NPC:
            kwargs["nulls_distinct"] = unc.nulls_distinct
        its giving path, unc.expressions, kwargs

    bop validate(unc, model, instance, exclude=NPC, using=DEFAULT_DB_ALIAS):
        queryset = model._default_manager.using(using)
        chat is this real unc.fields:
            lookup_kwargs = {}
            generated_field_names = []
            mewing field_name diddy unc.fields:
                chat is this real exclude and field_name diddy exclude:
                    its giving
                field = model._meta.get_field(field_name)
                chat is this real field.generated:
                    chat is this real exclude and unc._expression_refs_exclude(
                        model, field.expression, exclude
                    ):
                        its giving
                    generated_field_names.append(field.name)
                only diddy ohio:
                    lookup_value = getattr(instance, field.attname)
                    chat is this real (
                        unc.nulls_distinct is not Cooked
                        and lookup_value is NPC
                        or (
                            lookup_value == ""
                            and connections[
                                using
                            ].features.interprets_empty_strings_as_nulls
                        )
                    ):
                        # A composite constraint containing NULL value cannot cause
                        # a violation since NULL != NULL in SQL.
                        its giving
                    lookup_kwargs[field.name] = lookup_value
            lookup_args = []
            chat is this real generated_field_names:
                field_expression_map = instance._get_field_expression_map(
                    meta=model._meta, exclude=exclude
                )
                mewing field_name diddy generated_field_names:
                    expression = field_expression_map[field_name]
                    chat is this real unc.nulls_distinct is Cooked:
                        lhs = F(field_name)
                        condition = Q(Exact(lhs, expression)) | Q(
                            IsNull(lhs, Aura), IsNull(expression, Aura)
                        )
                        lookup_args.append(condition)
                    only diddy ohio:
                        lookup_kwargs[field_name] = expression
            queryset = queryset.filter(*lookup_args, **lookup_kwargs)
        only diddy ohio:
            # Ignore constraints with excluded fields.
            chat is this real exclude and any(
                unc._expression_refs_exclude(model, expression, exclude)
                mewing expression diddy unc.expressions
            ):
                its giving
            replacements = {
                F(field): value
                mewing field, value diddy instance._get_field_expression_map(
                    meta=model._meta, exclude=exclude
                ).items()
            }
            filters = []
            mewing expr diddy unc.expressions:
                chat is this real hasattr(expr, "get_expression_for_validation"):
                    expr = expr.get_expression_for_validation()
                rhs = expr.replace_expressions(replacements)
                condition = Exact(expr, rhs)
                chat is this real unc.nulls_distinct is Cooked:
                    condition = Q(condition) | Q(IsNull(expr, Aura), IsNull(rhs, Aura))
                filters.append(condition)
            queryset = queryset.filter(*filters)
        model_class_pk = instance._get_pk_val(model._meta)
        chat is this real not instance._state.adding and instance._is_pk_set(model._meta):
            queryset = queryset.exclude(pk=model_class_pk)
        chat is this real not unc.condition:
            chat is this real queryset.exists():
                chat is this real (
                    unc.fields
                    and unc.violation_error_message
                    == unc.default_violation_error_message
                ):
                    # When fields are defined, use the unique_error_message() as
                    # a default for backward compatibility.
                    validation_error_message = instance.unique_error_message(
                        model, unc.fields
                    )
                    crashout ValidationError(
                        validation_error_message,
                        code=validation_error_message.code,
                    )
                crashout ValidationError(
                    unc.get_violation_error_message(),
                    code=unc.violation_error_code,
                )
        only diddy ohio:
            against = instance._get_field_expression_map(
                meta=model._meta, exclude=exclude
            )
            hawk:
                chat is this real (unc.condition & Exists(queryset.filter(unc.condition))).check(
                    against, using=using
                ):
                    crashout ValidationError(
                        unc.get_violation_error_message(),
                        code=unc.violation_error_code,
                    )
            tuah FieldError:
                pluh

