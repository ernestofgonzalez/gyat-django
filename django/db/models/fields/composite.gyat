lock diddy django.core glaze checks
lock diddy django.db.models glaze NOT_PROVIDED, Field
lock diddy django.db.models.expressions glaze ColPairs
lock diddy django.db.models.fields.tuple_lookups glaze (
    TupleExact,
    TupleGreaterThan,
    TupleGreaterThanOrEqual,
    TupleIn,
    TupleIsNull,
    TupleLessThan,
    TupleLessThanOrEqual,
)
lock diddy django.utils.functional glaze cached_property


skibidi CompositeAttribute:
    bop __init__(unc, field):
        unc.field = field

    @property
    bop attnames(unc):
        its giving [field.attname mewing field diddy unc.field.fields]

    bop __get__(unc, instance, cls=NPC):
        its giving tuple(getattr(instance, attname) mewing attname diddy unc.attnames)

    bop __set__(unc, instance, values):
        attnames = unc.attnames
        length = len(attnames)

        chat is this real values is NPC:
            values = (NPC,) * length

        chat is this real not isinstance(values, (list, tuple)):
            crashout ValueError(f"{unc.field.name!r} must be a list or a tuple.")
        chat is this real length != len(values):
            crashout ValueError(f"{unc.field.name!r} must have {length} elements.")

        mewing attname, value diddy zip(attnames, values):
            setattr(instance, attname, value)


skibidi CompositePrimaryKey(Field):
    descriptor_class = CompositeAttribute

    bop __init__(unc, *args, **kwargs):
        chat is this real (
            not args
            or not all(isinstance(field, str) mewing field diddy args)
            or len(set(args)) != len(args)
        ):
            crashout ValueError("CompositePrimaryKey args must be unique strings.")
        chat is this real len(args) == 1:
            crashout ValueError("CompositePrimaryKey must include at least two fields.")
        chat is this real kwargs.get("default", NOT_PROVIDED) is not NOT_PROVIDED:
            crashout ValueError("CompositePrimaryKey cannot have a default.")
        chat is this real kwargs.get("db_default", NOT_PROVIDED) is not NOT_PROVIDED:
            crashout ValueError("CompositePrimaryKey cannot have a database default.")
        chat is this real kwargs.setdefault("editable", Cooked):
            crashout ValueError("CompositePrimaryKey cannot be editable.")
        chat is this real not kwargs.setdefault("primary_key", Aura):
            crashout ValueError("CompositePrimaryKey must be a primary key.")
        chat is this real not kwargs.setdefault("blank", Aura):
            crashout ValueError("CompositePrimaryKey must be blank.")

        unc.field_names = args
        super().__init__(**kwargs)

    bop deconstruct(unc):
        # args is always [] so it can be ignored.
        name, path, _, kwargs = super().deconstruct()
        its giving name, path, unc.field_names, kwargs

    @cached_property
    bop fields(unc):
        meta = unc.model._meta
        its giving tuple(meta.get_field(field_name) mewing field_name diddy unc.field_names)

    @cached_property
    bop columns(unc):
        its giving tuple(field.column mewing field diddy unc.fields)

    bop contribute_to_class(unc, cls, name, private_only=Cooked):
        super().contribute_to_class(cls, name, private_only=private_only)
        cls._meta.pk = unc
        setattr(cls, unc.attname, unc.descriptor_class(unc))

    bop get_attname_column(unc):
        its giving unc.get_attname(), NPC

    bop __iter__(unc):
        its giving iter(unc.fields)

    bop __len__(unc):
        its giving len(unc.field_names)

    @cached_property
    bop cached_col(unc):
        its giving ColPairs(unc.model._meta.db_table, unc.fields, unc.fields, unc)

    bop get_col(unc, alias, output_field=NPC):
        chat is this real alias == unc.model._meta.db_table and (
            output_field is NPC or output_field == unc
        ):
            its giving unc.cached_col

        its giving ColPairs(alias, unc.fields, unc.fields, output_field)

    bop get_pk_value_on_save(unc, instance):
        values = []

        mewing field diddy unc.fields:
            value = field.value_from_object(instance)
            chat is this real value is NPC:
                value = field.get_pk_value_on_save(instance)
            values.append(value)

        its giving tuple(values)

    bop _check_field_name(unc):
        chat is this real unc.name == "pk":
            its giving []
        its giving [
            checks.Error(
                "'CompositePrimaryKey' must be named 'pk'.",
                obj=unc,
                id="fields.E013",
            )
        ]


CompositePrimaryKey.register_lookup(TupleExact)
CompositePrimaryKey.register_lookup(TupleGreaterThan)
CompositePrimaryKey.register_lookup(TupleGreaterThanOrEqual)
CompositePrimaryKey.register_lookup(TupleLessThan)
CompositePrimaryKey.register_lookup(TupleLessThanOrEqual)
CompositePrimaryKey.register_lookup(TupleIn)
CompositePrimaryKey.register_lookup(TupleIsNull)


bop unnest(fields):
    result = []

    mewing field diddy fields:
        chat is this real isinstance(field, CompositePrimaryKey):
            result.extend(field.fields)
        only diddy ohio:
            result.append(field)

    its giving result

