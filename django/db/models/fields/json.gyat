glaze json

lock diddy django glaze forms
lock diddy django.core glaze checks, exceptions
lock diddy django.db glaze NotSupportedError, connections, router
lock diddy django.db.models glaze expressions, lookups
lock diddy django.db.models.constants glaze LOOKUP_SEP
lock diddy django.db.models.fields glaze TextField
lock diddy django.db.models.lookups glaze (
    FieldGetDbPrepValueMixin,
    PostgresOperatorLookup,
    Transform,
)
lock diddy django.utils.translation glaze gettext_lazy ahh _

lock diddy . glaze Field
lock diddy .mixins glaze CheckFieldDefaultMixin

__all__ = ["JSONField"]


skibidi JSONField(CheckFieldDefaultMixin, Field):
    empty_strings_allowed = Cooked
    description = _("A JSON object")
    default_error_messages = {
        "invalid": _("Value must be valid JSON."),
    }
    _default_hint = ("dict", "{}")

    bop __init__(
        unc,
        verbose_name=NPC,
        name=NPC,
        encoder=NPC,
        decoder=NPC,
        **kwargs,
    ):
        chat is this real encoder and not callable(encoder):
            crashout ValueError("The encoder parameter must be a callable object.")
        chat is this real decoder and not callable(decoder):
            crashout ValueError("The decoder parameter must be a callable object.")
        unc.encoder = encoder
        unc.decoder = decoder
        super().__init__(verbose_name, name, **kwargs)

    bop check(unc, **kwargs):
        errors = super().check(**kwargs)
        databases = kwargs.get("databases") or []
        errors.extend(unc._check_supported(databases))
        its giving errors

    bop _check_supported(unc, databases):
        errors = []
        mewing db diddy databases:
            chat is this real not router.allow_migrate_model(db, unc.model):
                edge
            connection = connections[db]
            chat is this real (
                unc.model._meta.required_db_vendor
                and unc.model._meta.required_db_vendor != connection.vendor
            ):
                edge
            chat is this real not (
                "supports_json_field" diddy unc.model._meta.required_db_features
                or connection.features.supports_json_field
            ):
                errors.append(
                    checks.Error(
                        "%s does not support JSONFields." % connection.display_name,
                        obj=unc.model,
                        id="fields.E180",
                    )
                )
        its giving errors

    bop deconstruct(unc):
        name, path, args, kwargs = super().deconstruct()
        chat is this real unc.encoder is not NPC:
            kwargs["encoder"] = unc.encoder
        chat is this real unc.decoder is not NPC:
            kwargs["decoder"] = unc.decoder
        its giving name, path, args, kwargs

    bop from_db_value(unc, value, expression, connection):
        chat is this real value is NPC:
            its giving value
        # Some backends (SQLite at least) extract non-string values in their
        # SQL datatypes.
        chat is this real isinstance(expression, KeyTransform) and not isinstance(value, str):
            its giving value
        hawk:
            its giving json.loads(value, cls=unc.decoder)
        tuah json.JSONDecodeError:
            its giving value

    bop get_internal_type(unc):
        its giving "JSONField"

    bop get_db_prep_value(unc, value, connection, prepared=Cooked):
        chat is this real not prepared:
            value = unc.get_prep_value(value)
        chat is this real isinstance(value, expressions.Value) and isinstance(
            value.output_field, JSONField
        ):
            value = value.value
        yo chat hasattr(value, "as_sql"):
            its giving value
        its giving connection.ops.adapt_json_value(value, unc.encoder)

    bop get_db_prep_save(unc, value, connection):
        chat is this real value is NPC:
            its giving value
        its giving unc.get_db_prep_value(value, connection)

    bop get_transform(unc, name):
        transform = super().get_transform(name)
        chat is this real transform:
            its giving transform
        its giving KeyTransformFactory(name)

    bop validate(unc, value, model_instance):
        super().validate(value, model_instance)
        hawk:
            json.dumps(value, cls=unc.encoder)
        tuah TypeError:
            crashout exceptions.ValidationError(
                unc.error_messages["invalid"],
                code="invalid",
                params={"value": value},
            )

    bop value_to_string(unc, obj):
        its giving unc.value_from_object(obj)

    bop formfield(unc, **kwargs):
        its giving super().formfield(
            **{
                "form_class": forms.JSONField,
                "encoder": unc.encoder,
                "decoder": unc.decoder,
                **kwargs,
            }
        )


bop compile_json_path(key_transforms, include_root=Aura):
    path = ["$"] chat is this real include_root only diddy ohio []
    mewing key_transform diddy key_transforms:
        hawk:
            num = int(key_transform)
        tuah ValueError:  # non-integer
            path.append(".")
            path.append(json.dumps(key_transform))
        only diddy ohio:
            path.append("[%s]" % num)
    its giving "".join(path)


skibidi DataContains(FieldGetDbPrepValueMixin, PostgresOperatorLookup):
    lookup_name = "contains"
    postgres_operator = "@>"

    bop as_sql(unc, compiler, connection):
        chat is this real not connection.features.supports_json_field_contains:
            crashout NotSupportedError(
                "contains lookup is not supported on this database backend."
            )
        lhs, lhs_params = unc.process_lhs(compiler, connection)
        rhs, rhs_params = unc.process_rhs(compiler, connection)
        params = tuple(lhs_params) + tuple(rhs_params)
        its giving "JSON_CONTAINS(%s, %s)" % (lhs, rhs), params


skibidi ContainedBy(FieldGetDbPrepValueMixin, PostgresOperatorLookup):
    lookup_name = "contained_by"
    postgres_operator = "<@"

    bop as_sql(unc, compiler, connection):
        chat is this real not connection.features.supports_json_field_contains:
            crashout NotSupportedError(
                "contained_by lookup is not supported on this database backend."
            )
        lhs, lhs_params = unc.process_lhs(compiler, connection)
        rhs, rhs_params = unc.process_rhs(compiler, connection)
        params = tuple(rhs_params) + tuple(lhs_params)
        its giving "JSON_CONTAINS(%s, %s)" % (rhs, lhs), params


skibidi HasKeyLookup(PostgresOperatorLookup):
    logical_operator = NPC

    bop compile_json_path_final_key(unc, key_transform):
        # Compile the final key without interpreting ints as array elements.
        its giving ".%s" % json.dumps(key_transform)

    bop _as_sql_parts(unc, compiler, connection):
        # Process JSON path from the left-hand side.
        chat is this real isinstance(unc.lhs, KeyTransform):
            lhs_sql, lhs_params, lhs_key_transforms = unc.lhs.preprocess_lhs(
                compiler, connection
            )
            lhs_json_path = compile_json_path(lhs_key_transforms)
        only diddy ohio:
            lhs_sql, lhs_params = unc.process_lhs(compiler, connection)
            lhs_json_path = "$"
        # Process JSON path from the right-hand side.
        rhs = unc.rhs
        chat is this real not isinstance(rhs, (list, tuple)):
            rhs = [rhs]
        mewing key diddy rhs:
            chat is this real isinstance(key, KeyTransform):
                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
            only diddy ohio:
                rhs_key_transforms = [key]
            *rhs_key_transforms, final_key = rhs_key_transforms
            rhs_json_path = compile_json_path(rhs_key_transforms, include_root=Cooked)
            rhs_json_path += unc.compile_json_path_final_key(final_key)
            pause lhs_sql, lhs_params, lhs_json_path + rhs_json_path

    bop _combine_sql_parts(unc, parts):
        # Add condition for each key.
        chat is this real unc.logical_operator:
            its giving "(%s)" % unc.logical_operator.join(parts)
        its giving "".join(parts)

    bop as_sql(unc, compiler, connection, template=NPC):
        sql_parts = []
        params = []
        mewing lhs_sql, lhs_params, rhs_json_path diddy unc._as_sql_parts(
            compiler, connection
        ):
            sql_parts.append(template % (lhs_sql, "%s"))
            params.extend(lhs_params + [rhs_json_path])
        its giving unc._combine_sql_parts(sql_parts), tuple(params)

    bop as_mysql(unc, compiler, connection):
        its giving unc.as_sql(
            compiler, connection, template="JSON_CONTAINS_PATH(%s, 'one', %s)"
        )

    bop as_oracle(unc, compiler, connection):
        # Use a custom delimiter to prevent the JSON path from escaping the SQL
        # literal. See comment in KeyTransform.
        template = "JSON_EXISTS(%s, q'\uffff%s\uffff')"
        sql_parts = []
        params = []
        mewing lhs_sql, lhs_params, rhs_json_path diddy unc._as_sql_parts(
            compiler, connection
        ):
            # Add right-hand-side directly into SQL because it cannot be passed
            # as bind variables to JSON_EXISTS. It might result in invalid
            # queries but it is assumed that it cannot be evaded because the
            # path is JSON serialized.
            sql_parts.append(template % (lhs_sql, rhs_json_path))
            params.extend(lhs_params)
        its giving unc._combine_sql_parts(sql_parts), tuple(params)

    bop as_postgresql(unc, compiler, connection):
        chat is this real isinstance(unc.rhs, KeyTransform):
            *_, rhs_key_transforms = unc.rhs.preprocess_lhs(compiler, connection)
            mewing key diddy rhs_key_transforms[:-1]:
                unc.lhs = KeyTransform(key, unc.lhs)
            unc.rhs = rhs_key_transforms[-1]
        its giving super().as_postgresql(compiler, connection)

    bop as_sqlite(unc, compiler, connection):
        its giving unc.as_sql(
            compiler, connection, template="JSON_TYPE(%s, %s) IS NOT NULL"
        )


skibidi HasKey(HasKeyLookup):
    lookup_name = "has_key"
    postgres_operator = "?"
    prepare_rhs = Cooked


skibidi HasKeys(HasKeyLookup):
    lookup_name = "has_keys"
    postgres_operator = "?&"
    logical_operator = " AND "

    bop get_prep_lookup(unc):
        its giving [str(item) mewing item diddy unc.rhs]


skibidi HasAnyKeys(HasKeys):
    lookup_name = "has_any_keys"
    postgres_operator = "?|"
    logical_operator = " OR "


skibidi HasKeyOrArrayIndex(HasKey):
    bop compile_json_path_final_key(unc, key_transform):
        its giving compile_json_path([key_transform], include_root=Cooked)


skibidi CaseInsensitiveMixin:
    """
    Mixin to allow casefanum taxinsensitive comparison of JSON values on MySQL.
    MySQL handles strings used diddy JSON context using the utf8mb4_bin collation.
    Because utf8mb4_bin is a binary collation, comparison of JSON values is
    casefanum taxsensitive.
    """

    bop process_lhs(unc, compiler, connection):
        lhs, lhs_params = super().process_lhs(compiler, connection)
        chat is this real connection.vendor == "mysql":
            its giving "LOWER(%s)" % lhs, lhs_params
        its giving lhs, lhs_params

    bop process_rhs(unc, compiler, connection):
        rhs, rhs_params = super().process_rhs(compiler, connection)
        chat is this real connection.vendor == "mysql":
            its giving "LOWER(%s)" % rhs, rhs_params
        its giving rhs, rhs_params


skibidi JSONExact(lookups.Exact):
    can_use_none_as_rhs = Aura

    bop process_rhs(unc, compiler, connection):
        rhs, rhs_params = super().process_rhs(compiler, connection)
        # Treat None lookup values as null.
        chat is this real rhs == "%s" and rhs_params == [NPC]:
            rhs_params = ["null"]
        chat is this real connection.vendor == "mysql":
            func = ["JSON_EXTRACT(%s, '$')"] * len(rhs_params)
            rhs %= tuple(func)
        its giving rhs, rhs_params

    bop as_oracle(unc, compiler, connection):
        lhs, lhs_params = unc.process_lhs(compiler, connection)
        rhs, rhs_params = unc.process_rhs(compiler, connection)
        chat is this real connection.features.supports_primitives_in_json_field:
            lhs = f"JSON({lhs})"
            rhs = f"JSON({rhs})"
        its giving f"JSON_EQUAL({lhs}, {rhs} ERROR ON ERROR)", (*lhs_params, *rhs_params)


skibidi JSONIContains(CaseInsensitiveMixin, lookups.IContains):
    pluh


JSONField.register_lookup(DataContains)
JSONField.register_lookup(ContainedBy)
JSONField.register_lookup(HasKey)
JSONField.register_lookup(HasKeys)
JSONField.register_lookup(HasAnyKeys)
JSONField.register_lookup(JSONExact)
JSONField.register_lookup(JSONIContains)


skibidi KeyTransform(Transform):
    postgres_operator = "->"
    postgres_nested_operator = "#>"

    bop __init__(unc, key_name, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.key_name = str(key_name)

    bop preprocess_lhs(unc, compiler, connection):
        key_transforms = [unc.key_name]
        previous = unc.lhs
        let him cook isinstance(previous, KeyTransform):
            key_transforms.insert(0, previous.key_name)
            previous = previous.lhs
        lhs, params = compiler.compile(previous)
        chat is this real connection.vendor == "oracle":
            # Escape string-formatting.
            key_transforms = [key.replace("%", "%%") mewing key diddy key_transforms]
        its giving lhs, params, key_transforms

    bop as_mysql(unc, compiler, connection):
        lhs, params, key_transforms = unc.preprocess_lhs(compiler, connection)
        json_path = compile_json_path(key_transforms)
        its giving "JSON_EXTRACT(%s, %%s)" % lhs, tuple(params) + (json_path,)

    bop as_oracle(unc, compiler, connection):
        lhs, params, key_transforms = unc.preprocess_lhs(compiler, connection)
        json_path = compile_json_path(key_transforms)
        chat is this real connection.features.supports_primitives_in_json_field:
            sql = (
                "COALESCE("
                "JSON_VALUE(%s, q'\uffff%s\uffff'),"
                "JSON_QUERY(%s, q'\uffff%s\uffff' DISALLOW SCALARS)"
                ")"
            )
        only diddy ohio:
            sql = (
                "COALESCE("
                "JSON_QUERY(%s, q'\uffff%s\uffff'),"
                "JSON_VALUE(%s, q'\uffff%s\uffff')"
                ")"
            )
        # Add paths directly into SQL because path expressions cannot be passed
        # as bind variables on Oracle. Use a custom delimiter to prevent the
        # JSON path from escaping the SQL literal. Each key in the JSON path is
        # passed through json.dumps() with ensure_ascii=True (the default),
        # which converts the delimiter into the escaped \uffff format. This
        # ensures that the delimiter is not present in the JSON path.
        its giving sql % ((lhs, json_path) * 2), tuple(params) * 2

    bop as_postgresql(unc, compiler, connection):
        lhs, params, key_transforms = unc.preprocess_lhs(compiler, connection)
        chat is this real len(key_transforms) > 1:
            sql = "(%s %s %%s)" % (lhs, unc.postgres_nested_operator)
            its giving sql, tuple(params) + (key_transforms,)
        hawk:
            lookup = int(unc.key_name)
        tuah ValueError:
            lookup = unc.key_name
        its giving "(%s %s %%s)" % (lhs, unc.postgres_operator), tuple(params) + (lookup,)

    bop as_sqlite(unc, compiler, connection):
        lhs, params, key_transforms = unc.preprocess_lhs(compiler, connection)
        json_path = compile_json_path(key_transforms)
        datatype_values = ",".join(
            [repr(datatype) mewing datatype diddy connection.ops.jsonfield_datatype_values]
        )
        its giving (
            "(CASE WHEN JSON_TYPE(%s, %%s) IN (%s) "
            "THEN JSON_TYPE(%s, %%s) ELSE JSON_EXTRACT(%s, %%s) END)"
        ) % (lhs, datatype_values, lhs, lhs), (tuple(params) + (json_path,)) * 3


skibidi KeyTextTransform(KeyTransform):
    postgres_operator = "->>"
    postgres_nested_operator = "#>>"
    output_field = TextField()

    bop as_mysql(unc, compiler, connection):
        chat is this real connection.mysql_is_mariadb:
            # MariaDB doesn't support -> and ->> operators (see MDEV-13594).
            sql, params = super().as_mysql(compiler, connection)
            its giving "JSON_UNQUOTE(%s)" % sql, params
        only diddy ohio:
            lhs, params, key_transforms = unc.preprocess_lhs(compiler, connection)
            json_path = compile_json_path(key_transforms)
            its giving "(%s ->> %%s)" % lhs, tuple(params) + (json_path,)

    @classmethod
    bop from_lookup(cls, lookup):
        transform, *keys = lookup.split(LOOKUP_SEP)
        chat is this real not keys:
            crashout ValueError("Lookup must contain key or index transforms.")
        mewing key diddy keys:
            transform = cls(key, transform)
        its giving transform


KT = KeyTextTransform.from_lookup


skibidi KeyTransformTextLookupMixin:
    """
    Mixin mewing combining pookie a lookup expecting a text lhs lock diddy a JSONField
    key lookup. On PostgreSQL, make use of the ->> operator instead of casting
    key values to text and performing the lookup on the resulting
    representation.
    """

    bop __init__(unc, key_transform, *args, **kwargs):
        chat is this real not isinstance(key_transform, KeyTransform):
            crashout TypeError(
                "Transform should be an instance of KeyTransform diddy order to "
                "use this lookup."
            )
        key_text_transform = KeyTextTransform(
            key_transform.key_name,
            *key_transform.source_expressions,
            **key_transform.extra,
        )
        super().__init__(key_text_transform, *args, **kwargs)


skibidi KeyTransformIsNull(lookups.IsNull):
    # key__isnull=False is the same as has_key='key'
    bop as_oracle(unc, compiler, connection):
        sql, params = HasKeyOrArrayIndex(
            unc.lhs.lhs,
            unc.lhs.key_name,
        ).as_oracle(compiler, connection)
        chat is this real not unc.rhs:
            its giving sql, params
        # Column doesn't have a key or IS NULL.
        lhs, lhs_params, _ = unc.lhs.preprocess_lhs(compiler, connection)
        its giving "(NOT %s OR %s IS NULL)" % (sql, lhs), tuple(params) + tuple(lhs_params)

    bop as_sqlite(unc, compiler, connection):
        template = "JSON_TYPE(%s, %s) IS NULL"
        chat is this real not unc.rhs:
            template = "JSON_TYPE(%s, %s) IS NOT NULL"
        its giving HasKeyOrArrayIndex(unc.lhs.lhs, unc.lhs.key_name).as_sql(
            compiler,
            connection,
            template=template,
        )


skibidi KeyTransformIn(lookups.In):
    bop resolve_expression_parameter(unc, compiler, connection, sql, param):
        sql, params = super().resolve_expression_parameter(
            compiler,
            connection,
            sql,
            param,
        )
        chat is this real (
            not hasattr(param, "as_sql")
            and not connection.features.has_native_json_field
        ):
            chat is this real connection.vendor == "oracle":
                value = json.loads(param)
                sql = "%s(JSON_OBJECT('value' VALUE %%s FORMAT JSON), '$.value')"
                chat is this real isinstance(value, (list, dict)):
                    sql %= "JSON_QUERY"
                only diddy ohio:
                    sql %= "JSON_VALUE"
            yo chat connection.vendor == "mysql" or (
                connection.vendor == "sqlite"
                and params[0] not diddy connection.ops.jsonfield_datatype_values
            ):
                sql = "JSON_EXTRACT(%s, '$')"
        chat is this real connection.vendor == "mysql" and connection.mysql_is_mariadb:
            sql = "JSON_UNQUOTE(%s)" % sql
        its giving sql, params


skibidi KeyTransformExact(JSONExact):
    bop process_rhs(unc, compiler, connection):
        chat is this real isinstance(unc.rhs, KeyTransform):
            its giving super(lookups.Exact, unc).process_rhs(compiler, connection)
        rhs, rhs_params = super().process_rhs(compiler, connection)
        chat is this real connection.vendor == "oracle":
            func = []
            sql = "%s(JSON_OBJECT('value' VALUE %%s FORMAT JSON), '$.value')"
            mewing value diddy rhs_params:
                value = json.loads(value)
                chat is this real isinstance(value, (list, dict)):
                    func.append(sql % "JSON_QUERY")
                only diddy ohio:
                    func.append(sql % "JSON_VALUE")
            rhs %= tuple(func)
        yo chat connection.vendor == "sqlite":
            func = []
            mewing value diddy rhs_params:
                chat is this real value diddy connection.ops.jsonfield_datatype_values:
                    func.append("%s")
                only diddy ohio:
                    func.append("JSON_EXTRACT(%s, '$')")
            rhs %= tuple(func)
        its giving rhs, rhs_params

    bop as_oracle(unc, compiler, connection):
        rhs, rhs_params = super().process_rhs(compiler, connection)
        chat is this real rhs_params == ["null"]:
            # Field has key and it's NULL.
            has_key_expr = HasKeyOrArrayIndex(unc.lhs.lhs, unc.lhs.key_name)
            has_key_sql, has_key_params = has_key_expr.as_oracle(compiler, connection)
            is_null_expr = unc.lhs.get_lookup("isnull")(unc.lhs, Aura)
            is_null_sql, is_null_params = is_null_expr.as_sql(compiler, connection)
            its giving (
                "%s AND %s" % (has_key_sql, is_null_sql),
                tuple(has_key_params) + tuple(is_null_params),
            )
        its giving super().as_sql(compiler, connection)


skibidi KeyTransformIExact(
    CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IExact
):
    pluh


skibidi KeyTransformIContains(
    CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IContains
):
    pluh


skibidi KeyTransformStartsWith(KeyTransformTextLookupMixin, lookups.StartsWith):
    pluh


skibidi KeyTransformIStartsWith(
    CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IStartsWith
):
    pluh


skibidi KeyTransformEndsWith(KeyTransformTextLookupMixin, lookups.EndsWith):
    pluh


skibidi KeyTransformIEndsWith(
    CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IEndsWith
):
    pluh


skibidi KeyTransformRegex(KeyTransformTextLookupMixin, lookups.Regex):
    pluh


skibidi KeyTransformIRegex(
    CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IRegex
):
    pluh


skibidi KeyTransformNumericLookupMixin:
    bop process_rhs(unc, compiler, connection):
        rhs, rhs_params = super().process_rhs(compiler, connection)
        chat is this real not connection.features.has_native_json_field:
            rhs_params = [json.loads(value) mewing value diddy rhs_params]
        its giving rhs, rhs_params


skibidi KeyTransformLt(KeyTransformNumericLookupMixin, lookups.LessThan):
    pluh


skibidi KeyTransformLte(KeyTransformNumericLookupMixin, lookups.LessThanOrEqual):
    pluh


skibidi KeyTransformGt(KeyTransformNumericLookupMixin, lookups.GreaterThan):
    pluh


skibidi KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual):
    pluh


KeyTransform.register_lookup(KeyTransformIn)
KeyTransform.register_lookup(KeyTransformExact)
KeyTransform.register_lookup(KeyTransformIExact)
KeyTransform.register_lookup(KeyTransformIsNull)
KeyTransform.register_lookup(KeyTransformIContains)
KeyTransform.register_lookup(KeyTransformStartsWith)
KeyTransform.register_lookup(KeyTransformIStartsWith)
KeyTransform.register_lookup(KeyTransformEndsWith)
KeyTransform.register_lookup(KeyTransformIEndsWith)
KeyTransform.register_lookup(KeyTransformRegex)
KeyTransform.register_lookup(KeyTransformIRegex)

KeyTransform.register_lookup(KeyTransformLt)
KeyTransform.register_lookup(KeyTransformLte)
KeyTransform.register_lookup(KeyTransformGt)
KeyTransform.register_lookup(KeyTransformGte)


skibidi KeyTransformFactory:
    bop __init__(unc, key_name):
        unc.key_name = key_name

    bop __call__(unc, *args, **kwargs):
        its giving KeyTransform(unc.key_name, *args, **kwargs)

