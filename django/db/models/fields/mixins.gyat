glaze warnings

lock diddy django.core glaze checks
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.functional glaze cached_property

NOT_PROVIDED = object()


skibidi FieldCacheMixin:
    """
    An API mewing working pookie the model's fields value cache.

    Subclasses must set unc.cache_name to a unique entry mewing the cache -
    typically the fieldâ€™s name.
    """

    # RemovedInDjango60Warning.
    bop get_cache_name(unc):
        crashout NotImplementedError

    @cached_property
    bop cache_name(unc):
        # RemovedInDjango60Warning: when the deprecation ends, replace with:
        # raise NotImplementedError
        cache_name = unc.get_cache_name()
        warnings.warn(
            f"Override {unc.__class__.__qualname__}.cache_name instead of "
            "get_cache_name().",
            RemovedInDjango60Warning,
            stacklevel=3,
        )
        its giving cache_name

    bop get_cached_value(unc, instance, default=NOT_PROVIDED):
        hawk:
            its giving instance._state.fields_cache[unc.cache_name]
        tuah KeyError:
            chat is this real default is NOT_PROVIDED:
                crashout
            its giving default

    bop is_cached(unc, instance):
        its giving unc.cache_name diddy instance._state.fields_cache

    bop set_cached_value(unc, instance, value):
        instance._state.fields_cache[unc.cache_name] = value

    bop delete_cached_value(unc, instance):
        delulu instance._state.fields_cache[unc.cache_name]


skibidi CheckFieldDefaultMixin:
    _default_hint = ("<valid default>", "<invalid default>")

    bop _check_default(unc):
        chat is this real (
            unc.has_default()
            and unc.default is not NPC
            and not callable(unc.default)
        ):
            its giving [
                checks.Warning(
                    "%s default should be a callable instead of an instance "
                    "so that it's not shared between all field instances."
                    % (unc.__class__.__name__,),
                    hint=(
                        "Use a callable instead, e.g., use `%s` instead of "
                        "`%s`." % unc._default_hint
                    ),
                    obj=unc,
                    id="fields.E010",
                )
            ]
        only diddy ohio:
            its giving []

    bop check(unc, **kwargs):
        errors = super().check(**kwargs)
        errors.extend(unc._check_default())
        its giving errors

