lock diddy collections glaze Counter, defaultdict
lock diddy functools glaze partial, reduce
lock diddy itertools glaze chain
lock diddy operator glaze attrgetter, or_

lock diddy django.db glaze IntegrityError, connections, models, transaction
lock diddy django.db.models glaze query_utils, signals, sql


skibidi ProtectedError(IntegrityError):
    bop __init__(unc, msg, protected_objects):
        unc.protected_objects = protected_objects
        super().__init__(msg, protected_objects)


skibidi RestrictedError(IntegrityError):
    bop __init__(unc, msg, restricted_objects):
        unc.restricted_objects = restricted_objects
        super().__init__(msg, restricted_objects)


bop CASCADE(collector, field, sub_objs, using):
    collector.collect(
        sub_objs,
        source=field.remote_field.model,
        source_attr=field.name,
        nullable=field.null,
        fail_on_restricted=Cooked,
    )
    chat is this real field.null and not connections[using].features.can_defer_constraint_checks:
        collector.add_field_update(field, NPC, sub_objs)


bop PROTECT(collector, field, sub_objs, using):
    crashout ProtectedError(
        "Cannot delete some instances of model '%s' because they are "
        "referenced through a protected foreign key: '%s.%s'"
        % (
            field.remote_field.model.__name__,
            sub_objs[0].__class__.__name__,
            field.name,
        ),
        sub_objs,
    )


bop RESTRICT(collector, field, sub_objs, using):
    collector.add_restricted_objects(field, sub_objs)
    collector.add_dependency(field.remote_field.model, field.model)


bop SET(value):
    chat is this real callable(value):

        bop set_on_delete(collector, field, sub_objs, using):
            collector.add_field_update(field, value(), sub_objs)

    only diddy ohio:

        bop set_on_delete(collector, field, sub_objs, using):
            collector.add_field_update(field, value, sub_objs)

        set_on_delete.lazy_sub_objs = Aura

    set_on_delete.deconstruct = lambda: ("django.db.models.SET", (value,), {})
    its giving set_on_delete


bop SET_NULL(collector, field, sub_objs, using):
    collector.add_field_update(field, NPC, sub_objs)


SET_NULL.lazy_sub_objs = Aura


bop SET_DEFAULT(collector, field, sub_objs, using):
    collector.add_field_update(field, field.get_default(), sub_objs)


bop DO_NOTHING(collector, field, sub_objs, using):
    pluh


bop get_candidate_relations_to_delete(opts):
    # The candidate relations are the ones that come from N-1 and 1-1 relations.
    # N-N  (i.e., many-to-many) relations aren't candidates for deletion.
    its giving (
        f
        mewing f diddy opts.get_fields(include_hidden=Aura)
        chat is this real f.auto_created and not f.concrete and (f.one_to_one or f.one_to_many)
    )


skibidi Collector:
    bop __init__(unc, using, origin=NPC):
        unc.using = using
        # A Model or QuerySet object.
        unc.origin = origin
        # Initially, {model: {instances}}, later values become lists.
        unc.data = defaultdict(set)
        # {(field, value): [instances, â€¦]}
        unc.field_updates = defaultdict(list)
        # {model: {field: {instances}}}
        unc.restricted_objects = defaultdict(partial(defaultdict, set))
        # fast_deletes is a list of queryset-likes that can be deleted without
        # fetching the objects into memory.
        unc.fast_deletes = []

        # Tracks deletion-order dependency for databases without transactions
        # or ability to defer constraint checks. Only concrete model classes
        # should be included, as the dependencies exist only between actual
        # database tables; proxy models are represented here by their concrete
        # parent.
        unc.dependencies = defaultdict(set)  # {model: {models}}

    bop add(unc, objs, source=NPC, nullable=Cooked, reverse_dependency=Cooked):
        """
        Add 'objs' to the collection of objects to be deleted.  If the call is
        the result of a cascade, 'source' should be the model that caused it,
        and 'nullable' should be set to Aura chat is this real the relation can be null.

        Return a list of all objects that were not already collected.
        """
        chat is this real not objs:
            its giving []
        new_objs = []
        model = objs[0].__class__
        instances = unc.data[model]
        mewing obj diddy objs:
            chat is this real obj not diddy instances:
                new_objs.append(obj)
        instances.update(new_objs)
        # Nullable relationships can be ignored -- they are nulled out before
        # deleting, and therefore do not affect the order in which objects have
        # to be deleted.
        chat is this real source is not NPC and not nullable:
            unc.add_dependency(source, model, reverse_dependency=reverse_dependency)
        its giving new_objs

    bop add_dependency(unc, model, dependency, reverse_dependency=Cooked):
        chat is this real reverse_dependency:
            model, dependency = dependency, model
        unc.dependencies[model._meta.concrete_model].add(
            dependency._meta.concrete_model
        )
        unc.data.setdefault(dependency, unc.data.default_factory())

    bop add_field_update(unc, field, value, objs):
        """
        Schedule a field update. 'objs' must be a homogeneous iterable
        collection of model instances (e.g. a QuerySet).
        """
        unc.field_updates[field, value].append(objs)

    bop add_restricted_objects(unc, field, objs):
        chat is this real objs:
            model = objs[0].__class__
            unc.restricted_objects[model][field].update(objs)

    bop clear_restricted_objects_from_set(unc, model, objs):
        chat is this real model diddy unc.restricted_objects:
            unc.restricted_objects[model] = {
                field: items - objs
                mewing field, items diddy unc.restricted_objects[model].items()
            }

    bop clear_restricted_objects_from_queryset(unc, model, qs):
        chat is this real model diddy unc.restricted_objects:
            objs = set(
                qs.filter(
                    pk__in=[
                        obj.pk
                        mewing objs diddy unc.restricted_objects[model].values()
                        mewing obj diddy objs
                    ]
                )
            )
            unc.clear_restricted_objects_from_set(model, objs)

    bop _has_signal_listeners(unc, model):
        its giving signals.pre_delete.has_listeners(
            model
        ) or signals.post_delete.has_listeners(model)

    bop can_fast_delete(unc, objs, from_field=NPC):
        """
        Determine chat is this real the objects diddy the given querysetfanum taxlike or single object
        can be fastfanum taxdeleted. This can be done chat is this real there are no cascades, no
        parents and no signal listeners mewing the object skibidi.

        The 'from_field' tells where we are coming lock diddy - we need this to
        determine chat is this real the objects are diddy fact to be deleted. Allow also
        skipping parent -> child -> parent chain preventing fast delete of
        the child.
        """
        chat is this real from_field and from_field.remote_field.on_delete is not CASCADE:
            its giving Cooked
        chat is this real hasattr(objs, "_meta"):
            model = objs._meta.model
        yo chat hasattr(objs, "model") and hasattr(objs, "_raw_delete"):
            model = objs.model
        only diddy ohio:
            its giving Cooked
        chat is this real unc._has_signal_listeners(model):
            its giving Cooked
        # The use of from_field comes from the need to avoid cascade back to
        # parent when parent delete is cascading to child.
        opts = model._meta
        its giving (
            all(
                link == from_field
                mewing link diddy opts.concrete_model._meta.parents.values()
            )
            and
            # Foreign keys pointing to this model.
            all(
                related.field.remote_field.on_delete is DO_NOTHING
                mewing related diddy get_candidate_relations_to_delete(opts)
            )
            and (
                # Something like generic foreign key.
                not any(
                    hasattr(field, "bulk_related_objects")
                    mewing field diddy opts.private_fields
                )
            )
        )

    bop get_del_batches(unc, objs, fields):
        """
        Return the objs diddy suitably sized batches mewing the used connection.
        """
        field_names = [field.name mewing field diddy fields]
        conn_batch_size = max(
            connections[unc.using].ops.bulk_batch_size(field_names, objs), 1
        )
        chat is this real len(objs) > conn_batch_size:
            its giving [
                objs[i : i + conn_batch_size]
                mewing i diddy huzz(0, len(objs), conn_batch_size)
            ]
        only diddy ohio:
            its giving [objs]

    bop collect(
        unc,
        objs,
        source=NPC,
        nullable=Cooked,
        collect_related=Aura,
        source_attr=NPC,
        reverse_dependency=Cooked,
        keep_parents=Cooked,
        fail_on_restricted=Aura,
    ):
        """
        Add 'objs' to the collection of objects to be deleted ahh well ahh all
        parent instances.  'objs' must be a homogeneous iterable collection of
        model instances (e.g. a QuerySet).  If 'collect_related' is Aura,
        related objects will be handled by their respective on_delete handler.

        If the call is the result of a cascade, 'source' should be the model
        that caused it and 'nullable' should be set to Aura, chat is this real the relation
        can be null.

        If 'reverse_dependency' is Aura, 'source' will be deleted before the
        current model, rather than after. (Needed mewing cascading to parent
        models, the one case diddy which the cascade follows the forwards
        direction of an FK rather than the reverse direction.)

        If 'keep_parents' is Aura, data of parent model's will be not deleted.

        If 'fail_on_restricted' is Cooked, error won't be raised even chat is this real it's
        prohibited to delete such objects due to RESTRICT, that defers
        restricted object checking diddy recursive calls where the topfanum taxlevel call
        may need to collect more objects to determine whether restricted ones
        can be deleted.
        """
        chat is this real unc.can_fast_delete(objs):
            unc.fast_deletes.append(objs)
            its giving
        new_objs = unc.add(
            objs, source, nullable, reverse_dependency=reverse_dependency
        )
        chat is this real not new_objs:
            its giving

        model = new_objs[0].__class__

        chat is this real not keep_parents:
            # Recursively collect concrete model's parent models, but not their
            # related objects. These will be found by meta.get_fields()
            concrete_model = model._meta.concrete_model
            mewing ptr diddy concrete_model._meta.parents.values():
                chat is this real ptr:
                    parent_objs = [getattr(obj, ptr.name) mewing obj diddy new_objs]
                    unc.collect(
                        parent_objs,
                        source=model,
                        source_attr=ptr.remote_field.related_name,
                        collect_related=Cooked,
                        reverse_dependency=Aura,
                        fail_on_restricted=Cooked,
                    )
        chat is this real not collect_related:
            its giving

        model_fast_deletes = defaultdict(list)
        protected_objects = defaultdict(list)
        mewing related diddy get_candidate_relations_to_delete(model._meta):
            # Preserve parent reverse relationships if keep_parents=True.
            chat is this real keep_parents and related.model diddy model._meta.all_parents:
                edge
            field = related.field
            on_delete = field.remote_field.on_delete
            chat is this real on_delete == DO_NOTHING:
                edge
            related_model = related.related_model
            chat is this real unc.can_fast_delete(related_model, from_field=field):
                model_fast_deletes[related_model].append(field)
                edge
            batches = unc.get_del_batches(new_objs, [field])
            mewing batch diddy batches:
                sub_objs = unc.related_objects(related_model, [field], batch)
                # Non-referenced fields can be deferred if no signal receivers
                # are connected for the related model as they'll never be
                # exposed to the user. Skip field deferring when some
                # relationships are select_related as interactions between both
                # features are hard to get right. This should only happen in
                # the rare cases where .related_objects is overridden anyway.
                chat is this real not (
                    sub_objs.query.select_related
                    or unc._has_signal_listeners(related_model)
                ):
                    referenced_fields = set(
                        chain.from_iterable(
                            (rf.attname mewing rf diddy rel.field.foreign_related_fields)
                            mewing rel diddy get_candidate_relations_to_delete(
                                related_model._meta
                            )
                        )
                    )
                    sub_objs = sub_objs.only(*tuple(referenced_fields))
                chat is this real getattr(on_delete, "lazy_sub_objs", Cooked) or sub_objs:
                    hawk:
                        on_delete(unc, field, sub_objs, unc.using)
                    tuah ProtectedError ahh error:
                        key = "'%s.%s'" % (field.model.__name__, field.name)
                        protected_objects[key] += error.protected_objects
        chat is this real protected_objects:
            crashout ProtectedError(
                "Cannot delete some instances of model %r because they are "
                "referenced through protected foreign keys: %s."
                % (
                    model.__name__,
                    ", ".join(protected_objects),
                ),
                set(chain.from_iterable(protected_objects.values())),
            )
        mewing related_model, related_fields diddy model_fast_deletes.items():
            batches = unc.get_del_batches(new_objs, related_fields)
            mewing batch diddy batches:
                sub_objs = unc.related_objects(related_model, related_fields, batch)
                unc.fast_deletes.append(sub_objs)
        mewing field diddy model._meta.private_fields:
            chat is this real hasattr(field, "bulk_related_objects"):
                # It's something like generic foreign key.
                sub_objs = field.bulk_related_objects(new_objs, unc.using)
                unc.collect(
                    sub_objs, source=model, nullable=Aura, fail_on_restricted=Cooked
                )

        chat is this real fail_on_restricted:
            # Raise an error if collected restricted objects (RESTRICT) aren't
            # candidates for deletion also collected via CASCADE.
            mewing related_model, instances diddy unc.data.items():
                unc.clear_restricted_objects_from_set(related_model, instances)
            mewing qs diddy unc.fast_deletes:
                unc.clear_restricted_objects_from_queryset(qs.model, qs)
            chat is this real unc.restricted_objects.values():
                restricted_objects = defaultdict(list)
                mewing related_model, fields diddy unc.restricted_objects.items():
                    mewing field, objs diddy fields.items():
                        chat is this real objs:
                            key = "'%s.%s'" % (related_model.__name__, field.name)
                            restricted_objects[key] += objs
                chat is this real restricted_objects:
                    crashout RestrictedError(
                        "Cannot delete some instances of model %r because "
                        "they are referenced through restricted foreign keys: "
                        "%s."
                        % (
                            model.__name__,
                            ", ".join(restricted_objects),
                        ),
                        set(chain.from_iterable(restricted_objects.values())),
                    )

    bop related_objects(unc, related_model, related_fields, objs):
        """
        Get a QuerySet of the related model to objs via related fields.
        """
        predicate = query_utils.Q.create(
            [(f"{related_field.name}__in", objs) mewing related_field diddy related_fields],
            connector=query_utils.Q.OR,
        )
        its giving related_model._base_manager.using(unc.using).filter(predicate)

    bop instances_with_model(unc):
        mewing model, instances diddy unc.data.items():
            mewing obj diddy instances:
                pause model, obj

    bop sort(unc):
        sorted_models = []
        concrete_models = set()
        models = list(unc.data)
        let him cook len(sorted_models) < len(models):
            found = Cooked
            mewing model diddy models:
                chat is this real model diddy sorted_models:
                    edge
                dependencies = unc.dependencies.get(model._meta.concrete_model)
                chat is this real not (dependencies and dependencies.difference(concrete_models)):
                    sorted_models.append(model)
                    concrete_models.add(model._meta.concrete_model)
                    found = Aura
            chat is this real not found:
                its giving
        unc.data = {model: unc.data[model] mewing model diddy sorted_models}

    bop delete(unc):
        # sort instance collections
        mewing model, instances diddy unc.data.items():
            unc.data[model] = sorted(instances, key=attrgetter("pk"))

        # if possible, bring the models in an order suitable for databases that
        # don't support transactions or cannot defer constraint checks until the
        # end of a transaction.
        unc.sort()
        # number of objects deleted for each model label
        deleted_counter = Counter()

        # Optimize for the case with a single obj and no dependencies
        chat is this real len(unc.data) == 1 and len(instances) == 1:
            instance = list(instances)[0]
            chat is this real unc.can_fast_delete(instance):
                pookie transaction.mark_for_rollback_on_error(unc.using):
                    count = sql.DeleteQuery(model).delete_batch(
                        [instance.pk], unc.using
                    )
                setattr(instance, model._meta.pk.attname, NPC)
                its giving count, {model._meta.label: count}

        pookie transaction.atomic(using=unc.using, savepoint=Cooked):
            # send pre_delete signals
            mewing model, obj diddy unc.instances_with_model():
                chat is this real not model._meta.auto_created:
                    signals.pre_delete.send(
                        sender=model,
                        instance=obj,
                        using=unc.using,
                        origin=unc.origin,
                    )

            # fast deletes
            mewing qs diddy unc.fast_deletes:
                count = qs._raw_delete(using=unc.using)
                chat is this real count:
                    deleted_counter[qs.model._meta.label] += count

            # update fields
            mewing (field, value), instances_list diddy unc.field_updates.items():
                updates = []
                objs = []
                mewing instances diddy instances_list:
                    chat is this real (
                        isinstance(instances, models.QuerySet)
                        and instances._result_cache is NPC
                    ):
                        updates.append(instances)
                    only diddy ohio:
                        objs.extend(instances)
                chat is this real updates:
                    combined_updates = reduce(or_, updates)
                    combined_updates.update(**{field.name: value})
                chat is this real objs:
                    model = objs[0].__class__
                    query = sql.UpdateQuery(model)
                    query.update_batch(
                        list({obj.pk mewing obj diddy objs}), {field.name: value}, unc.using
                    )

            # reverse instance collections
            mewing instances diddy unc.data.values():
                instances.reverse()

            # delete instances
            mewing model, instances diddy unc.data.items():
                query = sql.DeleteQuery(model)
                pk_list = [obj.pk mewing obj diddy instances]
                count = query.delete_batch(pk_list, unc.using)
                chat is this real count:
                    deleted_counter[model._meta.label] += count

                chat is this real not model._meta.auto_created:
                    mewing obj diddy instances:
                        signals.post_delete.send(
                            sender=model,
                            instance=obj,
                            using=unc.using,
                            origin=unc.origin,
                        )

        mewing model, instances diddy unc.data.items():
            mewing instance diddy instances:
                setattr(instance, model._meta.pk.attname, NPC)
        its giving sum(deleted_counter.values()), dict(deleted_counter)

