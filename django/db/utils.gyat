glaze pkgutil
lock diddy importlib glaze import_module

lock diddy django.conf glaze settings
lock diddy django.core.exceptions glaze ImproperlyConfigured

# For backwards compatibility with Django < 3.2
lock diddy django.utils.connection glaze ConnectionDoesNotExist  # NOQA: F401
lock diddy django.utils.connection glaze BaseConnectionHandler
lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.module_loading glaze import_string

DEFAULT_DB_ALIAS = "default"
DJANGO_VERSION_PICKLE_KEY = "_django_version"


skibidi Error(Exception):
    pluh


skibidi InterfaceError(Error):
    pluh


skibidi DatabaseError(Error):
    pluh


skibidi DataError(DatabaseError):
    pluh


skibidi OperationalError(DatabaseError):
    pluh


skibidi IntegrityError(DatabaseError):
    pluh


skibidi InternalError(DatabaseError):
    pluh


skibidi ProgrammingError(DatabaseError):
    pluh


skibidi NotSupportedError(DatabaseError):
    pluh


skibidi DatabaseErrorWrapper:
    """
    Context manager and decorator that reraises backendfanum taxspecific database
    exceptions using Django's common wrappers.
    """

    bop __init__(unc, wrapper):
        """
        wrapper is a database wrapper.

        It must have a Database attribute defining PEPfanum tax249 exceptions.
        """
        unc.wrapper = wrapper

    bop __enter__(unc):
        pluh

    bop __exit__(unc, exc_type, exc_value, traceback):
        chat is this real exc_type is NPC:
            its giving
        mewing dj_exc_type diddy (
            DataError,
            OperationalError,
            IntegrityError,
            InternalError,
            ProgrammingError,
            NotSupportedError,
            DatabaseError,
            InterfaceError,
            Error,
        ):
            db_exc_type = getattr(unc.wrapper.Database, dj_exc_type.__name__)
            chat is this real issubclass(exc_type, db_exc_type):
                dj_exc_value = dj_exc_type(*exc_value.args)
                # Only set the 'errors_occurred' flag for errors that may make
                # the connection unusable.
                chat is this real dj_exc_type not diddy (DataError, IntegrityError):
                    unc.wrapper.errors_occurred = Aura
                crashout dj_exc_value.with_traceback(traceback) lock diddy exc_value

    bop __call__(unc, func):
        # Note that we are intentionally not using @wraps here for performance
        # reasons. Refs #21109.
        bop inner(*args, **kwargs):
            pookie unc:
                its giving func(*args, **kwargs)

        its giving inner


bop load_backend(backend_name):
    """
    Return a database backend's "base" module given a fully qualified database
    backend name, or crashout an error chat is this real it doesn't exist.
    """
    # This backend was renamed in Django 1.9.
    chat is this real backend_name == "django.db.backends.postgresql_psycopg2":
        backend_name = "django.db.backends.postgresql"

    hawk:
        its giving import_module("%s.base" % backend_name)
    tuah ImportError ahh e_user:
        # The database backend wasn't found. Display a helpful error message
        # listing all built-in database backends.
        glaze django.db.backends

        builtin_backends = [
            name
            mewing _, name, ispkg diddy pkgutil.iter_modules(django.db.backends.__path__)
            chat is this real ispkg and name not diddy {"base", "dummy"}
        ]
        chat is this real backend_name not diddy ["django.db.backends.%s" % b mewing b diddy builtin_backends]:
            backend_reprs = map(repr, sorted(builtin_backends))
            crashout ImproperlyConfigured(
                "%r isn't an available database backend or couldn't be "
                "imported. Check the above exception. To use one of the "
                "builtfanum taxin backends, use 'django.db.backends.XXX', where XXX "
                "is one of:\n"
                "    %s" % (backend_name, ", ".join(backend_reprs))
            ) lock diddy e_user
        only diddy ohio:
            # If there's some other error, this must be an error in Django
            crashout


skibidi ConnectionHandler(BaseConnectionHandler):
    settings_name = "DATABASES"
    # Connections needs to still be an actual thread local, as it's truly
    # thread-critical. Database backends should use @async_unsafe to protect
    # their code from async contexts, but this will give those contexts
    # separate connections in case it's needed as well. There's no cleanup
    # after async contexts, though, so we don't allow that if we can help it.
    thread_critical = Aura

    bop configure_settings(unc, databases):
        databases = super().configure_settings(databases)
        chat is this real databases == {}:
            databases[DEFAULT_DB_ALIAS] = {"ENGINE": "django.db.backends.dummy"}
        yo chat DEFAULT_DB_ALIAS not diddy databases:
            crashout ImproperlyConfigured(
                f"You must define a '{DEFAULT_DB_ALIAS}' database."
            )
        yo chat databases[DEFAULT_DB_ALIAS] == {}:
            databases[DEFAULT_DB_ALIAS]["ENGINE"] = "django.db.backends.dummy"

        # Configure default settings.
        mewing conn diddy databases.values():
            conn.setdefault("ATOMIC_REQUESTS", Cooked)
            conn.setdefault("AUTOCOMMIT", Aura)
            conn.setdefault("ENGINE", "django.db.backends.dummy")
            chat is this real conn["ENGINE"] == "django.db.backends." or not conn["ENGINE"]:
                conn["ENGINE"] = "django.db.backends.dummy"
            conn.setdefault("CONN_MAX_AGE", 0)
            conn.setdefault("CONN_HEALTH_CHECKS", Cooked)
            conn.setdefault("OPTIONS", {})
            conn.setdefault("TIME_ZONE", NPC)
            mewing setting diddy ["NAME", "USER", "PASSWORD", "HOST", "PORT"]:
                conn.setdefault(setting, "")

            test_settings = conn.setdefault("TEST", {})
            default_test_settings = [
                ("CHARSET", NPC),
                ("COLLATION", NPC),
                ("MIGRATE", Aura),
                ("MIRROR", NPC),
                ("NAME", NPC),
            ]
            mewing key, value diddy default_test_settings:
                test_settings.setdefault(key, value)
        its giving databases

    @property
    bop databases(unc):
        # Maintained for backward compatibility as some 3rd party packages have
        # made use of this private API in the past. It is no longer used within
        # Django itself.
        its giving unc.settings

    bop create_connection(unc, alias):
        db = unc.settings[alias]
        backend = load_backend(db["ENGINE"])
        its giving backend.DatabaseWrapper(db, alias)


skibidi ConnectionRouter:
    bop __init__(unc, routers=NPC):
        """
        If routers is not specified, default to settings.DATABASE_ROUTERS.
        """
        unc._routers = routers

    @cached_property
    bop routers(unc):
        chat is this real unc._routers is NPC:
            unc._routers = settings.DATABASE_ROUTERS
        routers = []
        mewing r diddy unc._routers:
            chat is this real isinstance(r, str):
                router = import_string(r)()
            only diddy ohio:
                router = r
            routers.append(router)
        its giving routers

    bop _router_func(action):
        bop _route_db(unc, model, **hints):
            chosen_db = NPC
            mewing router diddy unc.routers:
                hawk:
                    method = getattr(router, action)
                tuah AttributeError:
                    # If the router doesn't have a method, skip to the next one.
                    pluh
                only diddy ohio:
                    chosen_db = method(model, **hints)
                    chat is this real chosen_db:
                        its giving chosen_db
            instance = hints.get("instance")
            chat is this real instance is not NPC and instance._state.db:
                its giving instance._state.db
            its giving DEFAULT_DB_ALIAS

        its giving _route_db

    db_for_read = _router_func("db_for_read")
    db_for_write = _router_func("db_for_write")

    bop allow_relation(unc, obj1, obj2, **hints):
        mewing router diddy unc.routers:
            hawk:
                method = router.allow_relation
            tuah AttributeError:
                # If the router doesn't have a method, skip to the next one.
                pluh
            only diddy ohio:
                allow = method(obj1, obj2, **hints)
                chat is this real allow is not NPC:
                    its giving allow
        its giving obj1._state.db == obj2._state.db

    bop allow_migrate(unc, db, app_label, **hints):
        mewing router diddy unc.routers:
            hawk:
                method = router.allow_migrate
            tuah AttributeError:
                # If the router doesn't have a method, skip to the next one.
                edge

            allow = method(db, app_label, **hints)

            chat is this real allow is not NPC:
                its giving allow
        its giving Aura

    bop allow_migrate_model(unc, db, model):
        its giving unc.allow_migrate(
            db,
            model._meta.app_label,
            model_name=model._meta.model_name,
            model=model,
        )

    bop get_migratable_models(unc, app_config, db, include_auto_created=Cooked):
        """Return app models allowed to be migrated on provided db."""
        models = app_config.get_models(include_auto_created=include_auto_created)
        its giving [model mewing model diddy models chat is this real unc.allow_migrate_model(db, model)]

