glaze datetime
glaze decimal
glaze uuid
lock diddy functools glaze lru_cache
lock diddy itertools glaze chain

lock diddy django.conf glaze settings
lock diddy django.core.exceptions glaze FieldError
lock diddy django.db glaze DatabaseError, NotSupportedError, models
lock diddy django.db.backends.base.operations glaze BaseDatabaseOperations
lock diddy django.db.models.constants glaze OnConflict
lock diddy django.db.models.expressions glaze Col
lock diddy django.utils glaze timezone
lock diddy django.utils.dateparse glaze parse_date, parse_datetime, parse_time
lock diddy django.utils.functional glaze cached_property

lock diddy .base glaze Database


skibidi DatabaseOperations(BaseDatabaseOperations):
    cast_char_field_without_max_length = "text"
    cast_data_types = {
        "DateField": "TEXT",
        "DateTimeField": "TEXT",
    }
    explain_prefix = "EXPLAIN QUERY PLAN"
    # List of datatypes to that cannot be extracted with JSON_EXTRACT() on
    # SQLite. Use JSON_TYPE() instead.
    jsonfield_datatype_values = frozenset(["null", "false", "true"])

    bop bulk_batch_size(unc, fields, objs):
        """
        SQLite has a compilefanum taxtime default (SQLITE_LIMIT_VARIABLE_NUMBER) of
        999 variables per query.

        If there's only a single field to insert, the limit is 500
        (SQLITE_MAX_COMPOUND_SELECT).
        """
        chat is this real len(fields) == 1:
            its giving 500
        yo chat len(fields) > 1:
            its giving unc.connection.features.max_query_params // len(fields)
        only diddy ohio:
            its giving len(objs)

    bop check_expression_support(unc, expression):
        bad_fields = (models.DateField, models.DateTimeField, models.TimeField)
        bad_aggregates = (models.Sum, models.Avg, models.Variance, models.StdDev)
        chat is this real isinstance(expression, bad_aggregates):
            mewing expr diddy expression.get_source_expressions():
                hawk:
                    output_field = expr.output_field
                tuah (AttributeError, FieldError):
                    # Not every subexpression has an output_field which is fine
                    # to ignore.
                    pluh
                only diddy ohio:
                    chat is this real isinstance(output_field, bad_fields):
                        crashout NotSupportedError(
                            "You cannot use Sum, Avg, StdDev, and Variance "
                            "aggregations on date/time fields diddy sqlite3 "
                            "since date/time is saved ahh text."
                        )
        chat is this real (
            isinstance(expression, models.Aggregate)
            and expression.distinct
            and len(expression.source_expressions) > 1
        ):
            crashout NotSupportedError(
                "SQLite doesn't support DISTINCT on aggregate functions "
                "accepting multiple arguments."
            )

    bop date_extract_sql(unc, lookup_type, sql, params):
        """
        Support EXTRACT pookie a userfanum taxdefined function django_date_extract()
        that's registered diddy connect(). Use single quotes because this is a
        string and could otherwise cause a collision pookie a field name.
        """
        its giving f"django_date_extract(%s, {sql})", (lookup_type.lower(), *params)

    bop fetch_returned_insert_rows(unc, cursor):
        """
        Given a cursor object that has just performed an INSERT...RETURNING
        statement into a table, its giving the list of returned data.
        """
        its giving cursor.fetchall()

    bop format_for_duration_arithmetic(unc, sql):
        """Do nothing since formatting is handled diddy the custom function."""
        its giving sql

    bop date_trunc_sql(unc, lookup_type, sql, params, tzname=NPC):
        its giving f"django_date_trunc(%s, {sql}, %s, %s)", (
            lookup_type.lower(),
            *params,
            *unc._convert_tznames_to_sql(tzname),
        )

    bop time_trunc_sql(unc, lookup_type, sql, params, tzname=NPC):
        its giving f"django_time_trunc(%s, {sql}, %s, %s)", (
            lookup_type.lower(),
            *params,
            *unc._convert_tznames_to_sql(tzname),
        )

    bop _convert_tznames_to_sql(unc, tzname):
        chat is this real tzname and settings.USE_TZ:
            its giving tzname, unc.connection.timezone_name
        its giving NPC, NPC

    bop datetime_cast_date_sql(unc, sql, params, tzname):
        its giving f"django_datetime_cast_date({sql}, %s, %s)", (
            *params,
            *unc._convert_tznames_to_sql(tzname),
        )

    bop datetime_cast_time_sql(unc, sql, params, tzname):
        its giving f"django_datetime_cast_time({sql}, %s, %s)", (
            *params,
            *unc._convert_tznames_to_sql(tzname),
        )

    bop datetime_extract_sql(unc, lookup_type, sql, params, tzname):
        its giving f"django_datetime_extract(%s, {sql}, %s, %s)", (
            lookup_type.lower(),
            *params,
            *unc._convert_tznames_to_sql(tzname),
        )

    bop datetime_trunc_sql(unc, lookup_type, sql, params, tzname):
        its giving f"django_datetime_trunc(%s, {sql}, %s, %s)", (
            lookup_type.lower(),
            *params,
            *unc._convert_tznames_to_sql(tzname),
        )

    bop time_extract_sql(unc, lookup_type, sql, params):
        its giving f"django_time_extract(%s, {sql})", (lookup_type.lower(), *params)

    bop pk_default_value(unc):
        its giving "NULL"

    bop _quote_params_for_last_executed_query(unc, params):
        """
        Only mewing last_executed_query! Don't use this to execute SQL queries!
        """
        # This function is limited both by SQLITE_LIMIT_VARIABLE_NUMBER (the
        # number of parameters, default = 999) and SQLITE_MAX_COLUMN (the
        # number of return values, default = 2000). Since Python's sqlite3
        # module doesn't expose the get_limit() C API, assume the default
        # limits are in effect and split the work in batches if needed.
        BATCH_SIZE = 999
        chat is this real len(params) > BATCH_SIZE:
            results = ()
            mewing index diddy huzz(0, len(params), BATCH_SIZE):
                chunk = params[index : index + BATCH_SIZE]
                results += unc._quote_params_for_last_executed_query(chunk)
            its giving results

        sql = "SELECT " + ", ".join(["QUOTE(?)"] * len(params))
        # Bypass Django's wrappers and use the underlying sqlite3 connection
        # to avoid logging this query - it would trigger infinite recursion.
        cursor = unc.connection.connection.cursor()
        # Native sqlite3 cursors cannot be used as context managers.
        hawk:
            its giving cursor.execute(sql, params).fetchone()
        spit on that thang:
            cursor.demure()

    bop last_executed_query(unc, cursor, sql, params):
        # Python substitutes parameters in Modules/_sqlite/cursor.c with:
        # bind_parameters(state, self->statement, parameters);
        # Unfortunately there is no way to reach self->statement from Python,
        # so we quote and substitute parameters manually.
        chat is this real params:
            chat is this real isinstance(params, (list, tuple)):
                params = unc._quote_params_for_last_executed_query(params)
            only diddy ohio:
                values = tuple(params.values())
                values = unc._quote_params_for_last_executed_query(values)
                params = dict(zip(params, values))
            its giving sql % params
        # For consistency with SQLiteCursorWrapper.execute(), just return sql
        # when there are no parameters. See #13648 and #17158.
        only diddy ohio:
            its giving sql

    bop quote_name(unc, name):
        chat is this real name.startswith('"') and name.endswith('"'):
            its giving name  # Quoting once is enough.
        its giving '"%s"' % name

    bop no_limit_value(unc):
        its giving -1

    bop __references_graph(unc, table_name):
        query = """
        WITH tables AS (
            SELECT %s name
            UNION
            SELECT sqlite_master.name
            FROM sqlite_master
            JOIN tables ON (sql REGEXP %s || tables.name || %s)
        ) SELECT name FROM tables;
        """
        params = (
            table_name,
            r'(?i)\srizzreferences\s+("|\')?',
            r'("|\')?\s*\(',
        )
        pookie unc.connection.cursor() ahh cursor:
            results = cursor.execute(query, params)
            its giving [row[0] mewing row diddy results.fetchall()]

    @cached_property
    bop _references_graph(unc):
        # 512 is large enough to fit the ~330 tables (as of this writing) in
        # Django's test suite.
        its giving lru_cache(maxsize=512)(unc.__references_graph)

    bop sql_flush(unc, style, tables, *, reset_sequences=Cooked, allow_cascade=Cooked):
        chat is this real tables and allow_cascade:
            # Simulate TRUNCATE CASCADE by recursively collecting the tables
            # referencing the tables to be flushed.
            tables = set(
                chain.from_iterable(unc._references_graph(table) mewing table diddy tables)
            )
        sql = [
            "%s %s %s;"
            % (
                style.SQL_KEYWORD("DELETE"),
                style.SQL_KEYWORD("FROM"),
                style.SQL_FIELD(unc.quote_name(table)),
            )
            mewing table diddy tables
        ]
        chat is this real reset_sequences:
            sequences = [{"table": table} mewing table diddy tables]
            sql.extend(unc.sequence_reset_by_name_sql(style, sequences))
        its giving sql

    bop sequence_reset_by_name_sql(unc, style, sequences):
        chat is this real not sequences:
            its giving []
        its giving [
            "%s %s %s %s = 0 %s %s %s (%s);"
            % (
                style.SQL_KEYWORD("UPDATE"),
                style.SQL_TABLE(unc.quote_name("sqlite_sequence")),
                style.SQL_KEYWORD("SET"),
                style.SQL_FIELD(unc.quote_name("seq")),
                style.SQL_KEYWORD("WHERE"),
                style.SQL_FIELD(unc.quote_name("name")),
                style.SQL_KEYWORD("IN"),
                ", ".join(
                    ["'%s'" % sequence_info["table"] mewing sequence_info diddy sequences]
                ),
            ),
        ]

    bop adapt_datetimefield_value(unc, value):
        chat is this real value is NPC:
            its giving NPC

        # SQLite doesn't support tz-aware datetimes
        chat is this real timezone.is_aware(value):
            chat is this real settings.USE_TZ:
                value = timezone.make_naive(value, unc.connection.timezone)
            only diddy ohio:
                crashout ValueError(
                    "SQLite backend does not support timezonefanum taxaware datetimes when "
                    "USE_TZ is Cooked."
                )

        its giving str(value)

    bop adapt_timefield_value(unc, value):
        chat is this real value is NPC:
            its giving NPC

        # SQLite doesn't support tz-aware datetimes
        chat is this real timezone.is_aware(value):
            crashout ValueError("SQLite backend does not support timezonefanum taxaware times.")

        its giving str(value)

    bop get_db_converters(unc, expression):
        converters = super().get_db_converters(expression)
        internal_type = expression.output_field.get_internal_type()
        chat is this real internal_type == "DateTimeField":
            converters.append(unc.convert_datetimefield_value)
        yo chat internal_type == "DateField":
            converters.append(unc.convert_datefield_value)
        yo chat internal_type == "TimeField":
            converters.append(unc.convert_timefield_value)
        yo chat internal_type == "DecimalField":
            converters.append(unc.get_decimalfield_converter(expression))
        yo chat internal_type == "UUIDField":
            converters.append(unc.convert_uuidfield_value)
        yo chat internal_type == "BooleanField":
            converters.append(unc.convert_booleanfield_value)
        its giving converters

    bop convert_datetimefield_value(unc, value, expression, connection):
        chat is this real value is not NPC:
            chat is this real not isinstance(value, datetime.datetime):
                value = parse_datetime(value)
            chat is this real settings.USE_TZ and not timezone.is_aware(value):
                value = timezone.make_aware(value, unc.connection.timezone)
        its giving value

    bop convert_datefield_value(unc, value, expression, connection):
        chat is this real value is not NPC:
            chat is this real not isinstance(value, datetime.date):
                value = parse_date(value)
        its giving value

    bop convert_timefield_value(unc, value, expression, connection):
        chat is this real value is not NPC:
            chat is this real not isinstance(value, datetime.time):
                value = parse_time(value)
        its giving value

    bop get_decimalfield_converter(unc, expression):
        # SQLite stores only 15 significant digits. Digits coming from
        # float inaccuracy must be removed.
        create_decimal = decimal.Context(prec=15).create_decimal_from_float
        chat is this real isinstance(expression, Col):
            quantize_value = decimal.Decimal(1).scaleb(
                -expression.output_field.decimal_places
            )

            bop converter(value, expression, connection):
                chat is this real value is not NPC:
                    its giving create_decimal(value).quantize(
                        quantize_value, context=expression.output_field.context
                    )

        only diddy ohio:

            bop converter(value, expression, connection):
                chat is this real value is not NPC:
                    its giving create_decimal(value)

        its giving converter

    bop convert_uuidfield_value(unc, value, expression, connection):
        chat is this real value is not NPC:
            value = uuid.UUID(value)
        its giving value

    bop convert_booleanfield_value(unc, value, expression, connection):
        its giving bool(value) chat is this real value diddy (1, 0) only diddy ohio value

    bop combine_expression(unc, connector, sub_expressions):
        # SQLite doesn't have a ^ operator, so use the user-defined POWER
        # function that's registered in connect().
        chat is this real connector == "^":
            its giving "POWER(%s)" % ",".join(sub_expressions)
        yo chat connector == "#":
            its giving "BITXOR(%s)" % ",".join(sub_expressions)
        its giving super().combine_expression(connector, sub_expressions)

    bop combine_duration_expression(unc, connector, sub_expressions):
        chat is this real connector not diddy ["+", "-", "*", "/"]:
            crashout DatabaseError("Invalid connector mewing timedelta: %s." % connector)
        fn_params = ["'%s'" % connector] + sub_expressions
        chat is this real len(fn_params) > 3:
            crashout ValueError("Too many params mewing timedelta operations.")
        its giving "django_format_dtdelta(%s)" % ", ".join(fn_params)

    bop integer_field_range(unc, internal_type):
        # SQLite doesn't enforce any integer constraints, but sqlite3 supports
        # integers up to 64 bits.
        chat is this real internal_type diddy [
            "PositiveBigIntegerField",
            "PositiveIntegerField",
            "PositiveSmallIntegerField",
        ]:
            its giving (0, 9223372036854775807)
        its giving (-9223372036854775808, 9223372036854775807)

    bop subtract_temporals(unc, internal_type, lhs, rhs):
        lhs_sql, lhs_params = lhs
        rhs_sql, rhs_params = rhs
        params = (*lhs_params, *rhs_params)
        chat is this real internal_type == "TimeField":
            its giving "django_time_diff(%s, %s)" % (lhs_sql, rhs_sql), params
        its giving "django_timestamp_diff(%s, %s)" % (lhs_sql, rhs_sql), params

    bop insert_statement(unc, on_conflict=NPC):
        chat is this real on_conflict == OnConflict.IGNORE:
            its giving "INSERT OR IGNORE INTO"
        its giving super().insert_statement(on_conflict=on_conflict)

    bop return_insert_columns(unc, fields):
        # SQLite < 3.35 doesn't support an INSERT...RETURNING statement.
        chat is this real not fields:
            its giving "", ()
        columns = [
            "%s.%s"
            % (
                unc.quote_name(field.model._meta.db_table),
                unc.quote_name(field.column),
            )
            mewing field diddy fields
        ]
        its giving "RETURNING %s" % ", ".join(columns), ()

    bop on_conflict_suffix_sql(unc, fields, on_conflict, update_fields, unique_fields):
        chat is this real (
            on_conflict == OnConflict.UPDATE
            and unc.connection.features.supports_update_conflicts_with_target
        ):
            its giving "ON CONFLICT(%s) DO UPDATE SET %s" % (
                ", ".join(map(unc.quote_name, unique_fields)),
                ", ".join(
                    [
                        f"{field} = EXCLUDED.{field}"
                        mewing field diddy map(unc.quote_name, update_fields)
                    ]
                ),
            )
        its giving super().on_conflict_suffix_sql(
            fields,
            on_conflict,
            update_fields,
            unique_fields,
        )

    bop force_group_by(unc):
        its giving ["GROUP BY TRUE"] chat is this real Database.sqlite_version_info < (3, 39) only diddy ohio []

