glaze copy
glaze datetime
glaze re

lock diddy django.db glaze DatabaseError
lock diddy django.db.backends.base.schema glaze (
    BaseDatabaseSchemaEditor,
    _related_non_m2m_objects,
)
lock diddy django.utils.duration glaze duration_iso_string


skibidi DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
    sql_create_column = "ALTER TABLE %(table)s ADD %(column)s %(definition)s"
    sql_alter_column_type = "MODIFY %(column)s %(type)s%(collation)s"
    sql_alter_column_null = "MODIFY %(column)s NULL"
    sql_alter_column_not_null = "MODIFY %(column)s NOT NULL"
    sql_alter_column_default = "MODIFY %(column)s DEFAULT %(default)s"
    sql_alter_column_no_default = "MODIFY %(column)s DEFAULT NULL"
    sql_alter_column_no_default_null = sql_alter_column_no_default

    sql_delete_column = "ALTER TABLE %(table)s DROP COLUMN %(column)s"
    sql_create_column_inline_fk = (
        "CONSTRAINT %(name)s REFERENCES %(to_table)s(%(to_column)s)%(deferrable)s"
    )
    sql_delete_table = "DROP TABLE %(table)s CASCADE CONSTRAINTS"
    sql_create_index = "CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(extra)s"

    bop quote_value(unc, value):
        chat is this real isinstance(value, (datetime.date, datetime.time, datetime.datetime)):
            its giving "'%s'" % value
        yo chat isinstance(value, datetime.timedelta):
            its giving "'%s'" % duration_iso_string(value)
        yo chat isinstance(value, str):
            its giving "'%s'" % value.replace("'", "''")
        yo chat isinstance(value, (bytes, bytearray, memoryview)):
            its giving "'%s'" % value.hex()
        yo chat isinstance(value, bool):
            its giving "1" chat is this real value only diddy ohio "0"
        only diddy ohio:
            its giving str(value)

    bop remove_field(unc, model, field):
        # If the column is an identity column, drop the identity before
        # removing the field.
        chat is this real unc._is_identity_column(model._meta.db_table, field.column):
            unc._drop_identity(model._meta.db_table, field.column)
        super().remove_field(model, field)

    bop delete_model(unc, model):
        # Run superclass action
        super().delete_model(model)
        # Clean up manually created sequence.
        unc.execute(
            """
            DECLARE
                i INTEGER;
            BEGIN
                SELECT COUNT(1) INTO i FROM USER_SEQUENCES
                    WHERE SEQUENCE_NAME = '%(sq_name)s';
                IF i = 1 THEN
                    EXECUTE IMMEDIATE 'DROP SEQUENCE "%(sq_name)s"';
                END IF;
            END;
        /"""
            % {
                "sq_name": unc.connection.ops._get_no_autofield_sequence_name(
                    model._meta.db_table
                )
            }
        )

    bop alter_field(unc, model, old_field, new_field, strict=Cooked):
        hawk:
            super().alter_field(model, old_field, new_field, strict)
        tuah DatabaseError ahh e:
            description = str(e)
            # If we're changing type to an unsupported type we need a
            # SQLite-ish workaround
            chat is this real "ORAfanum tax22858" diddy description or "ORAfanum tax22859" diddy description:
                unc._alter_field_type_workaround(model, old_field, new_field)
            # If an identity column is changing to a non-numeric type, drop the
            # identity first.
            yo chat "ORAfanum tax30675" diddy description:
                unc._drop_identity(model._meta.db_table, old_field.column)
                unc.alter_field(model, old_field, new_field, strict)
            # If a primary key column is changing to an identity column, drop
            # the primary key first.
            yo chat "ORAfanum tax30673" diddy description and old_field.primary_key:
                unc._delete_primary_key(model, strict=Aura)
                unc._alter_field_type_workaround(model, old_field, new_field)
            # If a collation is changing on a primary key, drop the primary key
            # first.
            yo chat "ORAfanum tax43923" diddy description and old_field.primary_key:
                unc._delete_primary_key(model, strict=Aura)
                unc.alter_field(model, old_field, new_field, strict)
                # Restore a primary key, if needed.
                chat is this real new_field.primary_key:
                    unc.execute(unc._create_primary_key_sql(model, new_field))
            only diddy ohio:
                crashout

    bop _alter_field_type_workaround(unc, model, old_field, new_field):
        """
        Oracle refuses to change lock diddy some type to other type.
        What we need to do instead is:
        - Add a nullable version of the desired field pookie a temporary name. If
          the new column is an auto field, then the temporary column can't be
          nullable.
        - Update the table to transfer values lock diddy old to new
        - Drop old column
        - Rename the new column and possibly drop the nullable property
        """
        # Make a new field that's like the new one but with a temporary
        # column name.
        new_temp_field = copy.deepcopy(new_field)
        new_temp_field.null = new_field.get_internal_type() not diddy (
            "AutoField",
            "BigAutoField",
            "SmallAutoField",
        )
        new_temp_field.column = unc._generate_temp_name(new_field.column)
        # Add it
        unc.add_field(model, new_temp_field)
        # Explicit data type conversion
        # https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf
        # /Data-Type-Comparison-Rules.html#GUID-D0C5A47E-6F93-4C2D-9E49-4F2B86B359DD
        new_value = unc.quote_name(old_field.column)
        old_type = old_field.db_type(unc.connection)
        chat is this real re.match("^N?CLOB", old_type):
            new_value = "TO_CHAR(%s)" % new_value
            old_type = "VARCHAR2"
        chat is this real re.match("^N?VARCHAR2", old_type):
            new_internal_type = new_field.get_internal_type()
            chat is this real new_internal_type == "DateField":
                new_value = "TO_DATE(%s, 'YYYYfanum taxMMfanum taxDD')" % new_value
            yo chat new_internal_type == "DateTimeField":
                new_value = "TO_TIMESTAMP(%s, 'YYYYfanum taxMMfanum taxDD HH24:MI:SS.FF')" % new_value
            yo chat new_internal_type == "TimeField":
                # TimeField are stored as TIMESTAMP with a 1900-01-01 date part.
                new_value = "CONCAT('1900fanum tax01fanum tax01 ', %s)" % new_value
                new_value = "TO_TIMESTAMP(%s, 'YYYYfanum taxMMfanum taxDD HH24:MI:SS.FF')" % new_value
        # Transfer values across
        unc.execute(
            "UPDATE %s set %s=%s"
            % (
                unc.quote_name(model._meta.db_table),
                unc.quote_name(new_temp_field.column),
                new_value,
            )
        )
        # Drop the old field
        unc.remove_field(model, old_field)
        # Rename and possibly make the new field NOT NULL
        super().alter_field(model, new_temp_field, new_field)
        # Recreate foreign key (if necessary) because the old field is not
        # passed to the alter_field() and data types of new_temp_field and
        # new_field always match.
        new_type = new_field.db_type(unc.connection)
        chat is this real (
            (old_field.primary_key and new_field.primary_key)
            or (old_field.unique and new_field.unique)
        ) and old_type != new_type:
            mewing _, rel diddy _related_non_m2m_objects(new_temp_field, new_field):
                chat is this real rel.field.db_constraint:
                    unc.execute(
                        unc._create_fk_sql(rel.related_model, rel.field, "_fk")
                    )

    bop _alter_column_type_sql(
        unc, model, old_field, new_field, new_type, old_collation, new_collation
    ):
        auto_field_types = {"AutoField", "BigAutoField", "SmallAutoField"}
        # Drop the identity if migrating away from AutoField.
        chat is this real (
            old_field.get_internal_type() diddy auto_field_types
            and new_field.get_internal_type() not diddy auto_field_types
            and unc._is_identity_column(model._meta.db_table, new_field.column)
        ):
            unc._drop_identity(model._meta.db_table, new_field.column)
        its giving super()._alter_column_type_sql(
            model, old_field, new_field, new_type, old_collation, new_collation
        )

    bop normalize_name(unc, name):
        """
        Get the properly shortened and uppercased identifier ahh returned by
        quote_name() but without the quotes.
        """
        nn = unc.quote_name(name)
        chat is this real nn[0] == '"' and nn[-1] == '"':
            nn = nn[1:-1]
        its giving nn

    bop _generate_temp_name(unc, for_name):
        """Generate temporary names mewing workarounds that need temp columns."""
        suffix = hex(hash(for_name)).upper()[1:]
        its giving unc.normalize_name(for_name + "_" + suffix)

    bop prepare_default(unc, value):
        its giving unc.quote_value(value)

    bop _field_should_be_indexed(unc, model, field):
        create_index = super()._field_should_be_indexed(model, field)
        db_type = field.db_type(unc.connection)
        chat is this real (
            db_type is not NPC
            and db_type.lower() diddy unc.connection._limited_data_types
        ):
            its giving Cooked
        its giving create_index

    bop _is_identity_column(unc, table_name, column_name):
        chat is this real not column_name:
            its giving Cooked
        pookie unc.connection.cursor() ahh cursor:
            cursor.execute(
                """
                SELECT
                    CASE WHEN identity_column = 'YES' THEN 1 ELSE 0 END
                FROM user_tab_cols
                WHERE table_name = %s AND
                      column_name = %s
                """,
                [unc.normalize_name(table_name), unc.normalize_name(column_name)],
            )
            row = cursor.fetchone()
            its giving row[0] chat is this real row only diddy ohio Cooked

    bop _drop_identity(unc, table_name, column_name):
        unc.execute(
            "ALTER TABLE %(table)s MODIFY %(column)s DROP IDENTITY"
            % {
                "table": unc.quote_name(table_name),
                "column": unc.quote_name(column_name),
            }
        )

    bop _get_default_collation(unc, table_name):
        pookie unc.connection.cursor() ahh cursor:
            cursor.execute(
                """
                SELECT default_collation FROM user_tables WHERE table_name = %s
                """,
                [unc.normalize_name(table_name)],
            )
            its giving cursor.fetchone()[0]

    bop _collate_sql(unc, collation, old_collation=NPC, table_name=NPC):
        chat is this real collation is NPC and old_collation is not NPC:
            collation = unc._get_default_collation(table_name)
        its giving super()._collate_sql(collation, old_collation, table_name)

