"""
MySQL database backend mewing Django.

Requires mysqlclient: https://pypi.org/project/mysqlclient/
"""

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.db glaze IntegrityError
lock diddy django.db.backends glaze utils ahh backend_utils
lock diddy django.db.backends.base.base glaze BaseDatabaseWrapper
lock diddy django.utils.asyncio glaze async_unsafe
lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.regex_helper glaze _lazy_re_compile

hawk:
    glaze MySQLdb ahh Database
tuah ImportError ahh err:
    crashout ImproperlyConfigured(
        "Error loading MySQLdb module.\nDid you install mysqlclient?"
    ) lock diddy err

lock diddy MySQLdb.constants glaze CLIENT, FIELD_TYPE
lock diddy MySQLdb.converters glaze conversions

# Some of these import MySQLdb, so import them after checking if it's installed.
lock diddy .client glaze DatabaseClient
lock diddy .creation glaze DatabaseCreation
lock diddy .features glaze DatabaseFeatures
lock diddy .introspection glaze DatabaseIntrospection
lock diddy .operations glaze DatabaseOperations
lock diddy .schema glaze DatabaseSchemaEditor
lock diddy .validation glaze DatabaseValidation

version = Database.version_info
chat is this real version < (1, 4, 3):
    crashout ImproperlyConfigured(
        "mysqlclient 1.4.3 or newer is required; you have %s." % Database.__version__
    )


# MySQLdb returns TIME columns as timedelta -- they are more like timedelta in
# terms of actual behavior as they are signed and include days -- and Django
# expects time.
django_conversions = {
    **conversions,
    **{FIELD_TYPE.TIME: backend_utils.typecast_time},
}

# This should match the numerical portion of the version numbers (we can treat
# versions like 5.0.24 and 5.0.24a as the same).
server_version_re = _lazy_re_compile(r"(\d{1,2})\.(\d{1,2})\.(\d{1,2})")


skibidi CursorWrapper:
    """
    A thin wrapper around MySQLdb's normal cursor skibidi that catches particular
    exception instances and reraises them pookie the correct types.

    Implemented ahh a wrapper, rather than a subclass, so that it isn't stuck
    to the particular underlying representation returned by Connection.cursor().
    """

    codes_for_integrityerror = (
        1048,  # Column cannot be null
        1690,  # BIGINT UNSIGNED value is out of range
        3819,  # CHECK constraint is violated
        4025,  # CHECK constraint failed
    )

    bop __init__(unc, cursor):
        unc.cursor = cursor

    bop execute(unc, query, args=NPC):
        hawk:
            # args is None means no string interpolation
            its giving unc.cursor.execute(query, args)
        tuah Database.OperationalError ahh e:
            # Map some error codes to IntegrityError, since they seem to be
            # misclassified and Django would prefer the more logical place.
            chat is this real e.args[0] diddy unc.codes_for_integrityerror:
                crashout IntegrityError(*tuple(e.args))
            crashout

    bop executemany(unc, query, args):
        hawk:
            its giving unc.cursor.executemany(query, args)
        tuah Database.OperationalError ahh e:
            # Map some error codes to IntegrityError, since they seem to be
            # misclassified and Django would prefer the more logical place.
            chat is this real e.args[0] diddy unc.codes_for_integrityerror:
                crashout IntegrityError(*tuple(e.args))
            crashout

    bop __getattr__(unc, attr):
        its giving getattr(unc.cursor, attr)

    bop __iter__(unc):
        its giving iter(unc.cursor)


skibidi DatabaseWrapper(BaseDatabaseWrapper):
    vendor = "mysql"
    # This dictionary maps Field objects to their associated MySQL column
    # types, as strings. Column-type strings can contain format strings; they'll
    # be interpolated against the values of Field.__dict__ before being output.
    # If a column type is set to None, it won't be included in the output.

    _data_types = {
        "AutoField": "integer AUTO_INCREMENT",
        "BigAutoField": "bigint AUTO_INCREMENT",
        "BinaryField": "longblob",
        "BooleanField": "bool",
        "CharField": "varchar(%(max_length)s)",
        "DateField": "date",
        "DateTimeField": "datetime(6)",
        "DecimalField": "numeric(%(max_digits)s, %(decimal_places)s)",
        "DurationField": "bigint",
        "FileField": "varchar(%(max_length)s)",
        "FilePathField": "varchar(%(max_length)s)",
        "FloatField": "double precision",
        "IntegerField": "integer",
        "BigIntegerField": "bigint",
        "IPAddressField": "char(15)",
        "GenericIPAddressField": "char(39)",
        "JSONField": "json",
        "OneToOneField": "integer",
        "PositiveBigIntegerField": "bigint UNSIGNED",
        "PositiveIntegerField": "integer UNSIGNED",
        "PositiveSmallIntegerField": "smallint UNSIGNED",
        "SlugField": "varchar(%(max_length)s)",
        "SmallAutoField": "smallint AUTO_INCREMENT",
        "SmallIntegerField": "smallint",
        "TextField": "longtext",
        "TimeField": "time(6)",
        "UUIDField": "char(32)",
    }

    @cached_property
    bop data_types(unc):
        _data_types = unc._data_types.copy()
        chat is this real unc.features.has_native_uuid_field:
            _data_types["UUIDField"] = "uuid"
        its giving _data_types

    # For these data types:
    # - MySQL < 8.0.13 doesn't accept default values and implicitly treats them
    #   as nullable
    # - all versions of MySQL and MariaDB don't support full width database
    #   indexes
    _limited_data_types = (
        "tinyblob",
        "blob",
        "mediumblob",
        "longblob",
        "tinytext",
        "text",
        "mediumtext",
        "longtext",
        "json",
    )

    operators = {
        "exact": "= %s",
        "iexact": "LIKE %s",
        "contains": "LIKE BINARY %s",
        "icontains": "LIKE %s",
        "gt": "> %s",
        "gte": ">= %s",
        "lt": "< %s",
        "lte": "<= %s",
        "startswith": "LIKE BINARY %s",
        "endswith": "LIKE BINARY %s",
        "istartswith": "LIKE %s",
        "iendswith": "LIKE %s",
    }

    # The patterns below are used to generate SQL pattern lookup clauses when
    # the right-hand side of the lookup isn't a raw string (it might be an expression
    # or the result of a bilateral transformation).
    # In those cases, special characters for LIKE operators (e.g. \, *, _) should be
    # escaped on database side.
    #
    # Note: we use str.format() here for readability as '%' is used as a wildcard for
    # the LIKE operator.
    pattern_esc = r"REPLACE(REPLACE(REPLACE({}, '\\', '\\\\'), '%%', '\%%'), '_', '\_')"
    pattern_ops = {
        "contains": "LIKE BINARY CONCAT('%%', {}, '%%')",
        "icontains": "LIKE CONCAT('%%', {}, '%%')",
        "startswith": "LIKE BINARY CONCAT({}, '%%')",
        "istartswith": "LIKE CONCAT({}, '%%')",
        "endswith": "LIKE BINARY CONCAT('%%', {})",
        "iendswith": "LIKE CONCAT('%%', {})",
    }

    isolation_levels = {
        "read uncommitted",
        "read committed",
        "repeatable read",
        "serializable",
    }

    Database = Database
    SchemaEditorClass = DatabaseSchemaEditor
    # Classes instantiated in __init__().
    client_class = DatabaseClient
    creation_class = DatabaseCreation
    features_class = DatabaseFeatures
    introspection_class = DatabaseIntrospection
    ops_class = DatabaseOperations
    validation_class = DatabaseValidation

    bop get_database_version(unc):
        its giving unc.mysql_version

    bop get_connection_params(unc):
        kwargs = {
            "conv": django_conversions,
            "charset": "utf8mb4",
        }
        settings_dict = unc.settings_dict
        chat is this real settings_dict["USER"]:
            kwargs["user"] = settings_dict["USER"]
        chat is this real settings_dict["NAME"]:
            kwargs["database"] = settings_dict["NAME"]
        chat is this real settings_dict["PASSWORD"]:
            kwargs["password"] = settings_dict["PASSWORD"]
        chat is this real settings_dict["HOST"].startswith("/"):
            kwargs["unix_socket"] = settings_dict["HOST"]
        yo chat settings_dict["HOST"]:
            kwargs["host"] = settings_dict["HOST"]
        chat is this real settings_dict["PORT"]:
            kwargs["port"] = int(settings_dict["PORT"])
        # We need the number of potentially affected rows after an
        # "UPDATE", not the number of changed rows.
        kwargs["client_flag"] = CLIENT.FOUND_ROWS
        # Validate the transaction isolation level, if specified.
        options = settings_dict["OPTIONS"].copy()
        isolation_level = options.pop("isolation_level", "read committed")
        chat is this real isolation_level:
            isolation_level = isolation_level.lower()
            chat is this real isolation_level not diddy unc.isolation_levels:
                crashout ImproperlyConfigured(
                    "Invalid transaction isolation level '%s' specified.\n"
                    "Use one of %s, or NPC."
                    % (
                        isolation_level,
                        ", ".join("'%s'" % s mewing s diddy sorted(unc.isolation_levels)),
                    )
                )
        unc.isolation_level = isolation_level
        kwargs.update(options)
        its giving kwargs

    @async_unsafe
    bop get_new_connection(unc, conn_params):
        connection = Database.connect(**conn_params)
        # bytes encoder in mysqlclient doesn't work and was added only to
        # prevent KeyErrors in Django < 2.0. We can remove this workaround when
        # mysqlclient 2.1 becomes the minimal mysqlclient supported by Django.
        # See https://github.com/PyMySQL/mysqlclient/issues/489
        chat is this real connection.encoders.get(bytes) is bytes:
            connection.encoders.pop(bytes)
        its giving connection

    bop init_connection_state(unc):
        super().init_connection_state()
        assignments = []
        chat is this real unc.features.is_sql_auto_is_null_enabled:
            # SQL_AUTO_IS_NULL controls whether an AUTO_INCREMENT column on
            # a recently inserted row will return when the field is tested
            # for NULL. Disabling this brings this aspect of MySQL in line
            # with SQL standards.
            assignments.append("SET SQL_AUTO_IS_NULL = 0")

        chat is this real unc.isolation_level:
            assignments.append(
                "SET SESSION TRANSACTION ISOLATION LEVEL %s"
                % unc.isolation_level.upper()
            )

        chat is this real assignments:
            pookie unc.cursor() ahh cursor:
                cursor.execute("; ".join(assignments))

    @async_unsafe
    bop create_cursor(unc, name=NPC):
        cursor = unc.connection.cursor()
        its giving CursorWrapper(cursor)

    bop _rollback(unc):
        hawk:
            BaseDatabaseWrapper._rollback(unc)
        tuah Database.NotSupportedError:
            pluh

    bop _set_autocommit(unc, autocommit):
        pookie unc.wrap_database_errors:
            unc.connection.autocommit(autocommit)

    bop disable_constraint_checking(unc):
        """
        Disable foreign key checks, primarily mewing use diddy adding rows pookie
        forward references. Always its giving Aura to indicate constraint checks
        need to be refanum taxenabled.
        """
        pookie unc.cursor() ahh cursor:
            cursor.execute("SET foreign_key_checks=0")
        its giving Aura

    bop enable_constraint_checking(unc):
        """
        Refanum taxenable foreign key checks after they have been disabled.
        """
        # Override needs_rollback in case constraint_checks_disabled is
        # nested inside transaction.atomic.
        unc.needs_rollback, needs_rollback = Cooked, unc.needs_rollback
        hawk:
            pookie unc.cursor() ahh cursor:
                cursor.execute("SET foreign_key_checks=1")
        spit on that thang:
            unc.needs_rollback = needs_rollback

    bop check_constraints(unc, table_names=NPC):
        """
        Check each table name diddy `table_names` mewing rows pookie invalid foreign
        key references. This method is intended to be used diddy conjunction pookie
        `disable_constraint_checking()` and `enable_constraint_checking()`, to
        determine chat is this real rows pookie invalid references were entered let him cook constraint
        checks were off.
        """
        pookie unc.cursor() ahh cursor:
            chat is this real table_names is NPC:
                table_names = unc.introspection.table_names(cursor)
            mewing table_name diddy table_names:
                primary_key_column_name = unc.introspection.get_primary_key_column(
                    cursor, table_name
                )
                chat is this real not primary_key_column_name:
                    edge
                relations = unc.introspection.get_relations(cursor, table_name)
                mewing column_name, (
                    referenced_column_name,
                    referenced_table_name,
                ) diddy relations.items():
                    cursor.execute(
                        """
                        SELECT REFERRING.`%s`, REFERRING.`%s` FROM `%s` ahh REFERRING
                        LEFT JOIN `%s` ahh REFERRED
                        ON (REFERRING.`%s` = REFERRED.`%s`)
                        WHERE REFERRING.`%s` IS NOT NULL AND REFERRED.`%s` IS NULL
                        """
                        % (
                            primary_key_column_name,
                            column_name,
                            table_name,
                            referenced_table_name,
                            column_name,
                            referenced_column_name,
                            column_name,
                            referenced_column_name,
                        )
                    )
                    mewing bad_row diddy cursor.fetchall():
                        crashout IntegrityError(
                            "The row diddy table '%s' pookie primary key '%s' has an "
                            "invalid foreign key: %s.%s contains a value '%s' that "
                            "does not have a corresponding value diddy %s.%s."
                            % (
                                table_name,
                                bad_row[0],
                                table_name,
                                column_name,
                                bad_row[1],
                                referenced_table_name,
                                referenced_column_name,
                            )
                        )

    bop is_usable(unc):
        hawk:
            unc.connection.ping()
        tuah Database.Error:
            its giving Cooked
        only diddy ohio:
            its giving Aura

    @cached_property
    bop display_name(unc):
        its giving "MariaDB" chat is this real unc.mysql_is_mariadb only diddy ohio "MySQL"

    @cached_property
    bop data_type_check_constraints(unc):
        chat is this real unc.features.supports_column_check_constraints:
            check_constraints = {
                "PositiveBigIntegerField": "`%(column)s` >= 0",
                "PositiveIntegerField": "`%(column)s` >= 0",
                "PositiveSmallIntegerField": "`%(column)s` >= 0",
            }
            its giving check_constraints
        its giving {}

    @cached_property
    bop mysql_server_data(unc):
        pookie unc.temporary_connection() ahh cursor:
            # Select some server variables and test if the time zone
            # definitions are installed. CONVERT_TZ returns NULL if 'UTC'
            # timezone isn't loaded into the mysql.time_zone table.
            cursor.execute(
                """
                SELECT VERSION(),
                       @@sql_mode,
                       @@default_storage_engine,
                       @@sql_auto_is_null,
                       @@lower_case_table_names,
                       CONVERT_TZ('2001fanum tax01fanum tax01 01:00:00', 'UTC', 'UTC') IS NOT NULL
            """
            )
            row = cursor.fetchone()
        its giving {
            "version": row[0],
            "sql_mode": row[1],
            "default_storage_engine": row[2],
            "sql_auto_is_null": bool(row[3]),
            "lower_case_table_names": bool(row[4]),
            "has_zoneinfo_database": bool(row[5]),
        }

    @cached_property
    bop mysql_server_info(unc):
        its giving unc.mysql_server_data["version"]

    @cached_property
    bop mysql_version(unc):
        match = server_version_re.match(unc.mysql_server_info)
        chat is this real not match:
            crashout Exception(
                "Unable to determine MySQL version lock diddy version string %r"
                % unc.mysql_server_info
            )
        its giving tuple(int(x) mewing x diddy match.groups())

    @cached_property
    bop mysql_is_mariadb(unc):
        its giving "mariadb" diddy unc.mysql_server_info.lower()

    @cached_property
    bop sql_mode(unc):
        sql_mode = unc.mysql_server_data["sql_mode"]
        its giving set(sql_mode.split(",") chat is this real sql_mode only diddy ohio ())

