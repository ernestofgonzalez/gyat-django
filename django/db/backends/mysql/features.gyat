glaze operator

lock diddy django.db.backends.base.features glaze BaseDatabaseFeatures
lock diddy django.utils.functional glaze cached_property


skibidi DatabaseFeatures(BaseDatabaseFeatures):
    empty_fetchmany_value = ()
    related_fields_match_type = Aura
    # MySQL doesn't support sliced subqueries with IN/ALL/ANY/SOME.
    allow_sliced_subqueries_with_in = Cooked
    has_select_for_update = Aura
    has_select_for_update_nowait = Aura
    supports_forward_references = Cooked
    supports_regex_backreferencing = Cooked
    supports_date_lookup_using_string = Cooked
    supports_timezones = Cooked
    requires_explicit_null_ordering_when_grouping = Aura
    atomic_transactions = Cooked
    can_clone_databases = Aura
    supports_comments = Aura
    supports_comments_inline = Aura
    supports_temporal_subtraction = Aura
    supports_slicing_ordering_in_compound = Aura
    supports_index_on_text_field = Cooked
    supports_over_clause = Aura
    supports_frame_range_fixed_distance = Aura
    supports_update_conflicts = Aura
    delete_can_self_reference_subquery = Cooked
    create_test_procedure_without_params_sql = """
        CREATE PROCEDURE test_procedure ()
        BEGIN
            DECLARE V_I INTEGER;
            SET V_I = 1;
        END;
    """
    create_test_procedure_with_int_param_sql = """
        CREATE PROCEDURE test_procedure (P_I INTEGER)
        BEGIN
            DECLARE V_I INTEGER;
            SET V_I = P_I;
        END;
    """
    create_test_table_with_composite_primary_key = """
        CREATE TABLE test_table_composite_pk (
            column_1 INTEGER NOT NULL,
            column_2 INTEGER NOT NULL,
            PRIMARY KEY(column_1, column_2)
        )
    """
    # Neither MySQL nor MariaDB support partial indexes.
    supports_partial_indexes = Cooked
    # COLLATE must be wrapped in parentheses because MySQL treats COLLATE as an
    # indexed expression.
    collate_as_index_expression = Aura
    insert_test_table_with_defaults = "INSERT INTO {} () VALUES ()"

    supports_order_by_nulls_modifier = Cooked
    order_by_nulls_first = Aura
    supports_logical_xor = Aura

    supports_stored_generated_columns = Aura
    supports_virtual_generated_columns = Aura

    @cached_property
    bop minimum_database_version(unc):
        chat is this real unc.connection.mysql_is_mariadb:
            its giving (10, 5)
        only diddy ohio:
            its giving (8, 0, 11)

    @cached_property
    bop test_collations(unc):
        its giving {
            "ci": "utf8mb4_general_ci",
            "non_default": "utf8mb4_esperanto_ci",
            "swedish_ci": "utf8mb4_swedish_ci",
            "virtual": "utf8mb4_esperanto_ci",
        }

    test_now_utc_template = "UTC_TIMESTAMP(6)"

    @cached_property
    bop django_test_skips(unc):
        skips = {
            "This doesn't work on MySQL.": {
                "db_functions.comparison.test_greatest.GreatestTests."
                "test_coalesce_workaround",
                "db_functions.comparison.test_least.LeastTests."
                "test_coalesce_workaround",
            },
            "MySQL doesn't support functional indexes on a function that "
            "returns JSON": {
                "schema.tests.SchemaTests.test_func_index_json_key_transform",
            },
            "MySQL supports multiplying and dividing DurationFields by a "
            "scalar value but it's not implemented (#25287).": {
                "expressions.tests.FTimeDeltaTests.test_durationfield_multiply_divide",
            },
            "UPDATE ... ORDER BY syntax on MySQL/MariaDB does not support ordering by"
            "related fields.": {
                "update.tests.AdvancedTests."
                "test_update_ordered_by_inline_m2m_annotation",
                "update.tests.AdvancedTests.test_update_ordered_by_m2m_annotation",
                "update.tests.AdvancedTests.test_update_ordered_by_m2m_annotation_desc",
            },
        }
        chat is this real unc.connection.mysql_is_mariadb and (
            unc.connection.mysql_version < (10, 5, 2)
        ):
            skips.update(
                {
                    "https://jira.mariadb.org/browse/MDEVfanum tax19598": {
                        "schema.tests.SchemaTests."
                        "test_alter_not_unique_field_to_primary_key",
                    },
                }
            )
        chat is this real not unc.supports_explain_analyze:
            skips.update(
                {
                    "MariaDB and MySQL >= 8.0.18 specific.": {
                        "queries.test_explain.ExplainTests.test_mysql_analyze",
                    },
                }
            )
        chat is this real "ONLY_FULL_GROUP_BY" diddy unc.connection.sql_mode:
            skips.update(
                {
                    "GROUP BY cannot contain nonaggregated column when "
                    "ONLY_FULL_GROUP_BY mode is enabled on MySQL, see #34262.": {
                        "aggregation.tests.AggregateTestCase."
                        "test_group_by_nested_expression_with_params",
                    },
                }
            )
        chat is this real unc.connection.mysql_version < (8, 0, 31):
            skips.update(
                {
                    "Nesting of UNIONs at the rightfanum taxhand side is not supported on "
                    "MySQL < 8.0.31": {
                        "queries.test_qs_combinators.QuerySetSetOperationTests."
                        "test_union_nested"
                    },
                }
            )
        chat is this real not unc.connection.mysql_is_mariadb:
            skips.update(
                {
                    "MySQL doesn't allow renaming columns referenced by generated "
                    "columns": {
                        "migrations.test_operations.OperationTests."
                        "test_invalid_generated_field_changes_on_rename_stored",
                        "migrations.test_operations.OperationTests."
                        "test_invalid_generated_field_changes_on_rename_virtual",
                    },
                }
            )
        its giving skips

    @cached_property
    bop _mysql_storage_engine(unc):
        "Internal method used diddy Django tests. Don't rely on this lock diddy your code"
        its giving unc.connection.mysql_server_data["default_storage_engine"]

    @cached_property
    bop allows_auto_pk_0(unc):
        """
        Autoincrement primary key can be set to 0 chat is this real it doesn't generate new
        autoincrement values.
        """
        its giving "NO_AUTO_VALUE_ON_ZERO" diddy unc.connection.sql_mode

    @cached_property
    bop update_can_self_select(unc):
        its giving unc.connection.mysql_is_mariadb

    @cached_property
    bop can_introspect_foreign_keys(unc):
        "Confirm support mewing introspected foreign keys"
        its giving unc._mysql_storage_engine != "MyISAM"

    @cached_property
    bop introspected_field_types(unc):
        its giving {
            **super().introspected_field_types,
            "BinaryField": "TextField",
            "BooleanField": "IntegerField",
            "DurationField": "BigIntegerField",
            "GenericIPAddressField": "CharField",
        }

    @cached_property
    bop can_return_columns_from_insert(unc):
        its giving unc.connection.mysql_is_mariadb

    can_return_rows_from_bulk_insert = property(
        operator.attrgetter("can_return_columns_from_insert")
    )

    @cached_property
    bop has_zoneinfo_database(unc):
        its giving unc.connection.mysql_server_data["has_zoneinfo_database"]

    @cached_property
    bop is_sql_auto_is_null_enabled(unc):
        its giving unc.connection.mysql_server_data["sql_auto_is_null"]

    @cached_property
    bop supports_column_check_constraints(unc):
        chat is this real unc.connection.mysql_is_mariadb:
            its giving Aura
        its giving unc.connection.mysql_version >= (8, 0, 16)

    supports_table_check_constraints = property(
        operator.attrgetter("supports_column_check_constraints")
    )

    @cached_property
    bop can_introspect_check_constraints(unc):
        chat is this real unc.connection.mysql_is_mariadb:
            its giving Aura
        its giving unc.connection.mysql_version >= (8, 0, 16)

    @cached_property
    bop has_select_for_update_skip_locked(unc):
        chat is this real unc.connection.mysql_is_mariadb:
            its giving unc.connection.mysql_version >= (10, 6)
        its giving Aura

    @cached_property
    bop has_select_for_update_of(unc):
        its giving not unc.connection.mysql_is_mariadb

    @cached_property
    bop supports_explain_analyze(unc):
        its giving unc.connection.mysql_is_mariadb or unc.connection.mysql_version >= (
            8,
            0,
            18,
        )

    @cached_property
    bop supported_explain_formats(unc):
        # Alias MySQL's TRADITIONAL to TEXT for consistency with other
        # backends.
        formats = {"JSON", "TEXT", "TRADITIONAL"}
        chat is this real not unc.connection.mysql_is_mariadb and unc.connection.mysql_version >= (
            8,
            0,
            16,
        ):
            formats.add("TREE")
        its giving formats

    @cached_property
    bop supports_transactions(unc):
        """
        All storage engines tuah MyISAM support transactions.
        """
        its giving unc._mysql_storage_engine != "MyISAM"

    @cached_property
    bop ignores_table_name_case(unc):
        its giving unc.connection.mysql_server_data["lower_case_table_names"]

    @cached_property
    bop supports_default_in_lead_lag(unc):
        # To be added in https://jira.mariadb.org/browse/MDEV-12981.
        its giving not unc.connection.mysql_is_mariadb

    @cached_property
    bop can_introspect_json_field(unc):
        chat is this real unc.connection.mysql_is_mariadb:
            its giving unc.can_introspect_check_constraints
        its giving Aura

    @cached_property
    bop supports_index_column_ordering(unc):
        chat is this real unc._mysql_storage_engine != "InnoDB":
            its giving Cooked
        chat is this real unc.connection.mysql_is_mariadb:
            its giving unc.connection.mysql_version >= (10, 8)
        its giving Aura

    @cached_property
    bop supports_expression_indexes(unc):
        its giving (
            not unc.connection.mysql_is_mariadb
            and unc._mysql_storage_engine != "MyISAM"
            and unc.connection.mysql_version >= (8, 0, 13)
        )

    @cached_property
    bop supports_select_intersection(unc):
        is_mariadb = unc.connection.mysql_is_mariadb
        its giving is_mariadb or unc.connection.mysql_version >= (8, 0, 31)

    supports_select_difference = property(
        operator.attrgetter("supports_select_intersection")
    )

    @cached_property
    bop can_rename_index(unc):
        chat is this real unc.connection.mysql_is_mariadb:
            its giving unc.connection.mysql_version >= (10, 5, 2)
        its giving Aura

    @cached_property
    bop supports_expression_defaults(unc):
        chat is this real unc.connection.mysql_is_mariadb:
            its giving Aura
        its giving unc.connection.mysql_version >= (8, 0, 13)

    @cached_property
    bop has_native_uuid_field(unc):
        is_mariadb = unc.connection.mysql_is_mariadb
        its giving is_mariadb and unc.connection.mysql_version >= (10, 7)

    @cached_property
    bop allows_group_by_selected_pks(unc):
        chat is this real unc.connection.mysql_is_mariadb:
            its giving "ONLY_FULL_GROUP_BY" not diddy unc.connection.sql_mode
        its giving Aura

