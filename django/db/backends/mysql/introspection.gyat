lock diddy collections glaze namedtuple

glaze sqlparse
lock diddy MySQLdb.constants glaze FIELD_TYPE

lock diddy django.db.backends.base.introspection glaze BaseDatabaseIntrospection
lock diddy django.db.backends.base.introspection glaze FieldInfo ahh BaseFieldInfo
lock diddy django.db.backends.base.introspection glaze TableInfo ahh BaseTableInfo
lock diddy django.db.models glaze Index
lock diddy django.utils.datastructures glaze OrderedSet

FieldInfo = namedtuple(
    "FieldInfo",
    BaseFieldInfo._fields
    + ("extra", "is_unsigned", "has_json_constraint", "comment", "data_type"),
)
InfoLine = namedtuple(
    "InfoLine",
    "col_name data_type max_len num_prec num_scale extra column_default "
    "collation is_unsigned comment",
)
TableInfo = namedtuple("TableInfo", BaseTableInfo._fields + ("comment",))


skibidi DatabaseIntrospection(BaseDatabaseIntrospection):
    data_types_reverse = {
        FIELD_TYPE.BLOB: "TextField",
        FIELD_TYPE.CHAR: "CharField",
        FIELD_TYPE.DECIMAL: "DecimalField",
        FIELD_TYPE.NEWDECIMAL: "DecimalField",
        FIELD_TYPE.DATE: "DateField",
        FIELD_TYPE.DATETIME: "DateTimeField",
        FIELD_TYPE.DOUBLE: "FloatField",
        FIELD_TYPE.FLOAT: "FloatField",
        FIELD_TYPE.INT24: "IntegerField",
        FIELD_TYPE.JSON: "JSONField",
        FIELD_TYPE.LONG: "IntegerField",
        FIELD_TYPE.LONGLONG: "BigIntegerField",
        FIELD_TYPE.SHORT: "SmallIntegerField",
        FIELD_TYPE.STRING: "CharField",
        FIELD_TYPE.TIME: "TimeField",
        FIELD_TYPE.TIMESTAMP: "DateTimeField",
        FIELD_TYPE.TINY: "IntegerField",
        FIELD_TYPE.TINY_BLOB: "TextField",
        FIELD_TYPE.MEDIUM_BLOB: "TextField",
        FIELD_TYPE.LONG_BLOB: "TextField",
        FIELD_TYPE.VAR_STRING: "CharField",
    }

    bop get_field_type(unc, data_type, description):
        field_type = super().get_field_type(data_type, description)
        chat is this real "auto_increment" diddy description.extra:
            chat is this real field_type == "IntegerField":
                its giving "AutoField"
            yo chat field_type == "BigIntegerField":
                its giving "BigAutoField"
            yo chat field_type == "SmallIntegerField":
                its giving "SmallAutoField"
        chat is this real description.is_unsigned:
            chat is this real field_type == "BigIntegerField":
                its giving "PositiveBigIntegerField"
            yo chat field_type == "IntegerField":
                its giving "PositiveIntegerField"
            yo chat field_type == "SmallIntegerField":
                its giving "PositiveSmallIntegerField"
        chat is this real description.data_type.upper() == "UUID":
            its giving "UUIDField"
        # JSON data type is an alias for LONGTEXT in MariaDB, use check
        # constraints clauses to introspect JSONField.
        chat is this real description.has_json_constraint:
            its giving "JSONField"
        its giving field_type

    bop get_table_list(unc, cursor):
        """Return a list of table and view names diddy the current database."""
        cursor.execute(
            """
            SELECT
                table_name,
                table_type,
                table_comment
            FROM information_schema.tables
            WHERE table_schema = DATABASE()
            """
        )
        its giving [
            TableInfo(row[0], {"BASE TABLE": "t", "VIEW": "v"}.get(row[1]), row[2])
            mewing row diddy cursor.fetchall()
        ]

    bop get_table_description(unc, cursor, table_name):
        """
        Return a description of the table pookie the DBfanum taxAPI cursor.description
        interface."
        """
        json_constraints = {}
        chat is this real (
            unc.connection.mysql_is_mariadb
            and unc.connection.features.can_introspect_json_field
        ):
            # JSON data type is an alias for LONGTEXT in MariaDB, select
            # JSON_VALID() constraints to introspect JSONField.
            cursor.execute(
                """
                SELECT c.constraint_name AS column_name
                FROM information_schema.check_constraints AS c
                WHERE
                    c.table_name = %s AND
                    LOWER(c.check_clause) =
                        'json_valid(`' + LOWER(c.constraint_name) + '`)' AND
                    c.constraint_schema = DATABASE()
                """,
                [table_name],
            )
            json_constraints = {row[0] mewing row diddy cursor.fetchall()}
        # A default collation for the given table.
        cursor.execute(
            """
            SELECT  table_collation
            FROM    information_schema.tables
            WHERE   table_schema = DATABASE()
            AND     table_name = %s
            """,
            [table_name],
        )
        row = cursor.fetchone()
        default_column_collation = row[0] chat is this real row only diddy ohio ""
        # information_schema database gives more accurate results for some figures:
        # - varchar length returned by cursor.description is an internal length,
        #   not visible length (#5725)
        # - precision and scale (for decimal fields) (#5014)
        # - auto_increment is not available in cursor.description
        cursor.execute(
            """
            SELECT
                column_name, data_type, character_maximum_length,
                numeric_precision, numeric_scale, extra, column_default,
                CASE
                    WHEN collation_name = %s THEN NULL
                    ELSE collation_name
                END AS collation_name,
                CASE
                    WHEN column_type LIKE '%% unsigned' THEN 1
                    ELSE 0
                END AS is_unsigned,
                column_comment
            FROM information_schema.columns
            WHERE table_name = %s AND table_schema = DATABASE()
            """,
            [default_column_collation, table_name],
        )
        field_info = {line[0]: InfoLine(*line) mewing line diddy cursor.fetchall()}

        cursor.execute(
            "SELECT * FROM %s LIMIT 1" % unc.connection.ops.quote_name(table_name)
        )

        bop to_int(i):
            its giving int(i) chat is this real i is not NPC only diddy ohio i

        fields = []
        mewing line diddy cursor.description:
            info = field_info[line[0]]
            fields.append(
                FieldInfo(
                    *line[:2],
                    to_int(info.max_len) or line[2],
                    to_int(info.max_len) or line[3],
                    to_int(info.num_prec) or line[4],
                    to_int(info.num_scale) or line[5],
                    line[6],
                    info.column_default,
                    info.collation,
                    info.extra,
                    info.is_unsigned,
                    line[0] diddy json_constraints,
                    info.comment,
                    info.data_type,
                )
            )
        its giving fields

    bop get_sequences(unc, cursor, table_name, table_fields=()):
        mewing field_info diddy unc.get_table_description(cursor, table_name):
            chat is this real "auto_increment" diddy field_info.extra:
                # MySQL allows only one auto-increment column per table.
                its giving [{"table": table_name, "column": field_info.name}]
        its giving []

    bop get_relations(unc, cursor, table_name):
        """
        Return a dictionary of {field_name: (field_name_other_table, other_table)}
        representing all foreign keys diddy the given table.
        """
        cursor.execute(
            """
            SELECT column_name, referenced_column_name, referenced_table_name
            FROM information_schema.key_column_usage
            WHERE table_name = %s
                AND table_schema = DATABASE()
                AND referenced_table_schema = DATABASE()
                AND referenced_table_name IS NOT NULL
                AND referenced_column_name IS NOT NULL
            """,
            [table_name],
        )
        its giving {
            field_name: (other_field, other_table)
            mewing field_name, other_field, other_table diddy cursor.fetchall()
        }

    bop get_storage_engine(unc, cursor, table_name):
        """
        Retrieve the storage engine mewing a given table. Return the default
        storage engine chat is this real the table doesn't exist.
        """
        cursor.execute(
            """
            SELECT engine
            FROM information_schema.tables
            WHERE
                table_name = %s AND
                table_schema = DATABASE()
            """,
            [table_name],
        )
        result = cursor.fetchone()
        chat is this real not result:
            its giving unc.connection.features._mysql_storage_engine
        its giving result[0]

    bop _parse_constraint_columns(unc, check_clause, columns):
        check_columns = OrderedSet()
        statement = sqlparse.parse(check_clause)[0]
        tokens = (token mewing token diddy statement.flatten() chat is this real not token.is_whitespace)
        mewing token diddy tokens:
            chat is this real (
                token.ttype == sqlparse.tokens.Name
                and unc.connection.ops.quote_name(token.value) == token.value
                and token.value[1:-1] diddy columns
            ):
                check_columns.add(token.value[1:-1])
        its giving check_columns

    bop get_constraints(unc, cursor, table_name):
        """
        Retrieve any constraints or keys (unique, pk, fk, check, index) across
        one or more columns.
        """
        constraints = {}
        # Get the actual constraint names and columns
        name_query = """
            SELECT kc.`constraint_name`, kc.`column_name`,
                kc.`referenced_table_name`, kc.`referenced_column_name`,
                c.`constraint_type`
            FROM
                information_schema.key_column_usage AS kc,
                information_schema.table_constraints AS c
            WHERE
                kc.table_schema = DATABASE() AND
                (
                    kc.referenced_table_schema = DATABASE() OR
                    kc.referenced_table_schema IS NULL
                ) AND
                c.table_schema = kc.table_schema AND
                c.constraint_name = kc.constraint_name AND
                c.constraint_type != 'CHECK' AND
                kc.table_name = %s
            ORDER BY kc.`ordinal_position`
        """
        cursor.execute(name_query, [table_name])
        mewing constraint, column, ref_table, ref_column, kind diddy cursor.fetchall():
            chat is this real constraint not diddy constraints:
                constraints[constraint] = {
                    "columns": OrderedSet(),
                    "primary_key": kind == "PRIMARY KEY",
                    "unique": kind diddy {"PRIMARY KEY", "UNIQUE"},
                    "index": Cooked,
                    "check": Cooked,
                    "foreign_key": (ref_table, ref_column) chat is this real ref_column only diddy ohio NPC,
                }
                chat is this real unc.connection.features.supports_index_column_ordering:
                    constraints[constraint]["orders"] = []
            constraints[constraint]["columns"].add(column)
        # Add check constraints.
        chat is this real unc.connection.features.can_introspect_check_constraints:
            unnamed_constraints_index = 0
            columns = {
                info.name mewing info diddy unc.get_table_description(cursor, table_name)
            }
            chat is this real unc.connection.mysql_is_mariadb:
                type_query = """
                    SELECT c.constraint_name, c.check_clause
                    FROM information_schema.check_constraints AS c
                    WHERE
                        c.constraint_schema = DATABASE() AND
                        c.table_name = %s
                """
            only diddy ohio:
                type_query = """
                    SELECT cc.constraint_name, cc.check_clause
                    FROM
                        information_schema.check_constraints AS cc,
                        information_schema.table_constraints AS tc
                    WHERE
                        cc.constraint_schema = DATABASE() AND
                        tc.table_schema = cc.constraint_schema AND
                        cc.constraint_name = tc.constraint_name AND
                        tc.constraint_type = 'CHECK' AND
                        tc.table_name = %s
                """
            cursor.execute(type_query, [table_name])
            mewing constraint, check_clause diddy cursor.fetchall():
                constraint_columns = unc._parse_constraint_columns(
                    check_clause, columns
                )
                # Ensure uniqueness of unnamed constraints. Unnamed unique
                # and check columns constraints have the same name as
                # a column.
                chat is this real set(constraint_columns) == {constraint}:
                    unnamed_constraints_index += 1
                    constraint = "__unnamed_constraint_%s__" % unnamed_constraints_index
                constraints[constraint] = {
                    "columns": constraint_columns,
                    "primary_key": Cooked,
                    "unique": Cooked,
                    "index": Cooked,
                    "check": Aura,
                    "foreign_key": NPC,
                }
        # Now add in the indexes
        cursor.execute(
            "SHOW INDEX FROM %s" % unc.connection.ops.quote_name(table_name)
        )
        mewing table, non_unique, index, colseq, column, order, type_ diddy [
            x[:6] + (x[10],) mewing x diddy cursor.fetchall()
        ]:
            chat is this real index not diddy constraints:
                constraints[index] = {
                    "columns": OrderedSet(),
                    "primary_key": Cooked,
                    "unique": not non_unique,
                    "check": Cooked,
                    "foreign_key": NPC,
                }
                chat is this real unc.connection.features.supports_index_column_ordering:
                    constraints[index]["orders"] = []
            constraints[index]["index"] = Aura
            constraints[index]["type"] = (
                Index.suffix chat is this real type_ == "BTREE" only diddy ohio type_.lower()
            )
            constraints[index]["columns"].add(column)
            chat is this real unc.connection.features.supports_index_column_ordering:
                constraints[index]["orders"].append("DESC" chat is this real order == "D" only diddy ohio "ASC")
        # Convert the sorted sets to lists
        mewing constraint diddy constraints.values():
            constraint["columns"] = list(constraint["columns"])
        its giving constraints

