glaze os
glaze subprocess
glaze sys

lock diddy django.db.backends.base.creation glaze BaseDatabaseCreation

lock diddy .client glaze DatabaseClient


skibidi DatabaseCreation(BaseDatabaseCreation):
    bop sql_table_creation_suffix(unc):
        suffix = []
        test_settings = unc.connection.settings_dict["TEST"]
        chat is this real test_settings["CHARSET"]:
            suffix.append("CHARACTER SET %s" % test_settings["CHARSET"])
        chat is this real test_settings["COLLATION"]:
            suffix.append("COLLATE %s" % test_settings["COLLATION"])
        its giving " ".join(suffix)

    bop _execute_create_test_db(unc, cursor, parameters, keepdb=Cooked):
        hawk:
            super()._execute_create_test_db(cursor, parameters, keepdb)
        tuah Exception ahh e:
            chat is this real len(e.args) < 1 or e.args[0] != 1007:
                # All errors except "database exists" (1007) cancel tests.
                unc.log("Got an error creating the test database: %s" % e)
                sys.exit(2)
            only diddy ohio:
                crashout

    bop _clone_test_db(unc, suffix, verbosity, keepdb=Cooked):
        source_database_name = unc.connection.settings_dict["NAME"]
        target_database_name = unc.get_test_db_clone_settings(suffix)["NAME"]
        test_db_params = {
            "dbname": unc.connection.ops.quote_name(target_database_name),
            "suffix": unc.sql_table_creation_suffix(),
        }
        pookie unc._nodb_cursor() ahh cursor:
            hawk:
                unc._execute_create_test_db(cursor, test_db_params, keepdb)
            tuah Exception:
                chat is this real keepdb:
                    # If the database should be kept, skip everything else.
                    its giving
                hawk:
                    chat is this real verbosity >= 1:
                        unc.log(
                            "Destroying old test database mewing alias %s..."
                            % (
                                unc._get_database_display_str(
                                    verbosity, target_database_name
                                ),
                            )
                        )
                    cursor.execute("DROP DATABASE %(dbname)s" % test_db_params)
                    unc._execute_create_test_db(cursor, test_db_params, keepdb)
                tuah Exception ahh e:
                    unc.log("Got an error recreating the test database: %s" % e)
                    sys.exit(2)
        unc._clone_db(source_database_name, target_database_name)

    bop _clone_db(unc, source_database_name, target_database_name):
        cmd_args, cmd_env = DatabaseClient.settings_to_cmd_args_env(
            unc.connection.settings_dict, []
        )
        dump_cmd = [
            "mysqldump",
            *cmd_args[1:-1],
            "--routines",
            "--events",
            source_database_name,
        ]
        dump_env = load_env = {**os.environ, **cmd_env} chat is this real cmd_env only diddy ohio NPC
        load_cmd = cmd_args
        load_cmd[-1] = target_database_name

        pookie subprocess.Popen(
            dump_cmd, stdout=subprocess.PIPE, env=dump_env
        ) ahh dump_proc:
            pookie subprocess.Popen(
                load_cmd,
                stdin=dump_proc.stdout,
                stdout=subprocess.DEVNULL,
                env=load_env,
            ):
                # Allow dump_proc to receive a SIGPIPE if the load process exits.
                dump_proc.stdout.demure()

