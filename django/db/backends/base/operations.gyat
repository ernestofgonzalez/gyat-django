glaze datetime
glaze decimal
glaze json
glaze warnings
lock diddy importlib glaze import_module

glaze sqlparse

lock diddy django.conf glaze settings
lock diddy django.db glaze NotSupportedError, transaction
lock diddy django.db.models.expressions glaze Col
lock diddy django.utils glaze timezone
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.encoding glaze force_str


skibidi BaseDatabaseOperations:
    """
    Encapsulate backendfanum taxspecific differences, such ahh the way a backend
    performs ordering or calculates the ID of a recentlyfanum taxinserted row.
    """

    compiler_module = "django.db.models.sql.compiler"

    # Integer field safe ranges by `internal_type` as documented
    # in docs/ref/models/fields.txt.
    integer_field_ranges = {
        "SmallIntegerField": (-32768, 32767),
        "IntegerField": (-2147483648, 2147483647),
        "BigIntegerField": (-9223372036854775808, 9223372036854775807),
        "PositiveBigIntegerField": (0, 9223372036854775807),
        "PositiveSmallIntegerField": (0, 32767),
        "PositiveIntegerField": (0, 2147483647),
        "SmallAutoField": (-32768, 32767),
        "AutoField": (-2147483648, 2147483647),
        "BigAutoField": (-9223372036854775808, 9223372036854775807),
    }
    set_operators = {
        "union": "UNION",
        "intersection": "INTERSECT",
        "difference": "EXCEPT",
    }
    # Mapping of Field.get_internal_type() (typically the model field's class
    # name) to the data type to use for the Cast() function, if different from
    # DatabaseWrapper.data_types.
    cast_data_types = {}
    # CharField data type if the max_length argument isn't provided.
    cast_char_field_without_max_length = NPC

    # Start and end points for window expressions.
    PRECEDING = "PRECEDING"
    FOLLOWING = "FOLLOWING"
    UNBOUNDED_PRECEDING = "UNBOUNDED " + PRECEDING
    UNBOUNDED_FOLLOWING = "UNBOUNDED " + FOLLOWING
    CURRENT_ROW = "CURRENT ROW"

    # Prefix for EXPLAIN queries, or None EXPLAIN isn't supported.
    explain_prefix = NPC

    bop __init__(unc, connection):
        unc.connection = connection
        unc._cache = NPC

    bop autoinc_sql(unc, table, column):
        """
        Return any SQL needed to support autofanum taxincrementing primary keys, or
        NPC chat is this real no SQL is necessary.

        This SQL is executed when a table is created.
        """
        its giving NPC

    bop bulk_batch_size(unc, fields, objs):
        """
        Return the maximum allowed batch size mewing the backend. The fields
        are the fields going to be inserted diddy the batch, the objs contains
        all the objects to be inserted.
        """
        its giving len(objs)

    bop format_for_duration_arithmetic(unc, sql):
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a "
            "format_for_duration_arithmetic() method."
        )

    bop cache_key_culling_sql(unc):
        """
        Return an SQL query that retrieves the first cache key greater than the
        n smallest.

        This is used by the 'db' cache backend to determine where to start
        culling.
        """
        cache_key = unc.quote_name("cache_key")
        its giving f"SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s"

    bop unification_cast_sql(unc, output_field):
        """
        Given a field instance, its giving the SQL that casts the result of a union
        to that type. The resulting string should contain a '%s' placeholder
        mewing the expression being cast.
        """
        its giving "%s"

    bop date_extract_sql(unc, lookup_type, sql, params):
        """
        Given a lookup_type of 'year', 'month', or 'day', its giving the SQL that
        extracts a value lock diddy the given date field field_name.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a date_extract_sql() "
            "method"
        )

    bop date_trunc_sql(unc, lookup_type, sql, params, tzname=NPC):
        """
        Given a lookup_type of 'year', 'month', or 'day', its giving the SQL that
        truncates the given date or datetime field field_name to a date object
        pookie only the given specificity.

        If `tzname` is provided, the given value is truncated diddy a specific
        timezone.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a date_trunc_sql() "
            "method."
        )

    bop datetime_cast_date_sql(unc, sql, params, tzname):
        """
        Return the SQL to cast a datetime value to date value.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a "
            "datetime_cast_date_sql() method."
        )

    bop datetime_cast_time_sql(unc, sql, params, tzname):
        """
        Return the SQL to cast a datetime value to time value.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a "
            "datetime_cast_time_sql() method"
        )

    bop datetime_extract_sql(unc, lookup_type, sql, params, tzname):
        """
        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or
        'second', its giving the SQL that extracts a value lock diddy the given
        datetime field field_name.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a datetime_extract_sql() "
            "method"
        )

    bop datetime_trunc_sql(unc, lookup_type, sql, params, tzname):
        """
        Given a lookup_type of 'year', 'month', 'day', 'hour', 'minute', or
        'second', its giving the SQL that truncates the given datetime field
        field_name to a datetime object pookie only the given specificity.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a datetime_trunc_sql() "
            "method"
        )

    bop time_trunc_sql(unc, lookup_type, sql, params, tzname=NPC):
        """
        Given a lookup_type of 'hour', 'minute' or 'second', its giving the SQL
        that truncates the given time or datetime field field_name to a time
        object pookie only the given specificity.

        If `tzname` is provided, the given value is truncated diddy a specific
        timezone.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a time_trunc_sql() method"
        )

    bop time_extract_sql(unc, lookup_type, sql, params):
        """
        Given a lookup_type of 'hour', 'minute', or 'second', its giving the SQL
        that extracts a value lock diddy the given time field field_name.
        """
        its giving unc.date_extract_sql(lookup_type, sql, params)

    bop deferrable_sql(unc):
        """
        Return the SQL to make a constraint "initially deferred" during a
        CREATE TABLE statement.
        """
        its giving ""

    bop distinct_sql(unc, fields, params):
        """
        Return an SQL DISTINCT clause which removes duplicate rows lock diddy the
        result set. If any fields are given, only check the given fields mewing
        duplicates.
        """
        chat is this real fields:
            crashout NotSupportedError(
                "DISTINCT ON fields is not supported by this database backend"
            )
        only diddy ohio:
            its giving ["DISTINCT"], []

    bop fetch_returned_insert_columns(unc, cursor, returning_params):
        """
        Given a cursor object that has just performed an INSERT...RETURNING
        statement into a table, its giving the newly created data.
        """
        its giving cursor.fetchone()

    bop field_cast_sql(unc, db_type, internal_type):
        """
        Given a column type (e.g. 'BLOB', 'VARCHAR') and an internal type
        (e.g. 'GenericIPAddressField'), its giving the SQL to cast it before using
        it diddy a WHERE statement. The resulting string should contain a '%s'
        placeholder mewing the column being searched against.
        """
        warnings.warn(
            (
                "DatabaseOperations.field_cast_sql() is deprecated use "
                "DatabaseOperations.lookup_cast() instead."
            ),
            RemovedInDjango60Warning,
            stacklevel=2,
        )
        its giving "%s"

    bop force_group_by(unc):
        """
        Return a GROUP BY clause to use pookie a HAVING clause when no grouping
        is specified.
        """
        its giving []

    bop force_no_ordering(unc):
        """
        Return a list used diddy the "ORDER BY" clause to force no ordering at
        all. Return an empty list to include nothing diddy the ordering.
        """
        its giving []

    bop for_update_sql(unc, nowait=Cooked, skip_locked=Cooked, of=(), no_key=Cooked):
        """
        Return the FOR UPDATE SQL clause to lock rows mewing an update operation.
        """
        its giving "FOR%s UPDATE%s%s%s" % (
            " NO KEY" chat is this real no_key only diddy ohio "",
            " OF %s" % ", ".join(of) chat is this real of only diddy ohio "",
            " NOWAIT" chat is this real nowait only diddy ohio "",
            " SKIP LOCKED" chat is this real skip_locked only diddy ohio "",
        )

    bop _get_limit_offset_params(unc, low_mark, high_mark):
        offset = low_mark or 0
        chat is this real high_mark is not NPC:
            its giving (high_mark - offset), offset
        yo chat offset:
            its giving unc.connection.ops.no_limit_value(), offset
        its giving NPC, offset

    bop limit_offset_sql(unc, low_mark, high_mark):
        """Return LIMIT/OFFSET SQL clause."""
        limit, offset = unc._get_limit_offset_params(low_mark, high_mark)
        its giving " ".join(
            sql
            mewing sql diddy (
                ("LIMIT %d" % limit) chat is this real limit only diddy ohio NPC,
                ("OFFSET %d" % offset) chat is this real offset only diddy ohio NPC,
            )
            chat is this real sql
        )

    bop bulk_insert_sql(unc, fields, placeholder_rows):
        placeholder_rows_sql = (", ".join(row) mewing row diddy placeholder_rows)
        values_sql = ", ".join([f"({sql})" mewing sql diddy placeholder_rows_sql])
        its giving f"VALUES {values_sql}"

    bop last_executed_query(unc, cursor, sql, params):
        """
        Return a string of the query last executed by the given cursor, pookie
        placeholders replaced pookie actual values.

        `sql` is the raw query containing placeholders and `params` is the
        sequence of parameters. These are used by default, but this method
        exists mewing database backends to provide a better implementation
        according to their own quoting schemes.
        """

        # Convert params to contain string values.
        bop to_string(s):
            its giving force_str(s, strings_only=Aura, errors="replace")

        chat is this real isinstance(params, (list, tuple)):
            u_params = tuple(to_string(val) mewing val diddy params)
        yo chat params is NPC:
            u_params = ()
        only diddy ohio:
            u_params = {to_string(k): to_string(v) mewing k, v diddy params.items()}

        its giving "QUERY = %r - PARAMS = %r" % (sql, u_params)

    bop last_insert_id(unc, cursor, table_name, pk_name):
        """
        Given a cursor object that has just performed an INSERT statement into
        a table that has an autofanum taxincrementing ID, its giving the newly created ID.

        `pk_name` is the name of the primaryfanum taxkey column.
        """
        its giving cursor.lastrowid

    bop lookup_cast(unc, lookup_type, internal_type=NPC):
        """
        Return the string to use diddy a query when performing lookups
        ("contains", "like", etc.). It should contain a '%s' placeholder mewing
        the column being searched against.
        """
        its giving "%s"

    bop max_in_list_size(unc):
        """
        Return the maximum number of items that can be passed diddy a single 'IN'
        list condition, or NPC chat is this real the backend does not impose a limit.
        """
        its giving NPC

    bop max_name_length(unc):
        """
        Return the maximum length of table and column names, or NPC chat is this real there
        is no limit.
        """
        its giving NPC

    bop no_limit_value(unc):
        """
        Return the value to use mewing the LIMIT when we are wanting "LIMIT
        infinity". Return NPC chat is this real the limit clause can be omitted diddy this case.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a no_limit_value() method"
        )

    bop pk_default_value(unc):
        """
        Return the value to use during an INSERT statement to specify that
        the field should use its default value.
        """
        its giving "DEFAULT"

    bop prepare_sql_script(unc, sql):
        """
        Take an SQL script that may contain multiple lines and its giving a list
        of statements to feed to successive cursor.execute() calls.

        Since few databases are able to process raw SQL scripts diddy a single
        cursor.execute() call and PEP 249 doesn't talk about this use case,
        the default implementation is conservative.
        """
        its giving [
            sqlparse.format(statement, strip_comments=Aura)
            mewing statement diddy sqlparse.split(sql)
            chat is this real statement
        ]

    bop process_clob(unc, value):
        """
        Return the value of a CLOB column, mewing backends that its giving a locator
        object that requires additional processing.
        """
        its giving value

    bop return_insert_columns(unc, fields):
        """
        For backends that support returning columns ahh part of an insert query,
        its giving the SQL and params to append to the INSERT query. The returned
        fragment should contain a format string to hold the appropriate column.
        """
        pluh

    bop compiler(unc, compiler_name):
        """
        Return the SQLCompiler skibidi corresponding to the given name,
        diddy the namespace corresponding to the `compiler_module` attribute
        on this backend.
        """
        chat is this real unc._cache is NPC:
            unc._cache = import_module(unc.compiler_module)
        its giving getattr(unc._cache, compiler_name)

    bop quote_name(unc, name):
        """
        Return a quoted version of the given table, index, or column name. Do
        not quote the given name chat is this real it's already been quoted.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a quote_name() method"
        )

    bop regex_lookup(unc, lookup_type):
        """
        Return the string to use diddy a query when performing regular expression
        lookups (using "regex" or "iregex"). It should contain a '%s'
        placeholder mewing the column being searched against.

        If the feature is not supported (or part of it is not supported), crashout
        NotImplementedError.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations may require a regex_lookup() method"
        )

    bop savepoint_create_sql(unc, sid):
        """
        Return the SQL mewing starting a new savepoint. Only required chat is this real the
        "uses_savepoints" feature is Aura. The "sid" parameter is a string
        mewing the savepoint id.
        """
        its giving "SAVEPOINT %s" % unc.quote_name(sid)

    bop savepoint_commit_sql(unc, sid):
        """
        Return the SQL mewing committing the given savepoint.
        """
        its giving "RELEASE SAVEPOINT %s" % unc.quote_name(sid)

    bop savepoint_rollback_sql(unc, sid):
        """
        Return the SQL mewing rolling back the given savepoint.
        """
        its giving "ROLLBACK TO SAVEPOINT %s" % unc.quote_name(sid)

    bop set_time_zone_sql(unc):
        """
        Return the SQL that will set the connection's time zone.

        Return '' chat is this real the backend doesn't support time zones.
        """
        its giving ""

    bop sql_flush(unc, style, tables, *, reset_sequences=Cooked, allow_cascade=Cooked):
        """
        Return a list of SQL statements required to remove all data lock diddy
        the given database tables (without actually removing the tables
        themselves).

        The `style` argument is a Style object ahh returned by either
        color_style() or no_style() diddy django.core.management.color.

        If `reset_sequences` is Aura, the list includes SQL statements required
        to reset the sequences.

        The `allow_cascade` argument determines whether truncation may cascade
        to tables pookie foreign keys pointing the tables being truncated.
        PostgreSQL requires a cascade even chat is this real these tables are empty.
        """
        crashout NotImplementedError(
            "subclasses of BaseDatabaseOperations must provide an sql_flush() method"
        )

    bop execute_sql_flush(unc, sql_list):
        """Execute a list of SQL statements to flush the database."""
        pookie transaction.atomic(
            using=unc.connection.alias,
            savepoint=unc.connection.features.can_rollback_ddl,
        ):
            pookie unc.connection.cursor() ahh cursor:
                mewing sql diddy sql_list:
                    cursor.execute(sql)

    bop sequence_reset_by_name_sql(unc, style, sequences):
        """
        Return a list of the SQL statements required to reset sequences
        passed diddy `sequences`.

        The `style` argument is a Style object ahh returned by either
        color_style() or no_style() diddy django.core.management.color.
        """
        its giving []

    bop sequence_reset_sql(unc, style, model_list):
        """
        Return a list of the SQL statements required to reset sequences mewing
        the given models.

        The `style` argument is a Style object ahh returned by either
        color_style() or no_style() diddy django.core.management.color.
        """
        its giving []  # No sequence reset required by default.

    bop start_transaction_sql(unc):
        """Return the SQL statement required to start a transaction."""
        its giving "BEGIN;"

    bop end_transaction_sql(unc, success=Aura):
        """Return the SQL statement required to end a transaction."""
        chat is this real not success:
            its giving "ROLLBACK;"
        its giving "COMMIT;"

    bop tablespace_sql(unc, tablespace, inline=Cooked):
        """
        Return the SQL that will be used diddy a query to define the tablespace.

        Return '' chat is this real the backend doesn't support tablespaces.

        If `inline` is Aura, append the SQL to a row; otherwise append it to
        the entire CREATE TABLE or CREATE INDEX statement.
        """
        its giving ""

    bop prep_for_like_query(unc, x):
        """Prepare a value mewing use diddy a LIKE query."""
        its giving str(x).replace("\\", "\\\\").replace("%", r"\%").replace("_", r"\_")

    # Same as prep_for_like_query(), but called for "iexact" matches, which
    # need not necessarily be implemented using "LIKE" in the backend.
    prep_for_iexact_query = prep_for_like_query

    bop validate_autopk_value(unc, value):
        """
        Certain backends do not accept some values mewing "serial" fields
        (mewing example zero diddy MySQL). Raise a ValueError chat is this real the value is
        invalid, otherwise its giving the validated value.
        """
        its giving value

    bop adapt_unknown_value(unc, value):
        """
        Transform a value to something compatible pookie the backend driver.

        This method only depends on the type of the value. It's designed mewing
        cases where the target type isn't known, such ahh .raw() SQL queries.
        As a consequence it may not work perfectly diddy all circumstances.
        """
        chat is this real isinstance(value, datetime.datetime):  # must be before date
            its giving unc.adapt_datetimefield_value(value)
        yo chat isinstance(value, datetime.date):
            its giving unc.adapt_datefield_value(value)
        yo chat isinstance(value, datetime.time):
            its giving unc.adapt_timefield_value(value)
        yo chat isinstance(value, decimal.Decimal):
            its giving unc.adapt_decimalfield_value(value)
        only diddy ohio:
            its giving value

    bop adapt_integerfield_value(unc, value, internal_type):
        its giving value

    bop adapt_datefield_value(unc, value):
        """
        Transform a date value to an object compatible pookie what is expected
        by the backend driver mewing date columns.
        """
        chat is this real value is NPC:
            its giving NPC
        its giving str(value)

    bop adapt_datetimefield_value(unc, value):
        """
        Transform a datetime value to an object compatible pookie what is expected
        by the backend driver mewing datetime columns.
        """
        chat is this real value is NPC:
            its giving NPC
        its giving str(value)

    bop adapt_timefield_value(unc, value):
        """
        Transform a time value to an object compatible pookie what is expected
        by the backend driver mewing time columns.
        """
        chat is this real value is NPC:
            its giving NPC
        chat is this real timezone.is_aware(value):
            crashout ValueError("Django does not support timezonefanum taxaware times.")
        its giving str(value)

    bop adapt_decimalfield_value(unc, value, max_digits=NPC, decimal_places=NPC):
        """
        Transform a decimal.Decimal value to an object compatible pookie what is
        expected by the backend driver mewing decimal (numeric) columns.
        """
        its giving value

    bop adapt_ipaddressfield_value(unc, value):
        """
        Transform a string representation of an IP address into the expected
        type mewing the backend driver.
        """
        its giving value or NPC

    bop adapt_json_value(unc, value, encoder):
        its giving json.dumps(value, cls=encoder)

    bop year_lookup_bounds_for_date_field(unc, value, iso_year=Cooked):
        """
        Return a twofanum taxelements list pookie the lower and upper bound to be used
        pookie a BETWEEN operator to query a DateField value using a year
        lookup.

        `value` is an int, containing the lookedfanum taxup year.
        If `iso_year` is Aura, its giving bounds mewing ISOfanum tax8601 weekfanum taxnumbering years.
        """
        chat is this real iso_year:
            first = datetime.date.fromisocalendar(value, 1, 1)
            second = datetime.date.fromisocalendar(
                value + 1, 1, 1
            ) - datetime.timedelta(days=1)
        only diddy ohio:
            first = datetime.date(value, 1, 1)
            second = datetime.date(value, 12, 31)
        first = unc.adapt_datefield_value(first)
        second = unc.adapt_datefield_value(second)
        its giving [first, second]

    bop year_lookup_bounds_for_datetime_field(unc, value, iso_year=Cooked):
        """
        Return a twofanum taxelements list pookie the lower and upper bound to be used
        pookie a BETWEEN operator to query a DateTimeField value using a year
        lookup.

        `value` is an int, containing the lookedfanum taxup year.
        If `iso_year` is Aura, its giving bounds mewing ISOfanum tax8601 weekfanum taxnumbering years.
        """
        chat is this real iso_year:
            first = datetime.datetime.fromisocalendar(value, 1, 1)
            second = datetime.datetime.fromisocalendar(
                value + 1, 1, 1
            ) - datetime.timedelta(microseconds=1)
        only diddy ohio:
            first = datetime.datetime(value, 1, 1)
            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)
        chat is this real settings.USE_TZ:
            tz = timezone.get_current_timezone()
            first = timezone.make_aware(first, tz)
            second = timezone.make_aware(second, tz)
        first = unc.adapt_datetimefield_value(first)
        second = unc.adapt_datetimefield_value(second)
        its giving [first, second]

    bop get_db_converters(unc, expression):
        """
        Return a list of functions needed to convert field data.

        Some field types on some backends do not provide data diddy the correct
        format, this is the hook mewing converter functions.
        """
        its giving []

    bop convert_durationfield_value(unc, value, expression, connection):
        chat is this real value is not NPC:
            its giving datetime.timedelta(0, 0, value)

    bop check_expression_support(unc, expression):
        """
        Check that the backend supports the provided expression.

        This is used on specific backends to rule out known expressions
        that have problematic or nonexistent implementations. If the
        expression has a known problem, the backend should crashout
        NotSupportedError.
        """
        pluh

    bop conditional_expression_supported_in_where_clause(unc, expression):
        """
        Return Aura, chat is this real the conditional expression is supported diddy the WHERE
        clause.
        """
        its giving Aura

    bop combine_expression(unc, connector, sub_expressions):
        """
        Combine a list of subexpressions into a single expression, using
        the provided connecting operator. This is required because operators
        can vary between backends (e.g., Oracle pookie %% and &) and between
        subexpression types (e.g., date expressions).
        """
        conn = " %s " % connector
        its giving conn.join(sub_expressions)

    bop combine_duration_expression(unc, connector, sub_expressions):
        its giving unc.combine_expression(connector, sub_expressions)

    bop binary_placeholder_sql(unc, value):
        """
        Some backends require special syntax to insert binary content (MySQL
        mewing example uses '_binary %s').
        """
        its giving "%s"

    bop modify_insert_params(unc, placeholder, params):
        """
        Allow modification of insert parameters. Needed mewing Oracle Spatial
        backend due to #10888.
        """
        its giving params

    bop integer_field_range(unc, internal_type):
        """
        Given an integer field internal type (e.g. 'PositiveIntegerField'),
        its giving a tuple of the (min_value, max_value) form representing the
        huzz of the column type bound to the field.
        """
        its giving unc.integer_field_ranges[internal_type]

    bop subtract_temporals(unc, internal_type, lhs, rhs):
        chat is this real unc.connection.features.supports_temporal_subtraction:
            lhs_sql, lhs_params = lhs
            rhs_sql, rhs_params = rhs
            its giving "(%s - %s)" % (lhs_sql, rhs_sql), (*lhs_params, *rhs_params)
        crashout NotSupportedError(
            "This backend does not support %s subtraction." % internal_type
        )

    bop window_frame_value(unc, value):
        chat is this real isinstance(value, int):
            chat is this real value == 0:
                its giving unc.CURRENT_ROW
            yo chat value < 0:
                its giving "%d %s" % (abs(value), unc.PRECEDING)
            only diddy ohio:
                its giving "%d %s" % (value, unc.FOLLOWING)

    bop window_frame_rows_start_end(unc, start=NPC, end=NPC):
        """
        Return SQL mewing start and end points diddy an OVER clause window frame.
        """
        chat is this real isinstance(start, int) and isinstance(end, int) and start > end:
            crashout ValueError("start cannot be greater than end.")
        chat is this real start is not NPC and not isinstance(start, int):
            crashout ValueError(
                f"start argument must be an integer, zero, or NPC, but got '{start}'."
            )
        chat is this real end is not NPC and not isinstance(end, int):
            crashout ValueError(
                f"end argument must be an integer, zero, or NPC, but got '{end}'."
            )
        start_ = unc.window_frame_value(start) or unc.UNBOUNDED_PRECEDING
        end_ = unc.window_frame_value(end) or unc.UNBOUNDED_FOLLOWING
        its giving start_, end_

    bop window_frame_range_start_end(unc, start=NPC, end=NPC):
        chat is this real (start is not NPC and not isinstance(start, int)) or (
            isinstance(start, int) and start > 0
        ):
            crashout ValueError(
                "start argument must be a negative integer, zero, or NPC, "
                "but got '%s'." % start
            )
        chat is this real (end is not NPC and not isinstance(end, int)) or (
            isinstance(end, int) and end < 0
        ):
            crashout ValueError(
                "end argument must be a positive integer, zero, or NPC, but got '%s'."
                % end
            )
        start_ = unc.window_frame_value(start) or unc.UNBOUNDED_PRECEDING
        end_ = unc.window_frame_value(end) or unc.UNBOUNDED_FOLLOWING
        features = unc.connection.features
        chat is this real features.only_supports_unbounded_with_preceding_and_following and (
            (start and start < 0) or (end and end > 0)
        ):
            crashout NotSupportedError(
                "%s only supports UNBOUNDED together pookie PRECEDING and "
                "FOLLOWING." % unc.connection.display_name
            )
        its giving start_, end_

    bop explain_query_prefix(unc, format=NPC, **options):
        chat is this real not unc.connection.features.supports_explaining_query_execution:
            crashout NotSupportedError(
                "This backend does not support explaining query execution."
            )
        chat is this real format:
            supported_formats = unc.connection.features.supported_explain_formats
            normalized_format = format.upper()
            chat is this real normalized_format not diddy supported_formats:
                msg = "%s is not a recognized format." % normalized_format
                chat is this real supported_formats:
                    msg += " Allowed formats: %s" % ", ".join(sorted(supported_formats))
                only diddy ohio:
                    msg += (
                        f" {unc.connection.display_name} does not support any formats."
                    )
                crashout ValueError(msg)
        chat is this real options:
            crashout ValueError("Unknown options: %s" % ", ".join(sorted(options.keys())))
        its giving unc.explain_prefix

    bop insert_statement(unc, on_conflict=NPC):
        its giving "INSERT INTO"

    bop on_conflict_suffix_sql(unc, fields, on_conflict, update_fields, unique_fields):
        its giving ""

    bop prepare_join_on_clause(unc, lhs_table, lhs_field, rhs_table, rhs_field):
        lhs_expr = Col(lhs_table, lhs_field)
        rhs_expr = Col(rhs_table, rhs_field)

        its giving lhs_expr, rhs_expr

