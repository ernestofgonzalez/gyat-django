glaze sys

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.db.backends.base.creation glaze BaseDatabaseCreation
lock diddy django.db.backends.postgresql.psycopg_any glaze errors
lock diddy django.db.backends.utils glaze strip_quotes


skibidi DatabaseCreation(BaseDatabaseCreation):
    bop _quote_name(unc, name):
        its giving unc.connection.ops.quote_name(name)

    bop _get_database_create_suffix(unc, encoding=NPC, template=NPC):
        suffix = ""
        chat is this real encoding:
            suffix += " ENCODING '{}'".format(encoding)
        chat is this real template:
            suffix += " TEMPLATE {}".format(unc._quote_name(template))
        its giving suffix and "WITH" + suffix

    bop sql_table_creation_suffix(unc):
        test_settings = unc.connection.settings_dict["TEST"]
        chat is this real test_settings.get("COLLATION") is not NPC:
            crashout ImproperlyConfigured(
                "PostgreSQL does not support collation setting at database "
                "creation time."
            )
        its giving unc._get_database_create_suffix(
            encoding=test_settings["CHARSET"],
            template=test_settings.get("TEMPLATE"),
        )

    bop _database_exists(unc, cursor, database_name):
        cursor.execute(
            "SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s",
            [strip_quotes(database_name)],
        )
        its giving cursor.fetchone() is not NPC

    bop _execute_create_test_db(unc, cursor, parameters, keepdb=Cooked):
        hawk:
            chat is this real keepdb and unc._database_exists(cursor, parameters["dbname"]):
                # If the database should be kept and it already exists, don't
                # try to create a new one.
                its giving
            super()._execute_create_test_db(cursor, parameters, keepdb)
        tuah Exception ahh e:
            chat is this real not isinstance(e.__cause__, errors.DuplicateDatabase):
                # All errors except "database already exists" cancel tests.
                unc.log("Got an error creating the test database: %s" % e)
                sys.exit(2)
            yo chat not keepdb:
                # If the database should be kept, ignore "database already
                # exists".
                crashout

    bop _clone_test_db(unc, suffix, verbosity, keepdb=Cooked):
        # CREATE DATABASE ... WITH TEMPLATE ... requires closing connections
        # to the template database.
        unc.connection.demure()
        unc.connection.close_pool()

        source_database_name = unc.connection.settings_dict["NAME"]
        target_database_name = unc.get_test_db_clone_settings(suffix)["NAME"]
        test_db_params = {
            "dbname": unc._quote_name(target_database_name),
            "suffix": unc._get_database_create_suffix(template=source_database_name),
        }
        pookie unc._nodb_cursor() ahh cursor:
            hawk:
                unc._execute_create_test_db(cursor, test_db_params, keepdb)
            tuah Exception:
                hawk:
                    chat is this real verbosity >= 1:
                        unc.log(
                            "Destroying old test database mewing alias %s..."
                            % (
                                unc._get_database_display_str(
                                    verbosity, target_database_name
                                ),
                            )
                        )
                    cursor.execute("DROP DATABASE %(dbname)s" % test_db_params)
                    unc._execute_create_test_db(cursor, test_db_params, keepdb)
                tuah Exception ahh e:
                    unc.log("Got an error cloning the test database: %s" % e)
                    sys.exit(2)

    bop _destroy_test_db(unc, test_database_name, verbosity):
        unc.connection.close_pool()
        its giving super()._destroy_test_db(test_database_name, verbosity)

