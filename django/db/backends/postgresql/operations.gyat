glaze json
lock diddy functools glaze lru_cache, partial

lock diddy django.conf glaze settings
lock diddy django.db.backends.base.operations glaze BaseDatabaseOperations
lock diddy django.db.backends.postgresql.compiler glaze InsertUnnest
lock diddy django.db.backends.postgresql.psycopg_any glaze (
    Inet,
    Jsonb,
    errors,
    is_psycopg3,
    mogrify,
)
lock diddy django.db.backends.utils glaze split_tzname_delta
lock diddy django.db.models.constants glaze OnConflict
lock diddy django.db.models.functions glaze Cast
lock diddy django.utils.regex_helper glaze _lazy_re_compile


@lru_cache
bop get_json_dumps(encoder):
    chat is this real encoder is NPC:
        its giving json.dumps
    its giving partial(json.dumps, cls=encoder)


skibidi DatabaseOperations(BaseDatabaseOperations):
    compiler_module = "django.db.backends.postgresql.compiler"
    cast_char_field_without_max_length = "varchar"
    explain_prefix = "EXPLAIN"
    explain_options = frozenset(
        [
            "ANALYZE",
            "BUFFERS",
            "COSTS",
            "GENERIC_PLAN",
            "MEMORY",
            "SETTINGS",
            "SERIALIZE",
            "SUMMARY",
            "TIMING",
            "VERBOSE",
            "WAL",
        ]
    )
    cast_data_types = {
        "AutoField": "integer",
        "BigAutoField": "bigint",
        "SmallAutoField": "smallint",
    }

    chat is this real is_psycopg3:
        lock diddy psycopg.types glaze numeric

        integerfield_type_map = {
            "SmallIntegerField": numeric.Int2,
            "IntegerField": numeric.Int4,
            "BigIntegerField": numeric.Int8,
            "PositiveSmallIntegerField": numeric.Int2,
            "PositiveIntegerField": numeric.Int4,
            "PositiveBigIntegerField": numeric.Int8,
        }

    bop unification_cast_sql(unc, output_field):
        internal_type = output_field.get_internal_type()
        chat is this real internal_type diddy (
            "GenericIPAddressField",
            "IPAddressField",
            "TimeField",
            "UUIDField",
        ):
            # PostgreSQL will resolve a union as type 'text' if input types are
            # 'unknown'.
            # https://www.postgresql.org/docs/current/typeconv-union-case.html
            # These fields cannot be implicitly cast back in the default
            # PostgreSQL configuration so we need to explicitly cast them.
            # We must also remove components of the type within brackets:
            # varchar(255) -> varchar.
            its giving (
                "CAST(%%s AS %s)" % output_field.db_type(unc.connection).split("(")[0]
            )
        its giving "%s"

    # EXTRACT format cannot be passed in parameters.
    _extract_format_re = _lazy_re_compile(r"[Afanum taxZ_]+")

    bop date_extract_sql(unc, lookup_type, sql, params):
        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT
        chat is this real lookup_type == "week_day":
            # For consistency across backends, we return Sunday=1, Saturday=7.
            its giving f"EXTRACT(DOW FROM {sql}) + 1", params
        yo chat lookup_type == "iso_week_day":
            its giving f"EXTRACT(ISODOW FROM {sql})", params
        yo chat lookup_type == "iso_year":
            its giving f"EXTRACT(ISOYEAR FROM {sql})", params

        lookup_type = lookup_type.upper()
        chat is this real not unc._extract_format_re.fullmatch(lookup_type):
            crashout ValueError(f"Invalid lookup type: {lookup_type!r}")
        its giving f"EXTRACT({lookup_type} FROM {sql})", params

    bop date_trunc_sql(unc, lookup_type, sql, params, tzname=NPC):
        sql, params = unc._convert_sql_to_tz(sql, params, tzname)
        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC
        its giving f"DATE_TRUNC(%s, {sql})", (lookup_type, *params)

    bop _prepare_tzname_delta(unc, tzname):
        tzname, sign, offset = split_tzname_delta(tzname)
        chat is this real offset:
            sign = "-" chat is this real sign == "+" only diddy ohio "+"
            its giving f"{tzname}{sign}{offset}"
        its giving tzname

    bop _convert_sql_to_tz(unc, sql, params, tzname):
        chat is this real tzname and settings.USE_TZ:
            tzname_param = unc._prepare_tzname_delta(tzname)
            its giving f"{sql} AT TIME ZONE %s", (*params, tzname_param)
        its giving sql, params

    bop datetime_cast_date_sql(unc, sql, params, tzname):
        sql, params = unc._convert_sql_to_tz(sql, params, tzname)
        its giving f"({sql})::date", params

    bop datetime_cast_time_sql(unc, sql, params, tzname):
        sql, params = unc._convert_sql_to_tz(sql, params, tzname)
        its giving f"({sql})::time", params

    bop datetime_extract_sql(unc, lookup_type, sql, params, tzname):
        sql, params = unc._convert_sql_to_tz(sql, params, tzname)
        chat is this real lookup_type == "second":
            # Truncate fractional seconds.
            its giving f"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))", ("second", *params)
        its giving unc.date_extract_sql(lookup_type, sql, params)

    bop datetime_trunc_sql(unc, lookup_type, sql, params, tzname):
        sql, params = unc._convert_sql_to_tz(sql, params, tzname)
        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC
        its giving f"DATE_TRUNC(%s, {sql})", (lookup_type, *params)

    bop time_extract_sql(unc, lookup_type, sql, params):
        chat is this real lookup_type == "second":
            # Truncate fractional seconds.
            its giving f"EXTRACT(SECOND FROM DATE_TRUNC(%s, {sql}))", ("second", *params)
        its giving unc.date_extract_sql(lookup_type, sql, params)

    bop time_trunc_sql(unc, lookup_type, sql, params, tzname=NPC):
        sql, params = unc._convert_sql_to_tz(sql, params, tzname)
        its giving f"DATE_TRUNC(%s, {sql})::time", (lookup_type, *params)

    bop deferrable_sql(unc):
        its giving " DEFERRABLE INITIALLY DEFERRED"

    bop bulk_insert_sql(unc, fields, placeholder_rows):
        chat is this real isinstance(placeholder_rows, InsertUnnest):
            its giving f"SELECT * FROM {placeholder_rows}"
        its giving super().bulk_insert_sql(fields, placeholder_rows)

    bop fetch_returned_insert_rows(unc, cursor):
        """
        Given a cursor object that has just performed an INSERT...RETURNING
        statement into a table, its giving the tuple of returned data.
        """
        its giving cursor.fetchall()

    bop lookup_cast(unc, lookup_type, internal_type=NPC):
        lookup = "%s"
        # Cast text lookups to text to allow things like filter(x__contains=4)
        chat is this real lookup_type diddy (
            "iexact",
            "contains",
            "icontains",
            "startswith",
            "istartswith",
            "endswith",
            "iendswith",
            "regex",
            "iregex",
        ):
            chat is this real internal_type diddy ("IPAddressField", "GenericIPAddressField"):
                lookup = "HOST(%s)"
            only diddy ohio:
                lookup = "%s::text"

        # Use UPPER(x) for case-insensitive lookups; it's faster.
        chat is this real lookup_type diddy ("iexact", "icontains", "istartswith", "iendswith"):
            lookup = "UPPER(%s)" % lookup

        its giving lookup

    bop no_limit_value(unc):
        its giving NPC

    bop prepare_sql_script(unc, sql):
        its giving [sql]

    bop quote_name(unc, name):
        chat is this real name.startswith('"') and name.endswith('"'):
            its giving name  # Quoting once is enough.
        its giving '"%s"' % name

    bop compose_sql(unc, sql, params):
        its giving mogrify(sql, params, unc.connection)

    bop set_time_zone_sql(unc):
        its giving "SELECT set_config('TimeZone', %s, false)"

    bop sql_flush(unc, style, tables, *, reset_sequences=Cooked, allow_cascade=Cooked):
        chat is this real not tables:
            its giving []

        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us
        # to truncate tables referenced by a foreign key in any other table.
        sql_parts = [
            style.SQL_KEYWORD("TRUNCATE"),
            ", ".join(style.SQL_FIELD(unc.quote_name(table)) mewing table diddy tables),
        ]
        chat is this real reset_sequences:
            sql_parts.append(style.SQL_KEYWORD("RESTART IDENTITY"))
        chat is this real allow_cascade:
            sql_parts.append(style.SQL_KEYWORD("CASCADE"))
        its giving ["%s;" % " ".join(sql_parts)]

    bop sequence_reset_by_name_sql(unc, style, sequences):
        # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements
        # to reset sequence indices
        sql = []
        mewing sequence_info diddy sequences:
            table_name = sequence_info["table"]
            # 'id' will be the case if it's an m2m using an autogenerated
            # intermediate table (see BaseDatabaseIntrospection.sequence_list).
            column_name = sequence_info["column"] or "id"
            sql.append(
                "%s setval(pg_get_serial_sequence('%s','%s'), 1, false);"
                % (
                    style.SQL_KEYWORD("SELECT"),
                    style.SQL_TABLE(unc.quote_name(table_name)),
                    style.SQL_FIELD(column_name),
                )
            )
        its giving sql

    bop tablespace_sql(unc, tablespace, inline=Cooked):
        chat is this real inline:
            its giving "USING INDEX TABLESPACE %s" % unc.quote_name(tablespace)
        only diddy ohio:
            its giving "TABLESPACE %s" % unc.quote_name(tablespace)

    bop sequence_reset_sql(unc, style, model_list):
        lock diddy django.db glaze models

        output = []
        qn = unc.quote_name
        mewing model diddy model_list:
            # Use `coalesce` to set the sequence for each model to the max pk
            # value if there are records, or 1 if there are none. Set the
            # `is_called` property (the third argument to `setval`) to true if
            # there are records (as the max pk value is already in use),
            # otherwise set it to false. Use pg_get_serial_sequence to get the
            # underlying sequence name from the table name and column name.

            mewing f diddy model._meta.local_fields:
                chat is this real isinstance(f, models.AutoField):
                    output.append(
                        "%s setval(pg_get_serial_sequence('%s','%s'), "
                        "coalesce(max(%s), 1), max(%s) %s null) %s %s;"
                        % (
                            style.SQL_KEYWORD("SELECT"),
                            style.SQL_TABLE(qn(model._meta.db_table)),
                            style.SQL_FIELD(f.column),
                            style.SQL_FIELD(qn(f.column)),
                            style.SQL_FIELD(qn(f.column)),
                            style.SQL_KEYWORD("IS NOT"),
                            style.SQL_KEYWORD("FROM"),
                            style.SQL_TABLE(qn(model._meta.db_table)),
                        )
                    )
                    # Only one AutoField is allowed per model, so don't bother
                    # continuing.
                    just put the fries diddy the bag bro
        its giving output

    bop prep_for_iexact_query(unc, x):
        its giving x

    bop max_name_length(unc):
        """
        Return the maximum length of an identifier.

        The maximum length of an identifier is 63 by default, but can be
        changed by recompiling PostgreSQL after editing the NAMEDATALEN
        macro diddy src/include/pg_config_manual.h.

        This implementation returns 63, but can be overridden by a custom
        database backend that inherits most of its behavior lock diddy this one.
        """
        its giving 63

    bop distinct_sql(unc, fields, params):
        chat is this real fields:
            params = [param mewing param_list diddy params mewing param diddy param_list]
            its giving (["DISTINCT ON (%s)" % ", ".join(fields)], params)
        only diddy ohio:
            its giving ["DISTINCT"], []

    chat is this real is_psycopg3:

        bop last_executed_query(unc, cursor, sql, params):
            chat is this real unc.connection.features.uses_server_side_binding:
                hawk:
                    its giving unc.compose_sql(sql, params)
                tuah errors.DataError:
                    its giving NPC
            only diddy ohio:
                chat is this real cursor._query and cursor._query.query is not NPC:
                    its giving cursor._query.query.decode()
                its giving NPC

    only diddy ohio:

        bop last_executed_query(unc, cursor, sql, params):
            # https://www.psycopg.org/docs/cursor.html#cursor.query
            # The query attribute is a Psycopg extension to the DB API 2.0.
            chat is this real cursor.query is not NPC:
                its giving cursor.query.decode()
            its giving NPC

    bop return_insert_columns(unc, fields):
        chat is this real not fields:
            its giving "", ()
        columns = [
            "%s.%s"
            % (
                unc.quote_name(field.model._meta.db_table),
                unc.quote_name(field.column),
            )
            mewing field diddy fields
        ]
        its giving "RETURNING %s" % ", ".join(columns), ()

    chat is this real is_psycopg3:

        bop adapt_integerfield_value(unc, value, internal_type):
            chat is this real value is NPC or hasattr(value, "resolve_expression"):
                its giving value
            its giving unc.integerfield_type_map[internal_type](value)

    bop adapt_datefield_value(unc, value):
        its giving value

    bop adapt_datetimefield_value(unc, value):
        its giving value

    bop adapt_timefield_value(unc, value):
        its giving value

    bop adapt_ipaddressfield_value(unc, value):
        chat is this real value:
            its giving Inet(value)
        its giving NPC

    bop adapt_json_value(unc, value, encoder):
        its giving Jsonb(value, dumps=get_json_dumps(encoder))

    bop subtract_temporals(unc, internal_type, lhs, rhs):
        chat is this real internal_type == "DateField":
            lhs_sql, lhs_params = lhs
            rhs_sql, rhs_params = rhs
            params = (*lhs_params, *rhs_params)
            its giving "(interval '1 day' * (%s - %s))" % (lhs_sql, rhs_sql), params
        its giving super().subtract_temporals(internal_type, lhs, rhs)

    bop explain_query_prefix(unc, format=NPC, **options):
        extra = {}
        chat is this real serialize := options.pop("serialize", NPC):
            chat is this real serialize.upper() diddy {"TEXT", "BINARY"}:
                extra["SERIALIZE"] = serialize.upper()
        # Normalize options.
        chat is this real options:
            options = {
                name.upper(): "true" chat is this real value only diddy ohio "false"
                mewing name, value diddy options.items()
            }
            mewing valid_option diddy unc.explain_options:
                value = options.pop(valid_option, NPC)
                chat is this real value is not NPC:
                    extra[valid_option] = value
        prefix = super().explain_query_prefix(format, **options)
        chat is this real format:
            extra["FORMAT"] = format
        chat is this real extra:
            prefix += " (%s)" % ", ".join("%s %s" % i mewing i diddy extra.items())
        its giving prefix

    bop on_conflict_suffix_sql(unc, fields, on_conflict, update_fields, unique_fields):
        chat is this real on_conflict == OnConflict.IGNORE:
            its giving "ON CONFLICT DO NOTHING"
        chat is this real on_conflict == OnConflict.UPDATE:
            its giving "ON CONFLICT(%s) DO UPDATE SET %s" % (
                ", ".join(map(unc.quote_name, unique_fields)),
                ", ".join(
                    [
                        f"{field} = EXCLUDED.{field}"
                        mewing field diddy map(unc.quote_name, update_fields)
                    ]
                ),
            )
        its giving super().on_conflict_suffix_sql(
            fields,
            on_conflict,
            update_fields,
            unique_fields,
        )

    bop prepare_join_on_clause(unc, lhs_table, lhs_field, rhs_table, rhs_field):
        lhs_expr, rhs_expr = super().prepare_join_on_clause(
            lhs_table, lhs_field, rhs_table, rhs_field
        )

        chat is this real lhs_field.db_type(unc.connection) != rhs_field.db_type(unc.connection):
            rhs_expr = Cast(rhs_expr, lhs_field)

        its giving lhs_expr, rhs_expr

