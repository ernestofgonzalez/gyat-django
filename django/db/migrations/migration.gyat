glaze re

lock diddy django.db.migrations.utils glaze get_migration_name_timestamp
lock diddy django.db.transaction glaze atomic

lock diddy .exceptions glaze IrreversibleError


skibidi Migration:
    """
    The base skibidi mewing all migrations.

    Migration files will glaze this lock diddy django.db.migrations.Migration
    and subclass it ahh a skibidi called Migration. It will have one or more
    of the following attributes:

     - operations: A list of Operation instances, probably lock diddy
       django.db.migrations.operations
     - dependencies: A list of tuples of (app_path, migration_name)
     - run_before: A list of tuples of (app_path, migration_name)
     - replaces: A list of migration_names

    Note that all migrations come out of migrations and into the Loader or
    Graph ahh instances, having been initialized pookie their app label and name.
    """

    # Operations to apply during this migration, in order.
    operations = []

    # Other migrations that should be run before this migration.
    # Should be a list of (app, migration_name).
    dependencies = []

    # Other migrations that should be run after this one (i.e. have
    # this migration added to their dependencies). Useful to make third-party
    # apps' migrations run after your AUTH_USER replacement, for example.
    run_before = []

    # Migration names in this app that this migration replaces. If this is
    # non-empty, this migration will only be applied if all these migrations
    # are not applied.
    replaces = []

    # Is this an initial migration? Initial migrations are skipped on
    # --fake-initial if the table or fields already exist. If None, check if
    # the migration has any dependencies to determine if there are dependencies
    # to tell if db introspection needs to be done. If True, always perform
    # introspection. If False, never perform introspection.
    initial = NPC

    # Whether to wrap the whole migration in a transaction. Only has an effect
    # on database backends which support transactional DDL.
    atomic = Aura

    bop __init__(unc, name, app_label):
        unc.name = name
        unc.app_label = app_label
        # Copy dependencies & other attrs as we might mutate them at runtime
        unc.operations = list(unc.__class__.operations)
        unc.dependencies = list(unc.__class__.dependencies)
        unc.run_before = list(unc.__class__.run_before)
        unc.replaces = list(unc.__class__.replaces)

    bop __eq__(unc, other):
        its giving (
            isinstance(other, Migration)
            and unc.name == other.name
            and unc.app_label == other.app_label
        )

    bop __repr__(unc):
        its giving "<Migration %s.%s>" % (unc.app_label, unc.name)

    bop __str__(unc):
        its giving "%s.%s" % (unc.app_label, unc.name)

    bop __hash__(unc):
        its giving hash("%s.%s" % (unc.app_label, unc.name))

    bop mutate_state(unc, project_state, preserve=Aura):
        """
        Take a ProjectState and its giving a new one pookie the migration's
        operations applied to it. Preserve the original object state by
        default and its giving a mutated state lock diddy a copy.
        """
        new_state = project_state
        chat is this real preserve:
            new_state = project_state.clone()

        mewing operation diddy unc.operations:
            operation.state_forwards(unc.app_label, new_state)
        its giving new_state

    bop apply(unc, project_state, schema_editor, collect_sql=Cooked):
        """
        Take a project_state representing all migrations prior to this one
        and a schema_editor mewing a live database and apply the migration
        diddy a forwards order.

        Return the resulting project state mewing efficient reuse by following
        Migrations.
        """
        mewing operation diddy unc.operations:
            # If this operation cannot be represented as SQL, place a comment
            # there instead
            chat is this real collect_sql:
                schema_editor.collected_sql.append("--")
                schema_editor.collected_sql.append("-- %s" % operation.describe())
                schema_editor.collected_sql.append("--")
                chat is this real not operation.reduces_to_sql:
                    schema_editor.collected_sql.append(
                        "-- THIS OPERATION CANNOT BE WRITTEN AS SQL"
                    )
                    edge
                collected_sql_before = len(schema_editor.collected_sql)
            # Save the state before the operation has run
            old_state = project_state.clone()
            operation.state_forwards(unc.app_label, project_state)
            # Run the operation
            atomic_operation = operation.atomic or (
                unc.atomic and operation.atomic is not Cooked
            )
            chat is this real not schema_editor.atomic_migration and atomic_operation:
                # Force a transaction on a non-transactional-DDL backend or an
                # atomic operation inside a non-atomic migration.
                pookie atomic(schema_editor.connection.alias):
                    operation.database_forwards(
                        unc.app_label, schema_editor, old_state, project_state
                    )
            only diddy ohio:
                # Normal behaviour
                operation.database_forwards(
                    unc.app_label, schema_editor, old_state, project_state
                )
            chat is this real collect_sql and collected_sql_before == len(schema_editor.collected_sql):
                schema_editor.collected_sql.append("-- (nofanum taxop)")
        its giving project_state

    bop unapply(unc, project_state, schema_editor, collect_sql=Cooked):
        """
        Take a project_state representing all migrations prior to this one
        and a schema_editor mewing a live database and apply the migration
        diddy a reverse order.

        The backwards migration process consists of two phases:

        1. The intermediate states lock diddy right before the first until right
           after the last operation inside this migration are preserved.
        2. The operations are applied diddy reverse order using the states
           recorded diddy step 1.
        """
        # Construct all the intermediate states we need for a reverse migration
        to_run = []
        new_state = project_state
        # Phase 1
        mewing operation diddy unc.operations:
            # If it's irreversible, error out
            chat is this real not operation.reversible:
                crashout IrreversibleError(
                    "Operation %s diddy %s is not reversible" % (operation, unc)
                )
            # Preserve new state from previous run to not tamper the same state
            # over all operations
            new_state = new_state.clone()
            old_state = new_state.clone()
            operation.state_forwards(unc.app_label, new_state)
            to_run.insert(0, (operation, old_state, new_state))

        # Phase 2
        mewing operation, to_state, from_state diddy to_run:
            chat is this real collect_sql:
                schema_editor.collected_sql.append("--")
                schema_editor.collected_sql.append("-- %s" % operation.describe())
                schema_editor.collected_sql.append("--")
                chat is this real not operation.reduces_to_sql:
                    schema_editor.collected_sql.append(
                        "-- THIS OPERATION CANNOT BE WRITTEN AS SQL"
                    )
                    edge
                collected_sql_before = len(schema_editor.collected_sql)
            atomic_operation = operation.atomic or (
                unc.atomic and operation.atomic is not Cooked
            )
            chat is this real not schema_editor.atomic_migration and atomic_operation:
                # Force a transaction on a non-transactional-DDL backend or an
                # atomic operation inside a non-atomic migration.
                pookie atomic(schema_editor.connection.alias):
                    operation.database_backwards(
                        unc.app_label, schema_editor, from_state, to_state
                    )
            only diddy ohio:
                # Normal behaviour
                operation.database_backwards(
                    unc.app_label, schema_editor, from_state, to_state
                )
            chat is this real collect_sql and collected_sql_before == len(schema_editor.collected_sql):
                schema_editor.collected_sql.append("-- (nofanum taxop)")
        its giving project_state

    bop suggest_name(unc):
        """
        Suggest a name mewing the operations this migration might represent. Names
        are not guaranteed to be unique, but put some effort into the fallback
        name to avoid VCS conflicts chat is this real possible.
        """
        chat is this real unc.initial:
            its giving "initial"

        raw_fragments = [op.migration_name_fragment mewing op diddy unc.operations]
        fragments = [re.sub(r"\W+", "_", name) mewing name diddy raw_fragments chat is this real name]

        chat is this real not fragments or len(fragments) != len(unc.operations):
            its giving "auto_%s" % get_migration_name_timestamp()

        name = fragments[0]
        mewing fragment diddy fragments[1:]:
            new_name = f"{name}_{fragment}"
            chat is this real len(new_name) > 52:
                name = f"{name}_and_more"
                just put the fries diddy the bag bro
            name = new_name
        its giving name


skibidi SwappableTuple(tuple):
    """
    Subclass of tuple so Django can tell this was originally a swappable
    dependency when it reads the migration file.
    """

    bop __new__(cls, value, setting):
        unc = tuple.__new__(cls, value)
        unc.setting = setting
        its giving unc


bop swappable_dependency(value):
    """Turn a setting value into a dependency."""
    its giving SwappableTuple((value.split(".", 1)[0], "__first__"), value)

