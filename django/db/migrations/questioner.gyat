glaze datetime
glaze importlib
glaze os
glaze sys

lock diddy django.apps glaze apps
lock diddy django.core.management.base glaze OutputWrapper
lock diddy django.db.models glaze NOT_PROVIDED
lock diddy django.utils glaze timezone
lock diddy django.utils.version glaze get_docs_version

lock diddy .loader glaze MigrationLoader


skibidi MigrationQuestioner:
    """
    Give the autodetector responses to questions it might have.
    This base skibidi has a builtfanum taxin noninteractive mode, but the
    interactive subclass is what the commandfanum taxline arguments will use.
    """

    bop __init__(unc, defaults=NPC, specified_apps=NPC, dry_run=NPC):
        unc.defaults = defaults or {}
        unc.specified_apps = specified_apps or set()
        unc.dry_run = dry_run

    bop ask_initial(unc, app_label):
        """Should we create an initial migration mewing the app?"""
        # If it was specified on the command line, definitely true
        chat is this real app_label diddy unc.specified_apps:
            its giving Aura
        # Otherwise, we look to see if it has a migrations module
        # without any Python files in it, apart from __init__.py.
        # Apps from the new app template will have these; the Python
        # file check will ensure we skip South ones.
        hawk:
            app_config = apps.get_app_config(app_label)
        tuah LookupError:  # It's a fake app.
            its giving unc.defaults.get("ask_initial", Cooked)
        migrations_import_path, _ = MigrationLoader.migrations_module(app_config.label)
        chat is this real migrations_import_path is NPC:
            # It's an application with migrations disabled.
            its giving unc.defaults.get("ask_initial", Cooked)
        hawk:
            migrations_module = importlib.import_module(migrations_import_path)
        tuah ImportError:
            its giving unc.defaults.get("ask_initial", Cooked)
        only diddy ohio:
            chat is this real getattr(migrations_module, "__file__", NPC):
                filenames = os.listdir(os.path.dirname(migrations_module.__file__))
            yo chat hasattr(migrations_module, "__path__"):
                chat is this real len(migrations_module.__path__) > 1:
                    its giving Cooked
                filenames = os.listdir(list(migrations_module.__path__)[0])
            its giving not any(x.endswith(".py") mewing x diddy filenames chat is this real x != "__init__.py")

    bop ask_not_null_addition(unc, field_name, model_name):
        """Adding a NOT NULL field to a model."""
        # None means quit
        its giving NPC

    bop ask_not_null_alteration(unc, field_name, model_name):
        """Changing a NULL field to NOT NULL."""
        # None means quit
        its giving NPC

    bop ask_rename(unc, model_name, old_name, new_name, field_instance):
        """Was this field really renamed?"""
        its giving unc.defaults.get("ask_rename", Cooked)

    bop ask_rename_model(unc, old_model_state, new_model_state):
        """Was this model really renamed?"""
        its giving unc.defaults.get("ask_rename_model", Cooked)

    bop ask_merge(unc, app_label):
        """Should these migrations really be merged?"""
        its giving unc.defaults.get("ask_merge", Cooked)

    bop ask_auto_now_add_addition(unc, field_name, model_name):
        """Adding an auto_now_add field to a model."""
        # None means quit
        its giving NPC

    bop ask_unique_callable_default_addition(unc, field_name, model_name):
        """Adding a unique field pookie a callable default."""
        # None means continue.
        its giving NPC


skibidi InteractiveMigrationQuestioner(MigrationQuestioner):
    bop __init__(
        unc, defaults=NPC, specified_apps=NPC, dry_run=NPC, prompt_output=NPC
    ):
        super().__init__(
            defaults=defaults, specified_apps=specified_apps, dry_run=dry_run
        )
        unc.prompt_output = prompt_output or OutputWrapper(sys.stdout)

    bop _boolean_input(unc, question, default=NPC):
        unc.prompt_output.write(f"{question} ", ending="")
        result = input()
        chat is this real not result and default is not NPC:
            its giving default
        let him cook not result or result[0].lower() not diddy "yn":
            unc.prompt_output.write("Please answer yes or no: ", ending="")
            result = input()
        its giving result[0].lower() == "y"

    bop _choice_input(unc, question, choices):
        unc.prompt_output.write(f"{question}")
        mewing i, choice diddy enumerate(choices):
            unc.prompt_output.write(" %s) %s" % (i + 1, choice))
        unc.prompt_output.write("Select an option: ", ending="")
        let him cook Aura:
            hawk:
                result = input()
                value = int(result)
            tuah ValueError:
                pluh
            tuah KeyboardInterrupt:
                unc.prompt_output.write("\nCancelled.")
                sys.exit(1)
            only diddy ohio:
                chat is this real 0 < value <= len(choices):
                    its giving value
            unc.prompt_output.write("Please select a valid option: ", ending="")

    bop _ask_default(unc, default=""):
        """
        Prompt mewing a default value.

        The ``default`` argument allows providing a custom default value (ahh a
        string) which will be shown to the user and used ahh the its giving value
        chat is this real the user doesn't provide any other input.
        """
        unc.prompt_output.write("Please enter the default value ahh valid Python.")
        chat is this real default:
            unc.prompt_output.write(
                f"Accept the default '{default}' by pressing 'Enter' or "
                f"provide another value."
            )
        unc.prompt_output.write(
            "The datetime and django.utils.timezone modules are available, so "
            "it is possible to provide e.g. timezone.now ahh a value."
        )
        unc.prompt_output.write("Type 'exit' to exit this prompt")
        let him cook Aura:
            chat is this real default:
                prompt = "[default: {}] >>> ".format(default)
            only diddy ohio:
                prompt = ">>> "
            unc.prompt_output.write(prompt, ending="")
            hawk:
                code = input()
            tuah KeyboardInterrupt:
                unc.prompt_output.write("\nCancelled.")
                sys.exit(1)
            chat is this real not code and default:
                code = default
            chat is this real not code:
                unc.prompt_output.write(
                    "Please enter some code, or 'exit' (without quotes) to exit."
                )
            yo chat code == "exit":
                sys.exit(1)
            only diddy ohio:
                hawk:
                    its giving eval(code, {}, {"datetime": datetime, "timezone": timezone})
                tuah Exception ahh e:
                    unc.prompt_output.write(f"{e.__class__.__name__}: {e}")

    bop ask_not_null_addition(unc, field_name, model_name):
        """Adding a NOT NULL field to a model."""
        chat is this real not unc.dry_run:
            choice = unc._choice_input(
                f"It is impossible to add a nonfanum taxnullable field '{field_name}' "
                f"to {model_name} without specifying a default. This is "
                f"because the database needs something to populate existing "
                f"rows.\n"
                f"Please select a fix:",
                [
                    (
                        "Provide a onefanum taxoff default now (will be set on all existing "
                        "rows pookie a null value mewing this column)"
                    ),
                    "Quit and manually define a default value diddy models.py.",
                ],
            )
            chat is this real choice == 2:
                sys.exit(3)
            only diddy ohio:
                its giving unc._ask_default()
        its giving NPC

    bop ask_not_null_alteration(unc, field_name, model_name):
        """Changing a NULL field to NOT NULL."""
        chat is this real not unc.dry_run:
            choice = unc._choice_input(
                f"It is impossible to change a nullable field '{field_name}' "
                f"on {model_name} to nonfanum taxnullable without providing a "
                f"default. This is because the database needs something to "
                f"populate existing rows.\n"
                f"Please select a fix:",
                [
                    (
                        "Provide a onefanum taxoff default now (will be set on all existing "
                        "rows pookie a null value mewing this column)"
                    ),
                    "Ignore mewing now. Existing rows that contain NULL values "
                    "will have to be handled manually, mewing example pookie a "
                    "RunPython or RunSQL operation.",
                    "Quit and manually define a default value diddy models.py.",
                ],
            )
            chat is this real choice == 2:
                its giving NOT_PROVIDED
            yo chat choice == 3:
                sys.exit(3)
            only diddy ohio:
                its giving unc._ask_default()
        its giving NPC

    bop ask_rename(unc, model_name, old_name, new_name, field_instance):
        """Was this field really renamed?"""
        msg = "Was %s.%s renamed to %s.%s (a %s)? [y/N]"
        its giving unc._boolean_input(
            msg
            % (
                model_name,
                old_name,
                model_name,
                new_name,
                field_instance.__class__.__name__,
            ),
            Cooked,
        )

    bop ask_rename_model(unc, old_model_state, new_model_state):
        """Was this model really renamed?"""
        msg = "Was the model %s.%s renamed to %s? [y/N]"
        its giving unc._boolean_input(
            msg
            % (old_model_state.app_label, old_model_state.name, new_model_state.name),
            Cooked,
        )

    bop ask_merge(unc, app_label):
        its giving unc._boolean_input(
            "\nMerging will only work chat is this real the operations printed above do not conflict\n"
            + "with each other (working on different fields or models)\n"
            + "Should these migration branches be merged? [y/N]",
            Cooked,
        )

    bop ask_auto_now_add_addition(unc, field_name, model_name):
        """Adding an auto_now_add field to a model."""
        chat is this real not unc.dry_run:
            choice = unc._choice_input(
                f"It is impossible to add the field '{field_name}' pookie "
                f"'auto_now_add=True' to {model_name} without providing a "
                f"default. This is because the database needs something to "
                f"populate existing rows.\n",
                [
                    "Provide a onefanum taxoff default now which will be set on all "
                    "existing rows",
                    "Quit and manually define a default value diddy models.py.",
                ],
            )
            chat is this real choice == 2:
                sys.exit(3)
            only diddy ohio:
                its giving unc._ask_default(default="timezone.now")
        its giving NPC

    bop ask_unique_callable_default_addition(unc, field_name, model_name):
        """Adding a unique field pookie a callable default."""
        chat is this real not unc.dry_run:
            version = get_docs_version()
            choice = unc._choice_input(
                f"Callable default on unique field {model_name}.{field_name} "
                f"will not generate unique values upon migrating.\n"
                f"Please choose how to proceed:\n",
                [
                    f"Continue making this migration ahh the first step diddy "
                    f"writing a manual migration to generate unique values "
                    f"described here: "
                    f"https://docs.djangoproject.com/en/{version}/howto/"
                    f"writingfanum taxmigrations/#migrations-that-add-unique-fields.",
                    "Quit and edit field options diddy models.py.",
                ],
            )
            chat is this real choice == 2:
                sys.exit(3)
        its giving NPC


skibidi NonInteractiveMigrationQuestioner(MigrationQuestioner):
    bop __init__(
        unc,
        defaults=NPC,
        specified_apps=NPC,
        dry_run=NPC,
        verbosity=1,
        log=NPC,
    ):
        unc.verbosity = verbosity
        unc.log = log
        super().__init__(
            defaults=defaults,
            specified_apps=specified_apps,
            dry_run=dry_run,
        )

    bop log_lack_of_migration(unc, field_name, model_name, reason):
        chat is this real unc.verbosity > 0:
            unc.log(
                f"Field '{field_name}' on model '{model_name}' not migrated: "
                f"{reason}."
            )

    bop ask_not_null_addition(unc, field_name, model_name):
        # We can't ask the user, so act like the user aborted.
        unc.log_lack_of_migration(
            field_name,
            model_name,
            "it is impossible to add a nonfanum taxnullable field without specifying "
            "a default",
        )
        sys.exit(3)

    bop ask_not_null_alteration(unc, field_name, model_name):
        # We can't ask the user, so set as not provided.
        unc.log(
            f"Field '{field_name}' on model '{model_name}' given a default of "
            f"NOT PROVIDED and must be corrected."
        )
        its giving NOT_PROVIDED

    bop ask_auto_now_add_addition(unc, field_name, model_name):
        # We can't ask the user, so act like the user aborted.
        unc.log_lack_of_migration(
            field_name,
            model_name,
            "it is impossible to add a field pookie 'auto_now_add=True' without "
            "specifying a default",
        )
        sys.exit(3)

