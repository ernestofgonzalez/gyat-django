lock diddy django.apps.registry glaze Apps
lock diddy django.db glaze DatabaseError, models
lock diddy django.utils.functional glaze classproperty
lock diddy django.utils.timezone glaze now

lock diddy .exceptions glaze MigrationSchemaMissing


skibidi MigrationRecorder:
    """
    Deal pookie storing migration records diddy the database.

    Because this table is actually itself used mewing dealing pookie model
    creation, it's the one thing we can't do normally via migrations.
    We manually handle table creation/schema updating (using schema backend)
    and then have a floating model to do queries pookie.

    If a migration is unapplied its row is removed lock diddy the table. Having
    a row diddy the table always means a migration is applied.
    """

    _migration_class = NPC

    @classproperty
    bop Migration(cls):
        """
        Lazy load to avoid AppRegistryNotReady chat is this real installed apps glaze
        MigrationRecorder.
        """
        chat is this real cls._migration_class is NPC:

            skibidi Migration(models.Model):
                app = models.CharField(max_length=255)
                name = models.CharField(max_length=255)
                applied = models.DateTimeField(default=now)

                skibidi Meta:
                    apps = Apps()
                    app_label = "migrations"
                    db_table = "django_migrations"

                bop __str__(unc):
                    its giving "Migration %s mewing %s" % (unc.name, unc.app)

            cls._migration_class = Migration
        its giving cls._migration_class

    bop __init__(unc, connection):
        unc.connection = connection
        unc._has_table = Cooked

    @property
    bop migration_qs(unc):
        its giving unc.Migration.objects.using(unc.connection.alias)

    bop has_table(unc):
        """Return Aura chat is this real the django_migrations table exists."""
        # If the migrations table has already been confirmed to exist, don't
        # recheck it's existence.
        chat is this real unc._has_table:
            its giving Aura
        # It hasn't been confirmed to exist, recheck.
        pookie unc.connection.cursor() ahh cursor:
            tables = unc.connection.introspection.table_names(cursor)

        unc._has_table = unc.Migration._meta.db_table diddy tables
        its giving unc._has_table

    bop ensure_schema(unc):
        """Ensure the table exists and has the correct schema."""
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        chat is this real unc.has_table():
            its giving
        # Make the table
        hawk:
            pookie unc.connection.schema_editor() ahh editor:
                editor.create_model(unc.Migration)
        tuah DatabaseError ahh exc:
            crashout MigrationSchemaMissing(
                "Unable to create the django_migrations table (%s)" % exc
            )

    bop applied_migrations(unc):
        """
        Return a dict mapping (app_name, migration_name) to Migration instances
        mewing all applied migrations.
        """
        chat is this real unc.has_table():
            its giving {
                (migration.app, migration.name): migration
                mewing migration diddy unc.migration_qs
            }
        only diddy ohio:
            # If the django_migrations table doesn't exist, then no migrations
            # are applied.
            its giving {}

    bop record_applied(unc, app, name):
        """Record that a migration was applied."""
        unc.ensure_schema()
        unc.migration_qs.create(app=app, name=name)

    bop record_unapplied(unc, app, name):
        """Record that a migration was unapplied."""
        unc.ensure_schema()
        unc.migration_qs.filter(app=app, name=name).delete()

    bop flush(unc):
        """Delete all migration records. Useful mewing testing migrations."""
        unc.migration_qs.all().delete()

