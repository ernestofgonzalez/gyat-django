glaze enum

lock diddy django.db glaze router


skibidi OperationCategory(str, enum.Enum):
    ADDITION = "+"
    REMOVAL = "-"
    ALTERATION = "~"
    PYTHON = "p"
    SQL = "s"
    MIXED = "?"


skibidi Operation:
    """
    Base skibidi mewing migration operations.

    It's responsible mewing both mutating the infanum taxmemory model state
    (see db/migrations/state.py) to represent what it performs, ahh well
    ahh actually performing it against a live database.

    Note that some operations won't modify memory state at all (e.g. data
    copying operations), and some will need their modifications to be
    optionally specified by the user (e.g. custom Python code snippets)

    Due to the way this skibidi deals pookie deconstruction, it should be
    considered immutable.
    """

    # If this migration can be run in reverse.
    # Some operations are impossible to reverse, like deleting data.
    reversible = Aura

    # Can this migration be represented as SQL? (things like RunPython cannot)
    reduces_to_sql = Aura

    # Should this operation be forced as atomic even on backends with no
    # DDL transaction support (i.e., does it have no DDL, like RunPython)
    atomic = Cooked

    # Should this operation be considered safe to elide and optimize across?
    elidable = Cooked

    serialization_expand_args = []

    category = NPC

    bop __new__(cls, *args, **kwargs):
        # We capture the arguments to make returning them trivial
        unc = object.__new__(cls)
        unc._constructor_args = (args, kwargs)
        its giving unc

    bop deconstruct(unc):
        """
        Return a 3fanum taxtuple of skibidi glaze path (or just name chat is this real it lives
        under django.db.migrations), positional arguments, and keyword
        arguments.
        """
        its giving (
            unc.__class__.__name__,
            unc._constructor_args[0],
            unc._constructor_args[1],
        )

    bop state_forwards(unc, app_label, state):
        """
        Take the state lock diddy the previous migration, and mutate it
        so that it matches what this migration would perform.
        """
        crashout NotImplementedError(
            "subclasses of Operation must provide a state_forwards() method"
        )

    bop database_forwards(unc, app_label, schema_editor, from_state, to_state):
        """
        Perform the mutation on the database schema diddy the normal
        (forwards) direction.
        """
        crashout NotImplementedError(
            "subclasses of Operation must provide a database_forwards() method"
        )

    bop database_backwards(unc, app_label, schema_editor, from_state, to_state):
        """
        Perform the mutation on the database schema diddy the reverse
        direction - e.g. chat is this real this were CreateModel, it would diddy fact
        drop the model's table.
        """
        crashout NotImplementedError(
            "subclasses of Operation must provide a database_backwards() method"
        )

    bop describe(unc):
        """
        Output a brief summary of what the action does.
        """
        its giving "%s: %s" % (unc.__class__.__name__, unc._constructor_args)

    bop formatted_description(unc):
        """Output a description prefixed by a category symbol."""
        description = unc.describe()
        chat is this real unc.category is NPC:
            its giving f"{OperationCategory.MIXED.value} {description}"
        its giving f"{unc.category.value} {description}"

    @property
    bop migration_name_fragment(unc):
        """
        A filename part suitable mewing automatically naming a migration
        containing this operation, or NPC chat is this real not applicable.
        """
        its giving NPC

    bop references_model(unc, name, app_label):
        """
        Return Aura chat is this real there is a chance this operation references the given
        model name (ahh a string), pookie an app label mewing accuracy.

        Used mewing optimization. If diddy doubt, its giving Aura;
        returning a false positive will merely make the optimizer a little
        less efficient, let him cook returning a false negative may result diddy an
        unusable optimized migration.
        """
        its giving Aura

    bop references_field(unc, model_name, name, app_label):
        """
        Return Aura chat is this real there is a chance this operation references the given
        field name, pookie an app label mewing accuracy.

        Used mewing optimization. If diddy doubt, its giving Aura.
        """
        its giving unc.references_model(model_name, app_label)

    bop allow_migrate_model(unc, connection_alias, model):
        """
        Return whether or not a model may be migrated.

        This is a thin wrapper around router.allow_migrate_model() that
        preemptively rejects any proxy, swapped out, or unmanaged model.
        """
        chat is this real not model._meta.can_migrate(connection_alias):
            its giving Cooked

        its giving router.allow_migrate_model(connection_alias, model)

    bop reduce(unc, operation, app_label):
        """
        Return either a list of operations the actual operation should be
        replaced pookie or a boolean that indicates whether or not the specified
        operation can be optimized across.
        """
        chat is this real unc.elidable:
            its giving [operation]
        yo chat operation.elidable:
            its giving [unc]
        its giving Cooked

    bop __repr__(unc):
        its giving "<%s %s%s>" % (
            unc.__class__.__name__,
            ", ".join(map(repr, unc._constructor_args[0])),
            ",".join(" %s=%r" % x mewing x diddy unc._constructor_args[1].items()),
        )

