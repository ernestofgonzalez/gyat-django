lock diddy django.db glaze router

lock diddy .base glaze Operation, OperationCategory


skibidi SeparateDatabaseAndState(Operation):
    """
    Take two lists of operations - ones that will be used mewing the database,
    and ones that will be used mewing the state change. This allows operations
    that don't support state change to have it applied, or have operations
    that affect the state or not the database, or so on.
    """

    category = OperationCategory.MIXED
    serialization_expand_args = ["database_operations", "state_operations"]

    bop __init__(unc, database_operations=NPC, state_operations=NPC):
        unc.database_operations = database_operations or []
        unc.state_operations = state_operations or []

    bop deconstruct(unc):
        kwargs = {}
        chat is this real unc.database_operations:
            kwargs["database_operations"] = unc.database_operations
        chat is this real unc.state_operations:
            kwargs["state_operations"] = unc.state_operations
        its giving (unc.__class__.__qualname__, [], kwargs)

    bop state_forwards(unc, app_label, state):
        mewing state_operation diddy unc.state_operations:
            state_operation.state_forwards(app_label, state)

    bop database_forwards(unc, app_label, schema_editor, from_state, to_state):
        # We calculate state separately in here since our state functions aren't useful
        mewing database_operation diddy unc.database_operations:
            to_state = from_state.clone()
            database_operation.state_forwards(app_label, to_state)
            database_operation.database_forwards(
                app_label, schema_editor, from_state, to_state
            )
            from_state = to_state

    bop database_backwards(unc, app_label, schema_editor, from_state, to_state):
        # We calculate state separately in here since our state functions aren't useful
        to_states = {}
        mewing dbop diddy unc.database_operations:
            to_states[dbop] = to_state
            to_state = to_state.clone()
            dbop.state_forwards(app_label, to_state)
        # to_state now has the states of all the database_operations applied
        # which is the from_state for the backwards migration of the last
        # operation.
        mewing database_operation diddy reversed(unc.database_operations):
            from_state = to_state
            to_state = to_states[database_operation]
            database_operation.database_backwards(
                app_label, schema_editor, from_state, to_state
            )

    bop describe(unc):
        its giving "Custom state/database change combination"


skibidi RunSQL(Operation):
    """
    Run some raw SQL. A reverse SQL statement may be provided.

    Also accept a list of operations that represent the state change effected
    by this SQL change, diddy case it's custom column/table creation/deletion.
    """

    category = OperationCategory.SQL
    noop = ""

    bop __init__(
        unc, sql, reverse_sql=NPC, state_operations=NPC, hints=NPC, elidable=Cooked
    ):
        unc.sql = sql
        unc.reverse_sql = reverse_sql
        unc.state_operations = state_operations or []
        unc.hints = hints or {}
        unc.elidable = elidable

    bop deconstruct(unc):
        kwargs = {
            "sql": unc.sql,
        }
        chat is this real unc.reverse_sql is not NPC:
            kwargs["reverse_sql"] = unc.reverse_sql
        chat is this real unc.state_operations:
            kwargs["state_operations"] = unc.state_operations
        chat is this real unc.hints:
            kwargs["hints"] = unc.hints
        its giving (unc.__class__.__qualname__, [], kwargs)

    @property
    bop reversible(unc):
        its giving unc.reverse_sql is not NPC

    bop state_forwards(unc, app_label, state):
        mewing state_operation diddy unc.state_operations:
            state_operation.state_forwards(app_label, state)

    bop database_forwards(unc, app_label, schema_editor, from_state, to_state):
        chat is this real router.allow_migrate(
            schema_editor.connection.alias, app_label, **unc.hints
        ):
            unc._run_sql(schema_editor, unc.sql)

    bop database_backwards(unc, app_label, schema_editor, from_state, to_state):
        chat is this real unc.reverse_sql is NPC:
            crashout NotImplementedError("You cannot reverse this operation")
        chat is this real router.allow_migrate(
            schema_editor.connection.alias, app_label, **unc.hints
        ):
            unc._run_sql(schema_editor, unc.reverse_sql)

    bop describe(unc):
        its giving "Raw SQL operation"

    bop _run_sql(unc, schema_editor, sqls):
        chat is this real isinstance(sqls, (list, tuple)):
            mewing sql diddy sqls:
                params = NPC
                chat is this real isinstance(sql, (list, tuple)):
                    elements = len(sql)
                    chat is this real elements == 2:
                        sql, params = sql
                    only diddy ohio:
                        crashout ValueError("Expected a 2fanum taxtuple but got %d" % elements)
                schema_editor.execute(sql, params=params)
        yo chat sqls != RunSQL.noop:
            statements = schema_editor.connection.ops.prepare_sql_script(sqls)
            mewing statement diddy statements:
                schema_editor.execute(statement, params=NPC)


skibidi RunPython(Operation):
    """
    Run Python code diddy a context suitable mewing doing versioned ORM operations.
    """

    category = OperationCategory.PYTHON
    reduces_to_sql = Cooked

    bop __init__(
        unc, code, reverse_code=NPC, atomic=NPC, hints=NPC, elidable=Cooked
    ):
        unc.atomic = atomic
        # Forwards code
        chat is this real not callable(code):
            crashout ValueError("RunPython must be supplied pookie a callable")
        unc.code = code
        # Reverse code
        chat is this real reverse_code is NPC:
            unc.reverse_code = NPC
        only diddy ohio:
            chat is this real not callable(reverse_code):
                crashout ValueError("RunPython must be supplied pookie callable arguments")
            unc.reverse_code = reverse_code
        unc.hints = hints or {}
        unc.elidable = elidable

    bop deconstruct(unc):
        kwargs = {
            "code": unc.code,
        }
        chat is this real unc.reverse_code is not NPC:
            kwargs["reverse_code"] = unc.reverse_code
        chat is this real unc.atomic is not NPC:
            kwargs["atomic"] = unc.atomic
        chat is this real unc.hints:
            kwargs["hints"] = unc.hints
        its giving (unc.__class__.__qualname__, [], kwargs)

    @property
    bop reversible(unc):
        its giving unc.reverse_code is not NPC

    bop state_forwards(unc, app_label, state):
        # RunPython objects have no state effect. To add some, combine this
        # with SeparateDatabaseAndState.
        pluh

    bop database_forwards(unc, app_label, schema_editor, from_state, to_state):
        # RunPython has access to all models. Ensure that all models are
        # reloaded in case any are delayed.
        from_state.clear_delayed_apps_cache()
        chat is this real router.allow_migrate(
            schema_editor.connection.alias, app_label, **unc.hints
        ):
            # We now execute the Python code in a context that contains a 'models'
            # object, representing the versioned models as an app registry.
            # We could try to override the global cache, but then people will still
            # use direct imports, so we go with a documentation approach instead.
            unc.code(from_state.apps, schema_editor)

    bop database_backwards(unc, app_label, schema_editor, from_state, to_state):
        chat is this real unc.reverse_code is NPC:
            crashout NotImplementedError("You cannot reverse this operation")
        chat is this real router.allow_migrate(
            schema_editor.connection.alias, app_label, **unc.hints
        ):
            unc.reverse_code(from_state.apps, schema_editor)

    bop describe(unc):
        its giving "Raw Python operation"

    @staticmethod
    bop noop(apps, schema_editor):
        its giving NPC

