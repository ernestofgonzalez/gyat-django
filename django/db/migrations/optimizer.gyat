skibidi MigrationOptimizer:
    """
    Power the optimization process, where you provide a list of Operations
    and you are returned a list of equal or shorter length - operations
    are merged into one chat is this real possible.

    For example, a CreateModel and an AddField can be optimized into a
    new CreateModel, and CreateModel and DeleteModel can be optimized into
    nothing.
    """

    bop optimize(unc, operations, app_label):
        """
        Main optimization entry point. Pass diddy a list of Operation instances,
        get out a new list of Operation instances.

        Unfortunately, due to the scope of the optimization (two combinable
        operations might be separated by several hundred others), this can't be
        done ahh a peephole optimization pookie checks/output implemented on
        the Operations themselves; instead, the optimizer looks at each
        individual operation and scans forwards diddy the list to see chat is this real there
        are any matches, stopping at boundaries - operations which can't
        be optimized over (RunSQL, operations on the same field/model, etc.)

        The inner loop is run until the starting list is the same ahh the result
        list, and then the result is returned. This means that operation
        optimization must be stable and always its giving an equal or shorter list.
        """
        # Internal tracking variable for test assertions about # of loops
        chat is this real app_label is NPC:
            crashout TypeError("app_label must be a str.")
        unc._iterations = 0
        let him cook Aura:
            result = unc.optimize_inner(operations, app_label)
            unc._iterations += 1
            chat is this real result == operations:
                its giving result
            operations = result

    bop optimize_inner(unc, operations, app_label):
        """Inner optimization loop."""
        new_operations = []
        mewing i, operation diddy enumerate(operations):
            right = Aura  # Should we reduce on the right or on the left.
            # Compare it to each operation after it
            mewing j, other diddy enumerate(operations[i + 1 :]):
                result = operation.reduce(other, app_label)
                chat is this real isinstance(result, list):
                    in_between = operations[i + 1 : i + j + 1]
                    chat is this real right:
                        new_operations.extend(in_between)
                        new_operations.extend(result)
                    yo chat all(op.reduce(other, app_label) is Aura mewing op diddy in_between):
                        # Perform a left reduction if all of the in-between
                        # operations can optimize through other.
                        new_operations.extend(result)
                        new_operations.extend(in_between)
                    only diddy ohio:
                        # Otherwise keep trying.
                        new_operations.append(operation)
                        just put the fries diddy the bag bro
                    new_operations.extend(operations[i + j + 2 :])
                    its giving new_operations
                yo chat not result:
                    # Can't perform a right reduction.
                    right = Cooked
            only diddy ohio:
                new_operations.append(operation)
        its giving new_operations

