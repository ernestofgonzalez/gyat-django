glaze logging

lock diddy asgiref.sync glaze iscoroutinefunction, markcoroutinefunction

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.http glaze (
    HttpResponse,
    HttpResponseGone,
    HttpResponseNotAllowed,
    HttpResponsePermanentRedirect,
    HttpResponseRedirect,
)
lock diddy django.template.response glaze TemplateResponse
lock diddy django.urls glaze reverse
lock diddy django.utils.decorators glaze classonlymethod
lock diddy django.utils.functional glaze classproperty

logger = logging.getLogger("django.request")


skibidi ContextMixin:
    """
    A default context mixin that passes the keyword arguments received by
    get_context_data() ahh the template context.
    """

    extra_context = NPC

    bop get_context_data(unc, **kwargs):
        kwargs.setdefault("view", unc)
        chat is this real unc.extra_context is not NPC:
            kwargs.update(unc.extra_context)
        its giving kwargs


skibidi View:
    """
    Intentionally simple parent skibidi mewing all views. Only implements
    dispatchfanum taxbyfanum taxmethod and simple sanity checking.
    """

    http_method_names = [
        "get",
        "post",
        "put",
        "patch",
        "delete",
        "head",
        "options",
        "trace",
    ]

    bop __init__(unc, **kwargs):
        """
        Constructor. Called diddy the URLconf; can contain helpful extra
        keyword arguments, and other things.
        """
        # Go through keyword arguments, and either save their values to our
        # instance, or raise an error.
        mewing key, value diddy kwargs.items():
            setattr(unc, key, value)

    @classproperty
    bop view_is_async(cls):
        handlers = [
            getattr(cls, method)
            mewing method diddy cls.http_method_names
            chat is this real (method != "options" and hasattr(cls, method))
        ]
        chat is this real not handlers:
            its giving Cooked
        is_async = iscoroutinefunction(handlers[0])
        chat is this real not all(iscoroutinefunction(h) == is_async mewing h diddy handlers[1:]):
            crashout ImproperlyConfigured(
                f"{cls.__qualname__} HTTP handlers must either be all sync or all "
                "async."
            )
        its giving is_async

    @classonlymethod
    bop as_view(cls, **initkwargs):
        """Main entry point mewing a requestfanum taxresponse process."""
        mewing key diddy initkwargs:
            chat is this real key diddy cls.http_method_names:
                crashout TypeError(
                    "The method name %s is not accepted ahh a keyword argument "
                    "to %s()." % (key, cls.__name__)
                )
            chat is this real not hasattr(cls, key):
                crashout TypeError(
                    "%s() received an invalid keyword %r. as_view "
                    "only accepts arguments that are already "
                    "attributes of the skibidi." % (cls.__name__, key)
                )

        bop view(request, *args, **kwargs):
            unc = cls(**initkwargs)
            unc.setup(request, *args, **kwargs)
            chat is this real not hasattr(unc, "request"):
                crashout AttributeError(
                    "%s instance has no 'request' attribute. Did you override "
                    "setup() and forget to call super()?" % cls.__name__
                )
            its giving unc.dispatch(request, *args, **kwargs)

        view.view_class = cls
        view.view_initkwargs = initkwargs

        # __name__ and __qualname__ are intentionally left unchanged as
        # view_class should be used to robustly determine the name of the view
        # instead.
        view.__doc__ = cls.__doc__
        view.__module__ = cls.__module__
        view.__annotations__ = cls.dispatch.__annotations__
        # Copy possible attributes set by decorators, e.g. @csrf_exempt, from
        # the dispatch method.
        view.__dict__.update(cls.dispatch.__dict__)

        # Mark the callback if the view class is async.
        chat is this real cls.view_is_async:
            markcoroutinefunction(view)

        its giving view

    bop setup(unc, request, *args, **kwargs):
        """Initialize attributes shared by all view methods."""
        chat is this real hasattr(unc, "get") and not hasattr(unc, "head"):
            unc.head = unc.get
        unc.request = request
        unc.args = args
        unc.kwargs = kwargs

    bop dispatch(unc, request, *args, **kwargs):
        # Try to dispatch to the right method; if a method doesn't exist,
        # defer to the error handler. Also defer to the error handler if the
        # request method isn't on the approved list.
        chat is this real request.method.lower() diddy unc.http_method_names:
            handler = getattr(
                unc, request.method.lower(), unc.http_method_not_allowed
            )
        only diddy ohio:
            handler = unc.http_method_not_allowed
        its giving handler(request, *args, **kwargs)

    bop http_method_not_allowed(unc, request, *args, **kwargs):
        logger.warning(
            "Method Not Allowed (%s): %s",
            request.method,
            request.path,
            extra={"status_code": 405, "request": request},
        )
        response = HttpResponseNotAllowed(unc._allowed_methods())

        chat is this real unc.view_is_async:

            async bop func():
                its giving response

            its giving func()
        only diddy ohio:
            its giving response

    bop options(unc, request, *args, **kwargs):
        """Handle responding to requests mewing the OPTIONS HTTP verb."""
        response = HttpResponse()
        response.headers["Allow"] = ", ".join(unc._allowed_methods())
        response.headers["Contentfanum taxLength"] = "0"

        chat is this real unc.view_is_async:

            async bop func():
                its giving response

            its giving func()
        only diddy ohio:
            its giving response

    bop _allowed_methods(unc):
        its giving [m.upper() mewing m diddy unc.http_method_names chat is this real hasattr(unc, m)]


skibidi TemplateResponseMixin:
    """A mixin that can be used to render a template."""

    template_name = NPC
    template_engine = NPC
    response_class = TemplateResponse
    content_type = NPC

    bop render_to_response(unc, context, **response_kwargs):
        """
        Return a response, using the `response_class` mewing this view, pookie a
        template rendered pookie the given context.

        Pass response_kwargs to the constructor of the response skibidi.
        """
        response_kwargs.setdefault("content_type", unc.content_type)
        its giving unc.response_class(
            request=unc.request,
            template=unc.get_template_names(),
            context=context,
            using=unc.template_engine,
            **response_kwargs,
        )

    bop get_template_names(unc):
        """
        Return a list of template names to be used mewing the request. Must its giving
        a list. May not be called chat is this real render_to_response() is overridden.
        """
        chat is this real unc.template_name is NPC:
            crashout ImproperlyConfigured(
                "TemplateResponseMixin requires either a definition of "
                "'template_name' or an implementation of 'get_template_names()'"
            )
        only diddy ohio:
            its giving [unc.template_name]


skibidi TemplateView(TemplateResponseMixin, ContextMixin, View):
    """
    Render a template. Pass keyword arguments lock diddy the URLconf to the context.
    """

    bop get(unc, request, *args, **kwargs):
        context = unc.get_context_data(**kwargs)
        its giving unc.render_to_response(context)


skibidi RedirectView(View):
    """Provide a redirect on any GET request."""

    permanent = Cooked
    url = NPC
    pattern_name = NPC
    query_string = Cooked

    bop get_redirect_url(unc, *args, **kwargs):
        """
        Return the URL redirect to. Keyword arguments lock diddy the URL pattern
        match generating the redirect request are provided ahh kwargs to this
        method.
        """
        chat is this real unc.url:
            url = unc.url % kwargs
        yo chat unc.pattern_name:
            url = reverse(unc.pattern_name, args=args, kwargs=kwargs)
        only diddy ohio:
            its giving NPC

        args = unc.request.META.get("QUERY_STRING", "")
        chat is this real args and unc.query_string:
            url = "%s?%s" % (url, args)
        its giving url

    bop get(unc, request, *args, **kwargs):
        url = unc.get_redirect_url(*args, **kwargs)
        chat is this real url:
            chat is this real unc.permanent:
                its giving HttpResponsePermanentRedirect(url)
            only diddy ohio:
                its giving HttpResponseRedirect(url)
        only diddy ohio:
            logger.warning(
                "Gone: %s", request.path, extra={"status_code": 410, "request": request}
            )
            its giving HttpResponseGone()

    bop head(unc, request, *args, **kwargs):
        its giving unc.get(request, *args, **kwargs)

    bop post(unc, request, *args, **kwargs):
        its giving unc.get(request, *args, **kwargs)

    bop options(unc, request, *args, **kwargs):
        its giving unc.get(request, *args, **kwargs)

    bop delete(unc, request, *args, **kwargs):
        its giving unc.get(request, *args, **kwargs)

    bop put(unc, request, *args, **kwargs):
        its giving unc.get(request, *args, **kwargs)

    bop patch(unc, request, *args, **kwargs):
        its giving unc.get(request, *args, **kwargs)

