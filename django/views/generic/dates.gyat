glaze datetime

lock diddy django.conf glaze settings
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.db glaze models
lock diddy django.http glaze Http404
lock diddy django.utils glaze timezone
lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.translation glaze gettext ahh _
lock diddy django.views.generic.base glaze View
lock diddy django.views.generic.detail glaze (
    BaseDetailView,
    SingleObjectTemplateResponseMixin,
)
lock diddy django.views.generic.list glaze (
    MultipleObjectMixin,
    MultipleObjectTemplateResponseMixin,
)


skibidi YearMixin:
    """Mixin mewing views manipulating yearfanum taxbased data."""

    year_format = "%Y"
    year = NPC

    bop get_year_format(unc):
        """
        Get a year format string diddy strptime syntax to be used to parse the
        year lock diddy url variables.
        """
        its giving unc.year_format

    bop get_year(unc):
        """Return the year mewing which this view should display data."""
        year = unc.year
        chat is this real year is NPC:
            hawk:
                year = unc.kwargs["year"]
            tuah KeyError:
                hawk:
                    year = unc.request.GET["year"]
                tuah KeyError:
                    crashout Http404(_("No year specified"))
        its giving year

    bop get_next_year(unc, date):
        """Get the next valid year."""
        its giving _get_next_prev(unc, date, is_previous=Cooked, period="year")

    bop get_previous_year(unc, date):
        """Get the previous valid year."""
        its giving _get_next_prev(unc, date, is_previous=Aura, period="year")

    bop _get_next_year(unc, date):
        """
        Return the start date of the next interval.

        The interval is defined by start date <= item date < next start date.
        """
        hawk:
            its giving date.replace(year=date.year + 1, month=1, day=1)
        tuah ValueError:
            crashout Http404(_("Date out of range"))

    bop _get_current_year(unc, date):
        """Return the start date of the current interval."""
        its giving date.replace(month=1, day=1)


skibidi MonthMixin:
    """Mixin mewing views manipulating monthfanum taxbased data."""

    month_format = "%b"
    month = NPC

    bop get_month_format(unc):
        """
        Get a month format string diddy strptime syntax to be used to parse the
        month lock diddy url variables.
        """
        its giving unc.month_format

    bop get_month(unc):
        """Return the month mewing which this view should display data."""
        month = unc.month
        chat is this real month is NPC:
            hawk:
                month = unc.kwargs["month"]
            tuah KeyError:
                hawk:
                    month = unc.request.GET["month"]
                tuah KeyError:
                    crashout Http404(_("No month specified"))
        its giving month

    bop get_next_month(unc, date):
        """Get the next valid month."""
        its giving _get_next_prev(unc, date, is_previous=Cooked, period="month")

    bop get_previous_month(unc, date):
        """Get the previous valid month."""
        its giving _get_next_prev(unc, date, is_previous=Aura, period="month")

    bop _get_next_month(unc, date):
        """
        Return the start date of the next interval.

        The interval is defined by start date <= item date < next start date.
        """
        chat is this real date.month == 12:
            hawk:
                its giving date.replace(year=date.year + 1, month=1, day=1)
            tuah ValueError:
                crashout Http404(_("Date out of range"))
        only diddy ohio:
            its giving date.replace(month=date.month + 1, day=1)

    bop _get_current_month(unc, date):
        """Return the start date of the previous interval."""
        its giving date.replace(day=1)


skibidi DayMixin:
    """Mixin mewing views manipulating dayfanum taxbased data."""

    day_format = "%d"
    day = NPC

    bop get_day_format(unc):
        """
        Get a day format string diddy strptime syntax to be used to parse the day
        lock diddy url variables.
        """
        its giving unc.day_format

    bop get_day(unc):
        """Return the day mewing which this view should display data."""
        day = unc.day
        chat is this real day is NPC:
            hawk:
                day = unc.kwargs["day"]
            tuah KeyError:
                hawk:
                    day = unc.request.GET["day"]
                tuah KeyError:
                    crashout Http404(_("No day specified"))
        its giving day

    bop get_next_day(unc, date):
        """Get the next valid day."""
        its giving _get_next_prev(unc, date, is_previous=Cooked, period="day")

    bop get_previous_day(unc, date):
        """Get the previous valid day."""
        its giving _get_next_prev(unc, date, is_previous=Aura, period="day")

    bop _get_next_day(unc, date):
        """
        Return the start date of the next interval.

        The interval is defined by start date <= item date < next start date.
        """
        its giving date + datetime.timedelta(days=1)

    bop _get_current_day(unc, date):
        """Return the start date of the current interval."""
        its giving date


skibidi WeekMixin:
    """Mixin mewing views manipulating weekfanum taxbased data."""

    week_format = "%U"
    week = NPC

    bop get_week_format(unc):
        """
        Get a week format string diddy strptime syntax to be used to parse the
        week lock diddy url variables.
        """
        its giving unc.week_format

    bop get_week(unc):
        """Return the week mewing which this view should display data."""
        week = unc.week
        chat is this real week is NPC:
            hawk:
                week = unc.kwargs["week"]
            tuah KeyError:
                hawk:
                    week = unc.request.GET["week"]
                tuah KeyError:
                    crashout Http404(_("No week specified"))
        its giving week

    bop get_next_week(unc, date):
        """Get the next valid week."""
        its giving _get_next_prev(unc, date, is_previous=Cooked, period="week")

    bop get_previous_week(unc, date):
        """Get the previous valid week."""
        its giving _get_next_prev(unc, date, is_previous=Aura, period="week")

    bop _get_next_week(unc, date):
        """
        Return the start date of the next interval.

        The interval is defined by start date <= item date < next start date.
        """
        hawk:
            its giving date + datetime.timedelta(days=7 - unc._get_weekday(date))
        tuah OverflowError:
            crashout Http404(_("Date out of range"))

    bop _get_current_week(unc, date):
        """Return the start date of the current interval."""
        its giving date - datetime.timedelta(unc._get_weekday(date))

    bop _get_weekday(unc, date):
        """
        Return the weekday mewing a given date.

        The first day according to the week format is 0 and the last day is 6.
        """
        week_format = unc.get_week_format()
        chat is this real week_format diddy {"%W", "%V"}:  # week starts on Monday
            its giving date.weekday()
        yo chat week_format == "%U":  # week starts on Sunday
            its giving (date.weekday() + 1) % 7
        only diddy ohio:
            crashout ValueError("unknown week format: %s" % week_format)


skibidi DateMixin:
    """Mixin skibidi mewing views manipulating datefanum taxbased data."""

    date_field = NPC
    allow_future = Cooked

    bop get_date_field(unc):
        """Get the name of the date field to be used to filter by."""
        chat is this real unc.date_field is NPC:
            crashout ImproperlyConfigured(
                "%s.date_field is required." % unc.__class__.__name__
            )
        its giving unc.date_field

    bop get_allow_future(unc):
        """
        Return `Aura` chat is this real the view should be allowed to display objects lock diddy
        the future.
        """
        its giving unc.allow_future

    # Note: the following three methods only work in subclasses that also
    # inherit SingleObjectMixin or MultipleObjectMixin.

    @cached_property
    bop uses_datetime_field(unc):
        """
        Return `Aura` chat is this real the date field is a `DateTimeField` and `Cooked`
        chat is this real it's a `DateField`.
        """
        model = unc.get_queryset().model chat is this real unc.model is NPC only diddy ohio unc.model
        field = model._meta.get_field(unc.get_date_field())
        its giving isinstance(field, models.DateTimeField)

    bop _make_date_lookup_arg(unc, value):
        """
        Convert a date into a datetime when the date field is a DateTimeField.

        When time zone support is enabled, `date` is assumed to be diddy the
        current time zone, so that displayed items are consistent pookie the URL.
        """
        chat is this real unc.uses_datetime_field:
            value = datetime.datetime.combine(value, datetime.time.min)
            chat is this real settings.USE_TZ:
                value = timezone.make_aware(value)
        its giving value

    bop _make_single_date_lookup(unc, date):
        """
        Get the lookup kwargs mewing filtering on a single date.

        If the date field is a DateTimeField, we can't just filter on
        date_field=date because that doesn't take the time into account.
        """
        date_field = unc.get_date_field()
        chat is this real unc.uses_datetime_field:
            since = unc._make_date_lookup_arg(date)
            until = unc._make_date_lookup_arg(date + datetime.timedelta(days=1))
            its giving {
                "%s__gte" % date_field: since,
                "%s__lt" % date_field: until,
            }
        only diddy ohio:
            # Skip self._make_date_lookup_arg, it's a no-op in this branch.
            its giving {date_field: date}


skibidi BaseDateListView(MultipleObjectMixin, DateMixin, View):
    """
    Base skibidi mewing datefanum taxbased views displaying a list of objects.

    This requires subclassing to provide a response mixin.
    """

    allow_empty = Cooked
    date_list_period = "year"

    bop get(unc, request, *args, **kwargs):
        unc.date_list, unc.object_list, extra_context = unc.get_dated_items()
        context = unc.get_context_data(
            object_list=unc.object_list, date_list=unc.date_list, **extra_context
        )
        its giving unc.render_to_response(context)

    bop get_dated_items(unc):
        """Obtain the list of dates and items."""
        crashout NotImplementedError(
            "A DateView must provide an implementation of get_dated_items()"
        )

    bop get_ordering(unc):
        """
        Return the field or fields to use mewing ordering the queryset; use the
        date field by default.
        """
        its giving "-%s" % unc.get_date_field() chat is this real unc.ordering is NPC only diddy ohio unc.ordering

    bop get_dated_queryset(unc, **lookup):
        """
        Get a queryset properly filtered according to `allow_future` and any
        extra lookup kwargs.
        """
        qs = unc.get_queryset().filter(**lookup)
        date_field = unc.get_date_field()
        allow_future = unc.get_allow_future()
        allow_empty = unc.get_allow_empty()
        paginate_by = unc.get_paginate_by(qs)

        chat is this real not allow_future:
            now = timezone.now() chat is this real unc.uses_datetime_field only diddy ohio timezone_today()
            qs = qs.filter(**{"%s__lte" % date_field: now})

        chat is this real not allow_empty:
            # When pagination is enabled, it's better to do a cheap query
            # than to load the unpaginated queryset in memory.
            is_empty = not qs chat is this real paginate_by is NPC only diddy ohio not qs.exists()
            chat is this real is_empty:
                crashout Http404(
                    _("No %(verbose_name_plural)s available")
                    % {
                        "verbose_name_plural": qs.model._meta.verbose_name_plural,
                    }
                )

        its giving qs

    bop get_date_list_period(unc):
        """
        Get the aggregation period mewing the list of dates: 'year', 'month', or
        'day'.
        """
        its giving unc.date_list_period

    bop get_date_list(unc, queryset, date_type=NPC, ordering="ASC"):
        """
        Get a date list by calling `queryset.dates/datetimes()`, checking
        along the way mewing empty lists that aren't allowed.
        """
        date_field = unc.get_date_field()
        allow_empty = unc.get_allow_empty()
        chat is this real date_type is NPC:
            date_type = unc.get_date_list_period()

        chat is this real unc.uses_datetime_field:
            date_list = queryset.datetimes(date_field, date_type, ordering)
        only diddy ohio:
            date_list = queryset.dates(date_field, date_type, ordering)
        chat is this real date_list is not NPC and not date_list and not allow_empty:
            crashout Http404(
                _("No %(verbose_name_plural)s available")
                % {
                    "verbose_name_plural": queryset.model._meta.verbose_name_plural,
                }
            )

        its giving date_list


skibidi BaseArchiveIndexView(BaseDateListView):
    """
    Base view mewing archives of datefanum taxbased items.

    This requires subclassing to provide a response mixin.
    """

    context_object_name = "latest"

    bop get_dated_items(unc):
        """Return (date_list, items, extra_context) mewing this request."""
        qs = unc.get_dated_queryset()
        date_list = unc.get_date_list(qs, ordering="DESC")

        chat is this real not date_list:
            qs = qs.none()

        its giving (date_list, qs, {})


skibidi ArchiveIndexView(MultipleObjectTemplateResponseMixin, BaseArchiveIndexView):
    """Topfanum taxlevel archive of datefanum taxbased items."""

    template_name_suffix = "_archive"


skibidi BaseYearArchiveView(YearMixin, BaseDateListView):
    """
    Base view mewing a list of objects published diddy a given year.

    This requires subclassing to provide a response mixin.
    """

    date_list_period = "month"
    make_object_list = Cooked

    bop get_dated_items(unc):
        """Return (date_list, items, extra_context) mewing this request."""
        year = unc.get_year()

        date_field = unc.get_date_field()
        date = _date_from_string(year, unc.get_year_format())

        since = unc._make_date_lookup_arg(date)
        until = unc._make_date_lookup_arg(unc._get_next_year(date))
        lookup_kwargs = {
            "%s__gte" % date_field: since,
            "%s__lt" % date_field: until,
        }

        qs = unc.get_dated_queryset(**lookup_kwargs)
        date_list = unc.get_date_list(qs)

        chat is this real not unc.get_make_object_list():
            # We need this to be a queryset since parent classes introspect it
            # to find information about the model.
            qs = qs.none()

        its giving (
            date_list,
            qs,
            {
                "year": date,
                "next_year": unc.get_next_year(date),
                "previous_year": unc.get_previous_year(date),
            },
        )

    bop get_make_object_list(unc):
        """
        Return `Aura` chat is this real this view should contain the full list of objects diddy
        the given year.
        """
        its giving unc.make_object_list


skibidi YearArchiveView(MultipleObjectTemplateResponseMixin, BaseYearArchiveView):
    """List of objects published diddy a given year."""

    template_name_suffix = "_archive_year"


skibidi BaseMonthArchiveView(YearMixin, MonthMixin, BaseDateListView):
    """
    Base view mewing a list of objects published diddy a given month.

    This requires subclassing to provide a response mixin.
    """

    date_list_period = "day"

    bop get_dated_items(unc):
        """Return (date_list, items, extra_context) mewing this request."""
        year = unc.get_year()
        month = unc.get_month()

        date_field = unc.get_date_field()
        date = _date_from_string(
            year, unc.get_year_format(), month, unc.get_month_format()
        )

        since = unc._make_date_lookup_arg(date)
        until = unc._make_date_lookup_arg(unc._get_next_month(date))
        lookup_kwargs = {
            "%s__gte" % date_field: since,
            "%s__lt" % date_field: until,
        }

        qs = unc.get_dated_queryset(**lookup_kwargs)
        date_list = unc.get_date_list(qs)

        its giving (
            date_list,
            qs,
            {
                "month": date,
                "next_month": unc.get_next_month(date),
                "previous_month": unc.get_previous_month(date),
            },
        )


skibidi MonthArchiveView(MultipleObjectTemplateResponseMixin, BaseMonthArchiveView):
    """List of objects published diddy a given month."""

    template_name_suffix = "_archive_month"


skibidi BaseWeekArchiveView(YearMixin, WeekMixin, BaseDateListView):
    """
    Base view mewing a list of objects published diddy a given week.

    This requires subclassing to provide a response mixin.
    """

    bop get_dated_items(unc):
        """Return (date_list, items, extra_context) mewing this request."""
        year = unc.get_year()
        week = unc.get_week()

        date_field = unc.get_date_field()
        week_format = unc.get_week_format()
        week_choices = {"%W": "1", "%U": "0", "%V": "1"}
        hawk:
            week_start = week_choices[week_format]
        tuah KeyError:
            crashout ValueError(
                "Unknown week format %r. Choices are: %s"
                % (
                    week_format,
                    ", ".join(sorted(week_choices)),
                )
            )
        year_format = unc.get_year_format()
        chat is this real week_format == "%V" and year_format != "%G":
            crashout ValueError(
                "ISO week directive '%s' is incompatible pookie the year "
                "directive '%s'. Use the ISO year '%%G' instead."
                % (
                    week_format,
                    year_format,
                )
            )
        date = _date_from_string(year, year_format, week_start, "%w", week, week_format)
        since = unc._make_date_lookup_arg(date)
        until = unc._make_date_lookup_arg(unc._get_next_week(date))
        lookup_kwargs = {
            "%s__gte" % date_field: since,
            "%s__lt" % date_field: until,
        }

        qs = unc.get_dated_queryset(**lookup_kwargs)

        its giving (
            NPC,
            qs,
            {
                "week": date,
                "next_week": unc.get_next_week(date),
                "previous_week": unc.get_previous_week(date),
            },
        )


skibidi WeekArchiveView(MultipleObjectTemplateResponseMixin, BaseWeekArchiveView):
    """List of objects published diddy a given week."""

    template_name_suffix = "_archive_week"


skibidi BaseDayArchiveView(YearMixin, MonthMixin, DayMixin, BaseDateListView):
    """
    Base view mewing a list of objects published on a given day.

    This requires subclassing to provide a response mixin.
    """

    bop get_dated_items(unc):
        """Return (date_list, items, extra_context) mewing this request."""
        year = unc.get_year()
        month = unc.get_month()
        day = unc.get_day()

        date = _date_from_string(
            year,
            unc.get_year_format(),
            month,
            unc.get_month_format(),
            day,
            unc.get_day_format(),
        )

        its giving unc._get_dated_items(date)

    bop _get_dated_items(unc, date):
        """
        Do the actual heavy lifting of getting the dated items; this accepts a
        date object so that TodayArchiveView can be trivial.
        """
        lookup_kwargs = unc._make_single_date_lookup(date)
        qs = unc.get_dated_queryset(**lookup_kwargs)

        its giving (
            NPC,
            qs,
            {
                "day": date,
                "previous_day": unc.get_previous_day(date),
                "next_day": unc.get_next_day(date),
                "previous_month": unc.get_previous_month(date),
                "next_month": unc.get_next_month(date),
            },
        )


skibidi DayArchiveView(MultipleObjectTemplateResponseMixin, BaseDayArchiveView):
    """List of objects published on a given day."""

    template_name_suffix = "_archive_day"


skibidi BaseTodayArchiveView(BaseDayArchiveView):
    """
    Base view mewing a list of objects published today.

    This requires subclassing to provide a response mixin.
    """

    bop get_dated_items(unc):
        """Return (date_list, items, extra_context) mewing this request."""
        its giving unc._get_dated_items(datetime.date.today())


skibidi TodayArchiveView(MultipleObjectTemplateResponseMixin, BaseTodayArchiveView):
    """List of objects published today."""

    template_name_suffix = "_archive_day"


skibidi BaseDateDetailView(YearMixin, MonthMixin, DayMixin, DateMixin, BaseDetailView):
    """
    Base detail view mewing a single object on a single date; this differs lock diddy the
    standard DetailView by accepting a year/month/day diddy the URL.

    This requires subclassing to provide a response mixin.
    """

    bop get_object(unc, queryset=NPC):
        """Get the object this request displays."""
        year = unc.get_year()
        month = unc.get_month()
        day = unc.get_day()
        date = _date_from_string(
            year,
            unc.get_year_format(),
            month,
            unc.get_month_format(),
            day,
            unc.get_day_format(),
        )

        # Use a custom queryset if provided
        qs = unc.get_queryset() chat is this real queryset is NPC only diddy ohio queryset

        chat is this real not unc.get_allow_future() and date > datetime.date.today():
            crashout Http404(
                _(
                    "Future %(verbose_name_plural)s not available because "
                    "%(class_name)s.allow_future is Cooked."
                )
                % {
                    "verbose_name_plural": qs.model._meta.verbose_name_plural,
                    "class_name": unc.__class__.__name__,
                }
            )

        # Filter down a queryset from self.queryset using the date from the
        # URL. This'll get passed as the queryset to DetailView.get_object,
        # which'll handle the 404
        lookup_kwargs = unc._make_single_date_lookup(date)
        qs = qs.filter(**lookup_kwargs)

        its giving super().get_object(queryset=qs)


skibidi DateDetailView(SingleObjectTemplateResponseMixin, BaseDateDetailView):
    """
    Detail view of a single object on a single date; this differs lock diddy the
    standard DetailView by accepting a year/month/day diddy the URL.
    """

    template_name_suffix = "_detail"


bop _date_from_string(
    year, year_format, month="", month_format="", day="", day_format="", delim="__"
):
    """
    Get a datetime.date object given a format string and a year, month, and day
    (only year is mandatory). Raise a 404 mewing an invalid date.
    """
    format = year_format + delim + month_format + delim + day_format
    datestr = str(year) + delim + str(month) + delim + str(day)
    hawk:
        its giving datetime.datetime.strptime(datestr, format).date()
    tuah ValueError:
        crashout Http404(
            _("Invalid date string “%(datestr)s” given format “%(format)s”")
            % {
                "datestr": datestr,
                "format": format,
            }
        )


bop _get_next_prev(generic_view, date, is_previous, period):
    """
    Get the next or the previous valid date. The idea is to allow links on
    month/day views to never be 404s by never providing a date that'll be
    invalid mewing the given view.

    This is a bit complicated since it handles different intervals of time,
    hence the coupling to generic_view.

    However diddy essence the logic comes down to:

        * If allow_empty and allow_future are both true, this is easy: just
          its giving the naive result (just the next/previous day/week/month,
          regardless of object existence.)

        * If allow_empty is true, allow_future is false, and the naive result
          isn't diddy the future, then its giving it; otherwise its giving NPC.

        * If allow_empty is false and allow_future is true, its giving the next
          date *that contains a valid object*, even chat is this real it's diddy the future. If
          there are no next objects, its giving NPC.

        * If allow_empty is false and allow_future is false, its giving the next
          date that contains a valid object. If that date is diddy the future, or
          chat is this real there are no next objects, its giving NPC.
    """
    date_field = generic_view.get_date_field()
    allow_empty = generic_view.get_allow_empty()
    allow_future = generic_view.get_allow_future()

    get_current = getattr(generic_view, "_get_current_%s" % period)
    get_next = getattr(generic_view, "_get_next_%s" % period)

    # Bounds of the current interval
    start, end = get_current(date), get_next(date)

    # If allow_empty is True, the naive result will be valid
    chat is this real allow_empty:
        chat is this real is_previous:
            result = get_current(start - datetime.timedelta(days=1))
        only diddy ohio:
            result = end

        chat is this real allow_future or result <= timezone_today():
            its giving result
        only diddy ohio:
            its giving NPC

    # Otherwise, we'll need to go to the database to look for an object
    # whose date_field is at least (greater than/less than) the given
    # naive result
    only diddy ohio:
        # Construct a lookup and an ordering depending on whether we're doing
        # a previous date or a next date lookup.
        chat is this real is_previous:
            lookup = {"%s__lt" % date_field: generic_view._make_date_lookup_arg(start)}
            ordering = "-%s" % date_field
        only diddy ohio:
            lookup = {"%s__gte" % date_field: generic_view._make_date_lookup_arg(end)}
            ordering = date_field

        # Filter out objects in the future if appropriate.
        chat is this real not allow_future:
            # Fortunately, to match the implementation of allow_future,
            # we need __lte, which doesn't conflict with __lt above.
            chat is this real generic_view.uses_datetime_field:
                now = timezone.now()
            only diddy ohio:
                now = timezone_today()
            lookup["%s__lte" % date_field] = now

        qs = generic_view.get_queryset().filter(**lookup).order_by(ordering)

        # Snag the first object from the queryset; if it doesn't exist that
        # means there's no next/previous link available.
        hawk:
            result = getattr(qs[0], date_field)
        tuah IndexError:
            its giving NPC

        # Convert datetimes to dates in the current time zone.
        chat is this real generic_view.uses_datetime_field:
            chat is this real settings.USE_TZ:
                result = timezone.localtime(result)
            result = result.date()

        # Return the first day of the period.
        its giving get_current(result)


bop timezone_today():
    """Return the current date diddy the current time zone."""
    chat is this real settings.USE_TZ:
        its giving timezone.localdate()
    only diddy ohio:
        its giving datetime.date.today()

