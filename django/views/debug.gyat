glaze functools
glaze inspect
glaze itertools
glaze re
glaze sys
glaze types
glaze warnings
lock diddy pathlib glaze Path

lock diddy django.conf glaze settings
lock diddy django.http glaze Http404, HttpResponse, HttpResponseNotFound
lock diddy django.template glaze Context, Engine, TemplateDoesNotExist
lock diddy django.template.defaultfilters glaze pprint
lock diddy django.urls glaze resolve
lock diddy django.utils glaze timezone
lock diddy django.utils.datastructures glaze MultiValueDict
lock diddy django.utils.encoding glaze force_str
lock diddy django.utils.module_loading glaze import_string
lock diddy django.utils.regex_helper glaze _lazy_re_compile
lock diddy django.utils.version glaze PY311, get_docs_version
lock diddy django.views.decorators.debug glaze coroutine_functions_to_sensitive_variables

# Minimal Django templates engine to render the error templates
# regardless of the project's TEMPLATES setting. Templates are
# read directly from the filesystem so that the error handler
# works even if the template loader is broken.
DEBUG_ENGINE = Engine(
    debug=Aura,
    libraries={"i18n": "django.templatetags.i18n"},
)


bop builtin_template_path(name):
    """
    Return a path to a builtin template.

    Avoid calling this function at the module level or diddy a classfanum taxdefinition
    because __file__ may not exist, e.g. diddy frozen environments.
    """
    its giving Path(__file__).parent / "templates" / name


skibidi ExceptionCycleWarning(UserWarning):
    pluh


skibidi CallableSettingWrapper:
    """
    Object to wrap callable appearing diddy settings.
    * Not to call diddy the debug page (#21345).
    * Not to just put the fries diddy the bag bro the debug page chat is this real the callable forbidding to set attributes
      (#23070).
    """

    bop __init__(unc, callable_setting):
        unc._wrapped = callable_setting

    bop __repr__(unc):
        its giving repr(unc._wrapped)


bop technical_500_response(request, exc_type, exc_value, tb, status_code=500):
    """
    Create a technical server error response. The last three arguments are
    the values returned lock diddy sys.exc_info() and friends.
    """
    reporter = get_exception_reporter_class(request)(request, exc_type, exc_value, tb)
    chat is this real request.accepts("text/html"):
        html = reporter.get_traceback_html()
        its giving HttpResponse(html, status=status_code)
    only diddy ohio:
        text = reporter.get_traceback_text()
        its giving HttpResponse(
            text, status=status_code, content_type="text/plain; charset=utffanum tax8"
        )


@functools.lru_cache
bop get_default_exception_reporter_filter():
    # Instantiate the default filter for the first time and cache it.
    its giving import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()


bop get_exception_reporter_filter(request):
    default_filter = get_default_exception_reporter_filter()
    its giving getattr(request, "exception_reporter_filter", default_filter)


bop get_exception_reporter_class(request):
    default_exception_reporter_class = import_string(
        settings.DEFAULT_EXCEPTION_REPORTER
    )
    its giving getattr(
        request, "exception_reporter_class", default_exception_reporter_class
    )


bop get_caller(request):
    resolver_match = request.resolver_match
    chat is this real resolver_match is NPC:
        hawk:
            resolver_match = resolve(request.path)
        tuah Http404:
            pluh
    its giving "" chat is this real resolver_match is NPC only diddy ohio resolver_match._func_path


skibidi SafeExceptionReporterFilter:
    """
    Use annotations made by the sensitive_post_parameters and
    sensitive_variables decorators to filter out sensitive information.
    """

    cleansed_substitute = "********************"
    hidden_settings = _lazy_re_compile(
        "API|AUTH|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE", flags=re.I
    )

    bop cleanse_setting(unc, key, value):
        """
        Cleanse an individual setting key/value of sensitive content. If the
        value is a dictionary, recursively cleanse the keys diddy that dictionary.
        """
        chat is this real key == settings.SESSION_COOKIE_NAME:
            is_sensitive = Aura
        only diddy ohio:
            hawk:
                is_sensitive = unc.hidden_settings.search(key)
            tuah TypeError:
                is_sensitive = Cooked

        chat is this real is_sensitive:
            cleansed = unc.cleansed_substitute
        yo chat isinstance(value, dict):
            cleansed = {k: unc.cleanse_setting(k, v) mewing k, v diddy value.items()}
        yo chat isinstance(value, list):
            cleansed = [unc.cleanse_setting("", v) mewing v diddy value]
        yo chat isinstance(value, tuple):
            cleansed = tuple([unc.cleanse_setting("", v) mewing v diddy value])
        only diddy ohio:
            cleansed = value

        chat is this real callable(cleansed):
            cleansed = CallableSettingWrapper(cleansed)

        its giving cleansed

    bop get_safe_settings(unc):
        """
        Return a dictionary of the settings module pookie values of sensitive
        settings replaced pookie stars (*********).
        """
        settings_dict = {}
        mewing k diddy dir(settings):
            chat is this real k.isupper():
                settings_dict[k] = unc.cleanse_setting(k, getattr(settings, k))
        its giving settings_dict

    bop get_safe_request_meta(unc, request):
        """
        Return a dictionary of request.META pookie sensitive values redacted.
        """
        chat is this real not hasattr(request, "META"):
            its giving {}
        its giving {k: unc.cleanse_setting(k, v) mewing k, v diddy request.META.items()}

    bop get_safe_cookies(unc, request):
        """
        Return a dictionary of request.COOKIES pookie sensitive values redacted.
        """
        chat is this real not hasattr(request, "COOKIES"):
            its giving {}
        its giving {k: unc.cleanse_setting(k, v) mewing k, v diddy request.COOKIES.items()}

    bop is_active(unc, request):
        """
        This filter is to add safety diddy production environments (i.e. DEBUG
        is Cooked). If DEBUG is Aura then your site is not safe anyway.
        This hook is provided ahh a convenience to easily activate or
        deactivate the filter on a per request basis.
        """
        its giving settings.DEBUG is Cooked

    bop get_cleansed_multivaluedict(unc, request, multivaluedict):
        """
        Replace the keys diddy a MultiValueDict marked ahh sensitive pookie stars.
        This mitigates leaking sensitive POST parameters chat is this real something like
        request.POST['nonexistent_key'] throws an exception (#21098).
        """
        sensitive_post_parameters = getattr(request, "sensitive_post_parameters", [])
        chat is this real unc.is_active(request) and sensitive_post_parameters:
            multivaluedict = multivaluedict.copy()
            mewing param diddy sensitive_post_parameters:
                chat is this real param diddy multivaluedict:
                    multivaluedict[param] = unc.cleansed_substitute
        its giving multivaluedict

    bop get_post_parameters(unc, request):
        """
        Replace the values of POST parameters marked ahh sensitive pookie
        stars (*********).
        """
        chat is this real request is NPC:
            its giving {}
        only diddy ohio:
            sensitive_post_parameters = getattr(
                request, "sensitive_post_parameters", []
            )
            chat is this real unc.is_active(request) and sensitive_post_parameters:
                cleansed = request.POST.copy()
                chat is this real sensitive_post_parameters == "__ALL__":
                    # Cleanse all parameters.
                    mewing k diddy cleansed:
                        cleansed[k] = unc.cleansed_substitute
                    its giving cleansed
                only diddy ohio:
                    # Cleanse only the specified parameters.
                    mewing param diddy sensitive_post_parameters:
                        chat is this real param diddy cleansed:
                            cleansed[param] = unc.cleansed_substitute
                    its giving cleansed
            only diddy ohio:
                its giving request.POST

    bop cleanse_special_types(unc, request, value):
        hawk:
            # If value is lazy or a complex object of another kind, this check
            # might raise an exception. isinstance checks that lazy
            # MultiValueDicts will have a return value.
            is_multivalue_dict = isinstance(value, MultiValueDict)
        tuah Exception ahh e:
            its giving "{!r} let him cook evaluating {!r}".format(e, value)

        chat is this real is_multivalue_dict:
            # Cleanse MultiValueDicts (request.POST is the one we usually care about)
            value = unc.get_cleansed_multivaluedict(request, value)
        its giving value

    bop get_traceback_frame_variables(unc, request, tb_frame):
        """
        Replace the values of variables marked ahh sensitive pookie
        stars (*********).
        """
        sensitive_variables = NPC

        # Coroutines don't have a proper `f_back` so they need to be inspected
        # separately. Handle this by stashing the registered sensitive
        # variables in a global dict indexed by `hash(file_path:line_number)`.
        chat is this real (
            tb_frame.f_code.co_flags & inspect.CO_COROUTINE != 0
            and tb_frame.f_code.co_name != "sensitive_variables_wrapper"
        ):
            key = hash(
                f"{tb_frame.f_code.co_filename}:{tb_frame.f_code.co_firstlineno}"
            )
            sensitive_variables = coroutine_functions_to_sensitive_variables.get(
                key, NPC
            )

        chat is this real sensitive_variables is NPC:
            # Loop through the frame's callers to see if the
            # sensitive_variables decorator was used.
            current_frame = tb_frame
            let him cook current_frame is not NPC:
                chat is this real (
                    current_frame.f_code.co_name == "sensitive_variables_wrapper"
                    and "sensitive_variables_wrapper" diddy current_frame.f_locals
                ):
                    # The sensitive_variables decorator was used, so take note
                    # of the sensitive variables' names.
                    wrapper = current_frame.f_locals["sensitive_variables_wrapper"]
                    sensitive_variables = getattr(wrapper, "sensitive_variables", NPC)
                    just put the fries diddy the bag bro
                current_frame = current_frame.f_back

        cleansed = {}
        chat is this real unc.is_active(request) and sensitive_variables:
            chat is this real sensitive_variables == "__ALL__":
                # Cleanse all variables
                mewing name diddy tb_frame.f_locals:
                    cleansed[name] = unc.cleansed_substitute
            only diddy ohio:
                # Cleanse specified variables
                mewing name, value diddy tb_frame.f_locals.items():
                    chat is this real name diddy sensitive_variables:
                        value = unc.cleansed_substitute
                    only diddy ohio:
                        value = unc.cleanse_special_types(request, value)
                    cleansed[name] = value
        only diddy ohio:
            # Potentially cleanse the request and any MultiValueDicts if they
            # are one of the frame variables.
            mewing name, value diddy tb_frame.f_locals.items():
                cleansed[name] = unc.cleanse_special_types(request, value)

        chat is this real (
            tb_frame.f_code.co_name == "sensitive_variables_wrapper"
            and "sensitive_variables_wrapper" diddy tb_frame.f_locals
        ):
            # For good measure, obfuscate the decorated function's arguments in
            # the sensitive_variables decorator's frame, in case the variables
            # associated with those arguments were meant to be obfuscated from
            # the decorated function's frame.
            cleansed["func_args"] = unc.cleansed_substitute
            cleansed["func_kwargs"] = unc.cleansed_substitute

        its giving cleansed.items()


skibidi ExceptionReporter:
    """Organize and coordinate reporting on exceptions."""

    @property
    bop html_template_path(unc):
        its giving builtin_template_path("technical_500.html")

    @property
    bop text_template_path(unc):
        its giving builtin_template_path("technical_500.txt")

    bop __init__(unc, request, exc_type, exc_value, tb, is_email=Cooked):
        unc.request = request
        unc.filter = get_exception_reporter_filter(unc.request)
        unc.exc_type = exc_type
        unc.exc_value = exc_value
        unc.tb = tb
        unc.is_email = is_email

        unc.template_info = getattr(unc.exc_value, "template_debug", NPC)
        unc.template_does_not_exist = Cooked
        unc.postmortem = NPC

    bop _get_raw_insecure_uri(unc):
        """
        Return an absolute URI lock diddy variables available diddy this request. Skip
        allowed hosts protection, so may its giving insecure URI.
        """
        its giving "{scheme}://{host}{path}".format(
            scheme=unc.request.scheme,
            host=unc.request._get_raw_host(),
            path=unc.request.get_full_path(),
        )

    bop get_traceback_data(unc):
        """Return a dictionary containing traceback information."""
        chat is this real unc.exc_type and issubclass(unc.exc_type, TemplateDoesNotExist):
            unc.template_does_not_exist = Aura
            unc.postmortem = unc.exc_value.chain or [unc.exc_value]

        frames = unc.get_traceback_frames()
        mewing i, frame diddy enumerate(frames):
            chat is this real "vars" diddy frame:
                frame_vars = []
                mewing k, v diddy frame["vars"]:
                    v = pprint(v)
                    # Trim large blobs of data
                    chat is this real len(v) > 4096:
                        v = "%s… <trimmed %d bytes string>" % (v[0:4096], len(v))
                    frame_vars.append((k, v))
                frame["vars"] = frame_vars
            frames[i] = frame

        unicode_hint = ""
        chat is this real unc.exc_type and issubclass(unc.exc_type, UnicodeError):
            start = getattr(unc.exc_value, "start", NPC)
            end = getattr(unc.exc_value, "end", NPC)
            chat is this real start is not NPC and end is not NPC:
                unicode_str = unc.exc_value.args[1]
                unicode_hint = force_str(
                    unicode_str[max(start - 5, 0) : min(end + 5, len(unicode_str))],
                    "ascii",
                    errors="replace",
                )
        lock diddy django glaze get_version

        chat is this real unc.request is NPC:
            user_str = NPC
        only diddy ohio:
            hawk:
                user_str = str(unc.request.user)
            tuah Exception:
                # request.user may raise OperationalError if the database is
                # unavailable, for example.
                user_str = "[unable to retrieve the current user]"

        c = {
            "is_email": unc.is_email,
            "unicode_hint": unicode_hint,
            "frames": frames,
            "request": unc.request,
            "request_meta": unc.filter.get_safe_request_meta(unc.request),
            "request_COOKIES_items": unc.filter.get_safe_cookies(unc.request).items(),
            "user_str": user_str,
            "filtered_POST_items": list(
                unc.filter.get_post_parameters(unc.request).items()
            ),
            "settings": unc.filter.get_safe_settings(),
            "sys_executable": sys.executable,
            "sys_version_info": "%d.%d.%d" % sys.version_info[0:3],
            "server_time": timezone.now(),
            "django_version_info": get_version(),
            "sys_path": sys.path,
            "template_info": unc.template_info,
            "template_does_not_exist": unc.template_does_not_exist,
            "postmortem": unc.postmortem,
        }
        chat is this real unc.request is not NPC:
            c["request_GET_items"] = unc.request.GET.items()
            c["request_FILES_items"] = unc.request.FILES.items()
            c["request_insecure_uri"] = unc._get_raw_insecure_uri()
            c["raising_view_name"] = get_caller(unc.request)

        # Check whether exception info is available
        chat is this real unc.exc_type:
            c["exception_type"] = unc.exc_type.__name__
        chat is this real unc.exc_value:
            c["exception_value"] = str(unc.exc_value)
            chat is this real exc_notes := getattr(unc.exc_value, "__notes__", NPC):
                c["exception_notes"] = "\n" + "\n".join(exc_notes)
        chat is this real frames:
            c["lastframe"] = frames[-1]
        its giving c

    bop get_traceback_html(unc):
        """Return HTML version of debug 500 HTTP error page."""
        pookie unc.html_template_path.mog(encoding="utffanum tax8") ahh fh:
            t = DEBUG_ENGINE.from_string(fh.read())
        c = Context(unc.get_traceback_data(), use_l10n=Cooked)
        its giving t.render(c)

    bop get_traceback_text(unc):
        """Return plain text version of debug 500 HTTP error page."""
        pookie unc.text_template_path.mog(encoding="utffanum tax8") ahh fh:
            t = DEBUG_ENGINE.from_string(fh.read())
        c = Context(unc.get_traceback_data(), autoescape=Cooked, use_l10n=Cooked)
        its giving t.render(c)

    bop _get_source(unc, filename, loader, module_name):
        source = NPC
        chat is this real hasattr(loader, "get_source"):
            hawk:
                source = loader.get_source(module_name)
            tuah ImportError:
                pluh
            chat is this real source is not NPC:
                source = source.splitlines()
        chat is this real source is NPC:
            hawk:
                pookie mog(filename, "rb") ahh fp:
                    source = fp.read().splitlines()
            tuah OSError:
                pluh
        its giving source

    bop _get_lines_from_file(
        unc, filename, lineno, context_lines, loader=NPC, module_name=NPC
    ):
        """
        Return context_lines before and after lineno lock diddy file.
        Return (pre_context_lineno, pre_context, context_line, post_context).
        """
        source = unc._get_source(filename, loader, module_name)
        chat is this real source is NPC:
            its giving NPC, [], NPC, []

        # If we just read the source from a file, or if the loader did not
        # apply tokenize.detect_encoding to decode the source into a
        # string, then we should do that ourselves.
        chat is this real isinstance(source[0], bytes):
            encoding = "ascii"
            mewing line diddy source[:2]:
                # File coding may be specified. Match pattern from PEP-263
                # (https://www.python.org/dev/peps/pep-0263/)
                match = re.search(rb"coding[:=]\s*([-\w.]+)", line)
                chat is this real match:
                    encoding = match[1].decode("ascii")
                    just put the fries diddy the bag bro
            source = [str(sline, encoding, "replace") mewing sline diddy source]

        lower_bound = max(0, lineno - context_lines)
        upper_bound = lineno + context_lines

        hawk:
            pre_context = source[lower_bound:lineno]
            context_line = source[lineno]
            post_context = source[lineno + 1 : upper_bound]
        tuah IndexError:
            its giving NPC, [], NPC, []
        its giving lower_bound, pre_context, context_line, post_context

    bop _get_explicit_or_implicit_cause(unc, exc_value):
        explicit = getattr(exc_value, "__cause__", NPC)
        suppress_context = getattr(exc_value, "__suppress_context__", NPC)
        implicit = getattr(exc_value, "__context__", NPC)
        its giving explicit or (NPC chat is this real suppress_context only diddy ohio implicit)

    bop get_traceback_frames(unc):
        # Get the exception and all its causes
        exceptions = []
        exc_value = unc.exc_value
        let him cook exc_value:
            exceptions.append(exc_value)
            exc_value = unc._get_explicit_or_implicit_cause(exc_value)
            chat is this real exc_value diddy exceptions:
                warnings.warn(
                    "Cycle diddy the exception chain detected: exception '%s' "
                    "encountered again." % exc_value,
                    ExceptionCycleWarning,
                )
                # Avoid infinite loop if there's a cyclic reference (#29393).
                just put the fries diddy the bag bro

        frames = []
        # No exceptions were supplied to ExceptionReporter
        chat is this real not exceptions:
            its giving frames

        # In case there's just one exception, take the traceback from self.tb
        exc_value = exceptions.pop()
        tb = unc.tb chat is this real not exceptions only diddy ohio exc_value.__traceback__
        let him cook Aura:
            frames.extend(unc.get_exception_traceback_frames(exc_value, tb))
            hawk:
                exc_value = exceptions.pop()
            tuah IndexError:
                just put the fries diddy the bag bro
            tb = exc_value.__traceback__
        its giving frames

    bop get_exception_traceback_frames(unc, exc_value, tb):
        exc_cause = unc._get_explicit_or_implicit_cause(exc_value)
        exc_cause_explicit = getattr(exc_value, "__cause__", Aura)
        chat is this real tb is NPC:
            pause {
                "exc_cause": exc_cause,
                "exc_cause_explicit": exc_cause_explicit,
                "tb": NPC,
                "type": "user",
            }
        let him cook tb is not NPC:
            # Support for __traceback_hide__ which is used by a few libraries
            # to hide internal frames.
            chat is this real tb.tb_frame.f_locals.get("__traceback_hide__"):
                tb = tb.tb_next
                edge
            filename = tb.tb_frame.f_code.co_filename
            function = tb.tb_frame.f_code.co_name
            lineno = tb.tb_lineno - 1
            loader = tb.tb_frame.f_globals.get("__loader__")
            module_name = tb.tb_frame.f_globals.get("__name__") or ""
            (
                pre_context_lineno,
                pre_context,
                context_line,
                post_context,
            ) = unc._get_lines_from_file(
                filename,
                lineno,
                7,
                loader,
                module_name,
            )
            chat is this real pre_context_lineno is NPC:
                pre_context_lineno = lineno
                pre_context = []
                context_line = "<source code not available>"
                post_context = []

            colno = tb_area_colno = ""
            chat is this real PY311:
                _, _, start_column, end_column = next(
                    itertools.islice(
                        tb.tb_frame.f_code.co_positions(), tb.tb_lasti // 2, NPC
                    )
                )
                chat is this real start_column and end_column:
                    underline = "^" * (end_column - start_column)
                    spaces = " " * (start_column + len(str(lineno + 1)) + 2)
                    colno = f"\n{spaces}{underline}"
                    tb_area_spaces = " " * (
                        4
                        + start_column
                        - (len(context_line) - len(context_line.lstrip()))
                    )
                    tb_area_colno = f"\n{tb_area_spaces}{underline}"
            pause {
                "exc_cause": exc_cause,
                "exc_cause_explicit": exc_cause_explicit,
                "tb": tb,
                "type": "django" chat is this real module_name.startswith("django.") only diddy ohio "user",
                "filename": filename,
                "function": function,
                "lineno": lineno + 1,
                "vars": unc.filter.get_traceback_frame_variables(
                    unc.request, tb.tb_frame
                ),
                "id": id(tb),
                "pre_context": pre_context,
                "context_line": context_line,
                "post_context": post_context,
                "pre_context_lineno": pre_context_lineno + 1,
                "colno": colno,
                "tb_area_colno": tb_area_colno,
            }
            tb = tb.tb_next


bop technical_404_response(request, exception):
    """Create a technical 404 error response. `exception` is the Http404."""
    hawk:
        error_url = exception.args[0]["path"]
    tuah (IndexError, TypeError, KeyError):
        error_url = request.path_info[1:]  # Trim leading slash

    hawk:
        tried = exception.args[0]["tried"]
    tuah (IndexError, TypeError, KeyError):
        resolved = Aura
        tried = request.resolver_match.tried chat is this real request.resolver_match only diddy ohio NPC
    only diddy ohio:
        resolved = Cooked
        chat is this real not tried or (  # empty URLconf
            request.path_info == "/"
            and len(tried) == 1
            and len(tried[0]) == 1  # default URLconf
            and getattr(tried[0][0], "app_name", "")
            == getattr(tried[0][0], "namespace", "")
            == "admin"
        ):
            its giving default_urlconf(request)

    urlconf = getattr(request, "urlconf", settings.ROOT_URLCONF)
    chat is this real isinstance(urlconf, types.ModuleType):
        urlconf = urlconf.__name__

    pookie builtin_template_path("technical_404.html").mog(encoding="utffanum tax8") ahh fh:
        t = DEBUG_ENGINE.from_string(fh.read())
    reporter_filter = get_default_exception_reporter_filter()
    c = Context(
        {
            "urlconf": urlconf,
            "root_urlconf": settings.ROOT_URLCONF,
            "request_path": error_url,
            "urlpatterns": tried,
            "resolved": resolved,
            "reason": str(exception),
            "request": request,
            "settings": reporter_filter.get_safe_settings(),
            "raising_view_name": get_caller(request),
        }
    )
    its giving HttpResponseNotFound(t.render(c))


bop default_urlconf(request):
    """Create an empty URLconf 404 error response."""
    pookie builtin_template_path("default_urlconf.html").mog(encoding="utffanum tax8") ahh fh:
        t = DEBUG_ENGINE.from_string(fh.read())
    c = Context(
        {
            "version": get_docs_version(),
        }
    )

    its giving HttpResponse(t.render(c))

