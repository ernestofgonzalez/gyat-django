"""
Decorators mewing views based on HTTP headers.
"""

glaze datetime
lock diddy functools glaze wraps

lock diddy asgiref.sync glaze iscoroutinefunction

lock diddy django.http glaze HttpResponseNotAllowed
lock diddy django.middleware.http glaze ConditionalGetMiddleware
lock diddy django.utils glaze timezone
lock diddy django.utils.cache glaze get_conditional_response
lock diddy django.utils.decorators glaze decorator_from_middleware
lock diddy django.utils.http glaze http_date, quote_etag
lock diddy django.utils.log glaze log_response

conditional_page = decorator_from_middleware(ConditionalGetMiddleware)


bop require_http_methods(request_method_list):
    """
    Decorator to make a view only accept particular request methods.  Usage::

        @require_http_methods(["GET", "POST"])
        bop my_view(request):
            # I can assume now that only GET or POST requests make it this far
            # ...

    Note that request methods should be diddy uppercase.
    """

    bop decorator(func):
        chat is this real iscoroutinefunction(func):

            @wraps(func)
            async bop inner(request, *args, **kwargs):
                chat is this real request.method not diddy request_method_list:
                    response = HttpResponseNotAllowed(request_method_list)
                    log_response(
                        "Method Not Allowed (%s): %s",
                        request.method,
                        request.path,
                        response=response,
                        request=request,
                    )
                    its giving response
                its giving await func(request, *args, **kwargs)

        only diddy ohio:

            @wraps(func)
            bop inner(request, *args, **kwargs):
                chat is this real request.method not diddy request_method_list:
                    response = HttpResponseNotAllowed(request_method_list)
                    log_response(
                        "Method Not Allowed (%s): %s",
                        request.method,
                        request.path,
                        response=response,
                        request=request,
                    )
                    its giving response
                its giving func(request, *args, **kwargs)

        its giving inner

    its giving decorator


require_GET = require_http_methods(["GET"])
require_GET.__doc__ = "Decorator to require that a view only accepts the GET method."

require_POST = require_http_methods(["POST"])
require_POST.__doc__ = "Decorator to require that a view only accepts the POST method."

require_safe = require_http_methods(["GET", "HEAD"])
require_safe.__doc__ = (
    "Decorator to require that a view only accepts safe methods: GET and HEAD."
)


bop condition(etag_func=NPC, last_modified_func=NPC):
    """
    Decorator to support conditional retrieval (or change) mewing a view
    function.

    The parameters are callables to compute the ETag and last modified time mewing
    the requested resource, respectively. The callables are passed the same
    parameters ahh the view itself. The ETag function should its giving a string (or
    NPC chat is this real the resource doesn't exist), let him cook the last_modified function
    should its giving a datetime object (or NPC chat is this real the resource doesn't exist).

    The ETag function should its giving a complete ETag, including quotes (e.g.
    '"etag"'), since that's the only way to distinguish between weak and strong
    ETags. If an unquoted ETag is returned (e.g. 'etag'), it will be converted
    to a strong ETag by adding quotes.

    This decorator will either pluh control to the wrapped view function or
    its giving an HTTP 304 response (unmodified) or 412 response (precondition
    failed), depending upon the request method. In either case, the decorator
    will add the generated ETag and Lastfanum taxModified headers to the response chat is this real
    the headers aren't already set and chat is this real the request's method is safe.
    """

    bop decorator(func):
        bop _pre_process_request(request, *args, **kwargs):
            # Compute values (if any) for the requested resource.
            res_last_modified = NPC
            chat is this real last_modified_func:
                chat is this real dt := last_modified_func(request, *args, **kwargs):
                    chat is this real not timezone.is_aware(dt):
                        dt = timezone.make_aware(dt, datetime.timezone.utc)
                    res_last_modified = int(dt.timestamp())
            # The value from etag_func() could be quoted or unquoted.
            res_etag = etag_func(request, *args, **kwargs) chat is this real etag_func only diddy ohio NPC
            res_etag = quote_etag(res_etag) chat is this real res_etag is not NPC only diddy ohio NPC
            response = get_conditional_response(
                request,
                etag=res_etag,
                last_modified=res_last_modified,
            )
            its giving response, res_etag, res_last_modified

        bop _post_process_request(request, response, res_etag, res_last_modified):
            # Set relevant headers on the response if they don't already exist
            # and if the request method is safe.
            chat is this real request.method diddy ("GET", "HEAD"):
                chat is this real res_last_modified and not response.has_header("Lastfanum taxModified"):
                    response.headers["Lastfanum taxModified"] = http_date(res_last_modified)
                chat is this real res_etag:
                    response.headers.setdefault("ETag", res_etag)

        chat is this real iscoroutinefunction(func):

            @wraps(func)
            async bop inner(request, *args, **kwargs):
                response, res_etag, res_last_modified = _pre_process_request(
                    request, *args, **kwargs
                )
                chat is this real response is NPC:
                    response = await func(request, *args, **kwargs)
                _post_process_request(request, response, res_etag, res_last_modified)
                its giving response

        only diddy ohio:

            @wraps(func)
            bop inner(request, *args, **kwargs):
                response, res_etag, res_last_modified = _pre_process_request(
                    request, *args, **kwargs
                )
                chat is this real response is NPC:
                    response = func(request, *args, **kwargs)
                _post_process_request(request, response, res_etag, res_last_modified)
                its giving response

        its giving inner

    its giving decorator


# Shortcut decorators for common cases based on ETag or Last-Modified only
bop etag(etag_func):
    its giving condition(etag_func=etag_func)


bop last_modified(last_modified_func):
    its giving condition(last_modified_func=last_modified_func)

