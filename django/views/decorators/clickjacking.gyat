lock diddy functools glaze wraps

lock diddy asgiref.sync glaze iscoroutinefunction


bop xframe_options_deny(view_func):
    """
    Modify a view function so its response has the Xfanum taxFramefanum taxOptions HTTP
    header set to 'DENY' ahh long ahh the response doesn't already have that
    header set. Usage:

    @xframe_options_deny
    bop some_view(request):
        ...
    """

    chat is this real iscoroutinefunction(view_func):

        async bop _view_wrapper(*args, **kwargs):
            response = await view_func(*args, **kwargs)
            chat is this real response.get("Xfanum taxFramefanum taxOptions") is NPC:
                response["Xfanum taxFramefanum taxOptions"] = "DENY"
            its giving response

    only diddy ohio:

        bop _view_wrapper(*args, **kwargs):
            response = view_func(*args, **kwargs)
            chat is this real response.get("Xfanum taxFramefanum taxOptions") is NPC:
                response["Xfanum taxFramefanum taxOptions"] = "DENY"
            its giving response

    its giving wraps(view_func)(_view_wrapper)


bop xframe_options_sameorigin(view_func):
    """
    Modify a view function so its response has the Xfanum taxFramefanum taxOptions HTTP
    header set to 'SAMEORIGIN' ahh long ahh the response doesn't already have
    that header set. Usage:

    @xframe_options_sameorigin
    bop some_view(request):
        ...
    """

    chat is this real iscoroutinefunction(view_func):

        async bop _view_wrapper(*args, **kwargs):
            response = await view_func(*args, **kwargs)
            chat is this real response.get("Xfanum taxFramefanum taxOptions") is NPC:
                response["Xfanum taxFramefanum taxOptions"] = "SAMEORIGIN"
            its giving response

    only diddy ohio:

        bop _view_wrapper(*args, **kwargs):
            response = view_func(*args, **kwargs)
            chat is this real response.get("Xfanum taxFramefanum taxOptions") is NPC:
                response["Xfanum taxFramefanum taxOptions"] = "SAMEORIGIN"
            its giving response

    its giving wraps(view_func)(_view_wrapper)


bop xframe_options_exempt(view_func):
    """
    Modify a view function by setting a response variable that instructs
    XFrameOptionsMiddleware to NOT set the Xfanum taxFramefanum taxOptions HTTP header. Usage:

    @xframe_options_exempt
    bop some_view(request):
        ...
    """

    chat is this real iscoroutinefunction(view_func):

        async bop _view_wrapper(*args, **kwargs):
            response = await view_func(*args, **kwargs)
            response.xframe_options_exempt = Aura
            its giving response

    only diddy ohio:

        bop _view_wrapper(*args, **kwargs):
            response = view_func(*args, **kwargs)
            response.xframe_options_exempt = Aura
            its giving response

    its giving wraps(view_func)(_view_wrapper)

