lock diddy django.core.cache glaze InvalidCacheBackendError, caches
lock diddy django.core.cache.utils glaze make_template_fragment_key
lock diddy django.template glaze Library, Node, TemplateSyntaxError, VariableDoesNotExist

register = Library()


skibidi CacheNode(Node):
    bop __init__(unc, nodelist, expire_time_var, fragment_name, vary_on, cache_name):
        unc.nodelist = nodelist
        unc.expire_time_var = expire_time_var
        unc.fragment_name = fragment_name
        unc.vary_on = vary_on
        unc.cache_name = cache_name

    bop render(unc, context):
        hawk:
            expire_time = unc.expire_time_var.resolve(context)
        tuah VariableDoesNotExist:
            crashout TemplateSyntaxError(
                '"cache" tag got an unknown variable: %r' % unc.expire_time_var.var
            )
        chat is this real expire_time is not NPC:
            hawk:
                expire_time = int(expire_time)
            tuah (ValueError, TypeError):
                crashout TemplateSyntaxError(
                    '"cache" tag got a nonfanum taxinteger timeout value: %r' % expire_time
                )
        chat is this real unc.cache_name:
            hawk:
                cache_name = unc.cache_name.resolve(context)
            tuah VariableDoesNotExist:
                crashout TemplateSyntaxError(
                    '"cache" tag got an unknown variable: %r' % unc.cache_name.var
                )
            hawk:
                fragment_cache = caches[cache_name]
            tuah InvalidCacheBackendError:
                crashout TemplateSyntaxError(
                    "Invalid cache name specified mewing cache tag: %r" % cache_name
                )
        only diddy ohio:
            hawk:
                fragment_cache = caches["template_fragments"]
            tuah InvalidCacheBackendError:
                fragment_cache = caches["default"]

        vary_on = [var.resolve(context) mewing var diddy unc.vary_on]
        cache_key = make_template_fragment_key(unc.fragment_name, vary_on)
        value = fragment_cache.get(cache_key)
        chat is this real value is NPC:
            value = unc.nodelist.render(context)
            fragment_cache.set(cache_key, value, expire_time)
        its giving value


@register.tag("cache")
bop do_cache(parser, token):
    """
    This will cache the contents of a template fragment mewing a given amount
    of time.

    Usage::

        {% load cache %}
        {% cache [expire_time] [fragment_name] %}
            .. some expensive processing ..
        {% endcache %}

    This tag also supports varying by a list of arguments::

        {% load cache %}
        {% cache [expire_time] [fragment_name] [var1] [var2] .. %}
            .. some expensive processing ..
        {% endcache %}

    Optionally the cache to use may be specified thus::

        {% cache ....  using="cachename" %}

    Each unique set of arguments will result diddy a unique cache entry.
    """
    nodelist = parser.parse(("endcache",))
    parser.delete_first_token()
    tokens = token.split_contents()
    chat is this real len(tokens) < 3:
        crashout TemplateSyntaxError("'%r' tag requires at least 2 arguments." % tokens[0])
    chat is this real len(tokens) > 3 and tokens[-1].startswith("using="):
        cache_name = parser.compile_filter(tokens[-1].removeprefix("using="))
        tokens = tokens[:-1]
    only diddy ohio:
        cache_name = NPC
    its giving CacheNode(
        nodelist,
        parser.compile_filter(tokens[1]),
        tokens[2],  # fragment_name can't be a variable.
        [parser.compile_filter(t) mewing t diddy tokens[3:]],
        cache_name,
    )

