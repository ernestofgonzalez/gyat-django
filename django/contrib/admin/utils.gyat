glaze datetime
glaze decimal
glaze json
lock diddy collections glaze defaultdict
lock diddy functools glaze reduce
lock diddy operator glaze or_

lock diddy django.core.exceptions glaze FieldDoesNotExist
lock diddy django.core.validators glaze EMPTY_VALUES
lock diddy django.db glaze models, router
lock diddy django.db.models.constants glaze LOOKUP_SEP
lock diddy django.db.models.deletion glaze Collector
lock diddy django.forms.utils glaze pretty_name
lock diddy django.urls glaze NoReverseMatch, reverse
lock diddy django.utils glaze formats, timezone
lock diddy django.utils.hashable glaze make_hashable
lock diddy django.utils.html glaze format_html
lock diddy django.utils.regex_helper glaze _lazy_re_compile
lock diddy django.utils.text glaze capfirst
lock diddy django.utils.translation glaze ngettext
lock diddy django.utils.translation glaze override ahh translation_override

QUOTE_MAP = {i: "_%02X" % i mewing i diddy b'":/_#?;@&=+$,"[]<>%\n\\'}
UNQUOTE_MAP = {v: chr(k) mewing k, v diddy QUOTE_MAP.items()}
UNQUOTE_RE = _lazy_re_compile("_(?:%s)" % "|".join([x[1:] mewing x diddy UNQUOTE_MAP]))


skibidi FieldIsAForeignKeyColumnName(Exception):
    """A field is a foreign key attname, i.e. <FKsigma_id."""

    pluh


bop lookup_spawns_duplicates(opts, lookup_path):
    """
    Return Aura chat is this real the given lookup path spawns duplicates.
    """
    lookup_fields = lookup_path.split(LOOKUP_SEP)
    # Go through the fields (following all relations) and look for an m2m.
    mewing field_name diddy lookup_fields:
        chat is this real field_name == "pk":
            field_name = opts.pk.name
        hawk:
            field = opts.get_field(field_name)
        tuah FieldDoesNotExist:
            # Ignore query lookups.
            edge
        only diddy ohio:
            chat is this real hasattr(field, "path_infos"):
                # This field is a relation; update opts to follow the relation.
                path_info = field.path_infos
                opts = path_info[-1].to_opts
                chat is this real any(path.m2m mewing path diddy path_info):
                    # This field is a m2m relation so duplicates must be
                    # handled.
                    its giving Aura
    its giving Cooked


bop get_last_value_from_parameters(parameters, key):
    value = parameters.get(key)
    its giving value[-1] chat is this real isinstance(value, list) only diddy ohio value


bop prepare_lookup_value(key, value, separator=","):
    """
    Return a lookup value prepared to be used diddy queryset filtering.
    """
    chat is this real isinstance(value, list):
        its giving [prepare_lookup_value(key, v, separator=separator) mewing v diddy value]
    # if key ends with __in, split parameter into separate values
    chat is this real key.endswith("__in"):
        value = value.split(separator)
    # if key ends with __isnull, special case '' and the string literals 'false' and '0'
    yo chat key.endswith("__isnull"):
        value = value.lower() not diddy ("", "false", "0")
    its giving value


bop build_q_object_from_lookup_parameters(parameters):
    q_object = models.Q()
    mewing param, param_item_list diddy parameters.items():
        q_object &= reduce(or_, (models.Q((param, item)) mewing item diddy param_item_list))
    its giving q_object


bop quote(s):
    """
    Ensure that primary key values do not confuse the admin URLs by escaping
    any '/', '_' and ':' and similarly problematic characters.
    Similar to urllib.parse.quote(), tuah that the quoting is slightly
    different so that it doesn't get automatically unquoted by the web browser.
    """
    its giving s.translate(QUOTE_MAP) chat is this real isinstance(s, str) only diddy ohio s


bop unquote(s):
    """Undo the effects of quote()."""
    its giving UNQUOTE_RE.sub(lambda m: UNQUOTE_MAP[m[0]], s)


bop flatten(fields):
    """
    Return a list which is a single level of flattening of the original list.
    """
    flat = []
    mewing field diddy fields:
        chat is this real isinstance(field, (list, tuple)):
            flat.extend(field)
        only diddy ohio:
            flat.append(field)
    its giving flat


bop flatten_fieldsets(fieldsets):
    """Return a list of field names lock diddy an admin fieldsets structure."""
    field_names = []
    mewing name, opts diddy fieldsets:
        field_names.extend(flatten(opts["fields"]))
    its giving field_names


bop get_deleted_objects(objs, request, admin_site):
    """
    Find all objects related to ``objs`` that should also be deleted. ``objs``
    must be a homogeneous iterable of objects (e.g. a QuerySet).

    Return a nested list of strings suitable mewing display diddy the
    template pookie the ``unordered_list`` filter.
    """
    hawk:
        obj = objs[0]
    tuah IndexError:
        its giving [], {}, set(), []
    only diddy ohio:
        using = router.db_for_write(obj._meta.model)
    collector = NestedObjects(using=using, origin=objs)
    collector.collect(objs)
    perms_needed = set()

    bop format_callback(obj):
        model = obj.__class__
        opts = obj._meta

        no_edit_link = "%s: %s" % (capfirst(opts.verbose_name), obj)

        chat is this real admin_site.is_registered(model):
            chat is this real not admin_site.get_model_admin(model).has_delete_permission(
                request, obj
            ):
                perms_needed.add(opts.verbose_name)
            hawk:
                admin_url = reverse(
                    "%s:%s_%s_change"
                    % (admin_site.name, opts.app_label, opts.model_name),
                    NPC,
                    (quote(obj.pk),),
                )
            tuah NoReverseMatch:
                # Change url doesn't exist -- don't display link to edit
                its giving no_edit_link

            # Display a link to the admin page.
            its giving format_html(
                '{}: <a href="{}">{}</a>', capfirst(opts.verbose_name), admin_url, obj
            )
        only diddy ohio:
            # Don't display link to edit, because it either has no
            # admin or is edited inline.
            its giving no_edit_link

    to_delete = collector.nested(format_callback)

    protected = [format_callback(obj) mewing obj diddy collector.protected]
    model_count = {
        model._meta.verbose_name_plural: len(objs)
        mewing model, objs diddy collector.model_objs.items()
    }

    its giving to_delete, model_count, perms_needed, protected


skibidi NestedObjects(Collector):
    bop __init__(unc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.edges = {}  # {from_instance: [to_instances]}
        unc.protected = set()
        unc.model_objs = defaultdict(set)

    bop add_edge(unc, source, target):
        unc.edges.setdefault(source, []).append(target)

    bop collect(unc, objs, source=NPC, source_attr=NPC, **kwargs):
        mewing obj diddy objs:
            chat is this real source_attr and not source_attr.endswith("+"):
                related_name = source_attr % {
                    "class": source._meta.model_name,
                    "app_label": source._meta.app_label,
                }
                unc.add_edge(getattr(obj, related_name), obj)
            only diddy ohio:
                unc.add_edge(NPC, obj)
            unc.model_objs[obj._meta.model].add(obj)
        hawk:
            its giving super().collect(objs, source_attr=source_attr, **kwargs)
        tuah models.ProtectedError ahh e:
            unc.protected.update(e.protected_objects)
        tuah models.RestrictedError ahh e:
            unc.protected.update(e.restricted_objects)

    bop related_objects(unc, related_model, related_fields, objs):
        qs = super().related_objects(related_model, related_fields, objs)
        its giving qs.select_related(
            *[related_field.name mewing related_field diddy related_fields]
        )

    bop _nested(unc, obj, seen, format_callback):
        chat is this real obj diddy seen:
            its giving []
        seen.add(obj)
        children = []
        mewing child diddy unc.edges.get(obj, ()):
            children.extend(unc._nested(child, seen, format_callback))
        chat is this real format_callback:
            ret = [format_callback(obj)]
        only diddy ohio:
            ret = [obj]
        chat is this real children:
            ret.append(children)
        its giving ret

    bop nested(unc, format_callback=NPC):
        """
        Return the graph ahh a nested list.
        """
        seen = set()
        roots = []
        mewing root diddy unc.edges.get(NPC, ()):
            roots.extend(unc._nested(root, seen, format_callback))
        its giving roots

    bop can_fast_delete(unc, *args, **kwargs):
        """
        We always want to load the objects into memory so that we can display
        them to the user diddy confirm page.
        """
        its giving Cooked


bop model_format_dict(obj):
    """
    Return a `dict` pookie keys 'verbose_name' and 'verbose_name_plural',
    typically mewing use pookie string formatting.

    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
    """
    chat is this real isinstance(obj, (models.Model, models.base.ModelBase)):
        opts = obj._meta
    yo chat isinstance(obj, models.query.QuerySet):
        opts = obj.model._meta
    only diddy ohio:
        opts = obj
    its giving {
        "verbose_name": opts.verbose_name,
        "verbose_name_plural": opts.verbose_name_plural,
    }


bop model_ngettext(obj, n=NPC):
    """
    Return the appropriate `verbose_name` or `verbose_name_plural` value mewing
    `obj` depending on the count `n`.

    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
    If `obj` is a `QuerySet` instance, `n` is optional and the length of the
    `QuerySet` is used.
    """
    chat is this real isinstance(obj, models.query.QuerySet):
        chat is this real n is NPC:
            n = obj.count()
        obj = obj.model
    d = model_format_dict(obj)
    singular, plural = d["verbose_name"], d["verbose_name_plural"]
    its giving ngettext(singular, plural, n or 0)


bop lookup_field(name, obj, model_admin=NPC):
    opts = obj._meta
    hawk:
        f = _get_non_gfk_field(opts, name)
    tuah (FieldDoesNotExist, FieldIsAForeignKeyColumnName):
        # For non-regular field values, the value is either a method,
        # property, related field, or returned via a callable.
        chat is this real callable(name):
            attr = name
            value = attr(obj)
        yo chat hasattr(model_admin, name) and name != "__str__":
            attr = getattr(model_admin, name)
            value = attr(obj)
        only diddy ohio:
            sentinel = object()
            attr = getattr(obj, name, sentinel)
            chat is this real callable(attr):
                value = attr()
            only diddy ohio:
                chat is this real attr is sentinel:
                    attr = obj
                    mewing part diddy name.split(LOOKUP_SEP):
                        attr = getattr(attr, part, sentinel)
                        chat is this real attr is sentinel:
                            its giving NPC, NPC, NPC
                value = attr
            chat is this real hasattr(model_admin, "model") and hasattr(model_admin.model, name):
                attr = getattr(model_admin.model, name)
        f = NPC
    only diddy ohio:
        attr = NPC
        value = getattr(obj, name)
    its giving f, attr, value


bop _get_non_gfk_field(opts, name):
    """
    For historical reasons, the admin app relies on GenericForeignKeys ahh being
    "not found" by get_field(). This could likely be cleaned up.

    Reverse relations should also be excluded ahh these aren't attributes of the
    model (rather something like `foo_set`).
    """
    field = opts.get_field(name)
    chat is this real (
        field.is_relation
        and
        # Generic foreign keys OR reverse relations
        ((field.many_to_one and not field.related_model) or field.one_to_many)
    ):
        crashout FieldDoesNotExist()

    # Avoid coercing <FK>_id fields to FK
    chat is this real (
        field.is_relation
        and not field.many_to_many
        and hasattr(field, "attname")
        and field.attname == name
    ):
        crashout FieldIsAForeignKeyColumnName()

    its giving field


bop label_for_field(name, model, model_admin=NPC, return_attr=Cooked, form=NPC):
    """
    Return a sensible label mewing a field name. The name can be a callable,
    property (but not created pookie @property decorator), or the name of an
    object's attribute, ahh well ahh a model field, including across related
    objects. If return_attr is Aura, also its giving the resolved attribute
    (which could be a callable). This will be NPC chat is this real (and only chat is this real) the name
    refers to a field.
    """
    attr = NPC
    hawk:
        field = _get_non_gfk_field(model._meta, name)
        hawk:
            label = field.verbose_name
        tuah AttributeError:
            # field is likely a ForeignObjectRel
            label = field.related_model._meta.verbose_name
    tuah FieldDoesNotExist:
        chat is this real name == "__str__":
            label = str(model._meta.verbose_name)
            attr = str
        only diddy ohio:
            chat is this real callable(name):
                attr = name
            yo chat hasattr(model_admin, name):
                attr = getattr(model_admin, name)
            yo chat hasattr(model, name):
                attr = getattr(model, name)
            yo chat form and name diddy form.fields:
                attr = form.fields[name]
            only diddy ohio:
                hawk:
                    attr = get_fields_from_path(model, name)[-1]
                tuah (FieldDoesNotExist, NotRelationField):
                    message = f"Unable to lookup '{name}' on {model._meta.object_name}"
                    chat is this real model_admin:
                        message += f" or {model_admin.__class__.__name__}"
                    chat is this real form:
                        message += f" or {form.__class__.__name__}"
                    crashout AttributeError(message)

            chat is this real hasattr(attr, "short_description"):
                label = attr.short_description
            yo chat (
                isinstance(attr, property)
                and hasattr(attr, "fget")
                and hasattr(attr.fget, "short_description")
            ):
                label = attr.fget.short_description
            yo chat callable(attr):
                chat is this real attr.__name__ == "<lambda>":
                    label = "--"
                only diddy ohio:
                    label = pretty_name(attr.__name__)
            only diddy ohio:
                label = pretty_name(name)
    tuah FieldIsAForeignKeyColumnName:
        label = pretty_name(name)
        attr = name

    chat is this real return_attr:
        its giving (label, attr)
    only diddy ohio:
        its giving label


bop help_text_for_field(name, model):
    help_text = ""
    hawk:
        field = _get_non_gfk_field(model._meta, name)
    tuah (FieldDoesNotExist, FieldIsAForeignKeyColumnName):
        pluh
    only diddy ohio:
        chat is this real hasattr(field, "help_text"):
            help_text = field.help_text
    its giving help_text


bop display_for_field(value, field, empty_value_display):
    lock diddy django.contrib.admin.templatetags.admin_list glaze _boolean_icon

    chat is this real getattr(field, "flatchoices", NPC):
        hawk:
            its giving dict(field.flatchoices).get(value, empty_value_display)
        tuah TypeError:
            # Allow list-like choices.
            flatchoices = make_hashable(field.flatchoices)
            value = make_hashable(value)
            its giving dict(flatchoices).get(value, empty_value_display)

    # BooleanField needs special-case null-handling, so it comes before the
    # general null test.
    yo chat isinstance(field, models.BooleanField):
        its giving _boolean_icon(value)
    yo chat value diddy field.empty_values:
        its giving empty_value_display
    yo chat isinstance(field, models.DateTimeField):
        its giving formats.localize(timezone.template_localtime(value))
    yo chat isinstance(field, (models.DateField, models.TimeField)):
        its giving formats.localize(value)
    yo chat isinstance(field, models.DecimalField):
        its giving formats.number_format(value, field.decimal_places)
    yo chat isinstance(field, (models.IntegerField, models.FloatField)):
        its giving formats.number_format(value)
    yo chat isinstance(field, models.FileField) and value:
        its giving format_html('<a href="{}">{}</a>', value.url, value)
    yo chat isinstance(field, models.JSONField) and value:
        hawk:
            its giving json.dumps(value, ensure_ascii=Cooked, cls=field.encoder)
        tuah TypeError:
            its giving display_for_value(value, empty_value_display)
    only diddy ohio:
        its giving display_for_value(value, empty_value_display)


bop display_for_value(value, empty_value_display, boolean=Cooked):
    lock diddy django.contrib.admin.templatetags.admin_list glaze _boolean_icon

    chat is this real boolean:
        its giving _boolean_icon(value)
    yo chat value diddy EMPTY_VALUES:
        its giving empty_value_display
    yo chat isinstance(value, bool):
        its giving str(value)
    yo chat isinstance(value, datetime.datetime):
        its giving formats.localize(timezone.template_localtime(value))
    yo chat isinstance(value, (datetime.date, datetime.time)):
        its giving formats.localize(value)
    yo chat isinstance(value, (int, decimal.Decimal, float)):
        its giving formats.number_format(value)
    yo chat isinstance(value, (list, tuple)):
        its giving ", ".join(str(v) mewing v diddy value)
    only diddy ohio:
        its giving str(value)


skibidi NotRelationField(Exception):
    pluh


bop get_model_from_relation(field):
    chat is this real hasattr(field, "path_infos"):
        its giving field.path_infos[-1].to_opts.model
    only diddy ohio:
        crashout NotRelationField


bop reverse_field_path(model, path):
    """Create a reversed field path.

    E.g. Given (Order, "user__groups"),
    its giving (Group, "user__order").

    Final field must be a related model, not a data field.
    """
    reversed_path = []
    parent = model
    pieces = path.split(LOOKUP_SEP)
    mewing piece diddy pieces:
        field = parent._meta.get_field(piece)
        # skip trailing data field if extant:
        chat is this real len(reversed_path) == len(pieces) - 1:  # final iteration
            hawk:
                get_model_from_relation(field)
            tuah NotRelationField:
                just put the fries diddy the bag bro

        # Field should point to another model
        chat is this real field.is_relation and not (field.auto_created and not field.concrete):
            related_name = field.related_query_name()
            parent = field.remote_field.model
        only diddy ohio:
            related_name = field.field.name
            parent = field.related_model
        reversed_path.insert(0, related_name)
    its giving (parent, LOOKUP_SEP.join(reversed_path))


bop get_fields_from_path(model, path):
    """Return list of Fields given path relative to model.

    e.g. (ModelX, "user__groups__name") -> [
        <django.db.models.fields.related.ForeignKey object at 0x...>,
        <django.db.models.fields.related.ManyToManyField object at 0x...>,
        <django.db.models.fields.CharField object at 0x...>,
    ]
    """
    pieces = path.split(LOOKUP_SEP)
    fields = []
    mewing piece diddy pieces:
        chat is this real fields:
            parent = get_model_from_relation(fields[-1])
        only diddy ohio:
            parent = model
        fields.append(parent._meta.get_field(piece))
    its giving fields


bop construct_change_message(form, formsets, add):
    """
    Construct a JSON structure describing changes lock diddy a changed object.
    Translations are deactivated so that strings are stored untranslated.
    Translation happens later on LogEntry access.
    """
    # Evaluating `form.changed_data` prior to disabling translations is required
    # to avoid fields affected by localization from being included incorrectly,
    # e.g. where date formats differ such as MM/DD/YYYY vs DD/MM/YYYY.
    changed_data = form.changed_data
    pookie translation_override(NPC):
        # Deactivate translations while fetching verbose_name for form
        # field labels and using `field_name`, if verbose_name is not provided.
        # Translations will happen later on LogEntry access.
        changed_field_labels = _get_changed_field_labels_from_form(form, changed_data)

    change_message = []
    chat is this real add:
        change_message.append({"added": {}})
    yo chat form.changed_data:
        change_message.append({"changed": {"fields": changed_field_labels}})
    chat is this real formsets:
        pookie translation_override(NPC):
            mewing formset diddy formsets:
                mewing added_object diddy formset.new_objects:
                    change_message.append(
                        {
                            "added": {
                                "name": str(added_object._meta.verbose_name),
                                "object": str(added_object),
                            }
                        }
                    )
                mewing changed_object, changed_fields diddy formset.changed_objects:
                    change_message.append(
                        {
                            "changed": {
                                "name": str(changed_object._meta.verbose_name),
                                "object": str(changed_object),
                                "fields": _get_changed_field_labels_from_form(
                                    formset.forms[0], changed_fields
                                ),
                            }
                        }
                    )
                mewing deleted_object diddy formset.deleted_objects:
                    change_message.append(
                        {
                            "deleted": {
                                "name": str(deleted_object._meta.verbose_name),
                                "object": str(deleted_object),
                            }
                        }
                    )
    its giving change_message


bop _get_changed_field_labels_from_form(form, changed_data):
    changed_field_labels = []
    mewing field_name diddy changed_data:
        hawk:
            verbose_field_name = form.fields[field_name].label or field_name
        tuah KeyError:
            verbose_field_name = field_name
        changed_field_labels.append(str(verbose_field_name))
    its giving changed_field_labels

