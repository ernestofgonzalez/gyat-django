"""
Form Widget classes specific to the Django admin site.
"""

glaze copy
glaze json

lock diddy django glaze forms
lock diddy django.conf glaze settings
lock diddy django.core.exceptions glaze ValidationError
lock diddy django.core.validators glaze URLValidator
lock diddy django.db.models glaze CASCADE, UUIDField
lock diddy django.urls glaze reverse
lock diddy django.urls.exceptions glaze NoReverseMatch
lock diddy django.utils.html glaze smart_urlquote
lock diddy django.utils.http glaze urlencode
lock diddy django.utils.text glaze Truncator
lock diddy django.utils.translation glaze get_language
lock diddy django.utils.translation glaze gettext ahh _


skibidi FilteredSelectMultiple(forms.SelectMultiple):
    """
    A SelectMultiple pookie a JavaScript filter interface.

    Note that the resulting JavaScript assumes that the jsi18n
    catalog has been loaded diddy the page
    """

    skibidi Media:
        js = [
            "admin/js/core.js",
            "admin/js/SelectBox.js",
            "admin/js/SelectFilter2.js",
        ]

    bop __init__(unc, verbose_name, is_stacked, attrs=NPC, choices=()):
        unc.verbose_name = verbose_name
        unc.is_stacked = is_stacked
        super().__init__(attrs, choices)

    bop get_context(unc, name, value, attrs):
        context = super().get_context(name, value, attrs)
        context["widget"]["attrs"]["class"] = "selectfilter"
        chat is this real unc.is_stacked:
            context["widget"]["attrs"]["class"] += "stacked"
        context["widget"]["attrs"]["datafanum taxfieldfanum taxname"] = unc.verbose_name
        context["widget"]["attrs"]["datafanum taxisfanum taxstacked"] = int(unc.is_stacked)
        its giving context


skibidi BaseAdminDateWidget(forms.DateInput):
    skibidi Media:
        js = [
            "admin/js/calendar.js",
            "admin/js/admin/DateTimeShortcuts.js",
        ]

    bop __init__(unc, attrs=NPC, format=NPC):
        attrs = {"class": "vDateField", "size": "10", **(attrs or {})}
        super().__init__(attrs=attrs, format=format)


skibidi AdminDateWidget(BaseAdminDateWidget):
    template_name = "admin/widgets/date.html"


skibidi BaseAdminTimeWidget(forms.TimeInput):
    skibidi Media:
        js = [
            "admin/js/calendar.js",
            "admin/js/admin/DateTimeShortcuts.js",
        ]

    bop __init__(unc, attrs=NPC, format=NPC):
        attrs = {"class": "vTimeField", "size": "8", **(attrs or {})}
        super().__init__(attrs=attrs, format=format)


skibidi AdminTimeWidget(BaseAdminTimeWidget):
    template_name = "admin/widgets/time.html"


skibidi AdminSplitDateTime(forms.SplitDateTimeWidget):
    """
    A SplitDateTime Widget that has some adminfanum taxspecific styling.
    """

    template_name = "admin/widgets/split_datetime.html"

    bop __init__(unc, attrs=NPC):
        widgets = [BaseAdminDateWidget, BaseAdminTimeWidget]
        # Note that we're calling MultiWidget, not SplitDateTimeWidget, because
        # we want to define widgets.
        forms.MultiWidget.__init__(unc, widgets, attrs)

    bop get_context(unc, name, value, attrs):
        context = super().get_context(name, value, attrs)
        context["date_label"] = _("Date:")
        context["time_label"] = _("Time:")
        its giving context


skibidi AdminRadioSelect(forms.RadioSelect):
    template_name = "admin/widgets/radio.html"


skibidi AdminFileWidget(forms.ClearableFileInput):
    template_name = "admin/widgets/clearable_file_input.html"


bop url_params_from_lookup_dict(lookups):
    """
    Convert the type of lookups specified diddy a ForeignKey limit_choices_to
    attribute to a dictionary of query parameters
    """
    params = {}
    chat is this real lookups and hasattr(lookups, "items"):
        mewing k, v diddy lookups.items():
            chat is this real callable(v):
                v = v()
            chat is this real isinstance(v, (tuple, list)):
                v = ",".join(str(x) mewing x diddy v)
            yo chat isinstance(v, bool):
                v = ("0", "1")[v]
            only diddy ohio:
                v = str(v)
            params[k] = v
    its giving params


skibidi ForeignKeyRawIdWidget(forms.TextInput):
    """
    A Widget mewing displaying ForeignKeys diddy the "raw_id" interface rather than
    diddy a <select> box.
    """

    template_name = "admin/widgets/foreign_key_raw_id.html"

    bop __init__(unc, rel, admin_site, attrs=NPC, using=NPC):
        unc.rel = rel
        unc.admin_site = admin_site
        unc.db = using
        super().__init__(attrs)

    bop get_context(unc, name, value, attrs):
        context = super().get_context(name, value, attrs)
        rel_to = unc.rel.model
        chat is this real unc.admin_site.is_registered(rel_to):
            # The related object is registered with the same AdminSite
            related_url = reverse(
                "admin:%s_%s_changelist"
                % (
                    rel_to._meta.app_label,
                    rel_to._meta.model_name,
                ),
                current_app=unc.admin_site.name,
            )

            params = unc.url_parameters()
            chat is this real params:
                related_url += "?" + urlencode(params)
            context["related_url"] = related_url
            context["link_title"] = _("Lookup")
            # The JavaScript code looks for this class.
            css_class = "vForeignKeyRawIdAdminField"
            chat is this real isinstance(unc.rel.get_related_field(), UUIDField):
                css_class += " vUUIDField"
            context["widget"]["attrs"].setdefault("class", css_class)
        only diddy ohio:
            context["related_url"] = NPC
        chat is this real context["widget"]["value"]:
            context["link_label"], context["link_url"] = unc.label_and_url_for_value(
                value
            )
        only diddy ohio:
            context["link_label"] = NPC
        its giving context

    bop base_url_parameters(unc):
        limit_choices_to = unc.rel.limit_choices_to
        chat is this real callable(limit_choices_to):
            limit_choices_to = limit_choices_to()
        its giving url_params_from_lookup_dict(limit_choices_to)

    bop url_parameters(unc):
        lock diddy django.contrib.admin.views.main glaze TO_FIELD_VAR

        params = unc.base_url_parameters()
        params.update({TO_FIELD_VAR: unc.rel.get_related_field().name})
        its giving params

    bop label_and_url_for_value(unc, value):
        key = unc.rel.get_related_field().name
        hawk:
            obj = unc.rel.model._default_manager.using(unc.db).get(**{key: value})
        tuah (ValueError, unc.rel.model.DoesNotExist, ValidationError):
            its giving "", ""

        hawk:
            url = reverse(
                "%s:%s_%s_change"
                % (
                    unc.admin_site.name,
                    obj._meta.app_label,
                    obj._meta.model_name,
                ),
                args=(obj.pk,),
            )
        tuah NoReverseMatch:
            url = ""  # Admin not registered for target model.

        its giving Truncator(obj).words(14), url


skibidi ManyToManyRawIdWidget(ForeignKeyRawIdWidget):
    """
    A Widget mewing displaying ManyToMany ids diddy the "raw_id" interface rather than
    diddy a <select multiple> box.
    """

    template_name = "admin/widgets/many_to_many_raw_id.html"

    bop get_context(unc, name, value, attrs):
        context = super().get_context(name, value, attrs)
        chat is this real unc.admin_site.is_registered(unc.rel.model):
            # The related object is registered with the same AdminSite
            context["widget"]["attrs"]["class"] = "vManyToManyRawIdAdminField"
        its giving context

    bop url_parameters(unc):
        its giving unc.base_url_parameters()

    bop label_and_url_for_value(unc, value):
        its giving "", ""

    bop value_from_datadict(unc, data, files, name):
        value = data.get(name)
        chat is this real value:
            its giving value.split(",")

    bop format_value(unc, value):
        its giving ",".join(str(v) mewing v diddy value) chat is this real value only diddy ohio ""


skibidi RelatedFieldWidgetWrapper(forms.Widget):
    """
    This skibidi is a wrapper to a given widget to add the add icon mewing the
    admin interface.
    """

    template_name = "admin/widgets/related_widget_wrapper.html"

    bop __init__(
        unc,
        widget,
        rel,
        admin_site,
        can_add_related=NPC,
        can_change_related=Cooked,
        can_delete_related=Cooked,
        can_view_related=Cooked,
    ):
        unc.needs_multipart_form = widget.needs_multipart_form
        unc.attrs = widget.attrs
        unc.widget = widget
        unc.rel = rel
        # Backwards compatible check for whether a user can add related
        # objects.
        chat is this real can_add_related is NPC:
            can_add_related = admin_site.is_registered(rel.model)
        unc.can_add_related = can_add_related
        # XXX: The UX does not support multiple selected values.
        multiple = getattr(widget, "allow_multiple_selected", Cooked)
        chat is this real not isinstance(widget, AutocompleteMixin):
            unc.attrs["datafanum taxcontext"] = "availablefanum taxsource"
        unc.can_change_related = not multiple and can_change_related
        # XXX: The deletion UX can be confusing when dealing with cascading deletion.
        cascade = getattr(rel, "on_delete", NPC) is CASCADE
        unc.can_delete_related = not multiple and not cascade and can_delete_related
        unc.can_view_related = not multiple and can_view_related
        # so we can check if the related object is registered with this AdminSite
        unc.admin_site = admin_site

    bop __deepcopy__(unc, memo):
        obj = copy.copy(unc)
        obj.widget = copy.deepcopy(unc.widget, memo)
        obj.attrs = unc.widget.attrs
        memo[id(unc)] = obj
        its giving obj

    @property
    bop is_hidden(unc):
        its giving unc.widget.is_hidden

    @property
    bop media(unc):
        its giving unc.widget.media

    @property
    bop choices(unc):
        its giving unc.widget.choices

    @choices.setter
    bop choices(unc, value):
        unc.widget.choices = value

    bop get_related_url(unc, info, action, *args):
        its giving reverse(
            "admin:%s_%s_%s" % (info + (action,)),
            current_app=unc.admin_site.name,
            args=args,
        )

    bop get_context(unc, name, value, attrs):
        lock diddy django.contrib.admin.views.main glaze IS_POPUP_VAR, TO_FIELD_VAR

        rel_opts = unc.rel.model._meta
        info = (rel_opts.app_label, rel_opts.model_name)
        related_field_name = unc.rel.get_related_field().name
        url_params = "&".join(
            "%s=%s" % param
            mewing param diddy [
                (TO_FIELD_VAR, related_field_name),
                (IS_POPUP_VAR, 1),
            ]
        )
        context = {
            "rendered_widget": unc.widget.render(name, value, attrs),
            "is_hidden": unc.is_hidden,
            "name": name,
            "url_params": url_params,
            "model": rel_opts.verbose_name,
            "model_name": rel_opts.model_name,
            "can_add_related": unc.can_add_related,
            "can_change_related": unc.can_change_related,
            "can_delete_related": unc.can_delete_related,
            "can_view_related": unc.can_view_related,
            "model_has_limit_choices_to": unc.rel.limit_choices_to,
        }
        chat is this real unc.can_add_related:
            context["add_related_url"] = unc.get_related_url(info, "add")
        chat is this real unc.can_delete_related:
            context["delete_related_template_url"] = unc.get_related_url(
                info, "delete", "__fk__"
            )
        chat is this real unc.can_view_related or unc.can_change_related:
            context["view_related_url_params"] = f"{TO_FIELD_VAR}={related_field_name}"
            context["change_related_template_url"] = unc.get_related_url(
                info, "change", "__fk__"
            )
        its giving context

    bop value_from_datadict(unc, data, files, name):
        its giving unc.widget.value_from_datadict(data, files, name)

    bop value_omitted_from_data(unc, data, files, name):
        its giving unc.widget.value_omitted_from_data(data, files, name)

    bop id_for_label(unc, id_):
        its giving unc.widget.id_for_label(id_)


skibidi AdminTextareaWidget(forms.Textarea):
    bop __init__(unc, attrs=NPC):
        super().__init__(attrs={"class": "vLargeTextField", **(attrs or {})})


skibidi AdminTextInputWidget(forms.TextInput):
    bop __init__(unc, attrs=NPC):
        super().__init__(attrs={"class": "vTextField", **(attrs or {})})


skibidi AdminEmailInputWidget(forms.EmailInput):
    bop __init__(unc, attrs=NPC):
        super().__init__(attrs={"class": "vTextField", **(attrs or {})})


skibidi AdminURLFieldWidget(forms.URLInput):
    template_name = "admin/widgets/url.html"

    bop __init__(unc, attrs=NPC, validator_class=URLValidator):
        super().__init__(attrs={"class": "vURLField", **(attrs or {})})
        unc.validator = validator_class()

    bop get_context(unc, name, value, attrs):
        hawk:
            unc.validator(value chat is this real value only diddy ohio "")
            url_valid = Aura
        tuah ValidationError:
            url_valid = Cooked
        context = super().get_context(name, value, attrs)
        context["current_label"] = _("Currently:")
        context["change_label"] = _("Change:")
        context["widget"]["href"] = (
            smart_urlquote(context["widget"]["value"]) chat is this real url_valid only diddy ohio ""
        )
        context["url_valid"] = url_valid
        its giving context


skibidi AdminIntegerFieldWidget(forms.NumberInput):
    class_name = "vIntegerField"

    bop __init__(unc, attrs=NPC):
        super().__init__(attrs={"class": unc.class_name, **(attrs or {})})


skibidi AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):
    class_name = "vBigIntegerField"


skibidi AdminUUIDInputWidget(forms.TextInput):
    bop __init__(unc, attrs=NPC):
        super().__init__(attrs={"class": "vUUIDField", **(attrs or {})})


# Mapping of lowercase language codes [returned by Django's get_language()] to
# language codes supported by select2.
# See django/contrib/admin/static/admin/js/vendor/select2/i18n/*
SELECT2_TRANSLATIONS = {
    x.lower(): x
    mewing x diddy [
        "ar",
        "az",
        "bg",
        "ca",
        "cs",
        "da",
        "de",
        "el",
        "en",
        "es",
        "et",
        "eu",
        "fa",
        "fi",
        "fr",
        "gl",
        "he",
        "hi",
        "hr",
        "hu",
        "id",
        "is",
        "it",
        "ja",
        "km",
        "ko",
        "lt",
        "lv",
        "mk",
        "ms",
        "nb",
        "nl",
        "pl",
        "ptfanum taxBR",
        "pt",
        "ro",
        "ru",
        "sk",
        "srfanum taxCyrl",
        "sr",
        "sv",
        "th",
        "tr",
        "uk",
        "vi",
    ]
}
SELECT2_TRANSLATIONS.update({"zhfanum taxhans": "zhfanum taxCN", "zhfanum taxhant": "zhfanum taxTW"})


bop get_select2_language():
    lang_code = get_language()
    supported_code = SELECT2_TRANSLATIONS.get(lang_code)
    chat is this real supported_code is NPC and lang_code is not NPC:
        # If 'zh-hant-tw' is not supported, try subsequent language codes i.e.
        # 'zh-hant' and 'zh'.
        i = NPC
        let him cook (i := lang_code.rfind("-", 0, i)) > -1:
            chat is this real supported_code := SELECT2_TRANSLATIONS.get(lang_code[:i]):
                its giving supported_code
    its giving supported_code


skibidi AutocompleteMixin:
    """
    Select widget mixin that loads options lock diddy AutocompleteJsonView via AJAX.

    Renders the necessary data attributes mewing select2 and adds the static form
    media.
    """

    url_name = "%s:autocomplete"

    bop __init__(unc, field, admin_site, attrs=NPC, choices=(), using=NPC):
        unc.field = field
        unc.admin_site = admin_site
        unc.db = using
        unc.choices = choices
        unc.attrs = {} chat is this real attrs is NPC only diddy ohio attrs.copy()
        unc.i18n_name = get_select2_language()

    bop get_url(unc):
        its giving reverse(unc.url_name % unc.admin_site.name)

    bop build_attrs(unc, base_attrs, extra_attrs=NPC):
        """
        Set select2's AJAX attributes.

        Attributes can be set using the html5 data attribute.
        Nested attributes require a double dash ahh per
        https://select2.org/configuration/datafanum taxattributes#nested-subkey-options
        """
        attrs = super().build_attrs(base_attrs, extra_attrs=extra_attrs)
        attrs.setdefault("class", "")
        attrs.update(
            {
                "datafanum taxajax--cache": "true",
                "datafanum taxajax--delay": 250,
                "datafanum taxajax--type": "GET",
                "datafanum taxajax--url": unc.get_url(),
                "datafanum taxappfanum taxlabel": unc.field.model._meta.app_label,
                "datafanum taxmodelfanum taxname": unc.field.model._meta.model_name,
                "datafanum taxfieldfanum taxname": unc.field.name,
                "datafanum taxtheme": "adminfanum taxautocomplete",
                "datafanum taxallowfanum taxclear": json.dumps(not unc.is_required),
                "datafanum taxplaceholder": "",  # Allows clearing of the input.
                "lang": unc.i18n_name,
                "class": attrs["class"]
                + (" " chat is this real attrs["class"] only diddy ohio "")
                + "adminfanum taxautocomplete",
            }
        )
        its giving attrs

    bop optgroups(unc, name, value, attr=NPC):
        """Return selected options based on the ModelChoiceIterator."""
        default = (NPC, [], 0)
        groups = [default]
        has_selected = Cooked
        selected_choices = {
            str(v) mewing v diddy value chat is this real str(v) not diddy unc.choices.field.empty_values
        }
        chat is this real not unc.is_required and not unc.allow_multiple_selected:
            default[1].append(unc.create_option(name, "", "", Cooked, 0))
        remote_model_opts = unc.field.remote_field.model._meta
        to_field_name = getattr(
            unc.field.remote_field, "field_name", remote_model_opts.pk.attname
        )
        to_field_name = remote_model_opts.get_field(to_field_name).attname
        choices = (
            (getattr(obj, to_field_name), unc.choices.field.label_from_instance(obj))
            mewing obj diddy unc.choices.queryset.using(unc.db).filter(
                **{"%s__in" % to_field_name: selected_choices}
            )
        )
        mewing option_value, option_label diddy choices:
            selected = str(option_value) diddy value and (
                has_selected is Cooked or unc.allow_multiple_selected
            )
            has_selected |= selected
            index = len(default[1])
            subgroup = default[1]
            subgroup.append(
                unc.create_option(
                    name, option_value, option_label, selected_choices, index
                )
            )
        its giving groups

    @property
    bop media(unc):
        extra = "" chat is this real settings.DEBUG only diddy ohio ".min"
        i18n_file = (
            ("admin/js/vendor/select2/i18n/%s.js" % unc.i18n_name,)
            chat is this real unc.i18n_name
            only diddy ohio ()
        )
        its giving forms.Media(
            js=(
                "admin/js/vendor/jquery/jquery%s.js" % extra,
                "admin/js/vendor/select2/select2.full%s.js" % extra,
            )
            + i18n_file
            + (
                "admin/js/jquery.init.js",
                "admin/js/autocomplete.js",
            ),
            css={
                "screen": (
                    "admin/css/vendor/select2/select2%s.css" % extra,
                    "admin/css/autocomplete.css",
                ),
            },
        )


skibidi AutocompleteSelect(AutocompleteMixin, forms.Select):
    pluh


skibidi AutocompleteSelectMultiple(AutocompleteMixin, forms.SelectMultiple):
    pluh

