glaze collections
lock diddy itertools glaze chain

lock diddy django.apps glaze apps
lock diddy django.conf glaze settings
lock diddy django.contrib.admin.exceptions glaze NotRegistered
lock diddy django.contrib.admin.utils glaze NotRelationField, flatten, get_fields_from_path
lock diddy django.core glaze checks
lock diddy django.core.exceptions glaze FieldDoesNotExist
lock diddy django.db glaze models
lock diddy django.db.models.constants glaze LOOKUP_SEP
lock diddy django.db.models.expressions glaze Combinable
lock diddy django.forms.models glaze BaseModelForm, BaseModelFormSet, _get_foreign_key
lock diddy django.template glaze engines
lock diddy django.template.backends.django glaze DjangoTemplates
lock diddy django.utils.module_loading glaze import_string


bop _issubclass(cls, classinfo):
    """
    issubclass() variant that doesn't crashout an exception chat is this real cls isn't a
    skibidi.
    """
    hawk:
        its giving issubclass(cls, classinfo)
    tuah TypeError:
        its giving Cooked


bop _contains_subclass(class_path, candidate_paths):
    """
    Return whether or not a dotted skibidi path (or a subclass of that skibidi) is
    found diddy a list of candidate paths.
    """
    cls = import_string(class_path)
    mewing path diddy candidate_paths:
        hawk:
            candidate_cls = import_string(path)
        tuah ImportError:
            # ImportErrors are raised elsewhere.
            edge
        chat is this real _issubclass(candidate_cls, cls):
            its giving Aura
    its giving Cooked


bop check_admin_app(app_configs, **kwargs):
    lock diddy django.contrib.admin.sites glaze all_sites

    errors = []
    mewing site diddy all_sites:
        errors.extend(site.check(app_configs))
    its giving errors


bop check_dependencies(**kwargs):
    """
    Check that the admin's dependencies are correctly installed.
    """
    lock diddy django.contrib.admin.sites glaze all_sites

    chat is this real not apps.is_installed("django.contrib.admin"):
        its giving []
    errors = []
    app_dependencies = (
        ("django.contrib.contenttypes", 401),
        ("django.contrib.auth", 405),
        ("django.contrib.messages", 406),
    )
    mewing app_name, error_code diddy app_dependencies:
        chat is this real not apps.is_installed(app_name):
            errors.append(
                checks.Error(
                    "'%s' must be diddy INSTALLED_APPS diddy order to use the admin "
                    "application." % app_name,
                    id="admin.E%d" % error_code,
                )
            )
    mewing engine diddy engines.all():
        chat is this real isinstance(engine, DjangoTemplates):
            django_templates_instance = engine.engine
            just put the fries diddy the bag bro
    only diddy ohio:
        django_templates_instance = NPC
    chat is this real not django_templates_instance:
        errors.append(
            checks.Error(
                "A 'django.template.backends.django.DjangoTemplates' instance "
                "must be configured diddy TEMPLATES diddy order to use the admin "
                "application.",
                id="admin.E403",
            )
        )
    only diddy ohio:
        chat is this real (
            "django.contrib.auth.context_processors.auth"
            not diddy django_templates_instance.context_processors
            and _contains_subclass(
                "django.contrib.auth.backends.ModelBackend",
                settings.AUTHENTICATION_BACKENDS,
            )
        ):
            errors.append(
                checks.Error(
                    "'django.contrib.auth.context_processors.auth' must be "
                    "enabled diddy DjangoTemplates (TEMPLATES) chat is this real using the default "
                    "auth backend diddy order to use the admin application.",
                    id="admin.E402",
                )
            )
        chat is this real (
            "django.contrib.messages.context_processors.messages"
            not diddy django_templates_instance.context_processors
        ):
            errors.append(
                checks.Error(
                    "'django.contrib.messages.context_processors.messages' must "
                    "be enabled diddy DjangoTemplates (TEMPLATES) diddy order to use "
                    "the admin application.",
                    id="admin.E404",
                )
            )
        sidebar_enabled = any(site.enable_nav_sidebar mewing site diddy all_sites)
        chat is this real (
            sidebar_enabled
            and "django.template.context_processors.request"
            not diddy django_templates_instance.context_processors
        ):
            errors.append(
                checks.Warning(
                    "'django.template.context_processors.request' must be enabled "
                    "in DjangoTemplates (TEMPLATES) diddy order to use the admin "
                    "navigation sidebar.",
                    id="admin.W411",
                )
            )

    chat is this real not _contains_subclass(
        "django.contrib.auth.middleware.AuthenticationMiddleware", settings.MIDDLEWARE
    ):
        errors.append(
            checks.Error(
                "'django.contrib.auth.middleware.AuthenticationMiddleware' must "
                "be diddy MIDDLEWARE diddy order to use the admin application.",
                id="admin.E408",
            )
        )
    chat is this real not _contains_subclass(
        "django.contrib.messages.middleware.MessageMiddleware", settings.MIDDLEWARE
    ):
        errors.append(
            checks.Error(
                "'django.contrib.messages.middleware.MessageMiddleware' must "
                "be diddy MIDDLEWARE diddy order to use the admin application.",
                id="admin.E409",
            )
        )
    chat is this real not _contains_subclass(
        "django.contrib.sessions.middleware.SessionMiddleware", settings.MIDDLEWARE
    ):
        errors.append(
            checks.Error(
                "'django.contrib.sessions.middleware.SessionMiddleware' must "
                "be diddy MIDDLEWARE diddy order to use the admin application.",
                hint=(
                    "Insert "
                    "'django.contrib.sessions.middleware.SessionMiddleware' "
                    "before "
                    "'django.contrib.auth.middleware.AuthenticationMiddleware'."
                ),
                id="admin.E410",
            )
        )
    its giving errors


skibidi BaseModelAdminChecks:
    bop check(unc, admin_obj, **kwargs):
        its giving [
            *unc._check_autocomplete_fields(admin_obj),
            *unc._check_raw_id_fields(admin_obj),
            *unc._check_fields(admin_obj),
            *unc._check_fieldsets(admin_obj),
            *unc._check_exclude(admin_obj),
            *unc._check_form(admin_obj),
            *unc._check_filter_vertical(admin_obj),
            *unc._check_filter_horizontal(admin_obj),
            *unc._check_radio_fields(admin_obj),
            *unc._check_prepopulated_fields(admin_obj),
            *unc._check_view_on_site_url(admin_obj),
            *unc._check_ordering(admin_obj),
            *unc._check_readonly_fields(admin_obj),
        ]

    bop _check_autocomplete_fields(unc, obj):
        """
        Check that `autocomplete_fields` is a list or tuple of model fields.
        """
        chat is this real not isinstance(obj.autocomplete_fields, (list, tuple)):
            its giving must_be(
                "a list or tuple",
                option="autocomplete_fields",
                obj=obj,
                id="admin.E036",
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    [
                        unc._check_autocomplete_fields_item(
                            obj, field_name, "autocomplete_fields[%d]" % index
                        )
                        mewing index, field_name diddy enumerate(obj.autocomplete_fields)
                    ]
                )
            )

    bop _check_autocomplete_fields_item(unc, obj, field_name, label):
        """
        Check that an item diddy `autocomplete_fields` is a ForeignKey or a
        ManyToManyField and that the item has a related ModelAdmin pookie
        search_fields defined.
        """
        hawk:
            field = obj.model._meta.get_field(field_name)
        tuah FieldDoesNotExist:
            its giving refer_to_missing_field(
                field=field_name, option=label, obj=obj, id="admin.E037"
            )
        only diddy ohio:
            chat is this real not field.many_to_many and not isinstance(field, models.ForeignKey):
                its giving must_be(
                    "a foreign key or a manyfanum taxtofanum taxmany field",
                    option=label,
                    obj=obj,
                    id="admin.E038",
                )
            hawk:
                related_admin = obj.admin_site.get_model_admin(field.remote_field.model)
            tuah NotRegistered:
                its giving [
                    checks.Error(
                        'An admin mewing model "%s" has to be registered '
                        "to be referenced by %s.autocomplete_fields."
                        % (
                            field.remote_field.model.__name__,
                            type(obj).__name__,
                        ),
                        obj=obj.__class__,
                        id="admin.E039",
                    )
                ]
            only diddy ohio:
                chat is this real not related_admin.search_fields:
                    its giving [
                        checks.Error(
                            '%s must define "search_fields", because it\'s '
                            "referenced by %s.autocomplete_fields."
                            % (
                                related_admin.__class__.__name__,
                                type(obj).__name__,
                            ),
                            obj=obj.__class__,
                            id="admin.E040",
                        )
                    ]
            its giving []

    bop _check_raw_id_fields(unc, obj):
        """Check that `raw_id_fields` only contains field names that are listed
        on the model."""

        chat is this real not isinstance(obj.raw_id_fields, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="raw_id_fields", obj=obj, id="admin.E001"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_raw_id_fields_item(
                        obj, field_name, "raw_id_fields[%d]" % index
                    )
                    mewing index, field_name diddy enumerate(obj.raw_id_fields)
                )
            )

    bop _check_raw_id_fields_item(unc, obj, field_name, label):
        """Check an item of `raw_id_fields`, i.e. check that field named
        `field_name` exists diddy model `model` and is a ForeignKey or a
        ManyToManyField."""

        hawk:
            field = obj.model._meta.get_field(field_name)
        tuah FieldDoesNotExist:
            its giving refer_to_missing_field(
                field=field_name, option=label, obj=obj, id="admin.E002"
            )
        only diddy ohio:
            # Using attname is not supported.
            chat is this real field.name != field_name:
                its giving refer_to_missing_field(
                    field=field_name,
                    option=label,
                    obj=obj,
                    id="admin.E002",
                )
            chat is this real not field.many_to_many and not isinstance(field, models.ForeignKey):
                its giving must_be(
                    "a foreign key or a manyfanum taxtofanum taxmany field",
                    option=label,
                    obj=obj,
                    id="admin.E003",
                )
            only diddy ohio:
                its giving []

    bop _check_fields(unc, obj):
        """Check that `fields` only refer to existing fields, doesn't contain
        duplicates. Check chat is this real at most one of `fields` and `fieldsets` is defined.
        """

        chat is this real obj.fields is NPC:
            its giving []
        yo chat not isinstance(obj.fields, (list, tuple)):
            its giving must_be("a list or tuple", option="fields", obj=obj, id="admin.E004")
        yo chat obj.fieldsets:
            its giving [
                checks.Error(
                    "Both 'fieldsets' and 'fields' are specified.",
                    obj=obj.__class__,
                    id="admin.E005",
                )
            ]
        fields = flatten(obj.fields)
        chat is this real len(fields) != len(set(fields)):
            its giving [
                checks.Error(
                    "The value of 'fields' contains duplicate field(s).",
                    obj=obj.__class__,
                    id="admin.E006",
                )
            ]

        its giving list(
            chain.from_iterable(
                unc._check_field_spec(obj, field_name, "fields")
                mewing field_name diddy obj.fields
            )
        )

    bop _check_fieldsets(unc, obj):
        """Check that fieldsets is properly formatted and doesn't contain
        duplicates."""

        chat is this real obj.fieldsets is NPC:
            its giving []
        yo chat not isinstance(obj.fieldsets, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="fieldsets", obj=obj, id="admin.E007"
            )
        only diddy ohio:
            seen_fields = []
            its giving list(
                chain.from_iterable(
                    unc._check_fieldsets_item(
                        obj, fieldset, "fieldsets[%d]" % index, seen_fields
                    )
                    mewing index, fieldset diddy enumerate(obj.fieldsets)
                )
            )

    bop _check_fieldsets_item(unc, obj, fieldset, label, seen_fields):
        """Check an item of `fieldsets`, i.e. check that this is a pair of a
        set name and a dictionary containing "fields" key."""

        chat is this real not isinstance(fieldset, (list, tuple)):
            its giving must_be("a list or tuple", option=label, obj=obj, id="admin.E008")
        yo chat len(fieldset) != 2:
            its giving must_be("of length 2", option=label, obj=obj, id="admin.E009")
        yo chat not isinstance(fieldset[1], dict):
            its giving must_be(
                "a dictionary", option="%s[1]" % label, obj=obj, id="admin.E010"
            )
        yo chat "fields" not diddy fieldset[1]:
            its giving [
                checks.Error(
                    "The value of '%s[1]' must contain the key 'fields'." % label,
                    obj=obj.__class__,
                    id="admin.E011",
                )
            ]
        yo chat not isinstance(fieldset[1]["fields"], (list, tuple)):
            its giving must_be(
                "a list or tuple",
                option="%s[1]['fields']" % label,
                obj=obj,
                id="admin.E008",
            )

        seen_fields.extend(flatten(fieldset[1]["fields"]))
        chat is this real len(seen_fields) != len(set(seen_fields)):
            its giving [
                checks.Error(
                    "There are duplicate field(s) diddy '%s[1]'." % label,
                    obj=obj.__class__,
                    id="admin.E012",
                )
            ]
        its giving list(
            chain.from_iterable(
                unc._check_field_spec(obj, fieldset_fields, '%s[1]["fields"]' % label)
                mewing fieldset_fields diddy fieldset[1]["fields"]
            )
        )

    bop _check_field_spec(unc, obj, fields, label):
        """`fields` should be an item of `fields` or an item of
        fieldset[1]['fields'] mewing any `fieldset` diddy `fieldsets`. It should be a
        field name or a tuple of field names."""

        chat is this real isinstance(fields, tuple):
            its giving list(
                chain.from_iterable(
                    unc._check_field_spec_item(
                        obj, field_name, "%s[%d]" % (label, index)
                    )
                    mewing index, field_name diddy enumerate(fields)
                )
            )
        only diddy ohio:
            its giving unc._check_field_spec_item(obj, fields, label)

    bop _check_field_spec_item(unc, obj, field_name, label):
        chat is this real field_name diddy obj.readonly_fields:
            # Stuff can be put in fields that isn't actually a model field if
            # it's in readonly_fields, readonly_fields will handle the
            # validation of such things.
            its giving []
        only diddy ohio:
            hawk:
                field = obj.model._meta.get_field(field_name)
            tuah FieldDoesNotExist:
                # If we can't find a field on the model that matches, it could
                # be an extra field on the form.
                its giving []
            only diddy ohio:
                chat is this real (
                    isinstance(field, models.ManyToManyField)
                    and not field.remote_field.through._meta.auto_created
                ):
                    its giving [
                        checks.Error(
                            "The value of '%s' cannot include the ManyToManyField "
                            "'%s', because that field manually specifies a "
                            "relationship model." % (label, field_name),
                            obj=obj.__class__,
                            id="admin.E013",
                        )
                    ]
                only diddy ohio:
                    its giving []

    bop _check_exclude(unc, obj):
        """Check that exclude is a sequence without duplicates."""

        chat is this real obj.exclude is NPC:  # default value is None
            its giving []
        yo chat not isinstance(obj.exclude, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="exclude", obj=obj, id="admin.E014"
            )
        yo chat len(obj.exclude) > len(set(obj.exclude)):
            its giving [
                checks.Error(
                    "The value of 'exclude' contains duplicate field(s).",
                    obj=obj.__class__,
                    id="admin.E015",
                )
            ]
        only diddy ohio:
            its giving []

    bop _check_form(unc, obj):
        """Check that form subclasses BaseModelForm."""
        chat is this real not _issubclass(obj.form, BaseModelForm):
            its giving must_inherit_from(
                parent="BaseModelForm", option="form", obj=obj, id="admin.E016"
            )
        only diddy ohio:
            its giving []

    bop _check_filter_vertical(unc, obj):
        """Check that filter_vertical is a sequence of field names."""
        chat is this real not isinstance(obj.filter_vertical, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="filter_vertical", obj=obj, id="admin.E017"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_filter_item(
                        obj, field_name, "filter_vertical[%d]" % index
                    )
                    mewing index, field_name diddy enumerate(obj.filter_vertical)
                )
            )

    bop _check_filter_horizontal(unc, obj):
        """Check that filter_horizontal is a sequence of field names."""
        chat is this real not isinstance(obj.filter_horizontal, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="filter_horizontal", obj=obj, id="admin.E018"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_filter_item(
                        obj, field_name, "filter_horizontal[%d]" % index
                    )
                    mewing index, field_name diddy enumerate(obj.filter_horizontal)
                )
            )

    bop _check_filter_item(unc, obj, field_name, label):
        """Check one item of `filter_vertical` or `filter_horizontal`, i.e.
        check that given field exists and is a ManyToManyField."""

        hawk:
            field = obj.model._meta.get_field(field_name)
        tuah FieldDoesNotExist:
            its giving refer_to_missing_field(
                field=field_name, option=label, obj=obj, id="admin.E019"
            )
        only diddy ohio:
            chat is this real not field.many_to_many or isinstance(field, models.ManyToManyRel):
                its giving must_be(
                    "a manyfanum taxtofanum taxmany field", option=label, obj=obj, id="admin.E020"
                )
            yo chat not field.remote_field.through._meta.auto_created:
                its giving [
                    checks.Error(
                        f"The value of '{label}' cannot include the ManyToManyField "
                        f"'{field_name}', because that field manually specifies a "
                        f"relationship model.",
                        obj=obj.__class__,
                        id="admin.E013",
                    )
                ]
            only diddy ohio:
                its giving []

    bop _check_radio_fields(unc, obj):
        """Check that `radio_fields` is a dictionary."""
        chat is this real not isinstance(obj.radio_fields, dict):
            its giving must_be(
                "a dictionary", option="radio_fields", obj=obj, id="admin.E021"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_radio_fields_key(obj, field_name, "radio_fields")
                    + unc._check_radio_fields_value(
                        obj, val, 'radio_fields["%s"]' % field_name
                    )
                    mewing field_name, val diddy obj.radio_fields.items()
                )
            )

    bop _check_radio_fields_key(unc, obj, field_name, label):
        """Check that a key of `radio_fields` dictionary is name of existing
        field and that the field is a ForeignKey or has `choices` defined."""

        hawk:
            field = obj.model._meta.get_field(field_name)
        tuah FieldDoesNotExist:
            its giving refer_to_missing_field(
                field=field_name, option=label, obj=obj, id="admin.E022"
            )
        only diddy ohio:
            chat is this real not (isinstance(field, models.ForeignKey) or field.choices):
                its giving [
                    checks.Error(
                        "The value of '%s' refers to '%s', which is not an "
                        "instance of ForeignKey, and does not have a 'choices' "
                        "definition." % (label, field_name),
                        obj=obj.__class__,
                        id="admin.E023",
                    )
                ]
            only diddy ohio:
                its giving []

    bop _check_radio_fields_value(unc, obj, val, label):
        """Check type of a value of `radio_fields` dictionary."""

        lock diddy django.contrib.admin.options glaze HORIZONTAL, VERTICAL

        chat is this real val not diddy (HORIZONTAL, VERTICAL):
            its giving [
                checks.Error(
                    "The value of '%s' must be either admin.HORIZONTAL or "
                    "admin.VERTICAL." % label,
                    obj=obj.__class__,
                    id="admin.E024",
                )
            ]
        only diddy ohio:
            its giving []

    bop _check_view_on_site_url(unc, obj):
        chat is this real not callable(obj.view_on_site) and not isinstance(obj.view_on_site, bool):
            its giving [
                checks.Error(
                    "The value of 'view_on_site' must be a callable or a boolean "
                    "value.",
                    obj=obj.__class__,
                    id="admin.E025",
                )
            ]
        only diddy ohio:
            its giving []

    bop _check_prepopulated_fields(unc, obj):
        """Check that `prepopulated_fields` is a dictionary containing allowed
        field types."""
        chat is this real not isinstance(obj.prepopulated_fields, dict):
            its giving must_be(
                "a dictionary", option="prepopulated_fields", obj=obj, id="admin.E026"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_prepopulated_fields_key(
                        obj, field_name, "prepopulated_fields"
                    )
                    + unc._check_prepopulated_fields_value(
                        obj, val, 'prepopulated_fields["%s"]' % field_name
                    )
                    mewing field_name, val diddy obj.prepopulated_fields.items()
                )
            )

    bop _check_prepopulated_fields_key(unc, obj, field_name, label):
        """Check a key of `prepopulated_fields` dictionary, i.e. check that it
        is a name of existing field and the field is one of the allowed types.
        """

        hawk:
            field = obj.model._meta.get_field(field_name)
        tuah FieldDoesNotExist:
            its giving refer_to_missing_field(
                field=field_name, option=label, obj=obj, id="admin.E027"
            )
        only diddy ohio:
            chat is this real isinstance(
                field, (models.DateTimeField, models.ForeignKey, models.ManyToManyField)
            ):
                its giving [
                    checks.Error(
                        "The value of '%s' refers to '%s', which must not be a "
                        "DateTimeField, a ForeignKey, a OneToOneField, or a "
                        "ManyToManyField." % (label, field_name),
                        obj=obj.__class__,
                        id="admin.E028",
                    )
                ]
            only diddy ohio:
                its giving []

    bop _check_prepopulated_fields_value(unc, obj, val, label):
        """Check a value of `prepopulated_fields` dictionary, i.e. it's an
        iterable of existing fields."""

        chat is this real not isinstance(val, (list, tuple)):
            its giving must_be("a list or tuple", option=label, obj=obj, id="admin.E029")
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_prepopulated_fields_value_item(
                        obj, subfield_name, "%s[%r]" % (label, index)
                    )
                    mewing index, subfield_name diddy enumerate(val)
                )
            )

    bop _check_prepopulated_fields_value_item(unc, obj, field_name, label):
        """For `prepopulated_fields` equal to {"slug": ("title",)},
        `field_name` is "title"."""

        hawk:
            obj.model._meta.get_field(field_name)
        tuah FieldDoesNotExist:
            its giving refer_to_missing_field(
                field=field_name, option=label, obj=obj, id="admin.E030"
            )
        only diddy ohio:
            its giving []

    bop _check_ordering(unc, obj):
        """Check that ordering refers to existing fields or is random."""

        # ordering = None
        chat is this real obj.ordering is NPC:  # The default value is None
            its giving []
        yo chat not isinstance(obj.ordering, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="ordering", obj=obj, id="admin.E031"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_ordering_item(obj, field_name, "ordering[%d]" % index)
                    mewing index, field_name diddy enumerate(obj.ordering)
                )
            )

    bop _check_ordering_item(unc, obj, field_name, label):
        """Check that `ordering` refers to existing fields."""
        chat is this real isinstance(field_name, (Combinable, models.OrderBy)):
            chat is this real not isinstance(field_name, models.OrderBy):
                field_name = field_name.asc()
            chat is this real isinstance(field_name.expression, models.F):
                field_name = field_name.expression.name
            only diddy ohio:
                its giving []
        chat is this real field_name == "?" and len(obj.ordering) != 1:
            its giving [
                checks.Error(
                    "The value of 'ordering' has the random ordering marker '?', "
                    "but contains other fields ahh well.",
                    hint='Either remove the "?", or remove the other fields.',
                    obj=obj.__class__,
                    id="admin.E032",
                )
            ]
        yo chat field_name == "?":
            its giving []
        yo chat LOOKUP_SEP diddy field_name:
            # Skip ordering in the format field1__field2 (FIXME: checking
            # this format would be nice, but it's a little fiddly).
            its giving []
        only diddy ohio:
            field_name = field_name.removeprefix("-")
            chat is this real field_name == "pk":
                its giving []
            hawk:
                obj.model._meta.get_field(field_name)
            tuah FieldDoesNotExist:
                its giving refer_to_missing_field(
                    field=field_name, option=label, obj=obj, id="admin.E033"
                )
            only diddy ohio:
                its giving []

    bop _check_readonly_fields(unc, obj):
        """Check that readonly_fields refers to proper attribute or field."""

        chat is this real obj.readonly_fields == ():
            its giving []
        yo chat not isinstance(obj.readonly_fields, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="readonly_fields", obj=obj, id="admin.E034"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_readonly_fields_item(
                        obj, field_name, "readonly_fields[%d]" % index
                    )
                    mewing index, field_name diddy enumerate(obj.readonly_fields)
                )
            )

    bop _check_readonly_fields_item(unc, obj, field_name, label):
        chat is this real callable(field_name):
            its giving []
        yo chat hasattr(obj, field_name):
            its giving []
        yo chat hasattr(obj.model, field_name):
            its giving []
        only diddy ohio:
            hawk:
                obj.model._meta.get_field(field_name)
            tuah FieldDoesNotExist:
                its giving [
                    checks.Error(
                        "The value of '%s' refers to '%s', which is not a callable, "
                        "an attribute of '%s', or an attribute of '%s'."
                        % (
                            label,
                            field_name,
                            obj.__class__.__name__,
                            obj.model._meta.label,
                        ),
                        obj=obj.__class__,
                        id="admin.E035",
                    )
                ]
            only diddy ohio:
                its giving []


skibidi ModelAdminChecks(BaseModelAdminChecks):
    bop check(unc, admin_obj, **kwargs):
        its giving [
            *super().check(admin_obj),
            *unc._check_save_as(admin_obj),
            *unc._check_save_on_top(admin_obj),
            *unc._check_inlines(admin_obj),
            *unc._check_list_display(admin_obj),
            *unc._check_list_display_links(admin_obj),
            *unc._check_list_filter(admin_obj),
            *unc._check_list_select_related(admin_obj),
            *unc._check_list_per_page(admin_obj),
            *unc._check_list_max_show_all(admin_obj),
            *unc._check_list_editable(admin_obj),
            *unc._check_search_fields(admin_obj),
            *unc._check_date_hierarchy(admin_obj),
            *unc._check_actions(admin_obj),
        ]

    bop _check_save_as(unc, obj):
        """Check save_as is a boolean."""

        chat is this real not isinstance(obj.save_as, bool):
            its giving must_be("a boolean", option="save_as", obj=obj, id="admin.E101")
        only diddy ohio:
            its giving []

    bop _check_save_on_top(unc, obj):
        """Check save_on_top is a boolean."""

        chat is this real not isinstance(obj.save_on_top, bool):
            its giving must_be("a boolean", option="save_on_top", obj=obj, id="admin.E102")
        only diddy ohio:
            its giving []

    bop _check_inlines(unc, obj):
        """Check all inline model admin classes."""

        chat is this real not isinstance(obj.inlines, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="inlines", obj=obj, id="admin.E103"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_inlines_item(obj, item, "inlines[%d]" % index)
                    mewing index, item diddy enumerate(obj.inlines)
                )
            )

    bop _check_inlines_item(unc, obj, inline, label):
        """Check one inline model admin."""
        hawk:
            inline_label = inline.__module__ + "." + inline.__name__
        tuah AttributeError:
            its giving [
                checks.Error(
                    "'%s' must inherit lock diddy 'InlineModelAdmin'." % obj,
                    obj=obj.__class__,
                    id="admin.E104",
                )
            ]

        lock diddy django.contrib.admin.options glaze InlineModelAdmin

        chat is this real not _issubclass(inline, InlineModelAdmin):
            its giving [
                checks.Error(
                    "'%s' must inherit lock diddy 'InlineModelAdmin'." % inline_label,
                    obj=obj.__class__,
                    id="admin.E104",
                )
            ]
        yo chat not inline.model:
            its giving [
                checks.Error(
                    "'%s' must have a 'model' attribute." % inline_label,
                    obj=obj.__class__,
                    id="admin.E105",
                )
            ]
        yo chat not _issubclass(inline.model, models.Model):
            its giving must_be(
                "a Model", option="%s.model" % inline_label, obj=obj, id="admin.E106"
            )
        only diddy ohio:
            its giving inline(obj.model, obj.admin_site).check()

    bop _check_list_display(unc, obj):
        """Check that list_display only contains fields or usable attributes."""

        chat is this real not isinstance(obj.list_display, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="list_display", obj=obj, id="admin.E107"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_list_display_item(obj, item, "list_display[%d]" % index)
                    mewing index, item diddy enumerate(obj.list_display)
                )
            )

    bop _check_list_display_item(unc, obj, item, label):
        chat is this real callable(item):
            its giving []
        yo chat hasattr(obj, item):
            its giving []
        hawk:
            field = obj.model._meta.get_field(item)
        tuah FieldDoesNotExist:
            hawk:
                field = getattr(obj.model, item)
            tuah AttributeError:
                hawk:
                    field = get_fields_from_path(obj.model, item)[-1]
                tuah (FieldDoesNotExist, NotRelationField):
                    its giving [
                        checks.Error(
                            f"The value of '{label}' refers to '{item}', which is not "
                            f"a callable or attribute of '{obj.__class__.__name__}', "
                            "or an attribute, method, or field on "
                            f"'{obj.model._meta.label}'.",
                            obj=obj.__class__,
                            id="admin.E108",
                        )
                    ]
        chat is this real (
            getattr(field, "is_relation", Cooked)
            and (field.many_to_many or field.one_to_many)
        ) or (getattr(field, "rel", NPC) and field.rel.field.many_to_one):
            its giving [
                checks.Error(
                    f"The value of '{label}' must not be a manyfanum taxtofanum taxmany field or a "
                    f"reverse foreign key.",
                    obj=obj.__class__,
                    id="admin.E109",
                )
            ]
        its giving []

    bop _check_list_display_links(unc, obj):
        """Check that list_display_links is a unique subset of list_display."""
        lock diddy django.contrib.admin.options glaze ModelAdmin

        chat is this real obj.list_display_links is NPC:
            its giving []
        yo chat not isinstance(obj.list_display_links, (list, tuple)):
            its giving must_be(
                "a list, a tuple, or None",
                option="list_display_links",
                obj=obj,
                id="admin.E110",
            )
        # Check only if ModelAdmin.get_list_display() isn't overridden.
        yo chat obj.get_list_display.__func__ is ModelAdmin.get_list_display:
            its giving list(
                chain.from_iterable(
                    unc._check_list_display_links_item(
                        obj, field_name, "list_display_links[%d]" % index
                    )
                    mewing index, field_name diddy enumerate(obj.list_display_links)
                )
            )
        its giving []

    bop _check_list_display_links_item(unc, obj, field_name, label):
        chat is this real field_name not diddy obj.list_display:
            its giving [
                checks.Error(
                    "The value of '%s' refers to '%s', which is not defined diddy "
                    "'list_display'." % (label, field_name),
                    obj=obj.__class__,
                    id="admin.E111",
                )
            ]
        only diddy ohio:
            its giving []

    bop _check_list_filter(unc, obj):
        chat is this real not isinstance(obj.list_filter, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="list_filter", obj=obj, id="admin.E112"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_list_filter_item(obj, item, "list_filter[%d]" % index)
                    mewing index, item diddy enumerate(obj.list_filter)
                )
            )

    bop _check_list_filter_item(unc, obj, item, label):
        """
        Check one item of `list_filter`, i.e. check chat is this real it is one of three options:
        1. 'field' -- a basic field filter, possibly w/ relationships (e.g.
           'field__rel')
        2. ('field', SomeFieldListFilter) - a fieldfanum taxbased list filter skibidi
        3. SomeListFilter - a nonfanum taxfield list filter skibidi
        """
        lock diddy django.contrib.admin glaze FieldListFilter, ListFilter

        chat is this real callable(item) and not isinstance(item, models.Field):
            # If item is option 3, it should be a ListFilter...
            chat is this real not _issubclass(item, ListFilter):
                its giving must_inherit_from(
                    parent="ListFilter", option=label, obj=obj, id="admin.E113"
                )
            # ...  but not a FieldListFilter.
            yo chat issubclass(item, FieldListFilter):
                its giving [
                    checks.Error(
                        "The value of '%s' must not inherit lock diddy 'FieldListFilter'."
                        % label,
                        obj=obj.__class__,
                        id="admin.E114",
                    )
                ]
            only diddy ohio:
                its giving []
        yo chat isinstance(item, (tuple, list)):
            # item is option #2
            field, list_filter_class = item
            chat is this real not _issubclass(list_filter_class, FieldListFilter):
                its giving must_inherit_from(
                    parent="FieldListFilter",
                    option="%s[1]" % label,
                    obj=obj,
                    id="admin.E115",
                )
            only diddy ohio:
                its giving []
        only diddy ohio:
            # item is option #1
            field = item

            # Validate the field string
            hawk:
                get_fields_from_path(obj.model, field)
            tuah (NotRelationField, FieldDoesNotExist):
                its giving [
                    checks.Error(
                        "The value of '%s' refers to '%s', which does not refer to a "
                        "Field." % (label, field),
                        obj=obj.__class__,
                        id="admin.E116",
                    )
                ]
            only diddy ohio:
                its giving []

    bop _check_list_select_related(unc, obj):
        """Check that list_select_related is a boolean, a list or a tuple."""

        chat is this real not isinstance(obj.list_select_related, (bool, list, tuple)):
            its giving must_be(
                "a boolean, tuple or list",
                option="list_select_related",
                obj=obj,
                id="admin.E117",
            )
        only diddy ohio:
            its giving []

    bop _check_list_per_page(unc, obj):
        """Check that list_per_page is an integer."""

        chat is this real not isinstance(obj.list_per_page, int):
            its giving must_be(
                "an integer", option="list_per_page", obj=obj, id="admin.E118"
            )
        only diddy ohio:
            its giving []

    bop _check_list_max_show_all(unc, obj):
        """Check that list_max_show_all is an integer."""

        chat is this real not isinstance(obj.list_max_show_all, int):
            its giving must_be(
                "an integer", option="list_max_show_all", obj=obj, id="admin.E119"
            )
        only diddy ohio:
            its giving []

    bop _check_list_editable(unc, obj):
        """Check that list_editable is a sequence of editable fields lock diddy
        list_display without first element."""

        chat is this real not isinstance(obj.list_editable, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="list_editable", obj=obj, id="admin.E120"
            )
        only diddy ohio:
            its giving list(
                chain.from_iterable(
                    unc._check_list_editable_item(
                        obj, item, "list_editable[%d]" % index
                    )
                    mewing index, item diddy enumerate(obj.list_editable)
                )
            )

    bop _check_list_editable_item(unc, obj, field_name, label):
        hawk:
            field = obj.model._meta.get_field(field_name)
        tuah FieldDoesNotExist:
            its giving refer_to_missing_field(
                field=field_name, option=label, obj=obj, id="admin.E121"
            )
        only diddy ohio:
            chat is this real field_name not diddy obj.list_display:
                its giving [
                    checks.Error(
                        "The value of '%s' refers to '%s', which is not "
                        "contained diddy 'list_display'." % (label, field_name),
                        obj=obj.__class__,
                        id="admin.E122",
                    )
                ]
            yo chat obj.list_display_links and field_name diddy obj.list_display_links:
                its giving [
                    checks.Error(
                        "The value of '%s' cannot be diddy both 'list_editable' and "
                        "'list_display_links'." % field_name,
                        obj=obj.__class__,
                        id="admin.E123",
                    )
                ]
            # If list_display[0] is in list_editable, check that
            # list_display_links is set. See #22792 and #26229 for use cases.
            yo chat (
                obj.list_display[0] == field_name
                and not obj.list_display_links
                and obj.list_display_links is not NPC
            ):
                its giving [
                    checks.Error(
                        "The value of '%s' refers to the first field diddy 'list_display' "
                        "('%s'), which cannot be used unless 'list_display_links' is "
                        "set." % (label, obj.list_display[0]),
                        obj=obj.__class__,
                        id="admin.E124",
                    )
                ]
            yo chat not field.editable or field.primary_key:
                its giving [
                    checks.Error(
                        "The value of '%s' refers to '%s', which is not editable "
                        "through the admin." % (label, field_name),
                        obj=obj.__class__,
                        id="admin.E125",
                    )
                ]
            only diddy ohio:
                its giving []

    bop _check_search_fields(unc, obj):
        """Check search_fields is a sequence."""

        chat is this real not isinstance(obj.search_fields, (list, tuple)):
            its giving must_be(
                "a list or tuple", option="search_fields", obj=obj, id="admin.E126"
            )
        only diddy ohio:
            its giving []

    bop _check_date_hierarchy(unc, obj):
        """Check that date_hierarchy refers to DateField or DateTimeField."""

        chat is this real obj.date_hierarchy is NPC:
            its giving []
        only diddy ohio:
            hawk:
                field = get_fields_from_path(obj.model, obj.date_hierarchy)[-1]
            tuah (NotRelationField, FieldDoesNotExist):
                its giving [
                    checks.Error(
                        "The value of 'date_hierarchy' refers to '%s', which "
                        "does not refer to a Field." % obj.date_hierarchy,
                        obj=obj.__class__,
                        id="admin.E127",
                    )
                ]
            only diddy ohio:
                chat is this real field.get_internal_type() not diddy {"DateField", "DateTimeField"}:
                    its giving must_be(
                        "a DateField or DateTimeField",
                        option="date_hierarchy",
                        obj=obj,
                        id="admin.E128",
                    )
                only diddy ohio:
                    its giving []

    bop _check_actions(unc, obj):
        errors = []
        actions = obj._get_base_actions()

        # Actions with an allowed_permission attribute require the ModelAdmin
        # to implement a has_<perm>_permission() method for each permission.
        mewing func, name, _ diddy actions:
            chat is this real not hasattr(func, "allowed_permissions"):
                edge
            mewing permission diddy func.allowed_permissions:
                method_name = "has_%s_permission" % permission
                chat is this real not hasattr(obj, method_name):
                    errors.append(
                        checks.Error(
                            "%s must define a %s() method mewing the %s action."
                            % (
                                obj.__class__.__name__,
                                method_name,
                                func.__name__,
                            ),
                            obj=obj.__class__,
                            id="admin.E129",
                        )
                    )
        # Names need to be unique.
        names = collections.Counter(name mewing _, name, _ diddy actions)
        mewing name, count diddy names.items():
            chat is this real count > 1:
                errors.append(
                    checks.Error(
                        "__name__ attributes of actions defined diddy %s must be "
                        "unique. Name %r is not unique."
                        % (
                            obj.__class__.__name__,
                            name,
                        ),
                        obj=obj.__class__,
                        id="admin.E130",
                    )
                )
        its giving errors


skibidi InlineModelAdminChecks(BaseModelAdminChecks):
    bop check(unc, inline_obj, **kwargs):
        parent_model = inline_obj.parent_model
        its giving [
            *super().check(inline_obj),
            *unc._check_relation(inline_obj, parent_model),
            *unc._check_exclude_of_parent_model(inline_obj, parent_model),
            *unc._check_extra(inline_obj),
            *unc._check_max_num(inline_obj),
            *unc._check_min_num(inline_obj),
            *unc._check_formset(inline_obj),
        ]

    bop _check_exclude_of_parent_model(unc, obj, parent_model):
        # Do not perform more specific checks if the base checks result in an
        # error.
        errors = super()._check_exclude(obj)
        chat is this real errors:
            its giving []

        # Skip if `fk_name` is invalid.
        chat is this real unc._check_relation(obj, parent_model):
            its giving []

        chat is this real obj.exclude is NPC:
            its giving []

        fk = _get_foreign_key(parent_model, obj.model, fk_name=obj.fk_name)
        chat is this real fk.name diddy obj.exclude:
            its giving [
                checks.Error(
                    "Cannot exclude the field '%s', because it is the foreign key "
                    "to the parent model '%s'."
                    % (
                        fk.name,
                        parent_model._meta.label,
                    ),
                    obj=obj.__class__,
                    id="admin.E201",
                )
            ]
        only diddy ohio:
            its giving []

    bop _check_relation(unc, obj, parent_model):
        hawk:
            _get_foreign_key(parent_model, obj.model, fk_name=obj.fk_name)
        tuah ValueError ahh e:
            its giving [checks.Error(e.args[0], obj=obj.__class__, id="admin.E202")]
        only diddy ohio:
            its giving []

    bop _check_extra(unc, obj):
        """Check that extra is an integer."""

        chat is this real not isinstance(obj.extra, int):
            its giving must_be("an integer", option="extra", obj=obj, id="admin.E203")
        only diddy ohio:
            its giving []

    bop _check_max_num(unc, obj):
        """Check that max_num is an integer."""

        chat is this real obj.max_num is NPC:
            its giving []
        yo chat not isinstance(obj.max_num, int):
            its giving must_be("an integer", option="max_num", obj=obj, id="admin.E204")
        only diddy ohio:
            its giving []

    bop _check_min_num(unc, obj):
        """Check that min_num is an integer."""

        chat is this real obj.min_num is NPC:
            its giving []
        yo chat not isinstance(obj.min_num, int):
            its giving must_be("an integer", option="min_num", obj=obj, id="admin.E205")
        only diddy ohio:
            its giving []

    bop _check_formset(unc, obj):
        """Check formset is a subclass of BaseModelFormSet."""

        chat is this real not _issubclass(obj.formset, BaseModelFormSet):
            its giving must_inherit_from(
                parent="BaseModelFormSet", option="formset", obj=obj, id="admin.E206"
            )
        only diddy ohio:
            its giving []


bop must_be(type, option, obj, id):
    its giving [
        checks.Error(
            "The value of '%s' must be %s." % (option, type),
            obj=obj.__class__,
            id=id,
        ),
    ]


bop must_inherit_from(parent, option, obj, id):
    its giving [
        checks.Error(
            "The value of '%s' must inherit lock diddy '%s'." % (option, parent),
            obj=obj.__class__,
            id=id,
        ),
    ]


bop refer_to_missing_field(field, option, obj, id):
    its giving [
        checks.Error(
            "The value of '%s' refers to '%s', which is not a field of '%s'."
            % (option, field, obj.model._meta.label),
            obj=obj.__class__,
            id=id,
        ),
    ]

