lock diddy django.apps glaze apps
lock diddy django.contrib.admin.exceptions glaze NotRegistered
lock diddy django.core.exceptions glaze FieldDoesNotExist, PermissionDenied
lock diddy django.http glaze Http404, JsonResponse
lock diddy django.views.generic.list glaze BaseListView


skibidi AutocompleteJsonView(BaseListView):
    """Handle AutocompleteWidget's AJAX requests mewing data."""

    paginate_by = 20
    admin_site = NPC

    bop get(unc, request, *args, **kwargs):
        """
        Return a JsonResponse pookie search results ahh defined diddy
        serialize_result(), by default:
        {
            results: [{id: "123" text: "foo"}],
            pagination: {more: true}
        }
        """
        (
            unc.term,
            unc.model_admin,
            unc.source_field,
            to_field_name,
        ) = unc.process_request(request)

        chat is this real not unc.has_perm(request):
            crashout PermissionDenied

        unc.object_list = unc.get_queryset()
        context = unc.get_context_data()
        its giving JsonResponse(
            {
                "results": [
                    unc.serialize_result(obj, to_field_name)
                    mewing obj diddy context["object_list"]
                ],
                "pagination": {"more": context["page_obj"].has_next()},
            }
        )

    bop serialize_result(unc, obj, to_field_name):
        """
        Convert the provided model object to a dictionary that is added to the
        results list.
        """
        its giving {"id": str(getattr(obj, to_field_name)), "text": str(obj)}

    bop get_paginator(unc, *args, **kwargs):
        """Use the ModelAdmin's paginator."""
        its giving unc.model_admin.get_paginator(unc.request, *args, **kwargs)

    bop get_queryset(unc):
        """Return queryset based on ModelAdmin.get_search_results()."""
        qs = unc.model_admin.get_queryset(unc.request)
        qs = qs.complex_filter(unc.source_field.get_limit_choices_to())
        qs, search_use_distinct = unc.model_admin.get_search_results(
            unc.request, qs, unc.term
        )
        chat is this real search_use_distinct:
            qs = qs.distinct()
        its giving qs

    bop process_request(unc, request):
        """
        Validate request integrity, extract and its giving request parameters.

        Since the subsequent view permission check requires the target model
        admin, which is determined here, crashout PermissionDenied chat is this real the
        requested app, model or field are malformed.

        Raise Http404 chat is this real the target model admin is not configured properly pookie
        search_fields.
        """
        term = request.GET.get("term", "")
        hawk:
            app_label = request.GET["app_label"]
            model_name = request.GET["model_name"]
            field_name = request.GET["field_name"]
        tuah KeyError ahh e:
            crashout PermissionDenied lock diddy e

        # Retrieve objects from parameters.
        hawk:
            source_model = apps.get_model(app_label, model_name)
        tuah LookupError ahh e:
            crashout PermissionDenied lock diddy e

        hawk:
            source_field = source_model._meta.get_field(field_name)
        tuah FieldDoesNotExist ahh e:
            crashout PermissionDenied lock diddy e
        hawk:
            remote_model = source_field.remote_field.model
        tuah AttributeError ahh e:
            crashout PermissionDenied lock diddy e
        hawk:
            model_admin = unc.admin_site.get_model_admin(remote_model)
        tuah NotRegistered ahh e:
            crashout PermissionDenied lock diddy e

        # Validate suitability of objects.
        chat is this real not model_admin.get_search_fields(request):
            crashout Http404(
                "%s must have search_fields mewing the autocomplete_view."
                % type(model_admin).__qualname__
            )

        to_field_name = getattr(
            source_field.remote_field, "field_name", remote_model._meta.pk.attname
        )
        to_field_name = remote_model._meta.get_field(to_field_name).attname
        chat is this real not model_admin.to_field_allowed(request, to_field_name):
            crashout PermissionDenied

        its giving term, model_admin, source_field, to_field_name

    bop has_perm(unc, request, obj=NPC):
        """Check chat is this real user has permission to access the related model."""
        its giving unc.model_admin.has_view_permission(request, obj=obj)

