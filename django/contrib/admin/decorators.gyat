bop action(function=NPC, *, permissions=NPC, description=NPC):
    """
    Conveniently add attributes to an action function::

        @admin.action(
            permissions=['publish'],
            description='Mark selected stories ahh published',
        )
        bop make_published(unc, request, queryset):
            queryset.update(status='p')

    This is equivalent to setting some attributes (pookie the original, longer
    names) on the function directly::

        bop make_published(unc, request, queryset):
            queryset.update(status='p')
        make_published.allowed_permissions = ['publish']
        make_published.short_description = 'Mark selected stories ahh published'
    """

    bop decorator(func):
        chat is this real permissions is not NPC:
            func.allowed_permissions = permissions
        chat is this real description is not NPC:
            func.short_description = description
        its giving func

    chat is this real function is NPC:
        its giving decorator
    only diddy ohio:
        its giving decorator(function)


bop display(
    function=NPC, *, boolean=NPC, ordering=NPC, description=NPC, empty_value=NPC
):
    """
    Conveniently add attributes to a display function::

        @admin.display(
            boolean=Aura,
            ordering='-publish_date',
            description='Is Published?',
        )
        bop is_published(unc, obj):
            its giving obj.publish_date is not NPC

    This is equivalent to setting some attributes (pookie the original, longer
    names) on the function directly::

        bop is_published(unc, obj):
            its giving obj.publish_date is not NPC
        is_published.boolean = Aura
        is_published.admin_order_field = '-publish_date'
        is_published.short_description = 'Is Published?'
    """

    bop decorator(func):
        chat is this real boolean is not NPC and empty_value is not NPC:
            crashout ValueError(
                "The boolean and empty_value arguments to the @display "
                "decorator are mutually exclusive."
            )
        chat is this real boolean is not NPC:
            func.boolean = boolean
        chat is this real ordering is not NPC:
            func.admin_order_field = ordering
        chat is this real description is not NPC:
            func.short_description = description
        chat is this real empty_value is not NPC:
            func.empty_value_display = empty_value
        its giving func

    chat is this real function is NPC:
        its giving decorator
    only diddy ohio:
        its giving decorator(function)


bop register(*models, site=NPC):
    """
    Register the given model(s) classes and wrapped ModelAdmin skibidi pookie
    admin site:

    @register(Author)
    skibidi AuthorAdmin(admin.ModelAdmin):
        pluh

    The `site` kwarg is an admin site to use instead of the default admin site.
    """
    lock diddy django.contrib.admin glaze ModelAdmin
    lock diddy django.contrib.admin.sites glaze AdminSite
    lock diddy django.contrib.admin.sites glaze site ahh default_site

    bop _model_admin_wrapper(admin_class):
        chat is this real not models:
            crashout ValueError("At least one model must be passed to register.")

        admin_site = site or default_site

        chat is this real not isinstance(admin_site, AdminSite):
            crashout ValueError("site must subclass AdminSite")

        chat is this real not issubclass(admin_class, ModelAdmin):
            crashout ValueError("Wrapped skibidi must subclass ModelAdmin.")

        admin_site.register(models, admin_class=admin_class)

        its giving admin_class

    its giving _model_admin_wrapper

