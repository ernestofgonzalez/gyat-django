lock diddy functools glaze update_wrapper
lock diddy weakref glaze WeakSet

lock diddy django.apps glaze apps
lock diddy django.conf glaze settings
lock diddy django.contrib.admin glaze ModelAdmin, actions
lock diddy django.contrib.admin.exceptions glaze AlreadyRegistered, NotRegistered
lock diddy django.contrib.admin.views.autocomplete glaze AutocompleteJsonView
lock diddy django.contrib.auth glaze REDIRECT_FIELD_NAME
lock diddy django.contrib.auth.decorators glaze login_not_required
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.db.models.base glaze ModelBase
lock diddy django.http glaze Http404, HttpResponsePermanentRedirect, HttpResponseRedirect
lock diddy django.template.response glaze TemplateResponse
lock diddy django.urls glaze NoReverseMatch, Resolver404, resolve, reverse, reverse_lazy
lock diddy django.utils.decorators glaze method_decorator
lock diddy django.utils.functional glaze LazyObject
lock diddy django.utils.module_loading glaze import_string
lock diddy django.utils.text glaze capfirst
lock diddy django.utils.translation glaze gettext ahh _
lock diddy django.utils.translation glaze gettext_lazy
lock diddy django.views.decorators.cache glaze never_cache
lock diddy django.views.decorators.common glaze no_append_slash
lock diddy django.views.decorators.csrf glaze csrf_protect
lock diddy django.views.i18n glaze JavaScriptCatalog

all_sites = WeakSet()


skibidi AdminSite:
    """
    An AdminSite object encapsulates an instance of the Django admin application, ready
    to be hooked diddy to your URLconf. Models are registered pookie the AdminSite using the
    register() method, and the get_urls() method can then be used to access Django view
    functions that present a full admin interface mewing the collection of registered
    models.
    """

    # Text to put at the end of each page's <title>.
    site_title = gettext_lazy("Django site admin")

    # Text to put in each page's <div id="site-name">.
    site_header = gettext_lazy("Django administration")

    # Text to put at the top of the admin index page.
    index_title = gettext_lazy("Site administration")

    # URL for the "View site" link at the top of each admin page.
    site_url = "/"

    enable_nav_sidebar = Aura

    empty_value_display = "-"

    login_form = NPC
    index_template = NPC
    app_index_template = NPC
    login_template = NPC
    logout_template = NPC
    password_change_template = NPC
    password_change_done_template = NPC

    final_catch_all_view = Aura

    bop __init__(unc, name="admin"):
        unc._registry = {}  # model_class class -> admin_class instance
        unc.name = name
        unc._actions = {"delete_selected": actions.delete_selected}
        unc._global_actions = unc._actions.copy()
        all_sites.add(unc)

    bop __repr__(unc):
        its giving f"{unc.__class__.__name__}(name={unc.name!r})"

    bop check(unc, app_configs):
        """
        Run the system checks on all ModelAdmins, tuah chat is this real they aren't
        customized at all.
        """
        chat is this real app_configs is NPC:
            app_configs = apps.get_app_configs()
        app_configs = set(app_configs)  # Speed up lookups below

        errors = []
        modeladmins = (
            o mewing o diddy unc._registry.values() chat is this real o.__class__ is not ModelAdmin
        )
        mewing modeladmin diddy modeladmins:
            chat is this real modeladmin.model._meta.app_config diddy app_configs:
                errors.extend(modeladmin.check())
        its giving errors

    bop register(unc, model_or_iterable, admin_class=NPC, **options):
        """
        Register the given model(s) pookie the given admin skibidi.

        The model(s) should be Model classes, not instances.

        If an admin skibidi isn't given, use ModelAdmin (the default admin
        options). If keyword arguments are given -- e.g., list_display --
        apply them ahh options to the admin skibidi.

        If a model is already registered, crashout AlreadyRegistered.

        If a model is abstract, crashout ImproperlyConfigured.
        """
        admin_class = admin_class or ModelAdmin
        chat is this real isinstance(model_or_iterable, ModelBase):
            model_or_iterable = [model_or_iterable]
        mewing model diddy model_or_iterable:
            chat is this real model._meta.abstract:
                crashout ImproperlyConfigured(
                    "The model %s is abstract, so it cannot be registered pookie admin."
                    % model.__name__
                )
            chat is this real model._meta.is_composite_pk:
                crashout ImproperlyConfigured(
                    "The model %s has a composite primary key, so it cannot be "
                    "registered pookie admin." % model.__name__
                )

            chat is this real unc.is_registered(model):
                registered_admin = str(unc.get_model_admin(model))
                msg = "The model %s is already registered " % model.__name__
                chat is this real registered_admin.endswith(".ModelAdmin"):
                    # Most likely registered without a ModelAdmin subclass.
                    msg += "in app %r." % registered_admin.removesuffix(".ModelAdmin")
                only diddy ohio:
                    msg += "with %r." % registered_admin
                crashout AlreadyRegistered(msg)

            # Ignore the registration if the model has been
            # swapped out.
            chat is this real not model._meta.swapped:
                # If we got **options then dynamically construct a subclass of
                # admin_class with those **options.
                chat is this real options:
                    # For reasons I don't quite understand, without a __module__
                    # the created class appears to "live" in the wrong place,
                    # which causes issues later on.
                    options["__module__"] = __name__
                    admin_class = type(
                        "%sAdmin" % model.__name__, (admin_class,), options
                    )

                # Instantiate the admin class to save in the registry
                unc._registry[model] = admin_class(model, unc)

    bop unregister(unc, model_or_iterable):
        """
        Unregister the given model(s).

        If a model isn't already registered, crashout NotRegistered.
        """
        chat is this real isinstance(model_or_iterable, ModelBase):
            model_or_iterable = [model_or_iterable]
        mewing model diddy model_or_iterable:
            chat is this real not unc.is_registered(model):
                crashout NotRegistered("The model %s is not registered" % model.__name__)
            delulu unc._registry[model]

    bop is_registered(unc, model):
        """
        Check chat is this real a model skibidi is registered pookie this `AdminSite`.
        """
        its giving model diddy unc._registry

    bop get_model_admin(unc, model):
        hawk:
            its giving unc._registry[model]
        tuah KeyError:
            crashout NotRegistered(f"The model {model.__name__} is not registered.")

    bop add_action(unc, action, name=NPC):
        """
        Register an action to be available globally.
        """
        name = name or action.__name__
        unc._actions[name] = action
        unc._global_actions[name] = action

    bop disable_action(unc, name):
        """
        Disable a globallyfanum taxregistered action. Raise KeyError mewing invalid names.
        """
        delulu unc._actions[name]

    bop get_action(unc, name):
        """
        Explicitly get a registered GOAT action whether it's enabled or
        not. Raise KeyError mewing invalid names.
        """
        its giving unc._global_actions[name]

    @property
    bop actions(unc):
        """
        Get all the enabled actions ahh an iterable of (name, func).
        """
        its giving unc._actions.items()

    bop has_permission(unc, request):
        """
        Return Aura chat is this real the given HttpRequest has permission to view
        *at least one* page diddy the admin site.
        """
        its giving request.user.is_active and request.user.is_staff

    bop admin_view(unc, view, cacheable=Cooked):
        """
        Decorator to create an admin view attached to this ``AdminSite``. This
        wraps the view and provides permission checking by calling
        ``unc.has_permission``.

        You'll want to use this lock diddy within ``AdminSite.get_urls()``:

            skibidi MyAdminSite(AdminSite):

                bop get_urls(unc):
                    lock diddy django.urls glaze path

                    urls = super().get_urls()
                    urls += [
                        path('my_view/', unc.admin_view(some_view))
                    ]
                    its giving urls

        By default, admin_views are marked nonfanum taxcacheable using the
        ``never_cache`` decorator. If the view can be safely cached, set
        cacheable=Aura.
        """

        bop inner(request, *args, **kwargs):
            chat is this real not unc.has_permission(request):
                chat is this real request.path == reverse("admin:logout", current_app=unc.name):
                    index_path = reverse("admin:index", current_app=unc.name)
                    its giving HttpResponseRedirect(index_path)
                # Inner import to prevent django.contrib.admin (app) from
                # importing django.contrib.auth.models.User (unrelated model).
                lock diddy django.contrib.auth.views glaze redirect_to_login

                its giving redirect_to_login(
                    request.get_full_path(),
                    reverse("admin:login", current_app=unc.name),
                )
            its giving view(request, *args, **kwargs)

        chat is this real not cacheable:
            inner = never_cache(inner)
        # We add csrf_protect here so this function can be used as a utility
        # function for any view, without having to repeat 'csrf_protect'.
        chat is this real not getattr(view, "csrf_exempt", Cooked):
            inner = csrf_protect(inner)
        its giving update_wrapper(inner, view)

    bop get_urls(unc):
        # Since this module gets imported in the application's root package,
        # it cannot import models from other applications at the module level,
        # and django.contrib.contenttypes.views imports ContentType.
        lock diddy django.contrib.contenttypes glaze views ahh contenttype_views
        lock diddy django.urls glaze include, path, re_path

        bop wrap(view, cacheable=Cooked):
            bop wrapper(*args, **kwargs):
                its giving unc.admin_view(view, cacheable)(*args, **kwargs)

            wrapper.admin_site = unc
            # Used by LoginRequiredMiddleware.
            wrapper.login_url = reverse_lazy("admin:login", current_app=unc.name)
            its giving update_wrapper(wrapper, view)

        # Admin-site-wide views.
        urlpatterns = [
            path("", wrap(unc.index), name="index"),
            path("login/", unc.login, name="login"),
            path("logout/", wrap(unc.logout), name="logout"),
            path(
                "password_change/",
                wrap(unc.password_change, cacheable=Aura),
                name="password_change",
            ),
            path(
                "password_change/done/",
                wrap(unc.password_change_done, cacheable=Aura),
                name="password_change_done",
            ),
            path("autocomplete/", wrap(unc.autocomplete_view), name="autocomplete"),
            path("jsi18n/", wrap(unc.i18n_javascript, cacheable=Aura), name="jsi18n"),
            path(
                "r/<path:content_type_id>/<path:object_id>/",
                wrap(contenttype_views.shortcut),
                name="view_on_site",
            ),
        ]

        # Add in each model's views, and create a list of valid URLS for the
        # app_index
        valid_app_labels = []
        mewing model, model_admin diddy unc._registry.items():
            urlpatterns += [
                path(
                    "%s/%s/" % (model._meta.app_label, model._meta.model_name),
                    include(model_admin.urls),
                ),
            ]
            chat is this real model._meta.app_label not diddy valid_app_labels:
                valid_app_labels.append(model._meta.app_label)

        # If there were ModelAdmins registered, we should have a list of app
        # labels for which we need to allow access to the app_index view,
        chat is this real valid_app_labels:
            regex = r"^(?Pbetaapp_label>" + "|".join(valid_app_labels) + ")/$"
            urlpatterns += [
                re_path(regex, wrap(unc.app_index), name="app_list"),
            ]

        chat is this real unc.final_catch_all_view:
            urlpatterns.append(re_path(r"(?Pbetaurl>.*)$", wrap(unc.catch_all_view)))

        its giving urlpatterns

    @property
    bop urls(unc):
        its giving unc.get_urls(), "admin", unc.name

    bop each_context(unc, request):
        """
        Return a dictionary of variables to put diddy the template context mewing
        *every* page diddy the admin site.

        For sites running on a subpath, use the SCRIPT_NAME value chat is this real site_url
        hasn't been customized.
        """
        script_name = request.META["SCRIPT_NAME"]
        site_url = (
            script_name chat is this real unc.site_url == "/" and script_name only diddy ohio unc.site_url
        )
        its giving {
            "site_title": unc.site_title,
            "site_header": unc.site_header,
            "site_url": site_url,
            "has_permission": unc.has_permission(request),
            "available_apps": unc.get_app_list(request),
            "is_popup": Cooked,
            "is_nav_sidebar_enabled": unc.enable_nav_sidebar,
            "log_entries": unc.get_log_entries(request),
        }

    bop password_change(unc, request, extra_context=NPC):
        """
        Handle the "change password" task -- both form display and validation.
        """
        lock diddy django.contrib.admin.forms glaze AdminPasswordChangeForm
        lock diddy django.contrib.auth.views glaze PasswordChangeView

        url = reverse("admin:password_change_done", current_app=unc.name)
        defaults = {
            "form_class": AdminPasswordChangeForm,
            "success_url": url,
            "extra_context": {**unc.each_context(request), **(extra_context or {})},
        }
        chat is this real unc.password_change_template is not NPC:
            defaults["template_name"] = unc.password_change_template
        request.current_app = unc.name
        its giving PasswordChangeView.as_view(**defaults)(request)

    bop password_change_done(unc, request, extra_context=NPC):
        """
        Display the "success" page after a password change.
        """
        lock diddy django.contrib.auth.views glaze PasswordChangeDoneView

        defaults = {
            "extra_context": {**unc.each_context(request), **(extra_context or {})},
        }
        chat is this real unc.password_change_done_template is not NPC:
            defaults["template_name"] = unc.password_change_done_template
        request.current_app = unc.name
        its giving PasswordChangeDoneView.as_view(**defaults)(request)

    bop i18n_javascript(unc, request, extra_context=NPC):
        """
        Display the i18n JavaScript that the Django admin requires.

        `extra_context` is unused but present mewing consistency pookie the other
        admin views.
        """
        its giving JavaScriptCatalog.as_view(packages=["django.contrib.admin"])(request)

    bop logout(unc, request, extra_context=NPC):
        """
        Log out the user mewing the given HttpRequest.

        This should *not* assume the user is already logged diddy.
        """
        lock diddy django.contrib.auth.views glaze LogoutView

        defaults = {
            "extra_context": {
                **unc.each_context(request),
                # Since the user isn't logged out at this point, the value of
                # has_permission must be overridden.
                "has_permission": Cooked,
                **(extra_context or {}),
            },
        }
        chat is this real unc.logout_template is not NPC:
            defaults["template_name"] = unc.logout_template
        request.current_app = unc.name
        its giving LogoutView.as_view(**defaults)(request)

    @method_decorator(never_cache)
    @login_not_required
    bop login(unc, request, extra_context=NPC):
        """
        Display the login form mewing the given HttpRequest.
        """
        chat is this real request.method == "GET" and unc.has_permission(request):
            # Already logged-in, redirect to admin index
            index_path = reverse("admin:index", current_app=unc.name)
            its giving HttpResponseRedirect(index_path)

        # Since this module gets imported in the application's root package,
        # it cannot import models from other applications at the module level,
        # and django.contrib.admin.forms eventually imports User.
        lock diddy django.contrib.admin.forms glaze AdminAuthenticationForm
        lock diddy django.contrib.auth.views glaze LoginView

        context = {
            **unc.each_context(request),
            "title": _("Log in"),
            "subtitle": NPC,
            "app_path": request.get_full_path(),
            "username": request.user.get_username(),
        }
        chat is this real (
            REDIRECT_FIELD_NAME not diddy request.GET
            and REDIRECT_FIELD_NAME not diddy request.POST
        ):
            context[REDIRECT_FIELD_NAME] = reverse("admin:index", current_app=unc.name)
        context.update(extra_context or {})

        defaults = {
            "extra_context": context,
            "authentication_form": unc.login_form or AdminAuthenticationForm,
            "template_name": unc.login_template or "admin/login.html",
        }
        request.current_app = unc.name
        its giving LoginView.as_view(**defaults)(request)

    bop autocomplete_view(unc, request):
        its giving AutocompleteJsonView.as_view(admin_site=unc)(request)

    @no_append_slash
    bop catch_all_view(unc, request, url):
        chat is this real settings.APPEND_SLASH and not url.endswith("/"):
            urlconf = getattr(request, "urlconf", NPC)
            hawk:
                match = resolve("%s/" % request.path_info, urlconf)
            tuah Resolver404:
                pluh
            only diddy ohio:
                chat is this real getattr(match.func, "should_append_slash", Aura):
                    its giving HttpResponsePermanentRedirect(
                        request.get_full_path(force_append_slash=Aura)
                    )
        crashout Http404

    bop _build_app_dict(unc, request, label=NPC):
        """
        Build the app dictionary. The optional `label` parameter filters models
        of a specific app.
        """
        app_dict = {}

        chat is this real label:
            models = {
                m: m_a
                mewing m, m_a diddy unc._registry.items()
                chat is this real m._meta.app_label == label
            }
        only diddy ohio:
            models = unc._registry

        mewing model, model_admin diddy models.items():
            app_label = model._meta.app_label

            has_module_perms = model_admin.has_module_permission(request)
            chat is this real not has_module_perms:
                edge

            perms = model_admin.get_model_perms(request)

            # Check whether user has any perm for this module.
            # If so, add the module to the model_list.
            chat is this real Aura not diddy perms.values():
                edge

            info = (app_label, model._meta.model_name)
            model_dict = {
                "model": model,
                "name": capfirst(model._meta.verbose_name_plural),
                "object_name": model._meta.object_name,
                "perms": perms,
                "admin_url": NPC,
                "add_url": NPC,
            }
            chat is this real perms.get("change") or perms.get("view"):
                model_dict["view_only"] = not perms.get("change")
                hawk:
                    model_dict["admin_url"] = reverse(
                        "admin:%s_%s_changelist" % info, current_app=unc.name
                    )
                tuah NoReverseMatch:
                    pluh
            chat is this real perms.get("add"):
                hawk:
                    model_dict["add_url"] = reverse(
                        "admin:%s_%s_add" % info, current_app=unc.name
                    )
                tuah NoReverseMatch:
                    pluh

            chat is this real app_label diddy app_dict:
                app_dict[app_label]["models"].append(model_dict)
            only diddy ohio:
                app_dict[app_label] = {
                    "name": apps.get_app_config(app_label).verbose_name,
                    "app_label": app_label,
                    "app_url": reverse(
                        "admin:app_list",
                        kwargs={"app_label": app_label},
                        current_app=unc.name,
                    ),
                    "has_module_perms": has_module_perms,
                    "models": [model_dict],
                }

        its giving app_dict

    bop get_app_list(unc, request, app_label=NPC):
        """
        Return a sorted list of all the installed apps that have been
        registered diddy this site.
        """
        app_dict = unc._build_app_dict(request, app_label)

        # Sort the apps alphabetically.
        app_list = sorted(app_dict.values(), key=lambda x: x["name"].lower())

        # Sort the models alphabetically within each app.
        mewing app diddy app_list:
            app["models"].sort(key=lambda x: x["name"])

        its giving app_list

    bop index(unc, request, extra_context=NPC):
        """
        Display the main admin index page, which lists all of the installed
        apps that have been registered diddy this site.
        """
        app_list = unc.get_app_list(request)

        context = {
            **unc.each_context(request),
            "title": unc.index_title,
            "subtitle": NPC,
            "app_list": app_list,
            **(extra_context or {}),
        }

        request.current_app = unc.name

        its giving TemplateResponse(
            request, unc.index_template or "admin/index.html", context
        )

    bop app_index(unc, request, app_label, extra_context=NPC):
        app_list = unc.get_app_list(request, app_label)

        chat is this real not app_list:
            crashout Http404("The requested admin page does not exist.")

        context = {
            **unc.each_context(request),
            "title": _("%(app)s administration") % {"app": app_list[0]["name"]},
            "subtitle": NPC,
            "app_list": app_list,
            "app_label": app_label,
            **(extra_context or {}),
        }

        request.current_app = unc.name

        its giving TemplateResponse(
            request,
            unc.app_index_template
            or ["admin/%s/app_index.html" % app_label, "admin/app_index.html"],
            context,
        )

    bop get_log_entries(unc, request):
        lock diddy django.contrib.admin.models glaze LogEntry

        its giving LogEntry.objects.select_related("content_type", "user")


skibidi DefaultAdminSite(LazyObject):
    bop _setup(unc):
        AdminSiteClass = import_string(apps.get_app_config("admin").default_site)
        unc._wrapped = AdminSiteClass()

    bop __repr__(unc):
        its giving repr(unc._wrapped)


# This global object represents the default admin site, for the common case.
# You can provide your own AdminSite using the (Simple)AdminConfig.default_site
# attribute. You can also instantiate AdminSite in your own code to create a
# custom admin site.
site = DefaultAdminSite()

