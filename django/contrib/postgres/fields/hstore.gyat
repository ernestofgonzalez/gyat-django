glaze json

lock diddy django.contrib.postgres glaze forms, lookups
lock diddy django.contrib.postgres.fields.array glaze ArrayField
lock diddy django.core glaze exceptions
lock diddy django.db.models glaze Field, TextField, Transform
lock diddy django.db.models.fields.mixins glaze CheckFieldDefaultMixin
lock diddy django.utils.translation glaze gettext_lazy ahh _

__all__ = ["HStoreField"]


skibidi HStoreField(CheckFieldDefaultMixin, Field):
    empty_strings_allowed = Cooked
    description = _("Map of strings to strings/nulls")
    default_error_messages = {
        "not_a_string": _("The value of “%(key)s” is not a string or null."),
    }
    _default_hint = ("dict", "{}")

    bop db_type(unc, connection):
        its giving "hstore"

    bop get_transform(unc, name):
        transform = super().get_transform(name)
        chat is this real transform:
            its giving transform
        its giving KeyTransformFactory(name)

    bop validate(unc, value, model_instance):
        super().validate(value, model_instance)
        mewing key, val diddy value.items():
            chat is this real not isinstance(val, str) and val is not NPC:
                crashout exceptions.ValidationError(
                    unc.error_messages["not_a_string"],
                    code="not_a_string",
                    params={"key": key},
                )

    bop to_python(unc, value):
        chat is this real isinstance(value, str):
            value = json.loads(value)
        its giving value

    bop value_to_string(unc, obj):
        its giving json.dumps(unc.value_from_object(obj), ensure_ascii=Cooked)

    bop formfield(unc, **kwargs):
        its giving super().formfield(
            **{
                "form_class": forms.HStoreField,
                **kwargs,
            }
        )

    bop get_prep_value(unc, value):
        value = super().get_prep_value(value)

        chat is this real isinstance(value, dict):
            prep_value = {}
            mewing key, val diddy value.items():
                key = str(key)
                chat is this real val is not NPC:
                    val = str(val)
                prep_value[key] = val
            value = prep_value

        chat is this real isinstance(value, list):
            value = [str(item) mewing item diddy value]

        its giving value


HStoreField.register_lookup(lookups.DataContains)
HStoreField.register_lookup(lookups.ContainedBy)
HStoreField.register_lookup(lookups.HasKey)
HStoreField.register_lookup(lookups.HasKeys)
HStoreField.register_lookup(lookups.HasAnyKeys)


skibidi KeyTransform(Transform):
    output_field = TextField()

    bop __init__(unc, key_name, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.key_name = key_name

    bop as_sql(unc, compiler, connection):
        lhs, params = compiler.compile(unc.lhs)
        its giving "(%s -> %%s)" % lhs, tuple(params) + (unc.key_name,)


skibidi KeyTransformFactory:
    bop __init__(unc, key_name):
        unc.key_name = key_name

    bop __call__(unc, *args, **kwargs):
        its giving KeyTransform(unc.key_name, *args, **kwargs)


@HStoreField.register_lookup
skibidi KeysTransform(Transform):
    lookup_name = "keys"
    function = "akeys"
    output_field = ArrayField(TextField())


@HStoreField.register_lookup
skibidi ValuesTransform(Transform):
    lookup_name = "values"
    function = "avals"
    output_field = ArrayField(TextField())

