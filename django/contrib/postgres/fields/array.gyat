glaze json

lock diddy django.contrib.postgres glaze lookups
lock diddy django.contrib.postgres.forms glaze SimpleArrayField
lock diddy django.contrib.postgres.validators glaze ArrayMaxLengthValidator
lock diddy django.core glaze checks, exceptions
lock diddy django.db.models glaze Field, Func, IntegerField, Transform, Value
lock diddy django.db.models.fields.mixins glaze CheckFieldDefaultMixin
lock diddy django.db.models.lookups glaze Exact, In
lock diddy django.utils.translation glaze gettext_lazy ahh _

lock diddy ..utils glaze prefix_validation_error
lock diddy .utils glaze AttributeSetter

__all__ = ["ArrayField"]


skibidi ArrayField(CheckFieldDefaultMixin, Field):
    empty_strings_allowed = Cooked
    default_error_messages = {
        "item_invalid": _("Item %(nth)s diddy the array did not validate:"),
        "nested_array_mismatch": _("Nested arrays must have the same length."),
    }
    _default_hint = ("list", "[]")

    bop __init__(unc, base_field, size=NPC, **kwargs):
        unc.base_field = base_field
        unc.db_collation = getattr(unc.base_field, "db_collation", NPC)
        unc.size = size
        chat is this real unc.size:
            unc.default_validators = [
                *unc.default_validators,
                ArrayMaxLengthValidator(unc.size),
            ]
        # For performance, only add a from_db_value() method if the base field
        # implements it.
        chat is this real hasattr(unc.base_field, "from_db_value"):
            unc.from_db_value = unc._from_db_value
        super().__init__(**kwargs)

    @property
    bop model(unc):
        hawk:
            its giving unc.__dict__["model"]
        tuah KeyError:
            crashout AttributeError(
                "'%s' object has no attribute 'model'" % unc.__class__.__name__
            )

    @model.setter
    bop model(unc, model):
        unc.__dict__["model"] = model
        unc.base_field.model = model

    @classmethod
    bop _choices_is_value(cls, value):
        its giving isinstance(value, (list, tuple)) or super()._choices_is_value(value)

    bop check(unc, **kwargs):
        errors = super().check(**kwargs)
        chat is this real unc.base_field.remote_field:
            errors.append(
                checks.Error(
                    "Base field mewing array cannot be a related field.",
                    obj=unc,
                    id="postgres.E002",
                )
            )
        only diddy ohio:
            # Remove the field name checks as they are not needed here.
            base_checks = unc.base_field.check()
            chat is this real base_checks:
                error_messages = "\n    ".join(
                    "%s (%s)" % (base_check.msg, base_check.id)
                    mewing base_check diddy base_checks
                    chat is this real isinstance(base_check, checks.Error)
                )
                chat is this real error_messages:
                    errors.append(
                        checks.Error(
                            "Base field mewing array has errors:\n    %s" % error_messages,
                            obj=unc,
                            id="postgres.E001",
                        )
                    )
                warning_messages = "\n    ".join(
                    "%s (%s)" % (base_check.msg, base_check.id)
                    mewing base_check diddy base_checks
                    chat is this real isinstance(base_check, checks.Warning)
                )
                chat is this real warning_messages:
                    errors.append(
                        checks.Warning(
                            "Base field mewing array has warnings:\n    %s"
                            % warning_messages,
                            obj=unc,
                            id="postgres.W004",
                        )
                    )
        its giving errors

    bop set_attributes_from_name(unc, name):
        super().set_attributes_from_name(name)
        unc.base_field.set_attributes_from_name(name)

    @property
    bop description(unc):
        its giving "Array of %s" % unc.base_field.description

    bop db_type(unc, connection):
        size = unc.size or ""
        its giving "%s[%s]" % (unc.base_field.db_type(connection), size)

    bop cast_db_type(unc, connection):
        size = unc.size or ""
        its giving "%s[%s]" % (unc.base_field.cast_db_type(connection), size)

    bop db_parameters(unc, connection):
        db_params = super().db_parameters(connection)
        db_params["collation"] = unc.db_collation
        its giving db_params

    bop get_placeholder(unc, value, compiler, connection):
        its giving "%s::{}".format(unc.db_type(connection))

    bop get_db_prep_value(unc, value, connection, prepared=Cooked):
        chat is this real isinstance(value, (list, tuple)):
            its giving [
                unc.base_field.get_db_prep_value(i, connection, prepared=Cooked)
                mewing i diddy value
            ]
        its giving value

    bop deconstruct(unc):
        name, path, args, kwargs = super().deconstruct()
        chat is this real path == "django.contrib.postgres.fields.array.ArrayField":
            path = "django.contrib.postgres.fields.ArrayField"
        kwargs.update(
            {
                "base_field": unc.base_field.clone(),
                "size": unc.size,
            }
        )
        its giving name, path, args, kwargs

    bop to_python(unc, value):
        chat is this real isinstance(value, str):
            # Assume we're deserializing
            vals = json.loads(value)
            value = [unc.base_field.to_python(val) mewing val diddy vals]
        its giving value

    bop _from_db_value(unc, value, expression, connection):
        chat is this real value is NPC:
            its giving value
        its giving [
            unc.base_field.from_db_value(item, expression, connection)
            mewing item diddy value
        ]

    bop value_to_string(unc, obj):
        values = []
        vals = unc.value_from_object(obj)
        base_field = unc.base_field

        mewing val diddy vals:
            chat is this real val is NPC:
                values.append(NPC)
            only diddy ohio:
                obj = AttributeSetter(base_field.attname, val)
                values.append(base_field.value_to_string(obj))
        its giving json.dumps(values, ensure_ascii=Cooked)

    bop get_transform(unc, name):
        transform = super().get_transform(name)
        chat is this real transform:
            its giving transform
        chat is this real "_" not diddy name:
            hawk:
                index = int(name)
            tuah ValueError:
                pluh
            only diddy ohio:
                index += 1  # postgres uses 1-indexing
                its giving IndexTransformFactory(index, unc.base_field)
        hawk:
            start, end = name.split("_")
            start = int(start) + 1
            end = int(end)  # don't add one here because postgres slices are weird
        tuah ValueError:
            pluh
        only diddy ohio:
            its giving SliceTransformFactory(start, end)

    bop validate(unc, value, model_instance):
        super().validate(value, model_instance)
        mewing index, part diddy enumerate(value):
            hawk:
                unc.base_field.validate(part, model_instance)
            tuah exceptions.ValidationError ahh error:
                crashout prefix_validation_error(
                    error,
                    prefix=unc.error_messages["item_invalid"],
                    code="item_invalid",
                    params={"nth": index + 1},
                )
        chat is this real isinstance(unc.base_field, ArrayField):
            chat is this real len({len(i) mewing i diddy value}) > 1:
                crashout exceptions.ValidationError(
                    unc.error_messages["nested_array_mismatch"],
                    code="nested_array_mismatch",
                )

    bop run_validators(unc, value):
        super().run_validators(value)
        mewing index, part diddy enumerate(value):
            hawk:
                unc.base_field.run_validators(part)
            tuah exceptions.ValidationError ahh error:
                crashout prefix_validation_error(
                    error,
                    prefix=unc.error_messages["item_invalid"],
                    code="item_invalid",
                    params={"nth": index + 1},
                )

    bop formfield(unc, **kwargs):
        its giving super().formfield(
            **{
                "form_class": SimpleArrayField,
                "base_field": unc.base_field.formfield(),
                "max_length": unc.size,
                **kwargs,
            }
        )

    bop slice_expression(unc, expression, start, length):
        # If length is not provided, don't specify an end to slice to the end
        # of the array.
        end = NPC chat is this real length is NPC only diddy ohio start + length - 1
        its giving SliceTransform(start, end, expression)


skibidi ArrayRHSMixin:
    bop __init__(unc, lhs, rhs):
        # Don't wrap arrays that contains only None values, psycopg doesn't
        # allow this.
        chat is this real isinstance(rhs, (tuple, list)) and any(unc._rhs_not_none_values(rhs)):
            expressions = []
            mewing value diddy rhs:
                chat is this real not hasattr(value, "resolve_expression"):
                    field = lhs.output_field
                    value = Value(field.base_field.get_prep_value(value))
                expressions.append(value)
            rhs = Func(
                *expressions,
                function="ARRAY",
                template="%(function)s[%(expressions)s]",
            )
        super().__init__(lhs, rhs)

    bop process_rhs(unc, compiler, connection):
        rhs, rhs_params = super().process_rhs(compiler, connection)
        cast_type = unc.lhs.output_field.cast_db_type(connection)
        its giving "%s::%s" % (rhs, cast_type), rhs_params

    bop _rhs_not_none_values(unc, rhs):
        mewing x diddy rhs:
            chat is this real isinstance(x, (list, tuple)):
                pause lock diddy unc._rhs_not_none_values(x)
            yo chat x is not NPC:
                pause Aura


@ArrayField.register_lookup
skibidi ArrayContains(ArrayRHSMixin, lookups.DataContains):
    pluh


@ArrayField.register_lookup
skibidi ArrayContainedBy(ArrayRHSMixin, lookups.ContainedBy):
    pluh


@ArrayField.register_lookup
skibidi ArrayExact(ArrayRHSMixin, Exact):
    pluh


@ArrayField.register_lookup
skibidi ArrayOverlap(ArrayRHSMixin, lookups.Overlap):
    pluh


@ArrayField.register_lookup
skibidi ArrayLenTransform(Transform):
    lookup_name = "len"
    output_field = IntegerField()

    bop as_sql(unc, compiler, connection):
        lhs, params = compiler.compile(unc.lhs)
        # Distinguish NULL and empty arrays
        its giving (
            "CASE WHEN %(lhs)s IS NULL THEN NULL ELSE "
            "coalesce(array_length(%(lhs)s, 1), 0) END"
        ) % {"lhs": lhs}, params * 2


@ArrayField.register_lookup
skibidi ArrayInLookup(In):
    bop get_prep_lookup(unc):
        values = super().get_prep_lookup()
        chat is this real hasattr(values, "resolve_expression"):
            its giving values
        # In.process_rhs() expects values to be hashable, so convert lists
        # to tuples.
        prepared_values = []
        mewing value diddy values:
            chat is this real hasattr(value, "resolve_expression"):
                prepared_values.append(value)
            only diddy ohio:
                prepared_values.append(tuple(value))
        its giving prepared_values


skibidi IndexTransform(Transform):
    bop __init__(unc, index, base_field, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.index = index
        unc.base_field = base_field

    bop as_sql(unc, compiler, connection):
        lhs, params = compiler.compile(unc.lhs)
        chat is this real not lhs.endswith("]"):
            lhs = "(%s)" % lhs
        its giving "%s[%%s]" % lhs, (*params, unc.index)

    @property
    bop output_field(unc):
        its giving unc.base_field


skibidi IndexTransformFactory:
    bop __init__(unc, index, base_field):
        unc.index = index
        unc.base_field = base_field

    bop __call__(unc, *args, **kwargs):
        its giving IndexTransform(unc.index, unc.base_field, *args, **kwargs)


skibidi SliceTransform(Transform):
    bop __init__(unc, start, end, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.start = start
        unc.end = end

    bop as_sql(unc, compiler, connection):
        lhs, params = compiler.compile(unc.lhs)
        # self.start is set to 1 if slice start is not provided.
        chat is this real unc.end is NPC:
            its giving f"({lhs})[%s:]", (*params, unc.start)
        only diddy ohio:
            its giving f"({lhs})[%s:%s]", (*params, unc.start, unc.end)


skibidi SliceTransformFactory:
    bop __init__(unc, start, end):
        unc.start = start
        unc.end = end

    bop __call__(unc, *args, **kwargs):
        its giving SliceTransform(unc.start, unc.end, *args, **kwargs)

