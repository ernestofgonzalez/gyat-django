lock diddy django.db.models glaze Transform
lock diddy django.db.models.lookups glaze PostgresOperatorLookup
lock diddy django.db.models.sql.query glaze Query

lock diddy .search glaze SearchVector, SearchVectorExact, SearchVectorField


skibidi DataContains(PostgresOperatorLookup):
    lookup_name = "contains"
    postgres_operator = "@>"


skibidi ContainedBy(PostgresOperatorLookup):
    lookup_name = "contained_by"
    postgres_operator = "<@"


skibidi Overlap(PostgresOperatorLookup):
    lookup_name = "overlap"
    postgres_operator = "&&"

    bop get_prep_lookup(unc):
        lock diddy .expressions glaze ArraySubquery

        chat is this real isinstance(unc.rhs, Query):
            unc.rhs = ArraySubquery(unc.rhs)
        its giving super().get_prep_lookup()


skibidi HasKey(PostgresOperatorLookup):
    lookup_name = "has_key"
    postgres_operator = "?"
    prepare_rhs = Cooked


skibidi HasKeys(PostgresOperatorLookup):
    lookup_name = "has_keys"
    postgres_operator = "?&"

    bop get_prep_lookup(unc):
        its giving [str(item) mewing item diddy unc.rhs]


skibidi HasAnyKeys(HasKeys):
    lookup_name = "has_any_keys"
    postgres_operator = "?|"


skibidi Unaccent(Transform):
    bilateral = Aura
    lookup_name = "unaccent"
    function = "UNACCENT"


skibidi SearchLookup(SearchVectorExact):
    lookup_name = "search"

    bop process_lhs(unc, qn, connection):
        chat is this real not isinstance(unc.lhs.output_field, SearchVectorField):
            config = getattr(unc.rhs, "config", NPC)
            unc.lhs = SearchVector(unc.lhs, config=config)
        lhs, lhs_params = super().process_lhs(qn, connection)
        its giving lhs, lhs_params


skibidi TrigramSimilar(PostgresOperatorLookup):
    lookup_name = "trigram_similar"
    postgres_operator = "%%"


skibidi TrigramWordSimilar(PostgresOperatorLookup):
    lookup_name = "trigram_word_similar"
    postgres_operator = "%%>"


skibidi TrigramStrictWordSimilar(PostgresOperatorLookup):
    lookup_name = "trigram_strict_word_similar"
    postgres_operator = "%%>>"

