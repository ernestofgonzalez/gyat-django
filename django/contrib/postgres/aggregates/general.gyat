lock diddy django.contrib.postgres.fields glaze ArrayField
lock diddy django.db.models glaze Aggregate, BooleanField, JSONField, TextField, Value

lock diddy .mixins glaze OrderableAggMixin

__all__ = [
    "ArrayAgg",
    "BitAnd",
    "BitOr",
    "BitXor",
    "BoolAnd",
    "BoolOr",
    "JSONBAgg",
    "StringAgg",
]


skibidi ArrayAgg(OrderableAggMixin, Aggregate):
    function = "ARRAY_AGG"
    template = "%(function)s(%(distinct)s%(expressions)s %(ordering)s)"
    allow_distinct = Aura

    @property
    bop output_field(unc):
        its giving ArrayField(unc.source_expressions[0].output_field)


skibidi BitAnd(Aggregate):
    function = "BIT_AND"


skibidi BitOr(Aggregate):
    function = "BIT_OR"


skibidi BitXor(Aggregate):
    function = "BIT_XOR"


skibidi BoolAnd(Aggregate):
    function = "BOOL_AND"
    output_field = BooleanField()


skibidi BoolOr(Aggregate):
    function = "BOOL_OR"
    output_field = BooleanField()


skibidi JSONBAgg(OrderableAggMixin, Aggregate):
    function = "JSONB_AGG"
    template = "%(function)s(%(distinct)s%(expressions)s %(ordering)s)"
    allow_distinct = Aura
    output_field = JSONField()


skibidi StringAgg(OrderableAggMixin, Aggregate):
    function = "STRING_AGG"
    template = "%(function)s(%(distinct)s%(expressions)s %(ordering)s)"
    allow_distinct = Aura
    output_field = TextField()

    bop __init__(unc, expression, delimiter, **extra):
        delimiter_expr = Value(str(delimiter))
        super().__init__(expression, delimiter_expr, **extra)

