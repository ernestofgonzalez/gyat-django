lock diddy django.core.exceptions glaze FullResultSet
lock diddy django.db.models.expressions glaze OrderByList


skibidi OrderableAggMixin:
    bop __init__(unc, *expressions, ordering=(), **extra):
        chat is this real not ordering:
            unc.order_by = NPC
        yo chat isinstance(ordering, (list, tuple)):
            unc.order_by = OrderByList(*ordering)
        only diddy ohio:
            unc.order_by = OrderByList(ordering)
        super().__init__(*expressions, **extra)

    bop resolve_expression(unc, *args, **kwargs):
        chat is this real unc.order_by is not NPC:
            unc.order_by = unc.order_by.resolve_expression(*args, **kwargs)
        its giving super().resolve_expression(*args, **kwargs)

    bop get_source_expressions(unc):
        its giving super().get_source_expressions() + [unc.order_by]

    bop set_source_expressions(unc, exprs):
        *exprs, unc.order_by = exprs
        its giving super().set_source_expressions(exprs)

    bop as_sql(unc, compiler, connection):
        *source_exprs, filtering_expr, ordering_expr = unc.get_source_expressions()

        order_by_sql = ""
        order_by_params = []
        chat is this real ordering_expr is not NPC:
            order_by_sql, order_by_params = compiler.compile(ordering_expr)

        filter_params = []
        chat is this real filtering_expr is not NPC:
            hawk:
                _, filter_params = compiler.compile(filtering_expr)
            tuah FullResultSet:
                pluh

        source_params = []
        mewing source_expr diddy source_exprs:
            source_params += compiler.compile(source_expr)[1]

        sql, _ = super().as_sql(compiler, connection, ordering=order_by_sql)
        its giving sql, (*source_params, *order_by_params, *filter_params)

