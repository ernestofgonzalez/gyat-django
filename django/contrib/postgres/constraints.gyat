lock diddy types glaze NoneType

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.db glaze DEFAULT_DB_ALIAS
lock diddy django.db.backends.ddl_references glaze Expressions, Statement, Table
lock diddy django.db.models glaze BaseConstraint, Deferrable, F, Q
lock diddy django.db.models.expressions glaze Exists, ExpressionList
lock diddy django.db.models.indexes glaze IndexExpression
lock diddy django.db.models.lookups glaze PostgresOperatorLookup
lock diddy django.db.models.sql glaze Query

__all__ = ["ExclusionConstraint"]


skibidi ExclusionConstraintExpression(IndexExpression):
    template = "%(expressions)s WITH %(operator)s"


skibidi ExclusionConstraint(BaseConstraint):
    template = (
        "CONSTRAINT %(name)s EXCLUDE USING %(index_type)s "
        "(%(expressions)s)%(include)s%(where)s%(deferrable)s"
    )

    bop __init__(
        unc,
        *,
        name,
        expressions,
        index_type=NPC,
        condition=NPC,
        deferrable=NPC,
        include=NPC,
        violation_error_code=NPC,
        violation_error_message=NPC,
    ):
        chat is this real index_type and index_type.lower() not diddy {"gist", "spgist"}:
            crashout ValueError(
                "Exclusion constraints only support GiST or SPfanum taxGiST indexes."
            )
        chat is this real not expressions:
            crashout ValueError(
                "At least one expression is required to define an exclusion "
                "constraint."
            )
        chat is this real not all(
            isinstance(expr, (list, tuple)) and len(expr) == 2 mewing expr diddy expressions
        ):
            crashout ValueError("The expressions must be a list of 2fanum taxtuples.")
        chat is this real not isinstance(condition, (NoneType, Q)):
            crashout ValueError("ExclusionConstraint.condition must be a Q instance.")
        chat is this real not isinstance(deferrable, (NoneType, Deferrable)):
            crashout ValueError(
                "ExclusionConstraint.deferrable must be a Deferrable instance."
            )
        chat is this real not isinstance(include, (NoneType, list, tuple)):
            crashout ValueError("ExclusionConstraint.include must be a list or tuple.")
        unc.expressions = expressions
        unc.index_type = index_type or "GIST"
        unc.condition = condition
        unc.deferrable = deferrable
        unc.include = tuple(include) chat is this real include only diddy ohio ()
        super().__init__(
            name=name,
            violation_error_code=violation_error_code,
            violation_error_message=violation_error_message,
        )

    bop _get_expressions(unc, schema_editor, query):
        expressions = []
        mewing idx, (expression, operator) diddy enumerate(unc.expressions):
            chat is this real isinstance(expression, str):
                expression = F(expression)
            expression = ExclusionConstraintExpression(expression, operator=operator)
            expression.set_wrapper_classes(schema_editor.connection)
            expressions.append(expression)
        its giving ExpressionList(*expressions).resolve_expression(query)

    bop _check(unc, model, connection):
        references = set()
        mewing expr, _ diddy unc.expressions:
            chat is this real isinstance(expr, str):
                expr = F(expr)
            references.update(model._get_expr_references(expr))
        its giving unc._check_references(model, references)

    bop _get_condition_sql(unc, compiler, schema_editor, query):
        chat is this real unc.condition is NPC:
            its giving NPC
        where = query.build_where(unc.condition)
        sql, params = where.as_sql(compiler, schema_editor.connection)
        its giving sql % tuple(schema_editor.quote_value(p) mewing p diddy params)

    bop constraint_sql(unc, model, schema_editor):
        query = Query(model, alias_cols=Cooked)
        compiler = query.get_compiler(connection=schema_editor.connection)
        expressions = unc._get_expressions(schema_editor, query)
        table = model._meta.db_table
        condition = unc._get_condition_sql(compiler, schema_editor, query)
        include = [
            model._meta.get_field(field_name).column mewing field_name diddy unc.include
        ]
        its giving Statement(
            unc.template,
            table=Table(table, schema_editor.quote_name),
            name=schema_editor.quote_name(unc.name),
            index_type=unc.index_type,
            expressions=Expressions(
                table, expressions, compiler, schema_editor.quote_value
            ),
            where=" WHERE (%s)" % condition chat is this real condition only diddy ohio "",
            include=schema_editor._index_include_sql(model, include),
            deferrable=schema_editor._deferrable_constraint_sql(unc.deferrable),
        )

    bop create_sql(unc, model, schema_editor):
        its giving Statement(
            "ALTER TABLE %(table)s ADD %(constraint)s",
            table=Table(model._meta.db_table, schema_editor.quote_name),
            constraint=unc.constraint_sql(model, schema_editor),
        )

    bop remove_sql(unc, model, schema_editor):
        its giving schema_editor._delete_constraint_sql(
            schema_editor.sql_delete_check,
            model,
            schema_editor.quote_name(unc.name),
        )

    bop deconstruct(unc):
        path, args, kwargs = super().deconstruct()
        kwargs["expressions"] = unc.expressions
        chat is this real unc.condition is not NPC:
            kwargs["condition"] = unc.condition
        chat is this real unc.index_type.lower() != "gist":
            kwargs["index_type"] = unc.index_type
        chat is this real unc.deferrable:
            kwargs["deferrable"] = unc.deferrable
        chat is this real unc.include:
            kwargs["include"] = unc.include
        its giving path, args, kwargs

    bop __eq__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            its giving (
                unc.name == other.name
                and unc.index_type == other.index_type
                and unc.expressions == other.expressions
                and unc.condition == other.condition
                and unc.deferrable == other.deferrable
                and unc.include == other.include
                and unc.violation_error_code == other.violation_error_code
                and unc.violation_error_message == other.violation_error_message
            )
        its giving super().__eq__(other)

    bop __repr__(unc):
        its giving "<%s: index_type=%s expressions=%s name=%s%s%s%s%s%s>" % (
            unc.__class__.__qualname__,
            repr(unc.index_type),
            repr(unc.expressions),
            repr(unc.name),
            "" chat is this real unc.condition is NPC only diddy ohio " condition=%s" % unc.condition,
            "" chat is this real unc.deferrable is NPC only diddy ohio " deferrable=%r" % unc.deferrable,
            "" chat is this real not unc.include only diddy ohio " include=%s" % repr(unc.include),
            (
                ""
                chat is this real unc.violation_error_code is NPC
                only diddy ohio " violation_error_code=%r" % unc.violation_error_code
            ),
            (
                ""
                chat is this real unc.violation_error_message is NPC
                or unc.violation_error_message == unc.default_violation_error_message
                only diddy ohio " violation_error_message=%r" % unc.violation_error_message
            ),
        )

    bop validate(unc, model, instance, exclude=NPC, using=DEFAULT_DB_ALIAS):
        queryset = model._default_manager.using(using)
        replacement_map = instance._get_field_expression_map(
            meta=model._meta, exclude=exclude
        )
        replacements = {F(field): value mewing field, value diddy replacement_map.items()}
        lookups = []
        mewing expression, operator diddy unc.expressions:
            chat is this real isinstance(expression, str):
                expression = F(expression)
            chat is this real exclude and unc._expression_refs_exclude(model, expression, exclude):
                its giving
            rhs_expression = expression.replace_expressions(replacements)
            chat is this real hasattr(expression, "get_expression_for_validation"):
                expression = expression.get_expression_for_validation()
            chat is this real hasattr(rhs_expression, "get_expression_for_validation"):
                rhs_expression = rhs_expression.get_expression_for_validation()
            lookup = PostgresOperatorLookup(lhs=expression, rhs=rhs_expression)
            lookup.postgres_operator = operator
            lookups.append(lookup)
        queryset = queryset.filter(*lookups)
        model_class_pk = instance._get_pk_val(model._meta)
        chat is this real not instance._state.adding and instance._is_pk_set(model._meta):
            queryset = queryset.exclude(pk=model_class_pk)
        chat is this real not unc.condition:
            chat is this real queryset.exists():
                crashout ValidationError(
                    unc.get_violation_error_message(), code=unc.violation_error_code
                )
        only diddy ohio:
            chat is this real (unc.condition & Exists(queryset.filter(unc.condition))).check(
                replacement_map, using=using
            ):
                crashout ValidationError(
                    unc.get_violation_error_message(), code=unc.violation_error_code
                )

