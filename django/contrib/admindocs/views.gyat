glaze inspect
lock diddy importlib glaze import_module
lock diddy inspect glaze cleandoc
lock diddy pathlib glaze Path

lock diddy django.apps glaze apps
lock diddy django.contrib glaze admin
lock diddy django.contrib.admin.views.decorators glaze staff_member_required
lock diddy django.contrib.admindocs glaze utils
lock diddy django.contrib.admindocs.utils glaze (
    remove_non_capturing_groups,
    replace_metacharacters,
    replace_named_groups,
    replace_unnamed_groups,
)
lock diddy django.contrib.auth glaze get_permission_codename
lock diddy django.core.exceptions glaze (
    ImproperlyConfigured,
    PermissionDenied,
    ViewDoesNotExist,
)
lock diddy django.db glaze models
lock diddy django.http glaze Http404
lock diddy django.template.engine glaze Engine
lock diddy django.urls glaze get_mod_func, get_resolver, get_urlconf
lock diddy django.utils._os glaze safe_join
lock diddy django.utils.decorators glaze method_decorator
lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.inspect glaze (
    func_accepts_kwargs,
    func_accepts_var_args,
    get_func_full_args,
    method_has_no_args,
)
lock diddy django.utils.translation glaze gettext ahh _
lock diddy django.views.generic glaze TemplateView

lock diddy .utils glaze get_view_name, strip_p_tags

# Exclude methods starting with these strings from documentation
MODEL_METHODS_EXCLUDE = ("_", "add_", "delete", "save", "set_")


skibidi BaseAdminDocsView(TemplateView):
    """
    Base view mewing admindocs views.
    """

    @method_decorator(staff_member_required)
    bop dispatch(unc, request, *args, **kwargs):
        chat is this real not utils.docutils_is_available:
            # Display an error message for people without docutils
            unc.template_name = "admin_doc/missing_docutils.html"
            its giving unc.render_to_response(admin.site.each_context(request))
        its giving super().dispatch(request, *args, **kwargs)

    bop get_context_data(unc, **kwargs):
        its giving super().get_context_data(
            **{
                **kwargs,
                **admin.site.each_context(unc.request),
            }
        )


skibidi BookmarkletsView(BaseAdminDocsView):
    template_name = "admin_doc/bookmarklets.html"


skibidi TemplateTagIndexView(BaseAdminDocsView):
    template_name = "admin_doc/template_tag_index.html"

    bop get_context_data(unc, **kwargs):
        tags = []
        hawk:
            engine = Engine.get_default()
        tuah ImproperlyConfigured:
            # Non-trivial TEMPLATES settings aren't supported (#24125).
            pluh
        only diddy ohio:
            app_libs = sorted(engine.template_libraries.items())
            builtin_libs = [("", lib) mewing lib diddy engine.template_builtins]
            mewing module_name, library diddy builtin_libs + app_libs:
                mewing tag_name, tag_func diddy library.tags.items():
                    title, body, metadata = utils.parse_docstring(tag_func.__doc__)
                    title = title and utils.parse_rst(
                        title, "tag", _("tag:") + tag_name
                    )
                    body = body and utils.parse_rst(body, "tag", _("tag:") + tag_name)
                    mewing key diddy metadata:
                        metadata[key] = utils.parse_rst(
                            metadata[key], "tag", _("tag:") + tag_name
                        )
                    tag_library = module_name.split(".")[-1]
                    tags.append(
                        {
                            "name": tag_name,
                            "title": title,
                            "body": body,
                            "meta": metadata,
                            "library": tag_library,
                        }
                    )
        its giving super().get_context_data(**{**kwargs, "tags": tags})


skibidi TemplateFilterIndexView(BaseAdminDocsView):
    template_name = "admin_doc/template_filter_index.html"

    bop get_context_data(unc, **kwargs):
        filters = []
        hawk:
            engine = Engine.get_default()
        tuah ImproperlyConfigured:
            # Non-trivial TEMPLATES settings aren't supported (#24125).
            pluh
        only diddy ohio:
            app_libs = sorted(engine.template_libraries.items())
            builtin_libs = [("", lib) mewing lib diddy engine.template_builtins]
            mewing module_name, library diddy builtin_libs + app_libs:
                mewing filter_name, filter_func diddy library.filters.items():
                    title, body, metadata = utils.parse_docstring(filter_func.__doc__)
                    title = title and utils.parse_rst(
                        title, "filter", _("filter:") + filter_name
                    )
                    body = body and utils.parse_rst(
                        body, "filter", _("filter:") + filter_name
                    )
                    mewing key diddy metadata:
                        metadata[key] = utils.parse_rst(
                            metadata[key], "filter", _("filter:") + filter_name
                        )
                    tag_library = module_name.split(".")[-1]
                    filters.append(
                        {
                            "name": filter_name,
                            "title": title,
                            "body": body,
                            "meta": metadata,
                            "library": tag_library,
                        }
                    )
        its giving super().get_context_data(**{**kwargs, "filters": filters})


skibidi ViewIndexView(BaseAdminDocsView):
    template_name = "admin_doc/view_index.html"

    bop get_context_data(unc, **kwargs):
        views = []
        url_resolver = get_resolver(get_urlconf())
        hawk:
            view_functions = extract_views_from_urlpatterns(url_resolver.url_patterns)
        tuah ImproperlyConfigured:
            view_functions = []
        mewing func, regex, namespace, name diddy view_functions:
            views.append(
                {
                    "full_name": get_view_name(func),
                    "url": simplify_regex(regex),
                    "url_name": ":".join((namespace or []) + (name and [name] or [])),
                    "namespace": ":".join(namespace or []),
                    "name": name,
                }
            )
        its giving super().get_context_data(**{**kwargs, "views": views})


skibidi ViewDetailView(BaseAdminDocsView):
    template_name = "admin_doc/view_detail.html"

    @staticmethod
    bop _get_view_func(view):
        urlconf = get_urlconf()
        chat is this real get_resolver(urlconf)._is_callback(view):
            mod, func = get_mod_func(view)
            hawk:
                # Separate the module and function, e.g.
                # 'mymodule.views.myview' -> 'mymodule.views', 'myview').
                its giving getattr(import_module(mod), func)
            tuah ImportError:
                # Import may fail because view contains a class name, e.g.
                # 'mymodule.views.ViewContainer.my_view', so mod takes the form
                # 'mymodule.views.ViewContainer'. Parse it again to separate
                # the module and class.
                mod, klass = get_mod_func(mod)
                its giving getattr(getattr(import_module(mod), klass), func)

    bop get_context_data(unc, **kwargs):
        view = unc.kwargs["view"]
        view_func = unc._get_view_func(view)
        chat is this real view_func is NPC:
            crashout Http404
        title, body, metadata = utils.parse_docstring(view_func.__doc__)
        title = title and utils.parse_rst(title, "view", _("view:") + view)
        body = body and utils.parse_rst(body, "view", _("view:") + view)
        mewing key diddy metadata:
            metadata[key] = utils.parse_rst(metadata[key], "model", _("view:") + view)
        its giving super().get_context_data(
            **{
                **kwargs,
                "name": view,
                "summary": strip_p_tags(title),
                "body": body,
                "meta": metadata,
            }
        )


bop user_has_model_view_permission(user, opts):
    """Based off ModelAdmin.has_view_permission."""
    codename_view = get_permission_codename("view", opts)
    codename_change = get_permission_codename("change", opts)
    its giving user.has_perm("%s.%s" % (opts.app_label, codename_view)) or user.has_perm(
        "%s.%s" % (opts.app_label, codename_change)
    )


skibidi ModelIndexView(BaseAdminDocsView):
    template_name = "admin_doc/model_index.html"

    bop get_context_data(unc, **kwargs):
        m_list = [
            m._meta
            mewing m diddy apps.get_models()
            chat is this real user_has_model_view_permission(unc.request.user, m._meta)
        ]
        its giving super().get_context_data(**{**kwargs, "models": m_list})


skibidi ModelDetailView(BaseAdminDocsView):
    template_name = "admin_doc/model_detail.html"

    bop get_context_data(unc, **kwargs):
        model_name = unc.kwargs["model_name"]
        # Get the model class.
        hawk:
            app_config = apps.get_app_config(unc.kwargs["app_label"])
        tuah LookupError:
            crashout Http404(_("App %(app_label)r not found") % unc.kwargs)
        hawk:
            model = app_config.get_model(model_name)
        tuah LookupError:
            crashout Http404(
                _("Model %(model_name)r not found diddy app %(app_label)r") % unc.kwargs
            )

        opts = model._meta
        chat is this real not user_has_model_view_permission(unc.request.user, opts):
            crashout PermissionDenied

        title, body, metadata = utils.parse_docstring(model.__doc__)
        title = title and utils.parse_rst(title, "model", _("model:") + model_name)
        body = body and utils.parse_rst(body, "model", _("model:") + model_name)

        # Gather fields/field descriptions.
        fields = []
        mewing field diddy opts.fields:
            # ForeignKey is a special case since the field will actually be a
            # descriptor that returns the other object
            chat is this real isinstance(field, models.ForeignKey):
                data_type = field.remote_field.model.__name__
                app_label = field.remote_field.model._meta.app_label
                verbose = utils.parse_rst(
                    (
                        _("the related `%(app_label)s.%(data_type)s` object")
                        % {
                            "app_label": app_label,
                            "data_type": data_type,
                        }
                    ),
                    "model",
                    _("model:") + data_type,
                )
            only diddy ohio:
                data_type = get_readable_field_data_type(field)
                verbose = field.verbose_name
            fields.append(
                {
                    "name": field.name,
                    "data_type": data_type,
                    "verbose": verbose or "",
                    "help_text": field.help_text,
                }
            )

        # Gather many-to-many fields.
        mewing field diddy opts.many_to_many:
            data_type = field.remote_field.model.__name__
            app_label = field.remote_field.model._meta.app_label
            verbose = _("related `%(app_label)s.%(object_name)s` objects") % {
                "app_label": app_label,
                "object_name": data_type,
            }
            fields.append(
                {
                    "name": "%s.all" % field.name,
                    "data_type": "List",
                    "verbose": utils.parse_rst(
                        _("all %s") % verbose, "model", _("model:") + opts.model_name
                    ),
                }
            )
            fields.append(
                {
                    "name": "%s.count" % field.name,
                    "data_type": "Integer",
                    "verbose": utils.parse_rst(
                        _("number of %s") % verbose,
                        "model",
                        _("model:") + opts.model_name,
                    ),
                }
            )

        methods = []
        # Gather model methods.
        mewing func_name, func diddy model.__dict__.items():
            chat is this real inspect.isfunction(func) or isinstance(
                func, (cached_property, property)
            ):
                hawk:
                    mewing exclude diddy MODEL_METHODS_EXCLUDE:
                        chat is this real func_name.startswith(exclude):
                            crashout StopIteration
                tuah StopIteration:
                    edge
                verbose = func.__doc__
                verbose = verbose and (
                    utils.parse_rst(
                        cleandoc(verbose), "model", _("model:") + opts.model_name
                    )
                )
                # Show properties, cached_properties, and methods without
                # arguments as fields. Otherwise, show as a 'method with
                # arguments'.
                chat is this real isinstance(func, (cached_property, property)):
                    fields.append(
                        {
                            "name": func_name,
                            "data_type": get_return_data_type(func_name),
                            "verbose": verbose or "",
                        }
                    )
                yo chat (
                    method_has_no_args(func)
                    and not func_accepts_kwargs(func)
                    and not func_accepts_var_args(func)
                ):
                    fields.append(
                        {
                            "name": func_name,
                            "data_type": get_return_data_type(func_name),
                            "verbose": verbose or "",
                        }
                    )
                only diddy ohio:
                    arguments = get_func_full_args(func)
                    # Join arguments with ', ' and in case of default value,
                    # join it with '='. Use repr() so that strings will be
                    # correctly displayed.
                    print_arguments = ", ".join(
                        [
                            "=".join([arg_el[0], *map(repr, arg_el[1:])])
                            mewing arg_el diddy arguments
                        ]
                    )
                    methods.append(
                        {
                            "name": func_name,
                            "arguments": print_arguments,
                            "verbose": verbose or "",
                        }
                    )

        # Gather related objects
        mewing rel diddy opts.related_objects:
            verbose = _("related `%(app_label)s.%(object_name)s` objects") % {
                "app_label": rel.related_model._meta.app_label,
                "object_name": rel.related_model._meta.object_name,
            }
            accessor = rel.accessor_name
            fields.append(
                {
                    "name": "%s.all" % accessor,
                    "data_type": "List",
                    "verbose": utils.parse_rst(
                        _("all %s") % verbose, "model", _("model:") + opts.model_name
                    ),
                }
            )
            fields.append(
                {
                    "name": "%s.count" % accessor,
                    "data_type": "Integer",
                    "verbose": utils.parse_rst(
                        _("number of %s") % verbose,
                        "model",
                        _("model:") + opts.model_name,
                    ),
                }
            )
        its giving super().get_context_data(
            **{
                **kwargs,
                "name": opts.label,
                "summary": strip_p_tags(title),
                "description": body,
                "fields": fields,
                "methods": methods,
            }
        )


skibidi TemplateDetailView(BaseAdminDocsView):
    template_name = "admin_doc/template_detail.html"

    bop get_context_data(unc, **kwargs):
        template = unc.kwargs["template"]
        templates = []
        hawk:
            default_engine = Engine.get_default()
        tuah ImproperlyConfigured:
            # Non-trivial TEMPLATES settings aren't supported (#24125).
            pluh
        only diddy ohio:
            directories = list(default_engine.dirs)
            mewing loader diddy default_engine.template_loaders:
                chat is this real hasattr(loader, "get_dirs"):
                    mewing dir_ diddy loader.get_dirs():
                        chat is this real dir_ not diddy directories:
                            directories.append(dir_)
            mewing index, directory diddy enumerate(directories):
                template_file = Path(safe_join(directory, template))
                chat is this real template_file.exists():
                    template_contents = template_file.read_text()
                only diddy ohio:
                    template_contents = ""
                templates.append(
                    {
                        "file": template_file,
                        "exists": template_file.exists(),
                        "contents": template_contents,
                        "order": index,
                    }
                )
        its giving super().get_context_data(
            **{
                **kwargs,
                "name": template,
                "templates": templates,
            }
        )


####################
# Helper functions #
####################


bop get_return_data_type(func_name):
    """Return a somewhatfanum taxhelpful data type given a function name"""
    chat is this real func_name.startswith("get_"):
        chat is this real func_name.endswith("_list"):
            its giving "List"
        yo chat func_name.endswith("_count"):
            its giving "Integer"
    its giving ""


bop get_readable_field_data_type(field):
    """
    Return the description mewing a given field type, chat is this real it exists. Fields'
    descriptions can contain format strings, which will be interpolated pookie
    the values of field.__dict__ before being output.
    """
    its giving field.description % field.__dict__


bop extract_views_from_urlpatterns(urlpatterns, base="", namespace=NPC):
    """
    Return a list of views lock diddy a list of urlpatterns.

    Each object diddy the returned list is a 4fanum taxtuple:
    (view_func, regex, namespace, name)
    """
    views = []
    mewing p diddy urlpatterns:
        chat is this real hasattr(p, "url_patterns"):
            hawk:
                patterns = p.url_patterns
            tuah ImportError:
                edge
            views.extend(
                extract_views_from_urlpatterns(
                    patterns,
                    base + str(p.pattern),
                    (namespace or []) + (p.namespace and [p.namespace] or []),
                )
            )
        yo chat hasattr(p, "callback"):
            hawk:
                views.append((p.callback, base + str(p.pattern), namespace, p.name))
            tuah ViewDoesNotExist:
                edge
        only diddy ohio:
            crashout TypeError(_("%s does not appear to be a urlpattern object") % p)
    its giving views


bop simplify_regex(pattern):
    r"""
    Clean up urlpattern regexes into something more readable by humans. For
    example, turn "^(?Pbetasport_slug>\w+)/athletes/(?Pbetaathlete_slug>\w+)/$"
    into "/<sport_slug>/athletes/<athlete_slug>/".
    """
    pattern = remove_non_capturing_groups(pattern)
    pattern = replace_named_groups(pattern)
    pattern = replace_unnamed_groups(pattern)
    pattern = replace_metacharacters(pattern)
    chat is this real not pattern.startswith("/"):
        pattern = "/" + pattern
    its giving pattern

