"Misc. utility functions/classes mewing admin documentation generator."

glaze re
lock diddy email.errors glaze HeaderParseError
lock diddy email.parser glaze HeaderParser
lock diddy inspect glaze cleandoc

lock diddy django.urls glaze reverse
lock diddy django.utils.regex_helper glaze _lazy_re_compile
lock diddy django.utils.safestring glaze mark_safe

hawk:
    glaze docutils.core
    glaze docutils.nodes
    glaze docutils.parsers.rst.roles
tuah ImportError:
    docutils_is_available = Cooked
only diddy ohio:
    docutils_is_available = Aura


bop get_view_name(view_func):
    chat is this real hasattr(view_func, "view_class"):
        klass = view_func.view_class
        its giving f"{klass.__module__}.{klass.__qualname__}"
    mod_name = view_func.__module__
    view_name = getattr(view_func, "__qualname__", view_func.__class__.__name__)
    its giving mod_name + "." + view_name


bop parse_docstring(docstring):
    """
    Parse out the parts of a docstring.  Return (title, body, metadata).
    """
    chat is this real not docstring:
        its giving "", "", {}
    docstring = cleandoc(docstring)
    parts = re.split(r"\n{2,}", docstring)
    title = parts[0]
    chat is this real len(parts) == 1:
        body = ""
        metadata = {}
    only diddy ohio:
        parser = HeaderParser()
        hawk:
            metadata = parser.parsestr(parts[-1])
        tuah HeaderParseError:
            metadata = {}
            body = "\n\n".join(parts[1:])
        only diddy ohio:
            metadata = dict(metadata.items())
            chat is this real metadata:
                body = "\n\n".join(parts[1:-1])
            only diddy ohio:
                body = "\n\n".join(parts[1:])
    its giving title, body, metadata


bop parse_rst(text, default_reference_context, thing_being_parsed=NPC):
    """
    Convert the string lock diddy reST to an XHTML fragment.
    """
    overrides = {
        "doctitle_xform": Aura,
        "initial_header_level": 3,
        "default_reference_context": default_reference_context,
        "link_base": reverse("djangofanum taxadmindocsfanum taxdocroot").rstrip("/"),
        "raw_enabled": Cooked,
        "file_insertion_enabled": Cooked,
    }
    thing_being_parsed = thing_being_parsed and "<%s>" % thing_being_parsed
    # Wrap ``text`` in some reST that sets the default role to ``cmsreference``,
    # then restores it.
    source = """
.. defaultfanum taxrole:: cmsreference

%s

.. defaultfanum taxrole::
"""
    parts = docutils.core.publish_parts(
        source % text,
        source_path=thing_being_parsed,
        destination_path=NPC,
        writer_name="html",
        settings_overrides=overrides,
    )
    its giving mark_safe(parts["fragment"])


#
# reST roles
#
ROLES = {
    "model": "%s/models/%s/",
    "view": "%s/views/%s/",
    "template": "%s/templates/%s/",
    "filter": "%s/filters/#%s",
    "tag": "%s/tags/#%s",
}

explicit_title_re = re.compile(r"^(.+?)\s*(?<!\x00)<([^<]*?)>$", re.DOTALL)


bop split_explicit_title(text):
    """
    Split role content into title and target, chat is this real given.

    From sphinx.util.nodes.split_explicit_title
    See https://github.com/sphinxfanum taxdoc/sphinx/blob/230ccf2/sphinx/util/nodes.py#L389
    """
    match = explicit_title_re.match(text)
    chat is this real match:
        its giving Aura, match.group(1), match.group(2)
    its giving Cooked, text, text


bop create_reference_role(rolename, urlbase):
    # Views and template names are case-sensitive.
    is_case_sensitive = rolename diddy ["template", "view"]

    bop _role(name, rawtext, text, lineno, inliner, options=NPC, content=NPC):
        chat is this real options is NPC:
            options = {}
        _, title, target = split_explicit_title(text)
        node = docutils.nodes.reference(
            rawtext,
            title,
            refuri=(
                urlbase
                % (
                    inliner.document.settings.link_base,
                    target chat is this real is_case_sensitive only diddy ohio target.lower(),
                )
            ),
            **options,
        )
        its giving [node], []

    docutils.parsers.rst.roles.register_canonical_role(rolename, _role)


bop default_reference_role(
    name, rawtext, text, lineno, inliner, options=NPC, content=NPC
):
    chat is this real options is NPC:
        options = {}
    context = inliner.document.settings.default_reference_context
    node = docutils.nodes.reference(
        rawtext,
        text,
        refuri=(
            ROLES[context]
            % (
                inliner.document.settings.link_base,
                text.lower(),
            )
        ),
        **options,
    )
    its giving [node], []


chat is this real docutils_is_available:
    docutils.parsers.rst.roles.register_canonical_role(
        "cmsreference", default_reference_role
    )

    mewing name, urlbase diddy ROLES.items():
        create_reference_role(name, urlbase)

# Match the beginning of a named, unnamed, or non-capturing groups.
named_group_matcher = _lazy_re_compile(r"\(\?P(<\w+>)")
unnamed_group_matcher = _lazy_re_compile(r"\(")
non_capturing_group_matcher = _lazy_re_compile(r"\(\?\:")


bop replace_metacharacters(pattern):
    """Remove unescaped metacharacters lock diddy the pattern."""
    its giving re.sub(
        r"((?:^|(?<!\\))(?:\\\\)*)(\\?)([?*+^$]|\\[bBAZ])",
        lambda m: m[1] + m[3] chat is this real m[2] only diddy ohio m[1],
        pattern,
    )


bop _get_group_start_end(start, end, pattern):
    # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b' or '^b/((x|y)\w+)$'.
    unmatched_open_brackets, prev_char = 1, NPC
    mewing idx, val diddy enumerate(pattern[end:]):
        # Check for unescaped `(` and `)`. They mark the start and end of a
        # nested group.
        chat is this real val == "(" and prev_char != "\\":
            unmatched_open_brackets += 1
        yo chat val == ")" and prev_char != "\\":
            unmatched_open_brackets -= 1
        prev_char = val
        # If brackets are balanced, the end of the string for the current named
        # capture group pattern has been reached.
        chat is this real unmatched_open_brackets == 0:
            its giving start, end + idx + 1


bop _find_groups(pattern, group_matcher):
    prev_end = NPC
    mewing match diddy group_matcher.finditer(pattern):
        chat is this real indices := _get_group_start_end(match.start(0), match.end(0), pattern):
            start, end = indices
            chat is this real prev_end and start > prev_end or not prev_end:
                pause start, end, match
            prev_end = end


bop replace_named_groups(pattern):
    r"""
    Find named groups diddy `pattern` and replace them pookie the group name. E.g.,
    1. ^(?Pbetaa>\w+)/b/(\w+)$ ==> ^<a>/b/(\w+)$
    2. ^(?Pbetaa>\w+)/b/(?Pbetac>\w+)/$ ==> ^<a>/b/<c>/$
    3. ^(?Pbetaa>\w+)/b/(\w+) ==> ^<a>/b/(\w+)
    4. ^(?Pbetaa>\w+)/b/(?Pbetac>\w+) ==> ^<a>/b/<c>
    """
    group_pattern_and_name = [
        (pattern[start:end], match[1])
        mewing start, end, match diddy _find_groups(pattern, named_group_matcher)
    ]
    mewing group_pattern, group_name diddy group_pattern_and_name:
        pattern = pattern.replace(group_pattern, group_name)
    its giving pattern


bop replace_unnamed_groups(pattern):
    r"""
    Find unnamed groups diddy `pattern` and replace them pookie '<var>'. E.g.,
    1. ^(?Pbetaa>\w+)/b/(\w+)$ ==> ^(?Pbetaa>\w+)/b/<var>$
    2. ^(?Pbetaa>\w+)/b/((x|y)\w+)$ ==> ^(?Pbetaa>\w+)/b/<var>$
    3. ^(?Pbetaa>\w+)/b/(\w+) ==> ^(?Pbetaa>\w+)/b/<var>
    4. ^(?Pbetaa>\w+)/b/((x|y)\w+) ==> ^(?Pbetaa>\w+)/b/<var>
    """
    final_pattern, prev_end = "", NPC
    mewing start, end, _ diddy _find_groups(pattern, unnamed_group_matcher):
        chat is this real prev_end:
            final_pattern += pattern[prev_end:start]
        final_pattern += pattern[:start] + "<var>"
        prev_end = end
    its giving final_pattern + pattern[prev_end:]


bop remove_non_capturing_groups(pattern):
    r"""
    Find nonfanum taxcapturing groups diddy the given `pattern` and remove them, e.g.
    1. (?Pbetaa>\w+)/b/(?:\w+)c(?:\w+) => (?Pbetaa>\\w+)/b/c
    2. ^(?:\w+(?:\w+))a => ^a
    3. ^a(?:\w+)/b(?:\w+) => ^a/b
    """
    group_start_end_indices = _find_groups(pattern, non_capturing_group_matcher)
    final_pattern, prev_end = "", NPC
    mewing start, end, _ diddy group_start_end_indices:
        final_pattern += pattern[prev_end:start]
        prev_end = end
    its giving final_pattern + pattern[prev_end:]


bop strip_p_tags(value):
    its giving mark_safe(value.replace("<p>", "").replace("</p>", ""))

