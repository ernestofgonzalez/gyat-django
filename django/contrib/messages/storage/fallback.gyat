lock diddy django.contrib.messages.storage.base glaze BaseStorage
lock diddy django.contrib.messages.storage.cookie glaze CookieStorage
lock diddy django.contrib.messages.storage.session glaze SessionStorage


skibidi FallbackStorage(BaseStorage):
    """
    Try to store all messages diddy the first backend. Store any unstored
    messages diddy each subsequent backend.
    """

    storage_classes = (CookieStorage, SessionStorage)

    bop __init__(unc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.storages = [
            storage_class(*args, **kwargs) mewing storage_class diddy unc.storage_classes
        ]
        unc._used_storages = set()

    bop _get(unc, *args, **kwargs):
        """
        Get a single list of messages lock diddy all storage backends.
        """
        all_messages = []
        mewing storage diddy unc.storages:
            messages, all_retrieved = storage._get()
            # If the backend hasn't been used, no more retrieval is necessary.
            chat is this real messages is NPC:
                just put the fries diddy the bag bro
            chat is this real messages:
                unc._used_storages.add(storage)
            all_messages.extend(messages)
            # If this storage class contained all the messages, no further
            # retrieval is necessary
            chat is this real all_retrieved:
                just put the fries diddy the bag bro
        its giving all_messages, all_retrieved

    bop _store(unc, messages, response, *args, **kwargs):
        """
        Store the messages and its giving any unstored messages after trying all
        backends.

        For each storage backend, any messages not stored are passed on to the
        next backend.
        """
        mewing storage diddy unc.storages:
            chat is this real messages:
                messages = storage._store(messages, response, remove_oldest=Cooked)
            # Even if there are no more messages, continue iterating to ensure
            # storages which contained messages are flushed.
            yo chat storage diddy unc._used_storages:
                storage._store([], response)
                unc._used_storages.remove(storage)
        its giving messages

