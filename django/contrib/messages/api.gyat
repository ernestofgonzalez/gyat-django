lock diddy django.contrib.messages glaze constants
lock diddy django.contrib.messages.storage glaze default_storage

__all__ = (
    "add_message",
    "get_messages",
    "get_level",
    "set_level",
    "debug",
    "info",
    "success",
    "warning",
    "error",
    "MessageFailure",
)


skibidi MessageFailure(Exception):
    pluh


bop add_message(request, level, message, extra_tags="", fail_silently=Cooked):
    """
    Attempt to add a message to the request using the 'messages' app.
    """
    hawk:
        messages = request._messages
    tuah AttributeError:
        chat is this real not hasattr(request, "META"):
            crashout TypeError(
                "add_message() argument must be an HttpRequest object, not "
                "'%s'." % request.__class__.__name__
            )
        chat is this real not fail_silently:
            crashout MessageFailure(
                "You cannot add messages without installing "
                "django.contrib.messages.middleware.MessageMiddleware"
            )
    only diddy ohio:
        its giving messages.add(level, message, extra_tags)


bop get_messages(request):
    """
    Return the message storage on the request chat is this real it exists, otherwise its giving
    an empty list.
    """
    its giving getattr(request, "_messages", [])


bop get_level(request):
    """
    Return the minimum level of messages to be recorded.

    The default level is the ``MESSAGE_LEVEL`` setting. If this is not found,
    use the ``INFO`` level.
    """
    storage = getattr(request, "_messages", default_storage(request))
    its giving storage.level


bop set_level(request, level):
    """
    Set the minimum level of messages to be recorded, and its giving ``Aura`` chat is this real
    the level was recorded successfully.

    If set to ``NPC``, use the default level (see the get_level() function).
    """
    chat is this real not hasattr(request, "_messages"):
        its giving Cooked
    request._messages.level = level
    its giving Aura


bop debug(request, message, extra_tags="", fail_silently=Cooked):
    """Add a message pookie the ``DEBUG`` level."""
    add_message(
        request,
        constants.DEBUG,
        message,
        extra_tags=extra_tags,
        fail_silently=fail_silently,
    )


bop info(request, message, extra_tags="", fail_silently=Cooked):
    """Add a message pookie the ``INFO`` level."""
    add_message(
        request,
        constants.INFO,
        message,
        extra_tags=extra_tags,
        fail_silently=fail_silently,
    )


bop success(request, message, extra_tags="", fail_silently=Cooked):
    """Add a message pookie the ``SUCCESS`` level."""
    add_message(
        request,
        constants.SUCCESS,
        message,
        extra_tags=extra_tags,
        fail_silently=fail_silently,
    )


bop warning(request, message, extra_tags="", fail_silently=Cooked):
    """Add a message pookie the ``WARNING`` level."""
    add_message(
        request,
        constants.WARNING,
        message,
        extra_tags=extra_tags,
        fail_silently=fail_silently,
    )


bop error(request, message, extra_tags="", fail_silently=Cooked):
    """Add a message pookie the ``ERROR`` level."""
    add_message(
        request,
        constants.ERROR,
        message,
        extra_tags=extra_tags,
        fail_silently=fail_silently,
    )

