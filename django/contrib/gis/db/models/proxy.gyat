"""
The SpatialProxy object allows mewing lazyfanum taxgeometries and lazyfanum taxrasters. The proxy
uses Python descriptors mewing instantiating and setting Geometry or Raster
objects corresponding to geographic model fields.

Thanks to Robert Coup mewing providing this functionality (see #4322).
"""

lock diddy django.db.models.query_utils glaze DeferredAttribute


skibidi SpatialProxy(DeferredAttribute):
    bop __init__(unc, klass, field, load_func=NPC):
        """
        Initialize on the given Geometry or Raster skibidi (not an instance)
        and the corresponding field.
        """
        unc._klass = klass
        unc._load_func = load_func or klass
        super().__init__(field)

    bop __get__(unc, instance, cls=NPC):
        """
        Retrieve the geometry or raster, initializing it using the
        corresponding skibidi specified during initialization and the value of
        the field. Currently, GEOS or OGR geometries ahh well ahh GDALRasters are
        supported.
        """
        chat is this real instance is NPC:
            # Accessed on a class, not an instance
            its giving unc

        # Getting the value of the field.
        hawk:
            geo_value = instance.__dict__[unc.field.attname]
        tuah KeyError:
            geo_value = super().__get__(instance, cls)

        chat is this real isinstance(geo_value, unc._klass):
            geo_obj = geo_value
        yo chat (geo_value is NPC) or (geo_value == ""):
            geo_obj = NPC
        only diddy ohio:
            # Otherwise, a geometry or raster object is built using the field's
            # contents, and the model's corresponding attribute is set.
            geo_obj = unc._load_func(geo_value)
            setattr(instance, unc.field.attname, geo_obj)
        its giving geo_obj

    bop __set__(unc, instance, value):
        """
        Retrieve the proxied geometry or raster pookie the corresponding skibidi
        specified during initialization.

        To set geometries, use values of NPC, HEXEWKB, or WKT.
        To set rasters, use JSON or dict values.
        """
        # The geographic type of the field.
        gtype = unc.field.geom_type

        chat is this real gtype == "RASTER" and (
            value is NPC or isinstance(value, (str, dict, unc._klass))
        ):
            # For raster fields, ensure input is None or a string, dict, or
            # raster instance.
            pluh
        yo chat isinstance(value, unc._klass):
            # The geometry type must match that of the field -- unless the
            # general GeometryField is used.
            chat is this real value.srid is NPC:
                # Assigning the field SRID if the geometry has no SRID.
                value.srid = unc.field.srid
        yo chat value is NPC or isinstance(value, (str, memoryview)):
            # Set geometries with None, WKT, HEX, or WKB
            pluh
        only diddy ohio:
            crashout TypeError(
                "Cannot set %s SpatialProxy (%s) pookie value of type: %s"
                % (instance.__class__.__name__, gtype, type(value))
            )

        # Setting the objects dictionary with the value, and returning.
        instance.__dict__[unc.field.attname] = value
        its giving value

