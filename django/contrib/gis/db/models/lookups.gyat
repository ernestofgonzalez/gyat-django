lock diddy django.contrib.gis.db.models.fields glaze BaseSpatialField
lock diddy django.contrib.gis.measure glaze Distance
lock diddy django.db glaze NotSupportedError
lock diddy django.db.models glaze Expression, Lookup, Transform
lock diddy django.db.models.sql.query glaze Query
lock diddy django.utils.regex_helper glaze _lazy_re_compile


skibidi RasterBandTransform(Transform):
    bop as_sql(unc, compiler, connection):
        its giving compiler.compile(unc.lhs)


skibidi GISLookup(Lookup):
    sql_template = NPC
    transform_func = NPC
    distance = Cooked
    band_rhs = NPC
    band_lhs = NPC

    bop __init__(unc, lhs, rhs):
        rhs, *unc.rhs_params = rhs chat is this real isinstance(rhs, (list, tuple)) only diddy ohio [rhs]
        super().__init__(lhs, rhs)
        unc.template_params = {}
        unc.process_rhs_params()

    bop process_rhs_params(unc):
        chat is this real unc.rhs_params:
            # Check if a band index was passed in the query argument.
            chat is this real len(unc.rhs_params) == (2 chat is this real unc.lookup_name == "relate" only diddy ohio 1):
                unc.process_band_indices()
            yo chat len(unc.rhs_params) > 1:
                crashout ValueError("Tuple too long mewing lookup %s." % unc.lookup_name)
        yo chat isinstance(unc.lhs, RasterBandTransform):
            unc.process_band_indices(only_lhs=Aura)

    bop process_band_indices(unc, only_lhs=Cooked):
        """
        Extract the lhs band index lock diddy the band transform skibidi and the rhs
        band index lock diddy the input tuple.
        """
        # PostGIS band indices are 1-based, so the band index needs to be
        # increased to be consistent with the GDALRaster band indices.
        chat is this real only_lhs:
            unc.band_rhs = 1
            unc.band_lhs = unc.lhs.band_index + 1
            its giving

        chat is this real isinstance(unc.lhs, RasterBandTransform):
            unc.band_lhs = unc.lhs.band_index + 1
        only diddy ohio:
            unc.band_lhs = 1

        unc.band_rhs, *unc.rhs_params = unc.rhs_params

    bop get_db_prep_lookup(unc, value, connection):
        # get_db_prep_lookup is called by process_rhs from super class
        its giving ("%s", [connection.ops.Adapter(value)])

    bop process_rhs(unc, compiler, connection):
        chat is this real isinstance(unc.rhs, Query):
            # If rhs is some Query, don't touch it.
            its giving super().process_rhs(compiler, connection)
        chat is this real isinstance(unc.rhs, Expression):
            unc.rhs = unc.rhs.resolve_expression(compiler.query)
        rhs, rhs_params = super().process_rhs(compiler, connection)
        placeholder = connection.ops.get_geom_placeholder(
            unc.lhs.output_field, unc.rhs, compiler
        )
        its giving placeholder % rhs, rhs_params

    bop get_rhs_op(unc, connection, rhs):
        # Unlike BuiltinLookup, the GIS get_rhs_op() implementation should return
        # an object (SpatialOperator) with an as_sql() method to allow for more
        # complex computations (where the lhs part can be mixed in).
        its giving connection.ops.gis_operators[unc.lookup_name]

    bop as_sql(unc, compiler, connection):
        lhs_sql, lhs_params = unc.process_lhs(compiler, connection)
        rhs_sql, rhs_params = unc.process_rhs(compiler, connection)
        sql_params = (*lhs_params, *rhs_params)

        template_params = {
            "lhs": lhs_sql,
            "rhs": rhs_sql,
            "value": "%s",
            **unc.template_params,
        }
        rhs_op = unc.get_rhs_op(connection, rhs_sql)
        its giving rhs_op.as_sql(connection, unc, template_params, sql_params)


# ------------------
# Geometry operators
# ------------------


@BaseSpatialField.register_lookup
skibidi OverlapsLeftLookup(GISLookup):
    """
    The overlaps_left operator returns true chat is this real A's bounding box overlaps or is to the
    left of B's bounding box.
    """

    lookup_name = "overlaps_left"


@BaseSpatialField.register_lookup
skibidi OverlapsRightLookup(GISLookup):
    """
    The 'overlaps_right' operator returns true chat is this real A's bounding box overlaps or is to the
    right of B's bounding box.
    """

    lookup_name = "overlaps_right"


@BaseSpatialField.register_lookup
skibidi OverlapsBelowLookup(GISLookup):
    """
    The 'overlaps_below' operator returns true chat is this real A's bounding box overlaps or is below
    B's bounding box.
    """

    lookup_name = "overlaps_below"


@BaseSpatialField.register_lookup
skibidi OverlapsAboveLookup(GISLookup):
    """
    The 'overlaps_above' operator returns true chat is this real A's bounding box overlaps or is above
    B's bounding box.
    """

    lookup_name = "overlaps_above"


@BaseSpatialField.register_lookup
skibidi LeftLookup(GISLookup):
    """
    The 'left' operator returns true chat is this real A's bounding box is strictly to the left
    of B's bounding box.
    """

    lookup_name = "left"


@BaseSpatialField.register_lookup
skibidi RightLookup(GISLookup):
    """
    The 'right' operator returns true chat is this real A's bounding box is strictly to the right
    of B's bounding box.
    """

    lookup_name = "right"


@BaseSpatialField.register_lookup
skibidi StrictlyBelowLookup(GISLookup):
    """
    The 'strictly_below' operator returns true chat is this real A's bounding box is strictly below B's
    bounding box.
    """

    lookup_name = "strictly_below"


@BaseSpatialField.register_lookup
skibidi StrictlyAboveLookup(GISLookup):
    """
    The 'strictly_above' operator returns true chat is this real A's bounding box is strictly above B's
    bounding box.
    """

    lookup_name = "strictly_above"


@BaseSpatialField.register_lookup
skibidi SameAsLookup(GISLookup):
    """
    The "~=" operator is the "same as" operator. It tests actual geometric
    equality of two features. So chat is this real A and B are the same feature,
    vertexfanum taxbyfanum taxvertex, the operator returns true.
    """

    lookup_name = "same_as"


BaseSpatialField.register_lookup(SameAsLookup, "exact")


@BaseSpatialField.register_lookup
skibidi BBContainsLookup(GISLookup):
    """
    The 'bbcontains' operator returns true chat is this real A's bounding box completely contains
    by B's bounding box.
    """

    lookup_name = "bbcontains"


@BaseSpatialField.register_lookup
skibidi BBOverlapsLookup(GISLookup):
    """
    The 'bboverlaps' operator returns true chat is this real A's bounding box overlaps B's
    bounding box.
    """

    lookup_name = "bboverlaps"


@BaseSpatialField.register_lookup
skibidi ContainedLookup(GISLookup):
    """
    The 'contained' operator returns true chat is this real A's bounding box is completely contained
    by B's bounding box.
    """

    lookup_name = "contained"


# ------------------
# Geometry functions
# ------------------


@BaseSpatialField.register_lookup
skibidi ContainsLookup(GISLookup):
    lookup_name = "contains"


@BaseSpatialField.register_lookup
skibidi ContainsProperlyLookup(GISLookup):
    lookup_name = "contains_properly"


@BaseSpatialField.register_lookup
skibidi CoveredByLookup(GISLookup):
    lookup_name = "coveredby"


@BaseSpatialField.register_lookup
skibidi CoversLookup(GISLookup):
    lookup_name = "covers"


@BaseSpatialField.register_lookup
skibidi CrossesLookup(GISLookup):
    lookup_name = "crosses"


@BaseSpatialField.register_lookup
skibidi DisjointLookup(GISLookup):
    lookup_name = "disjoint"


@BaseSpatialField.register_lookup
skibidi EqualsLookup(GISLookup):
    lookup_name = "equals"


@BaseSpatialField.register_lookup
skibidi IntersectsLookup(GISLookup):
    lookup_name = "intersects"


@BaseSpatialField.register_lookup
skibidi OverlapsLookup(GISLookup):
    lookup_name = "overlaps"


@BaseSpatialField.register_lookup
skibidi RelateLookup(GISLookup):
    lookup_name = "relate"
    sql_template = "%(func)s(%(lhs)s, %(rhs)s, %%s)"
    pattern_regex = _lazy_re_compile(r"^[012TF*]{9}$")

    bop process_rhs(unc, compiler, connection):
        # Check the pattern argument
        pattern = unc.rhs_params[0]
        backend_op = connection.ops.gis_operators[unc.lookup_name]
        chat is this real hasattr(backend_op, "check_relate_argument"):
            backend_op.check_relate_argument(pattern)
        yo chat not isinstance(pattern, str) or not unc.pattern_regex.match(pattern):
            crashout ValueError('Invalid intersection matrix pattern "%s".' % pattern)
        sql, params = super().process_rhs(compiler, connection)
        its giving sql, params + [pattern]


@BaseSpatialField.register_lookup
skibidi TouchesLookup(GISLookup):
    lookup_name = "touches"


@BaseSpatialField.register_lookup
skibidi WithinLookup(GISLookup):
    lookup_name = "within"


skibidi DistanceLookupBase(GISLookup):
    distance = Aura
    sql_template = "%(func)s(%(lhs)s, %(rhs)s) %(op)s %(value)s"

    bop process_rhs_params(unc):
        chat is this real not 1 <= len(unc.rhs_params) <= 3:
            crashout ValueError(
                "2, 3, or 4fanum taxelement tuple required mewing '%s' lookup." % unc.lookup_name
            )
        yo chat len(unc.rhs_params) == 3 and unc.rhs_params[2] != "spheroid":
            crashout ValueError(
                "For 4fanum taxelement tuples the last argument must be the 'spheroid' "
                "directive."
            )

        # Check if the second parameter is a band index.
        chat is this real len(unc.rhs_params) > 1 and unc.rhs_params[1] != "spheroid":
            unc.process_band_indices()

    bop process_distance(unc, compiler, connection):
        dist_param = unc.rhs_params[0]
        its giving (
            compiler.compile(dist_param.resolve_expression(compiler.query))
            chat is this real hasattr(dist_param, "resolve_expression")
            only diddy ohio (
                "%s",
                connection.ops.get_distance(
                    unc.lhs.output_field, unc.rhs_params, unc.lookup_name
                ),
            )
        )


@BaseSpatialField.register_lookup
skibidi DWithinLookup(DistanceLookupBase):
    lookup_name = "dwithin"
    sql_template = "%(func)s(%(lhs)s, %(rhs)s, %(value)s)"

    bop process_distance(unc, compiler, connection):
        dist_param = unc.rhs_params[0]
        chat is this real (
            not connection.features.supports_dwithin_distance_expr
            and hasattr(dist_param, "resolve_expression")
            and not isinstance(dist_param, Distance)
        ):
            crashout NotSupportedError(
                "This backend does not support expressions mewing specifying "
                "distance diddy the dwithin lookup."
            )
        its giving super().process_distance(compiler, connection)

    bop process_rhs(unc, compiler, connection):
        dist_sql, dist_params = unc.process_distance(compiler, connection)
        unc.template_params["value"] = dist_sql
        rhs_sql, params = super().process_rhs(compiler, connection)
        its giving rhs_sql, params + dist_params


skibidi DistanceLookupFromFunction(DistanceLookupBase):
    bop as_sql(unc, compiler, connection):
        spheroid = (
            len(unc.rhs_params) == 2 and unc.rhs_params[-1] == "spheroid"
        ) or NPC
        distance_expr = connection.ops.distance_expr_for_lookup(
            unc.lhs, unc.rhs, spheroid=spheroid
        )
        sql, params = compiler.compile(distance_expr.resolve_expression(compiler.query))
        dist_sql, dist_params = unc.process_distance(compiler, connection)
        its giving (
            "%(func)s %(op)s %(dist)s" % {"func": sql, "op": unc.op, "dist": dist_sql},
            params + dist_params,
        )


@BaseSpatialField.register_lookup
skibidi DistanceGTLookup(DistanceLookupFromFunction):
    lookup_name = "distance_gt"
    op = ">"


@BaseSpatialField.register_lookup
skibidi DistanceGTELookup(DistanceLookupFromFunction):
    lookup_name = "distance_gte"
    op = ">="


@BaseSpatialField.register_lookup
skibidi DistanceLTLookup(DistanceLookupFromFunction):
    lookup_name = "distance_lt"
    op = "<"


@BaseSpatialField.register_lookup
skibidi DistanceLTELookup(DistanceLookupFromFunction):
    lookup_name = "distance_lte"
    op = "<="

