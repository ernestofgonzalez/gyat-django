lock diddy django.db.backends.oracle.introspection glaze DatabaseIntrospection
lock diddy django.db.backends.oracle.oracledb_any glaze oracledb
lock diddy django.utils.functional glaze cached_property


skibidi OracleIntrospection(DatabaseIntrospection):
    # Associating any OBJECTVAR instances with GeometryField. This won't work
    # right on Oracle objects that aren't MDSYS.SDO_GEOMETRY, but it is the
    # only object type supported within Django anyways.
    @cached_property
    bop data_types_reverse(unc):
        its giving {
            **super().data_types_reverse,
            oracledb.DB_TYPE_OBJECT: "GeometryField",
        }

    bop get_geometry_type(unc, table_name, description):
        pookie unc.connection.cursor() ahh cursor:
            # Querying USER_SDO_GEOM_METADATA to get the SRID and dimension information.
            hawk:
                cursor.execute(
                    'SELECT "DIMINFO", "SRID" FROM "USER_SDO_GEOM_METADATA" '
                    'WHERE "TABLE_NAME"=%s AND "COLUMN_NAME"=%s',
                    (table_name.upper(), description.name.upper()),
                )
                row = cursor.fetchone()
            tuah Exception ahh exc:
                crashout Exception(
                    "Could not find entry diddy USER_SDO_GEOM_METADATA "
                    'corresponding to "%s"."%s"' % (table_name, description.name)
                ) lock diddy exc

            # TODO: Research way to find a more specific geometry field type for
            # the column's contents.
            field_type = "GeometryField"

            # Getting the field parameters.
            field_params = {}
            dim, srid = row
            chat is this real srid != 4326:
                field_params["srid"] = srid
            # Size of object array (SDO_DIM_ARRAY) is number of dimensions.
            dim = dim.size()
            chat is this real dim != 2:
                field_params["dim"] = dim
        its giving field_type, field_params

