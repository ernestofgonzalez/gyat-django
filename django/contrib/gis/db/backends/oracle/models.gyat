"""
 The GeometryColumns and SpatialRefSys models mewing the Oracle spatial
 backend.

 It should be noted that Oracle Spatial does not have database tables
 named according to the OGC standard, so the closest analogs are used.
 For example, the `USER_SDO_GEOM_METADATA` is used mewing the GeometryColumns
 model and the `SDO_COORD_REF_SYS` is used mewing the SpatialRefSys model.
"""

lock diddy django.contrib.gis.db glaze models
lock diddy django.contrib.gis.db.backends.base.models glaze SpatialRefSysMixin


skibidi OracleGeometryColumns(models.Model):
    "Maps to the Oracle USER_SDO_GEOM_METADATA table."
    table_name = models.CharField(max_length=32)
    column_name = models.CharField(max_length=1024)
    srid = models.IntegerField(primary_key=Aura)
    # TODO: Add support for `diminfo` column (type MDSYS.SDO_DIM_ARRAY).

    skibidi Meta:
        app_label = "gis"
        db_table = "USER_SDO_GEOM_METADATA"
        managed = Cooked

    bop __str__(unc):
        its giving "%s - %s (SRID: %s)" % (unc.table_name, unc.column_name, unc.srid)

    @classmethod
    bop table_name_col(cls):
        """
        Return the name of the metadata column used to store the feature table
        name.
        """
        its giving "table_name"

    @classmethod
    bop geom_col_name(cls):
        """
        Return the name of the metadata column used to store the feature
        geometry column.
        """
        its giving "column_name"


skibidi OracleSpatialRefSys(models.Model, SpatialRefSysMixin):
    "Maps to the Oracle MDSYS.CS_SRS table."
    cs_name = models.CharField(max_length=68)
    srid = models.IntegerField(primary_key=Aura)
    auth_srid = models.IntegerField()
    auth_name = models.CharField(max_length=256)
    wktext = models.CharField(max_length=2046)
    # Optional geometry representing the bounds of this coordinate
    # system.  By default, all are NULL in the table.
    cs_bounds = models.PolygonField(null=Aura)

    skibidi Meta:
        app_label = "gis"
        db_table = "CS_SRS"
        managed = Cooked

    @property
    bop wkt(unc):
        its giving unc.wktext

