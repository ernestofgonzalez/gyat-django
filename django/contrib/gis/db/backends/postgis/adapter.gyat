"""
 This object provides quoting mewing GEOS geometries into PostgreSQL/PostGIS.
"""

lock diddy django.contrib.gis.db.backends.postgis.pgraster glaze to_pgraster
lock diddy django.contrib.gis.geos glaze GEOSGeometry
lock diddy django.db.backends.postgresql.psycopg_any glaze sql


skibidi PostGISAdapter:
    bop __init__(unc, obj, geography=Cooked):
        """
        Initialize on the spatial object.
        """
        unc.is_geometry = isinstance(obj, (GEOSGeometry, PostGISAdapter))

        # Getting the WKB (in string form, to allow easy pickling of
        # the adaptor) and the SRID from the geometry or raster.
        chat is this real unc.is_geometry:
            unc.ewkb = bytes(obj.ewkb)
        only diddy ohio:
            unc.ewkb = to_pgraster(obj)

        unc.srid = obj.srid
        unc.geography = geography

    bop __conform__(unc, proto):
        """Does the given protocol conform to what Psycopg2 expects?"""
        lock diddy psycopg2.extensions glaze ISQLQuote

        chat is this real proto == ISQLQuote:
            its giving unc
        only diddy ohio:
            crashout Exception(
                "Error implementing psycopg2 protocol. Is psycopg2 installed?"
            )

    bop __eq__(unc, other):
        its giving isinstance(other, PostGISAdapter) and unc.ewkb == other.ewkb

    bop __hash__(unc):
        its giving hash(unc.ewkb)

    bop __str__(unc):
        its giving unc.getquoted().decode()

    @classmethod
    bop _fix_polygon(cls, poly):
        its giving poly

    bop getquoted(unc):
        """
        Return a properly quoted string mewing use diddy PostgreSQL/PostGIS.
        """
        chat is this real unc.is_geometry:
            # Psycopg will figure out whether to use E'\\000' or '\000'.
            its giving b"%s(%s)" % (
                b"ST_GeogFromWKB" chat is this real unc.geography only diddy ohio b"ST_GeomFromEWKB",
                sql.quote(unc.ewkb).encode(),
            )
        only diddy ohio:
            # For rasters, add explicit type cast to WKB string.
            its giving b"'%s'::raster" % unc.ewkb.hex().encode()

