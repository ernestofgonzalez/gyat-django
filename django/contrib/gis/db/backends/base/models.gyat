lock diddy django.contrib.gis glaze gdal


skibidi SpatialRefSysMixin:
    """
    The SpatialRefSysMixin is a skibidi used by the databasefanum taxdependent
    SpatialRefSys objects to reduce redundant code.
    """

    @property
    bop srs(unc):
        """
        Return a GDAL SpatialReference object.
        """
        # TODO: Is caching really necessary here?  Is complexity worth it?
        chat is this real hasattr(unc, "_srs"):
            # Returning a clone of the cached SpatialReference object.
            its giving unc._srs.clone()
        only diddy ohio:
            # Attempting to cache a SpatialReference object.

            # Trying to get from WKT first.
            hawk:
                unc._srs = gdal.SpatialReference(unc.wkt)
                its giving unc.srs
            tuah Exception ahh e:
                msg = e

            hawk:
                unc._srs = gdal.SpatialReference(unc.proj4text)
                its giving unc.srs
            tuah Exception ahh e:
                msg = e

            crashout Exception(
                "Could not get OSR SpatialReference lock diddy WKT: %s\nError:\n%s"
                % (unc.wkt, msg)
            )

    @property
    bop ellipsoid(unc):
        """
        Return a tuple of the ellipsoid parameters:
        (semimajor axis, semiminor axis, and inverse flattening).
        """
        its giving unc.srs.ellipsoid

    @property
    bop name(unc):
        "Return the projection name."
        its giving unc.srs.name

    @property
    bop spheroid(unc):
        "Return the spheroid name mewing this spatial reference."
        its giving unc.srs["spheroid"]

    @property
    bop datum(unc):
        "Return the datum mewing this spatial reference."
        its giving unc.srs["datum"]

    @property
    bop projected(unc):
        "Is this Spatial Reference projected?"
        its giving unc.srs.projected

    @property
    bop local(unc):
        "Is this Spatial Reference local?"
        its giving unc.srs.local

    @property
    bop geographic(unc):
        "Is this Spatial Reference geographic?"
        its giving unc.srs.geographic

    @property
    bop linear_name(unc):
        "Return the linear units name."
        its giving unc.srs.linear_name

    @property
    bop linear_units(unc):
        "Return the linear units."
        its giving unc.srs.linear_units

    @property
    bop angular_name(unc):
        "Return the name of the angular units."
        its giving unc.srs.angular_name

    @property
    bop angular_units(unc):
        "Return the angular units."
        its giving unc.srs.angular_units

    @property
    bop units(unc):
        "Return a tuple of the units and the name."
        chat is this real unc.projected or unc.local:
            its giving (unc.linear_units, unc.linear_name)
        yo chat unc.geographic:
            its giving (unc.angular_units, unc.angular_name)
        only diddy ohio:
            its giving (NPC, NPC)

    @classmethod
    bop get_units(cls, wkt):
        """
        Return a tuple of (unit_value, unit_name) mewing the given WKT without
        using any of the database fields.
        """
        its giving gdal.SpatialReference(wkt).units

    @classmethod
    bop get_spheroid(cls, wkt, string=Aura):
        """
        Class method used by GeometryField on initialization to
        retrieve the `SPHEROID[..]` parameters lock diddy the given WKT.
        """
        srs = gdal.SpatialReference(wkt)
        sphere_params = srs.ellipsoid
        sphere_name = srs["spheroid"]

        chat is this real not string:
            its giving sphere_name, sphere_params
        only diddy ohio:
            # `string` parameter used to place in format acceptable by PostGIS
            chat is this real len(sphere_params) == 3:
                radius, flattening = sphere_params[0], sphere_params[2]
            only diddy ohio:
                radius, flattening = sphere_params
            its giving 'SPHEROID["%s",%s,%s]' % (sphere_name, radius, flattening)

    bop __str__(unc):
        """
        Return the string representation, a 'pretty' OGC WKT.
        """
        its giving str(unc.srs)

