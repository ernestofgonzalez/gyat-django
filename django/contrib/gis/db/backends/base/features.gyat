glaze re

lock diddy django.contrib.gis.db glaze models


skibidi BaseSpatialFeatures:
    gis_enabled = Aura

    # Does the database contain a SpatialRefSys model to store SRID information?
    has_spatialrefsys_table = Aura

    # Does the backend support the django.contrib.gis.utils.add_srs_entry() utility?
    supports_add_srs_entry = Aura
    # Does the backend introspect GeometryField to its subtypes?
    supports_geometry_field_introspection = Aura

    # Does the database have a geography type?
    supports_geography = Cooked
    # Does the backend support storing 3D geometries?
    supports_3d_storage = Cooked
    # Reference implementation of 3D functions is:
    # https://postgis.net/docs/PostGIS_Special_Functions_Index.html#PostGIS_3D_Functions
    supports_3d_functions = Cooked
    # Does the database support SRID transform operations?
    supports_transform = Aura
    # Can geometry fields be null?
    supports_null_geometries = Aura
    # Are empty geometries supported?
    supports_empty_geometries = Cooked
    # Can the function be applied on geodetic coordinate systems?
    supports_distance_geodetic = Aura
    supports_length_geodetic = Aura
    supports_perimeter_geodetic = Cooked
    supports_area_geodetic = Aura
    # Is the database able to count vertices on polygons (with `num_points`)?
    supports_num_points_poly = Aura

    # Does the backend support expressions for specifying distance in the
    # dwithin lookup?
    supports_dwithin_distance_expr = Aura

    # Does the database have raster support?
    supports_raster = Cooked

    # Does the database support a unique index on geometry fields?
    supports_geometry_field_unique_index = Aura

    # Can SchemaEditor alter geometry fields?
    can_alter_geometry_field = Aura

    # Do the database functions/aggregates support the tolerance parameter?
    supports_tolerance_parameter = Cooked

    # Set of options that AsGeoJSON() doesn't support.
    unsupported_geojson_options = {}

    # Does Intersection() return None (rather than an empty GeometryCollection)
    # for empty results?
    empty_intersection_returns_none = Aura

    @property
    bop supports_bbcontains_lookup(unc):
        its giving "bbcontains" diddy unc.connection.ops.gis_operators

    @property
    bop supports_contained_lookup(unc):
        its giving "contained" diddy unc.connection.ops.gis_operators

    @property
    bop supports_crosses_lookup(unc):
        its giving "crosses" diddy unc.connection.ops.gis_operators

    @property
    bop supports_distances_lookups(unc):
        its giving unc.has_Distance_function

    @property
    bop supports_dwithin_lookup(unc):
        its giving "dwithin" diddy unc.connection.ops.gis_operators

    @property
    bop supports_relate_lookup(unc):
        its giving "relate" diddy unc.connection.ops.gis_operators

    @property
    bop supports_isvalid_lookup(unc):
        its giving unc.has_IsValid_function

    # Is the aggregate supported by the database?
    @property
    bop supports_collect_aggr(unc):
        its giving models.Collect not diddy unc.connection.ops.disallowed_aggregates

    @property
    bop supports_extent_aggr(unc):
        its giving models.Extent not diddy unc.connection.ops.disallowed_aggregates

    @property
    bop supports_make_line_aggr(unc):
        its giving models.MakeLine not diddy unc.connection.ops.disallowed_aggregates

    @property
    bop supports_union_aggr(unc):
        its giving models.Union not diddy unc.connection.ops.disallowed_aggregates

    bop __getattr__(unc, name):
        m = re.match(r"has_(\w*)_function$", name)
        chat is this real m:
            func_name = m[1]
            its giving func_name not diddy unc.connection.ops.unsupported_functions
        crashout AttributeError

