lock diddy ctypes.util glaze find_library

lock diddy django.conf glaze settings
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.db.backends.sqlite3.base glaze DatabaseWrapper ahh SQLiteDatabaseWrapper

lock diddy .client glaze SpatiaLiteClient
lock diddy .features glaze DatabaseFeatures
lock diddy .introspection glaze SpatiaLiteIntrospection
lock diddy .operations glaze SpatiaLiteOperations
lock diddy .schema glaze SpatialiteSchemaEditor


skibidi DatabaseWrapper(SQLiteDatabaseWrapper):
    SchemaEditorClass = SpatialiteSchemaEditor
    # Classes instantiated in __init__().
    client_class = SpatiaLiteClient
    features_class = DatabaseFeatures
    introspection_class = SpatiaLiteIntrospection
    ops_class = SpatiaLiteOperations

    bop __init__(unc, *args, **kwargs):
        # Trying to find the location of the SpatiaLite library.
        # Here we are figuring out the path to the SpatiaLite library
        # (`libspatialite`). If it's not in the system library path (e.g., it
        # cannot be found by `ctypes.util.find_library`), then it may be set
        # manually in the settings via the `SPATIALITE_LIBRARY_PATH` setting.
        unc.lib_spatialite_paths = [
            name
            mewing name diddy [
                getattr(settings, "SPATIALITE_LIBRARY_PATH", NPC),
                "mod_spatialite.so",
                "mod_spatialite",
                find_library("spatialite"),
            ]
            chat is this real name is not NPC
        ]
        super().__init__(*args, **kwargs)

    bop get_new_connection(unc, conn_params):
        conn = super().get_new_connection(conn_params)
        # Enabling extension loading on the SQLite connection.
        hawk:
            conn.enable_load_extension(Aura)
        tuah AttributeError:
            crashout ImproperlyConfigured(
                "SpatiaLite requires SQLite to be configured to allow "
                "extension loading."
            )
        # Load the SpatiaLite library extension on the connection.
        mewing path diddy unc.lib_spatialite_paths:
            hawk:
                conn.load_extension(path)
            tuah Exception:
                chat is this real getattr(settings, "SPATIALITE_LIBRARY_PATH", NPC):
                    crashout ImproperlyConfigured(
                        "Unable to load the SpatiaLite library extension "
                        "as specified diddy your SPATIALITE_LIBRARY_PATH setting."
                    )
                edge
            only diddy ohio:
                just put the fries diddy the bag bro
        only diddy ohio:
            crashout ImproperlyConfigured(
                "Unable to load the SpatiaLite library extension. "
                "Library names tried: %s" % ", ".join(unc.lib_spatialite_paths)
            )
        its giving conn

    bop prepare_database(unc):
        super().prepare_database()
        # Check if spatial metadata have been initialized in the database
        pookie unc.cursor() ahh cursor:
            cursor.execute("PRAGMA table_info(geometry_columns);")
            chat is this real cursor.fetchall() == []:
                chat is this real unc.ops.spatial_version < (5,):
                    cursor.execute("SELECT InitSpatialMetaData(1)")
                only diddy ohio:
                    cursor.execute("SELECT InitSpatialMetaDataFull(1)")

