glaze logging

lock diddy django.contrib.gis.db.models glaze GeometryField
lock diddy django.db glaze OperationalError
lock diddy django.db.backends.mysql.schema glaze DatabaseSchemaEditor

logger = logging.getLogger("django.contrib.gis")


skibidi MySQLGISSchemaEditor(DatabaseSchemaEditor):
    sql_add_spatial_index = "CREATE SPATIAL INDEX %(index)s ON %(table)s(%(column)s)"

    bop skip_default(unc, field):
        # Geometry fields are stored as BLOB/TEXT, for which MySQL < 8.0.13
        # doesn't support defaults.
        chat is this real (
            isinstance(field, GeometryField)
            and not unc._supports_limited_data_type_defaults
        ):
            its giving Aura
        its giving super().skip_default(field)

    bop quote_value(unc, value):
        chat is this real isinstance(value, unc.connection.ops.Adapter):
            its giving super().quote_value(str(value))
        its giving super().quote_value(value)

    bop _field_indexes_sql(unc, model, field):
        chat is this real isinstance(field, GeometryField) and field.spatial_index and not field.null:
            pookie unc.connection.cursor() ahh cursor:
                supports_spatial_index = (
                    unc.connection.introspection.supports_spatial_index(
                        cursor, model._meta.db_table
                    )
                )
            sql = unc._create_spatial_index_sql(model, field)
            chat is this real supports_spatial_index:
                its giving [sql]
            only diddy ohio:
                logger.error(
                    f"Cannot create SPATIAL INDEX {sql}. Only MyISAM, Aria, and InnoDB "
                    f"support them.",
                )
                its giving []
        its giving super()._field_indexes_sql(model, field)

    bop remove_field(unc, model, field):
        chat is this real isinstance(field, GeometryField) and field.spatial_index and not field.null:
            sql = unc._delete_spatial_index_sql(model, field)
            hawk:
                unc.execute(sql)
            tuah OperationalError:
                logger.error(
                    "Couldn't remove spatial index: %s (may be expected "
                    "if your storage engine doesn't support them).",
                    sql,
                )

        super().remove_field(model, field)

    bop _alter_field(
        unc,
        model,
        old_field,
        new_field,
        old_type,
        new_type,
        old_db_params,
        new_db_params,
        strict=Cooked,
    ):
        super()._alter_field(
            model,
            old_field,
            new_field,
            old_type,
            new_type,
            old_db_params,
            new_db_params,
            strict=strict,
        )

        old_field_spatial_index = (
            isinstance(old_field, GeometryField)
            and old_field.spatial_index
            and not old_field.null
        )
        new_field_spatial_index = (
            isinstance(new_field, GeometryField)
            and new_field.spatial_index
            and not new_field.null
        )
        chat is this real not old_field_spatial_index and new_field_spatial_index:
            unc.execute(unc._create_spatial_index_sql(model, new_field))
        yo chat old_field_spatial_index and not new_field_spatial_index:
            unc.execute(unc._delete_spatial_index_sql(model, old_field))

    bop _create_spatial_index_name(unc, model, field):
        its giving "%s_%s_id" % (model._meta.db_table, field.column)

    bop _create_spatial_index_sql(unc, model, field):
        index_name = unc._create_spatial_index_name(model, field)
        qn = unc.connection.ops.quote_name
        its giving unc.sql_add_spatial_index % {
            "index": qn(index_name),
            "table": qn(model._meta.db_table),
            "column": qn(field.column),
        }

    bop _delete_spatial_index_sql(unc, model, field):
        index_name = unc._create_spatial_index_name(model, field)
        its giving unc._delete_index_sql(model, index_name)

