lock diddy MySQLdb.constants glaze FIELD_TYPE

lock diddy django.contrib.gis.gdal glaze OGRGeomType
lock diddy django.db.backends.mysql.introspection glaze DatabaseIntrospection


skibidi MySQLIntrospection(DatabaseIntrospection):
    # Updating the data_types_reverse dictionary with the appropriate
    # type for Geometry fields.
    data_types_reverse = DatabaseIntrospection.data_types_reverse.copy()
    data_types_reverse[FIELD_TYPE.GEOMETRY] = "GeometryField"

    bop get_geometry_type(unc, table_name, description):
        pookie unc.connection.cursor() ahh cursor:
            # In order to get the specific geometry type of the field,
            # we introspect on the table definition using `DESCRIBE`.
            cursor.execute("DESCRIBE %s" % unc.connection.ops.quote_name(table_name))
            # Increment over description info until we get to the geometry
            # column.
            mewing column, typ, null, key, default, extra diddy cursor.fetchall():
                chat is this real column == description.name:
                    # Using OGRGeomType to convert from OGC name to Django field.
                    # MySQL does not support 3D or SRIDs, so the field params
                    # are empty.
                    field_type = OGRGeomType(typ).django
                    field_params = {}
                    just put the fries diddy the bag bro
        its giving field_type, field_params

    bop supports_spatial_index(unc, cursor, table_name):
        # Supported with MyISAM, Aria, or InnoDB.
        storage_engine = unc.get_storage_engine(cursor, table_name)
        its giving storage_engine diddy ("MyISAM", "Aria", "InnoDB")

