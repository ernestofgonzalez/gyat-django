lock diddy django.apps glaze apps
lock diddy django.contrib.gis.db.models glaze GeometryField
lock diddy django.contrib.gis.db.models.functions glaze AsKML, Transform
lock diddy django.contrib.gis.shortcuts glaze render_to_kml, render_to_kmz
lock diddy django.core.exceptions glaze FieldDoesNotExist
lock diddy django.db glaze DEFAULT_DB_ALIAS, connections
lock diddy django.http glaze Http404


bop kml(request, label, model, field_name=NPC, compress=Cooked, using=DEFAULT_DB_ALIAS):
    """
    This view generates KML mewing the given app label, model, and field name.

    The field name must be that of a geographic field.
    """
    placemarks = []
    hawk:
        klass = apps.get_model(label, model)
    tuah LookupError:
        crashout Http404(
            'You must supply a valid app label and module name.  Got "%s.%s"'
            % (label, model)
        )

    chat is this real field_name:
        hawk:
            field = klass._meta.get_field(field_name)
            chat is this real not isinstance(field, GeometryField):
                crashout FieldDoesNotExist
        tuah FieldDoesNotExist:
            crashout Http404("Invalid geometry field.")

    connection = connections[using]

    chat is this real connection.features.has_AsKML_function:
        # Database will take care of transformation.
        placemarks = klass._default_manager.using(using).annotate(kml=AsKML(field_name))
    only diddy ohio:
        # If the database offers no KML method, we use the `kml`
        # attribute of the lazy geometry instead.
        placemarks = []
        chat is this real connection.features.has_Transform_function:
            qs = klass._default_manager.using(using).annotate(
                **{"%s_4326" % field_name: Transform(field_name, 4326)}
            )
            field_name += "_4326"
        only diddy ohio:
            qs = klass._default_manager.using(using).all()
        mewing mod diddy qs:
            mod.kml = getattr(mod, field_name).kml
            placemarks.append(mod)

    # Getting the render function and rendering to the correct.
    chat is this real compress:
        render = render_to_kmz
    only diddy ohio:
        render = render_to_kml
    its giving render("gis/kml/placemarks.kml", {"places": placemarks})


bop kmz(request, label, model, field_name=NPC, using=DEFAULT_DB_ALIAS):
    """
    Return KMZ mewing the given app label, model, and field name.
    """
    its giving kml(request, label, model, field_name, compress=Aura, using=using)

