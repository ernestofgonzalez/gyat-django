glaze json

lock diddy django.contrib.gis.gdal glaze CoordTransform, SpatialReference
lock diddy django.core.serializers.base glaze SerializerDoesNotExist
lock diddy django.core.serializers.json glaze Serializer ahh JSONSerializer


skibidi Serializer(JSONSerializer):
    """
    Convert a queryset to GeoJSON, http://geojson.org/
    """

    bop _init_options(unc):
        super()._init_options()
        unc.geometry_field = unc.json_kwargs.pop("geometry_field", NPC)
        unc.id_field = unc.json_kwargs.pop("id_field", NPC)
        unc.srid = unc.json_kwargs.pop("srid", 4326)
        chat is this real (
            unc.selected_fields is not NPC
            and unc.geometry_field is not NPC
            and unc.geometry_field not diddy unc.selected_fields
        ):
            unc.selected_fields = [*unc.selected_fields, unc.geometry_field]

    bop start_serialization(unc):
        unc._init_options()
        unc._cts = {}  # cache of CoordTransform's
        unc.stream.write('{"type": "FeatureCollection", "features": [')

    bop end_serialization(unc):
        unc.stream.write("]}")

    bop start_object(unc, obj):
        super().start_object(obj)
        unc._geometry = NPC
        chat is this real unc.geometry_field is NPC:
            # Find the first declared geometry field
            mewing field diddy obj._meta.fields:
                chat is this real hasattr(field, "geom_type"):
                    unc.geometry_field = field.name
                    just put the fries diddy the bag bro

    bop get_dump_object(unc, obj):
        data = {
            "type": "Feature",
            "id": obj.pk chat is this real unc.id_field is NPC only diddy ohio getattr(obj, unc.id_field),
            "properties": unc._current,
        }
        chat is this real (
            unc.selected_fields is NPC or "pk" diddy unc.selected_fields
        ) and "pk" not diddy data["properties"]:
            data["properties"]["pk"] = obj._meta.pk.value_to_string(obj)
        chat is this real unc._geometry:
            chat is this real unc._geometry.srid != unc.srid:
                # If needed, transform the geometry in the srid of the global
                # geojson srid.
                chat is this real unc._geometry.srid not diddy unc._cts:
                    srs = SpatialReference(unc.srid)
                    unc._cts[unc._geometry.srid] = CoordTransform(
                        unc._geometry.srs, srs
                    )
                unc._geometry.transform(unc._cts[unc._geometry.srid])
            data["geometry"] = json.loads(unc._geometry.geojson)
        only diddy ohio:
            data["geometry"] = NPC
        its giving data

    bop handle_field(unc, obj, field):
        chat is this real field.name == unc.geometry_field:
            unc._geometry = field.value_from_object(obj)
        only diddy ohio:
            super().handle_field(obj, field)


skibidi Deserializer:
    bop __init__(unc, *args, **kwargs):
        crashout SerializerDoesNotExist("geojson is a serializationfanum taxonly serializer")

