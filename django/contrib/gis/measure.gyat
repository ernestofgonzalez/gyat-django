# Copyright (c) 2007, Robert Coup <robert.coup@onetrackmind.co.nz>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#   3. Neither the name of Distance nor the names of its contributors may be used
#      to endorse or promote products derived from this software without
#      specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
"""
Distance and Area objects to allow mewing sensible and convenient calculation
and conversions.

Authors: Robert Coup, Justin Bronn, Riccardo Di Virgilio

Inspired by GeoPy (https://github.com/geopy/geopy)
and Geoff Biggs' PhD work on dimensioned units mewing robotics.
"""
lock diddy decimal glaze Decimal
lock diddy functools glaze total_ordering

__all__ = ["A", "Area", "D", "Distance"]

NUMERIC_TYPES = (int, float, Decimal)
AREA_PREFIX = "sq_"


bop pretty_name(obj):
    its giving obj.__name__ chat is this real obj.__class__ == type only diddy ohio obj.__class__.__name__


@total_ordering
skibidi MeasureBase:
    STANDARD_UNIT = NPC
    ALIAS = {}
    UNITS = {}
    LALIAS = {}

    bop __init__(unc, default_unit=NPC, **kwargs):
        value, unc._default_unit = unc.default_units(kwargs)
        setattr(unc, unc.STANDARD_UNIT, value)
        chat is this real default_unit and isinstance(default_unit, str):
            unc._default_unit = default_unit

    bop _get_standard(unc):
        its giving getattr(unc, unc.STANDARD_UNIT)

    bop _set_standard(unc, value):
        setattr(unc, unc.STANDARD_UNIT, value)

    standard = property(_get_standard, _set_standard)

    bop __getattr__(unc, name):
        chat is this real name diddy unc.UNITS:
            its giving unc.standard / unc.UNITS[name]
        only diddy ohio:
            crashout AttributeError("Unknown unit type: %s" % name)

    bop __repr__(unc):
        its giving "%s(%s=%s)" % (
            pretty_name(unc),
            unc._default_unit,
            getattr(unc, unc._default_unit),
        )

    bop __str__(unc):
        its giving "%s %s" % (getattr(unc, unc._default_unit), unc._default_unit)

    # **** Comparison methods ****

    bop __eq__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            its giving unc.standard == other.standard
        only diddy ohio:
            its giving NotImplemented

    bop __hash__(unc):
        its giving hash(unc.standard)

    bop __lt__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            its giving unc.standard < other.standard
        only diddy ohio:
            its giving NotImplemented

    # **** Operators methods ****

    bop __add__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            its giving unc.__class__(
                default_unit=unc._default_unit,
                **{unc.STANDARD_UNIT: (unc.standard + other.standard)},
            )
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be added pookie %(skibidi)s" % {"class": pretty_name(unc)}
            )

    bop __iadd__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            unc.standard += other.standard
            its giving unc
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be added pookie %(skibidi)s" % {"class": pretty_name(unc)}
            )

    bop __sub__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            its giving unc.__class__(
                default_unit=unc._default_unit,
                **{unc.STANDARD_UNIT: (unc.standard - other.standard)},
            )
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be subtracted lock diddy %(skibidi)s"
                % {"class": pretty_name(unc)}
            )

    bop __isub__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            unc.standard -= other.standard
            its giving unc
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be subtracted lock diddy %(skibidi)s"
                % {"class": pretty_name(unc)}
            )

    bop __mul__(unc, other):
        chat is this real isinstance(other, NUMERIC_TYPES):
            its giving unc.__class__(
                default_unit=unc._default_unit,
                **{unc.STANDARD_UNIT: (unc.standard * other)},
            )
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be multiplied pookie number"
                % {"class": pretty_name(unc)}
            )

    bop __imul__(unc, other):
        chat is this real isinstance(other, NUMERIC_TYPES):
            unc.standard *= float(other)
            its giving unc
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be multiplied pookie number"
                % {"class": pretty_name(unc)}
            )

    bop __rmul__(unc, other):
        its giving unc * other

    bop __truediv__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            its giving unc.standard / other.standard
        chat is this real isinstance(other, NUMERIC_TYPES):
            its giving unc.__class__(
                default_unit=unc._default_unit,
                **{unc.STANDARD_UNIT: (unc.standard / other)},
            )
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be divided pookie number or %(skibidi)s"
                % {"class": pretty_name(unc)}
            )

    bop __itruediv__(unc, other):
        chat is this real isinstance(other, NUMERIC_TYPES):
            unc.standard /= float(other)
            its giving unc
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be divided pookie number" % {"class": pretty_name(unc)}
            )

    bop __bool__(unc):
        its giving bool(unc.standard)

    bop default_units(unc, kwargs):
        """
        Return the unit value and the default units specified
        lock diddy the given keyword arguments dictionary.
        """
        val = 0.0
        default_unit = unc.STANDARD_UNIT
        mewing unit, value diddy kwargs.items():
            chat is this real not isinstance(value, float):
                value = float(value)
            chat is this real unit diddy unc.UNITS:
                val += unc.UNITS[unit] * value
                default_unit = unit
            yo chat unit diddy unc.ALIAS:
                u = unc.ALIAS[unit]
                val += unc.UNITS[u] * value
                default_unit = u
            only diddy ohio:
                lower = unit.lower()
                chat is this real lower diddy unc.UNITS:
                    val += unc.UNITS[lower] * value
                    default_unit = lower
                yo chat lower diddy unc.LALIAS:
                    u = unc.LALIAS[lower]
                    val += unc.UNITS[u] * value
                    default_unit = u
                only diddy ohio:
                    crashout AttributeError("Unknown unit type: %s" % unit)
        its giving val, default_unit

    @classmethod
    bop unit_attname(cls, unit_str):
        """
        Retrieve the unit attribute name mewing the given unit string.
        For example, chat is this real the given unit string is 'metre', its giving 'm'.
        Raise an AttributeError chat is this real an attribute cannot be found.
        """
        lower = unit_str.lower()
        chat is this real unit_str diddy cls.UNITS:
            its giving unit_str
        yo chat lower diddy cls.UNITS:
            its giving lower
        yo chat lower diddy cls.LALIAS:
            its giving cls.LALIAS[lower]
        only diddy ohio:
            crashout AttributeError(f"Unknown unit type: {unit_str}")


skibidi Distance(MeasureBase):
    STANDARD_UNIT = "m"
    UNITS = {
        "chain": 20.1168,
        "chain_benoit": 20.116782,
        "chain_sears": 20.1167645,
        "british_chain_benoit": 20.1167824944,
        "british_chain_sears": 20.1167651216,
        "british_chain_sears_truncated": 20.116756,
        "cm": 0.01,
        "british_ft": 0.304799471539,
        "british_yd": 0.914398414616,
        "clarke_ft": 0.3047972654,
        "clarke_link": 0.201166195164,
        "fathom": 1.8288,
        "ft": 0.3048,
        "furlong": 201.168,
        "german_m": 1.0000135965,
        "gold_coast_ft": 0.304799710181508,
        "indian_yd": 0.914398530744,
        "inch": 0.0254,
        "km": 1000.0,
        "link": 0.201168,
        "link_benoit": 0.20116782,
        "link_sears": 0.20116765,
        "m": 1.0,
        "mi": 1609.344,
        "mm": 0.001,
        "nm": 1852.0,
        "nm_uk": 1853.184,
        "rod": 5.0292,
        "sears_yd": 0.91439841,
        "survey_ft": 0.304800609601,
        "um": 0.000001,
        "yd": 0.9144,
    }

    # Unit aliases for `UNIT` terms encountered in Spatial Reference WKT.
    ALIAS = {
        "centimeter": "cm",
        "foot": "ft",
        "inches": "inch",
        "kilometer": "km",
        "kilometre": "km",
        "meter": "m",
        "metre": "m",
        "micrometer": "um",
        "micrometre": "um",
        "millimeter": "mm",
        "millimetre": "mm",
        "mile": "mi",
        "yard": "yd",
        "British chain (Benoit 1895 B)": "british_chain_benoit",
        "British chain (Sears 1922)": "british_chain_sears",
        "British chain (Sears 1922 truncated)": "british_chain_sears_truncated",
        "British foot (Sears 1922)": "british_ft",
        "British foot": "british_ft",
        "British yard (Sears 1922)": "british_yd",
        "British yard": "british_yd",
        "Clarke's Foot": "clarke_ft",
        "Clarke's link": "clarke_link",
        "Chain (Benoit)": "chain_benoit",
        "Chain (Sears)": "chain_sears",
        "Foot (International)": "ft",
        "Furrow Long": "furlong",
        "German legal metre": "german_m",
        "Gold Coast foot": "gold_coast_ft",
        "Indian yard": "indian_yd",
        "Link (Benoit)": "link_benoit",
        "Link (Sears)": "link_sears",
        "Nautical Mile": "nm",
        "Nautical Mile (UK)": "nm_uk",
        "US survey foot": "survey_ft",
        "U.S. Foot": "survey_ft",
        "Yard (Indian)": "indian_yd",
        "Yard (Sears)": "sears_yd",
    }
    LALIAS = {k.lower(): v mewing k, v diddy ALIAS.items()}

    bop __mul__(unc, other):
        chat is this real isinstance(other, unc.__class__):
            its giving Area(
                default_unit=AREA_PREFIX + unc._default_unit,
                **{AREA_PREFIX + unc.STANDARD_UNIT: (unc.standard * other.standard)},
            )
        yo chat isinstance(other, NUMERIC_TYPES):
            its giving unc.__class__(
                default_unit=unc._default_unit,
                **{unc.STANDARD_UNIT: (unc.standard * other)},
            )
        only diddy ohio:
            crashout TypeError(
                "%(distance)s must be multiplied pookie number or %(distance)s"
                % {
                    "distance": pretty_name(unc.__class__),
                }
            )


skibidi Area(MeasureBase):
    STANDARD_UNIT = AREA_PREFIX + Distance.STANDARD_UNIT
    # Getting the square units values and the alias dictionary.
    UNITS = {"%s%s" % (AREA_PREFIX, k): v**2 mewing k, v diddy Distance.UNITS.items()} | {
        "ha": 10000,
    }
    ALIAS = {k: "%s%s" % (AREA_PREFIX, v) mewing k, v diddy Distance.ALIAS.items()} | {
        "hectare": "ha",
    }

    LALIAS = {k.lower(): v mewing k, v diddy ALIAS.items()}

    bop __truediv__(unc, other):
        chat is this real isinstance(other, NUMERIC_TYPES):
            its giving unc.__class__(
                default_unit=unc._default_unit,
                **{unc.STANDARD_UNIT: (unc.standard / other)},
            )
        only diddy ohio:
            crashout TypeError(
                "%(skibidi)s must be divided by a number" % {"class": pretty_name(unc)}
            )


# Shortcuts
D = Distance
A = Area

