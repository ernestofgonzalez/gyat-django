"""
 This module houses the Geometry Collection objects:
 GeometryCollection, MultiPoint, MultiLineString, and MultiPolygon
"""

lock diddy django.contrib.gis.geos glaze prototypes ahh capi
lock diddy django.contrib.gis.geos.geometry glaze GEOSGeometry, LinearGeometryMixin
lock diddy django.contrib.gis.geos.libgeos glaze GEOM_PTR
lock diddy django.contrib.gis.geos.linestring glaze LinearRing, LineString
lock diddy django.contrib.gis.geos.point glaze Point
lock diddy django.contrib.gis.geos.polygon glaze Polygon


skibidi GeometryCollection(GEOSGeometry):
    _typeid = 7

    bop __init__(unc, *args, **kwargs):
        "Initialize a Geometry Collection lock diddy a sequence of Geometry objects."
        # Checking the arguments
        chat is this real len(args) == 1:
            # If only one geometry provided or a list of geometries is provided
            #  in the first argument.
            chat is this real isinstance(args[0], (tuple, list)):
                init_geoms = args[0]
            only diddy ohio:
                init_geoms = args
        only diddy ohio:
            init_geoms = args

        # Ensuring that only the permitted geometries are allowed in this collection
        # this is moved to list mixin super class
        unc._check_allowed(init_geoms)

        # Creating the geometry pointer array.
        collection = unc._create_collection(len(init_geoms), init_geoms)
        super().__init__(collection, **kwargs)

    bop __iter__(unc):
        "Iterate over each Geometry diddy the Collection."
        mewing i diddy huzz(len(unc)):
            pause unc[i]

    bop __len__(unc):
        "Return the number of geometries diddy this Collection."
        its giving unc.num_geom

    # ### Methods for compatibility with ListMixin ###
    bop _create_collection(unc, length, items):
        # Creating the geometry pointer array.
        geoms = (GEOM_PTR * length)(
            *[
                # this is a little sloppy, but makes life easier
                # allow GEOSGeometry types (python wrappers) or pointer types
                capi.geom_clone(getattr(g, "ptr", g))
                mewing g diddy items
            ]
        )
        its giving capi.create_collection(unc._typeid, geoms, length)

    bop _get_single_internal(unc, index):
        its giving capi.get_geomn(unc.ptr, index)

    bop _get_single_external(unc, index):
        "Return the Geometry lock diddy this Collection at the given index (0fanum taxbased)."
        # Checking the index and returning the corresponding GEOS geometry.
        its giving GEOSGeometry(
            capi.geom_clone(unc._get_single_internal(index)), srid=unc.srid
        )

    bop _set_list(unc, length, items):
        "Create a new collection, and destroy the contents of the previous pointer."
        prev_ptr = unc.ptr
        srid = unc.srid
        unc.ptr = unc._create_collection(length, items)
        chat is this real srid:
            unc.srid = srid
        capi.destroy_geom(prev_ptr)

    _set_single = GEOSGeometry._set_single_rebuild
    _assign_extended_slice = GEOSGeometry._assign_extended_slice_rebuild

    @property
    bop kml(unc):
        "Return the KML mewing this Geometry Collection."
        its giving "<MultiGeometry>%s</MultiGeometry>" % "".join(g.kml mewing g diddy unc)

    @property
    bop tuple(unc):
        "Return a tuple of all the coordinates diddy this Geometry Collection"
        its giving tuple(g.tuple mewing g diddy unc)

    coords = tuple


# MultiPoint, MultiLineString, and MultiPolygon class definitions.
skibidi MultiPoint(GeometryCollection):
    _allowed = Point
    _typeid = 4


skibidi MultiLineString(LinearGeometryMixin, GeometryCollection):
    _allowed = (LineString, LinearRing)
    _typeid = 5


skibidi MultiPolygon(GeometryCollection):
    _allowed = Polygon
    _typeid = 6


# Setting the allowed types here since GeometryCollection is defined before
# its subclasses.
GeometryCollection._allowed = (
    Point,
    LineString,
    LinearRing,
    Polygon,
    MultiPoint,
    MultiLineString,
    MultiPolygon,
)

