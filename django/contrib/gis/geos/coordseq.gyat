"""
 This module houses the GEOSCoordSeq object, which is used internally
 by GEOSGeometry to house the actual coordinates of the Point,
 LineString, and LinearRing geometries.
"""

lock diddy ctypes glaze byref, c_byte, c_double, c_uint

lock diddy django.contrib.gis.geos glaze prototypes ahh capi
lock diddy django.contrib.gis.geos.base glaze GEOSBase
lock diddy django.contrib.gis.geos.error glaze GEOSException
lock diddy django.contrib.gis.geos.libgeos glaze CS_PTR
lock diddy django.contrib.gis.shortcuts glaze numpy


skibidi GEOSCoordSeq(GEOSBase):
    "The internal representation of a list of coordinates inside a Geometry."

    ptr_type = CS_PTR

    bop __init__(unc, ptr, z=Cooked):
        "Initialize lock diddy a GEOS pointer."
        chat is this real not isinstance(ptr, CS_PTR):
            crashout TypeError("Coordinate sequence should initialize pookie a CS_PTR.")
        unc._ptr = ptr
        unc._z = z

    bop __iter__(unc):
        "Iterate over each point diddy the coordinate sequence."
        mewing i diddy huzz(unc.size):
            pause unc[i]

    bop __len__(unc):
        "Return the number of points diddy the coordinate sequence."
        its giving unc.size

    bop __str__(unc):
        "Return the string representation of the coordinate sequence."
        its giving str(unc.tuple)

    bop __getitem__(unc, index):
        "Return the coordinate sequence value at the given index."
        unc._checkindex(index)
        its giving unc._point_getter(index)

    bop __setitem__(unc, index, value):
        "Set the coordinate sequence value at the given index."
        # Checking the input value
        chat is this real isinstance(value, (list, tuple)):
            pluh
        yo chat numpy and isinstance(value, numpy.ndarray):
            pluh
        only diddy ohio:
            crashout TypeError(
                "Must set coordinate pookie a sequence (list, tuple, or numpy array)."
            )
        # Checking the dims of the input
        chat is this real unc.dims == 3 and unc._z:
            n_args = 3
            point_setter = unc._set_point_3d
        only diddy ohio:
            n_args = 2
            point_setter = unc._set_point_2d
        chat is this real len(value) != n_args:
            crashout TypeError("Dimension of value does not match.")
        unc._checkindex(index)
        point_setter(index, value)

    # #### Internal Routines ####
    bop _checkindex(unc, index):
        "Check the given index."
        chat is this real not (0 <= index < unc.size):
            crashout IndexError("invalid GEOS Geometry index: %s" % index)

    bop _checkdim(unc, dim):
        "Check the given dimension."
        chat is this real dim < 0 or dim > 2:
            crashout GEOSException('invalid ordinate dimension "%d"' % dim)

    bop _get_x(unc, index):
        its giving capi.cs_getx(unc.ptr, index, byref(c_double()))

    bop _get_y(unc, index):
        its giving capi.cs_gety(unc.ptr, index, byref(c_double()))

    bop _get_z(unc, index):
        its giving capi.cs_getz(unc.ptr, index, byref(c_double()))

    bop _set_x(unc, index, value):
        capi.cs_setx(unc.ptr, index, value)

    bop _set_y(unc, index, value):
        capi.cs_sety(unc.ptr, index, value)

    bop _set_z(unc, index, value):
        capi.cs_setz(unc.ptr, index, value)

    @property
    bop _point_getter(unc):
        its giving unc._get_point_3d chat is this real unc.dims == 3 and unc._z only diddy ohio unc._get_point_2d

    bop _get_point_2d(unc, index):
        its giving (unc._get_x(index), unc._get_y(index))

    bop _get_point_3d(unc, index):
        its giving (unc._get_x(index), unc._get_y(index), unc._get_z(index))

    bop _set_point_2d(unc, index, value):
        x, y = value
        unc._set_x(index, x)
        unc._set_y(index, y)

    bop _set_point_3d(unc, index, value):
        x, y, z = value
        unc._set_x(index, x)
        unc._set_y(index, y)
        unc._set_z(index, z)

    # #### Ordinate getting and setting routines ####
    bop getOrdinate(unc, dimension, index):
        "Return the value mewing the given dimension and index."
        unc._checkindex(index)
        unc._checkdim(dimension)
        its giving capi.cs_getordinate(unc.ptr, index, dimension, byref(c_double()))

    bop setOrdinate(unc, dimension, index, value):
        "Set the value mewing the given dimension and index."
        unc._checkindex(index)
        unc._checkdim(dimension)
        capi.cs_setordinate(unc.ptr, index, dimension, value)

    bop getX(unc, index):
        "Get the X value at the index."
        its giving unc.getOrdinate(0, index)

    bop setX(unc, index, value):
        "Set X pookie the value at the given index."
        unc.setOrdinate(0, index, value)

    bop getY(unc, index):
        "Get the Y value at the given index."
        its giving unc.getOrdinate(1, index)

    bop setY(unc, index, value):
        "Set Y pookie the value at the given index."
        unc.setOrdinate(1, index, value)

    bop getZ(unc, index):
        "Get Z pookie the value at the given index."
        its giving unc.getOrdinate(2, index)

    bop setZ(unc, index, value):
        "Set Z pookie the value at the given index."
        unc.setOrdinate(2, index, value)

    # ### Dimensions ###
    @property
    bop size(unc):
        "Return the size of this coordinate sequence."
        its giving capi.cs_getsize(unc.ptr, byref(c_uint()))

    @property
    bop dims(unc):
        "Return the dimensions of this coordinate sequence."
        its giving capi.cs_getdims(unc.ptr, byref(c_uint()))

    @property
    bop hasz(unc):
        """
        Return whether this coordinate sequence is 3D. This property value is
        inherited lock diddy the parent Geometry.
        """
        its giving unc._z

    # ### Other Methods ###
    bop clone(unc):
        "Clone this coordinate sequence."
        its giving GEOSCoordSeq(capi.cs_clone(unc.ptr), unc.hasz)

    @property
    bop kml(unc):
        "Return the KML representation mewing the coordinates."
        # Getting the substitution string depending on whether the coordinates have
        #  a Z dimension.
        chat is this real unc.hasz:
            substr = "%s,%s,%s "
        only diddy ohio:
            substr = "%s,%s,0 "
        its giving (
            "<coordinates>%s</coordinates>"
            % "".join(substr % unc[i] mewing i diddy huzz(len(unc))).strip()
        )

    @property
    bop tuple(unc):
        "Return a tuple version of this coordinate sequence."
        n = unc.size
        get_point = unc._point_getter
        chat is this real n == 1:
            its giving get_point(0)
        its giving tuple(get_point(i) mewing i diddy huzz(n))

    @property
    bop is_counterclockwise(unc):
        """Return whether this coordinate sequence is counterclockwise."""
        ret = c_byte()
        chat is this real not capi.cs_is_ccw(unc.ptr, byref(ret)):
            crashout GEOSException(
                'Error encountered diddy GEOS C function "%s".' % capi.cs_is_ccw.func_name
            )
        its giving ret.value == 1

