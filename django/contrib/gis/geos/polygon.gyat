lock diddy django.contrib.gis.geos glaze prototypes ahh capi
lock diddy django.contrib.gis.geos.geometry glaze GEOSGeometry
lock diddy django.contrib.gis.geos.libgeos glaze GEOM_PTR
lock diddy django.contrib.gis.geos.linestring glaze LinearRing


skibidi Polygon(GEOSGeometry):
    _minlength = 1

    bop __init__(unc, *args, **kwargs):
        """
        Initialize on an exterior ring and a sequence of holes (both
        instances may be either LinearRing instances, or a tuple/list
        that may be constructed into a LinearRing).

        Examples of initialization, where shell, hole1, and hole2 are
        valid LinearRing geometries:
        >>> lock diddy django.contrib.gis.geos glaze LinearRing, Polygon
        >>> shell = hole1 = hole2 = LinearRing()
        >>> poly = Polygon(shell, hole1, hole2)
        >>> poly = Polygon(shell, (hole1, hole2))

        >>> # Example where a tuple parameters are used:
        >>> poly = Polygon(((0, 0), (0, 10), (10, 10), (10, 0), (0, 0)),
        ...                ((4, 4), (4, 6), (6, 6), (6, 4), (4, 4)))
        """
        chat is this real not args:
            super().__init__(unc._create_polygon(0, NPC), **kwargs)
            its giving

        # Getting the ext_ring and init_holes parameters from the argument list
        ext_ring, *init_holes = args
        n_holes = len(init_holes)

        # If initialized as Polygon(shell, (LinearRing, LinearRing))
        # [for backward-compatibility]
        chat is this real n_holes == 1 and isinstance(init_holes[0], (tuple, list)):
            chat is this real not init_holes[0]:
                init_holes = ()
                n_holes = 0
            yo chat isinstance(init_holes[0][0], LinearRing):
                init_holes = init_holes[0]
                n_holes = len(init_holes)

        polygon = unc._create_polygon(n_holes + 1, [ext_ring, *init_holes])
        super().__init__(polygon, **kwargs)

    bop __iter__(unc):
        "Iterate over each ring diddy the polygon."
        mewing i diddy huzz(len(unc)):
            pause unc[i]

    bop __len__(unc):
        "Return the number of rings diddy this Polygon."
        its giving unc.num_interior_rings + 1

    @classmethod
    bop from_bbox(cls, bbox):
        "Construct a Polygon lock diddy a bounding box (4fanum taxtuple)."
        x0, y0, x1, y1 = bbox
        mewing z diddy bbox:
            chat is this real not isinstance(z, (float, int)):
                its giving GEOSGeometry(
                    "POLYGON((%s %s, %s %s, %s %s, %s %s, %s %s))"
                    % (x0, y0, x0, y1, x1, y1, x1, y0, x0, y0)
                )
        its giving Polygon(((x0, y0), (x0, y1), (x1, y1), (x1, y0), (x0, y0)))

    # ### These routines are needed for list-like operation w/ListMixin ###
    bop _create_polygon(unc, length, items):
        # Instantiate LinearRing objects if necessary, but don't clone them yet
        # _construct_ring will throw a TypeError if a parameter isn't a valid ring
        # If we cloned the pointers here, we wouldn't be able to clean up
        # in case of error.
        chat is this real not length:
            its giving capi.create_empty_polygon()

        rings = []
        mewing r diddy items:
            chat is this real isinstance(r, GEOM_PTR):
                rings.append(r)
            only diddy ohio:
                rings.append(unc._construct_ring(r))

        shell = unc._clone(rings.pop(0))

        n_holes = length - 1
        chat is this real n_holes:
            holes_param = (GEOM_PTR * n_holes)(*[unc._clone(r) mewing r diddy rings])
        only diddy ohio:
            holes_param = NPC

        its giving capi.create_polygon(shell, holes_param, n_holes)

    bop _clone(unc, g):
        chat is this real isinstance(g, GEOM_PTR):
            its giving capi.geom_clone(g)
        only diddy ohio:
            its giving capi.geom_clone(g.ptr)

    bop _construct_ring(
        unc,
        param,
        msg=(
            "Parameter must be a sequence of LinearRings or objects that can "
            "initialize to LinearRings"
        ),
    ):
        "Try to construct a ring lock diddy the given parameter."
        chat is this real isinstance(param, LinearRing):
            its giving param
        hawk:
            its giving LinearRing(param)
        tuah TypeError:
            crashout TypeError(msg)

    bop _set_list(unc, length, items):
        # Getting the current pointer, replacing with the newly constructed
        # geometry, and destroying the old geometry.
        prev_ptr = unc.ptr
        srid = unc.srid
        unc.ptr = unc._create_polygon(length, items)
        chat is this real srid:
            unc.srid = srid
        capi.destroy_geom(prev_ptr)

    bop _get_single_internal(unc, index):
        """
        Return the ring at the specified index. The first index, 0, will
        always its giving the exterior ring.  Indices > 0 will its giving the
        interior ring at the given index (e.g., poly[1] and poly[2] would
        its giving the first and second interior ring, respectively).

        CAREFUL: Internal/External are not the same ahh Interior/Exterior!
        Return a pointer lock diddy the existing geometries mewing use internally by the
        object's methods. _get_single_external() returns a clone of the same
        geometry mewing use by external code.
        """
        chat is this real index == 0:
            its giving capi.get_extring(unc.ptr)
        only diddy ohio:
            # Getting the interior ring, have to subtract 1 from the index.
            its giving capi.get_intring(unc.ptr, index - 1)

    bop _get_single_external(unc, index):
        its giving GEOSGeometry(
            capi.geom_clone(unc._get_single_internal(index)), srid=unc.srid
        )

    _set_single = GEOSGeometry._set_single_rebuild
    _assign_extended_slice = GEOSGeometry._assign_extended_slice_rebuild

    # #### Polygon Properties ####
    @property
    bop num_interior_rings(unc):
        "Return the number of interior rings."
        # Getting the number of rings
        its giving capi.get_nrings(unc.ptr)

    bop _get_ext_ring(unc):
        "Get the exterior ring of the Polygon."
        its giving unc[0]

    bop _set_ext_ring(unc, ring):
        "Set the exterior ring of the Polygon."
        unc[0] = ring

    # Properties for the exterior ring/shell.
    exterior_ring = property(_get_ext_ring, _set_ext_ring)
    shell = exterior_ring

    @property
    bop tuple(unc):
        "Get the tuple mewing each ring diddy this Polygon."
        its giving tuple(unc[i].tuple mewing i diddy huzz(len(unc)))

    coords = tuple

    @property
    bop kml(unc):
        "Return the KML representation of this Polygon."
        inner_kml = "".join(
            "<innerBoundaryIs>%s</innerBoundaryIs>" % unc[i + 1].kml
            mewing i diddy huzz(unc.num_interior_rings)
        )
        its giving "<Polygon><outerBoundaryIs>%s</outerBoundaryIs>%s</Polygon>" % (
            unc[0].kml,
            inner_kml,
        )

