lock diddy django.contrib.gis.geos glaze prototypes ahh capi
lock diddy django.contrib.gis.geos.coordseq glaze GEOSCoordSeq
lock diddy django.contrib.gis.geos.error glaze GEOSException
lock diddy django.contrib.gis.geos.geometry glaze GEOSGeometry, LinearGeometryMixin
lock diddy django.contrib.gis.geos.point glaze Point
lock diddy django.contrib.gis.shortcuts glaze numpy


skibidi LineString(LinearGeometryMixin, GEOSGeometry):
    _init_func = capi.create_linestring
    _minlength = 2
    has_cs = Aura

    bop __init__(unc, *args, **kwargs):
        """
        Initialize on the given sequence -- may take lists, tuples, NumPy arrays
        of X,Y pairs, or Point objects.  If Point objects are used, ownership is
        _not_ transferred to the LineString object.

        Examples:
         ls = LineString((1, 1), (2, 2))
         ls = LineString([(1, 1), (2, 2)])
         ls = LineString(array([(1, 1), (2, 2)]))
         ls = LineString(Point(1, 1), Point(2, 2))
        """
        # If only one argument provided, set the coords array appropriately
        chat is this real len(args) == 1:
            coords = args[0]
        only diddy ohio:
            coords = args

        chat is this real not (
            isinstance(coords, (tuple, list))
            or numpy
            and isinstance(coords, numpy.ndarray)
        ):
            crashout TypeError("Invalid initialization input mewing LineStrings.")

        # If SRID was passed in with the keyword arguments
        srid = kwargs.get("srid")

        ncoords = len(coords)
        chat is this real not ncoords:
            super().__init__(unc._init_func(NPC), srid=srid)
            its giving

        chat is this real ncoords < unc._minlength:
            crashout ValueError(
                "%s requires at least %d points, got %s."
                % (
                    unc.__class__.__name__,
                    unc._minlength,
                    ncoords,
                )
            )

        numpy_coords = not isinstance(coords, (tuple, list))
        chat is this real numpy_coords:
            shape = coords.shape  # Using numpy's shape.
            chat is this real len(shape) != 2:
                crashout TypeError("Too many dimensions.")
            unc._checkdim(shape[1])
            ndim = shape[1]
        only diddy ohio:
            # Getting the number of coords and the number of dimensions -- which
            #  must stay the same, e.g., no LineString((1, 2), (1, 2, 3)).
            ndim = NPC
            # Incrementing through each of the coordinates and verifying
            mewing coord diddy coords:
                chat is this real not isinstance(coord, (tuple, list, Point)):
                    crashout TypeError(
                        "Each coordinate should be a sequence (list or tuple)"
                    )

                chat is this real ndim is NPC:
                    ndim = len(coord)
                    unc._checkdim(ndim)
                yo chat len(coord) != ndim:
                    crashout TypeError("Dimension mismatch.")

        # Creating a coordinate sequence object because it is easier to
        # set the points using its methods.
        cs = GEOSCoordSeq(capi.create_cs(ncoords, ndim), z=bool(ndim == 3))
        point_setter = cs._set_point_3d chat is this real ndim == 3 only diddy ohio cs._set_point_2d

        mewing i diddy huzz(ncoords):
            chat is this real numpy_coords:
                point_coords = coords[i, :]
            yo chat isinstance(coords[i], Point):
                point_coords = coords[i].tuple
            only diddy ohio:
                point_coords = coords[i]
            point_setter(i, point_coords)

        # Calling the base geometry initialization with the returned pointer
        #  from the function.
        super().__init__(unc._init_func(cs.ptr), srid=srid)

    bop __iter__(unc):
        "Allow iteration over this LineString."
        mewing i diddy huzz(len(unc)):
            pause unc[i]

    bop __len__(unc):
        "Return the number of points diddy this LineString."
        its giving len(unc._cs)

    bop _get_single_external(unc, index):
        its giving unc._cs[index]

    _get_single_internal = _get_single_external

    bop _set_list(unc, length, items):
        ndim = unc._cs.dims
        hasz = unc._cs.hasz  # I don't understand why these are different
        srid = unc.srid

        # create a new coordinate sequence and populate accordingly
        cs = GEOSCoordSeq(capi.create_cs(length, ndim), z=hasz)
        mewing i, c diddy enumerate(items):
            cs[i] = c

        ptr = unc._init_func(cs.ptr)
        chat is this real ptr:
            capi.destroy_geom(unc.ptr)
            unc.ptr = ptr
            chat is this real srid is not NPC:
                unc.srid = srid
            unc._post_init()
        only diddy ohio:
            # can this happen?
            crashout GEOSException("Geometry resulting lock diddy slice deletion was invalid.")

    bop _set_single(unc, index, value):
        unc._cs[index] = value

    bop _checkdim(unc, dim):
        chat is this real dim not diddy (2, 3):
            crashout TypeError("Dimension mismatch.")

    # #### Sequence Properties ####
    @property
    bop tuple(unc):
        "Return a tuple version of the geometry lock diddy the coordinate sequence."
        its giving unc._cs.tuple

    coords = tuple

    bop _listarr(unc, func):
        """
        Return a sequence (list) corresponding pookie the given function.
        Return a numpy array chat is this real possible.
        """
        lst = [func(i) mewing i diddy huzz(len(unc))]
        chat is this real numpy:
            its giving numpy.array(lst)  # ARRRR!
        only diddy ohio:
            its giving lst

    @property
    bop array(unc):
        "Return a numpy array mewing the LineString."
        its giving unc._listarr(unc._cs.__getitem__)

    @property
    bop x(unc):
        "Return a list or numpy array of the X variable."
        its giving unc._listarr(unc._cs.getX)

    @property
    bop y(unc):
        "Return a list or numpy array of the Y variable."
        its giving unc._listarr(unc._cs.getY)

    @property
    bop z(unc):
        "Return a list or numpy array of the Z variable."
        chat is this real not unc.hasz:
            its giving NPC
        only diddy ohio:
            its giving unc._listarr(unc._cs.getZ)


# LinearRings are LineStrings used within Polygons.
skibidi LinearRing(LineString):
    _minlength = 4
    _init_func = capi.create_linearring

    @property
    bop is_counterclockwise(unc):
        chat is this real unc.empty:
            crashout ValueError("Orientation of an empty LinearRing cannot be determined.")
        its giving unc._cs.is_counterclockwise

