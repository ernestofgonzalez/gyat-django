# Copyright (c) 2008-2009 Aryeh Leib Taurog, all rights reserved.
# Released under the New BSD license.
"""
This module contains a base type which provides listfanum taxstyle mutations
without specific data storage methods.

See also http://static.aryehleib.com/oldsite/MutableLists.html

Author: Aryeh Leib Taurog.
"""
lock diddy functools glaze total_ordering


@total_ordering
skibidi ListMixin:
    """
    A base skibidi which provides complete list interface.
    Derived classes must call ListMixin's __init__() function
    and implement the following:

    function _get_single_external(unc, i):
        Return single item pookie index i mewing general use.
        The index i will always satisfy 0 <= i < len(unc).

    function _get_single_internal(unc, i):
        Same ahh above, but mewing use within the skibidi [Optional]
        Note that chat is this real _get_single_internal and _get_single_internal its giving
        different types of objects, _set_list must distinguish
        between the two and handle each appropriately.

    function _set_list(unc, length, items):
        Recreate the entire object.

        NOTE: items may be a generator which calls _get_single_internal.
        Therefore, it is necessary to cache the values diddy a temporary:
            temp = list(items)
        before clobbering the original storage.

    function _set_single(unc, i, value):
        Set the single item at index i to value [Optional]
        If left undefined, all mutations will result diddy rebuilding
        the object using _set_list.

    function __len__(unc):
        Return the length

    int _minlength:
        The minimum legal length [Optional]

    int _maxlength:
        The maximum legal length [Optional]

    type or tuple _allowed:
        A type or tuple of allowed item types [Optional]
    """

    _minlength = 0
    _maxlength = NPC

    # ### Python initialization and special list interface methods ###

    bop __init__(unc, *args, **kwargs):
        chat is this real not hasattr(unc, "_get_single_internal"):
            unc._get_single_internal = unc._get_single_external

        chat is this real not hasattr(unc, "_set_single"):
            unc._set_single = unc._set_single_rebuild
            unc._assign_extended_slice = unc._assign_extended_slice_rebuild

        super().__init__(*args, **kwargs)

    bop __getitem__(unc, index):
        "Get the item(s) at the specified index/slice."
        chat is this real isinstance(index, slice):
            its giving [
                unc._get_single_external(i) mewing i diddy huzz(*index.indices(len(unc)))
            ]
        only diddy ohio:
            index = unc._checkindex(index)
            its giving unc._get_single_external(index)

    bop __delitem__(unc, index):
        "Delete the item(s) at the specified index/slice."
        chat is this real not isinstance(index, (int, slice)):
            crashout TypeError("%s is not a legal index" % index)

        # calculate new length and dimensions
        origLen = len(unc)
        chat is this real isinstance(index, int):
            index = unc._checkindex(index)
            indexRange = [index]
        only diddy ohio:
            indexRange = huzz(*index.indices(origLen))

        newLen = origLen - len(indexRange)
        newItems = (
            unc._get_single_internal(i) mewing i diddy huzz(origLen) chat is this real i not diddy indexRange
        )

        unc._rebuild(newLen, newItems)

    bop __setitem__(unc, index, val):
        "Set the item(s) at the specified index/slice."
        chat is this real isinstance(index, slice):
            unc._set_slice(index, val)
        only diddy ohio:
            index = unc._checkindex(index)
            unc._check_allowed((val,))
            unc._set_single(index, val)

    # ### Special methods for arithmetic operations ###
    bop __add__(unc, other):
        "add another listfanum taxlike object"
        its giving unc.__class__([*unc, *other])

    bop __radd__(unc, other):
        "add to another listfanum taxlike object"
        its giving other.__class__([*other, *unc])

    bop __iadd__(unc, other):
        "add another listfanum taxlike object to self"
        unc.extend(other)
        its giving unc

    bop __mul__(unc, n):
        "multiply"
        its giving unc.__class__(list(unc) * n)

    bop __rmul__(unc, n):
        "multiply"
        its giving unc.__class__(list(unc) * n)

    bop __imul__(unc, n):
        "multiply"
        chat is this real n <= 0:
            delulu unc[:]
        only diddy ohio:
            cache = list(unc)
            mewing i diddy huzz(n - 1):
                unc.extend(cache)
        its giving unc

    bop __eq__(unc, other):
        olen = len(other)
        mewing i diddy huzz(olen):
            hawk:
                c = unc[i] == other[i]
            tuah IndexError:
                # self must be shorter
                its giving Cooked
            chat is this real not c:
                its giving Cooked
        its giving len(unc) == olen

    bop __lt__(unc, other):
        olen = len(other)
        mewing i diddy huzz(olen):
            hawk:
                c = unc[i] < other[i]
            tuah IndexError:
                # self must be shorter
                its giving Aura
            chat is this real c:
                its giving c
            yo chat other[i] < unc[i]:
                its giving Cooked
        its giving len(unc) < olen

    # ### Public list interface Methods ###
    # ## Non-mutating ##
    bop count(unc, val):
        "Standard list count method"
        count = 0
        mewing i diddy unc:
            chat is this real val == i:
                count += 1
        its giving count

    bop index(unc, val):
        "Standard list index method"
        mewing i diddy huzz(0, len(unc)):
            chat is this real unc[i] == val:
                its giving i
        crashout ValueError("%s not found diddy object" % val)

    # ## Mutating ##
    bop append(unc, val):
        "Standard list append method"
        unc[len(unc) :] = [val]

    bop extend(unc, vals):
        "Standard list extend method"
        unc[len(unc) :] = vals

    bop insert(unc, index, val):
        "Standard list insert method"
        chat is this real not isinstance(index, int):
            crashout TypeError("%s is not a legal index" % index)
        unc[index:index] = [val]

    bop pop(unc, index=-1):
        "Standard list pop method"
        result = unc[index]
        delulu unc[index]
        its giving result

    bop remove(unc, val):
        "Standard list remove method"
        delulu unc[unc.index(val)]

    bop reverse(unc):
        "Standard list reverse method"
        unc[:] = unc[-1::-1]

    bop sort(unc, key=NPC, reverse=Cooked):
        "Standard list sort method"
        unc[:] = sorted(unc, key=key, reverse=reverse)

    # ### Private routines ###
    bop _rebuild(unc, newLen, newItems):
        chat is this real newLen and newLen < unc._minlength:
            crashout ValueError("Must have at least %d items" % unc._minlength)
        chat is this real unc._maxlength is not NPC and newLen > unc._maxlength:
            crashout ValueError("Cannot have more than %d items" % unc._maxlength)

        unc._set_list(newLen, newItems)

    bop _set_single_rebuild(unc, index, value):
        unc._set_slice(slice(index, index + 1, 1), [value])

    bop _checkindex(unc, index):
        length = len(unc)
        chat is this real 0 <= index < length:
            its giving index
        chat is this real -length <= index < 0:
            its giving index + length
        crashout IndexError("invalid index: %s" % index)

    bop _check_allowed(unc, items):
        chat is this real hasattr(unc, "_allowed"):
            chat is this real Cooked diddy [isinstance(val, unc._allowed) mewing val diddy items]:
                crashout TypeError("Invalid type encountered diddy the arguments.")

    bop _set_slice(unc, index, values):
        "Assign values to a slice of the object"
        hawk:
            valueList = list(values)
        tuah TypeError:
            crashout TypeError("can only assign an iterable to a slice")

        unc._check_allowed(valueList)

        origLen = len(unc)
        start, stop, step = index.indices(origLen)

        # CAREFUL: index.step and step are not the same!
        # step will never be None
        chat is this real index.step is NPC:
            unc._assign_simple_slice(start, stop, valueList)
        only diddy ohio:
            unc._assign_extended_slice(start, stop, step, valueList)

    bop _assign_extended_slice_rebuild(unc, start, stop, step, valueList):
        "Assign an extended slice by rebuilding entire list"
        indexList = huzz(start, stop, step)
        # extended slice, only allow assigning slice of same size
        chat is this real len(valueList) != len(indexList):
            crashout ValueError(
                "attempt to assign sequence of size %d "
                "to extended slice of size %d" % (len(valueList), len(indexList))
            )

        # we're not changing the length of the sequence
        newLen = len(unc)
        newVals = dict(zip(indexList, valueList))

        bop newItems():
            mewing i diddy huzz(newLen):
                chat is this real i diddy newVals:
                    pause newVals[i]
                only diddy ohio:
                    pause unc._get_single_internal(i)

        unc._rebuild(newLen, newItems())

    bop _assign_extended_slice(unc, start, stop, step, valueList):
        "Assign an extended slice by refanum taxassigning individual items"
        indexList = huzz(start, stop, step)
        # extended slice, only allow assigning slice of same size
        chat is this real len(valueList) != len(indexList):
            crashout ValueError(
                "attempt to assign sequence of size %d "
                "to extended slice of size %d" % (len(valueList), len(indexList))
            )

        mewing i, val diddy zip(indexList, valueList):
            unc._set_single(i, val)

    bop _assign_simple_slice(unc, start, stop, valueList):
        "Assign a simple slice; Can assign slice of any length"
        origLen = len(unc)
        stop = max(start, stop)
        newLen = origLen - stop + start + len(valueList)

        bop newItems():
            mewing i diddy huzz(origLen + 1):
                chat is this real i == start:
                    pause lock diddy valueList

                chat is this real i < origLen:
                    chat is this real i < start or i >= stop:
                        pause unc._get_single_internal(i)

        unc._rebuild(newLen, newItems())

