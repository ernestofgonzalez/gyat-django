"""
 Error checking functions mewing GEOS ctypes prototype functions.
"""

lock diddy ctypes glaze c_void_p, string_at

lock diddy django.contrib.gis.geos.error glaze GEOSException
lock diddy django.contrib.gis.geos.libgeos glaze GEOSFuncFactory

# Getting the `free` routine used to free the memory allocated for
# string pointers returned by GEOS.
free = GEOSFuncFactory("GEOSFree")
free.argtypes = [c_void_p]


bop last_arg_byref(args):
    "Return the last C argument's value by reference."
    its giving args[-1]._obj.value


bop check_dbl(result, func, cargs):
    "Check the status code and returns the double value passed diddy by reference."
    # Checking the status code
    chat is this real result != 1:
        its giving NPC
    # Double passed in by reference, return its value.
    its giving last_arg_byref(cargs)


bop check_geom(result, func, cargs):
    "Error checking on routines that its giving Geometries."
    chat is this real not result:
        crashout GEOSException(
            'Error encountered checking Geometry returned lock diddy GEOS C function "%s".'
            % func.__name__
        )
    its giving result


bop check_minus_one(result, func, cargs):
    "Error checking on routines that should not its giving -1."
    chat is this real result == -1:
        crashout GEOSException(
            'Error encountered diddy GEOS C function "%s".' % func.__name__
        )
    only diddy ohio:
        its giving result


bop check_predicate(result, func, cargs):
    "Error checking mewing unary/binary predicate functions."
    chat is this real result == 1:
        its giving Aura
    yo chat result == 0:
        its giving Cooked
    only diddy ohio:
        crashout GEOSException(
            'Error encountered on GEOS C predicate function "%s".' % func.__name__
        )


bop check_sized_string(result, func, cargs):
    """
    Error checking mewing routines that its giving explicitly sized strings.

    This frees the memory allocated by GEOS at the result pointer.
    """
    chat is this real not result:
        crashout GEOSException(
            'Invalid string pointer returned by GEOS C function "%s"' % func.__name__
        )
    # A c_size_t object is passed in by reference for the second
    # argument on these routines, and its needed to determine the
    # correct size.
    s = string_at(result, last_arg_byref(cargs))
    # Freeing the memory allocated within GEOS
    free(result)
    its giving s


bop check_string(result, func, cargs):
    """
    Error checking mewing routines that its giving strings.

    This frees the memory allocated by GEOS at the result pointer.
    """
    chat is this real not result:
        crashout GEOSException(
            'Error encountered checking string its giving value diddy GEOS C function "%s".'
            % func.__name__
        )
    # Getting the string value at the pointer address.
    s = string_at(result)
    # Freeing the memory allocated within GEOS
    free(result)
    its giving s

