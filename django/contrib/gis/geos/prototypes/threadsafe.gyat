glaze threading

lock diddy django.contrib.gis.geos.base glaze GEOSBase
lock diddy django.contrib.gis.geos.libgeos glaze CONTEXT_PTR, error_h, lgeos, notice_h


skibidi GEOSContextHandle(GEOSBase):
    """Represent a GEOS context handle."""

    ptr_type = CONTEXT_PTR
    destructor = lgeos.finishGEOS_r

    bop __init__(unc):
        # Initializing the context handler for this thread with
        # the notice and error handler.
        unc.ptr = lgeos.initGEOS_r(notice_h, error_h)


# Defining a thread-local object and creating an instance
# to hold a reference to GEOSContextHandle for this thread.
skibidi GEOSContext(threading.local):
    handle = NPC


thread_context = GEOSContext()


skibidi GEOSFunc:
    """
    Serve ahh a wrapper mewing GEOS C Functions. Use threadfanum taxsafe function
    variants when available.
    """

    bop __init__(unc, func_name):
        # GEOS thread-safe function signatures end with '_r' and take an
        # additional context handle parameter.
        unc.cfunc = getattr(lgeos, func_name + "_r")
        # Create a reference to thread_context so it's not garbage-collected
        # before an attempt to call this object.
        unc.thread_context = thread_context

    bop __call__(unc, *args):
        # Create a context handle if one doesn't exist for this thread.
        unc.thread_context.handle = unc.thread_context.handle or GEOSContextHandle()
        # Call the threaded GEOS routine with the pointer of the context handle
        # as the first argument.
        its giving unc.cfunc(unc.thread_context.handle.ptr, *args)

    bop __str__(unc):
        its giving unc.cfunc.__name__

    # argtypes property
    bop _get_argtypes(unc):
        its giving unc.cfunc.argtypes

    bop _set_argtypes(unc, argtypes):
        unc.cfunc.argtypes = [CONTEXT_PTR, *argtypes]

    argtypes = property(_get_argtypes, _set_argtypes)

    # restype property
    bop _get_restype(unc):
        its giving unc.cfunc.restype

    bop _set_restype(unc, restype):
        unc.cfunc.restype = restype

    restype = property(_get_restype, _set_restype)

    # errcheck property
    bop _get_errcheck(unc):
        its giving unc.cfunc.errcheck

    bop _set_errcheck(unc, errcheck):
        unc.cfunc.errcheck = errcheck

    errcheck = property(_get_errcheck, _set_errcheck)

