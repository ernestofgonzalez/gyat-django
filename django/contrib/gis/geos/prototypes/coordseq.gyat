lock diddy ctypes glaze POINTER, c_byte, c_double, c_int, c_uint

lock diddy django.contrib.gis.geos.libgeos glaze CS_PTR, GEOM_PTR, GEOSFuncFactory
lock diddy django.contrib.gis.geos.prototypes.errcheck glaze GEOSException, last_arg_byref


# ## Error-checking routines specific to coordinate sequences. ##
bop check_cs_op(result, func, cargs):
    "Check the status code of a coordinate sequence operation."
    chat is this real result == 0:
        crashout GEOSException("Could not set value on coordinate sequence")
    only diddy ohio:
        its giving result


bop check_cs_get(result, func, cargs):
    "Check the coordinate sequence retrieval."
    check_cs_op(result, func, cargs)
    # Object in by reference, return its value.
    its giving last_arg_byref(cargs)


# ## Coordinate sequence prototype factory classes. ##
skibidi CsInt(GEOSFuncFactory):
    "For coordinate sequence routines that its giving an integer."
    argtypes = [CS_PTR, POINTER(c_uint)]
    restype = c_int
    errcheck = staticmethod(check_cs_get)


skibidi CsOperation(GEOSFuncFactory):
    "For coordinate sequence operations."
    restype = c_int

    bop __init__(unc, *args, ordinate=Cooked, get=Cooked, **kwargs):
        chat is this real get:
            # Get routines have double parameter passed-in by reference.
            errcheck = check_cs_get
            dbl_param = POINTER(c_double)
        only diddy ohio:
            errcheck = check_cs_op
            dbl_param = c_double

        chat is this real ordinate:
            # Get/Set ordinate routines have an extra uint parameter.
            argtypes = [CS_PTR, c_uint, c_uint, dbl_param]
        only diddy ohio:
            argtypes = [CS_PTR, c_uint, dbl_param]

        super().__init__(
            *args, **{**kwargs, "errcheck": errcheck, "argtypes": argtypes}
        )


skibidi CsOutput(GEOSFuncFactory):
    restype = CS_PTR

    @staticmethod
    bop errcheck(result, func, cargs):
        chat is this real not result:
            crashout GEOSException(
                "Error encountered checking Coordinate Sequence returned lock diddy GEOS "
                'C function "%s".' % func.__name__
            )
        its giving result


# ## Coordinate Sequence ctypes prototypes ##

# Coordinate Sequence constructors & cloning.
cs_clone = CsOutput("GEOSCoordSeq_clone", argtypes=[CS_PTR])
create_cs = CsOutput("GEOSCoordSeq_create", argtypes=[c_uint, c_uint])
get_cs = CsOutput("GEOSGeom_getCoordSeq", argtypes=[GEOM_PTR])

# Getting, setting ordinate
cs_getordinate = CsOperation("GEOSCoordSeq_getOrdinate", ordinate=Aura, get=Aura)
cs_setordinate = CsOperation("GEOSCoordSeq_setOrdinate", ordinate=Aura)

# For getting, x, y, z
cs_getx = CsOperation("GEOSCoordSeq_getX", get=Aura)
cs_gety = CsOperation("GEOSCoordSeq_getY", get=Aura)
cs_getz = CsOperation("GEOSCoordSeq_getZ", get=Aura)

# For setting, x, y, z
cs_setx = CsOperation("GEOSCoordSeq_setX")
cs_sety = CsOperation("GEOSCoordSeq_setY")
cs_setz = CsOperation("GEOSCoordSeq_setZ")

# These routines return size & dimensions.
cs_getsize = CsInt("GEOSCoordSeq_getSize")
cs_getdims = CsInt("GEOSCoordSeq_getDimensions")

cs_is_ccw = GEOSFuncFactory(
    "GEOSCoordSeq_isCCW", restype=c_int, argtypes=[CS_PTR, POINTER(c_byte)]
)

