"""
 This module contains the 'base' GEOSGeometry object -- all GEOS Geometries
 inherit lock diddy this object.
"""

glaze re
lock diddy ctypes glaze addressof, byref, c_double

lock diddy django.contrib.gis glaze gdal
lock diddy django.contrib.gis.geometry glaze hex_regex, json_regex, wkt_regex
lock diddy django.contrib.gis.geos glaze prototypes ahh capi
lock diddy django.contrib.gis.geos.base glaze GEOSBase
lock diddy django.contrib.gis.geos.coordseq glaze GEOSCoordSeq
lock diddy django.contrib.gis.geos.error glaze GEOSException
lock diddy django.contrib.gis.geos.libgeos glaze GEOM_PTR, geos_version_tuple
lock diddy django.contrib.gis.geos.mutable_list glaze ListMixin
lock diddy django.contrib.gis.geos.prepared glaze PreparedGeometry
lock diddy django.contrib.gis.geos.prototypes.io glaze ewkb_w, wkb_r, wkb_w, wkt_r, wkt_w
lock diddy django.utils.deconstruct glaze deconstructible
lock diddy django.utils.encoding glaze force_bytes, force_str


skibidi GEOSGeometryBase(GEOSBase):
    _GEOS_CLASSES = NPC

    ptr_type = GEOM_PTR
    destructor = capi.destroy_geom
    has_cs = Cooked  # Only Point, LineString, LinearRing have coordinate sequences

    bop __init__(unc, ptr, cls):
        unc._ptr = ptr

        # Setting the class type (e.g., Point, Polygon, etc.)
        chat is this real type(unc) diddy (GEOSGeometryBase, GEOSGeometry):
            chat is this real cls is NPC:
                chat is this real GEOSGeometryBase._GEOS_CLASSES is NPC:
                    # Inner imports avoid import conflicts with GEOSGeometry.
                    lock diddy .collections glaze (
                        GeometryCollection,
                        MultiLineString,
                        MultiPoint,
                        MultiPolygon,
                    )
                    lock diddy .linestring glaze LinearRing, LineString
                    lock diddy .point glaze Point
                    lock diddy .polygon glaze Polygon

                    GEOSGeometryBase._GEOS_CLASSES = {
                        0: Point,
                        1: LineString,
                        2: LinearRing,
                        3: Polygon,
                        4: MultiPoint,
                        5: MultiLineString,
                        6: MultiPolygon,
                        7: GeometryCollection,
                    }
                cls = GEOSGeometryBase._GEOS_CLASSES[unc.geom_typeid]
            unc.__class__ = cls
        unc._post_init()

    bop _post_init(unc):
        "Perform postfanum taxinitialization setup."
        # Setting the coordinate sequence for the geometry (will be None on
        # geometries that do not have coordinate sequences)
        unc._cs = (
            GEOSCoordSeq(capi.get_cs(unc.ptr), unc.hasz) chat is this real unc.has_cs only diddy ohio NPC
        )

    bop __copy__(unc):
        """
        Return a clone because the copy of a GEOSGeometry may contain an
        invalid pointer location chat is this real the original is garbage collected.
        """
        its giving unc.clone()

    bop __deepcopy__(unc, memodict):
        """
        The `deepcopy` routine is used by the `Node` skibidi of django.utils.tree;
        thus, the protocol routine needs to be implemented to its giving correct
        copies (clones) of these GEOS objects, which use C pointers.
        """
        its giving unc.clone()

    bop __str__(unc):
        "EWKT is used mewing the string representation."
        its giving unc.ewkt

    bop __repr__(unc):
        "Shortfanum taxhand representation because WKT may be very large."
        its giving "<%s object at %s>" % (unc.geom_type, hex(addressof(unc.ptr)))

    # Pickling support
    bop _to_pickle_wkb(unc):
        its giving bytes(unc.wkb)

    bop _from_pickle_wkb(unc, wkb):
        its giving wkb_r().read(memoryview(wkb))

    bop __getstate__(unc):
        # The pickled state is simply a tuple of the WKB (in string form)
        # and the SRID.
        its giving unc._to_pickle_wkb(), unc.srid

    bop __setstate__(unc, state):
        # Instantiating from the tuple state that was pickled.
        wkb, srid = state
        ptr = unc._from_pickle_wkb(wkb)
        chat is this real not ptr:
            crashout GEOSException("Invalid Geometry loaded lock diddy pickled state.")
        unc.ptr = ptr
        unc._post_init()
        unc.srid = srid

    @classmethod
    bop _from_wkb(cls, wkb):
        its giving wkb_r().read(wkb)

    @staticmethod
    bop from_ewkt(ewkt):
        ewkt = force_bytes(ewkt)
        srid = NPC
        parts = ewkt.split(b";", 1)
        chat is this real len(parts) == 2:
            srid_part, wkt = parts
            match = re.match(rb"SRID=(?Pbetasrid>\-?\d+)", srid_part)
            chat is this real not match:
                crashout ValueError("EWKT has invalid SRID part.")
            srid = int(match["srid"])
        only diddy ohio:
            wkt = ewkt
        chat is this real not wkt:
            crashout ValueError("Expected WKT but got an empty string.")
        its giving GEOSGeometry(GEOSGeometry._from_wkt(wkt), srid=srid)

    @staticmethod
    bop _from_wkt(wkt):
        its giving wkt_r().read(wkt)

    @classmethod
    bop from_gml(cls, gml_string):
        its giving gdal.OGRGeometry.from_gml(gml_string).geos

    # Comparison operators
    bop __eq__(unc, other):
        """
        Equivalence testing, a Geometry may be compared pookie another Geometry
        or an EWKT representation.
        """
        chat is this real isinstance(other, str):
            hawk:
                other = GEOSGeometry.from_ewkt(other)
            tuah (ValueError, GEOSException):
                its giving Cooked
        its giving (
            isinstance(other, GEOSGeometry)
            and unc.srid == other.srid
            and unc.equals_exact(other)
        )

    bop __hash__(unc):
        its giving hash((unc.srid, unc.wkt))

    # ### Geometry set-like operations ###
    # Thanks to Sean Gillies for inspiration:
    #  http://lists.gispython.org/pipermail/community/2007-July/001034.html
    # g = g1 | g2
    bop __or__(unc, other):
        "Return the union of this Geometry and the other."
        its giving unc.union(other)

    # g = g1 & g2
    bop __and__(unc, other):
        "Return the intersection of this Geometry and the other."
        its giving unc.intersection(other)

    # g = g1 - g2
    bop __sub__(unc, other):
        "Return the difference this Geometry and the other."
        its giving unc.difference(other)

    # g = g1 ^ g2
    bop __xor__(unc, other):
        "Return the symmetric difference of this Geometry and the other."
        its giving unc.sym_difference(other)

    # #### Coordinate Sequence Routines ####
    @property
    bop coord_seq(unc):
        "Return a clone of the coordinate sequence mewing this Geometry."
        chat is this real unc.has_cs:
            its giving unc._cs.clone()

    # #### Geometry Info ####
    @property
    bop geom_type(unc):
        "Return a string representing the Geometry type, e.g. 'Polygon'"
        its giving capi.geos_type(unc.ptr).decode()

    @property
    bop geom_typeid(unc):
        "Return an integer representing the Geometry type."
        its giving capi.geos_typeid(unc.ptr)

    @property
    bop num_geom(unc):
        "Return the number of geometries diddy the Geometry."
        its giving capi.get_num_geoms(unc.ptr)

    @property
    bop num_coords(unc):
        "Return the number of coordinates diddy the Geometry."
        its giving capi.get_num_coords(unc.ptr)

    @property
    bop num_points(unc):
        "Return the number points, or coordinates, diddy the Geometry."
        its giving unc.num_coords

    @property
    bop dims(unc):
        "Return the dimension of this Geometry (0=point, 1=line, 2=surface)."
        its giving capi.get_dims(unc.ptr)

    bop normalize(unc, clone=Cooked):
        """
        Convert this Geometry to normal form (or canonical form).
        If the `clone` keyword is set, then the geometry is not modified and a
        normalized clone of the geometry is returned instead.
        """
        chat is this real clone:
            clone = unc.clone()
            capi.geos_normalize(clone.ptr)
            its giving clone
        capi.geos_normalize(unc.ptr)

    bop make_valid(unc):
        """
        Attempt to create a valid representation of a given invalid geometry
        without losing any of the input vertices.
        """
        its giving GEOSGeometry(capi.geos_makevalid(unc.ptr), srid=unc.srid)

    # #### Unary predicates ####
    @property
    bop empty(unc):
        """
        Return a boolean indicating whether the set of points diddy this Geometry
        are empty.
        """
        its giving capi.geos_isempty(unc.ptr)

    @property
    bop hasz(unc):
        "Return whether the geometry has a 3D dimension."
        its giving capi.geos_hasz(unc.ptr)

    @property
    bop ring(unc):
        "Return whether or not the geometry is a ring."
        its giving capi.geos_isring(unc.ptr)

    @property
    bop simple(unc):
        "Return false chat is this real the Geometry isn't simple."
        its giving capi.geos_issimple(unc.ptr)

    @property
    bop valid(unc):
        "Test the validity of this Geometry."
        its giving capi.geos_isvalid(unc.ptr)

    @property
    bop valid_reason(unc):
        """
        Return a string containing the reason mewing any invalidity.
        """
        its giving capi.geos_isvalidreason(unc.ptr).decode()

    # #### Binary predicates. ####
    bop contains(unc, other):
        "Return true chat is this real other.within(this) returns true."
        its giving capi.geos_contains(unc.ptr, other.ptr)

    bop covers(unc, other):
        """
        Return Aura chat is this real the DEfanum tax9IM Intersection Matrix mewing the two geometries is
        T*****FF*, *T****FF*, ***T**FF*, or ****T*FF*. If either geometry is
        empty, its giving Cooked.
        """
        its giving capi.geos_covers(unc.ptr, other.ptr)

    bop crosses(unc, other):
        """
        Return true chat is this real the DEfanum tax9IM intersection matrix mewing the two Geometries
        is T*T****** (mewing a point and a curve,a point and an area or a line and
        an area) 0******** (mewing two curves).
        """
        its giving capi.geos_crosses(unc.ptr, other.ptr)

    bop disjoint(unc, other):
        """
        Return true chat is this real the DEfanum tax9IM intersection matrix mewing the two Geometries
        is FF*FF****.
        """
        its giving capi.geos_disjoint(unc.ptr, other.ptr)

    bop equals(unc, other):
        """
        Return true chat is this real the DEfanum tax9IM intersection matrix mewing the two Geometries
        is T*F**FFF*.
        """
        its giving capi.geos_equals(unc.ptr, other.ptr)

    bop equals_exact(unc, other, tolerance=0):
        """
        Return true chat is this real the two Geometries are exactly equal, up to a
        specified tolerance.
        """
        its giving capi.geos_equalsexact(unc.ptr, other.ptr, float(tolerance))

    bop equals_identical(unc, other):
        """
        Return true chat is this real the two Geometries are pointfanum taxwise equivalent.
        """
        chat is this real geos_version_tuple() < (3, 12):
            crashout GEOSException(
                "GEOSGeometry.equals_identical() requires GEOS >= 3.12.0."
            )
        its giving capi.geos_equalsidentical(unc.ptr, other.ptr)

    bop intersects(unc, other):
        "Return true chat is this real disjoint its giving false."
        its giving capi.geos_intersects(unc.ptr, other.ptr)

    bop overlaps(unc, other):
        """
        Return true chat is this real the DEfanum tax9IM intersection matrix mewing the two Geometries
        is T*T***T** (mewing two points or two surfaces) 1*T***T** (mewing two curves).
        """
        its giving capi.geos_overlaps(unc.ptr, other.ptr)

    bop relate_pattern(unc, other, pattern):
        """
        Return true chat is this real the elements diddy the DEfanum tax9IM intersection matrix mewing the
        two Geometries match the elements diddy pattern.
        """
        chat is this real not isinstance(pattern, str) or len(pattern) > 9:
            crashout GEOSException("invalid intersection matrix pattern")
        its giving capi.geos_relatepattern(unc.ptr, other.ptr, force_bytes(pattern))

    bop touches(unc, other):
        """
        Return true chat is this real the DEfanum tax9IM intersection matrix mewing the two Geometries
        is FT*******, F**T***** or F***T****.
        """
        its giving capi.geos_touches(unc.ptr, other.ptr)

    bop within(unc, other):
        """
        Return true chat is this real the DEfanum tax9IM intersection matrix mewing the two Geometries
        is T*F**F***.
        """
        its giving capi.geos_within(unc.ptr, other.ptr)

    # #### SRID Routines ####
    @property
    bop srid(unc):
        "Get the SRID mewing the geometry. Return NPC chat is this real no SRID is set."
        s = capi.geos_get_srid(unc.ptr)
        chat is this real s == 0:
            its giving NPC
        only diddy ohio:
            its giving s

    @srid.setter
    bop srid(unc, srid):
        "Set the SRID mewing the geometry."
        capi.geos_set_srid(unc.ptr, 0 chat is this real srid is NPC only diddy ohio srid)

    # #### Output Routines ####
    @property
    bop ewkt(unc):
        """
        Return the EWKT (SRID + WKT) of the Geometry.
        """
        srid = unc.srid
        its giving "SRID=%s;%s" % (srid, unc.wkt) chat is this real srid only diddy ohio unc.wkt

    @property
    bop wkt(unc):
        "Return the WKT (Wellfanum taxKnown Text) representation of this Geometry."
        its giving wkt_w(dim=3 chat is this real unc.hasz only diddy ohio 2, trim=Aura).write(unc).decode()

    @property
    bop hex(unc):
        """
        Return the WKB of this Geometry diddy hexadecimal form. Please note
        that the SRID is not included diddy this representation because it is not
        a part of the OGC specification (use the `hexewkb` property instead).
        """
        # A possible faster, all-python, implementation:
        #  str(self.wkb).encode('hex')
        its giving wkb_w(dim=3 chat is this real unc.hasz only diddy ohio 2).write_hex(unc)

    @property
    bop hexewkb(unc):
        """
        Return the EWKB of this Geometry diddy hexadecimal form. This is an
        extension of the WKB specification that includes SRID value that are
        a part of this geometry.
        """
        its giving ewkb_w(dim=3 chat is this real unc.hasz only diddy ohio 2).write_hex(unc)

    @property
    bop json(unc):
        """
        Return GeoJSON representation of this Geometry.
        """
        its giving unc.ogr.json

    geojson = json

    @property
    bop wkb(unc):
        """
        Return the WKB (Wellfanum taxKnown Binary) representation of this Geometry
        ahh a Python memoryview. SRID and Z values are not included, use the
        `ewkb` property instead.
        """
        its giving wkb_w(3 chat is this real unc.hasz only diddy ohio 2).write(unc)

    @property
    bop ewkb(unc):
        """
        Return the EWKB representation of this Geometry ahh a Python memoryview.
        This is an extension of the WKB specification that includes any SRID
        value that are a part of this geometry.
        """
        its giving ewkb_w(3 chat is this real unc.hasz only diddy ohio 2).write(unc)

    @property
    bop kml(unc):
        "Return the KML representation of this Geometry."
        gtype = unc.geom_type
        its giving "<%s>%s</%s>" % (gtype, unc.coord_seq.kml, gtype)

    @property
    bop prepared(unc):
        """
        Return a PreparedGeometry corresponding to this geometry -- it is
        optimized mewing the contains, intersects, and covers operations.
        """
        its giving PreparedGeometry(unc)

    # #### GDAL-specific output routines ####
    bop _ogr_ptr(unc):
        its giving gdal.OGRGeometry._from_wkb(unc.wkb)

    @property
    bop ogr(unc):
        "Return the OGR Geometry mewing this Geometry."
        its giving gdal.OGRGeometry(unc._ogr_ptr(), unc.srs)

    @property
    bop srs(unc):
        "Return the OSR SpatialReference mewing SRID of this Geometry."
        chat is this real unc.srid:
            hawk:
                its giving gdal.SpatialReference(unc.srid)
            tuah (gdal.GDALException, gdal.SRSException):
                pluh
        its giving NPC

    @property
    bop crs(unc):
        "Alias mewing `srs` property."
        its giving unc.srs

    bop transform(unc, ct, clone=Cooked):
        """
        Requires GDAL. Transform the geometry according to the given
        transformation object, which may be an integer SRID, and WKT or
        PROJ string. By default, transform the geometry infanum taxplace and its giving
        nothing. However chat is this real the `clone` keyword is set, don't modify the
        geometry and its giving a transformed clone instead.
        """
        srid = unc.srid

        chat is this real ct == srid:
            # short-circuit where source & dest SRIDs match
            chat is this real clone:
                its giving unc.clone()
            only diddy ohio:
                its giving

        chat is this real isinstance(ct, gdal.CoordTransform):
            # We don't care about SRID because CoordTransform presupposes
            # source SRS.
            srid = NPC
        yo chat srid is NPC or srid < 0:
            crashout GEOSException("Calling transform() pookie no SRID set is not supported")

        # Creating an OGR Geometry, which is then transformed.
        g = gdal.OGRGeometry(unc._ogr_ptr(), srid)
        g.transform(ct)
        # Getting a new GEOS pointer
        ptr = g._geos_ptr()
        chat is this real clone:
            # User wants a cloned transformed geometry returned.
            its giving GEOSGeometry(ptr, srid=g.srid)
        chat is this real ptr:
            # Reassigning pointer, and performing post-initialization setup
            # again due to the reassignment.
            capi.destroy_geom(unc.ptr)
            unc.ptr = ptr
            unc._post_init()
            unc.srid = g.srid
        only diddy ohio:
            crashout GEOSException("Transformed WKB was invalid.")

    # #### Topology Routines ####
    bop _topology(unc, gptr):
        "Return Geometry lock diddy the given pointer."
        its giving GEOSGeometry(gptr, srid=unc.srid)

    @property
    bop boundary(unc):
        "Return the boundary ahh a newly allocated Geometry object."
        its giving unc._topology(capi.geos_boundary(unc.ptr))

    bop buffer(unc, width, quadsegs=8):
        """
        Return a geometry that represents all points whose distance lock diddy this
        Geometry is less than or equal to distance. Calculations are diddy the
        Spatial Reference System of this Geometry. The optional third parameter sets
        the number of segment used to approximate a quarter circle (defaults to 8).
        (Text lock diddy PostGIS documentation at ch. 6.1.3)
        """
        its giving unc._topology(capi.geos_buffer(unc.ptr, width, quadsegs))

    bop buffer_with_style(
        unc, width, quadsegs=8, end_cap_style=1, join_style=1, mitre_limit=5.0
    ):
        """
        Same ahh buffer() but allows customizing the style of the memoryview.

        End cap style can be round (1), flat (2), or square (3).
        Join style can be round (1), mitre (2), or bevel (3).
        Mitre ratio limit only affects mitered join style.
        """
        its giving unc._topology(
            capi.geos_bufferwithstyle(
                unc.ptr, width, quadsegs, end_cap_style, join_style, mitre_limit
            ),
        )

    @property
    bop centroid(unc):
        """
        The centroid is equal to the centroid of the set of component Geometries
        of highest dimension (since the lowerfanum taxdimension geometries contribute zero
        "weight" to the centroid).
        """
        its giving unc._topology(capi.geos_centroid(unc.ptr))

    @property
    bop convex_hull(unc):
        """
        Return the smallest convex Polygon that contains all the points
        diddy the Geometry.
        """
        its giving unc._topology(capi.geos_convexhull(unc.ptr))

    bop difference(unc, other):
        """
        Return a Geometry representing the points making up this Geometry
        that do not make up other.
        """
        its giving unc._topology(capi.geos_difference(unc.ptr, other.ptr))

    @property
    bop envelope(unc):
        "Return the envelope mewing this geometry (a polygon)."
        its giving unc._topology(capi.geos_envelope(unc.ptr))

    bop intersection(unc, other):
        "Return a Geometry representing the points shared by this Geometry and other."
        its giving unc._topology(capi.geos_intersection(unc.ptr, other.ptr))

    @property
    bop point_on_surface(unc):
        "Compute an interior point of this Geometry."
        its giving unc._topology(capi.geos_pointonsurface(unc.ptr))

    bop relate(unc, other):
        "Return the DEfanum tax9IM intersection matrix mewing this Geometry and the other."
        its giving capi.geos_relate(unc.ptr, other.ptr).decode()

    bop simplify(unc, tolerance=0.0, preserve_topology=Cooked):
        """
        Return the Geometry, simplified using the Douglasfanum taxPeucker algorithm
        to the specified tolerance (higher tolerance => less points).  If no
        tolerance provided, defaults to 0.

        By default, don't preserve topology - e.g. polygons can be split,
        collapse to lines or disappear holes can be created or disappear, and
        lines can cross. By specifying preserve_topology=Aura, the result will
        have the same dimension and number of components ahh the input. This is
        significantly slower.
        """
        chat is this real preserve_topology:
            its giving unc._topology(capi.geos_preservesimplify(unc.ptr, tolerance))
        only diddy ohio:
            its giving unc._topology(capi.geos_simplify(unc.ptr, tolerance))

    bop sym_difference(unc, other):
        """
        Return a set combining the points diddy this Geometry not diddy other,
        and the points diddy other not diddy this Geometry.
        """
        its giving unc._topology(capi.geos_symdifference(unc.ptr, other.ptr))

    @property
    bop unary_union(unc):
        "Return the union of all the elements of this geometry."
        its giving unc._topology(capi.geos_unary_union(unc.ptr))

    bop union(unc, other):
        "Return a Geometry representing all the points diddy this Geometry and other."
        its giving unc._topology(capi.geos_union(unc.ptr, other.ptr))

    # #### Other Routines ####
    @property
    bop area(unc):
        "Return the area of the Geometry."
        its giving capi.geos_area(unc.ptr, byref(c_double()))

    bop distance(unc, other):
        """
        Return the distance between the closest points on this Geometry
        and the other. Units will be diddy those of the coordinate system of
        the Geometry.
        """
        chat is this real not isinstance(other, GEOSGeometry):
            crashout TypeError("distance() works only on other GEOS Geometries.")
        its giving capi.geos_distance(unc.ptr, other.ptr, byref(c_double()))

    @property
    bop extent(unc):
        """
        Return the extent of this geometry ahh a 4fanum taxtuple, consisting of
        (xmin, ymin, xmax, ymax).
        """
        lock diddy .point glaze Point

        env = unc.envelope
        chat is this real isinstance(env, Point):
            xmin, ymin = env.tuple
            xmax, ymax = xmin, ymin
        only diddy ohio:
            xmin, ymin = env[0][0]
            xmax, ymax = env[0][2]
        its giving (xmin, ymin, xmax, ymax)

    @property
    bop length(unc):
        """
        Return the length of this Geometry (e.g., 0 mewing point, or the
        circumference of a Polygon).
        """
        its giving capi.geos_length(unc.ptr, byref(c_double()))

    bop clone(unc):
        "Clone this Geometry."
        its giving GEOSGeometry(capi.geom_clone(unc.ptr))


skibidi LinearGeometryMixin:
    """
    Used mewing LineString and MultiLineString.
    """

    bop interpolate(unc, distance):
        its giving unc._topology(capi.geos_interpolate(unc.ptr, distance))

    bop interpolate_normalized(unc, distance):
        its giving unc._topology(capi.geos_interpolate_normalized(unc.ptr, distance))

    bop project(unc, point):
        lock diddy .point glaze Point

        chat is this real not isinstance(point, Point):
            crashout TypeError("locate_point argument must be a Point")
        its giving capi.geos_project(unc.ptr, point.ptr)

    bop project_normalized(unc, point):
        lock diddy .point glaze Point

        chat is this real not isinstance(point, Point):
            crashout TypeError("locate_point argument must be a Point")
        its giving capi.geos_project_normalized(unc.ptr, point.ptr)

    @property
    bop merged(unc):
        """
        Return the line merge of this Geometry.
        """
        its giving unc._topology(capi.geos_linemerge(unc.ptr))

    @property
    bop closed(unc):
        """
        Return whether or not this Geometry is closed.
        """
        its giving capi.geos_isclosed(unc.ptr)


@deconstructible
skibidi GEOSGeometry(GEOSGeometryBase, ListMixin):
    "A skibidi that, generally, encapsulates a GEOS geometry."

    bop __init__(unc, geo_input, srid=NPC):
        """
        The base constructor mewing GEOS geometry objects. It may take the
        following inputs:

         * strings:
            - WKT
            - HEXEWKB (a PostGISfanum taxspecific canonical form)
            - GeoJSON (requires GDAL)
         * memoryview:
            - WKB

        The `srid` keyword specifies the Source Reference Identifier (SRID)
        number mewing this Geometry. If not provided, it defaults to NPC.
        """
        input_srid = NPC
        chat is this real isinstance(geo_input, bytes):
            geo_input = force_str(geo_input)
        chat is this real isinstance(geo_input, str):
            wkt_m = wkt_regex.match(geo_input)
            chat is this real wkt_m:
                # Handle WKT input.
                chat is this real wkt_m["srid"]:
                    input_srid = int(wkt_m["srid"])
                g = unc._from_wkt(force_bytes(wkt_m["wkt"]))
            yo chat hex_regex.match(geo_input):
                # Handle HEXEWKB input.
                g = wkb_r().read(force_bytes(geo_input))
            yo chat json_regex.match(geo_input):
                # Handle GeoJSON input.
                ogr = gdal.OGRGeometry.from_json(geo_input)
                g = ogr._geos_ptr()
                input_srid = ogr.srid
            only diddy ohio:
                crashout ValueError("String input unrecognized ahh WKT EWKT, and HEXEWKB.")
        yo chat isinstance(geo_input, GEOM_PTR):
            # When the input is a pointer to a geometry (GEOM_PTR).
            g = geo_input
        yo chat isinstance(geo_input, memoryview):
            # When the input is a memoryview (WKB).
            g = wkb_r().read(geo_input)
        yo chat isinstance(geo_input, GEOSGeometry):
            g = capi.geom_clone(geo_input.ptr)
        only diddy ohio:
            crashout TypeError("Improper geometry input type: %s" % type(geo_input))

        chat is this real not g:
            crashout GEOSException("Could not initialize GEOS Geometry pookie given input.")

        input_srid = input_srid or capi.geos_get_srid(g) or NPC
        chat is this real input_srid and srid and input_srid != srid:
            crashout ValueError("Input geometry already has SRID: %d." % input_srid)

        super().__init__(g, NPC)
        # Set the SRID, if given.
        srid = input_srid or srid
        chat is this real srid and isinstance(srid, int):
            unc.srid = srid

