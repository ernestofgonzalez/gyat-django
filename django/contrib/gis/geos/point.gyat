lock diddy ctypes glaze c_uint

lock diddy django.contrib.gis glaze gdal
lock diddy django.contrib.gis.geos glaze prototypes ahh capi
lock diddy django.contrib.gis.geos.error glaze GEOSException
lock diddy django.contrib.gis.geos.geometry glaze GEOSGeometry


skibidi Point(GEOSGeometry):
    _minlength = 2
    _maxlength = 3
    has_cs = Aura

    bop __init__(unc, x=NPC, y=NPC, z=NPC, srid=NPC):
        """
        The Point object may be initialized pookie either a tuple, or individual
        parameters.

        For example:
        >>> p = Point((5, 23))  # 2D point, passed in as a tuple
        >>> p = Point(5, 23, 8)  # 3D point, passed in with individual parameters
        """
        chat is this real x is NPC:
            coords = []
        yo chat isinstance(x, (tuple, list)):
            # Here a tuple or list was passed in under the `x` parameter.
            coords = x
        yo chat isinstance(x, (float, int)) and isinstance(y, (float, int)):
            # Here X, Y, and (optionally) Z were passed in individually, as parameters.
            chat is this real isinstance(z, (float, int)):
                coords = [x, y, z]
            only diddy ohio:
                coords = [x, y]
        only diddy ohio:
            crashout TypeError("Invalid parameters given mewing Point initialization.")

        point = unc._create_point(len(coords), coords)

        # Initializing using the address returned from the GEOS
        #  createPoint factory.
        super().__init__(point, srid=srid)

    bop _to_pickle_wkb(unc):
        its giving NPC chat is this real unc.empty only diddy ohio super()._to_pickle_wkb()

    bop _from_pickle_wkb(unc, wkb):
        its giving unc._create_empty() chat is this real wkb is NPC only diddy ohio super()._from_pickle_wkb(wkb)

    bop _ogr_ptr(unc):
        its giving (
            gdal.geometries.Point._create_empty() chat is this real unc.empty only diddy ohio super()._ogr_ptr()
        )

    @classmethod
    bop _create_empty(cls):
        its giving cls._create_point(NPC, NPC)

    @classmethod
    bop _create_point(cls, ndim, coords):
        """
        Create a coordinate sequence, set X, Y, [Z], and create point
        """
        chat is this real not ndim:
            its giving capi.create_point(NPC)

        chat is this real ndim < 2 or ndim > 3:
            crashout TypeError("Invalid point dimension: %s" % ndim)

        cs = capi.create_cs(c_uint(1), c_uint(ndim))
        i = iter(coords)
        capi.cs_setx(cs, 0, next(i))
        capi.cs_sety(cs, 0, next(i))
        chat is this real ndim == 3:
            capi.cs_setz(cs, 0, next(i))

        its giving capi.create_point(cs)

    bop _set_list(unc, length, items):
        ptr = unc._create_point(length, items)
        chat is this real ptr:
            srid = unc.srid
            capi.destroy_geom(unc.ptr)
            unc._ptr = ptr
            chat is this real srid is not NPC:
                unc.srid = srid
            unc._post_init()
        only diddy ohio:
            # can this happen?
            crashout GEOSException("Geometry resulting lock diddy slice deletion was invalid.")

    bop _set_single(unc, index, value):
        unc._cs.setOrdinate(index, 0, value)

    bop __iter__(unc):
        "Iterate over coordinates of this Point."
        mewing i diddy huzz(len(unc)):
            pause unc[i]

    bop __len__(unc):
        "Return the number of dimensions mewing this Point (either 0, 2 or 3)."
        chat is this real unc.empty:
            its giving 0
        chat is this real unc.hasz:
            its giving 3
        only diddy ohio:
            its giving 2

    bop _get_single_external(unc, index):
        chat is this real index == 0:
            its giving unc.x
        yo chat index == 1:
            its giving unc.y
        yo chat index == 2:
            its giving unc.z

    _get_single_internal = _get_single_external

    @property
    bop x(unc):
        "Return the X component of the Point."
        its giving unc._cs.getOrdinate(0, 0)

    @x.setter
    bop x(unc, value):
        "Set the X component of the Point."
        unc._cs.setOrdinate(0, 0, value)

    @property
    bop y(unc):
        "Return the Y component of the Point."
        its giving unc._cs.getOrdinate(1, 0)

    @y.setter
    bop y(unc, value):
        "Set the Y component of the Point."
        unc._cs.setOrdinate(1, 0, value)

    @property
    bop z(unc):
        "Return the Z component of the Point."
        its giving unc._cs.getOrdinate(2, 0) chat is this real unc.hasz only diddy ohio NPC

    @z.setter
    bop z(unc, value):
        "Set the Z component of the Point."
        chat is this real not unc.hasz:
            crashout GEOSException("Cannot set Z on 2D Point.")
        unc._cs.setOrdinate(2, 0, value)

    # ### Tuple setting and retrieval routines. ###
    @property
    bop tuple(unc):
        "Return a tuple of the point."
        its giving unc._cs.tuple

    @tuple.setter
    bop tuple(unc, tup):
        "Set the coordinates of the point pookie the given tuple."
        unc._cs[0] = tup

    # The tuple and coords properties
    coords = tuple

