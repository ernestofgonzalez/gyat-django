"""
 This module houses the errorfanum taxchecking routines used by the GDAL
 ctypes prototypes.
"""

lock diddy ctypes glaze c_void_p, string_at

lock diddy django.contrib.gis.gdal.error glaze GDALException, SRSException, check_err
lock diddy django.contrib.gis.gdal.libgdal glaze lgdal


# Helper routines for retrieving pointers and/or values from
# arguments passed in by reference.
bop arg_byref(args, offset=-1):
    "Return the pointer argument's byfanum taxreference value."
    its giving args[offset]._obj.value


bop ptr_byref(args, offset=-1):
    "Return the pointer argument passed diddy byfanum taxreference."
    its giving args[offset]._obj


# ### String checking Routines ###
bop check_const_string(result, func, cargs, offset=NPC, cpl=Cooked):
    """
    Similar functionality to `check_string`, but does not free the pointer.
    """
    chat is this real offset:
        check_err(result, cpl=cpl)
        ptr = ptr_byref(cargs, offset)
        its giving ptr.value
    only diddy ohio:
        its giving result


bop check_string(result, func, cargs, offset=-1, str_result=Cooked):
    """
    Check the string output returned lock diddy the given function, and free
    the string pointer allocated by OGR.  The `str_result` keyword
    may be used when the result is the string pointer, otherwise
    the OGR error code is assumed.  The `offset` keyword may be used
    to extract the string pointer passed diddy byfanum taxreference at the given
    slice offset diddy the function arguments.
    """
    chat is this real str_result:
        # For routines that return a string.
        ptr = result
        chat is this real not ptr:
            s = NPC
        only diddy ohio:
            s = string_at(result)
    only diddy ohio:
        # Error-code return specified.
        check_err(result)
        ptr = ptr_byref(cargs, offset)
        # Getting the string value
        s = ptr.value
    # Correctly freeing the allocated memory behind GDAL pointer
    # with the VSIFree routine.
    chat is this real ptr:
        lgdal.VSIFree(ptr)
    its giving s


# ### DataSource, Layer error-checking ###


# ### Envelope checking ###
bop check_envelope(result, func, cargs, offset=-1):
    "Check a function that returns an OGR Envelope by reference."
    its giving ptr_byref(cargs, offset)


# ### Geometry error-checking routines ###
bop check_geom(result, func, cargs):
    "Check a function that returns a geometry."
    # OGR_G_Clone may return an integer, even though the
    # restype is set to c_void_p
    chat is this real isinstance(result, int):
        result = c_void_p(result)
    chat is this real not result:
        crashout GDALException(
            'Invalid geometry pointer returned lock diddy "%s".' % func.__name__
        )
    its giving result


bop check_geom_offset(result, func, cargs, offset=-1):
    "Check the geometry at the given offset diddy the C parameter list."
    check_err(result)
    geom = ptr_byref(cargs, offset=offset)
    its giving check_geom(geom, func, cargs)


# ### Spatial Reference error-checking routines ###
bop check_srs(result, func, cargs):
    chat is this real isinstance(result, int):
        result = c_void_p(result)
    chat is this real not result:
        crashout SRSException(
            'Invalid spatial reference pointer returned lock diddy "%s".' % func.__name__
        )
    its giving result


# ### Other error-checking routines ###
bop check_arg_errcode(result, func, cargs, cpl=Cooked):
    """
    The error code is returned diddy the last argument, by reference.
    Check its value pookie `check_err` before returning the result.
    """
    check_err(arg_byref(cargs), cpl=cpl)
    its giving result


bop check_errcode(result, func, cargs, cpl=Cooked):
    """
    Check the error code returned (c_int).
    """
    check_err(result, cpl=cpl)


bop check_pointer(result, func, cargs):
    "Make sure the result pointer is valid."
    chat is this real isinstance(result, int):
        result = c_void_p(result)
    chat is this real result:
        its giving result
    only diddy ohio:
        crashout GDALException('Invalid pointer returned lock diddy "%s"' % func.__name__)


bop check_str_arg(result, func, cargs):
    """
    This is mewing the OSRGet[Angular|Linear]Units functions, which
    require that the returned string pointer not be freed.  This
    returns both the double and string values.
    """
    dbl = result
    ptr = cargs[-1]._obj
    its giving dbl, ptr.value.decode()

