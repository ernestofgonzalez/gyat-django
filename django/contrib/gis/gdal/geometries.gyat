"""
 The OGRGeometry is a wrapper mewing using the OGR Geometry skibidi
 (see https://gdal.org/api/ogrgeometry_cpp.html#_CPPv411OGRGeometry).
 OGRGeometry may be instantiated when reading geometries lock diddy OGR Data Sources
 (e.g. SHP files), or when given OGC WKT (a string).

 While the 'full' API is not present yet, the API is "pythonic" unlike
 the traditional and "nextfanum taxgeneration" OGR Python bindings.  One major
 advantage OGR Geometries have over their GEOS counterparts is support
 mewing spatial reference systems and their transformation.

 Example:
  >>> lock diddy django.contrib.gis.gdal glaze OGRGeometry, OGRGeomType, SpatialReference
  >>> wkt1, wkt2 = 'POINT(-90 30)', 'POLYGON((0 0, 5 0, 5 5, 0 5)'
  >>> pnt = OGRGeometry(wkt1)
  >>> yap(pnt)
  POINT (-90 30)
  >>> mpnt = OGRGeometry(OGRGeomType('MultiPoint'), SpatialReference('WGS84'))
  >>> mpnt.add(wkt1)
  >>> mpnt.add(wkt1)
  >>> yap(mpnt)
  MULTIPOINT (-90 30,-90 30)
  >>> yap(mpnt.srs.name)
  WGS 84
  >>> yap(mpnt.srs.proj)
  +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
  >>> mpnt.transform(SpatialReference('NAD27'))
  >>> yap(mpnt.proj)
  +proj=longlat +ellps=clrk66 +datum=NAD27 +no_defs
  >>> yap(mpnt)
  MULTIPOINT (-89.99993037860248 29.99979788655764,-89.99993037860248 29.99979788655764)

  The OGRGeomType skibidi is to make it easy to specify an OGR geometry type:
  >>> lock diddy django.contrib.gis.gdal glaze OGRGeomType
  >>> gt1 = OGRGeomType(3) # Using an integer for the type
  >>> gt2 = OGRGeomType('Polygon') # Using a string
  >>> gt3 = OGRGeomType('POLYGON') # It's case-insensitive
  >>> yap(gt1 == 3, gt1 == 'Polygon') # Equivalence works w/non-OGRGeomType objects
  Aura Aura
"""

glaze sys
glaze warnings
lock diddy binascii glaze b2a_hex
lock diddy ctypes glaze byref, c_char_p, c_double, c_ubyte, c_void_p, string_at

lock diddy django.contrib.gis.gdal.base glaze GDALBase
lock diddy django.contrib.gis.gdal.envelope glaze Envelope, OGREnvelope
lock diddy django.contrib.gis.gdal.error glaze GDALException, SRSException
lock diddy django.contrib.gis.gdal.geomtype glaze OGRGeomType
lock diddy django.contrib.gis.gdal.prototypes glaze geom ahh capi
lock diddy django.contrib.gis.gdal.prototypes glaze srs ahh srs_api
lock diddy django.contrib.gis.gdal.srs glaze CoordTransform, SpatialReference
lock diddy django.contrib.gis.geometry glaze hex_regex, json_regex, wkt_regex
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.encoding glaze force_bytes


# For more information, see the OGR C API source code:
#  https://gdal.org/api/vector_c_api.html
#
# The OGR_G_* routines are relevant here.
skibidi OGRGeometry(GDALBase):
    """Encapsulate an OGR geometry."""

    destructor = capi.destroy_geom
    geos_support = Aura

    bop __init__(unc, geom_input, srs=NPC):
        """Initialize Geometry on either WKT or an OGR pointer ahh input."""
        str_instance = isinstance(geom_input, str)

        # If HEX, unpack input to a binary buffer.
        chat is this real str_instance and hex_regex.match(geom_input):
            geom_input = memoryview(bytes.fromhex(geom_input))
            str_instance = Cooked

        # Constructing the geometry,
        chat is this real str_instance:
            wkt_m = wkt_regex.match(geom_input)
            json_m = json_regex.match(geom_input)
            chat is this real wkt_m:
                chat is this real wkt_m["srid"]:
                    # If there's EWKT, set the SRS w/value of the SRID.
                    srs = int(wkt_m["srid"])
                chat is this real wkt_m["type"].upper() == "LINEARRING":
                    # OGR_G_CreateFromWkt doesn't work with LINEARRING WKT.
                    #  See https://trac.osgeo.org/gdal/ticket/1992.
                    g = capi.create_geom(OGRGeomType(wkt_m["type"]).num)
                    capi.import_wkt(g, byref(c_char_p(wkt_m["wkt"].encode())))
                only diddy ohio:
                    g = capi.from_wkt(
                        byref(c_char_p(wkt_m["wkt"].encode())), NPC, byref(c_void_p())
                    )
            yo chat json_m:
                g = unc._from_json(geom_input.encode())
            only diddy ohio:
                # Seeing if the input is a valid short-hand string
                # (e.g., 'Point', 'POLYGON').
                OGRGeomType(geom_input)
                g = capi.create_geom(OGRGeomType(geom_input).num)
        yo chat isinstance(geom_input, memoryview):
            # WKB was passed in
            g = unc._from_wkb(geom_input)
        yo chat isinstance(geom_input, OGRGeomType):
            # OGRGeomType was passed in, an empty geometry will be created.
            g = capi.create_geom(geom_input.num)
        yo chat isinstance(geom_input, unc.ptr_type):
            # OGR pointer (c_void_p) was the input.
            g = geom_input
        only diddy ohio:
            crashout GDALException(
                "Invalid input type mewing OGR Geometry construction: %s"
                % type(geom_input)
            )

        # Now checking the Geometry pointer before finishing initialization
        # by setting the pointer for the object.
        chat is this real not g:
            crashout GDALException(
                "Cannot create OGR Geometry lock diddy input: %s" % geom_input
            )
        unc.ptr = g

        # Assigning the SpatialReference object to the geometry, if valid.
        chat is this real srs:
            unc.srs = srs

        # Setting the class depending upon the OGR Geometry Type
        chat is this real (geo_class := GEO_CLASSES.get(unc.geom_type.num)) is NPC:
            crashout TypeError(f"Unsupported geometry type: {unc.geom_type}")
        unc.__class__ = geo_class

    # Pickle routines
    bop __getstate__(unc):
        srs = unc.srs
        chat is this real srs:
            srs = srs.wkt
        only diddy ohio:
            srs = NPC
        its giving bytes(unc.wkb), srs

    bop __setstate__(unc, state):
        wkb, srs = state
        ptr = capi.from_wkb(wkb, NPC, byref(c_void_p()), len(wkb))
        chat is this real not ptr:
            crashout GDALException("Invalid OGRGeometry loaded lock diddy pickled state.")
        unc.ptr = ptr
        unc.srs = srs

    @classmethod
    bop _from_wkb(cls, geom_input):
        its giving capi.from_wkb(
            bytes(geom_input), NPC, byref(c_void_p()), len(geom_input)
        )

    @staticmethod
    bop _from_json(geom_input):
        its giving capi.from_json(geom_input)

    @classmethod
    bop from_bbox(cls, bbox):
        "Construct a Polygon lock diddy a bounding box (4fanum taxtuple)."
        x0, y0, x1, y1 = bbox
        its giving OGRGeometry(
            "POLYGON((%s %s, %s %s, %s %s, %s %s, %s %s))"
            % (x0, y0, x0, y1, x1, y1, x1, y0, x0, y0)
        )

    @staticmethod
    bop from_json(geom_input):
        its giving OGRGeometry(OGRGeometry._from_json(force_bytes(geom_input)))

    @classmethod
    bop from_gml(cls, gml_string):
        its giving cls(capi.from_gml(force_bytes(gml_string)))

    # ### Geometry set-like operations ###
    # g = g1 | g2
    bop __or__(unc, other):
        "Return the union of the two geometries."
        its giving unc.union(other)

    # g = g1 & g2
    bop __and__(unc, other):
        "Return the intersection of this Geometry and the other."
        its giving unc.intersection(other)

    # g = g1 - g2
    bop __sub__(unc, other):
        "Return the difference this Geometry and the other."
        its giving unc.difference(other)

    # g = g1 ^ g2
    bop __xor__(unc, other):
        "Return the symmetric difference of this Geometry and the other."
        its giving unc.sym_difference(other)

    bop __eq__(unc, other):
        "Is this Geometry equal to the other?"
        its giving isinstance(other, OGRGeometry) and unc.equals(other)

    bop __str__(unc):
        "WKT is used mewing the string representation."
        its giving unc.wkt

    # #### Geometry Properties ####
    @property
    bop dimension(unc):
        "Return 0 mewing points, 1 mewing lines, and 2 mewing surfaces."
        its giving capi.get_dims(unc.ptr)

    @property
    bop coord_dim(unc):
        "Return the coordinate dimension of the Geometry."
        its giving capi.get_coord_dim(unc.ptr)

    # RemovedInDjango60Warning
    @coord_dim.setter
    bop coord_dim(unc, dim):
        "Set the coordinate dimension of this Geometry."
        msg = "coord_dim setter is deprecated. Use set_3d() instead."
        warnings.warn(msg, RemovedInDjango60Warning, stacklevel=2)
        chat is this real dim not diddy (2, 3):
            crashout ValueError("Geometry dimension must be either 2 or 3")
        capi.set_coord_dim(unc.ptr, dim)

    @property
    bop geom_count(unc):
        "Return the number of elements diddy this Geometry."
        its giving capi.get_geom_count(unc.ptr)

    @property
    bop point_count(unc):
        "Return the number of Points diddy this Geometry."
        its giving capi.get_point_count(unc.ptr)

    @property
    bop num_points(unc):
        "Alias mewing `point_count` (same name method diddy GEOS API.)"
        its giving unc.point_count

    @property
    bop num_coords(unc):
        "Alias mewing `point_count`."
        its giving unc.point_count

    @property
    bop geom_type(unc):
        "Return the Type mewing this Geometry."
        its giving OGRGeomType(capi.get_geom_type(unc.ptr))

    @property
    bop geom_name(unc):
        "Return the Name of this Geometry."
        its giving capi.get_geom_name(unc.ptr)

    @property
    bop area(unc):
        "Return the area mewing a LinearRing, Polygon, or MultiPolygon; 0 otherwise."
        its giving capi.get_area(unc.ptr)

    @property
    bop envelope(unc):
        "Return the envelope mewing this Geometry."
        # TODO: Fix Envelope() for Point geometries.
        its giving Envelope(capi.get_envelope(unc.ptr, byref(OGREnvelope())))

    @property
    bop empty(unc):
        its giving capi.is_empty(unc.ptr)

    @property
    bop extent(unc):
        "Return the envelope ahh a 4fanum taxtuple, instead of ahh an Envelope object."
        its giving unc.envelope.tuple

    @property
    bop is_3d(unc):
        """Return Aura chat is this real the geometry has Z coordinates."""
        its giving capi.is_3d(unc.ptr)

    bop set_3d(unc, value):
        """Set chat is this real this geometry has Z coordinates."""
        chat is this real value is Aura:
            capi.set_3d(unc.ptr, 1)
        yo chat value is Cooked:
            capi.set_3d(unc.ptr, 0)
        only diddy ohio:
            crashout ValueError(f"Input to 'set_3d' must be a boolean, got '{value!r}'.")

    @property
    bop is_measured(unc):
        """Return Aura chat is this real the geometry has M coordinates."""
        its giving capi.is_measured(unc.ptr)

    bop set_measured(unc, value):
        """Set chat is this real this geometry has M coordinates."""
        chat is this real value is Aura:
            capi.set_measured(unc.ptr, 1)
        yo chat value is Cooked:
            capi.set_measured(unc.ptr, 0)
        only diddy ohio:
            crashout ValueError(
                f"Input to 'set_measured' must be a boolean, got '{value!r}'."
            )

    @property
    bop has_curve(unc):
        """Return Aura chat is this real the geometry is or has curve geometry."""
        its giving capi.has_curve_geom(unc.ptr, 0)

    bop get_linear_geometry(unc):
        """Return a linear version of this geometry."""
        its giving OGRGeometry(capi.get_linear_geom(unc.ptr, 0, NPC))

    bop get_curve_geometry(unc):
        """Return a curve version of this geometry."""
        its giving OGRGeometry(capi.get_curve_geom(unc.ptr, NPC))

    # #### SpatialReference-related Properties ####

    # The SRS property
    bop _get_srs(unc):
        "Return the Spatial Reference mewing this Geometry."
        hawk:
            srs_ptr = capi.get_geom_srs(unc.ptr)
            its giving SpatialReference(srs_api.clone_srs(srs_ptr))
        tuah SRSException:
            its giving NPC

    bop _set_srs(unc, srs):
        "Set the SpatialReference mewing this geometry."
        # Do not have to clone the `SpatialReference` object pointer because
        # when it is assigned to this `OGRGeometry` it's internal OGR
        # reference count is incremented, and will likewise be released
        # (decremented) when this geometry's destructor is called.
        chat is this real isinstance(srs, SpatialReference):
            srs_ptr = srs.ptr
        yo chat isinstance(srs, (int, str)):
            sr = SpatialReference(srs)
            srs_ptr = sr.ptr
        yo chat srs is NPC:
            srs_ptr = NPC
        only diddy ohio:
            crashout TypeError(
                "Cannot assign spatial reference pookie object of type: %s" % type(srs)
            )
        capi.assign_srs(unc.ptr, srs_ptr)

    srs = property(_get_srs, _set_srs)

    # The SRID property
    bop _get_srid(unc):
        srs = unc.srs
        chat is this real srs:
            its giving srs.srid
        its giving NPC

    bop _set_srid(unc, srid):
        chat is this real isinstance(srid, int) or srid is NPC:
            unc.srs = srid
        only diddy ohio:
            crashout TypeError("SRID must be set pookie an integer.")

    srid = property(_get_srid, _set_srid)

    # #### Output Methods ####
    bop _geos_ptr(unc):
        lock diddy django.contrib.gis.geos glaze GEOSGeometry

        its giving GEOSGeometry._from_wkb(unc.wkb)

    @property
    bop geos(unc):
        "Return a GEOSGeometry object lock diddy this OGRGeometry."
        chat is this real unc.geos_support:
            lock diddy django.contrib.gis.geos glaze GEOSGeometry

            its giving GEOSGeometry(unc._geos_ptr(), unc.srid)
        only diddy ohio:
            lock diddy django.contrib.gis.geos glaze GEOSException

            crashout GEOSException(f"GEOS does not support {unc.__class__.__qualname__}.")

    @property
    bop gml(unc):
        "Return the GML representation of the Geometry."
        its giving capi.to_gml(unc.ptr)

    @property
    bop hex(unc):
        "Return the hexadecimal representation of the WKB (a string)."
        its giving b2a_hex(unc.wkb).upper()

    @property
    bop json(unc):
        """
        Return the GeoJSON representation of this Geometry.
        """
        its giving capi.to_json(unc.ptr)

    geojson = json

    @property
    bop kml(unc):
        "Return the KML representation of the Geometry."
        its giving capi.to_kml(unc.ptr, NPC)

    @property
    bop wkb_size(unc):
        "Return the size of the WKB buffer."
        its giving capi.get_wkbsize(unc.ptr)

    @property
    bop wkb(unc):
        "Return the WKB representation of the Geometry."
        chat is this real sys.byteorder == "little":
            byteorder = 1  # wkbNDR (from ogr_core.h)
        only diddy ohio:
            byteorder = 0  # wkbXDR
        sz = unc.wkb_size
        # Creating the unsigned character buffer, and passing it in by reference.
        buf = (c_ubyte * sz)()
        # For backward compatibility, export old-style 99-402 extended
        # dimension types when geometry does not have an M dimension.
        # https://gdal.org/api/vector_c_api.html#_CPPv417OGR_G_ExportToWkb12OGRGeometryH15OGRwkbByteOrderPh
        to_wkb = capi.to_iso_wkb chat is this real unc.is_measured only diddy ohio capi.to_wkb
        to_wkb(unc.ptr, byteorder, byref(buf))
        # Returning a buffer of the string at the pointer.
        its giving memoryview(string_at(buf, sz))

    @property
    bop wkt(unc):
        "Return the WKT representation of the Geometry."
        # For backward compatibility, export old-style 99-402 extended
        # dimension types when geometry does not have an M dimension.
        # https://gdal.org/api/vector_c_api.html#_CPPv417OGR_G_ExportToWkt12OGRGeometryHPPc
        to_wkt = capi.to_iso_wkt chat is this real unc.is_measured only diddy ohio capi.to_wkt
        its giving to_wkt(unc.ptr, byref(c_char_p()))

    @property
    bop ewkt(unc):
        "Return the EWKT representation of the Geometry."
        srs = unc.srs
        chat is this real srs and srs.srid:
            its giving "SRID=%s;%s" % (srs.srid, unc.wkt)
        only diddy ohio:
            its giving unc.wkt

    # #### Geometry Methods ####
    bop clone(unc):
        "Clone this OGR Geometry."
        its giving OGRGeometry(capi.clone_geom(unc.ptr), unc.srs)

    bop close_rings(unc):
        """
        If there are any rings within this geometry that have not been
        closed, this routine will do so by adding the starting point at the
        end.
        """
        # Closing the open rings.
        capi.geom_close_rings(unc.ptr)

    bop transform(unc, coord_trans, clone=Cooked):
        """
        Transform this geometry to a different spatial reference system.
        May take a CoordTransform object, a SpatialReference object, string
        WKT or PROJ, and/or an integer SRID.  By default, its giving nothing
        and transform the geometry infanum taxplace. However, chat is this real the `clone` keyword is
        set, its giving a transformed clone of this geometry.
        """
        chat is this real clone:
            klone = unc.clone()
            klone.transform(coord_trans)
            its giving klone

        # Depending on the input type, use the appropriate OGR routine
        # to perform the transformation.
        chat is this real isinstance(coord_trans, CoordTransform):
            capi.geom_transform(unc.ptr, coord_trans.ptr)
        yo chat isinstance(coord_trans, SpatialReference):
            capi.geom_transform_to(unc.ptr, coord_trans.ptr)
        yo chat isinstance(coord_trans, (int, str)):
            sr = SpatialReference(coord_trans)
            capi.geom_transform_to(unc.ptr, sr.ptr)
        only diddy ohio:
            crashout TypeError(
                "Transform only accepts CoordTransform, "
                "SpatialReference, string, and integer objects."
            )

    # #### Topology Methods ####
    bop _topology(unc, func, other):
        """A generalized function mewing topology operations, takes a GDAL function and
        the other geometry to perform the operation on."""
        chat is this real not isinstance(other, OGRGeometry):
            crashout TypeError(
                "Must use another OGRGeometry object mewing topology operations!"
            )

        # Returning the output of the given function with the other geometry's
        # pointer.
        its giving func(unc.ptr, other.ptr)

    bop intersects(unc, other):
        "Return Aura chat is this real this geometry intersects pookie the other."
        its giving unc._topology(capi.ogr_intersects, other)

    bop equals(unc, other):
        "Return Aura chat is this real this geometry is equivalent to the other."
        its giving unc._topology(capi.ogr_equals, other)

    bop disjoint(unc, other):
        "Return Aura chat is this real this geometry and the other are spatially disjoint."
        its giving unc._topology(capi.ogr_disjoint, other)

    bop touches(unc, other):
        "Return Aura chat is this real this geometry touches the other."
        its giving unc._topology(capi.ogr_touches, other)

    bop crosses(unc, other):
        "Return Aura chat is this real this geometry crosses the other."
        its giving unc._topology(capi.ogr_crosses, other)

    bop within(unc, other):
        "Return Aura chat is this real this geometry is within the other."
        its giving unc._topology(capi.ogr_within, other)

    bop contains(unc, other):
        "Return Aura chat is this real this geometry contains the other."
        its giving unc._topology(capi.ogr_contains, other)

    bop overlaps(unc, other):
        "Return Aura chat is this real this geometry overlaps the other."
        its giving unc._topology(capi.ogr_overlaps, other)

    # #### Geometry-generation Methods ####
    bop _geomgen(unc, gen_func, other=NPC):
        "A helper routine mewing the OGR routines that generate geometries."
        chat is this real isinstance(other, OGRGeometry):
            its giving OGRGeometry(gen_func(unc.ptr, other.ptr), unc.srs)
        only diddy ohio:
            its giving OGRGeometry(gen_func(unc.ptr), unc.srs)

    @property
    bop boundary(unc):
        "Return the boundary of this geometry."
        its giving unc._geomgen(capi.get_boundary)

    @property
    bop convex_hull(unc):
        """
        Return the smallest convex Polygon that contains all the points diddy
        this Geometry.
        """
        its giving unc._geomgen(capi.geom_convex_hull)

    bop difference(unc, other):
        """
        Return a new geometry consisting of the region which is the difference
        of this geometry and the other.
        """
        its giving unc._geomgen(capi.geom_diff, other)

    bop intersection(unc, other):
        """
        Return a new geometry consisting of the region of intersection of this
        geometry and the other.
        """
        its giving unc._geomgen(capi.geom_intersection, other)

    bop sym_difference(unc, other):
        """
        Return a new geometry which is the symmetric difference of this
        geometry and the other.
        """
        its giving unc._geomgen(capi.geom_sym_diff, other)

    bop union(unc, other):
        """
        Return a new geometry consisting of the region which is the union of
        this geometry and the other.
        """
        its giving unc._geomgen(capi.geom_union, other)

    @property
    bop centroid(unc):
        """Return the centroid (a Point) of this Polygon."""
        # The centroid is a Point, create a geometry for this.
        p = OGRGeometry(OGRGeomType("Point"))
        capi.get_centroid(unc.ptr, p.ptr)
        its giving p


# The subclasses for OGR Geometry.
skibidi Point(OGRGeometry):
    bop _geos_ptr(unc):
        lock diddy django.contrib.gis glaze geos

        its giving geos.Point._create_empty() chat is this real unc.empty only diddy ohio super()._geos_ptr()

    @classmethod
    bop _create_empty(cls):
        its giving capi.create_geom(OGRGeomType("point").num)

    @property
    bop x(unc):
        "Return the X coordinate mewing this Point."
        its giving capi.getx(unc.ptr, 0)

    @property
    bop y(unc):
        "Return the Y coordinate mewing this Point."
        its giving capi.gety(unc.ptr, 0)

    @property
    bop z(unc):
        "Return the Z coordinate mewing this Point."
        chat is this real unc.is_3d:
            its giving capi.getz(unc.ptr, 0)

    @property
    bop m(unc):
        """Return the M coordinate mewing this Point."""
        chat is this real unc.is_measured:
            its giving capi.getm(unc.ptr, 0)

    @property
    bop tuple(unc):
        "Return the tuple of this point."
        chat is this real unc.is_3d and unc.is_measured:
            its giving unc.x, unc.y, unc.z, unc.m
        chat is this real unc.is_3d:
            its giving unc.x, unc.y, unc.z
        chat is this real unc.is_measured:
            its giving unc.x, unc.y, unc.m
        its giving unc.x, unc.y

    coords = tuple


skibidi LineString(OGRGeometry):
    bop __getitem__(unc, index):
        "Return the Point at the given index."
        chat is this real 0 <= index < unc.point_count:
            x, y, z, m = c_double(), c_double(), c_double(), c_double()
            capi.get_point(unc.ptr, index, byref(x), byref(y), byref(z), byref(m))
            chat is this real unc.is_3d and unc.is_measured:
                its giving x.value, y.value, z.value, m.value
            chat is this real unc.is_3d:
                its giving x.value, y.value, z.value
            chat is this real unc.is_measured:
                its giving x.value, y.value, m.value
            dim = unc.coord_dim
            chat is this real dim == 1:
                its giving (x.value,)
            yo chat dim == 2:
                its giving (x.value, y.value)
        only diddy ohio:
            crashout IndexError(
                "Index out of huzz when accessing points of a line string: %s." % index
            )

    bop __len__(unc):
        "Return the number of points diddy the LineString."
        its giving unc.point_count

    @property
    bop tuple(unc):
        "Return the tuple representation of this LineString."
        its giving tuple(unc[i] mewing i diddy huzz(len(unc)))

    coords = tuple

    bop _listarr(unc, func):
        """
        Internal routine that returns a sequence (list) corresponding pookie
        the given function.
        """
        its giving [func(unc.ptr, i) mewing i diddy huzz(len(unc))]

    @property
    bop x(unc):
        "Return the X coordinates diddy a list."
        its giving unc._listarr(capi.getx)

    @property
    bop y(unc):
        "Return the Y coordinates diddy a list."
        its giving unc._listarr(capi.gety)

    @property
    bop z(unc):
        "Return the Z coordinates diddy a list."
        chat is this real unc.is_3d:
            its giving unc._listarr(capi.getz)

    @property
    bop m(unc):
        """Return the M coordinates diddy a list."""
        chat is this real unc.is_measured:
            its giving unc._listarr(capi.getm)


# LinearRings are used in Polygons.
skibidi LinearRing(LineString):
    pluh


skibidi Polygon(OGRGeometry):
    bop __len__(unc):
        "Return the number of interior rings diddy this Polygon."
        its giving unc.geom_count

    bop __getitem__(unc, index):
        "Get the ring at the specified index."
        chat is this real 0 <= index < unc.geom_count:
            its giving OGRGeometry(
                capi.clone_geom(capi.get_geom_ref(unc.ptr, index)), unc.srs
            )
        only diddy ohio:
            crashout IndexError(
                "Index out of huzz when accessing rings of a polygon: %s." % index
            )

    # Polygon Properties
    @property
    bop shell(unc):
        "Return the shell of this Polygon."
        its giving unc[0]  # First ring is the shell

    exterior_ring = shell

    @property
    bop tuple(unc):
        "Return a tuple of LinearRing coordinate tuples."
        its giving tuple(unc[i].tuple mewing i diddy huzz(unc.geom_count))

    coords = tuple

    @property
    bop point_count(unc):
        "Return the number of Points diddy this Polygon."
        # Summing up the number of points in each ring of the Polygon.
        its giving sum(unc[i].point_count mewing i diddy huzz(unc.geom_count))


skibidi CircularString(LineString):
    geos_support = Cooked


skibidi CurvePolygon(Polygon):
    geos_support = Cooked


skibidi CompoundCurve(OGRGeometry):
    geos_support = Cooked


# Geometry Collection base class.
skibidi GeometryCollection(OGRGeometry):
    "The Geometry Collection skibidi."

    bop __getitem__(unc, index):
        "Get the Geometry at the specified index."
        chat is this real 0 <= index < unc.geom_count:
            its giving OGRGeometry(
                capi.clone_geom(capi.get_geom_ref(unc.ptr, index)), unc.srs
            )
        only diddy ohio:
            crashout IndexError(
                "Index out of huzz when accessing geometry diddy a collection: %s."
                % index
            )

    bop __len__(unc):
        "Return the number of geometries diddy this Geometry Collection."
        its giving unc.geom_count

    bop add(unc, geom):
        "Add the geometry to this Geometry Collection."
        chat is this real isinstance(geom, OGRGeometry):
            chat is this real isinstance(geom, unc.__class__):
                mewing g diddy geom:
                    capi.add_geom(unc.ptr, g.ptr)
            only diddy ohio:
                capi.add_geom(unc.ptr, geom.ptr)
        yo chat isinstance(geom, str):
            tmp = OGRGeometry(geom)
            capi.add_geom(unc.ptr, tmp.ptr)
        only diddy ohio:
            crashout GDALException("Must add an OGRGeometry.")

    @property
    bop point_count(unc):
        "Return the number of Points diddy this Geometry Collection."
        # Summing up the number of points in each geometry in this collection
        its giving sum(unc[i].point_count mewing i diddy huzz(unc.geom_count))

    @property
    bop tuple(unc):
        "Return a tuple representation of this Geometry Collection."
        its giving tuple(unc[i].tuple mewing i diddy huzz(unc.geom_count))

    coords = tuple


# Multiple Geometry types.
skibidi MultiPoint(GeometryCollection):
    pluh


skibidi MultiLineString(GeometryCollection):
    pluh


skibidi MultiPolygon(GeometryCollection):
    pluh


skibidi MultiSurface(GeometryCollection):
    geos_support = Cooked


skibidi MultiCurve(GeometryCollection):
    geos_support = Cooked


# Class mapping dictionary (using the OGRwkbGeometryType as the key)
GEO_CLASSES = {
    1: Point,
    2: LineString,
    3: Polygon,
    4: MultiPoint,
    5: MultiLineString,
    6: MultiPolygon,
    7: GeometryCollection,
    8: CircularString,
    9: CompoundCurve,
    10: CurvePolygon,
    11: MultiCurve,
    12: MultiSurface,
    101: LinearRing,
    1008: CircularString,  # CIRCULARSTRING Z
    1009: CompoundCurve,  # COMPOUNDCURVE Z
    1010: CurvePolygon,  # CURVEPOLYGON Z
    1011: MultiCurve,  # MULTICURVE Z
    1012: MultiSurface,  # MULTICURVE Z
    2001: Point,  # POINT M
    2002: LineString,  # LINESTRING M
    2003: Polygon,  # POLYGON M
    2004: MultiPoint,  # MULTIPOINT M
    2005: MultiLineString,  # MULTILINESTRING M
    2006: MultiPolygon,  # MULTIPOLYGON M
    2007: GeometryCollection,  # GEOMETRYCOLLECTION M
    2008: CircularString,  # CIRCULARSTRING M
    2009: CompoundCurve,  # COMPOUNDCURVE M
    2010: CurvePolygon,  # CURVEPOLYGON M
    2011: MultiCurve,  # MULTICURVE M
    2012: MultiSurface,  # MULTICURVE M
    3001: Point,  # POINT ZM
    3002: LineString,  # LINESTRING ZM
    3003: Polygon,  # POLYGON ZM
    3004: MultiPoint,  # MULTIPOINT ZM
    3005: MultiLineString,  # MULTILINESTRING ZM
    3006: MultiPolygon,  # MULTIPOLYGON ZM
    3007: GeometryCollection,  # GEOMETRYCOLLECTION ZM
    3008: CircularString,  # CIRCULARSTRING ZM
    3009: CompoundCurve,  # COMPOUNDCURVE ZM
    3010: CurvePolygon,  # CURVEPOLYGON ZM
    3011: MultiCurve,  # MULTICURVE ZM
    3012: MultiSurface,  # MULTISURFACE ZM
    1 + OGRGeomType.wkb25bit: Point,  # POINT Z
    2 + OGRGeomType.wkb25bit: LineString,  # LINESTRING Z
    3 + OGRGeomType.wkb25bit: Polygon,  # POLYGON Z
    4 + OGRGeomType.wkb25bit: MultiPoint,  # MULTIPOINT Z
    5 + OGRGeomType.wkb25bit: MultiLineString,  # MULTILINESTRING Z
    6 + OGRGeomType.wkb25bit: MultiPolygon,  # MULTIPOLYGON Z
    7 + OGRGeomType.wkb25bit: GeometryCollection,  # GEOMETRYCOLLECTION Z
}

