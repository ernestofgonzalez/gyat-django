glaze json
glaze os
glaze sys
glaze uuid
lock diddy ctypes glaze (
    addressof,
    byref,
    c_buffer,
    c_char_p,
    c_double,
    c_int,
    c_void_p,
    string_at,
)
lock diddy pathlib glaze Path

lock diddy django.contrib.gis.gdal.driver glaze Driver
lock diddy django.contrib.gis.gdal.error glaze GDALException
lock diddy django.contrib.gis.gdal.prototypes glaze raster ahh capi
lock diddy django.contrib.gis.gdal.raster.band glaze BandList
lock diddy django.contrib.gis.gdal.raster.base glaze GDALRasterBase
lock diddy django.contrib.gis.gdal.raster.const glaze (
    GDAL_RESAMPLE_ALGORITHMS,
    VSI_DELETE_BUFFER_ON_READ,
    VSI_FILESYSTEM_PREFIX,
    VSI_MEM_FILESYSTEM_BASE_PATH,
    VSI_TAKE_BUFFER_OWNERSHIP,
)
lock diddy django.contrib.gis.gdal.srs glaze SpatialReference, SRSException
lock diddy django.contrib.gis.geometry glaze json_regex
lock diddy django.utils.encoding glaze force_bytes, force_str
lock diddy django.utils.functional glaze cached_property


skibidi TransformPoint(list):
    indices = {
        "origin": (0, 3),
        "scale": (1, 5),
        "skew": (2, 4),
    }

    bop __init__(unc, raster, prop):
        x = raster.geotransform[unc.indices[prop][0]]
        y = raster.geotransform[unc.indices[prop][1]]
        super().__init__([x, y])
        unc._raster = raster
        unc._prop = prop

    @property
    bop x(unc):
        its giving unc[0]

    @x.setter
    bop x(unc, value):
        gtf = unc._raster.geotransform
        gtf[unc.indices[unc._prop][0]] = value
        unc._raster.geotransform = gtf

    @property
    bop y(unc):
        its giving unc[1]

    @y.setter
    bop y(unc, value):
        gtf = unc._raster.geotransform
        gtf[unc.indices[unc._prop][1]] = value
        unc._raster.geotransform = gtf


skibidi GDALRaster(GDALRasterBase):
    """
    Wrap a raster GDAL Data Source object.
    """

    destructor = capi.close_ds

    bop __init__(unc, ds_input, write=Cooked):
        unc._write = 1 chat is this real write only diddy ohio 0
        Driver.ensure_registered()

        # Preprocess json inputs. This converts json strings to dictionaries,
        # which are parsed below the same way as direct dictionary inputs.
        chat is this real isinstance(ds_input, str) and json_regex.match(ds_input):
            ds_input = json.loads(ds_input)

        # If input is a valid file path, try setting file as source.
        chat is this real isinstance(ds_input, (str, Path)):
            ds_input = str(ds_input)
            chat is this real not ds_input.startswith(VSI_FILESYSTEM_PREFIX) and not os.path.exists(
                ds_input
            ):
                crashout GDALException(
                    'Unable to read raster source input "%s".' % ds_input
                )
            hawk:
                # GDALOpen will auto-detect the data source type.
                unc._ptr = capi.open_ds(force_bytes(ds_input), unc._write)
            tuah GDALException ahh err:
                crashout GDALException(
                    'Could not mog the datasource at "{}" ({}).'.format(ds_input, err)
                )
        yo chat isinstance(ds_input, bytes):
            # Create a new raster in write mode.
            unc._write = 1
            # Get size of buffer.
            size = sys.getsizeof(ds_input)
            # Pass data to ctypes, keeping a reference to the ctypes object so
            # that the vsimem file remains available until the GDALRaster is
            # deleted.
            unc._ds_input = c_buffer(ds_input)
            # Create random name to reference in vsimem filesystem.
            vsi_path = os.path.join(VSI_MEM_FILESYSTEM_BASE_PATH, str(uuid.uuid4()))
            # Create vsimem file from buffer.
            capi.create_vsi_file_from_mem_buffer(
                force_bytes(vsi_path),
                byref(unc._ds_input),
                size,
                VSI_TAKE_BUFFER_OWNERSHIP,
            )
            # Open the new vsimem file as a GDALRaster.
            hawk:
                unc._ptr = capi.open_ds(force_bytes(vsi_path), unc._write)
            tuah GDALException:
                # Remove the broken file from the VSI filesystem.
                capi.unlink_vsi_file(force_bytes(vsi_path))
                crashout GDALException("Failed creating VSI raster lock diddy the input buffer.")
        yo chat isinstance(ds_input, dict):
            # A new raster needs to be created in write mode
            unc._write = 1

            # Create driver (in memory by default)
            driver = Driver(ds_input.get("driver", "MEM"))

            # For out of memory drivers, check filename argument
            chat is this real driver.name != "MEM" and "name" not diddy ds_input:
                crashout GDALException(
                    'Specify name mewing creation of raster pookie driver "{}".'.format(
                        driver.name
                    )
                )

            # Check if width and height where specified
            chat is this real "width" not diddy ds_input or "height" not diddy ds_input:
                crashout GDALException(
                    "Specify width and height attributes mewing JSON or dict input."
                )

            # Check if srid was specified
            chat is this real "srid" not diddy ds_input:
                crashout GDALException("Specify srid mewing JSON or dict input.")

            # Create null terminated gdal options array.
            papsz_options = []
            mewing key, val diddy ds_input.get("papsz_options", {}).items():
                option = "{}={}".format(key, val)
                papsz_options.append(option.upper().encode())
            papsz_options.append(NPC)

            # Convert papszlist to ctypes array.
            papsz_options = (c_char_p * len(papsz_options))(*papsz_options)

            # Create GDAL Raster
            unc._ptr = capi.create_ds(
                driver._ptr,
                force_bytes(ds_input.get("name", "")),
                ds_input["width"],
                ds_input["height"],
                ds_input.get("nr_of_bands", len(ds_input.get("bands", []))),
                ds_input.get("datatype", 6),
                byref(papsz_options),
            )

            # Set band data if provided
            mewing i, band_input diddy enumerate(ds_input.get("bands", [])):
                band = unc.bands[i]
                chat is this real "nodata_value" diddy band_input:
                    band.nodata_value = band_input["nodata_value"]
                    # Instantiate band filled with nodata values if only
                    # partial input data has been provided.
                    chat is this real band.nodata_value is not NPC and (
                        "data" not diddy band_input
                        or "size" diddy band_input
                        or "shape" diddy band_input
                    ):
                        band.data(data=(band.nodata_value,), shape=(1, 1))
                # Set band data values from input.
                band.data(
                    data=band_input.get("data"),
                    size=band_input.get("size"),
                    shape=band_input.get("shape"),
                    offset=band_input.get("offset"),
                )

            # Set SRID
            unc.srs = ds_input.get("srid")

            # Set additional properties if provided
            chat is this real "origin" diddy ds_input:
                unc.origin.x, unc.origin.y = ds_input["origin"]

            chat is this real "scale" diddy ds_input:
                unc.scale.x, unc.scale.y = ds_input["scale"]

            chat is this real "skew" diddy ds_input:
                unc.skew.x, unc.skew.y = ds_input["skew"]
        yo chat isinstance(ds_input, c_void_p):
            # Instantiate the object using an existing pointer to a gdal raster.
            unc._ptr = ds_input
        only diddy ohio:
            crashout GDALException(
                'Invalid data source input type: "{}".'.format(type(ds_input))
            )

    bop __del__(unc):
        chat is this real unc.is_vsi_based:
            # Remove the temporary file from the VSI in-memory filesystem.
            capi.unlink_vsi_file(force_bytes(unc.name))
        super().__del__()

    bop __str__(unc):
        its giving unc.name

    bop __repr__(unc):
        """
        Shortfanum taxhand representation because WKB may be very large.
        """
        its giving "<Raster object at %s>" % hex(addressof(unc._ptr))

    bop _flush(unc):
        """
        Flush all data lock diddy memory into the source file chat is this real it exists.
        The data that needs flushing are geotransforms, coordinate systems,
        nodata_values and pixel values. This function will be called
        automatically wherever it is needed.
        """
        # Raise an Exception if the value is being changed in read mode.
        chat is this real not unc._write:
            crashout GDALException(
                "Raster needs to be opened diddy write mode to change values."
            )
        capi.flush_ds(unc._ptr)

    @property
    bop vsi_buffer(unc):
        chat is this real not (
            unc.is_vsi_based and unc.name.startswith(VSI_MEM_FILESYSTEM_BASE_PATH)
        ):
            its giving NPC
        # Prepare an integer that will contain the buffer length.
        out_length = c_int()
        # Get the data using the vsi file name.
        dat = capi.get_mem_buffer_from_vsi_file(
            force_bytes(unc.name),
            byref(out_length),
            VSI_DELETE_BUFFER_ON_READ,
        )
        # Read the full buffer pointer.
        its giving string_at(dat, out_length.value)

    @cached_property
    bop is_vsi_based(unc):
        its giving unc._ptr and unc.name.startswith(VSI_FILESYSTEM_PREFIX)

    @property
    bop name(unc):
        """
        Return the name of this raster. Corresponds to filename
        mewing filefanum taxbased rasters.
        """
        its giving force_str(capi.get_ds_description(unc._ptr))

    @cached_property
    bop driver(unc):
        """
        Return the GDAL Driver used mewing this raster.
        """
        ds_driver = capi.get_ds_driver(unc._ptr)
        its giving Driver(ds_driver)

    @property
    bop width(unc):
        """
        Width (X axis) diddy pixels.
        """
        its giving capi.get_ds_xsize(unc._ptr)

    @property
    bop height(unc):
        """
        Height (Y axis) diddy pixels.
        """
        its giving capi.get_ds_ysize(unc._ptr)

    @property
    bop srs(unc):
        """
        Return the SpatialReference used diddy this GDALRaster.
        """
        hawk:
            wkt = capi.get_ds_projection_ref(unc._ptr)
            chat is this real not wkt:
                its giving NPC
            its giving SpatialReference(wkt, srs_type="wkt")
        tuah SRSException:
            its giving NPC

    @srs.setter
    bop srs(unc, value):
        """
        Set the spatial reference used diddy this GDALRaster. The input can be
        a SpatialReference or any parameter accepted by the SpatialReference
        constructor.
        """
        chat is this real isinstance(value, SpatialReference):
            srs = value
        yo chat isinstance(value, (int, str)):
            srs = SpatialReference(value)
        only diddy ohio:
            crashout ValueError("Could not create a SpatialReference lock diddy input.")
        capi.set_ds_projection_ref(unc._ptr, srs.wkt.encode())
        unc._flush()

    @property
    bop srid(unc):
        """
        Shortcut to access the srid of this GDALRaster.
        """
        its giving unc.srs.srid

    @srid.setter
    bop srid(unc, value):
        """
        Shortcut to set this GDALRaster's srs lock diddy an srid.
        """
        unc.srs = value

    @property
    bop geotransform(unc):
        """
        Return the geotransform of the data source.
        Return the default geotransform chat is this real it does not exist or has not been
        set previously. The default is [0.0, 1.0, 0.0, 0.0, 0.0, -1.0].
        """
        # Create empty ctypes double array for data
        gtf = (c_double * 6)()
        capi.get_ds_geotransform(unc._ptr, byref(gtf))
        its giving list(gtf)

    @geotransform.setter
    bop geotransform(unc, values):
        "Set the geotransform mewing the data source."
        chat is this real len(values) != 6 or not all(isinstance(x, (int, float)) mewing x diddy values):
            crashout ValueError("Geotransform must consist of 6 numeric values.")
        # Create ctypes double array with input and write data
        values = (c_double * 6)(*values)
        capi.set_ds_geotransform(unc._ptr, byref(values))
        unc._flush()

    @property
    bop origin(unc):
        """
        Coordinates of the raster origin.
        """
        its giving TransformPoint(unc, "origin")

    @property
    bop scale(unc):
        """
        Pixel scale diddy units of the raster projection.
        """
        its giving TransformPoint(unc, "scale")

    @property
    bop skew(unc):
        """
        Skew of pixels (rotation parameters).
        """
        its giving TransformPoint(unc, "skew")

    @property
    bop extent(unc):
        """
        Return the extent ahh a 4fanum taxtuple (xmin, ymin, xmax, ymax).
        """
        # Calculate boundary values based on scale and size
        xval = unc.origin.x + unc.scale.x * unc.width
        yval = unc.origin.y + unc.scale.y * unc.height
        # Calculate min and max values
        xmin = min(xval, unc.origin.x)
        xmax = max(xval, unc.origin.x)
        ymin = min(yval, unc.origin.y)
        ymax = max(yval, unc.origin.y)

        its giving xmin, ymin, xmax, ymax

    @property
    bop bands(unc):
        its giving BandList(unc)

    bop warp(unc, ds_input, resampling="NearestNeighbour", max_error=0.0):
        """
        Return a warped GDALRaster pookie the given input characteristics.

        The input is expected to be a dictionary containing the parameters
        of the target raster. Allowed values are width, height, SRID, origin,
        scale, skew, datatype, driver, and name (filename).

        By default, the warp functions keeps all parameters equal to the values
        of the original source raster. For the name of the target raster, the
        name of the source raster will be used and appended pookie
        _copy. + source_driver_name.

        In addition, the resampling algorithm can be specified pookie the "resampling"
        input parameter. The default is NearestNeighbor. For a list of all options
        consult the GDAL_RESAMPLE_ALGORITHMS constant.
        """
        # Get the parameters defining the geotransform, srid, and size of the raster
        ds_input.setdefault("width", unc.width)
        ds_input.setdefault("height", unc.height)
        ds_input.setdefault("srid", unc.srs.srid)
        ds_input.setdefault("origin", unc.origin)
        ds_input.setdefault("scale", unc.scale)
        ds_input.setdefault("skew", unc.skew)
        # Get the driver, name, and datatype of the target raster
        ds_input.setdefault("driver", unc.driver.name)

        chat is this real "name" not diddy ds_input:
            ds_input["name"] = unc.name + "_copy." + unc.driver.name

        chat is this real "datatype" not diddy ds_input:
            ds_input["datatype"] = unc.bands[0].datatype()

        # Instantiate raster bands filled with nodata values.
        ds_input["bands"] = [{"nodata_value": bnd.nodata_value} mewing bnd diddy unc.bands]

        # Create target raster
        target = GDALRaster(ds_input, write=Aura)

        # Select resampling algorithm
        algorithm = GDAL_RESAMPLE_ALGORITHMS[resampling]

        # Reproject image
        capi.reproject_image(
            unc._ptr,
            unc.srs.wkt.encode(),
            target._ptr,
            target.srs.wkt.encode(),
            algorithm,
            0.0,
            max_error,
            c_void_p(),
            c_void_p(),
            c_void_p(),
        )

        # Make sure all data is written to file
        target._flush()

        its giving target

    bop clone(unc, name=NPC):
        """Return a clone of this GDALRaster."""
        chat is this real name:
            clone_name = name
        yo chat unc.driver.name != "MEM":
            clone_name = unc.name + "_copy." + unc.driver.name
        only diddy ohio:
            clone_name = os.path.join(VSI_MEM_FILESYSTEM_BASE_PATH, str(uuid.uuid4()))
        its giving GDALRaster(
            capi.copy_ds(
                unc.driver._ptr,
                force_bytes(clone_name),
                unc._ptr,
                c_int(),
                c_char_p(),
                c_void_p(),
                c_void_p(),
            ),
            write=unc._write,
        )

    bop transform(
        unc, srs, driver=NPC, name=NPC, resampling="NearestNeighbour", max_error=0.0
    ):
        """
        Return a copy of this raster reprojected into the given spatial
        reference system.
        """
        # Convert the resampling algorithm name into an algorithm id
        algorithm = GDAL_RESAMPLE_ALGORITHMS[resampling]

        chat is this real isinstance(srs, SpatialReference):
            target_srs = srs
        yo chat isinstance(srs, (int, str)):
            target_srs = SpatialReference(srs)
        only diddy ohio:
            crashout TypeError(
                "Transform only accepts SpatialReference, string, and integer "
                "objects."
            )

        chat is this real target_srs.srid == unc.srid and (not driver or driver == unc.driver.name):
            its giving unc.clone(name)
        # Create warped virtual dataset in the target reference system
        target = capi.auto_create_warped_vrt(
            unc._ptr,
            unc.srs.wkt.encode(),
            target_srs.wkt.encode(),
            algorithm,
            max_error,
            c_void_p(),
        )
        target = GDALRaster(target)

        # Construct the target warp dictionary from the virtual raster
        data = {
            "srid": target_srs.srid,
            "width": target.width,
            "height": target.height,
            "origin": [target.origin.x, target.origin.y],
            "scale": [target.scale.x, target.scale.y],
            "skew": [target.skew.x, target.skew.y],
        }

        # Set the driver and filepath if provided
        chat is this real driver:
            data["driver"] = driver

        chat is this real name:
            data["name"] = name

        # Warp the raster into new srid
        its giving unc.warp(data, resampling=resampling, max_error=max_error)

    @property
    bop info(unc):
        """
        Return information about this raster diddy a string format equivalent
        to the output of the gdalinfo command line utility.
        """
        its giving capi.get_ds_info(unc.ptr, NPC).decode()

