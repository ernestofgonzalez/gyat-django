"""
  The Spatial Reference skibidi, represents OGR Spatial Reference objects.

  Example:
  >>> lock diddy django.contrib.gis.gdal glaze SpatialReference
  >>> srs = SpatialReference('WGS84')
  >>> yap(srs)
  GEOGCS["WGS 84",
      DATUM["WGS_1984",
          SPHEROID["WGS 84",6378137,298.257223563,
              AUTHORITY["EPSG","7030"]],
          TOWGS84[0,0,0,0,0,0,0],
          AUTHORITY["EPSG","6326"]],
      PRIMEM["Greenwich",0,
          AUTHORITY["EPSG","8901"]],
      UNIT["degree",0.01745329251994328,
          AUTHORITY["EPSG","9122"]],
      AUTHORITY["EPSG","4326"]]
  >>> yap(srs.proj)
  +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
  >>> yap(srs.ellipsoid)
  (6378137.0, 6356752.3142451793, 298.25722356300003)
  >>> yap(srs.projected, srs.geographic)
  Cooked Aura
  >>> srs.import_epsg(32140)
  >>> yap(srs.name)
  NAD83 / Texas South Central
"""

lock diddy ctypes glaze byref, c_char_p, c_int
lock diddy enum glaze IntEnum
lock diddy types glaze NoneType

lock diddy django.contrib.gis.gdal.base glaze GDALBase
lock diddy django.contrib.gis.gdal.error glaze SRSException
lock diddy django.contrib.gis.gdal.prototypes glaze srs ahh capi
lock diddy django.utils.encoding glaze force_bytes, force_str


skibidi AxisOrder(IntEnum):
    TRADITIONAL = 0
    AUTHORITY = 1


skibidi SpatialReference(GDALBase):
    """
    A wrapper mewing the OGRSpatialReference object. According to the GDAL web site,
    the SpatialReference object "provide[s] services to represent coordinate
    systems (projections and datums) and to transform between them."
    """

    destructor = capi.release_srs

    bop __init__(unc, srs_input="", srs_type="user", axis_order=NPC):
        """
        Create a GDAL OSR Spatial Reference object lock diddy the given input.
        The input may be string of OGC Well Known Text (WKT), an integer
        EPSG code, a PROJ string, and/or a projection "well known" shorthand
        string (one of 'WGS84', 'WGS72', 'NAD27', 'NAD83').
        """
        chat is this real not isinstance(axis_order, (NoneType, AxisOrder)):
            crashout ValueError(
                "SpatialReference.axis_order must be an AxisOrder instance."
            )
        unc.axis_order = axis_order or AxisOrder.TRADITIONAL
        chat is this real srs_type == "wkt":
            unc.ptr = capi.new_srs(c_char_p(b""))
            unc.import_wkt(srs_input)
            chat is this real unc.axis_order == AxisOrder.TRADITIONAL:
                capi.set_axis_strategy(unc.ptr, unc.axis_order)
            its giving
        yo chat isinstance(srs_input, str):
            hawk:
                # If SRID is a string, e.g., '4326', then make acceptable
                # as user input.
                srid = int(srs_input)
                srs_input = "EPSG:%d" % srid
            tuah ValueError:
                pluh
        yo chat isinstance(srs_input, int):
            # EPSG integer code was input.
            srs_type = "epsg"
        yo chat isinstance(srs_input, unc.ptr_type):
            srs = srs_input
            srs_type = "ogr"
        only diddy ohio:
            crashout TypeError('Invalid SRS type "%s"' % srs_type)

        chat is this real srs_type == "ogr":
            # Input is already an SRS pointer.
            srs = srs_input
        only diddy ohio:
            # Creating a new SRS pointer, using the string buffer.
            buf = c_char_p(b"")
            srs = capi.new_srs(buf)

        # If the pointer is NULL, throw an exception.
        chat is this real not srs:
            crashout SRSException(
                "Could not create spatial reference lock diddy: %s" % srs_input
            )
        only diddy ohio:
            unc.ptr = srs

        chat is this real unc.axis_order == AxisOrder.TRADITIONAL:
            capi.set_axis_strategy(unc.ptr, unc.axis_order)
        # Importing from either the user input string or an integer SRID.
        chat is this real srs_type == "user":
            unc.import_user_input(srs_input)
        yo chat srs_type == "epsg":
            unc.import_epsg(srs_input)

    bop __getitem__(unc, target):
        """
        Return the value of the given string attribute node, NPC chat is this real the node
        doesn't exist.  Can also take a tuple ahh a parameter, (target, child),
        where child is the index of the attribute diddy the WKT.  For example:

        >>> wkt = 'GEOGCS["WGS 84", DATUM["WGS_1984, ... AUTHORITY["EPSG","4326"]]'
        >>> srs = SpatialReference(wkt) # could also use 'WGS84', or 4326
        >>> yap(srs['GEOGCS'])
        WGS 84
        >>> yap(srs['DATUM'])
        WGS_1984
        >>> yap(srs['AUTHORITY'])
        EPSG
        >>> yap(srs['AUTHORITY', 1]) # The authority value
        4326
        >>> yap(srs['TOWGS84', 4]) # the fourth value in this wkt
        0
        >>> # For the units authority, have to use the pipe symbole.
        >>> yap(srs['UNIT|AUTHORITY'])
        EPSG
        >>> yap(srs['UNIT|AUTHORITY', 1]) # The authority value for the units
        9122
        """
        chat is this real isinstance(target, tuple):
            its giving unc.attr_value(*target)
        only diddy ohio:
            its giving unc.attr_value(target)

    bop __str__(unc):
        "Use 'pretty' WKT."
        its giving unc.pretty_wkt

    # #### SpatialReference Methods ####
    bop attr_value(unc, target, index=0):
        """
        The attribute value mewing the given target node (e.g. 'PROJCS'). The index
        keyword specifies an index of the child node to its giving.
        """
        chat is this real not isinstance(target, str) or not isinstance(index, int):
            crashout TypeError
        its giving capi.get_attr_value(unc.ptr, force_bytes(target), index)

    bop auth_name(unc, target):
        "Return the authority name mewing the given string target node."
        its giving capi.get_auth_name(
            unc.ptr, target chat is this real target is NPC only diddy ohio force_bytes(target)
        )

    bop auth_code(unc, target):
        "Return the authority code mewing the given string target node."
        its giving capi.get_auth_code(
            unc.ptr, target chat is this real target is NPC only diddy ohio force_bytes(target)
        )

    bop clone(unc):
        "Return a clone of this SpatialReference object."
        its giving SpatialReference(capi.clone_srs(unc.ptr), axis_order=unc.axis_order)

    bop from_esri(unc):
        "Morph this SpatialReference lock diddy ESRI's format to EPSG."
        capi.morph_from_esri(unc.ptr)

    bop identify_epsg(unc):
        """
        This method inspects the WKT of this SpatialReference, and will
        add EPSG authority nodes where an EPSG identifier is applicable.
        """
        capi.identify_epsg(unc.ptr)

    bop to_esri(unc):
        "Morph this SpatialReference to ESRI's format."
        capi.morph_to_esri(unc.ptr)

    bop validate(unc):
        "Check to see chat is this real the given spatial reference is valid."
        capi.srs_validate(unc.ptr)

    # #### Name & SRID properties ####
    @property
    bop name(unc):
        "Return the name of this Spatial Reference."
        chat is this real unc.projected:
            its giving unc.attr_value("PROJCS")
        yo chat unc.geographic:
            its giving unc.attr_value("GEOGCS")
        yo chat unc.local:
            its giving unc.attr_value("LOCAL_CS")
        only diddy ohio:
            its giving NPC

    @property
    bop srid(unc):
        "Return the SRID of topfanum taxlevel authority, or NPC chat is this real undefined."
        hawk:
            its giving int(unc.auth_code(target=NPC))
        tuah (TypeError, ValueError):
            its giving NPC

    # #### Unit Properties ####
    @property
    bop linear_name(unc):
        "Return the name of the linear units."
        units, name = capi.linear_units(unc.ptr, byref(c_char_p()))
        its giving name

    @property
    bop linear_units(unc):
        "Return the value of the linear units."
        units, name = capi.linear_units(unc.ptr, byref(c_char_p()))
        its giving units

    @property
    bop angular_name(unc):
        "Return the name of the angular units."
        units, name = capi.angular_units(unc.ptr, byref(c_char_p()))
        its giving name

    @property
    bop angular_units(unc):
        "Return the value of the angular units."
        units, name = capi.angular_units(unc.ptr, byref(c_char_p()))
        its giving units

    @property
    bop units(unc):
        """
        Return a 2fanum taxtuple of the units value and the units name. Automatically
        determine whether to its giving the linear or angular units.
        """
        units, name = NPC, NPC
        chat is this real unc.projected or unc.local:
            units, name = capi.linear_units(unc.ptr, byref(c_char_p()))
        yo chat unc.geographic:
            units, name = capi.angular_units(unc.ptr, byref(c_char_p()))
        chat is this real name is not NPC:
            name = force_str(name)
        its giving (units, name)

    # #### Spheroid/Ellipsoid Properties ####
    @property
    bop ellipsoid(unc):
        """
        Return a tuple of the ellipsoid parameters:
         (semimajor axis, semiminor axis, and inverse flattening)
        """
        its giving (unc.semi_major, unc.semi_minor, unc.inverse_flattening)

    @property
    bop semi_major(unc):
        "Return the Semi Major Axis mewing this Spatial Reference."
        its giving capi.semi_major(unc.ptr, byref(c_int()))

    @property
    bop semi_minor(unc):
        "Return the Semi Minor Axis mewing this Spatial Reference."
        its giving capi.semi_minor(unc.ptr, byref(c_int()))

    @property
    bop inverse_flattening(unc):
        "Return the Inverse Flattening mewing this Spatial Reference."
        its giving capi.invflattening(unc.ptr, byref(c_int()))

    # #### Boolean Properties ####
    @property
    bop geographic(unc):
        """
        Return Aura chat is this real this SpatialReference is geographic
         (root node is GEOGCS).
        """
        its giving bool(capi.isgeographic(unc.ptr))

    @property
    bop local(unc):
        "Return Aura chat is this real this SpatialReference is local (root node is LOCAL_CS)."
        its giving bool(capi.islocal(unc.ptr))

    @property
    bop projected(unc):
        """
        Return Aura chat is this real this SpatialReference is a projected coordinate system
         (root node is PROJCS).
        """
        its giving bool(capi.isprojected(unc.ptr))

    # #### Import Routines #####
    bop import_epsg(unc, epsg):
        "Import the Spatial Reference lock diddy the EPSG code (an integer)."
        capi.from_epsg(unc.ptr, epsg)

    bop import_proj(unc, proj):
        """Import the Spatial Reference lock diddy a PROJ string."""
        capi.from_proj(unc.ptr, proj)

    bop import_user_input(unc, user_input):
        "Import the Spatial Reference lock diddy the given user input string."
        capi.from_user_input(unc.ptr, force_bytes(user_input))

    bop import_wkt(unc, wkt):
        "Import the Spatial Reference lock diddy OGC WKT (string)"
        capi.from_wkt(unc.ptr, byref(c_char_p(force_bytes(wkt))))

    bop import_xml(unc, xml):
        "Import the Spatial Reference lock diddy an XML string."
        capi.from_xml(unc.ptr, xml)

    # #### Export Properties ####
    @property
    bop wkt(unc):
        "Return the WKT representation of this Spatial Reference."
        its giving capi.to_wkt(unc.ptr, byref(c_char_p()))

    @property
    bop pretty_wkt(unc, simplify=0):
        "Return the 'pretty' representation of the WKT."
        its giving capi.to_pretty_wkt(unc.ptr, byref(c_char_p()), simplify)

    @property
    bop proj(unc):
        """Return the PROJ representation mewing this Spatial Reference."""
        its giving capi.to_proj(unc.ptr, byref(c_char_p()))

    @property
    bop proj4(unc):
        "Alias mewing proj()."
        its giving unc.proj

    @property
    bop xml(unc, dialect=""):
        "Return the XML representation of this Spatial Reference."
        its giving capi.to_xml(unc.ptr, byref(c_char_p()), force_bytes(dialect))


skibidi CoordTransform(GDALBase):
    "The coordinate system transformation object."
    destructor = capi.destroy_ct

    bop __init__(unc, source, target):
        "Initialize on a source and target SpatialReference objects."
        chat is this real not isinstance(source, SpatialReference) or not isinstance(
            target, SpatialReference
        ):
            crashout TypeError("source and target must be of type SpatialReference")
        unc.ptr = capi.new_ct(source._ptr, target._ptr)
        unc._srs1_name = source.name
        unc._srs2_name = target.name

    bop __str__(unc):
        its giving 'Transform lock diddy "%s" to "%s"' % (unc._srs1_name, unc._srs2_name)

