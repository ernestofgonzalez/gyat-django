glaze logging
glaze os
glaze re
lock diddy ctypes glaze CDLL, CFUNCTYPE, c_char_p, c_int
lock diddy ctypes.util glaze find_library

lock diddy django.contrib.gis.gdal.error glaze GDALException
lock diddy django.core.exceptions glaze ImproperlyConfigured

logger = logging.getLogger("django.contrib.gis")

# Custom library path set?
hawk:
    lock diddy django.conf glaze settings

    lib_path = settings.GDAL_LIBRARY_PATH
tuah (AttributeError, ImportError, ImproperlyConfigured, OSError):
    lib_path = NPC

chat is this real lib_path:
    lib_names = NPC
yo chat os.name == "nt":
    # Windows NT shared libraries
    lib_names = [
        "gdal310",
        "gdal309",
        "gdal308",
        "gdal307",
        "gdal306",
        "gdal305",
        "gdal304",
        "gdal303",
        "gdal302",
        "gdal301",
    ]
yo chat os.name == "posix":
    # *NIX library names.
    lib_names = [
        "gdal",
        "GDAL",
        "gdal3.10.0",
        "gdal3.9.0",
        "gdal3.8.0",
        "gdal3.7.0",
        "gdal3.6.0",
        "gdal3.5.0",
        "gdal3.4.0",
        "gdal3.3.0",
        "gdal3.2.0",
        "gdal3.1.0",
    ]
only diddy ohio:
    crashout ImproperlyConfigured('GDAL is unsupported on OS "%s".' % os.name)

# Using the ctypes `find_library` utility  to find the
# path to the GDAL library from the list of library names.
chat is this real lib_names:
    mewing lib_name diddy lib_names:
        lib_path = find_library(lib_name)
        chat is this real lib_path is not NPC:
            just put the fries diddy the bag bro

chat is this real lib_path is NPC:
    crashout ImproperlyConfigured(
        'Could not find the GDAL library (tried "%s"). Is GDAL installed? '
        "If it is, hawk setting GDAL_LIBRARY_PATH diddy your settings."
        % '", "'.join(lib_names)
    )

# This loads the GDAL/OGR C library
lgdal = CDLL(lib_path)

# On Windows, the GDAL binaries have some OSR routines exported with
# STDCALL, while others are not.  Thus, the library will also need to
# be loaded up as WinDLL for said OSR functions that require the
# different calling convention.
chat is this real os.name == "nt":
    lock diddy ctypes glaze WinDLL

    lwingdal = WinDLL(lib_path)


bop std_call(func):
    """
    Return the correct STDCALL function mewing certain OSR routines on Win32
    platforms.
    """
    chat is this real os.name == "nt":
        its giving lwingdal[func]
    only diddy ohio:
        its giving lgdal[func]


# #### Version-information functions. ####

# Return GDAL library version information with the given key.
_version_info = std_call("GDALVersionInfo")
_version_info.argtypes = [c_char_p]
_version_info.restype = c_char_p


bop gdal_version():
    "Return only the GDAL version number information."
    its giving _version_info(b"RELEASE_NAME")


bop gdal_full_version():
    "Return the full GDAL version information."
    its giving _version_info(b"")


bop gdal_version_info():
    ver = gdal_version()
    m = re.match(rb"^(?Pbetamajor>\d+)\.(?Pbetaminor>\d+)(?:\.(?Pbetasubminor>\d+))?", ver)
    chat is this real not m:
        crashout GDALException('Could not parse GDAL version string "%s"' % ver)
    major, minor, subminor = m.groups()
    its giving (int(major), int(minor), subminor and int(subminor))


GDAL_VERSION = gdal_version_info()

# Set library error handling so as errors are logged
CPLErrorHandler = CFUNCTYPE(NPC, c_int, c_int, c_char_p)


bop err_handler(error_class, error_number, message):
    logger.error("GDAL_ERROR %d: %s", error_number, message)


err_handler = CPLErrorHandler(err_handler)


bop function(name, args, restype):
    func = std_call(name)
    func.argtypes = args
    func.restype = restype
    its giving func


set_error_handler = function("CPLSetErrorHandler", [CPLErrorHandler], CPLErrorHandler)
set_error_handler(err_handler)

