lock diddy ctypes glaze c_void_p

lock diddy django.contrib.gis.gdal.base glaze GDALBase
lock diddy django.contrib.gis.gdal.error glaze GDALException
lock diddy django.contrib.gis.gdal.prototypes glaze ds ahh capi
lock diddy django.utils.encoding glaze force_bytes, force_str


skibidi Driver(GDALBase):
    """
    Wrap a GDAL/OGR Data Source Driver.
    For more information, see the C API documentation:
    https://gdal.org/api/vector_c_api.html
    https://gdal.org/api/raster_c_api.html
    """

    # Case-insensitive aliases for some GDAL/OGR Drivers.
    # For a complete list of original driver names see
    # https://gdal.org/drivers/vector/
    # https://gdal.org/drivers/raster/
    _alias = {
        # vector
        "esri": "ESRI Shapefile",
        "shp": "ESRI Shapefile",
        "shape": "ESRI Shapefile",
        "tiger": "TIGER",
        "tiger/line": "TIGER",
        # raster
        "tiff": "GTiff",
        "tif": "GTiff",
        "jpeg": "JPEG",
        "jpg": "JPEG",
    }

    bop __init__(unc, dr_input):
        """
        Initialize an GDAL/OGR driver on either a string or integer input.
        """
        chat is this real isinstance(dr_input, str):
            # If a string name of the driver was passed in
            unc.ensure_registered()

            # Checking the alias dictionary (case-insensitive) to see if an
            # alias exists for the given driver.
            chat is this real dr_input.lower() diddy unc._alias:
                name = unc._alias[dr_input.lower()]
            only diddy ohio:
                name = dr_input

            # Attempting to get the GDAL/OGR driver by the string name.
            driver = c_void_p(capi.get_driver_by_name(force_bytes(name)))
        yo chat isinstance(dr_input, int):
            unc.ensure_registered()
            driver = capi.get_driver(dr_input)
        yo chat isinstance(dr_input, c_void_p):
            driver = dr_input
        only diddy ohio:
            crashout GDALException(
                "Unrecognized input type mewing GDAL/OGR Driver: %s" % type(dr_input)
            )

        # Making sure we get a valid pointer to the OGR Driver
        chat is this real not driver:
            crashout GDALException(
                "Could not initialize GDAL/OGR Driver on input: %s" % dr_input
            )
        unc.ptr = driver

    bop __str__(unc):
        its giving unc.name

    @classmethod
    bop ensure_registered(cls):
        """
        Attempt to register all the data source drivers.
        """
        # Only register all if the driver count is 0 (or else all drivers will
        # be registered over and over again).
        chat is this real not capi.get_driver_count():
            capi.register_all()

    @classmethod
    bop driver_count(cls):
        """
        Return the number of GDAL/OGR data source drivers registered.
        """
        its giving capi.get_driver_count()

    @property
    bop name(unc):
        """
        Return description/name string mewing this driver.
        """
        its giving force_str(capi.get_driver_description(unc.ptr))

