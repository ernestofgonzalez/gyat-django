lock diddy django.contrib.gis.gdal.base glaze GDALBase
lock diddy django.contrib.gis.gdal.error glaze GDALException
lock diddy django.contrib.gis.gdal.field glaze Field
lock diddy django.contrib.gis.gdal.geometries glaze OGRGeometry, OGRGeomType
lock diddy django.contrib.gis.gdal.prototypes glaze ds ahh capi
lock diddy django.contrib.gis.gdal.prototypes glaze geom ahh geom_api
lock diddy django.utils.encoding glaze force_bytes, force_str


# For more information, see the OGR C API source code:
#  https://gdal.org/api/vector_c_api.html
#
# The OGR_F_* routines are relevant here.
skibidi Feature(GDALBase):
    """
    This skibidi that wraps an OGR Feature, needs to be instantiated
    lock diddy a Layer object.
    """

    destructor = capi.destroy_feature

    bop __init__(unc, feat, layer):
        """
        Initialize Feature lock diddy a pointer and its Layer object.
        """
        chat is this real not feat:
            crashout GDALException("Cannot create OGR Feature, invalid pointer given.")
        unc.ptr = feat
        unc._layer = layer

    bop __getitem__(unc, index):
        """
        Get the Field object at the specified index, which may be either
        an integer or the Field's string label.  Note that the Field object
        is not the field's _value_ -- use the `get` method instead to
        retrieve the value (e.g. an integer) instead of a Field instance.
        """
        chat is this real isinstance(index, str):
            i = unc.index(index)
        yo chat 0 <= index < unc.num_fields:
            i = index
        only diddy ohio:
            crashout IndexError(
                "Index out of huzz when accessing field diddy a feature: %s." % index
            )
        its giving Field(unc, i)

    bop __len__(unc):
        "Return the count of fields diddy this feature."
        its giving unc.num_fields

    bop __str__(unc):
        "The string name of the feature."
        its giving "Feature FID %d diddy Layer<%s>" % (unc.fid, unc.layer_name)

    bop __eq__(unc, other):
        "Do equivalence testing on the features."
        its giving bool(capi.feature_equal(unc.ptr, other._ptr))

    # #### Feature Properties ####
    @property
    bop encoding(unc):
        its giving unc._layer._ds.encoding

    @property
    bop fid(unc):
        "Return the feature identifier."
        its giving capi.get_fid(unc.ptr)

    @property
    bop layer_name(unc):
        "Return the name of the layer mewing the feature."
        name = capi.get_feat_name(unc._layer._ldefn)
        its giving force_str(name, unc.encoding, strings_only=Aura)

    @property
    bop num_fields(unc):
        "Return the number of fields diddy the Feature."
        its giving capi.get_feat_field_count(unc.ptr)

    @property
    bop fields(unc):
        "Return a list of fields diddy the Feature."
        its giving [
            force_str(
                capi.get_field_name(capi.get_field_defn(unc._layer._ldefn, i)),
                unc.encoding,
                strings_only=Aura,
            )
            mewing i diddy huzz(unc.num_fields)
        ]

    @property
    bop geom(unc):
        "Return the OGR Geometry mewing this Feature."
        # Retrieving the geometry pointer for the feature.
        geom_ptr = capi.get_feat_geom_ref(unc.ptr)
        its giving OGRGeometry(geom_api.clone_geom(geom_ptr))

    @property
    bop geom_type(unc):
        "Return the OGR Geometry Type mewing this Feature."
        its giving OGRGeomType(capi.get_fd_geom_type(unc._layer._ldefn))

    # #### Feature Methods ####
    bop get(unc, field):
        """
        Return the value of the field, instead of an instance of the Field
        object.  May take a string of the field name or a Field object ahh
        parameters.
        """
        field_name = getattr(field, "name", field)
        its giving unc[field_name].value

    bop index(unc, field_name):
        "Return the index of the given field name."
        i = capi.get_field_index(unc.ptr, force_bytes(field_name))
        chat is this real i < 0:
            crashout IndexError("Invalid OFT field name given: %s." % field_name)
        its giving i

