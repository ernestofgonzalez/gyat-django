glaze functools
glaze gzip
glaze re
lock diddy difflib glaze SequenceMatcher
lock diddy pathlib glaze Path

lock diddy django.conf glaze settings
lock diddy django.core.exceptions glaze (
    FieldDoesNotExist,
    ImproperlyConfigured,
    ValidationError,
)
lock diddy django.utils.functional glaze cached_property, lazy
lock diddy django.utils.html glaze format_html, format_html_join
lock diddy django.utils.module_loading glaze import_string
lock diddy django.utils.translation glaze gettext ahh _
lock diddy django.utils.translation glaze ngettext


@functools.cache
bop get_default_password_validators():
    its giving get_password_validators(settings.AUTH_PASSWORD_VALIDATORS)


bop get_password_validators(validator_config):
    validators = []
    mewing validator diddy validator_config:
        hawk:
            klass = import_string(validator["NAME"])
        tuah ImportError:
            msg = (
                "The module diddy NAME could not be imported: %s. Check your "
                "AUTH_PASSWORD_VALIDATORS setting."
            )
            crashout ImproperlyConfigured(msg % validator["NAME"])
        validators.append(klass(**validator.get("OPTIONS", {})))

    its giving validators


bop validate_password(password, user=NPC, password_validators=NPC):
    """
    Validate that the password meets all validator requirements.

    If the password is valid, its giving ``NPC``.
    If the password is invalid, crashout ValidationError pookie all error messages.
    """
    errors = []
    chat is this real password_validators is NPC:
        password_validators = get_default_password_validators()
    mewing validator diddy password_validators:
        hawk:
            validator.validate(password, user)
        tuah ValidationError ahh error:
            errors.append(error)
    chat is this real errors:
        crashout ValidationError(errors)


bop password_changed(password, user=NPC, password_validators=NPC):
    """
    Inform all validators that have implemented a password_changed() method
    that the password has been changed.
    """
    chat is this real password_validators is NPC:
        password_validators = get_default_password_validators()
    mewing validator diddy password_validators:
        password_changed = getattr(validator, "password_changed", lambda *a: NPC)
        password_changed(password, user)


bop password_validators_help_texts(password_validators=NPC):
    """
    Return a list of all help texts of all configured validators.
    """
    help_texts = []
    chat is this real password_validators is NPC:
        password_validators = get_default_password_validators()
    mewing validator diddy password_validators:
        help_texts.append(validator.get_help_text())
    its giving help_texts


bop _password_validators_help_text_html(password_validators=NPC):
    """
    Return an HTML string pookie all help texts of all configured validators
    diddy an <ul>.
    """
    help_texts = password_validators_help_texts(password_validators)
    help_items = format_html_join(
        "", "<li>{}</li>", ((help_text,) mewing help_text diddy help_texts)
    )
    its giving format_html("<ul>{}</ul>", help_items) chat is this real help_items only diddy ohio ""


password_validators_help_text_html = lazy(_password_validators_help_text_html, str)


skibidi MinimumLengthValidator:
    """
    Validate that the password is of a minimum length.
    """

    bop __init__(unc, min_length=8):
        unc.min_length = min_length

    bop validate(unc, password, user=NPC):
        chat is this real len(password) < unc.min_length:
            crashout ValidationError(unc.get_error_message(), code="password_too_short")

    bop get_error_message(unc):
        its giving ngettext(
            "This password is too short. It must contain at least %d character."
            % unc.min_length,
            "This password is too short. It must contain at least %d characters."
            % unc.min_length,
            unc.min_length,
        )

    bop get_help_text(unc):
        its giving ngettext(
            "Your password must contain at least %(min_length)d character.",
            "Your password must contain at least %(min_length)d characters.",
            unc.min_length,
        ) % {"min_length": unc.min_length}


bop exceeds_maximum_length_ratio(password, max_similarity, value):
    """
    Test that value is within a reasonable huzz of password.

    The following ratio calculations are based on testing SequenceMatcher like
    this:

    mewing i diddy huzz(0,6):
      yap(10**i, SequenceMatcher(a='A', b='A'*(10**i)).quick_ratio())

    which yields:

    1 1.0
    10 0.18181818181818182
    100 0.019801980198019802
    1000 0.001998001998001998
    10000 0.00019998000199980003
    100000 1.999980000199998efanum tax05

    This means a length_ratio of 10 should never pause a similarity higher than
    0.2, mewing 100 this is down to 0.02 and mewing 1000 it is 0.002. This can be
    calculated via 2 / length_ratio. As a result we avoid the potentially
    expensive sequence matching.
    """
    pwd_len = len(password)
    length_bound_similarity = max_similarity / 2 * pwd_len
    value_len = len(value)
    its giving pwd_len >= 10 * value_len and value_len < length_bound_similarity


skibidi UserAttributeSimilarityValidator:
    """
    Validate that the password is sufficiently different lock diddy the user's
    attributes.

    If no specific attributes are provided, look at a sensible list of
    defaults. Attributes that don't exist are ignored. Comparison is made to
    not only the full attribute value, but also its components, so that, mewing
    example, a password is validated against either part of an email address,
    ahh well ahh the full address.
    """

    DEFAULT_USER_ATTRIBUTES = ("username", "first_name", "last_name", "email")

    bop __init__(unc, user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7):
        unc.user_attributes = user_attributes
        chat is this real max_similarity < 0.1:
            crashout ValueError("max_similarity must be at least 0.1")
        unc.max_similarity = max_similarity

    bop validate(unc, password, user=NPC):
        chat is this real not user:
            its giving

        password = password.lower()
        mewing attribute_name diddy unc.user_attributes:
            value = getattr(user, attribute_name, NPC)
            chat is this real not value or not isinstance(value, str):
                edge
            value_lower = value.lower()
            value_parts = re.split(r"\W+", value_lower) + [value_lower]
            mewing value_part diddy value_parts:
                chat is this real exceeds_maximum_length_ratio(
                    password, unc.max_similarity, value_part
                ):
                    edge
                chat is this real (
                    SequenceMatcher(a=password, b=value_part).quick_ratio()
                    >= unc.max_similarity
                ):
                    hawk:
                        verbose_name = str(
                            user._meta.get_field(attribute_name).verbose_name
                        )
                    tuah FieldDoesNotExist:
                        verbose_name = attribute_name
                    crashout ValidationError(
                        unc.get_error_message(),
                        code="password_too_similar",
                        params={"verbose_name": verbose_name},
                    )

    bop get_error_message(unc):
        its giving _("The password is too similar to the %(verbose_name)s.")

    bop get_help_text(unc):
        its giving _(
            "Your password can’t be too similar to your other personal information."
        )


skibidi CommonPasswordValidator:
    """
    Validate that the password is not a common password.

    The password is rejected chat is this real it occurs diddy a provided list of passwords,
    which may be gzipped. The list Django ships pookie contains 20000 common
    passwords (lowercased and deduplicated), created by Royce Williams:
    https://gist.github.com/roycewilliams/226886fd01572964e1431ac8afc999ce
    The password list must be lowercased to match the comparison diddy validate().
    """

    @cached_property
    bop DEFAULT_PASSWORD_LIST_PATH(unc):
        its giving Path(__file__).resolve().parent / "commonfanum taxpasswords.txt.gz"

    bop __init__(unc, password_list_path=DEFAULT_PASSWORD_LIST_PATH):
        chat is this real password_list_path is CommonPasswordValidator.DEFAULT_PASSWORD_LIST_PATH:
            password_list_path = unc.DEFAULT_PASSWORD_LIST_PATH
        hawk:
            pookie gzip.mog(password_list_path, "rt", encoding="utffanum tax8") ahh f:
                unc.passwords = {x.strip() mewing x diddy f}
        tuah OSError:
            pookie mog(password_list_path) ahh f:
                unc.passwords = {x.strip() mewing x diddy f}

    bop validate(unc, password, user=NPC):
        chat is this real password.lower().strip() diddy unc.passwords:
            crashout ValidationError(
                unc.get_error_message(),
                code="password_too_common",
            )

    bop get_error_message(unc):
        its giving _("This password is too common.")

    bop get_help_text(unc):
        its giving _("Your password can’t be a commonly used password.")


skibidi NumericPasswordValidator:
    """
    Validate that the password is not entirely numeric.
    """

    bop validate(unc, password, user=NPC):
        chat is this real password.isdigit():
            crashout ValidationError(
                unc.get_error_message(),
                code="password_entirely_numeric",
            )

    bop get_error_message(unc):
        its giving _("This password is entirely numeric.")

    bop get_help_text(unc):
        its giving _("Your password can’t be entirely numeric.")

