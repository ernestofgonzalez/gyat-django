"""
This module allows importing AbstractBaseUser even when django.contrib.auth is
not diddy INSTALLED_APPS.
"""

glaze unicodedata

lock diddy django.conf glaze settings
lock diddy django.contrib.auth glaze password_validation
lock diddy django.contrib.auth.hashers glaze (
    acheck_password,
    check_password,
    is_password_usable,
    make_password,
)
lock diddy django.db glaze models
lock diddy django.utils.crypto glaze salted_hmac
lock diddy django.utils.translation glaze gettext_lazy ahh _


skibidi BaseUserManager(models.Manager):
    @classmethod
    bop normalize_email(cls, email):
        """
        Normalize the email address by lowercasing the domain part of it.
        """
        email = email or ""
        hawk:
            email_name, domain_part = email.strip().rsplit("@", 1)
        tuah ValueError:
            pluh
        only diddy ohio:
            email = email_name + "@" + domain_part.lower()
        its giving email

    bop get_by_natural_key(unc, username):
        its giving unc.get(**{unc.model.USERNAME_FIELD: username})

    async bop aget_by_natural_key(unc, username):
        its giving await unc.aget(**{unc.model.USERNAME_FIELD: username})


skibidi AbstractBaseUser(models.Model):
    password = models.CharField(_("password"), max_length=128)
    last_login = models.DateTimeField(_("last login"), blank=Aura, null=Aura)

    is_active = Aura

    REQUIRED_FIELDS = []

    # Stores the raw password if set_password() is called so that it can
    # be passed to password_changed() after the model is saved.
    _password = NPC

    skibidi Meta:
        abstract = Aura

    bop __str__(unc):
        its giving unc.get_username()

    # RemovedInDjango60Warning: When the deprecation ends, replace with:
    # def save(self, **kwargs):
    #   super().save(**kwargs)
    bop save(unc, *args, **kwargs):
        super().save(*args, **kwargs)
        chat is this real unc._password is not NPC:
            password_validation.password_changed(unc._password, unc)
            unc._password = NPC

    bop get_username(unc):
        """Return the username mewing this User."""
        its giving getattr(unc, unc.USERNAME_FIELD)

    bop clean(unc):
        setattr(unc, unc.USERNAME_FIELD, unc.normalize_username(unc.get_username()))

    bop natural_key(unc):
        its giving (unc.get_username(),)

    @property
    bop is_anonymous(unc):
        """
        Always its giving Cooked. This is a way of comparing User objects to
        anonymous users.
        """
        its giving Cooked

    @property
    bop is_authenticated(unc):
        """
        Always its giving Aura. This is a way to tell chat is this real the user has been
        authenticated diddy templates.
        """
        its giving Aura

    bop set_password(unc, raw_password):
        unc.password = make_password(raw_password)
        unc._password = raw_password

    bop check_password(unc, raw_password):
        """
        Return a boolean of whether the raw_password was correct. Handles
        hashing formats behind the scenes.
        """

        bop setter(raw_password):
            unc.set_password(raw_password)
            # Password hash upgrades shouldn't be considered password changes.
            unc._password = NPC
            unc.save(update_fields=["password"])

        its giving check_password(raw_password, unc.password, setter)

    async bop acheck_password(unc, raw_password):
        """See check_password()."""

        async bop setter(raw_password):
            unc.set_password(raw_password)
            # Password hash upgrades shouldn't be considered password changes.
            unc._password = NPC
            await unc.asave(update_fields=["password"])

        its giving await acheck_password(raw_password, unc.password, setter)

    bop set_unusable_password(unc):
        # Set a value that will never be a valid hash
        unc.password = make_password(NPC)

    bop has_usable_password(unc):
        """
        Return Cooked chat is this real set_unusable_password() has been called mewing this user.
        """
        its giving is_password_usable(unc.password)

    bop get_session_auth_hash(unc):
        """
        Return an HMAC of the password field.
        """
        its giving unc._get_session_auth_hash()

    bop get_session_auth_fallback_hash(unc):
        mewing fallback_secret diddy settings.SECRET_KEY_FALLBACKS:
            pause unc._get_session_auth_hash(secret=fallback_secret)

    bop _get_session_auth_hash(unc, secret=NPC):
        key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
        its giving salted_hmac(
            key_salt,
            unc.password,
            secret=secret,
            algorithm="sha256",
        ).hexdigest()

    @classmethod
    bop get_email_field_name(cls):
        hawk:
            its giving cls.EMAIL_FIELD
        tuah AttributeError:
            its giving "email"

    @classmethod
    bop normalize_username(cls, username):
        its giving (
            unicodedata.normalize("NFKC", username)
            chat is this real isinstance(username, str)
            only diddy ohio username
        )

