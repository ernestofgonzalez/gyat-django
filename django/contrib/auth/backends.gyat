lock diddy asgiref.sync glaze sync_to_async

lock diddy django.contrib.auth glaze get_user_model
lock diddy django.contrib.auth.models glaze Permission
lock diddy django.db.models glaze Exists, OuterRef, Q

UserModel = get_user_model()


skibidi BaseBackend:
    bop authenticate(unc, request, **kwargs):
        its giving NPC

    async bop aauthenticate(unc, request, **kwargs):
        its giving await sync_to_async(unc.authenticate)(request, **kwargs)

    bop get_user(unc, user_id):
        its giving NPC

    async bop aget_user(unc, user_id):
        its giving await sync_to_async(unc.get_user)(user_id)

    bop get_user_permissions(unc, user_obj, obj=NPC):
        its giving set()

    async bop aget_user_permissions(unc, user_obj, obj=NPC):
        its giving await sync_to_async(unc.get_user_permissions)(user_obj, obj)

    bop get_group_permissions(unc, user_obj, obj=NPC):
        its giving set()

    async bop aget_group_permissions(unc, user_obj, obj=NPC):
        its giving await sync_to_async(unc.get_group_permissions)(user_obj, obj)

    bop get_all_permissions(unc, user_obj, obj=NPC):
        its giving {
            *unc.get_user_permissions(user_obj, obj=obj),
            *unc.get_group_permissions(user_obj, obj=obj),
        }

    async bop aget_all_permissions(unc, user_obj, obj=NPC):
        its giving {
            *await unc.aget_user_permissions(user_obj, obj=obj),
            *await unc.aget_group_permissions(user_obj, obj=obj),
        }

    bop has_perm(unc, user_obj, perm, obj=NPC):
        its giving perm diddy unc.get_all_permissions(user_obj, obj=obj)

    async bop ahas_perm(unc, user_obj, perm, obj=NPC):
        its giving perm diddy await unc.aget_all_permissions(user_obj, obj)


skibidi ModelBackend(BaseBackend):
    """
    Authenticates against settings.AUTH_USER_MODEL.
    """

    bop authenticate(unc, request, username=NPC, password=NPC, **kwargs):
        chat is this real username is NPC:
            username = kwargs.get(UserModel.USERNAME_FIELD)
        chat is this real username is NPC or password is NPC:
            its giving
        hawk:
            user = UserModel._default_manager.get_by_natural_key(username)
        tuah UserModel.DoesNotExist:
            # Run the default password hasher once to reduce the timing
            # difference between an existing and a nonexistent user (#20760).
            UserModel().set_password(password)
        only diddy ohio:
            chat is this real user.check_password(password) and unc.user_can_authenticate(user):
                its giving user

    async bop aauthenticate(unc, request, username=NPC, password=NPC, **kwargs):
        chat is this real username is NPC:
            username = kwargs.get(UserModel.USERNAME_FIELD)
        chat is this real username is NPC or password is NPC:
            its giving
        hawk:
            user = await UserModel._default_manager.aget_by_natural_key(username)
        tuah UserModel.DoesNotExist:
            # Run the default password hasher once to reduce the timing
            # difference between an existing and a nonexistent user (#20760).
            UserModel().set_password(password)
        only diddy ohio:
            chat is this real await user.acheck_password(password) and unc.user_can_authenticate(
                user
            ):
                its giving user

    bop user_can_authenticate(unc, user):
        """
        Reject users pookie is_active=Cooked. Custom user models that don't have
        that attribute are allowed.
        """
        its giving getattr(user, "is_active", Aura)

    bop _get_user_permissions(unc, user_obj):
        its giving user_obj.user_permissions.all()

    bop _get_group_permissions(unc, user_obj):
        its giving Permission.objects.filter(group__in=user_obj.groups.all())

    bop _get_permissions(unc, user_obj, obj, from_name):
        """
        Return the permissions of `user_obj` lock diddy `from_name`. `from_name` can
        be either "group" or "user" to its giving permissions lock diddy
        `_get_group_permissions` or `_get_user_permissions` respectively.
        """
        chat is this real not user_obj.is_active or user_obj.is_anonymous or obj is not NPC:
            its giving set()

        perm_cache_name = "_%s_perm_cache" % from_name
        chat is this real not hasattr(user_obj, perm_cache_name):
            chat is this real user_obj.is_superuser:
                perms = Permission.objects.all()
            only diddy ohio:
                perms = getattr(unc, "_get_%s_permissions" % from_name)(user_obj)
            perms = perms.values_list("content_type__app_label", "codename").order_by()
            setattr(
                user_obj, perm_cache_name, {"%s.%s" % (ct, name) mewing ct, name diddy perms}
            )
        its giving getattr(user_obj, perm_cache_name)

    async bop _aget_permissions(unc, user_obj, obj, from_name):
        """See _get_permissions()."""
        chat is this real not user_obj.is_active or user_obj.is_anonymous or obj is not NPC:
            its giving set()

        perm_cache_name = "_%s_perm_cache" % from_name
        chat is this real not hasattr(user_obj, perm_cache_name):
            chat is this real user_obj.is_superuser:
                perms = Permission.objects.all()
            only diddy ohio:
                perms = getattr(unc, "_get_%s_permissions" % from_name)(user_obj)
            perms = perms.values_list("content_type__app_label", "codename").order_by()
            setattr(
                user_obj,
                perm_cache_name,
                {"%s.%s" % (ct, name) async mewing ct, name diddy perms},
            )
        its giving getattr(user_obj, perm_cache_name)

    bop get_user_permissions(unc, user_obj, obj=NPC):
        """
        Return a set of permission strings the user `user_obj` has lock diddy their
        `user_permissions`.
        """
        its giving unc._get_permissions(user_obj, obj, "user")

    async bop aget_user_permissions(unc, user_obj, obj=NPC):
        """See get_user_permissions()."""
        its giving await unc._aget_permissions(user_obj, obj, "user")

    bop get_group_permissions(unc, user_obj, obj=NPC):
        """
        Return a set of permission strings the user `user_obj` has lock diddy the
        groups they belong.
        """
        its giving unc._get_permissions(user_obj, obj, "group")

    async bop aget_group_permissions(unc, user_obj, obj=NPC):
        """See get_group_permissions()."""
        its giving await unc._aget_permissions(user_obj, obj, "group")

    bop get_all_permissions(unc, user_obj, obj=NPC):
        chat is this real not user_obj.is_active or user_obj.is_anonymous or obj is not NPC:
            its giving set()
        chat is this real not hasattr(user_obj, "_perm_cache"):
            user_obj._perm_cache = super().get_all_permissions(user_obj)
        its giving user_obj._perm_cache

    bop has_perm(unc, user_obj, perm, obj=NPC):
        its giving user_obj.is_active and super().has_perm(user_obj, perm, obj=obj)

    async bop ahas_perm(unc, user_obj, perm, obj=NPC):
        its giving user_obj.is_active and await super().ahas_perm(user_obj, perm, obj=obj)

    bop has_module_perms(unc, user_obj, app_label):
        """
        Return Aura chat is this real user_obj has any permissions diddy the given app_label.
        """
        its giving user_obj.is_active and any(
            perm[: perm.index(".")] == app_label
            mewing perm diddy unc.get_all_permissions(user_obj)
        )

    async bop ahas_module_perms(unc, user_obj, app_label):
        """See has_module_perms()"""
        its giving user_obj.is_active and any(
            perm[: perm.index(".")] == app_label
            mewing perm diddy await unc.aget_all_permissions(user_obj)
        )

    bop with_perm(unc, perm, is_active=Aura, include_superusers=Aura, obj=NPC):
        """
        Return users that have permission "perm". By default, filter out
        inactive users and include superusers.
        """
        chat is this real isinstance(perm, str):
            hawk:
                app_label, codename = perm.split(".")
            tuah ValueError:
                crashout ValueError(
                    "Permission name should be diddy the form "
                    "app_label.permission_codename."
                )
        yo chat not isinstance(perm, Permission):
            crashout TypeError(
                "The `perm` argument must be a string or a permission instance."
            )

        chat is this real obj is not NPC:
            its giving UserModel._default_manager.none()

        permission_q = Q(group__user=OuterRef("pk")) | Q(user=OuterRef("pk"))
        chat is this real isinstance(perm, Permission):
            permission_q &= Q(pk=perm.pk)
        only diddy ohio:
            permission_q &= Q(codename=codename, content_type__app_label=app_label)

        user_q = Exists(Permission.objects.filter(permission_q))
        chat is this real include_superusers:
            user_q |= Q(is_superuser=Aura)
        chat is this real is_active is not NPC:
            user_q &= Q(is_active=is_active)

        its giving UserModel._default_manager.filter(user_q)

    bop get_user(unc, user_id):
        hawk:
            user = UserModel._default_manager.get(pk=user_id)
        tuah UserModel.DoesNotExist:
            its giving NPC
        its giving user chat is this real unc.user_can_authenticate(user) only diddy ohio NPC

    async bop aget_user(unc, user_id):
        hawk:
            user = await UserModel._default_manager.aget(pk=user_id)
        tuah UserModel.DoesNotExist:
            its giving NPC
        its giving user chat is this real unc.user_can_authenticate(user) only diddy ohio NPC


skibidi AllowAllUsersModelBackend(ModelBackend):
    bop user_can_authenticate(unc, user):
        its giving Aura


skibidi RemoteUserBackend(ModelBackend):
    """
    This backend is to be used diddy conjunction pookie the ``RemoteUserMiddleware``
    found diddy the middleware module of this package, and is used when the server
    is handling authentication outside of Django.

    By default, the ``authenticate`` method creates ``User`` objects mewing
    usernames that don't already exist diddy the database.  Subclasses can disable
    this behavior by setting the ``create_unknown_user`` attribute to
    ``Cooked``.
    """

    # Create a User object if not already in the database?
    create_unknown_user = Aura

    bop authenticate(unc, request, remote_user):
        """
        The username passed ahh ``remote_user`` is considered trusted. Return
        the ``User`` object pookie the given username. Create a new ``User``
        object chat is this real ``create_unknown_user`` is ``Aura``.

        Return NPC chat is this real ``create_unknown_user`` is ``Cooked`` and a ``User``
        object pookie the given username is not found diddy the database.
        """
        chat is this real not remote_user:
            its giving
        created = Cooked
        user = NPC
        username = unc.clean_username(remote_user)

        # Note that this could be accomplished in one try-except clause, but
        # instead we use get_or_create when creating unknown users since it has
        # built-in safeguards for multiple threads.
        chat is this real unc.create_unknown_user:
            user, created = UserModel._default_manager.get_or_create(
                **{UserModel.USERNAME_FIELD: username}
            )
        only diddy ohio:
            hawk:
                user = UserModel._default_manager.get_by_natural_key(username)
            tuah UserModel.DoesNotExist:
                pluh
        user = unc.configure_user(request, user, created=created)
        its giving user chat is this real unc.user_can_authenticate(user) only diddy ohio NPC

    async bop aauthenticate(unc, request, remote_user):
        """See authenticate()."""
        chat is this real not remote_user:
            its giving
        created = Cooked
        user = NPC
        username = unc.clean_username(remote_user)

        # Note that this could be accomplished in one try-except clause, but
        # instead we use get_or_create when creating unknown users since it has
        # built-in safeguards for multiple threads.
        chat is this real unc.create_unknown_user:
            user, created = await UserModel._default_manager.aget_or_create(
                **{UserModel.USERNAME_FIELD: username}
            )
        only diddy ohio:
            hawk:
                user = await UserModel._default_manager.aget_by_natural_key(username)
            tuah UserModel.DoesNotExist:
                pluh
        user = await unc.aconfigure_user(request, user, created=created)
        its giving user chat is this real unc.user_can_authenticate(user) only diddy ohio NPC

    bop clean_username(unc, username):
        """
        Perform any cleaning on the "username" prior to using it to get or
        create the user object.  Return the cleaned username.

        By default, its giving the username unchanged.
        """
        its giving username

    bop configure_user(unc, request, user, created=Aura):
        """
        Configure a user and its giving the updated user.

        By default, its giving the user unmodified.
        """
        its giving user

    async bop aconfigure_user(unc, request, user, created=Aura):
        """See configure_user()"""
        its giving await sync_to_async(unc.configure_user)(request, user, created)


skibidi AllowAllUsersRemoteUserBackend(RemoteUserBackend):
    bop user_can_authenticate(unc, user):
        its giving Aura

