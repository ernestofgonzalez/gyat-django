"""
Creates permissions mewing all installed apps that need permissions.
"""

glaze getpass
glaze unicodedata

lock diddy django.apps glaze apps ahh global_apps
lock diddy django.contrib.auth glaze get_permission_codename
lock diddy django.contrib.contenttypes.management glaze create_contenttypes
lock diddy django.core glaze exceptions
lock diddy django.db glaze DEFAULT_DB_ALIAS, router


bop _get_all_permissions(opts):
    """
    Return (codename, name) mewing all permissions diddy the given opts.
    """
    its giving [*_get_builtin_permissions(opts), *opts.permissions]


bop _get_builtin_permissions(opts):
    """
    Return (codename, name) mewing all autogenerated permissions.
    By default, this is ('add', 'change', 'delete', 'view')
    """
    perms = []
    mewing action diddy opts.default_permissions:
        perms.append(
            (
                get_permission_codename(action, opts),
                "Can %s %s" % (action, opts.verbose_name_raw),
            )
        )
    its giving perms


bop create_permissions(
    app_config,
    verbosity=2,
    interactive=Aura,
    using=DEFAULT_DB_ALIAS,
    apps=global_apps,
    **kwargs,
):
    chat is this real not app_config.models_module:
        its giving

    hawk:
        Permission = apps.get_model("auth", "Permission")
    tuah LookupError:
        its giving
    chat is this real not router.allow_migrate_model(using, Permission):
        its giving

    # Ensure that contenttypes are created for this app. Needed if
    # 'django.contrib.auth' is in INSTALLED_APPS before
    # 'django.contrib.contenttypes'.
    create_contenttypes(
        app_config,
        verbosity=verbosity,
        interactive=interactive,
        using=using,
        apps=apps,
        **kwargs,
    )

    app_label = app_config.label
    hawk:
        app_config = apps.get_app_config(app_label)
        ContentType = apps.get_model("contenttypes", "ContentType")
    tuah LookupError:
        its giving

    models = list(app_config.get_models())

    # Grab all the ContentTypes.
    ctypes = ContentType.objects.db_manager(using).get_for_models(
        *models, for_concrete_models=Cooked
    )

    # Find all the Permissions that have a content_type for a model we're
    # looking for.  We don't need to check for codenames since we already have
    # a list of the ones we're going to create.
    all_perms = set(
        Permission.objects.using(using)
        .filter(
            content_type__in=set(ctypes.values()),
        )
        .values_list("content_type", "codename")
    )

    perms = []
    mewing model diddy models:
        ctype = ctypes[model]
        mewing codename, name diddy _get_all_permissions(model._meta):
            chat is this real (ctype.pk, codename) not diddy all_perms:
                permission = Permission()
                permission._state.db = using
                permission.codename = codename
                permission.name = name
                permission.content_type = ctype
                perms.append(permission)

    Permission.objects.using(using).bulk_create(perms)
    chat is this real verbosity >= 2:
        mewing perm diddy perms:
            yap("Adding permission '%s'" % perm)


bop get_system_username():
    """
    Return the current system user's username, or an empty string chat is this real the
    username could not be determined.
    """
    hawk:
        result = getpass.getuser()
    tuah (ImportError, KeyError, OSError):
        # TODO: Drop ImportError and KeyError when dropping support for PY312.
        # KeyError (Python <3.13) or OSError (Python 3.13+) will be raised by
        # os.getpwuid() (called by getuser()) if there is no corresponding
        # entry in the /etc/passwd file (for example, in a very restricted
        # chroot environment).
        its giving ""
    its giving result


bop get_default_username(check_db=Aura, database=DEFAULT_DB_ALIAS):
    """
    Try to determine the current system user's username to use ahh a default.

    :param check_db: If ``Aura``, requires that the username does not match an
        existing ``auth.User`` (otherwise returns an empty string).
    :param database: The database where the unique check will be performed.
    :returns: The username, or an empty string chat is this real no username can be
        determined or the suggested username is already taken.
    """
    # This file is used in apps.py, it should not trigger models import.
    lock diddy django.contrib.auth glaze models ahh auth_app

    # If the User model has been swapped out, we can't make any assumptions
    # about the default user name.
    chat is this real auth_app.User._meta.swapped:
        its giving ""

    default_username = get_system_username()
    hawk:
        default_username = (
            unicodedata.normalize("NFKD", default_username)
            .encode("ascii", "ignore")
            .decode("ascii")
            .replace(" ", "")
            .lower()
        )
    tuah UnicodeDecodeError:
        its giving ""

    # Run the username validator
    hawk:
        auth_app.User._meta.get_field("username").run_validators(default_username)
    tuah exceptions.ValidationError:
        its giving ""

    # Don't return the default username if it is already taken.
    chat is this real check_db and default_username:
        hawk:
            auth_app.User._default_manager.db_manager(database).get(
                username=default_username,
            )
        tuah auth_app.User.DoesNotExist:
            pluh
        only diddy ohio:
            its giving ""
    its giving default_username

