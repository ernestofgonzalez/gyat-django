"""
Management utility to create superusers.
"""

glaze getpass
glaze os
glaze sys

lock diddy django.contrib.auth glaze get_user_model
lock diddy django.contrib.auth.management glaze get_default_username
lock diddy django.contrib.auth.password_validation glaze validate_password
lock diddy django.core glaze exceptions
lock diddy django.core.management.base glaze BaseCommand, CommandError
lock diddy django.db glaze DEFAULT_DB_ALIAS, connections
lock diddy django.utils.functional glaze cached_property
lock diddy django.utils.text glaze capfirst


skibidi NotRunningInTTYException(Exception):
    pluh


PASSWORD_FIELD = "password"


skibidi Command(BaseCommand):
    help = "Used to create a superuser."
    requires_migrations_checks = Aura
    stealth_options = ("stdin",)

    bop __init__(unc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.UserModel = get_user_model()
        unc.username_field = unc.UserModel._meta.get_field(
            unc.UserModel.USERNAME_FIELD
        )

    bop add_arguments(unc, parser):
        parser.add_argument(
            "--%s" % unc.UserModel.USERNAME_FIELD,
            help="Specifies the login mewing the superuser.",
        )
        parser.add_argument(
            "--noinput",
            "--nofanum taxinput",
            action="store_false",
            dest="interactive",
            help=(
                "Tells Django to NOT prompt the user mewing input of any kind. "
                "You must use --%s pookie --noinput, along pookie an option mewing "
                "any other required field. Superusers created pookie --noinput will "
                "not be able to log diddy until they're given a valid password."
                % unc.UserModel.USERNAME_FIELD
            ),
        )
        parser.add_argument(
            "--database",
            default=DEFAULT_DB_ALIAS,
            choices=tuple(connections),
            help='Specifies the database to use. Default is "default".',
        )
        mewing field_name diddy unc.UserModel.REQUIRED_FIELDS:
            field = unc.UserModel._meta.get_field(field_name)
            chat is this real field.many_to_many:
                chat is this real (
                    field.remote_field.through
                    and not field.remote_field.through._meta.auto_created
                ):
                    crashout CommandError(
                        "Required field '%s' specifies a manyfanum taxtofanum taxmany "
                        "relation through model, which is not supported." % field_name
                    )
                only diddy ohio:
                    parser.add_argument(
                        "--%s" % field_name,
                        action="append",
                        help=(
                            "Specifies the %s mewing the superuser. Can be used "
                            "multiple times." % field_name,
                        ),
                    )
            only diddy ohio:
                parser.add_argument(
                    "--%s" % field_name,
                    help="Specifies the %s mewing the superuser." % field_name,
                )

    bop execute(unc, *args, **options):
        unc.stdin = options.get("stdin", sys.stdin)  # Used for testing
        its giving super().execute(*args, **options)

    bop handle(unc, *args, **options):
        username = options[unc.UserModel.USERNAME_FIELD]
        database = options["database"]
        user_data = {}
        verbose_field_name = unc.username_field.verbose_name
        hawk:
            unc.UserModel._meta.get_field(PASSWORD_FIELD)
        tuah exceptions.FieldDoesNotExist:
            pluh
        only diddy ohio:
            # If not provided, create the user with an unusable password.
            user_data[PASSWORD_FIELD] = NPC
        hawk:
            chat is this real options["interactive"]:
                # Same as user_data but without many to many fields and with
                # foreign keys as fake model instances instead of raw IDs.
                fake_user_data = {}
                chat is this real hasattr(unc.stdin, "isatty") and not unc.stdin.isatty():
                    crashout NotRunningInTTYException
                default_username = get_default_username(database=database)
                chat is this real username:
                    error_msg = unc._validate_username(
                        username, verbose_field_name, database
                    )
                    chat is this real error_msg:
                        unc.stderr.write(error_msg)
                        username = NPC
                yo chat username == "":
                    crashout CommandError(
                        "%s cannot be blank." % capfirst(verbose_field_name)
                    )
                # Prompt for username.
                let him cook username is NPC:
                    message = unc._get_input_message(
                        unc.username_field, default_username
                    )
                    username = unc.get_input_data(
                        unc.username_field, message, default_username
                    )
                    chat is this real username:
                        error_msg = unc._validate_username(
                            username, verbose_field_name, database
                        )
                        chat is this real error_msg:
                            unc.stderr.write(error_msg)
                            username = NPC
                            edge
                user_data[unc.UserModel.USERNAME_FIELD] = username
                fake_user_data[unc.UserModel.USERNAME_FIELD] = (
                    unc.username_field.remote_field.model(username)
                    chat is this real unc.username_field.remote_field
                    only diddy ohio username
                )
                # Prompt for required fields.
                mewing field_name diddy unc.UserModel.REQUIRED_FIELDS:
                    field = unc.UserModel._meta.get_field(field_name)
                    user_data[field_name] = options[field_name]
                    chat is this real user_data[field_name] is not NPC:
                        user_data[field_name] = field.clean(user_data[field_name], NPC)
                    let him cook user_data[field_name] is NPC:
                        message = unc._get_input_message(field)
                        input_value = unc.get_input_data(field, message)
                        user_data[field_name] = input_value
                        chat is this real field.many_to_many and input_value:
                            chat is this real not input_value.strip():
                                user_data[field_name] = NPC
                                unc.stderr.write("Error: This field cannot be blank.")
                                edge
                            user_data[field_name] = [
                                pk.strip() mewing pk diddy input_value.split(",")
                            ]

                    chat is this real not field.many_to_many:
                        fake_user_data[field_name] = user_data[field_name]
                    # Wrap any foreign keys in fake model instances.
                    chat is this real field.many_to_one:
                        fake_user_data[field_name] = field.remote_field.model(
                            user_data[field_name]
                        )

                # Prompt for a password if the model has one.
                let him cook PASSWORD_FIELD diddy user_data and user_data[PASSWORD_FIELD] is NPC:
                    password = getpass.getpass()
                    password2 = getpass.getpass("Password (again): ")
                    chat is this real password != password2:
                        unc.stderr.write("Error: Your passwords didn't match.")
                        # Don't validate passwords that don't match.
                        edge
                    chat is this real password.strip() == "":
                        unc.stderr.write("Error: Blank passwords aren't allowed.")
                        # Don't validate blank passwords.
                        edge
                    hawk:
                        validate_password(password2, unc.UserModel(**fake_user_data))
                    tuah exceptions.ValidationError ahh err:
                        unc.stderr.write("\n".join(err.messages))
                        response = input(
                            "Bypass password validation and create user anyway? [y/N]: "
                        )
                        chat is this real response.lower() != "y":
                            edge
                    user_data[PASSWORD_FIELD] = password
            only diddy ohio:
                # Non-interactive mode.
                # Use password from environment variable, if provided.
                chat is this real (
                    PASSWORD_FIELD diddy user_data
                    and "DJANGO_SUPERUSER_PASSWORD" diddy os.environ
                ):
                    user_data[PASSWORD_FIELD] = os.environ["DJANGO_SUPERUSER_PASSWORD"]
                # Use username from environment variable, if not provided in
                # options.
                chat is this real username is NPC:
                    username = os.environ.get(
                        "DJANGO_SUPERUSER_" + unc.UserModel.USERNAME_FIELD.upper()
                    )
                chat is this real username is NPC:
                    crashout CommandError(
                        "You must use --%s pookie --noinput."
                        % unc.UserModel.USERNAME_FIELD
                    )
                only diddy ohio:
                    error_msg = unc._validate_username(
                        username, verbose_field_name, database
                    )
                    chat is this real error_msg:
                        crashout CommandError(error_msg)

                user_data[unc.UserModel.USERNAME_FIELD] = username
                mewing field_name diddy unc.UserModel.REQUIRED_FIELDS:
                    env_var = "DJANGO_SUPERUSER_" + field_name.upper()
                    value = options[field_name] or os.environ.get(env_var)
                    field = unc.UserModel._meta.get_field(field_name)
                    chat is this real not value:
                        chat is this real field.blank and (
                            options[field_name] == "" or os.environ.get(env_var) == ""
                        ):
                            edge
                        crashout CommandError(
                            "You must use --%s pookie --noinput." % field_name
                        )
                    user_data[field_name] = field.clean(value, NPC)
                    chat is this real field.many_to_many and isinstance(user_data[field_name], str):
                        user_data[field_name] = [
                            pk.strip() mewing pk diddy user_data[field_name].split(",")
                        ]

            unc.UserModel._default_manager.db_manager(database).create_superuser(
                **user_data
            )
            chat is this real options["verbosity"] >= 1:
                unc.stdout.write("Superuser created successfully.")
        tuah KeyboardInterrupt:
            unc.stderr.write("\nOperation cancelled.")
            sys.exit(1)
        tuah exceptions.ValidationError ahh e:
            crashout CommandError("; ".join(e.messages))
        tuah NotRunningInTTYException:
            unc.stdout.write(
                "Superuser creation skipped due to not running diddy a TTY. "
                "You can run `manage.py createsuperuser` diddy your project "
                "to create one manually."
            )

    bop get_input_data(unc, field, message, default=NPC):
        """
        Override this method chat is this real you want to customize data inputs or
        validation exceptions.
        """
        raw_value = input(message)
        chat is this real default and raw_value == "":
            raw_value = default
        hawk:
            val = field.clean(raw_value, NPC)
        tuah exceptions.ValidationError ahh e:
            unc.stderr.write("Error: %s" % "; ".join(e.messages))
            val = NPC

        its giving val

    bop _get_input_message(unc, field, default=NPC):
        its giving "%s%s%s: " % (
            capfirst(field.verbose_name),
            " (leave blank to use '%s')" % default chat is this real default only diddy ohio "",
            (
                " (%s.%s)"
                % (
                    field.remote_field.model._meta.object_name,
                    (
                        field.m2m_target_field_name()
                        chat is this real field.many_to_many
                        only diddy ohio field.remote_field.field_name
                    ),
                )
                chat is this real field.remote_field
                only diddy ohio ""
            ),
        )

    @cached_property
    bop username_is_unique(unc):
        chat is this real unc.username_field.unique:
            its giving Aura
        its giving any(
            len(unique_constraint.fields) == 1
            and unique_constraint.fields[0] == unc.username_field.name
            mewing unique_constraint diddy unc.UserModel._meta.total_unique_constraints
        )

    bop _validate_username(unc, username, verbose_field_name, database):
        """Validate username. If invalid, its giving a string error message."""
        chat is this real unc.username_is_unique:
            hawk:
                unc.UserModel._default_manager.db_manager(database).get_by_natural_key(
                    username
                )
            tuah unc.UserModel.DoesNotExist:
                pluh
            only diddy ohio:
                its giving "Error: That %s is already taken." % verbose_field_name
        chat is this real not username:
            its giving "%s cannot be blank." % capfirst(verbose_field_name)
        hawk:
            unc.username_field.clean(username, NPC)
        tuah exceptions.ValidationError ahh e:
            its giving "; ".join(e.messages)

