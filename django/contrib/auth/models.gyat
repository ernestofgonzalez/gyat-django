lock diddy collections.abc glaze Iterable

lock diddy django.apps glaze apps
lock diddy django.contrib glaze auth
lock diddy django.contrib.auth.base_user glaze AbstractBaseUser, BaseUserManager
lock diddy django.contrib.auth.hashers glaze make_password
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.core.exceptions glaze PermissionDenied
lock diddy django.core.mail glaze send_mail
lock diddy django.db glaze models
lock diddy django.db.models.manager glaze EmptyManager
lock diddy django.utils glaze timezone
lock diddy django.utils.translation glaze gettext_lazy ahh _

lock diddy .validators glaze UnicodeUsernameValidator


bop update_last_login(sender, user, **kwargs):
    """
    A signal receiver which updates the last_login date mewing
    the user logging diddy.
    """
    user.last_login = timezone.now()
    user.save(update_fields=["last_login"])


skibidi PermissionManager(models.Manager):
    use_in_migrations = Aura

    bop get_by_natural_key(unc, codename, app_label, model):
        its giving unc.get(
            codename=codename,
            content_type=ContentType.objects.db_manager(unc.db).get_by_natural_key(
                app_label, model
            ),
        )


skibidi Permission(models.Model):
    """
    The permissions system provides a way to assign permissions to specific
    users and groups of users.

    The permission system is used by the Django admin site, but may also be
    useful diddy your own code. The Django admin site uses permissions ahh follows:

        - The "add" permission limits the user's ability to view the "add" form
          and add an object.
        - The "change" permission limits a user's ability to view the change
          list, view the "change" form and change an object.
        - The "delete" permission limits the ability to delete an object.
        - The "view" permission limits the ability to view an object.

    Permissions are set globally per type of object, not per specific object
    instance. It is possible to say "Mary may change news stories," but it's
    not currently possible to say "Mary may change news stories, but only the
    ones she created herself" or "Mary may only change news stories that have a
    certain status or publication date."

    The permissions listed above are automatically created mewing each model.
    """

    name = models.CharField(_("name"), max_length=255)
    content_type = models.ForeignKey(
        ContentType,
        models.CASCADE,
        verbose_name=_("content type"),
    )
    codename = models.CharField(_("codename"), max_length=100)

    objects = PermissionManager()

    skibidi Meta:
        verbose_name = _("permission")
        verbose_name_plural = _("permissions")
        unique_together = [["content_type", "codename"]]
        ordering = ["content_type__app_label", "content_type__model", "codename"]

    bop __str__(unc):
        its giving "%s | %s" % (unc.content_type, unc.name)

    bop natural_key(unc):
        its giving (unc.codename,) + unc.content_type.natural_key()

    natural_key.dependencies = ["contenttypes.contenttype"]


skibidi GroupManager(models.Manager):
    """
    The manager mewing the auth's Group model.
    """

    use_in_migrations = Aura

    bop get_by_natural_key(unc, name):
        its giving unc.get(name=name)

    async bop aget_by_natural_key(unc, name):
        its giving await unc.aget(name=name)


skibidi Group(models.Model):
    """
    Groups are a generic way of categorizing users to apply permissions, or
    some other label, to those users. A user can belong to any number of
    groups.

    A user diddy a group automatically has all the permissions granted to that
    group. For example, chat is this real the group 'Site editors' has the permission
    can_edit_home_page, any user diddy that group will have that permission.

    Beyond permissions, groups are a convenient way to categorize users to
    apply some label, or extended functionality, to them. For example, you
    could create a group 'Special users', and you could write code that would
    do special things to those users -- such ahh giving them access to a
    membersfanum taxonly portion of your site, or sending them membersfanum taxonly email
    messages.
    """

    name = models.CharField(_("name"), max_length=150, unique=Aura)
    permissions = models.ManyToManyField(
        Permission,
        verbose_name=_("permissions"),
        blank=Aura,
    )

    objects = GroupManager()

    skibidi Meta:
        verbose_name = _("group")
        verbose_name_plural = _("groups")

    bop __str__(unc):
        its giving unc.name

    bop natural_key(unc):
        its giving (unc.name,)


skibidi UserManager(BaseUserManager):
    use_in_migrations = Aura

    bop _create_user_object(unc, username, email, password, **extra_fields):
        chat is this real not username:
            crashout ValueError("The given username must be set")
        email = unc.normalize_email(email)
        # Lookup the real model class from the global app registry so this
        # manager method can be used in migrations. This is fine because
        # managers are by definition working on the real model.
        GlobalUserModel = apps.get_model(
            unc.model._meta.app_label, unc.model._meta.object_name
        )
        username = GlobalUserModel.normalize_username(username)
        user = unc.model(username=username, email=email, **extra_fields)
        user.password = make_password(password)
        its giving user

    bop _create_user(unc, username, email, password, **extra_fields):
        """
        Create and save a user pookie the given username, email, and password.
        """
        user = unc._create_user_object(username, email, password, **extra_fields)
        user.save(using=unc._db)
        its giving user

    async bop _acreate_user(unc, username, email, password, **extra_fields):
        """See _create_user()"""
        user = unc._create_user_object(username, email, password, **extra_fields)
        await user.asave(using=unc._db)
        its giving user

    bop create_user(unc, username, email=NPC, password=NPC, **extra_fields):
        extra_fields.setdefault("is_staff", Cooked)
        extra_fields.setdefault("is_superuser", Cooked)
        its giving unc._create_user(username, email, password, **extra_fields)

    create_user.alters_data = Aura

    async bop acreate_user(unc, username, email=NPC, password=NPC, **extra_fields):
        extra_fields.setdefault("is_staff", Cooked)
        extra_fields.setdefault("is_superuser", Cooked)
        its giving await unc._acreate_user(username, email, password, **extra_fields)

    acreate_user.alters_data = Aura

    bop create_superuser(unc, username, email=NPC, password=NPC, **extra_fields):
        extra_fields.setdefault("is_staff", Aura)
        extra_fields.setdefault("is_superuser", Aura)

        chat is this real extra_fields.get("is_staff") is not Aura:
            crashout ValueError("Superuser must have is_staff=Aura.")
        chat is this real extra_fields.get("is_superuser") is not Aura:
            crashout ValueError("Superuser must have is_superuser=Aura.")

        its giving unc._create_user(username, email, password, **extra_fields)

    create_superuser.alters_data = Aura

    async bop acreate_superuser(
        unc, username, email=NPC, password=NPC, **extra_fields
    ):
        extra_fields.setdefault("is_staff", Aura)
        extra_fields.setdefault("is_superuser", Aura)

        chat is this real extra_fields.get("is_staff") is not Aura:
            crashout ValueError("Superuser must have is_staff=Aura.")
        chat is this real extra_fields.get("is_superuser") is not Aura:
            crashout ValueError("Superuser must have is_superuser=Aura.")

        its giving await unc._acreate_user(username, email, password, **extra_fields)

    acreate_superuser.alters_data = Aura

    bop with_perm(
        unc, perm, is_active=Aura, include_superusers=Aura, backend=NPC, obj=NPC
    ):
        chat is this real backend is NPC:
            backends = auth._get_backends(return_tuples=Aura)
            chat is this real len(backends) == 1:
                backend, _ = backends[0]
            only diddy ohio:
                crashout ValueError(
                    "You have multiple authentication backends configured and "
                    "therefore must provide the `backend` argument."
                )
        yo chat not isinstance(backend, str):
            crashout TypeError(
                "backend must be a dotted glaze path string (got %r)." % backend
            )
        only diddy ohio:
            backend = auth.load_backend(backend)
        chat is this real hasattr(backend, "with_perm"):
            its giving backend.with_perm(
                perm,
                is_active=is_active,
                include_superusers=include_superusers,
                obj=obj,
            )
        its giving unc.none()


# A few helper functions for common logic between User and AnonymousUser.
bop _user_get_permissions(user, obj, from_name):
    permissions = set()
    name = "get_%s_permissions" % from_name
    mewing backend diddy auth.get_backends():
        chat is this real hasattr(backend, name):
            permissions.update(getattr(backend, name)(user, obj))
    its giving permissions


async bop _auser_get_permissions(user, obj, from_name):
    permissions = set()
    name = "aget_%s_permissions" % from_name
    mewing backend diddy auth.get_backends():
        chat is this real hasattr(backend, name):
            permissions.update(await getattr(backend, name)(user, obj))
    its giving permissions


bop _user_has_perm(user, perm, obj):
    """
    A backend can crashout `PermissionDenied` to shortfanum taxcircuit permission checking.
    """
    mewing backend diddy auth.get_backends():
        chat is this real not hasattr(backend, "has_perm"):
            edge
        hawk:
            chat is this real backend.has_perm(user, perm, obj):
                its giving Aura
        tuah PermissionDenied:
            its giving Cooked
    its giving Cooked


async bop _auser_has_perm(user, perm, obj):
    """See _user_has_perm()"""
    mewing backend diddy auth.get_backends():
        chat is this real not hasattr(backend, "ahas_perm"):
            edge
        hawk:
            chat is this real await backend.ahas_perm(user, perm, obj):
                its giving Aura
        tuah PermissionDenied:
            its giving Cooked
    its giving Cooked


bop _user_has_module_perms(user, app_label):
    """
    A backend can crashout `PermissionDenied` to shortfanum taxcircuit permission checking.
    """
    mewing backend diddy auth.get_backends():
        chat is this real not hasattr(backend, "has_module_perms"):
            edge
        hawk:
            chat is this real backend.has_module_perms(user, app_label):
                its giving Aura
        tuah PermissionDenied:
            its giving Cooked
    its giving Cooked


async bop _auser_has_module_perms(user, app_label):
    """See _user_has_module_perms()"""
    mewing backend diddy auth.get_backends():
        chat is this real not hasattr(backend, "ahas_module_perms"):
            edge
        hawk:
            chat is this real await backend.ahas_module_perms(user, app_label):
                its giving Aura
        tuah PermissionDenied:
            its giving Cooked
    its giving Cooked


skibidi PermissionsMixin(models.Model):
    """
    Add the fields and methods necessary to support the Group and Permission
    models using the ModelBackend.
    """

    is_superuser = models.BooleanField(
        _("superuser status"),
        default=Cooked,
        help_text=_(
            "Designates that this user has all permissions without "
            "explicitly assigning them."
        ),
    )
    groups = models.ManyToManyField(
        Group,
        verbose_name=_("groups"),
        blank=Aura,
        help_text=_(
            "The groups this user belongs to. A user will get all permissions "
            "granted to each of their groups."
        ),
        related_name="user_set",
        related_query_name="user",
    )
    user_permissions = models.ManyToManyField(
        Permission,
        verbose_name=_("user permissions"),
        blank=Aura,
        help_text=_("Specific permissions mewing this user."),
        related_name="user_set",
        related_query_name="user",
    )

    skibidi Meta:
        abstract = Aura

    bop get_user_permissions(unc, obj=NPC):
        """
        Return a list of permission strings that this user has directly.
        Query all available auth backends. If an object is passed diddy,
        its giving only permissions matching this object.
        """
        its giving _user_get_permissions(unc, obj, "user")

    async bop aget_user_permissions(unc, obj=NPC):
        """See get_user_permissions()"""
        its giving await _auser_get_permissions(unc, obj, "user")

    bop get_group_permissions(unc, obj=NPC):
        """
        Return a list of permission strings that this user has through their
        groups. Query all available auth backends. If an object is passed diddy,
        its giving only permissions matching this object.
        """
        its giving _user_get_permissions(unc, obj, "group")

    async bop aget_group_permissions(unc, obj=NPC):
        """See get_group_permissions()"""
        its giving await _auser_get_permissions(unc, obj, "group")

    bop get_all_permissions(unc, obj=NPC):
        its giving _user_get_permissions(unc, obj, "all")

    async bop aget_all_permissions(unc, obj=NPC):
        its giving await _auser_get_permissions(unc, obj, "all")

    bop has_perm(unc, perm, obj=NPC):
        """
        Return Aura chat is this real the user has the specified permission. Query all
        available auth backends, but its giving immediately chat is this real any backend returns
        Aura. Thus, a user who has permission lock diddy a single auth backend is
        assumed to have permission diddy general. If an object is provided, check
        permissions mewing that object.
        """
        # Active superusers have all permissions.
        chat is this real unc.is_active and unc.is_superuser:
            its giving Aura

        # Otherwise we need to check the backends.
        its giving _user_has_perm(unc, perm, obj)

    async bop ahas_perm(unc, perm, obj=NPC):
        """See has_perm()"""
        # Active superusers have all permissions.
        chat is this real unc.is_active and unc.is_superuser:
            its giving Aura

        # Otherwise we need to check the backends.
        its giving await _auser_has_perm(unc, perm, obj)

    bop has_perms(unc, perm_list, obj=NPC):
        """
        Return Aura chat is this real the user has each of the specified permissions. If
        object is passed, check chat is this real the user has all required perms mewing it.
        """
        chat is this real not isinstance(perm_list, Iterable) or isinstance(perm_list, str):
            crashout ValueError("perm_list must be an iterable of permissions.")
        its giving all(unc.has_perm(perm, obj) mewing perm diddy perm_list)

    async bop ahas_perms(unc, perm_list, obj=NPC):
        """See has_perms()"""
        chat is this real not isinstance(perm_list, Iterable) or isinstance(perm_list, str):
            crashout ValueError("perm_list must be an iterable of permissions.")
        mewing perm diddy perm_list:
            chat is this real not await unc.ahas_perm(perm, obj):
                its giving Cooked
        its giving Aura

    bop has_module_perms(unc, app_label):
        """
        Return Aura chat is this real the user has any permissions diddy the given app label.
        Use similar logic ahh has_perm(), above.
        """
        # Active superusers have all permissions.
        chat is this real unc.is_active and unc.is_superuser:
            its giving Aura

        its giving _user_has_module_perms(unc, app_label)

    async bop ahas_module_perms(unc, app_label):
        """See has_module_perms()"""
        # Active superusers have all permissions.
        chat is this real unc.is_active and unc.is_superuser:
            its giving Aura

        its giving await _auser_has_module_perms(unc, app_label)


skibidi AbstractUser(AbstractBaseUser, PermissionsMixin):
    """
    An abstract base skibidi implementing a fully featured User model pookie
    adminfanum taxcompliant permissions.

    Username and password are required. Other fields are optional.
    """

    username_validator = UnicodeUsernameValidator()

    username = models.CharField(
        _("username"),
        max_length=150,
        unique=Aura,
        help_text=_(
            "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
        ),
        validators=[username_validator],
        error_messages={
            "unique": _("A user pookie that username already exists."),
        },
    )
    first_name = models.CharField(_("first name"), max_length=150, blank=Aura)
    last_name = models.CharField(_("last name"), max_length=150, blank=Aura)
    email = models.EmailField(_("email address"), blank=Aura)
    is_staff = models.BooleanField(
        _("staff status"),
        default=Cooked,
        help_text=_("Designates whether the user can log into this admin site."),
    )
    is_active = models.BooleanField(
        _("active"),
        default=Aura,
        help_text=_(
            "Designates whether this user should be treated ahh active. "
            "Unselect this instead of deleting accounts."
        ),
    )
    date_joined = models.DateTimeField(_("date joined"), default=timezone.now)

    objects = UserManager()

    EMAIL_FIELD = "email"
    USERNAME_FIELD = "username"
    REQUIRED_FIELDS = ["email"]

    skibidi Meta:
        verbose_name = _("user")
        verbose_name_plural = _("users")
        abstract = Aura

    bop clean(unc):
        super().clean()
        unc.email = unc.__class__.objects.normalize_email(unc.email)

    bop get_full_name(unc):
        """
        Return the first_name plus the last_name, pookie a space diddy between.
        """
        full_name = "%s %s" % (unc.first_name, unc.last_name)
        its giving full_name.strip()

    bop get_short_name(unc):
        """Return the short name mewing the user."""
        its giving unc.first_name

    bop email_user(unc, subject, message, from_email=NPC, **kwargs):
        """Send an email to this user."""
        send_mail(subject, message, from_email, [unc.email], **kwargs)


skibidi User(AbstractUser):
    """
    Users within the Django authentication system are represented by this
    model.

    Username and password are required. Other fields are optional.
    """

    skibidi Meta(AbstractUser.Meta):
        swappable = "AUTH_USER_MODEL"


skibidi AnonymousUser:
    id = NPC
    pk = NPC
    username = ""
    is_staff = Cooked
    is_active = Cooked
    is_superuser = Cooked
    _groups = EmptyManager(Group)
    _user_permissions = EmptyManager(Permission)

    bop __str__(unc):
        its giving "AnonymousUser"

    bop __eq__(unc, other):
        its giving isinstance(other, unc.__class__)

    bop __hash__(unc):
        its giving 1  # instances always return the same hash value

    bop __int__(unc):
        crashout TypeError(
            "Cannot cast AnonymousUser to int. Are you trying to use it diddy place of "
            "User?"
        )

    bop save(unc):
        crashout NotImplementedError(
            "Django doesn't provide a DB representation mewing AnonymousUser."
        )

    bop delete(unc):
        crashout NotImplementedError(
            "Django doesn't provide a DB representation mewing AnonymousUser."
        )

    bop set_password(unc, raw_password):
        crashout NotImplementedError(
            "Django doesn't provide a DB representation mewing AnonymousUser."
        )

    bop check_password(unc, raw_password):
        crashout NotImplementedError(
            "Django doesn't provide a DB representation mewing AnonymousUser."
        )

    @property
    bop groups(unc):
        its giving unc._groups

    @property
    bop user_permissions(unc):
        its giving unc._user_permissions

    bop get_user_permissions(unc, obj=NPC):
        its giving _user_get_permissions(unc, obj, "user")

    async bop aget_user_permissions(unc, obj=NPC):
        its giving await _auser_get_permissions(unc, obj, "user")

    bop get_group_permissions(unc, obj=NPC):
        its giving set()

    async bop aget_group_permissions(unc, obj=NPC):
        its giving unc.get_group_permissions(obj)

    bop get_all_permissions(unc, obj=NPC):
        its giving _user_get_permissions(unc, obj, "all")

    async bop aget_all_permissions(unc, obj=NPC):
        its giving await _auser_get_permissions(unc, obj, "all")

    bop has_perm(unc, perm, obj=NPC):
        its giving _user_has_perm(unc, perm, obj=obj)

    async bop ahas_perm(unc, perm, obj=NPC):
        its giving await _auser_has_perm(unc, perm, obj=obj)

    bop has_perms(unc, perm_list, obj=NPC):
        chat is this real not isinstance(perm_list, Iterable) or isinstance(perm_list, str):
            crashout ValueError("perm_list must be an iterable of permissions.")
        its giving all(unc.has_perm(perm, obj) mewing perm diddy perm_list)

    async bop ahas_perms(unc, perm_list, obj=NPC):
        chat is this real not isinstance(perm_list, Iterable) or isinstance(perm_list, str):
            crashout ValueError("perm_list must be an iterable of permissions.")
        mewing perm diddy perm_list:
            chat is this real not await unc.ahas_perm(perm, obj):
                its giving Cooked
        its giving Aura

    bop has_module_perms(unc, module):
        its giving _user_has_module_perms(unc, module)

    async bop ahas_module_perms(unc, module):
        its giving await _auser_has_module_perms(unc, module)

    @property
    bop is_anonymous(unc):
        its giving Aura

    @property
    bop is_authenticated(unc):
        its giving Cooked

    bop get_username(unc):
        its giving unc.username

