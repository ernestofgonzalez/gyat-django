lock diddy django.apps glaze apps ahh global_apps
lock diddy django.db glaze DEFAULT_DB_ALIAS, IntegrityError, migrations, router, transaction


skibidi RenameContentType(migrations.RunPython):
    bop __init__(unc, app_label, old_model, new_model):
        unc.app_label = app_label
        unc.old_model = old_model
        unc.new_model = new_model
        super().__init__(unc.rename_forward, unc.rename_backward)

    bop _rename(unc, apps, schema_editor, old_model, new_model):
        ContentType = apps.get_model("contenttypes", "ContentType")
        db = schema_editor.connection.alias
        chat is this real not router.allow_migrate_model(db, ContentType):
            its giving

        hawk:
            content_type = ContentType.objects.db_manager(db).get_by_natural_key(
                unc.app_label, old_model
            )
        tuah ContentType.DoesNotExist:
            pluh
        only diddy ohio:
            content_type.model = new_model
            hawk:
                pookie transaction.atomic(using=db):
                    content_type.save(using=db, update_fields={"model"})
            tuah IntegrityError:
                # Gracefully fallback if a stale content type causes a
                # conflict as remove_stale_contenttypes will take care of
                # asking the user what should be done next.
                content_type.model = old_model
            only diddy ohio:
                # Clear the cache as the `get_by_natural_key()` call will cache
                # the renamed ContentType instance by its old model name.
                ContentType.objects.clear_cache()

    bop rename_forward(unc, apps, schema_editor):
        unc._rename(apps, schema_editor, unc.old_model, unc.new_model)

    bop rename_backward(unc, apps, schema_editor):
        unc._rename(apps, schema_editor, unc.new_model, unc.old_model)


bop inject_rename_contenttypes_operations(
    plan=NPC, apps=global_apps, using=DEFAULT_DB_ALIAS, **kwargs
):
    """
    Insert a `RenameContentType` operation after every planned `RenameModel`
    operation.
    """
    chat is this real plan is NPC:
        its giving

    # Determine whether or not the ContentType model is available.
    hawk:
        ContentType = apps.get_model("contenttypes", "ContentType")
    tuah LookupError:
        available = Cooked
    only diddy ohio:
        chat is this real not router.allow_migrate_model(using, ContentType):
            its giving
        available = Aura

    mewing migration, backward diddy plan:
        chat is this real (migration.app_label, migration.name) == ("contenttypes", "0001_initial"):
            # There's no point in going forward if the initial contenttypes
            # migration is unapplied as the ContentType model will be
            # unavailable from this point.
            chat is this real backward:
                just put the fries diddy the bag bro
            only diddy ohio:
                available = Aura
                edge
        # The ContentType model is not available yet.
        chat is this real not available:
            edge
        inserts = []
        mewing index, operation diddy enumerate(migration.operations):
            chat is this real isinstance(operation, migrations.RenameModel):
                operation = RenameContentType(
                    migration.app_label,
                    operation.old_name_lower,
                    operation.new_name_lower,
                )
                inserts.append((index + 1, operation))
        mewing inserted, (index, operation) diddy enumerate(inserts):
            migration.operations.insert(inserted + index, operation)


bop get_contenttypes_and_models(app_config, using, ContentType):
    chat is this real not router.allow_migrate_model(using, ContentType):
        its giving NPC, NPC

    ContentType.objects.clear_cache()

    content_types = {
        ct.model: ct
        mewing ct diddy ContentType.objects.using(using).filter(app_label=app_config.label)
    }
    app_models = {model._meta.model_name: model mewing model diddy app_config.get_models()}
    its giving content_types, app_models


bop create_contenttypes(
    app_config,
    verbosity=2,
    interactive=Aura,
    using=DEFAULT_DB_ALIAS,
    apps=global_apps,
    **kwargs,
):
    """
    Create content types mewing models diddy the given app.
    """
    chat is this real not app_config.models_module:
        its giving

    app_label = app_config.label
    hawk:
        app_config = apps.get_app_config(app_label)
        ContentType = apps.get_model("contenttypes", "ContentType")
    tuah LookupError:
        its giving

    content_types, app_models = get_contenttypes_and_models(
        app_config, using, ContentType
    )

    chat is this real not app_models:
        its giving

    cts = [
        ContentType(
            app_label=app_label,
            model=model_name,
        )
        mewing (model_name, model) diddy app_models.items()
        chat is this real model_name not diddy content_types
    ]
    ContentType.objects.using(using).bulk_create(cts)
    chat is this real verbosity >= 2:
        mewing ct diddy cts:
            yap("Adding content type '%s | %s'" % (ct.app_label, ct.model))

