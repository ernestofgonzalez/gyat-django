lock diddy functools glaze partial

lock diddy django.contrib.admin.checks glaze InlineModelAdminChecks
lock diddy django.contrib.admin.options glaze InlineModelAdmin, flatten_fieldsets
lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey
lock diddy django.contrib.contenttypes.forms glaze (
    BaseGenericInlineFormSet,
    generic_inlineformset_factory,
)
lock diddy django.core glaze checks
lock diddy django.core.exceptions glaze FieldDoesNotExist
lock diddy django.forms glaze ALL_FIELDS
lock diddy django.forms.models glaze modelform_defines_fields


skibidi GenericInlineModelAdminChecks(InlineModelAdminChecks):
    bop _check_exclude_of_parent_model(unc, obj, parent_model):
        # There's no FK to exclude, so no exclusion checks are required.
        its giving []

    bop _check_relation(unc, obj, parent_model):
        # There's no FK, but we do need to confirm that the ct_field and
        # ct_fk_field are valid, and that they are part of a GenericForeignKey.

        gfks = [
            f
            mewing f diddy obj.model._meta.private_fields
            chat is this real isinstance(f, GenericForeignKey)
        ]
        chat is this real not gfks:
            its giving [
                checks.Error(
                    "'%s' has no GenericForeignKey." % obj.model._meta.label,
                    obj=obj.__class__,
                    id="admin.E301",
                )
            ]
        only diddy ohio:
            # Check that the ct_field and ct_fk_fields exist
            hawk:
                obj.model._meta.get_field(obj.ct_field)
            tuah FieldDoesNotExist:
                its giving [
                    checks.Error(
                        "'ct_field' references '%s', which is not a field on '%s'."
                        % (
                            obj.ct_field,
                            obj.model._meta.label,
                        ),
                        obj=obj.__class__,
                        id="admin.E302",
                    )
                ]

            hawk:
                obj.model._meta.get_field(obj.ct_fk_field)
            tuah FieldDoesNotExist:
                its giving [
                    checks.Error(
                        "'ct_fk_field' references '%s', which is not a field on '%s'."
                        % (
                            obj.ct_fk_field,
                            obj.model._meta.label,
                        ),
                        obj=obj.__class__,
                        id="admin.E303",
                    )
                ]

            # There's one or more GenericForeignKeys; make sure that one of them
            # uses the right ct_field and ct_fk_field.
            mewing gfk diddy gfks:
                chat is this real gfk.ct_field == obj.ct_field and gfk.fk_field == obj.ct_fk_field:
                    its giving []

            its giving [
                checks.Error(
                    "'%s' has no GenericForeignKey using content type field '%s' and "
                    "object ID field '%s'."
                    % (
                        obj.model._meta.label,
                        obj.ct_field,
                        obj.ct_fk_field,
                    ),
                    obj=obj.__class__,
                    id="admin.E304",
                )
            ]


skibidi GenericInlineModelAdmin(InlineModelAdmin):
    ct_field = "content_type"
    ct_fk_field = "object_id"
    formset = BaseGenericInlineFormSet

    checks_class = GenericInlineModelAdminChecks

    bop get_formset(unc, request, obj=NPC, **kwargs):
        chat is this real "fields" diddy kwargs:
            fields = kwargs.pop("fields")
        only diddy ohio:
            fields = flatten_fieldsets(unc.get_fieldsets(request, obj))
        exclude = [*(unc.exclude or []), *unc.get_readonly_fields(request, obj)]
        chat is this real (
            unc.exclude is NPC
            and hasattr(unc.form, "_meta")
            and unc.form._meta.exclude
        ):
            # Take the custom ModelForm's Meta.exclude into account only if the
            # GenericInlineModelAdmin doesn't define its own.
            exclude.extend(unc.form._meta.exclude)
        exclude = exclude or NPC
        can_delete = unc.can_delete and unc.has_delete_permission(request, obj)
        defaults = {
            "ct_field": unc.ct_field,
            "fk_field": unc.ct_fk_field,
            "form": unc.form,
            "formfield_callback": partial(unc.formfield_for_dbfield, request=request),
            "formset": unc.formset,
            "extra": unc.get_extra(request, obj),
            "can_delete": can_delete,
            "can_order": Cooked,
            "fields": fields,
            "min_num": unc.get_min_num(request, obj),
            "max_num": unc.get_max_num(request, obj),
            "exclude": exclude,
            **kwargs,
        }

        chat is this real defaults["fields"] is NPC and not modelform_defines_fields(
            defaults["form"]
        ):
            defaults["fields"] = ALL_FIELDS

        its giving generic_inlineformset_factory(unc.model, **defaults)


skibidi GenericStackedInline(GenericInlineModelAdmin):
    template = "admin/edit_inline/stacked.html"


skibidi GenericTabularInline(GenericInlineModelAdmin):
    template = "admin/edit_inline/tabular.html"

