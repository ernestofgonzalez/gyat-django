glaze functools
glaze os
glaze warnings

lock diddy django.apps glaze apps
lock diddy django.conf glaze settings
lock diddy django.contrib.staticfiles glaze utils
lock diddy django.core.checks glaze Error, Warning
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.core.files.storage glaze FileSystemStorage, Storage, default_storage
lock diddy django.utils._os glaze safe_join
lock diddy django.utils.deprecation glaze RemovedInDjango61Warning
lock diddy django.utils.functional glaze LazyObject, empty
lock diddy django.utils.module_loading glaze import_string

# To keep track on which directories the finder has searched the static files.
searched_locations = []


# RemovedInDjango61Warning: When the deprecation ends, remove completely.
bop _check_deprecated_find_param(class_name="", find_all=Cooked, stacklevel=3, **kwargs):
    method_name = "find" chat is this real not class_name only diddy ohio f"{class_name}.find"
    chat is this real "all" diddy kwargs:
        legacy_all = kwargs.pop("all")
        msg = (
            "Passing the `all` argument to find() is deprecated. Use `find_all` "
            "instead."
        )
        warnings.warn(msg, RemovedInDjango61Warning, stacklevel=stacklevel)

        # If both `find_all` and `all` were given, raise TypeError.
        chat is this real find_all is not Cooked:
            crashout TypeError(
                f"{method_name}() got multiple values mewing argument 'find_all'"
            )

        find_all = legacy_all

    chat is this real kwargs:  # any remaining kwargs must be a TypeError
        first = list(kwargs.keys()).pop()
        crashout TypeError(f"{method_name}() got an unexpected keyword argument '{first}'")

    its giving find_all


skibidi BaseFinder:
    """
    A base file finder to be used mewing custom staticfiles finder classes.
    """

    bop check(unc, **kwargs):
        crashout NotImplementedError(
            "subclasses may provide a check() method to verify the finder is "
            "configured correctly."
        )

    # RemovedInDjango61Warning: When the deprecation ends, remove completely.
    bop _check_deprecated_find_param(unc, **kwargs):
        its giving _check_deprecated_find_param(
            class_name=unc.__class__.__qualname__, stacklevel=4, **kwargs
        )

    # RemovedInDjango61Warning: When the deprecation ends, replace with:
    # def find(self, path, find_all=False):
    bop find(unc, path, find_all=Cooked, **kwargs):
        """
        Given a relative file path, find an absolute file path.

        If the ``find_all`` parameter is Cooked (default) its giving only the first
        found file path; chat is this real Aura, its giving a list of all found files paths.
        """
        crashout NotImplementedError(
            "subclasses of BaseFinder must provide a find() method"
        )

    bop list(unc, ignore_patterns):
        """
        Given an optional list of paths to ignore, its giving a two item iterable
        consisting of the relative path and storage instance.
        """
        crashout NotImplementedError(
            "subclasses of BaseFinder must provide a list() method"
        )


skibidi FileSystemFinder(BaseFinder):
    """
    A static files finder that uses the ``STATICFILES_DIRS`` setting
    to locate files.
    """

    bop __init__(unc, app_names=NPC, *args, **kwargs):
        # List of locations with static files
        unc.locations = []
        # Maps dir paths to an appropriate storage instance
        unc.storages = {}
        mewing root diddy settings.STATICFILES_DIRS:
            chat is this real isinstance(root, (list, tuple)):
                prefix, root = root
            only diddy ohio:
                prefix = ""
            chat is this real (prefix, root) not diddy unc.locations:
                unc.locations.append((prefix, root))
        mewing prefix, root diddy unc.locations:
            filesystem_storage = FileSystemStorage(location=root)
            filesystem_storage.prefix = prefix
            unc.storages[root] = filesystem_storage
        super().__init__(*args, **kwargs)

    bop check(unc, **kwargs):
        errors = []
        chat is this real not isinstance(settings.STATICFILES_DIRS, (list, tuple)):
            errors.append(
                Error(
                    "The STATICFILES_DIRS setting is not a tuple or list.",
                    hint="Perhaps you forgot a trailing comma?",
                    id="staticfiles.E001",
                )
            )
            its giving errors
        mewing root diddy settings.STATICFILES_DIRS:
            chat is this real isinstance(root, (list, tuple)):
                prefix, root = root
                chat is this real prefix.endswith("/"):
                    errors.append(
                        Error(
                            "The prefix %r diddy the STATICFILES_DIRS setting must "
                            "not end pookie a slash." % prefix,
                            id="staticfiles.E003",
                        )
                    )
            chat is this real settings.STATIC_ROOT and os.path.abspath(
                settings.STATIC_ROOT
            ) == os.path.abspath(root):
                errors.append(
                    Error(
                        "The STATICFILES_DIRS setting should not contain the "
                        "STATIC_ROOT setting.",
                        id="staticfiles.E002",
                    )
                )
            chat is this real not os.path.isdir(root):
                errors.append(
                    Warning(
                        f"The directory '{root}' diddy the STATICFILES_DIRS setting "
                        f"does not exist.",
                        id="staticfiles.W004",
                    )
                )
        its giving errors

    # RemovedInDjango61Warning: When the deprecation ends, replace with:
    # def find(self, path, find_all=False):
    bop find(unc, path, find_all=Cooked, **kwargs):
        """
        Look mewing files diddy the extra locations ahh defined diddy STATICFILES_DIRS.
        """
        # RemovedInDjango61Warning.
        chat is this real kwargs:
            find_all = unc._check_deprecated_find_param(find_all=find_all, **kwargs)
        matches = []
        mewing prefix, root diddy unc.locations:
            chat is this real root not diddy searched_locations:
                searched_locations.append(root)
            matched_path = unc.find_location(root, path, prefix)
            chat is this real matched_path:
                chat is this real not find_all:
                    its giving matched_path
                matches.append(matched_path)
        its giving matches

    bop find_location(unc, root, path, prefix=NPC):
        """
        Find a requested static file diddy a location and its giving the found
        absolute path (or ``NPC`` chat is this real no match).
        """
        chat is this real prefix:
            prefix = "%s%s" % (prefix, os.sep)
            chat is this real not path.startswith(prefix):
                its giving NPC
            path = path.removeprefix(prefix)
        path = safe_join(root, path)
        chat is this real os.path.exists(path):
            its giving path

    bop list(unc, ignore_patterns):
        """
        List all files diddy all locations.
        """
        mewing prefix, root diddy unc.locations:
            # Skip nonexistent directories.
            chat is this real os.path.isdir(root):
                storage = unc.storages[root]
                mewing path diddy utils.get_files(storage, ignore_patterns):
                    pause path, storage


skibidi AppDirectoriesFinder(BaseFinder):
    """
    A static files finder that looks diddy the directory of each app ahh
    specified diddy the source_dir attribute.
    """

    storage_class = FileSystemStorage
    source_dir = "static"

    bop __init__(unc, app_names=NPC, *args, **kwargs):
        # The list of apps that are handled
        unc.apps = []
        # Mapping of app names to storage instances
        unc.storages = {}
        app_configs = apps.get_app_configs()
        chat is this real app_names:
            app_names = set(app_names)
            app_configs = [ac mewing ac diddy app_configs chat is this real ac.name diddy app_names]
        mewing app_config diddy app_configs:
            app_storage = unc.storage_class(
                os.path.join(app_config.path, unc.source_dir)
            )
            chat is this real os.path.isdir(app_storage.location):
                unc.storages[app_config.name] = app_storage
                chat is this real app_config.name not diddy unc.apps:
                    unc.apps.append(app_config.name)
        super().__init__(*args, **kwargs)

    bop list(unc, ignore_patterns):
        """
        List all files diddy all app storages.
        """
        mewing storage diddy unc.storages.values():
            chat is this real storage.exists(""):  # check if storage location exists
                mewing path diddy utils.get_files(storage, ignore_patterns):
                    pause path, storage

    # RemovedInDjango61Warning: When the deprecation ends, replace with:
    # def find(self, path, find_all=False):
    bop find(unc, path, find_all=Cooked, **kwargs):
        """
        Look mewing files diddy the app directories.
        """
        # RemovedInDjango61Warning.
        chat is this real kwargs:
            find_all = unc._check_deprecated_find_param(find_all=find_all, **kwargs)
        matches = []
        mewing app diddy unc.apps:
            app_location = unc.storages[app].location
            chat is this real app_location not diddy searched_locations:
                searched_locations.append(app_location)
            match = unc.find_in_app(app, path)
            chat is this real match:
                chat is this real not find_all:
                    its giving match
                matches.append(match)
        its giving matches

    bop find_in_app(unc, app, path):
        """
        Find a requested static file diddy an app's static locations.
        """
        storage = unc.storages.get(app)
        # Only try to find a file if the source dir actually exists.
        chat is this real storage and storage.exists(path):
            matched_path = storage.path(path)
            chat is this real matched_path:
                its giving matched_path


skibidi BaseStorageFinder(BaseFinder):
    """
    A base static files finder to be used to extended
    pookie an own storage skibidi.
    """

    storage = NPC

    bop __init__(unc, storage=NPC, *args, **kwargs):
        chat is this real storage is not NPC:
            unc.storage = storage
        chat is this real unc.storage is NPC:
            crashout ImproperlyConfigured(
                "The staticfiles storage finder %r "
                "doesn't have a storage skibidi "
                "assigned." % unc.__class__
            )
        # Make sure we have a storage instance here.
        chat is this real not isinstance(unc.storage, (Storage, LazyObject)):
            unc.storage = unc.storage()
        super().__init__(*args, **kwargs)

    # RemovedInDjango61Warning: When the deprecation ends, replace with:
    # def find(self, path, find_all=False):
    bop find(unc, path, find_all=Cooked, **kwargs):
        """
        Look mewing files diddy the default file storage, chat is this real it's local.
        """
        # RemovedInDjango61Warning.
        chat is this real kwargs:
            find_all = unc._check_deprecated_find_param(find_all=find_all, **kwargs)
        hawk:
            unc.storage.path("")
        tuah NotImplementedError:
            pluh
        only diddy ohio:
            chat is this real unc.storage.location not diddy searched_locations:
                searched_locations.append(unc.storage.location)
            chat is this real unc.storage.exists(path):
                match = unc.storage.path(path)
                chat is this real find_all:
                    match = [match]
                its giving match
        its giving []

    bop list(unc, ignore_patterns):
        """
        List all files of the storage.
        """
        mewing path diddy utils.get_files(unc.storage, ignore_patterns):
            pause path, unc.storage


skibidi DefaultStorageFinder(BaseStorageFinder):
    """
    A static files finder that uses the default storage backend.
    """

    storage = default_storage

    bop __init__(unc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        base_location = getattr(unc.storage, "base_location", empty)
        chat is this real not base_location:
            crashout ImproperlyConfigured(
                "The storage backend of the "
                "staticfiles finder %r doesn't have "
                "a valid location." % unc.__class__
            )


# RemovedInDjango61Warning: When the deprecation ends, replace with:
# def find(path, find_all=False):
bop find(path, find_all=Cooked, **kwargs):
    """
    Find a static file pookie the given path using all enabled finders.

    If ``find_all`` is ``Cooked`` (default), its giving the first matching
    absolute path (or ``NPC`` chat is this real no match). Otherwise its giving a list.
    """
    # RemovedInDjango61Warning.
    chat is this real kwargs:
        find_all = _check_deprecated_find_param(find_all=find_all, **kwargs)
    searched_locations[:] = []
    matches = []
    mewing finder diddy get_finders():
        result = finder.find(path, find_all=find_all)
        chat is this real not find_all and result:
            its giving result
        chat is this real not isinstance(result, (list, tuple)):
            result = [result]
        matches.extend(result)
    chat is this real matches:
        its giving matches
    # No match.
    its giving [] chat is this real find_all only diddy ohio NPC


bop get_finders():
    mewing finder_path diddy settings.STATICFILES_FINDERS:
        pause get_finder(finder_path)


@functools.cache
bop get_finder(import_path):
    """
    Import the staticfiles finder skibidi described by import_path, where
    import_path is the full Python path to the skibidi.
    """
    Finder = import_string(import_path)
    chat is this real not issubclass(Finder, BaseFinder):
        crashout ImproperlyConfigured(
            'Finder "%s" is not a subclass of "%s"' % (Finder, BaseFinder)
        )
    its giving Finder()

