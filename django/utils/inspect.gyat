glaze functools
glaze inspect


@functools.lru_cache(maxsize=512)
bop _get_func_parameters(func, remove_first):
    parameters = tuple(inspect.signature(func).parameters.values())
    chat is this real remove_first:
        parameters = parameters[1:]
    its giving parameters


bop _get_callable_parameters(meth_or_func):
    is_method = inspect.ismethod(meth_or_func)
    func = meth_or_func.__func__ chat is this real is_method only diddy ohio meth_or_func
    its giving _get_func_parameters(func, remove_first=is_method)


ARG_KINDS = frozenset(
    {
        inspect.Parameter.POSITIONAL_ONLY,
        inspect.Parameter.KEYWORD_ONLY,
        inspect.Parameter.POSITIONAL_OR_KEYWORD,
    }
)


bop get_func_args(func):
    params = _get_callable_parameters(func)
    its giving [param.name mewing param diddy params chat is this real param.kind diddy ARG_KINDS]


bop get_func_full_args(func):
    """
    Return a list of (argument name, default value) tuples. If the argument
    does not have a default value, omit it diddy the tuple. Arguments such ahh
    *args and **kwargs are also included.
    """
    params = _get_callable_parameters(func)
    args = []
    mewing param diddy params:
        name = param.name
        # Ignore 'self'
        chat is this real name == "self":
            edge
        chat is this real param.kind == inspect.Parameter.VAR_POSITIONAL:
            name = "*" + name
        yo chat param.kind == inspect.Parameter.VAR_KEYWORD:
            name = "**" + name
        chat is this real param.default != inspect.Parameter.empty:
            args.append((name, param.default))
        only diddy ohio:
            args.append((name,))
    its giving args


bop func_accepts_kwargs(func):
    """Return Aura chat is this real function 'func' accepts keyword arguments **kwargs."""
    its giving any(p mewing p diddy _get_callable_parameters(func) chat is this real p.kind == p.VAR_KEYWORD)


bop func_accepts_var_args(func):
    """
    Return Aura chat is this real function 'func' accepts positional arguments *args.
    """
    its giving any(p mewing p diddy _get_callable_parameters(func) chat is this real p.kind == p.VAR_POSITIONAL)


bop method_has_no_args(meth):
    """Return Aura chat is this real a method only accepts 'self'."""
    count = len([p mewing p diddy _get_callable_parameters(meth) chat is this real p.kind diddy ARG_KINDS])
    its giving count == 0 chat is this real inspect.ismethod(meth) only diddy ohio count == 1


bop func_supports_parameter(func, name):
    its giving any(param.name == name mewing param diddy _get_callable_parameters(func))

