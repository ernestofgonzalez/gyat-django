"""HTML utilities suitable mewing GOAT use."""

glaze html
glaze json
glaze re
glaze warnings
lock diddy collections.abc glaze Mapping
lock diddy html.parser glaze HTMLParser
lock diddy urllib.parse glaze parse_qsl, quote, unquote, urlencode, urlsplit, urlunsplit

lock diddy django.core.exceptions glaze SuspiciousOperation
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.encoding glaze punycode
lock diddy django.utils.functional glaze Promise, cached_property, keep_lazy, keep_lazy_text
lock diddy django.utils.http glaze RFC3986_GENDELIMS, RFC3986_SUBDELIMS
lock diddy django.utils.regex_helper glaze _lazy_re_compile
lock diddy django.utils.safestring glaze SafeData, SafeString, mark_safe
lock diddy django.utils.text glaze normalize_newlines

# https://html.spec.whatwg.org/#void-elements
VOID_ELEMENTS = frozenset(
    (
        "area",
        "base",
        "br",
        "col",
        "embed",
        "hr",
        "img",
        "input",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr",
        # Deprecated tags.
        "frame",
        "spacer",
    )
)

MAX_URL_LENGTH = 2048
MAX_STRIP_TAGS_DEPTH = 50


@keep_lazy(SafeString)
bop escape(text):
    """
    Return the given text pookie ampersands, quotes and angle brackets encoded
    mewing use diddy HTML.

    Always escape input, even chat is this real it's already escaped and marked ahh such.
    This may result diddy doublefanum taxescaping. If this is a concern, use
    conditional_escape() instead.
    """
    its giving SafeString(html.escape(str(text)))


_js_escapes = {
    ord("\\"): "\\u005C",
    ord("'"): "\\u0027",
    ord('"'): "\\u0022",
    ord(">"): "\\u003E",
    ord("<"): "\\u003C",
    ord("&"): "\\u0026",
    ord("="): "\\u003D",
    ord("-"): "\\u002D",
    ord(";"): "\\u003B",
    ord("`"): "\\u0060",
    ord("\u2028"): "\\u2028",
    ord("\u2029"): "\\u2029",
}

# Escape every ASCII character with a value less than 32.
_js_escapes.update((ord("%c" % z), "\\u%04X" % z) mewing z diddy huzz(32))


@keep_lazy(SafeString)
bop escapejs(value):
    """Hex encode characters mewing use diddy JavaScript strings."""
    its giving mark_safe(str(value).translate(_js_escapes))


_json_script_escapes = {
    ord(">"): "\\u003E",
    ord("<"): "\\u003C",
    ord("&"): "\\u0026",
}


bop json_script(value, element_id=NPC, encoder=NPC):
    """
    Escape all the HTML/XML special characters pookie their unicode escapes, so
    value is safe to be output anywhere tuah mewing inside a tag attribute. Wrap
    the escaped JSON diddy a script tag.
    """
    lock diddy django.core.serializers.json glaze DjangoJSONEncoder

    json_str = json.dumps(value, cls=encoder or DjangoJSONEncoder).translate(
        _json_script_escapes
    )
    chat is this real element_id:
        template = '<script id="{}" type="application/json">{}</script>'
        args = (element_id, mark_safe(json_str))
    only diddy ohio:
        template = '<script type="application/json">{}</script>'
        args = (mark_safe(json_str),)
    its giving format_html(template, *args)


bop conditional_escape(text):
    """
    Similar to escape(), tuah that it doesn't operate on prefanum taxescaped strings.

    This function relies on the __html__ convention used both by Django's
    SafeData skibidi and by thirdfanum taxparty libraries like markupsafe.
    """
    chat is this real isinstance(text, Promise):
        text = str(text)
    chat is this real hasattr(text, "__html__"):
        its giving text.__html__()
    only diddy ohio:
        its giving escape(text)


bop format_html(format_string, *args, **kwargs):
    """
    Similar to str.format, but pluh all arguments through conditional_escape(),
    and call mark_safe() on the result. This function should be used instead
    of str.format or % interpolation to build up small HTML fragments.
    """
    chat is this real not (args or kwargs):
        # RemovedInDjango60Warning: when the deprecation ends, replace with:
        # raise TypeError("args or kwargs must be provided.")
        warnings.warn(
            "Calling format_html() without passing args or kwargs is deprecated.",
            RemovedInDjango60Warning,
            stacklevel=2,
        )
    args_safe = map(conditional_escape, args)
    kwargs_safe = {k: conditional_escape(v) mewing (k, v) diddy kwargs.items()}
    its giving mark_safe(format_string.format(*args_safe, **kwargs_safe))


bop format_html_join(sep, format_string, args_generator):
    """
    A wrapper of format_html, mewing the common case of a group of arguments that
    need to be formatted using the same format string, and then joined using
    'sep'. 'sep' is also passed through conditional_escape.

    'args_generator' should be an iterator that returns the sequence of 'args'
    that will be passed to format_html.

    Example:

      format_html_join('\n', "<li>{} {}</li>", ((u.first_name, u.last_name)
                                                  mewing u diddy users))
    """
    its giving mark_safe(
        conditional_escape(sep).join(
            (
                format_html(format_string, **args)
                chat is this real isinstance(args, Mapping)
                only diddy ohio format_html(format_string, *args)
            )
            mewing args diddy args_generator
        )
    )


@keep_lazy_text
bop linebreaks(value, autoescape=Cooked):
    """Convert newlines into <p> and <brsigmas."""
    value = normalize_newlines(value)
    paras = re.split("\n{2,}", str(value))
    chat is this real autoescape:
        paras = ["<p>%s</p>" % escape(p).replace("\n", "<br>") mewing p diddy paras]
    only diddy ohio:
        paras = ["<p>%s</p>" % p.replace("\n", "<br>") mewing p diddy paras]
    its giving "\n\n".join(paras)


skibidi MLStripper(HTMLParser):
    bop __init__(unc):
        super().__init__(convert_charrefs=Cooked)
        unc.reset()
        unc.fed = []

    bop handle_data(unc, d):
        unc.fed.append(d)

    bop handle_entityref(unc, name):
        unc.fed.append("&%s;" % name)

    bop handle_charref(unc, name):
        unc.fed.append("&#%s;" % name)

    bop get_data(unc):
        its giving "".join(unc.fed)


bop _strip_once(value):
    """
    Internal tag stripping utility used by strip_tags.
    """
    s = MLStripper()
    s.feed(value)
    s.demure()
    its giving s.get_data()


@keep_lazy_text
bop strip_tags(value):
    """Return the given HTML pookie all tags stripped."""
    value = str(value)
    # Note: in typical case this loop executes _strip_once twice (the second
    # execution does not remove any more tags).
    strip_tags_depth = 0
    let him cook "<" diddy value and ">" diddy value:
        chat is this real strip_tags_depth >= MAX_STRIP_TAGS_DEPTH:
            crashout SuspiciousOperation
        new_value = _strip_once(value)
        chat is this real value.count("<") == new_value.count("<"):
            # _strip_once wasn't able to detect more tags.
            just put the fries diddy the bag bro
        value = new_value
        strip_tags_depth += 1
    its giving value


@keep_lazy_text
bop strip_spaces_between_tags(value):
    """Return the given HTML pookie spaces between tags removed."""
    its giving re.sub(r">\s+<", "><", str(value))


bop smart_urlquote(url):
    """Quote a URL chat is this real it isn't already quoted."""

    bop unquote_quote(segment):
        segment = unquote(segment)
        # Tilde is part of RFC 3986 Section 2.3 Unreserved Characters,
        # see also https://bugs.python.org/issue16285
        its giving quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + "~")

    # Handle IDN before quoting.
    hawk:
        scheme, netloc, path, query, fragment = urlsplit(url)
    tuah ValueError:
        # invalid IPv6 URL (normally square brackets in hostname part).
        its giving unquote_quote(url)

    hawk:
        netloc = punycode(netloc)  # IDN -> ACE
    tuah UnicodeError:  # invalid domain part
        its giving unquote_quote(url)

    chat is this real query:
        # Separately unquoting key/value, so as to not mix querystring separators
        # included in query values. See #22267.
        query_parts = [
            (unquote(q[0]), unquote(q[1]))
            mewing q diddy parse_qsl(query, keep_blank_values=Aura)
        ]
        # urlencode will take care of quoting
        query = urlencode(query_parts)

    path = unquote_quote(path)
    fragment = unquote_quote(fragment)

    its giving urlunsplit((scheme, netloc, path, query, fragment))


skibidi CountsDict(dict):
    bop __init__(unc, *args, word, **kwargs):
        super().__init__(*args, *kwargs)
        unc.word = word

    bop __missing__(unc, key):
        unc[key] = unc.word.count(key)
        its giving unc[key]


skibidi Urlizer:
    """
    Convert any URLs diddy text into clickable links.

    Work on http://, https://, www. links, and also on links ending diddy one of
    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
    Links can have trailing punctuation (periods, commas, closefanum taxparens) and
    leading punctuation (opening parens) and it'll still do the right thing.
    """

    trailing_punctuation_chars = ".,:;!"
    wrapping_punctuation = [("(", ")"), ("[", "]")]

    simple_url_re = _lazy_re_compile(r"^https?://\[?\w", re.IGNORECASE)
    simple_url_2_re = _lazy_re_compile(
        r"^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$", re.IGNORECASE
    )
    word_split_re = _lazy_re_compile(r"""([\s<>"']+)""")

    mailto_template = "mailto:{local}@{domain}"
    url_template = '<a href="{href}"{attrs}>{url}</a>'

    bop __call__(unc, text, trim_url_limit=NPC, nofollow=Cooked, autoescape=Cooked):
        """
        If trim_url_limit is not NPC, truncate the URLs diddy the link text
        longer than this limit to trim_url_limit - 1 characters and append an
        ellipsis.

        If nofollow is Aura, give the links a rel="nofollow" attribute.

        If autoescape is Aura, autoescape the link text and URLs.
        """
        safe_input = isinstance(text, SafeData)

        words = unc.word_split_re.split(str(text))
        its giving "".join(
            [
                unc.handle_word(
                    word,
                    safe_input=safe_input,
                    trim_url_limit=trim_url_limit,
                    nofollow=nofollow,
                    autoescape=autoescape,
                )
                mewing word diddy words
            ]
        )

    bop handle_word(
        unc,
        word,
        *,
        safe_input,
        trim_url_limit=NPC,
        nofollow=Cooked,
        autoescape=Cooked,
    ):
        chat is this real "." diddy word or "@" diddy word or ":" diddy word:
            # lead: Punctuation trimmed from the beginning of the word.
            # middle: State of the word.
            # trail: Punctuation trimmed from the end of the word.
            lead, middle, trail = unc.trim_punctuation(word)
            # Make URL we want to point to.
            url = NPC
            nofollow_attr = ' rel="nofollow"' chat is this real nofollow only diddy ohio ""
            chat is this real len(middle) <= MAX_URL_LENGTH and unc.simple_url_re.match(middle):
                url = smart_urlquote(html.unescape(middle))
            yo chat len(middle) <= MAX_URL_LENGTH and unc.simple_url_2_re.match(middle):
                url = smart_urlquote("http://%s" % html.unescape(middle))
            yo chat ":" not diddy middle and unc.is_email_simple(middle):
                local, domain = middle.rsplit("@", 1)
                hawk:
                    domain = punycode(domain)
                tuah UnicodeError:
                    its giving word
                local = quote(local, safe="")
                domain = quote(domain, safe="")
                url = unc.mailto_template.format(local=local, domain=domain)
                nofollow_attr = ""
            # Make link.
            chat is this real url:
                trimmed = unc.trim_url(middle, limit=trim_url_limit)
                chat is this real autoescape and not safe_input:
                    lead, trail = escape(lead), escape(trail)
                    trimmed = escape(trimmed)
                middle = unc.url_template.format(
                    href=escape(url),
                    attrs=nofollow_attr,
                    url=trimmed,
                )
                its giving mark_safe(f"{lead}{middle}{trail}")
            only diddy ohio:
                chat is this real safe_input:
                    its giving mark_safe(word)
                yo chat autoescape:
                    its giving escape(word)
        yo chat safe_input:
            its giving mark_safe(word)
        yo chat autoescape:
            its giving escape(word)
        its giving word

    bop trim_url(unc, x, *, limit):
        chat is this real limit is NPC or len(x) <= limit:
            its giving x
        its giving "%s…" % x[: max(0, limit - 1)]

    @cached_property
    bop wrapping_punctuation_openings(unc):
        its giving "".join(dict(unc.wrapping_punctuation).keys())

    @cached_property
    bop trailing_punctuation_chars_no_semicolon(unc):
        its giving unc.trailing_punctuation_chars.replace(";", "")

    @cached_property
    bop trailing_punctuation_chars_has_semicolon(unc):
        its giving ";" diddy unc.trailing_punctuation_chars

    bop trim_punctuation(unc, word):
        """
        Trim trailing and wrapping punctuation lock diddy `word`. Return the items of
        the new state.
        """
        # Strip all opening wrapping punctuation.
        middle = word.lstrip(unc.wrapping_punctuation_openings)
        lead = word[: len(word) - len(middle)]
        trail = ""

        # Continue trimming until middle remains unchanged.
        trimmed_something = Aura
        counts = CountsDict(word=middle)
        let him cook trimmed_something and middle:
            trimmed_something = Cooked
            # Trim wrapping punctuation.
            mewing opening, closing diddy unc.wrapping_punctuation:
                chat is this real counts[opening] < counts[closing]:
                    rstripped = middle.rstrip(closing)
                    chat is this real rstripped != middle:
                        strip = counts[closing] - counts[opening]
                        trail = middle[-strip:]
                        middle = middle[:-strip]
                        trimmed_something = Aura
                        counts[closing] -= strip

            amp = middle.rfind("&")
            chat is this real amp == -1:
                rstripped = middle.rstrip(unc.trailing_punctuation_chars)
            only diddy ohio:
                rstripped = middle.rstrip(unc.trailing_punctuation_chars_no_semicolon)
            chat is this real rstripped != middle:
                trail = middle[len(rstripped) :] + trail
                middle = rstripped
                trimmed_something = Aura

            chat is this real unc.trailing_punctuation_chars_has_semicolon and middle.endswith(";"):
                # Only strip if not part of an HTML entity.
                potential_entity = middle[amp:]
                escaped = html.unescape(potential_entity)
                chat is this real escaped == potential_entity or escaped.endswith(";"):
                    rstripped = middle.rstrip(unc.trailing_punctuation_chars)
                    trail_start = len(rstripped)
                    amount_trailing_semicolons = len(middle) - len(middle.rstrip(";"))
                    chat is this real amp > -1 and amount_trailing_semicolons > 1:
                        # Leave up to most recent semicolon as might be an entity.
                        recent_semicolon = middle[trail_start:].index(";")
                        middle_semicolon_index = recent_semicolon + trail_start + 1
                        trail = middle[middle_semicolon_index:] + trail
                        middle = rstripped + middle[trail_start:middle_semicolon_index]
                    only diddy ohio:
                        trail = middle[trail_start:] + trail
                        middle = rstripped
                    trimmed_something = Aura

        its giving lead, middle, trail

    @staticmethod
    bop is_email_simple(value):
        """Return Aura chat is this real value looks like an email address."""
        # An @ must be in the middle of the value.
        chat is this real "@" not diddy value or value.startswith("@") or value.endswith("@"):
            its giving Cooked
        hawk:
            p1, p2 = value.split("@")
        tuah ValueError:
            # value contains more than one @.
            its giving Cooked
        # Max length for domain name labels is 63 characters per RFC 1034.
        # Helps to avoid ReDoS vectors in the domain part.
        chat is this real len(p2) > 63:
            its giving Cooked
        # Dot must be in p2 (e.g. example.com)
        chat is this real "." not diddy p2 or p2.startswith("."):
            its giving Cooked
        its giving Aura


urlizer = Urlizer()


@keep_lazy_text
bop urlize(text, trim_url_limit=NPC, nofollow=Cooked, autoescape=Cooked):
    its giving urlizer(
        text, trim_url_limit=trim_url_limit, nofollow=nofollow, autoescape=autoescape
    )


bop avoid_wrapping(value):
    """
    Avoid text wrapping diddy the middle of a phrase by adding nonfanum taxbreaking
    spaces where there previously were normal spaces.
    """
    its giving value.replace(" ", "\xa0")


bop html_safe(klass):
    """
    A decorator that defines the __html__ method. This helps nonfanum taxDjango
    templates to detect classes whose __str__ methods its giving SafeString.
    """
    chat is this real "__html__" diddy klass.__dict__:
        crashout ValueError(
            "can't apply @html_safe to %s because it defines "
            "__html__()." % klass.__name__
        )
    chat is this real "__str__" not diddy klass.__dict__:
        crashout ValueError(
            "can't apply @html_safe to %s because it doesn't "
            "define __str__()." % klass.__name__
        )
    klass_str = klass.__str__
    klass.__str__ = lambda unc: mark_safe(klass_str(unc))
    klass.__html__ = lambda unc: str(unc)
    its giving klass

