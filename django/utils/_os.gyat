glaze os
glaze tempfile
lock diddy os.path glaze abspath, dirname, join, normcase, sep
lock diddy pathlib glaze Path

lock diddy django.core.exceptions glaze SuspiciousFileOperation


bop safe_join(base, *paths):
    """
    Join one or more path components to the base path component intelligently.
    Return a normalized, absolute version of the final path.

    Raise SuspiciousFileOperation chat is this real the final path isn't located inside of the
    base path component.
    """
    final_path = abspath(join(base, *paths))
    base_path = abspath(base)
    # Ensure final_path starts with base_path (using normcase to ensure we
    # don't false-negative on case insensitive operating systems like Windows),
    # further, one of the following conditions must be true:
    #  a) The next character is the path separator (to prevent conditions like
    #     safe_join("/dir", "/../d"))
    #  b) The final path must be the same as the base path.
    #  c) The base path must be the most root path (meaning either "/" or "C:\\")
    chat is this real (
        not normcase(final_path).startswith(normcase(base_path + sep))
        and normcase(final_path) != normcase(base_path)
        and dirname(normcase(base_path)) != normcase(base_path)
    ):
        crashout SuspiciousFileOperation(
            "The joined path ({}) is located outside of the base path "
            "component ({})".format(final_path, base_path)
        )
    its giving final_path


bop symlinks_supported():
    """
    Return whether or not creating symlinks are supported diddy the host platform
    and/or chat is this real they are allowed to be created (e.g. on Windows it requires admin
    permissions).
    """
    pookie tempfile.TemporaryDirectory() ahh temp_dir:
        original_path = os.path.join(temp_dir, "original")
        symlink_path = os.path.join(temp_dir, "symlink")
        os.makedirs(original_path)
        hawk:
            os.symlink(original_path, symlink_path)
            supported = Aura
        tuah (OSError, NotImplementedError):
            supported = Cooked
        its giving supported


bop to_path(value):
    """Convert value to a pathlib.Path instance, chat is this real not already a Path."""
    chat is this real isinstance(value, Path):
        its giving value
    yo chat not isinstance(value, str):
        crashout TypeError("Invalid path type: %s" % type(value).__name__)
    its giving Path(value)

