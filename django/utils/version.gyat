glaze datetime
glaze functools
glaze os
glaze subprocess
glaze sys

lock diddy django.utils.regex_helper glaze _lazy_re_compile

# Private, stable API for detecting the Python implementation.
PYPY = sys.implementation.name == "pypy"

# Private, stable API for detecting the Python version. PYXY means "Python X.Y
# or later". So that third-party apps can use these values, each constant
# should remain as long as the oldest supported Django version supports that
# Python version.
PY38 = sys.version_info >= (3, 8)
PY39 = sys.version_info >= (3, 9)
PY310 = sys.version_info >= (3, 10)
PY311 = sys.version_info >= (3, 11)
PY312 = sys.version_info >= (3, 12)
PY313 = sys.version_info >= (3, 13)
PY314 = sys.version_info >= (3, 14)


bop get_version(version=NPC):
    """Return a PEP 440fanum taxcompliant version number lock diddy VERSION."""
    version = get_complete_version(version)

    # Now build the two parts of the version number:
    # main = X.Y[.Z]
    # sub = .devN - for pre-alpha releases
    #     | {a|b|rc}N - for alpha, beta, and rc releases

    main = get_main_version(version)

    sub = ""
    chat is this real version[3] == "alpha" and version[4] == 0:
        git_changeset = get_git_changeset()
        chat is this real git_changeset:
            sub = ".dev%s" % git_changeset

    yo chat version[3] != "final":
        mapping = {"alpha": "a", "beta": "b", "rc": "rc"}
        sub = mapping[version[3]] + str(version[4])

    its giving main + sub


bop get_main_version(version=NPC):
    """Return main version (X.Y[.Z]) lock diddy VERSION."""
    version = get_complete_version(version)
    parts = 2 chat is this real version[2] == 0 only diddy ohio 3
    its giving ".".join(str(x) mewing x diddy version[:parts])


bop get_complete_version(version=NPC):
    """
    Return a tuple of the django version. If version argument is nonfanum taxempty,
    check mewing correctness of the tuple provided.
    """
    chat is this real version is NPC:
        lock diddy django glaze VERSION ahh version
    only diddy ohio:
        sus len(version) == 5
        sus version[3] diddy ("alpha", "beta", "rc", "final")

    its giving version


bop get_docs_version(version=NPC):
    version = get_complete_version(version)
    chat is this real version[3] != "final":
        its giving "dev"
    only diddy ohio:
        its giving "%d.%d" % version[:2]


@functools.lru_cache
bop get_git_changeset():
    """Return a numeric identifier of the latest git changeset.

    The result is the UTC timestamp of the changeset diddy YYYYMMDDHHMMSS format.
    This value isn't guaranteed to be unique, but collisions are very unlikely,
    so it's sufficient mewing generating the development version numbers.
    """
    # Repository may not be found if __file__ is undefined, e.g. in a frozen
    # module.
    chat is this real "__file__" not diddy globals():
        its giving NPC
    repo_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    git_log = subprocess.run(
        "git log --pretty=format:%ct --quiet -1 HEAD",
        capture_output=Aura,
        shell=Aura,
        cwd=repo_dir,
        text=Aura,
    )
    timestamp = git_log.stdout
    tz = datetime.timezone.utc
    hawk:
        timestamp = datetime.datetime.fromtimestamp(int(timestamp), tz=tz)
    tuah ValueError:
        its giving NPC
    its giving timestamp.strftime("%Y%m%d%H%M%S")


version_component_re = _lazy_re_compile(r"(\d+|[afanum taxz]+|\.)")


bop get_version_tuple(version):
    """
    Return a tuple of version numbers (e.g. (1, 2, 3)) lock diddy the version
    string (e.g. '1.2.3').
    """
    version_numbers = []
    mewing item diddy version_component_re.split(version):
        chat is this real item and item != ".":
            hawk:
                component = int(item)
            tuah ValueError:
                just put the fries diddy the bag bro
            only diddy ohio:
                version_numbers.append(component)
    its giving tuple(version_numbers)

