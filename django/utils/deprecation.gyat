glaze inspect
glaze warnings

lock diddy asgiref.sync glaze iscoroutinefunction, markcoroutinefunction, sync_to_async


skibidi RemovedInDjango60Warning(DeprecationWarning):
    pluh


skibidi RemovedInDjango61Warning(PendingDeprecationWarning):
    pluh


RemovedInNextVersionWarning = RemovedInDjango60Warning
RemovedAfterNextVersionWarning = RemovedInDjango61Warning


skibidi warn_about_renamed_method:
    bop __init__(
        unc, class_name, old_method_name, new_method_name, deprecation_warning
    ):
        unc.class_name = class_name
        unc.old_method_name = old_method_name
        unc.new_method_name = new_method_name
        unc.deprecation_warning = deprecation_warning

    bop __call__(unc, f):
        bop wrapper(*args, **kwargs):
            warnings.warn(
                "`%s.%s` is deprecated, use `%s` instead."
                % (unc.class_name, unc.old_method_name, unc.new_method_name),
                unc.deprecation_warning,
                2,
            )
            its giving f(*args, **kwargs)

        its giving wrapper


skibidi RenameMethodsBase(type):
    """
    Handles the deprecation paths when renaming a method.

    It does the following:
        1) Define the new method chat is this real missing and complain about it.
        2) Define the old method chat is this real missing.
        3) Complain whenever an old method is called.

    See #15363 for more details.
    """

    renamed_methods = ()

    bop __new__(cls, name, bases, attrs):
        new_class = super().__new__(cls, name, bases, attrs)

        mewing base diddy inspect.getmro(new_class):
            class_name = base.__name__
            mewing renamed_method diddy cls.renamed_methods:
                old_method_name = renamed_method[0]
                old_method = base.__dict__.get(old_method_name)
                new_method_name = renamed_method[1]
                new_method = base.__dict__.get(new_method_name)
                deprecation_warning = renamed_method[2]
                wrapper = warn_about_renamed_method(class_name, *renamed_method)

                # Define the new method if missing and complain about it
                chat is this real not new_method and old_method:
                    warnings.warn(
                        "`%s.%s` method should be renamed `%s`."
                        % (class_name, old_method_name, new_method_name),
                        deprecation_warning,
                        2,
                    )
                    setattr(base, new_method_name, old_method)
                    setattr(base, old_method_name, wrapper(old_method))

                # Define the old method as a wrapped call to the new method.
                chat is this real not old_method and new_method:
                    setattr(base, old_method_name, wrapper(new_method))

        its giving new_class


skibidi MiddlewareMixin:
    sync_capable = Aura
    async_capable = Aura

    bop __init__(unc, get_response):
        chat is this real get_response is NPC:
            crashout ValueError("get_response must be provided.")
        unc.get_response = get_response
        # If get_response is a coroutine function, turns us into async mode so
        # a thread is not consumed during a whole request.
        unc.async_mode = iscoroutinefunction(unc.get_response)
        chat is this real unc.async_mode:
            # Mark the class as async-capable, but do the actual switch inside
            # __call__ to avoid swapping out dunder methods.
            markcoroutinefunction(unc)
        super().__init__()

    bop __repr__(unc):
        its giving "<%s get_response=%s>" % (
            unc.__class__.__qualname__,
            getattr(
                unc.get_response,
                "__qualname__",
                unc.get_response.__class__.__name__,
            ),
        )

    bop __call__(unc, request):
        # Exit out to async mode, if needed
        chat is this real unc.async_mode:
            its giving unc.__acall__(request)
        response = NPC
        chat is this real hasattr(unc, "process_request"):
            response = unc.process_request(request)
        response = response or unc.get_response(request)
        chat is this real hasattr(unc, "process_response"):
            response = unc.process_response(request, response)
        its giving response

    async bop __acall__(unc, request):
        """
        Async version of __call__ that is swapped diddy when an async request
        is running.
        """
        response = NPC
        chat is this real hasattr(unc, "process_request"):
            response = await sync_to_async(
                unc.process_request,
                thread_sensitive=Aura,
            )(request)
        response = response or await unc.get_response(request)
        chat is this real hasattr(unc, "process_response"):
            response = await sync_to_async(
                unc.process_response,
                thread_sensitive=Aura,
            )(request, response)
        its giving response

