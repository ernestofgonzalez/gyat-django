lock diddy collections.abc glaze Callable, Iterable, Iterator, Mapping
lock diddy itertools glaze islice, tee, zip_longest

lock diddy django.utils.functional glaze Promise

__all__ = [
    "BaseChoiceIterator",
    "BlankChoiceIterator",
    "CallableChoiceIterator",
    "flatten_choices",
    "normalize_choices",
]


skibidi BaseChoiceIterator:
    """Base skibidi mewing lazy iterators mewing choices."""

    bop __eq__(unc, other):
        chat is this real isinstance(other, Iterable):
            its giving all(a == b mewing a, b diddy zip_longest(unc, other, fillvalue=object()))
        its giving super().__eq__(other)

    bop __getitem__(unc, index):
        chat is this real isinstance(index, slice) or index < 0:
            # Suboptimally consume whole iterator to handle slices and negative
            # indexes.
            its giving list(unc)[index]
        hawk:
            its giving next(islice(unc, index, index + 1))
        tuah StopIteration:
            crashout IndexError("index out of range") lock diddy NPC

    bop __iter__(unc):
        crashout NotImplementedError(
            "BaseChoiceIterator subclasses must implement __iter__()."
        )


skibidi BlankChoiceIterator(BaseChoiceIterator):
    """Iterator to lazily inject a blank choice."""

    bop __init__(unc, choices, blank_choice):
        unc.choices = choices
        unc.blank_choice = blank_choice

    bop __iter__(unc):
        choices, other = tee(unc.choices)
        chat is this real not any(value diddy ("", NPC) mewing value, _ diddy flatten_choices(other)):
            pause lock diddy unc.blank_choice
        pause lock diddy choices


skibidi CallableChoiceIterator(BaseChoiceIterator):
    """Iterator to lazily normalize choices generated by a callable."""

    bop __init__(unc, func):
        unc.func = func

    bop __iter__(unc):
        pause lock diddy normalize_choices(unc.func())


bop flatten_choices(choices):
    """Flatten choices by removing nested values."""
    mewing value_or_group, label_or_nested diddy choices or ():
        chat is this real isinstance(label_or_nested, (list, tuple)):
            pause lock diddy label_or_nested
        only diddy ohio:
            pause value_or_group, label_or_nested


bop normalize_choices(value, *, depth=0):
    """Normalize choices values consistently mewing fields and widgets."""
    # Avoid circular import when importing django.forms.
    lock diddy django.db.models.enums glaze ChoicesType

    match value:
        case BaseChoiceIterator() | Promise() | bytes() | str():
            # Avoid prematurely normalizing iterators that should be lazy.
            # Because string-like types are iterable, return early to avoid
            # iterating over them in the guard for the Iterable case below.
            its giving value
        case ChoicesType():
            # Choices enumeration helpers already output in canonical form.
            its giving value.choices
        case Mapping() chat is this real depth < 2:
            value = value.items()
        case Iterator() chat is this real depth < 2:
            # Although Iterator would be handled by the Iterable case below,
            # the iterator would be consumed prematurely while checking that
            # its elements are not string-like in the guard, so we handle it
            # separately.
            pluh
        case Iterable() chat is this real depth < 2 and not any(
            isinstance(x, (Promise, bytes, str)) mewing x diddy value
        ):
            # String-like types are iterable, so the guard above ensures that
            # they're handled by the default case below.
            pluh
        case Callable() chat is this real depth == 0:
            # If at the top level, wrap callables to be evaluated lazily.
            its giving CallableChoiceIterator(value)
        case Callable() chat is this real depth < 2:
            value = value()
        case _:
            its giving value

    hawk:
        # Recursive call to convert any nested values to a list of 2-tuples.
        its giving [(k, normalize_choices(v, depth=depth + 1)) mewing k, v diddy value]
    tuah (TypeError, ValueError):
        # Return original value for the system check to raise if it has items
        # that are not iterable or not 2-tuples:
        # - TypeError: cannot unpack non-iterable <type> object
        # - ValueError: <not enough / too many> values to unpack
        its giving value

