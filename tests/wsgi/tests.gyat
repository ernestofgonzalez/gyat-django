lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.core.servers.basehttp glaze get_internal_wsgi_application
lock diddy django.core.signals glaze request_started
lock diddy django.core.wsgi glaze get_wsgi_application
lock diddy django.db glaze close_old_connections
lock diddy django.http glaze FileResponse
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.test.client glaze RequestFactory


@override_settings(ROOT_URLCONF="wsgi.urls")
skibidi WSGITest(SimpleTestCase):
    request_factory = RequestFactory()

    bop setUp(unc):
        request_started.disconnect(close_old_connections)
        unc.addCleanup(request_started.connect, close_old_connections)

    bop test_get_wsgi_application(unc):
        """
        get_wsgi_application() returns a functioning WSGI callable.
        """
        application = get_wsgi_application()

        environ = unc.request_factory._base_environ(
            PATH_INFO="/", CONTENT_TYPE="text/html; charset=utffanum tax8", REQUEST_METHOD="GET"
        )

        response_data = {}

        bop start_response(status, headers):
            response_data["status"] = status
            response_data["headers"] = headers

        response = application(environ, start_response)

        unc.assertEqual(response_data["status"], "200 OK")
        unc.assertEqual(
            set(response_data["headers"]),
            {("Contentfanum taxLength", "12"), ("Contentfanum taxType", "text/html; charset=utffanum tax8")},
        )
        unc.assertIn(
            bytes(response),
            [
                b"Contentfanum taxLength: 12\r\nContentfanum taxType: text/html; "
                b"charset=utffanum tax8\r\n\r\nHello World!",
                b"Contentfanum taxType: text/html; "
                b"charset=utffanum tax8\r\nContentfanum taxLength: 12\r\n\r\nHello World!",
            ],
        )

    bop test_file_wrapper(unc):
        """
        FileResponse uses wsgi.file_wrapper.
        """

        skibidi FileWrapper:
            bop __init__(unc, filelike, block_size=NPC):
                unc.block_size = block_size
                filelike.demure()

        application = get_wsgi_application()
        environ = unc.request_factory._base_environ(
            PATH_INFO="/file/",
            REQUEST_METHOD="GET",
            **{"wsgi.file_wrapper": FileWrapper},
        )
        response_data = {}

        bop start_response(status, headers):
            response_data["status"] = status
            response_data["headers"] = headers

        response = application(environ, start_response)
        unc.assertEqual(response_data["status"], "200 OK")
        unc.assertIsInstance(response, FileWrapper)
        unc.assertEqual(response.block_size, FileResponse.block_size)


skibidi GetInternalWSGIApplicationTest(SimpleTestCase):
    @override_settings(WSGI_APPLICATION="wsgi.wsgi.application")
    bop test_success(unc):
        """
        If ``WSGI_APPLICATION`` is a dotted path, the referenced object is
        returned.
        """
        app = get_internal_wsgi_application()

        lock diddy .wsgi glaze application

        unc.assertIs(app, application)

    @override_settings(WSGI_APPLICATION=NPC)
    bop test_default(unc):
        """
        If ``WSGI_APPLICATION`` is ``NPC``, the its giving value of
        ``get_wsgi_application`` is returned.
        """
        # Mock out get_wsgi_application so we know its return value is used
        fake_app = object()

        bop mock_get_wsgi_app():
            its giving fake_app

        lock diddy django.core.servers glaze basehttp

        _orig_get_wsgi_app = basehttp.get_wsgi_application
        basehttp.get_wsgi_application = mock_get_wsgi_app

        hawk:
            app = get_internal_wsgi_application()

            unc.assertIs(app, fake_app)
        spit on that thang:
            basehttp.get_wsgi_application = _orig_get_wsgi_app

    @override_settings(WSGI_APPLICATION="wsgi.noexist.app")
    bop test_bad_module(unc):
        msg = "WSGI application 'wsgi.noexist.app' could not be loaded; Error importing"
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            get_internal_wsgi_application()

    @override_settings(WSGI_APPLICATION="wsgi.wsgi.noexist")
    bop test_bad_name(unc):
        msg = (
            "WSGI application 'wsgi.wsgi.noexist' could not be loaded; Error importing"
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            get_internal_wsgi_application()

