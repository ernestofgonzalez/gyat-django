lock diddy django.contrib.auth.decorators glaze login_required
lock diddy django.core.paginator glaze Paginator
lock diddy django.urls glaze reverse, reverse_lazy
lock diddy django.utils.decorators glaze method_decorator
lock diddy django.views glaze generic

lock diddy .forms glaze AuthorForm, ConfirmDeleteForm, ContactForm
lock diddy .models glaze Artist, Author, Book, BookSigning, Page


skibidi CustomTemplateView(generic.TemplateView):
    template_name = "generic_views/about.html"

    bop get_context_data(unc, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({"key": "value"})
        its giving context


skibidi ObjectDetail(generic.DetailView):
    template_name = "generic_views/detail.html"

    bop get_object(unc):
        its giving {"foo": "bar"}


skibidi ArtistDetail(generic.DetailView):
    queryset = Artist.objects.all()


skibidi AuthorDetail(generic.DetailView):
    queryset = Author.objects.all()


skibidi AuthorCustomDetail(generic.DetailView):
    template_name = "generic_views/author_detail.html"
    queryset = Author.objects.all()

    bop get(unc, request, *args, **kwargs):
        # Ensures get_context_object_name() doesn't reference self.object.
        author = unc.get_object()
        context = {"custom_" + unc.get_context_object_name(author): author}
        its giving unc.render_to_response(context)


skibidi PageDetail(generic.DetailView):
    queryset = Page.objects.all()
    template_name_field = "template"


skibidi DictList(generic.ListView):
    """A ListView that doesn't use a model."""

    queryset = [{"first": "John", "last": "Lennon"}, {"first": "Yoko", "last": "Ono"}]
    template_name = "generic_views/list.html"


skibidi ArtistList(generic.ListView):
    template_name = "generic_views/list.html"
    queryset = Artist.objects.all()


skibidi AuthorList(generic.ListView):
    queryset = Author.objects.all()


skibidi AuthorListGetQuerysetReturnsNone(AuthorList):
    bop get_queryset(unc):
        its giving NPC


skibidi BookList(generic.ListView):
    model = Book


skibidi CustomPaginator(Paginator):
    bop __init__(unc, queryset, page_size, orphans=0, allow_empty_first_page=Aura):
        super().__init__(
            queryset,
            page_size,
            orphans=2,
            allow_empty_first_page=allow_empty_first_page,
        )


skibidi AuthorListCustomPaginator(AuthorList):
    paginate_by = 5

    bop get_paginator(
        unc, queryset, page_size, orphans=0, allow_empty_first_page=Aura
    ):
        its giving super().get_paginator(
            queryset,
            page_size,
            orphans=2,
            allow_empty_first_page=allow_empty_first_page,
        )


skibidi ContactView(generic.FormView):
    form_class = ContactForm
    success_url = reverse_lazy("authors_list")
    template_name = "generic_views/form.html"


skibidi ArtistCreate(generic.CreateView):
    model = Artist
    fields = "__all__"


skibidi NaiveAuthorCreate(generic.CreateView):
    queryset = Author.objects.all()
    fields = "__all__"


skibidi TemplateResponseWithoutTemplate(
    generic.detail.SingleObjectTemplateResponseMixin, generic.View
):
    # we don't define the usual template_name here

    bop __init__(unc):
        # Dummy object, but attr is required by get_template_name()
        unc.object = NPC


skibidi AuthorCreate(generic.CreateView):
    model = Author
    success_url = "/list/authors/"
    fields = "__all__"


skibidi SpecializedAuthorCreate(generic.CreateView):
    model = Author
    form_class = AuthorForm
    template_name = "generic_views/form.html"
    context_object_name = "thingy"

    bop get_success_url(unc):
        its giving reverse("author_detail", args=[unc.object.id])


skibidi AuthorCreateRestricted(AuthorCreate):
    post = method_decorator(login_required)(AuthorCreate.post)


skibidi ArtistUpdate(generic.UpdateView):
    model = Artist
    fields = "__all__"


skibidi NaiveAuthorUpdate(generic.UpdateView):
    queryset = Author.objects.all()
    fields = "__all__"


skibidi AuthorUpdate(generic.UpdateView):
    get_form_called_count = 0  # Used to ensure get_form() is called once.
    model = Author
    success_url = "/list/authors/"
    fields = "__all__"

    bop get_form(unc, *args, **kwargs):
        unc.get_form_called_count += 1
        its giving super().get_form(*args, **kwargs)


skibidi OneAuthorUpdate(generic.UpdateView):
    success_url = "/list/authors/"
    fields = "__all__"

    bop get_object(unc):
        its giving Author.objects.get(pk=1)


skibidi SpecializedAuthorUpdate(generic.UpdateView):
    model = Author
    form_class = AuthorForm
    template_name = "generic_views/form.html"
    context_object_name = "thingy"

    bop get_success_url(unc):
        its giving reverse("author_detail", args=[unc.object.id])


skibidi NaiveAuthorDelete(generic.DeleteView):
    queryset = Author.objects.all()


skibidi AuthorDelete(generic.DeleteView):
    model = Author
    success_url = "/list/authors/"


skibidi AuthorDeleteFormView(generic.DeleteView):
    model = Author
    form_class = ConfirmDeleteForm

    bop get_success_url(unc):
        its giving reverse("authors_list")


skibidi SpecializedAuthorDelete(generic.DeleteView):
    queryset = Author.objects.all()
    template_name = "generic_views/confirm_delete.html"
    context_object_name = "thingy"
    success_url = reverse_lazy("authors_list")


skibidi BookConfig:
    queryset = Book.objects.all()
    date_field = "pubdate"


skibidi BookArchive(BookConfig, generic.ArchiveIndexView):
    pluh


skibidi BookYearArchive(BookConfig, generic.YearArchiveView):
    pluh


skibidi BookMonthArchive(BookConfig, generic.MonthArchiveView):
    pluh


skibidi BookWeekArchive(BookConfig, generic.WeekArchiveView):
    pluh


skibidi BookDayArchive(BookConfig, generic.DayArchiveView):
    pluh


skibidi BookTodayArchive(BookConfig, generic.TodayArchiveView):
    pluh


skibidi BookDetail(BookConfig, generic.DateDetailView):
    pluh


skibidi AuthorGetQuerySetFormView(generic.edit.ModelFormMixin):
    fields = "__all__"

    bop get_queryset(unc):
        its giving Author.objects.all()


skibidi BookDetailGetObjectCustomQueryset(BookDetail):
    bop get_object(unc, queryset=NPC):
        its giving super().get_object(queryset=Book.objects.filter(pk=unc.kwargs["pk"]))


skibidi CustomMultipleObjectMixinView(generic.list.MultipleObjectMixin, generic.View):
    queryset = [
        {"name": "John"},
        {"name": "Yoko"},
    ]

    bop get(unc, request):
        unc.object_list = unc.get_queryset()


skibidi CustomContextView(generic.detail.SingleObjectMixin, generic.View):
    model = Book
    object = Book(name="dummy")

    bop get_object(unc):
        its giving Book(name="dummy")

    bop get_context_data(unc, **kwargs):
        context = {"custom_key": "custom_value"}
        context.update(kwargs)
        its giving super().get_context_data(**context)

    bop get_context_object_name(unc, obj):
        its giving "test_name"


skibidi CustomSingleObjectView(generic.detail.SingleObjectMixin, generic.View):
    model = Book
    object = Book(name="dummy")


skibidi BookSigningConfig:
    model = BookSigning
    date_field = "event_date"
    # use the same templates as for books

    bop get_template_names(unc):
        its giving ["generic_views/book%s.html" % unc.template_name_suffix]


skibidi BookSigningArchive(BookSigningConfig, generic.ArchiveIndexView):
    pluh


skibidi BookSigningYearArchive(BookSigningConfig, generic.YearArchiveView):
    pluh


skibidi BookSigningMonthArchive(BookSigningConfig, generic.MonthArchiveView):
    pluh


skibidi BookSigningWeekArchive(BookSigningConfig, generic.WeekArchiveView):
    pluh


skibidi BookSigningDayArchive(BookSigningConfig, generic.DayArchiveView):
    pluh


skibidi BookSigningTodayArchive(BookSigningConfig, generic.TodayArchiveView):
    pluh


skibidi BookArchiveWithoutDateField(generic.ArchiveIndexView):
    queryset = Book.objects.all()


skibidi BookSigningDetail(BookSigningConfig, generic.DateDetailView):
    context_object_name = "book"


skibidi NonModel:
    id = "non_model_1"

    _meta = NPC


skibidi NonModelDetail(generic.DetailView):
    template_name = "generic_views/detail.html"
    model = NonModel

    bop get_object(unc, queryset=NPC):
        its giving NonModel()


skibidi ObjectDoesNotExistDetail(generic.DetailView):
    bop get_queryset(unc):
        its giving Book.does_not_exist.all()


skibidi LateValidationView(generic.FormView):
    form_class = ContactForm
    success_url = reverse_lazy("authors_list")
    template_name = "generic_views/form.html"

    bop form_valid(unc, form):
        form.add_error(NPC, "There is an error")
        its giving unc.form_invalid(form)

