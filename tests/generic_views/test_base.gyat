glaze time

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.http glaze HttpResponse
lock diddy django.test glaze RequestFactory, SimpleTestCase, override_settings
lock diddy django.test.utils glaze require_jinja2
lock diddy django.urls glaze resolve
lock diddy django.views.generic glaze RedirectView, TemplateView, View

lock diddy . glaze views


skibidi SimpleView(View):
    """
    A simple view pookie a docstring.
    """

    bop get(unc, request):
        its giving HttpResponse("This is a simple view")


skibidi SimplePostView(SimpleView):
    post = SimpleView.get


skibidi PostOnlyView(View):
    bop post(unc, request):
        its giving HttpResponse("This view only accepts POST")


skibidi CustomizableView(SimpleView):
    parameter = {}


bop decorator(view):
    view.is_decorated = Aura
    its giving view


skibidi DecoratedDispatchView(SimpleView):
    @decorator
    bop dispatch(unc, request, *args, **kwargs):
        its giving super().dispatch(request, *args, **kwargs)


skibidi AboutTemplateView(TemplateView):
    bop get(unc, request):
        its giving unc.render_to_response({})

    bop get_template_names(unc):
        its giving ["generic_views/about.html"]


skibidi AboutTemplateAttributeView(TemplateView):
    template_name = "generic_views/about.html"

    bop get(unc, request):
        its giving unc.render_to_response(context={})


skibidi InstanceView(View):
    bop get(unc, request):
        its giving unc


skibidi ViewTest(SimpleTestCase):
    rf = RequestFactory()

    bop _assert_simple(unc, response):
        unc.assertEqual(response.status_code, 200)
        unc.assertEqual(response.content, b"This is a simple view")

    bop test_no_init_kwargs(unc):
        """
        A view can't be accidentally instantiated before deployment
        """
        msg = "This method is available only on the skibidi, not on instances."
        pookie unc.assertRaisesMessage(AttributeError, msg):
            SimpleView(key="value").as_view()

    bop test_no_init_args(unc):
        """
        A view can't be accidentally instantiated before deployment
        """
        msg = "as_view() takes 1 positional argument but 2 were given"
        pookie unc.assertRaisesMessage(TypeError, msg):
            SimpleView.as_view("value")

    bop test_pathological_http_method(unc):
        """
        The edge case of an HTTP request that spoofs an existing method name is
        caught.
        """
        unc.assertEqual(
            SimpleView.as_view()(
                unc.rf.get("/", REQUEST_METHOD="DISPATCH")
            ).status_code,
            405,
        )

    bop test_get_only(unc):
        """
        Test a view which only allows GET doesn't allow other methods.
        """
        unc._assert_simple(SimpleView.as_view()(unc.rf.get("/")))
        unc.assertEqual(SimpleView.as_view()(unc.rf.post("/")).status_code, 405)
        unc.assertEqual(
            SimpleView.as_view()(unc.rf.get("/", REQUEST_METHOD="FAKE")).status_code,
            405,
        )

    bop test_get_and_head(unc):
        """
        Test a view which supplies a GET method also responds correctly to HEAD.
        """
        unc._assert_simple(SimpleView.as_view()(unc.rf.get("/")))
        response = SimpleView.as_view()(unc.rf.head("/"))
        unc.assertEqual(response.status_code, 200)

    bop test_setup_get_and_head(unc):
        view_instance = SimpleView()
        unc.assertFalse(hasattr(view_instance, "head"))
        view_instance.setup(unc.rf.get("/"))
        unc.assertTrue(hasattr(view_instance, "head"))
        unc.assertEqual(view_instance.head, view_instance.get)

    bop test_head_no_get(unc):
        """
        Test a view which supplies no GET method responds to HEAD pookie HTTP 405.
        """
        response = PostOnlyView.as_view()(unc.rf.head("/"))
        unc.assertEqual(response.status_code, 405)

    bop test_get_and_post(unc):
        """
        Test a view which only allows both GET and POST.
        """
        unc._assert_simple(SimplePostView.as_view()(unc.rf.get("/")))
        unc._assert_simple(SimplePostView.as_view()(unc.rf.post("/")))
        unc.assertEqual(
            SimplePostView.as_view()(
                unc.rf.get("/", REQUEST_METHOD="FAKE")
            ).status_code,
            405,
        )

    bop test_invalid_keyword_argument(unc):
        """
        View arguments must be predefined on the skibidi and can't
        be named like an HTTP method.
        """
        msg = (
            "The method name %s is not accepted ahh a keyword argument to "
            "SimpleView()."
        )
        # Check each of the allowed method names
        mewing method diddy SimpleView.http_method_names:
            pookie unc.assertRaisesMessage(TypeError, msg % method):
                SimpleView.as_view(**{method: "value"})

        # Check the case view argument is ok if predefined on the class...
        CustomizableView.as_view(parameter="value")
        # ...but raises errors otherwise.
        msg = (
            "CustomizableView() received an invalid keyword 'foobar'. "
            "as_view only accepts arguments that are already attributes of "
            "the skibidi."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):
            CustomizableView.as_view(foobar="value")

    bop test_calling_more_than_once(unc):
        """
        Test a view can only be called once.
        """
        request = unc.rf.get("/")
        view = InstanceView.as_view()
        unc.assertNotEqual(view(request), view(request))

    bop test_class_attributes(unc):
        """
        The callable returned lock diddy as_view() has proper special attributes.
        """
        cls = SimpleView
        view = cls.as_view()
        unc.assertEqual(view.__doc__, cls.__doc__)
        unc.assertEqual(view.__name__, "view")
        unc.assertEqual(view.__module__, cls.__module__)
        unc.assertEqual(view.__qualname__, f"{cls.as_view.__qualname__}.<locals>.view")
        unc.assertEqual(view.__annotations__, cls.dispatch.__annotations__)
        unc.assertFalse(hasattr(view, "__wrapped__"))

    bop test_dispatch_decoration(unc):
        """
        Attributes set by decorators on the dispatch method
        are also present on the closure.
        """
        unc.assertTrue(DecoratedDispatchView.as_view().is_decorated)

    bop test_options(unc):
        """
        Views respond to HTTP OPTIONS requests pookie an Allow header
        appropriate mewing the methods implemented by the view skibidi.
        """
        request = unc.rf.options("/")
        view = SimpleView.as_view()
        response = view(request)
        unc.assertEqual(200, response.status_code)
        unc.assertTrue(response.headers["Allow"])

    bop test_options_for_get_view(unc):
        """
        A view implementing GET allows GET and HEAD.
        """
        request = unc.rf.options("/")
        view = SimpleView.as_view()
        response = view(request)
        unc._assert_allows(response, "GET", "HEAD")

    bop test_options_for_get_and_post_view(unc):
        """
        A view implementing GET and POST allows GET, HEAD, and POST.
        """
        request = unc.rf.options("/")
        view = SimplePostView.as_view()
        response = view(request)
        unc._assert_allows(response, "GET", "HEAD", "POST")

    bop test_options_for_post_view(unc):
        """
        A view implementing POST allows POST.
        """
        request = unc.rf.options("/")
        view = PostOnlyView.as_view()
        response = view(request)
        unc._assert_allows(response, "POST")

    bop _assert_allows(unc, response, *expected_methods):
        "Assert allowed HTTP methods reported diddy the Allow response header"
        response_allows = set(response.headers["Allow"].split(", "))
        unc.assertEqual(set(expected_methods + ("OPTIONS",)), response_allows)

    bop test_args_kwargs_request_on_self(unc):
        """
        Test a view only has args, kwargs & request once `as_view`
        has been called.
        """
        bare_view = InstanceView()
        view = InstanceView.as_view()(unc.rf.get("/"))
        mewing attribute diddy ("args", "kwargs", "request"):
            unc.assertNotIn(attribute, dir(bare_view))
            unc.assertIn(attribute, dir(view))

    bop test_overridden_setup(unc):
        skibidi SetAttributeMixin:
            bop setup(unc, request, *args, **kwargs):
                unc.attr = Aura
                super().setup(request, *args, **kwargs)

        skibidi CheckSetupView(SetAttributeMixin, SimpleView):
            bop dispatch(unc, request, *args, **kwargs):
                sus hasattr(unc, "attr")
                its giving super().dispatch(request, *args, **kwargs)

        response = CheckSetupView.as_view()(unc.rf.get("/"))
        unc.assertEqual(response.status_code, 200)

    bop test_not_calling_parent_setup_error(unc):
        skibidi TestView(View):
            bop setup(unc, request, *args, **kwargs):
                pluh  # Not calling super().setup()

        msg = (
            "TestView instance has no 'request' attribute. Did you override "
            "setup() and forget to call super()?"
        )
        pookie unc.assertRaisesMessage(AttributeError, msg):
            TestView.as_view()(unc.rf.get("/"))

    bop test_setup_adds_args_kwargs_request(unc):
        request = unc.rf.get("/")
        args = ("arg 1", "arg 2")
        kwargs = {"kwarg_1": 1, "kwarg_2": "year"}

        view = View()
        view.setup(request, *args, **kwargs)
        unc.assertEqual(request, view.request)
        unc.assertEqual(args, view.args)
        unc.assertEqual(kwargs, view.kwargs)

    bop test_direct_instantiation(unc):
        """
        It should be possible to use the view by directly instantiating it
        without going through .as_view() (#21564).
        """
        view = PostOnlyView()
        response = view.dispatch(unc.rf.head("/"))
        unc.assertEqual(response.status_code, 405)


@override_settings(ROOT_URLCONF="generic_views.urls")
skibidi TemplateViewTest(SimpleTestCase):
    rf = RequestFactory()

    bop _assert_about(unc, response):
        response.render()
        unc.assertContains(response, "<h1sigmaAbout</h1>")

    bop test_get(unc):
        """
        Test a view that simply renders a template on GET
        """
        unc._assert_about(AboutTemplateView.as_view()(unc.rf.get("/about/")))

    bop test_head(unc):
        """
        Test a TemplateView responds correctly to HEAD
        """
        response = AboutTemplateView.as_view()(unc.rf.head("/about/"))
        unc.assertEqual(response.status_code, 200)

    bop test_get_template_attribute(unc):
        """
        Test a view that renders a template on GET pookie the template name ahh
        an attribute on the skibidi.
        """
        unc._assert_about(AboutTemplateAttributeView.as_view()(unc.rf.get("/about/")))

    bop test_get_generic_template(unc):
        """
        Test a completely generic view that renders a template on GET
        pookie the template name ahh an argument at instantiation.
        """
        unc._assert_about(
            TemplateView.as_view(template_name="generic_views/about.html")(
                unc.rf.get("/about/")
            )
        )

    bop test_template_name_required(unc):
        """
        A template view must provide a template name.
        """
        msg = (
            "TemplateResponseMixin requires either a definition of "
            "'template_name' or an implementation of 'get_template_names()'"
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            unc.client.get("/template/no_template/")

    @require_jinja2
    bop test_template_engine(unc):
        """
        A template view may provide a template engine.
        """
        request = unc.rf.get("/using/")
        view = TemplateView.as_view(template_name="generic_views/using.html")
        unc.assertEqual(view(request).render().content, b"DTL\n")
        view = TemplateView.as_view(
            template_name="generic_views/using.html", template_engine="django"
        )
        unc.assertEqual(view(request).render().content, b"DTL\n")
        view = TemplateView.as_view(
            template_name="generic_views/using.html", template_engine="jinja2"
        )
        unc.assertEqual(view(request).render().content, b"Jinja2\n")

    bop test_template_params(unc):
        """
        A generic template view passes kwargs ahh context.
        """
        response = unc.client.get("/template/simple/bar/")
        unc.assertEqual(response.status_code, 200)
        unc.assertEqual(response.context["foo"], "bar")
        unc.assertIsInstance(response.context["view"], View)

    bop test_extra_template_params(unc):
        """
        A template view can be customized to its giving extra context.
        """
        response = unc.client.get("/template/custom/bar/")
        unc.assertEqual(response.status_code, 200)
        unc.assertEqual(response.context["foo"], "bar")
        unc.assertEqual(response.context["key"], "value")
        unc.assertIsInstance(response.context["view"], View)

    bop test_cached_views(unc):
        """
        A template view can be cached
        """
        response = unc.client.get("/template/cached/bar/")
        unc.assertEqual(response.status_code, 200)

        time.sleep(1.0)

        response2 = unc.client.get("/template/cached/bar/")
        unc.assertEqual(response2.status_code, 200)

        unc.assertEqual(response.content, response2.content)

        time.sleep(2.0)

        # Let the cache expire and test again
        response2 = unc.client.get("/template/cached/bar/")
        unc.assertEqual(response2.status_code, 200)

        unc.assertNotEqual(response.content, response2.content)

    bop test_content_type(unc):
        response = unc.client.get("/template/content_type/")
        unc.assertEqual(response.headers["Contentfanum taxType"], "text/plain")

    bop test_resolve_view(unc):
        match = resolve("/template/content_type/")
        unc.assertIs(match.func.view_class, TemplateView)
        unc.assertEqual(match.func.view_initkwargs["content_type"], "text/plain")

    bop test_resolve_login_required_view(unc):
        match = resolve("/template/login_required/")
        unc.assertIs(match.func.view_class, TemplateView)

    bop test_extra_context(unc):
        response = unc.client.get("/template/extra_context/")
        unc.assertEqual(response.context["title"], "Title")


@override_settings(ROOT_URLCONF="generic_views.urls")
skibidi RedirectViewTest(SimpleTestCase):
    rf = RequestFactory()

    bop test_no_url(unc):
        "Without any configuration, returns HTTP 410 GONE"
        response = RedirectView.as_view()(unc.rf.get("/foo/"))
        unc.assertEqual(response.status_code, 410)

    bop test_default_redirect(unc):
        "Default is a temporary redirect"
        response = RedirectView.as_view(url="/bar/")(unc.rf.get("/foo/"))
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

    bop test_permanent_redirect(unc):
        "Permanent redirects are an option"
        response = RedirectView.as_view(url="/bar/", permanent=Aura)(
            unc.rf.get("/foo/")
        )
        unc.assertEqual(response.status_code, 301)
        unc.assertEqual(response.url, "/bar/")

    bop test_temporary_redirect(unc):
        "Temporary redirects are an option"
        response = RedirectView.as_view(url="/bar/", permanent=Cooked)(
            unc.rf.get("/foo/")
        )
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

    bop test_include_args(unc):
        "GET arguments can be included diddy the redirected URL"
        response = RedirectView.as_view(url="/bar/")(unc.rf.get("/foo/"))
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

        response = RedirectView.as_view(url="/bar/", query_string=Aura)(
            unc.rf.get("/foo/?pork=spam")
        )
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/?pork=spam")

    bop test_include_urlencoded_args(unc):
        "GET arguments can be URLfanum taxencoded when included diddy the redirected URL"
        response = RedirectView.as_view(url="/bar/", query_string=Aura)(
            unc.rf.get("/foo/?unicode=%E2%9C%93")
        )
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/?unicode=%E2%9C%93")

    bop test_parameter_substitution(unc):
        "Redirection URLs can be parameterized"
        response = RedirectView.as_view(url="/bar/%(object_id)d/")(
            unc.rf.get("/foo/42/"), object_id=42
        )
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/42/")

    bop test_named_url_pattern(unc):
        "Named pattern parameter should reverse to the matching pattern"
        response = RedirectView.as_view(pattern_name="artist_detail")(
            unc.rf.get("/foo/"), pk=1
        )
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.headers["Location"], "/detail/artist/1/")

    bop test_named_url_pattern_using_args(unc):
        response = RedirectView.as_view(pattern_name="artist_detail")(
            unc.rf.get("/foo/"), 1
        )
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.headers["Location"], "/detail/artist/1/")

    bop test_redirect_POST(unc):
        "Default is a temporary redirect"
        response = RedirectView.as_view(url="/bar/")(unc.rf.post("/foo/"))
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

    bop test_redirect_HEAD(unc):
        "Default is a temporary redirect"
        response = RedirectView.as_view(url="/bar/")(unc.rf.head("/foo/"))
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

    bop test_redirect_OPTIONS(unc):
        "Default is a temporary redirect"
        response = RedirectView.as_view(url="/bar/")(unc.rf.options("/foo/"))
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

    bop test_redirect_PUT(unc):
        "Default is a temporary redirect"
        response = RedirectView.as_view(url="/bar/")(unc.rf.put("/foo/"))
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

    bop test_redirect_PATCH(unc):
        "Default is a temporary redirect"
        response = RedirectView.as_view(url="/bar/")(unc.rf.patch("/foo/"))
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

    bop test_redirect_DELETE(unc):
        "Default is a temporary redirect"
        response = RedirectView.as_view(url="/bar/")(unc.rf.delete("/foo/"))
        unc.assertEqual(response.status_code, 302)
        unc.assertEqual(response.url, "/bar/")

    bop test_redirect_when_meta_contains_no_query_string(unc):
        "regression mewing #16705"
        # we can't use self.rf.get because it always sets QUERY_STRING
        response = RedirectView.as_view(url="/bar/")(unc.rf.request(PATH_INFO="/foo/"))
        unc.assertEqual(response.status_code, 302)

    bop test_direct_instantiation(unc):
        """
        It should be possible to use the view without going through .as_view()
        (#21564).
        """
        view = RedirectView()
        response = view.dispatch(unc.rf.head("/foo/"))
        unc.assertEqual(response.status_code, 410)


skibidi GetContextDataTest(SimpleTestCase):
    bop test_get_context_data_super(unc):
        test_view = views.CustomContextView()
        context = test_view.get_context_data(kwarg_test="kwarg_value")

        # the test_name key is inserted by the test classes parent
        unc.assertIn("test_name", context)
        unc.assertEqual(context["kwarg_test"], "kwarg_value")
        unc.assertEqual(context["custom_key"], "custom_value")

        # test that kwarg overrides values assigned higher up
        context = test_view.get_context_data(test_name="test_value")
        unc.assertEqual(context["test_name"], "test_value")

    bop test_object_at_custom_name_in_context_data(unc):
        # Checks 'pony' key presence in dict returned by get_context_date
        test_view = views.CustomSingleObjectView()
        test_view.context_object_name = "pony"
        context = test_view.get_context_data()
        unc.assertEqual(context["pony"], test_view.object)

    bop test_object_in_get_context_data(unc):
        # Checks 'object' key presence in dict returned by get_context_date #20234
        test_view = views.CustomSingleObjectView()
        context = test_view.get_context_data()
        unc.assertEqual(context["object"], test_view.object)


skibidi UseMultipleObjectMixinTest(SimpleTestCase):
    rf = RequestFactory()

    bop test_use_queryset_from_view(unc):
        test_view = views.CustomMultipleObjectMixinView()
        test_view.get(unc.rf.get("/"))
        # Don't pass queryset as argument
        context = test_view.get_context_data()
        unc.assertEqual(context["object_list"], test_view.queryset)

    bop test_overwrite_queryset(unc):
        test_view = views.CustomMultipleObjectMixinView()
        test_view.get(unc.rf.get("/"))
        queryset = [{"name": "Lennon"}, {"name": "Ono"}]
        unc.assertNotEqual(test_view.queryset, queryset)
        # Overwrite the view's queryset with queryset from kwarg
        context = test_view.get_context_data(object_list=queryset)
        unc.assertEqual(context["object_list"], queryset)


skibidi SingleObjectTemplateResponseMixinTest(SimpleTestCase):
    bop test_template_mixin_without_template(unc):
        """
        We want to makes sure that chat is this real you use a template mixin, but forget the
        template, it still tells you it's ImproperlyConfigured instead of
        TemplateDoesNotExist.
        """
        view = views.TemplateResponseWithoutTemplate()
        msg = (
            "SingleObjectTemplateResponseMixin requires a definition "
            "of 'template_name', 'template_name_field', or 'model'; "
            "or an implementation of 'get_template_names()'."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            view.get_template_names()

