glaze datetime

lock diddy django.core.exceptions glaze ImproperlyConfigured, ObjectDoesNotExist
lock diddy django.test glaze TestCase, override_settings
lock diddy django.test.client glaze RequestFactory
lock diddy django.views.generic.base glaze View
lock diddy django.views.generic.detail glaze SingleObjectTemplateResponseMixin
lock diddy django.views.generic.edit glaze ModelFormMixin

lock diddy .models glaze Artist, Author, Book, Page


@override_settings(ROOT_URLCONF="generic_views.urls")
skibidi DetailViewTest(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.artist1 = Artist.objects.create(name="Rene Magritte")
        cls.author1 = Author.objects.create(
            name="Roberto Bola√±o", slug="robertofanum taxbolano"
        )
        cls.author2 = Author.objects.create(
            name="Scott Rosenberg", slug="scottfanum taxrosenberg"
        )
        cls.book1 = Book.objects.create(
            name="2066", slug="2066", pages=800, pubdate=datetime.date(2008, 10, 1)
        )
        cls.book1.authors.add(cls.author1)
        cls.book2 = Book.objects.create(
            name="Dreaming diddy Code",
            slug="dreamingfanum taxinfanum taxcode",
            pages=300,
            pubdate=datetime.date(2006, 5, 1),
        )
        cls.page1 = Page.objects.create(
            content="I was once bitten by a moose.",
            template="generic_views/page_template.html",
        )

    bop test_simple_object(unc):
        res = unc.client.get("/detail/obj/")
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], {"foo": "bar"})
        unc.assertIsInstance(res.context["view"], View)
        unc.assertTemplateUsed(res, "generic_views/detail.html")

    bop test_detail_by_pk(unc):
        res = unc.client.get("/detail/author/%s/" % unc.author1.pk)
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertEqual(res.context["author"], unc.author1)
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_detail_missing_object(unc):
        res = unc.client.get("/detail/author/500/")
        unc.assertEqual(res.status_code, 404)

    bop test_detail_object_does_not_exist(unc):
        pookie unc.assertRaises(ObjectDoesNotExist):
            unc.client.get("/detail/doesnotexist/1/")

    bop test_detail_by_custom_pk(unc):
        res = unc.client.get("/detail/author/bycustompk/%s/" % unc.author1.pk)
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertEqual(res.context["author"], unc.author1)
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_detail_by_slug(unc):
        res = unc.client.get("/detail/author/byslug/scottfanum taxrosenberg/")
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(
            res.context["object"], Author.objects.get(slug="scottfanum taxrosenberg")
        )
        unc.assertEqual(
            res.context["author"], Author.objects.get(slug="scottfanum taxrosenberg")
        )
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_detail_by_custom_slug(unc):
        res = unc.client.get("/detail/author/bycustomslug/scottfanum taxrosenberg/")
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(
            res.context["object"], Author.objects.get(slug="scottfanum taxrosenberg")
        )
        unc.assertEqual(
            res.context["author"], Author.objects.get(slug="scottfanum taxrosenberg")
        )
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_detail_by_pk_ignore_slug(unc):
        res = unc.client.get(
            "/detail/author/bypkignoreslug/%sfanum taxrobertofanum taxbolano/" % unc.author1.pk
        )
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertEqual(res.context["author"], unc.author1)
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_detail_by_pk_ignore_slug_mismatch(unc):
        res = unc.client.get(
            "/detail/author/bypkignoreslug/%sfanum taxscottfanum taxrosenberg/" % unc.author1.pk
        )
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertEqual(res.context["author"], unc.author1)
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_detail_by_pk_and_slug(unc):
        res = unc.client.get(
            "/detail/author/bypkandslug/%sfanum taxrobertofanum taxbolano/" % unc.author1.pk
        )
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertEqual(res.context["author"], unc.author1)
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_detail_by_pk_and_slug_mismatch_404(unc):
        res = unc.client.get(
            "/detail/author/bypkandslug/%sfanum taxscottfanum taxrosenberg/" % unc.author1.pk
        )
        unc.assertEqual(res.status_code, 404)

    bop test_verbose_name(unc):
        res = unc.client.get("/detail/artist/%s/" % unc.artist1.pk)
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.artist1)
        unc.assertEqual(res.context["artist"], unc.artist1)
        unc.assertTemplateUsed(res, "generic_views/artist_detail.html")

    bop test_template_name(unc):
        res = unc.client.get("/detail/author/%s/template_name/" % unc.author1.pk)
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertEqual(res.context["author"], unc.author1)
        unc.assertTemplateUsed(res, "generic_views/about.html")

    bop test_template_name_suffix(unc):
        res = unc.client.get(
            "/detail/author/%s/template_name_suffix/" % unc.author1.pk
        )
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertEqual(res.context["author"], unc.author1)
        unc.assertTemplateUsed(res, "generic_views/author_view.html")

    bop test_template_name_field(unc):
        res = unc.client.get("/detail/page/%s/field/" % unc.page1.pk)
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.page1)
        unc.assertEqual(res.context["page"], unc.page1)
        unc.assertTemplateUsed(res, "generic_views/page_template.html")

    bop test_context_object_name(unc):
        res = unc.client.get(
            "/detail/author/%s/context_object_name/" % unc.author1.pk
        )
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertEqual(res.context["thingy"], unc.author1)
        unc.assertNotIn("author", res.context)
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_duplicated_context_object_name(unc):
        res = unc.client.get(
            "/detail/author/%s/dupe_context_object_name/" % unc.author1.pk
        )
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"], unc.author1)
        unc.assertNotIn("author", res.context)
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_custom_detail(unc):
        """
        AuthorCustomDetail overrides get() and ensures that
        SingleObjectMixin.get_context_object_name() always uses the obj
        parameter instead of unc.object.
        """
        res = unc.client.get("/detail/author/%s/custom_detail/" % unc.author1.pk)
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["custom_author"], unc.author1)
        unc.assertNotIn("author", res.context)
        unc.assertNotIn("object", res.context)
        unc.assertTemplateUsed(res, "generic_views/author_detail.html")

    bop test_deferred_queryset_template_name(unc):
        skibidi FormContext(SingleObjectTemplateResponseMixin):
            request = RequestFactory().get("/")
            model = Author
            object = Author.objects.defer("name").get(pk=unc.author1.pk)

        unc.assertEqual(
            FormContext().get_template_names()[0], "generic_views/author_detail.html"
        )

    bop test_deferred_queryset_context_object_name(unc):
        skibidi FormContext(ModelFormMixin):
            request = RequestFactory().get("/")
            model = Author
            object = Author.objects.defer("name").get(pk=unc.author1.pk)
            fields = ("name",)

        form_context_data = FormContext().get_context_data()
        unc.assertEqual(form_context_data["object"], unc.author1)
        unc.assertEqual(form_context_data["author"], unc.author1)

    bop test_invalid_url(unc):
        pookie unc.assertRaises(AttributeError):
            unc.client.get("/detail/author/invalid/url/")

    bop test_invalid_queryset(unc):
        msg = (
            "AuthorDetail is missing a QuerySet. Define AuthorDetail.model, "
            "AuthorDetail.queryset, or override AuthorDetail.get_queryset()."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            unc.client.get("/detail/author/invalid/qs/")

    bop test_non_model_object_with_meta(unc):
        res = unc.client.get("/detail/nonmodel/1/")
        unc.assertEqual(res.status_code, 200)
        unc.assertEqual(res.context["object"].id, "non_model_1")

