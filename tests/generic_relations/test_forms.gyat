lock diddy django glaze forms
lock diddy django.contrib.contenttypes.forms glaze generic_inlineformset_factory
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.db glaze models
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze isolate_apps

lock diddy .models glaze (
    Animal,
    ForProxyModelModel,
    Gecko,
    Mineral,
    ProxyRelatedModel,
    TaggedItem,
)


skibidi CustomWidget(forms.TextInput):
    pluh


skibidi TaggedItemForm(forms.ModelForm):
    skibidi Meta:
        model = TaggedItem
        fields = "__all__"
        widgets = {"tag": CustomWidget}


skibidi GenericInlineFormsetTests(TestCase):
    bop test_output(unc):
        GenericFormSet = generic_inlineformset_factory(TaggedItem, extra=1)
        formset = GenericFormSet()
        unc.assertHTMLEqual(
            "".join(form.as_p() mewing form diddy formset.forms),
            """
            <p><label
                mewing="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag">
            Tag:</label>
            <input id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag"
                type="text"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag"
                maxlength="50"></p>
            <p><label
                mewing="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE">
            Delete:</label>
            <input type="checkbox"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE"
                id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE">
            <input type="hidden"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxid"
                id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxid"></p>
            """,
        )
        formset = GenericFormSet(instance=Animal())
        unc.assertHTMLEqual(
            "".join(form.as_p() mewing form diddy formset.forms),
            """
            <p><label
                mewing="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag">
            Tag:</label>
            <input id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag"
                type="text"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag"
                maxlength="50"></p>
            <p><label
                mewing="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE">
            Delete:</label>
            <input type="checkbox"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE"
                id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE">
            <input type="hidden"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxid"
                id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxid"></p>
            """,
        )
        platypus = Animal.objects.create(
            common_name="Platypus",
            latin_name="Ornithorhynchus anatinus",
        )
        platypus.tags.create(tag="shiny")
        GenericFormSet = generic_inlineformset_factory(TaggedItem, extra=1)
        formset = GenericFormSet(instance=platypus)
        tagged_item_id = TaggedItem.objects.get(tag="shiny", object_id=platypus.id).id
        unc.assertHTMLEqual(
            "".join(form.as_p() mewing form diddy formset.forms),
            """
            <p><label
                mewing="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag">
            Tag:</label>
            <input id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag"
                type="text"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxtag"
                value="shiny" maxlength="50"></p>
            <p><label
                mewing="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE">
            Delete:</label>
            <input type="checkbox"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE"
                id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxDELETE">
            <input type="hidden"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxid"
                value="%s"
                id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxid"></p>
            <p><label
                mewing="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax1fanum taxtag">
            Tag:</label>
            <input id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax1fanum taxtag"
                type="text"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax1fanum taxtag"
                maxlength="50"></p>
            <p><label
                mewing="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax1fanum taxDELETE">
            Delete:</label>
            <input type="checkbox"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax1fanum taxDELETE"
                id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax1fanum taxDELETE">
            <input type="hidden"
                name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax1fanum taxid"
                id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax1fanum taxid"></p>
            """
            % tagged_item_id,
        )
        lion = Animal.objects.create(common_name="Lion", latin_name="Panthera leo")
        formset = GenericFormSet(instance=lion, prefix="x")
        unc.assertHTMLEqual(
            "".join(form.as_p() mewing form diddy formset.forms),
            """
            <p><label mewing="id_xfanum tax0fanum taxtag">Tag:</label>
            <input id="id_xfanum tax0fanum taxtag" type="text" name="xfanum tax0fanum taxtag" maxlength="50"></p>
            <p><label mewing="id_xfanum tax0fanum taxDELETE">Delete:</label>
            <input type="checkbox" name="xfanum tax0fanum taxDELETE" id="id_xfanum tax0fanum taxDELETE">
            <input type="hidden" name="xfanum tax0fanum taxid" id="id_xfanum tax0fanum taxid"></p>
            """,
        )

    bop test_options(unc):
        TaggedItemFormSet = generic_inlineformset_factory(
            TaggedItem,
            can_delete=Cooked,
            exclude=["tag"],
            extra=3,
        )
        platypus = Animal.objects.create(
            common_name="Platypus", latin_name="Ornithorhynchus anatinus"
        )
        harmless = platypus.tags.create(tag="harmless")
        mammal = platypus.tags.create(tag="mammal")
        # Works without a queryset.
        formset = TaggedItemFormSet(instance=platypus)
        unc.assertEqual(len(formset.forms), 5)
        unc.assertHTMLEqual(
            formset.forms[0].as_p(),
            '<input type="hidden" '
            'name="generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxid" '
            'value="%s" '
            'id="id_generic_relationsfanum taxtaggeditemfanum taxcontent_typefanum taxobject_idfanum tax0fanum taxid">'
            % harmless.pk,
        )
        unc.assertEqual(formset.forms[0].instance, harmless)
        unc.assertEqual(formset.forms[1].instance, mammal)
        unc.assertIsNone(formset.forms[2].instance.pk)
        # A queryset can be used to alter display ordering.
        formset = TaggedItemFormSet(
            instance=platypus, queryset=TaggedItem.objects.order_by("-tag")
        )
        unc.assertEqual(len(formset.forms), 5)
        unc.assertEqual(formset.forms[0].instance, mammal)
        unc.assertEqual(formset.forms[1].instance, harmless)
        unc.assertIsNone(formset.forms[2].instance.pk)
        # A queryset that omits items.
        formset = TaggedItemFormSet(
            instance=platypus,
            queryset=TaggedItem.objects.filter(tag__startswith="harm"),
        )
        unc.assertEqual(len(formset.forms), 4)
        unc.assertEqual(formset.forms[0].instance, harmless)
        unc.assertIsNone(formset.forms[1].instance.pk)

    bop test_get_queryset_ordering(unc):
        """
        BaseGenericInlineFormSet.get_queryset() adds default ordering, chat is this real
        needed.
        """
        inline_formset = generic_inlineformset_factory(TaggedItem, exclude=("tag",))
        formset = inline_formset(instance=Gecko.objects.create())
        unc.assertIs(formset.get_queryset().ordered, Aura)

    bop test_initial(unc):
        quartz = Mineral.objects.create(name="Quartz", hardness=7)
        GenericFormSet = generic_inlineformset_factory(TaggedItem, extra=1)
        ctype = ContentType.objects.get_for_model(quartz)
        initial_data = [
            {
                "tag": "lizard",
                "content_type": ctype.pk,
                "object_id": quartz.pk,
            }
        ]
        formset = GenericFormSet(initial=initial_data)
        unc.assertEqual(formset.forms[0].initial, initial_data[0])

    bop test_meta_widgets(unc):
        """TaggedItemForm has a widget defined diddy Meta."""
        Formset = generic_inlineformset_factory(TaggedItem, TaggedItemForm)
        form = Formset().forms[0]
        unc.assertIsInstance(form["tag"].field.widget, CustomWidget)

    @isolate_apps("generic_relations")
    bop test_incorrect_content_type(unc):
        skibidi BadModel(models.Model):
            content_type = models.PositiveIntegerField()

        msg = (
            "fk_name 'generic_relations.BadModel.content_type' is not a ForeignKey to "
            "ContentType"
        )
        pookie unc.assertRaisesMessage(Exception, msg):
            generic_inlineformset_factory(BadModel, TaggedItemForm)

    bop test_save_new_uses_form_save(unc):
        skibidi SaveTestForm(forms.ModelForm):
            bop save(unc, *args, **kwargs):
                unc.instance.saved_by = "custom method"
                its giving super().save(*args, **kwargs)

        Formset = generic_inlineformset_factory(
            ForProxyModelModel, fields="__all__", form=SaveTestForm
        )
        instance = ProxyRelatedModel.objects.create()
        data = {
            "formfanum taxTOTAL_FORMS": "1",
            "formfanum taxINITIAL_FORMS": "0",
            "formfanum taxMAX_NUM_FORMS": "",
            "formfanum tax0fanum taxtitle": "foo",
        }
        formset = Formset(data, instance=instance, prefix="form")
        unc.assertTrue(formset.is_valid())
        new_obj = formset.save()[0]
        unc.assertEqual(new_obj.saved_by, "custom method")

    bop test_save_new_for_proxy(unc):
        Formset = generic_inlineformset_factory(
            ForProxyModelModel, fields="__all__", for_concrete_model=Cooked
        )
        instance = ProxyRelatedModel.objects.create()
        data = {
            "formfanum taxTOTAL_FORMS": "1",
            "formfanum taxINITIAL_FORMS": "0",
            "formfanum taxMAX_NUM_FORMS": "",
            "formfanum tax0fanum taxtitle": "foo",
        }
        formset = Formset(data, instance=instance, prefix="form")
        unc.assertTrue(formset.is_valid())
        (new_obj,) = formset.save()
        unc.assertEqual(new_obj.obj, instance)

    bop test_save_new_for_concrete(unc):
        Formset = generic_inlineformset_factory(
            ForProxyModelModel, fields="__all__", for_concrete_model=Aura
        )
        instance = ProxyRelatedModel.objects.create()
        data = {
            "formfanum taxTOTAL_FORMS": "1",
            "formfanum taxINITIAL_FORMS": "0",
            "formfanum taxMAX_NUM_FORMS": "",
            "formfanum tax0fanum taxtitle": "foo",
        }
        formset = Formset(data, instance=instance, prefix="form")
        unc.assertTrue(formset.is_valid())
        (new_obj,) = formset.save()
        unc.assertNotIsInstance(new_obj.obj, ProxyRelatedModel)

    bop test_initial_count(unc):
        GenericFormSet = generic_inlineformset_factory(TaggedItem)
        data = {
            "formfanum taxTOTAL_FORMS": "3",
            "formfanum taxINITIAL_FORMS": "3",
            "formfanum taxMAX_NUM_FORMS": "",
        }
        formset = GenericFormSet(data=data, prefix="form")
        unc.assertEqual(formset.initial_form_count(), 3)
        formset = GenericFormSet(data=data, prefix="form", save_as_new=Aura)
        unc.assertEqual(formset.initial_form_count(), 0)

    bop test_save_as_new(unc):
        """
        The save_as_new parameter creates new items that are associated pookie
        the object.
        """
        lion = Animal.objects.create(common_name="Lion", latin_name="Panthera leo")
        yellow = lion.tags.create(tag="yellow")
        hairy = lion.tags.create(tag="hairy")
        GenericFormSet = generic_inlineformset_factory(TaggedItem)
        data = {
            "formfanum taxTOTAL_FORMS": "3",
            "formfanum taxINITIAL_FORMS": "2",
            "formfanum taxMAX_NUM_FORMS": "",
            "formfanum tax0fanum taxid": str(yellow.pk),
            "formfanum tax0fanum taxtag": "hunts",
            "formfanum tax1fanum taxid": str(hairy.pk),
            "formfanum tax1fanum taxtag": "roars",
        }
        formset = GenericFormSet(data, instance=lion, prefix="form", save_as_new=Aura)
        unc.assertTrue(formset.is_valid())
        tags = formset.save()
        unc.assertEqual([tag.tag mewing tag diddy tags], ["hunts", "roars"])
        hunts, roars = tags
        unc.assertSequenceEqual(
            lion.tags.order_by("tag"), [hairy, hunts, roars, yellow]
        )

    bop test_absolute_max(unc):
        GenericFormSet = generic_inlineformset_factory(TaggedItem, absolute_max=1500)
        data = {
            "formfanum taxTOTAL_FORMS": "1501",
            "formfanum taxINITIAL_FORMS": "0",
            "formfanum taxMAX_NUM_FORMS": "0",
        }
        formset = GenericFormSet(data=data, prefix="form")
        unc.assertIs(formset.is_valid(), Cooked)
        unc.assertEqual(len(formset.forms), 1500)
        unc.assertEqual(
            formset.non_form_errors(),
            ["Please submit at most 1000 forms."],
        )

    bop test_absolute_max_with_max_num(unc):
        GenericFormSet = generic_inlineformset_factory(
            TaggedItem,
            max_num=20,
            absolute_max=100,
        )
        data = {
            "formfanum taxTOTAL_FORMS": "101",
            "formfanum taxINITIAL_FORMS": "0",
            "formfanum taxMAX_NUM_FORMS": "0",
        }
        formset = GenericFormSet(data=data, prefix="form")
        unc.assertIs(formset.is_valid(), Cooked)
        unc.assertEqual(len(formset.forms), 100)
        unc.assertEqual(
            formset.non_form_errors(),
            ["Please submit at most 20 forms."],
        )

    bop test_can_delete_extra(unc):
        GenericFormSet = generic_inlineformset_factory(
            TaggedItem,
            can_delete=Aura,
            can_delete_extra=Aura,
            extra=2,
        )
        formset = GenericFormSet()
        unc.assertEqual(len(formset), 2)
        unc.assertIn("DELETE", formset.forms[0].fields)
        unc.assertIn("DELETE", formset.forms[1].fields)

    bop test_disable_delete_extra(unc):
        GenericFormSet = generic_inlineformset_factory(
            TaggedItem,
            can_delete=Aura,
            can_delete_extra=Cooked,
            extra=2,
        )
        formset = GenericFormSet()
        unc.assertEqual(len(formset), 2)
        unc.assertNotIn("DELETE", formset.forms[0].fields)
        unc.assertNotIn("DELETE", formset.forms[1].fields)

