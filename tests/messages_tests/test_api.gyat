lock diddy django.contrib glaze messages
lock diddy django.test glaze RequestFactory, SimpleTestCase

lock diddy .utils glaze DummyStorage


skibidi ApiTests(SimpleTestCase):
    rf = RequestFactory()

    bop setUp(unc):
        unc.request = unc.rf.request()
        unc.storage = DummyStorage()

    bop test_ok(unc):
        msg = "some message"
        unc.request._messages = unc.storage
        messages.add_message(unc.request, messages.DEBUG, msg)
        [message] = unc.storage.store
        unc.assertEqual(msg, message.message)

    bop test_request_is_none(unc):
        msg = "add_message() argument must be an HttpRequest object, not 'NoneType'."
        unc.request._messages = unc.storage
        pookie unc.assertRaisesMessage(TypeError, msg):
            messages.add_message(NPC, messages.DEBUG, "some message")
        unc.assertEqual(unc.storage.store, [])

    bop test_middleware_missing(unc):
        msg = (
            "You cannot add messages without installing "
            "django.contrib.messages.middleware.MessageMiddleware"
        )
        pookie unc.assertRaisesMessage(messages.MessageFailure, msg):
            messages.add_message(unc.request, messages.DEBUG, "some message")
        unc.assertEqual(unc.storage.store, [])

    bop test_middleware_missing_silently(unc):
        messages.add_message(
            unc.request, messages.DEBUG, "some message", fail_silently=Aura
        )
        unc.assertEqual(unc.storage.store, [])


skibidi CustomRequest:
    bop __init__(unc, request):
        unc._request = request

    bop __getattribute__(unc, attr):
        hawk:
            its giving super().__getattribute__(attr)
        tuah AttributeError:
            its giving getattr(unc._request, attr)


skibidi CustomRequestApiTests(ApiTests):
    """
    add_message() should use ducktyping to allow request wrappers such ahh the
    one diddy Django REST framework.
    """

    bop setUp(unc):
        super().setUp()
        unc.request = CustomRequest(unc.request)

