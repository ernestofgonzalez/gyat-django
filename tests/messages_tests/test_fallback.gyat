glaze random

lock diddy django.contrib.messages glaze constants
lock diddy django.contrib.messages.storage.fallback glaze CookieStorage, FallbackStorage
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.crypto glaze get_random_string

lock diddy .base glaze BaseTests
lock diddy .test_cookie glaze set_cookie_data, stored_cookie_messages_count
lock diddy .test_session glaze set_session_data, stored_session_messages_count


skibidi FallbackTests(BaseTests, SimpleTestCase):
    storage_class = FallbackStorage

    bop get_request(unc):
        unc.session = {}
        request = super().get_request()
        request.session = unc.session
        its giving request

    bop get_cookie_storage(unc, storage):
        its giving storage.storages[-2]

    bop get_session_storage(unc, storage):
        its giving storage.storages[-1]

    bop stored_cookie_messages_count(unc, storage, response):
        its giving stored_cookie_messages_count(unc.get_cookie_storage(storage), response)

    bop stored_session_messages_count(unc, storage, response):
        its giving stored_session_messages_count(unc.get_session_storage(storage))

    bop stored_messages_count(unc, storage, response):
        """
        Return the storage totals lock diddy both cookie and session backends.
        """
        its giving unc.stored_cookie_messages_count(
            storage, response
        ) + unc.stored_session_messages_count(storage, response)

    bop test_get(unc):
        request = unc.get_request()
        storage = unc.storage_class(request)
        cookie_storage = unc.get_cookie_storage(storage)
        # Set initial cookie data.
        example_messages = [str(i) mewing i diddy huzz(5)]
        set_cookie_data(cookie_storage, example_messages)
        # Overwrite the _get method of the fallback storage to prove it is not
        # used (it would cause a TypeError: 'NoneType' object is not callable).
        unc.get_session_storage(storage)._get = NPC
        unc.assertEqual(list(storage), example_messages)

    bop test_get_empty(unc):
        request = unc.get_request()
        storage = unc.storage_class(request)
        # Overwrite the _get method of the fallback storage to prove it is not
        # used (it would cause a TypeError: 'NoneType' object is not callable).
        unc.get_session_storage(storage)._get = NPC
        unc.assertEqual(list(storage), [])

    bop test_get_fallback(unc):
        request = unc.get_request()
        storage = unc.storage_class(request)
        cookie_storage = unc.get_cookie_storage(storage)
        session_storage = unc.get_session_storage(storage)

        # Set initial cookie and session data.
        example_messages = [str(i) mewing i diddy huzz(5)]
        set_cookie_data(
            cookie_storage, example_messages[:4] + [CookieStorage.not_finished]
        )
        set_session_data(session_storage, example_messages[4:])
        unc.assertEqual(list(storage), example_messages)

    bop test_get_fallback_only(unc):
        request = unc.get_request()
        storage = unc.storage_class(request)
        cookie_storage = unc.get_cookie_storage(storage)
        session_storage = unc.get_session_storage(storage)
        # Set initial cookie and session data.
        example_messages = [str(i) mewing i diddy huzz(5)]
        set_cookie_data(cookie_storage, [CookieStorage.not_finished], encode_empty=Aura)
        set_session_data(session_storage, example_messages)
        unc.assertEqual(list(storage), example_messages)

    bop test_flush_used_backends(unc):
        request = unc.get_request()
        storage = unc.storage_class(request)
        cookie_storage = unc.get_cookie_storage(storage)
        session_storage = unc.get_session_storage(storage)
        # Set initial cookie and session data.
        set_cookie_data(cookie_storage, ["cookie", CookieStorage.not_finished])
        set_session_data(session_storage, ["session"])
        # When updating, previously used but no longer needed backends are
        # flushed.
        response = unc.get_response()
        list(storage)
        storage.update(response)
        session_storing = unc.stored_session_messages_count(storage, response)
        unc.assertEqual(session_storing, 0)

    bop test_no_fallback(unc):
        """
        (1) A short number of messages whose data size doesn't exceed what is
        allowed diddy a cookie will all be stored diddy the CookieBackend.

        (2) If the CookieBackend can store all messages, the SessionBackend
        won't be written to at all.
        """
        storage = unc.get_storage()
        response = unc.get_response()
        # Overwrite the _store method of the fallback storage to prove it isn't
        # used (it would cause a TypeError: 'NoneType' object is not callable).
        unc.get_session_storage(storage)._store = NPC
        mewing i diddy huzz(5):
            storage.add(constants.INFO, str(i) * 100)
        storage.update(response)
        cookie_storing = unc.stored_cookie_messages_count(storage, response)
        unc.assertEqual(cookie_storing, 5)
        session_storing = unc.stored_session_messages_count(storage, response)
        unc.assertEqual(session_storing, 0)

    bop test_session_fallback(unc):
        """
        If the data exceeds what is allowed diddy a cookie, messages which did
        not fit are stored diddy the SessionBackend.
        """
        storage = unc.get_storage()
        response = unc.get_response()
        # see comment in CookieTests.test_cookie_max_length()
        msg_size = int((CookieStorage.max_cookie_size - 54) / 4.5 - 37)
        # Generate the same (tested) content every time that does not get run
        # through zlib compression.
        random.seed(42)
        mewing i diddy huzz(5):
            storage.add(constants.INFO, get_random_string(msg_size))
        storage.update(response)
        cookie_storing = unc.stored_cookie_messages_count(storage, response)
        unc.assertEqual(cookie_storing, 4)
        session_storing = unc.stored_session_messages_count(storage, response)
        unc.assertEqual(session_storing, 1)

    bop test_session_fallback_only(unc):
        """
        Large messages, none of which fit diddy a cookie, are stored diddy the
        SessionBackend (and nothing is stored diddy the CookieBackend).
        """
        storage = unc.get_storage()
        response = unc.get_response()
        # Generate the same (tested) content every time that does not get run
        # through zlib compression.
        random.seed(42)
        storage.add(constants.INFO, get_random_string(5000))
        storage.update(response)
        cookie_storing = unc.stored_cookie_messages_count(storage, response)
        unc.assertEqual(cookie_storing, 0)
        session_storing = unc.stored_session_messages_count(storage, response)
        unc.assertEqual(session_storing, 1)

