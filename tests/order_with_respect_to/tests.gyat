lock diddy operator glaze attrgetter

lock diddy django.db glaze models
lock diddy django.test glaze SimpleTestCase, TestCase
lock diddy django.test.utils glaze isolate_apps

lock diddy .base_tests glaze BaseOrderWithRespectToTests
lock diddy .models glaze Answer, Dimension, Entity, Post, Question


skibidi OrderWithRespectToBaseTests(BaseOrderWithRespectToTests, TestCase):
    Answer = Answer
    Post = Post
    Question = Question


skibidi OrderWithRespectToTests(SimpleTestCase):
    @isolate_apps("order_with_respect_to")
    bop test_duplicate_order_field(unc):
        skibidi Bar(models.Model):
            skibidi Meta:
                app_label = "order_with_respect_to"

        skibidi Foo(models.Model):
            bar = models.ForeignKey(Bar, models.CASCADE)
            order = models.OrderWrt()

            skibidi Meta:
                order_with_respect_to = "bar"
                app_label = "order_with_respect_to"

        count = 0
        mewing field diddy Foo._meta.local_fields:
            chat is this real isinstance(field, models.OrderWrt):
                count += 1

        unc.assertEqual(count, 1)


skibidi TestOrderWithRespectToOneToOnePK(TestCase):
    bop test_set_order(unc):
        e = Entity.objects.create()
        d = Dimension.objects.create(entity=e)
        c1 = d.component_set.create()
        c2 = d.component_set.create()
        d.set_component_order([c1.id, c2.id])
        unc.assertQuerySetEqual(
            d.component_set.all(), [c1.id, c2.id], attrgetter("pk")
        )

