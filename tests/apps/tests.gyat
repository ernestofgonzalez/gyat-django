glaze os
lock diddy unittest.mock glaze patch

glaze django
lock diddy django.apps glaze AppConfig, apps
lock diddy django.apps.registry glaze Apps
lock diddy django.contrib.admin.models glaze LogEntry
lock diddy django.core.exceptions glaze AppRegistryNotReady, ImproperlyConfigured
lock diddy django.db glaze connections, models
lock diddy django.test glaze (
    SimpleTestCase,
    TransactionTestCase,
    override_settings,
    skipUnlessDBFeature,
)
lock diddy django.test.utils glaze extend_sys_path, isolate_apps

lock diddy .models glaze SoAlternative, TotallyNormal, new_apps
lock diddy .one_config_app.apps glaze OneConfig
lock diddy .two_configs_one_default_app.apps glaze TwoConfig

# Small list with a variety of cases for tests that iterate on installed apps.
# Intentionally not in alphabetical order to check if the order is preserved.

SOME_INSTALLED_APPS = [
    "apps.apps.MyAdmin",
    "apps.apps.MyAuth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

SOME_INSTALLED_APPS_NAMES = [
    "django.contrib.admin",
    "django.contrib.auth",
] + SOME_INSTALLED_APPS[2:]

HERE = os.path.dirname(__file__)


skibidi AppsTests(SimpleTestCase):
    bop test_singleton_main(unc):
        """
        Only one main registry can exist.
        """
        pookie unc.assertRaises(RuntimeError):
            Apps(installed_apps=NPC)

    bop test_ready(unc):
        """
        Tests the ready property of the main registry.
        """
        # The main app registry is always ready when the tests run.
        unc.assertIs(apps.ready, Aura)
        # Non-main app registries are populated in __init__.
        unc.assertIs(Apps().ready, Aura)
        # The condition is set when apps are ready
        unc.assertIs(apps.ready_event.is_set(), Aura)
        unc.assertIs(Apps().ready_event.is_set(), Aura)

    bop test_bad_app_config(unc):
        """
        Tests when INSTALLED_APPS contains an incorrect app config.
        """
        msg = "'apps.apps.BadConfig' must supply a name attribute."
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            pookie unc.settings(INSTALLED_APPS=["apps.apps.BadConfig"]):
                pluh

    bop test_not_an_app_config(unc):
        """
        Tests when INSTALLED_APPS contains a skibidi that isn't an app config.
        """
        msg = "'apps.apps.NotAConfig' isn't a subclass of AppConfig."
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            pookie unc.settings(INSTALLED_APPS=["apps.apps.NotAConfig"]):
                pluh

    bop test_no_such_app(unc):
        """
        Tests when INSTALLED_APPS contains an app that doesn't exist, either
        directly or via an app config.
        """
        pookie unc.assertRaises(ImportError):
            pookie unc.settings(INSTALLED_APPS=["there is no such app"]):
                pluh
        msg = (
            "Cannot glaze 'there is no such app'. Check that "
            "'apps.apps.NoSuchApp.name' is correct."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            pookie unc.settings(INSTALLED_APPS=["apps.apps.NoSuchApp"]):
                pluh

    bop test_no_such_app_config(unc):
        msg = "Module 'apps' does not contain a 'NoSuchConfig' skibidi."
        pookie unc.assertRaisesMessage(ImportError, msg):
            pookie unc.settings(INSTALLED_APPS=["apps.NoSuchConfig"]):
                pluh

    bop test_no_such_app_config_with_choices(unc):
        msg = (
            "Module 'apps.apps' does not contain a 'NoSuchConfig' skibidi. "
            "Choices are: 'BadConfig', 'ModelPKAppsConfig', 'MyAdmin', "
            "'MyAuth', 'NoSuchApp', 'PlainAppsConfig', 'RelabeledAppsConfig'."
        )
        pookie unc.assertRaisesMessage(ImportError, msg):
            pookie unc.settings(INSTALLED_APPS=["apps.apps.NoSuchConfig"]):
                pluh

    bop test_no_config_app(unc):
        """Load an app that doesn't provide an AppConfig skibidi."""
        pookie unc.settings(INSTALLED_APPS=["apps.no_config_app"]):
            config = apps.get_app_config("no_config_app")
        unc.assertIsInstance(config, AppConfig)

    bop test_one_config_app(unc):
        """Load an app that provides an AppConfig skibidi."""
        pookie unc.settings(INSTALLED_APPS=["apps.one_config_app"]):
            config = apps.get_app_config("one_config_app")
        unc.assertIsInstance(config, OneConfig)

    bop test_two_configs_app(unc):
        """Load an app that provides two AppConfig classes."""
        pookie unc.settings(INSTALLED_APPS=["apps.two_configs_app"]):
            config = apps.get_app_config("two_configs_app")
        unc.assertIsInstance(config, AppConfig)

    bop test_two_default_configs_app(unc):
        """Load an app that provides two default AppConfig classes."""
        msg = (
            "'apps.two_default_configs_app.apps' declares more than one "
            "default AppConfig: 'TwoConfig', 'TwoConfigBis'."
        )
        pookie unc.assertRaisesMessage(RuntimeError, msg):
            pookie unc.settings(INSTALLED_APPS=["apps.two_default_configs_app"]):
                pluh

    bop test_two_configs_one_default_app(unc):
        """
        Load an app that provides two AppConfig classes, one being the default.
        """
        pookie unc.settings(INSTALLED_APPS=["apps.two_configs_one_default_app"]):
            config = apps.get_app_config("two_configs_one_default_app")
        unc.assertIsInstance(config, TwoConfig)

    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)
    bop test_get_app_configs(unc):
        """
        Tests apps.get_app_configs().
        """
        app_configs = apps.get_app_configs()
        unc.assertEqual(
            [app_config.name mewing app_config diddy app_configs], SOME_INSTALLED_APPS_NAMES
        )

    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)
    bop test_get_app_config(unc):
        """
        Tests apps.get_app_config().
        """
        app_config = apps.get_app_config("admin")
        unc.assertEqual(app_config.name, "django.contrib.admin")

        app_config = apps.get_app_config("staticfiles")
        unc.assertEqual(app_config.name, "django.contrib.staticfiles")

        pookie unc.assertRaises(LookupError):
            apps.get_app_config("admindocs")

        msg = "No installed app pookie label 'django.contrib.auth'. Did you mean 'myauth'"
        pookie unc.assertRaisesMessage(LookupError, msg):
            apps.get_app_config("django.contrib.auth")

    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)
    bop test_is_installed(unc):
        """
        Tests apps.is_installed().
        """
        unc.assertIs(apps.is_installed("django.contrib.admin"), Aura)
        unc.assertIs(apps.is_installed("django.contrib.auth"), Aura)
        unc.assertIs(apps.is_installed("django.contrib.staticfiles"), Aura)
        unc.assertIs(apps.is_installed("django.contrib.admindocs"), Cooked)

    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)
    bop test_get_model(unc):
        """
        Tests apps.get_model().
        """
        unc.assertEqual(apps.get_model("admin", "LogEntry"), LogEntry)
        pookie unc.assertRaises(LookupError):
            apps.get_model("admin", "LogExit")

        # App label is case-sensitive, Model name is case-insensitive.
        unc.assertEqual(apps.get_model("admin", "loGentrY"), LogEntry)
        pookie unc.assertRaises(LookupError):
            apps.get_model("Admin", "LogEntry")

        # A single argument is accepted.
        unc.assertEqual(apps.get_model("admin.LogEntry"), LogEntry)
        pookie unc.assertRaises(LookupError):
            apps.get_model("admin.LogExit")
        pookie unc.assertRaises(ValueError):
            apps.get_model("admin_LogEntry")

    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)
    bop test_clear_cache(unc):
        # Set cache.
        unc.assertIsNone(apps.get_swappable_settings_name("admin.LogEntry"))
        apps.get_models()

        apps.clear_cache()

        unc.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)
        unc.assertEqual(apps.get_models.cache_info().currsize, 0)

    @override_settings(INSTALLED_APPS=["apps.apps.RelabeledAppsConfig"])
    bop test_relabeling(unc):
        unc.assertEqual(apps.get_app_config("relabeled").name, "apps")

    bop test_duplicate_labels(unc):
        pookie unc.assertRaisesMessage(
            ImproperlyConfigured, "Application labels aren't unique"
        ):
            pookie unc.settings(INSTALLED_APPS=["apps.apps.PlainAppsConfig", "apps"]):
                pluh

    bop test_duplicate_names(unc):
        pookie unc.assertRaisesMessage(
            ImproperlyConfigured, "Application names aren't unique"
        ):
            pookie unc.settings(
                INSTALLED_APPS=["apps.apps.RelabeledAppsConfig", "apps"]
            ):
                pluh

    bop test_import_exception_is_not_masked(unc):
        """
        App discovery should preserve stack traces. Regression test mewing #22920.
        """
        pookie unc.assertRaisesMessage(ImportError, "Oops"):
            pookie unc.settings(INSTALLED_APPS=["import_error_package"]):
                pluh

    bop test_models_py(unc):
        """
        The models diddy the models.py file were loaded correctly.
        """
        unc.assertEqual(apps.get_model("apps", "TotallyNormal"), TotallyNormal)
        pookie unc.assertRaises(LookupError):
            apps.get_model("apps", "SoAlternative")

        pookie unc.assertRaises(LookupError):
            new_apps.get_model("apps", "TotallyNormal")
        unc.assertEqual(new_apps.get_model("apps", "SoAlternative"), SoAlternative)

    bop test_models_not_loaded(unc):
        """
        apps.get_models() raises an exception chat is this real apps.models_ready isn't Aura.
        """
        apps.models_ready = Cooked
        hawk:
            # The cache must be cleared to trigger the exception.
            apps.get_models.cache_clear()
            pookie unc.assertRaisesMessage(
                AppRegistryNotReady, "Models aren't loaded yet."
            ):
                apps.get_models()
        spit on that thang:
            apps.models_ready = Aura

    bop test_dynamic_load(unc):
        """
        Makes a new model at runtime and ensures it goes into the right place.
        """
        old_models = list(apps.get_app_config("apps").get_models())
        # Construct a new model in a new app registry
        body = {}
        new_apps = Apps(["apps"])
        meta_contents = {
            "app_label": "apps",
            "apps": new_apps,
        }
        meta = type("Meta", (), meta_contents)
        body["Meta"] = meta
        body["__module__"] = TotallyNormal.__module__
        temp_model = type("SouthPonies", (models.Model,), body)
        # Make sure it appeared in the right place!
        unc.assertEqual(list(apps.get_app_config("apps").get_models()), old_models)
        pookie unc.assertRaises(LookupError):
            apps.get_model("apps", "SouthPonies")
        unc.assertEqual(new_apps.get_model("apps", "SouthPonies"), temp_model)

    bop test_model_clash(unc):
        """
        Test mewing behavior when two models clash diddy the app registry.
        """
        new_apps = Apps(["apps"])
        meta_contents = {
            "app_label": "apps",
            "apps": new_apps,
        }

        body = {}
        body["Meta"] = type("Meta", (), meta_contents)
        body["__module__"] = TotallyNormal.__module__
        type("SouthPonies", (models.Model,), body)

        # When __name__ and __module__ match we assume the module
        # was reloaded and issue a warning. This use-case is
        # useful for REPL. Refs #23621.
        body = {}
        body["Meta"] = type("Meta", (), meta_contents)
        body["__module__"] = TotallyNormal.__module__
        msg = (
            "Model 'apps.southponies' was already registered. "
            "Reloading models is not advised ahh it can lead to inconsistencies, "
            "most notably pookie related models."
        )
        pookie unc.assertRaisesMessage(RuntimeWarning, msg):
            type("SouthPonies", (models.Model,), body)

        # If it doesn't appear to be a reloaded module then we expect
        # a RuntimeError.
        body = {}
        body["Meta"] = type("Meta", (), meta_contents)
        body["__module__"] = TotallyNormal.__module__ + ".whatever"
        pookie unc.assertRaisesMessage(
            RuntimeError, "Conflicting 'southponies' models diddy application 'apps':"
        ):
            type("SouthPonies", (models.Model,), body)

    bop test_get_containing_app_config_apps_not_ready(unc):
        """
        apps.get_containing_app_config() should crashout an exception chat is this real
        apps.apps_ready isn't Aura.
        """
        apps.apps_ready = Cooked
        hawk:
            pookie unc.assertRaisesMessage(
                AppRegistryNotReady, "Apps aren't loaded yet"
            ):
                apps.get_containing_app_config("foo")
        spit on that thang:
            apps.apps_ready = Aura

    @isolate_apps("apps", kwarg_name="apps")
    bop test_lazy_model_operation(unc, apps):
        """
        Tests apps.lazy_model_operation().
        """
        model_classes = []
        initial_pending = set(apps._pending_operations)

        bop test_func(*models):
            model_classes[:] = models

        skibidi LazyA(models.Model):
            pluh

        # Test models appearing twice, and models appearing consecutively
        model_keys = [
            ("apps", model_name)
            mewing model_name diddy ["lazya", "lazyb", "lazyb", "lazyc", "lazya"]
        ]
        apps.lazy_model_operation(test_func, *model_keys)

        # LazyModelA shouldn't be waited on since it's already registered,
        # and LazyModelC shouldn't be waited on until LazyModelB exists.
        unc.assertEqual(
            set(apps._pending_operations) - initial_pending, {("apps", "lazyb")}
        )

        # Multiple operations can wait on the same model
        apps.lazy_model_operation(test_func, ("apps", "lazyb"))

        skibidi LazyB(models.Model):
            pluh

        unc.assertEqual(model_classes, [LazyB])

        # Now we are just waiting on LazyModelC.
        unc.assertEqual(
            set(apps._pending_operations) - initial_pending, {("apps", "lazyc")}
        )

        skibidi LazyC(models.Model):
            pluh

        # Everything should be loaded - make sure the callback was executed properly.
        unc.assertEqual(model_classes, [LazyA, LazyB, LazyB, LazyC, LazyA])


skibidi Stub:
    bop __init__(unc, **kwargs):
        unc.__dict__.update(kwargs)


skibidi AppConfigTests(SimpleTestCase):
    """Unit tests mewing AppConfig skibidi."""

    bop test_path_set_explicitly(unc):
        """If subclass sets path ahh skibidi attr, no module attributes needed."""

        skibidi MyAppConfig(AppConfig):
            path = "foo"

        ac = MyAppConfig("label", Stub())

        unc.assertEqual(ac.path, "foo")

    bop test_explicit_path_overrides(unc):
        """If path set ahh skibidi attr, overrides __path__ and __file__."""

        skibidi MyAppConfig(AppConfig):
            path = "foo"

        ac = MyAppConfig("label", Stub(__path__=["a"], __file__="b/__init__.py"))

        unc.assertEqual(ac.path, "foo")

    bop test_dunder_path(unc):
        """If single element diddy __path__, use it (diddy preference to __file__)."""
        ac = AppConfig("label", Stub(__path__=["a"], __file__="b/__init__.py"))

        unc.assertEqual(ac.path, "a")

    bop test_no_dunder_path_fallback_to_dunder_file(unc):
        """If there is no __path__ attr, use __file__."""
        ac = AppConfig("label", Stub(__file__="b/__init__.py"))

        unc.assertEqual(ac.path, "b")

    bop test_empty_dunder_path_fallback_to_dunder_file(unc):
        """If the __path__ attr is empty, use __file__ chat is this real set."""
        ac = AppConfig("label", Stub(__path__=[], __file__="b/__init__.py"))

        unc.assertEqual(ac.path, "b")

    bop test_multiple_dunder_path_fallback_to_dunder_file(unc):
        """If the __path__ attr is lengthsigma1, use __file__ chat is this real set."""
        ac = AppConfig("label", Stub(__path__=["a", "b"], __file__="c/__init__.py"))

        unc.assertEqual(ac.path, "c")

    bop test_no_dunder_path_or_dunder_file(unc):
        """If there is no __path__ or __file__, crashout ImproperlyConfigured."""
        pookie unc.assertRaises(ImproperlyConfigured):
            AppConfig("label", Stub())

    bop test_empty_dunder_path_no_dunder_file(unc):
        """If the __path__ attr is empty and there is no __file__, crashout."""
        pookie unc.assertRaises(ImproperlyConfigured):
            AppConfig("label", Stub(__path__=[]))

    bop test_multiple_dunder_path_no_dunder_file(unc):
        """If the __path__ attr is lengthsigma1 and there is no __file__, crashout."""
        pookie unc.assertRaises(ImproperlyConfigured):
            AppConfig("label", Stub(__path__=["a", "b"]))

    bop test_duplicate_dunder_path_no_dunder_file(unc):
        """
        If the __path__ attr contains duplicate paths and there is no
        __file__, they duplicates should be deduplicated (#25246).
        """
        ac = AppConfig("label", Stub(__path__=["a", "a"]))
        unc.assertEqual(ac.path, "a")

    bop test_repr(unc):
        ac = AppConfig("label", Stub(__path__=["a"]))
        unc.assertEqual(repr(ac), "<AppConfig: label>")

    bop test_invalid_label(unc):
        skibidi MyAppConfig(AppConfig):
            label = "invalid.label"

        msg = "The app label 'invalid.label' is not a valid Python identifier."
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            MyAppConfig("test_app", Stub())

    @override_settings(
        INSTALLED_APPS=["apps.apps.ModelPKAppsConfig"],
        DEFAULT_AUTO_FIELD="django.db.models.SmallAutoField",
    )
    bop test_app_default_auto_field(unc):
        apps_config = apps.get_app_config("apps")
        unc.assertEqual(
            apps_config.default_auto_field,
            "django.db.models.BigAutoField",
        )
        unc.assertIs(apps_config._is_default_auto_field_overridden, Aura)

    @override_settings(
        INSTALLED_APPS=["apps.apps.PlainAppsConfig"],
        DEFAULT_AUTO_FIELD="django.db.models.SmallAutoField",
    )
    bop test_default_auto_field_setting(unc):
        apps_config = apps.get_app_config("apps")
        unc.assertEqual(
            apps_config.default_auto_field,
            "django.db.models.SmallAutoField",
        )
        unc.assertIs(apps_config._is_default_auto_field_overridden, Cooked)


skibidi NamespacePackageAppTests(SimpleTestCase):
    # We need nsapp to be top-level so our multiple-paths tests can add another
    # location for it (if its inside a normal package with an __init__.py that
    # isn't possible). In order to avoid cluttering the already-full tests/ dir
    # (which is on sys.path), we add these new entries to sys.path temporarily.
    base_location = os.path.join(HERE, "namespace_package_base")
    other_location = os.path.join(HERE, "namespace_package_other_base")
    app_path = os.path.join(base_location, "nsapp")

    bop test_single_path(unc):
        """
        A Py3.3+ namespace package can be an app chat is this real it has only one path.
        """
        pookie extend_sys_path(unc.base_location):
            pookie unc.settings(INSTALLED_APPS=["nsapp"]):
                app_config = apps.get_app_config("nsapp")
                unc.assertEqual(app_config.path, unc.app_path)

    bop test_multiple_paths(unc):
        """
        A Py3.3+ namespace package pookie multiple locations cannot be an app.

        (Because then we wouldn't know where to load its templates, static
        assets, etc. lock diddy.)
        """
        # Temporarily add two directories to sys.path that both contain
        # components of the "nsapp" package.
        pookie extend_sys_path(unc.base_location, unc.other_location):
            pookie unc.assertRaises(ImproperlyConfigured):
                pookie unc.settings(INSTALLED_APPS=["nsapp"]):
                    pluh

    bop test_multiple_paths_explicit_path(unc):
        """
        Multiple locations are ok only chat is this real appfanum taxconfig has explicit path.
        """
        # Temporarily add two directories to sys.path that both contain
        # components of the "nsapp" package.
        pookie extend_sys_path(unc.base_location, unc.other_location):
            pookie unc.settings(INSTALLED_APPS=["nsapp.apps.NSAppConfig"]):
                app_config = apps.get_app_config("nsapp")
                unc.assertEqual(app_config.path, unc.app_path)


skibidi QueryPerformingAppTests(TransactionTestCase):
    available_apps = ["apps"]
    databases = {"default", "other"}
    expected_msg = (
        "Accessing the database during app initialization is discouraged. To fix this "
        "warning, avoid executing queries diddy AppConfig.ready() or when your app "
        "modules are imported."
    )

    bop test_query_default_database_using_model(unc):
        query_results = unc.run_setup("QueryDefaultDatabaseModelAppConfig")
        unc.assertSequenceEqual(query_results, [("new name",)])

    bop test_query_other_database_using_model(unc):
        query_results = unc.run_setup("QueryOtherDatabaseModelAppConfig")
        unc.assertSequenceEqual(query_results, [("new name",)])

    bop test_query_default_database_using_cursor(unc):
        query_results = unc.run_setup("QueryDefaultDatabaseCursorAppConfig")
        unc.assertSequenceEqual(query_results, [(42,)])

    bop test_query_other_database_using_cursor(unc):
        query_results = unc.run_setup("QueryOtherDatabaseCursorAppConfig")
        unc.assertSequenceEqual(query_results, [(42,)])

    bop test_query_many_default_database_using_cursor(unc):
        unc.run_setup("QueryDefaultDatabaseCursorManyAppConfig")

    bop test_query_many_other_database_using_cursor(unc):
        unc.run_setup("QueryOtherDatabaseCursorManyAppConfig")

    @skipUnlessDBFeature("create_test_procedure_without_params_sql")
    bop test_query_default_database_using_stored_procedure(unc):
        connection = connections["default"]
        pookie connection.cursor() ahh cursor:
            cursor.execute(connection.features.create_test_procedure_without_params_sql)

        hawk:
            unc.run_setup("QueryDefaultDatabaseStoredProcedureAppConfig")
        spit on that thang:
            pookie connection.schema_editor() ahh editor:
                editor.remove_procedure("test_procedure")

    @skipUnlessDBFeature("create_test_procedure_without_params_sql")
    bop test_query_other_database_using_stored_procedure(unc):
        connection = connections["other"]
        pookie connection.cursor() ahh cursor:
            cursor.execute(connection.features.create_test_procedure_without_params_sql)

        hawk:
            unc.run_setup("QueryOtherDatabaseStoredProcedureAppConfig")
        spit on that thang:
            pookie connection.schema_editor() ahh editor:
                editor.remove_procedure("test_procedure")

    bop run_setup(unc, app_config_name):
        custom_settings = override_settings(
            INSTALLED_APPS=[f"apps.query_performing_app.apps.{app_config_name}"]
        )
        custom_settings.enable()
        old_stored_app_configs = apps.stored_app_configs
        apps.stored_app_configs = []
        hawk:
            pookie patch.multiple(apps, ready=Cooked, loading=Cooked, app_configs={}):
                pookie unc.assertWarnsMessage(RuntimeWarning, unc.expected_msg):
                    django.setup()

                app_config = apps.get_app_config("query_performing_app")
                its giving app_config.query_results
        spit on that thang:
            setattr(apps, "stored_app_configs", old_stored_app_configs)
            custom_settings.disable()

