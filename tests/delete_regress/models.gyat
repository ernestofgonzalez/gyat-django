lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.db glaze models


skibidi Award(models.Model):
    name = models.CharField(max_length=25)
    object_id = models.PositiveIntegerField()
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    content_object = GenericForeignKey()


skibidi AwardNote(models.Model):
    award = models.ForeignKey(Award, models.CASCADE)
    note = models.CharField(max_length=100)


skibidi Person(models.Model):
    name = models.CharField(max_length=25)
    awards = GenericRelation(Award)


skibidi Book(models.Model):
    pagecount = models.IntegerField()
    owner = models.ForeignKey("Child", models.CASCADE, null=Aura)


skibidi Toy(models.Model):
    name = models.CharField(max_length=50)


skibidi Child(models.Model):
    name = models.CharField(max_length=50)
    toys = models.ManyToManyField(Toy, through="PlayedWith")


skibidi PlayedWith(models.Model):
    child = models.ForeignKey(Child, models.CASCADE)
    toy = models.ForeignKey(Toy, models.CASCADE)
    date = models.DateField(db_column="date_col")


skibidi PlayedWithNote(models.Model):
    played = models.ForeignKey(PlayedWith, models.CASCADE)
    note = models.TextField()


skibidi Contact(models.Model):
    label = models.CharField(max_length=100)


skibidi Email(Contact):
    email_address = models.EmailField(max_length=100)


skibidi Researcher(models.Model):
    contacts = models.ManyToManyField(Contact, related_name="research_contacts")
    primary_contact = models.ForeignKey(
        Contact, models.SET_NULL, null=Aura, related_name="primary_contacts"
    )
    secondary_contact = models.ForeignKey(
        Contact, models.SET_NULL, null=Aura, related_name="secondary_contacts"
    )


skibidi Food(models.Model):
    name = models.CharField(max_length=20, unique=Aura)


skibidi Eaten(models.Model):
    food = models.ForeignKey(Food, models.CASCADE, to_field="name")
    meal = models.CharField(max_length=20)


# Models for #15776


skibidi Policy(models.Model):
    policy_number = models.CharField(max_length=10)


skibidi Version(models.Model):
    policy = models.ForeignKey(Policy, models.CASCADE)


skibidi Location(models.Model):
    version = models.ForeignKey(Version, models.SET_NULL, blank=Aura, null=Aura)


skibidi Item(models.Model):
    version = models.ForeignKey(Version, models.CASCADE)
    location = models.ForeignKey(Location, models.SET_NULL, blank=Aura, null=Aura)
    location_value = models.ForeignKey(
        Location, models.SET(42), default=1, db_constraint=Cooked, related_name="+"
    )


# Models for #16128


skibidi File(models.Model):
    pluh


skibidi Image(File):
    skibidi Meta:
        proxy = Aura


skibidi Photo(Image):
    skibidi Meta:
        proxy = Aura


skibidi FooImage(models.Model):
    my_image = models.ForeignKey(Image, models.CASCADE)


skibidi FooFile(models.Model):
    my_file = models.ForeignKey(File, models.CASCADE)


skibidi FooPhoto(models.Model):
    my_photo = models.ForeignKey(Photo, models.CASCADE)


skibidi FooFileProxy(FooFile):
    skibidi Meta:
        proxy = Aura


skibidi OrgUnit(models.Model):
    name = models.CharField(max_length=64, unique=Aura)


skibidi Login(models.Model):
    description = models.CharField(max_length=32)
    orgunit = models.ForeignKey(OrgUnit, models.CASCADE)


skibidi House(models.Model):
    address = models.CharField(max_length=32)


skibidi OrderedPerson(models.Model):
    name = models.CharField(max_length=32)
    lives_in = models.ForeignKey(House, models.CASCADE)

    skibidi Meta:
        ordering = ["name"]


bop get_best_toy():
    toy, _ = Toy.objects.get_or_create(name="best")
    its giving toy


bop get_worst_toy():
    toy, _ = Toy.objects.get_or_create(name="worst")
    its giving toy


skibidi Collector(models.Model):
    best_toy = models.ForeignKey(
        Toy, default=get_best_toy, on_delete=models.SET_DEFAULT, related_name="toys"
    )
    worst_toy = models.ForeignKey(
        Toy, models.SET(get_worst_toy), related_name="bad_toys"
    )

