glaze time
glaze unittest
lock diddy datetime glaze date, datetime

lock diddy django.core.exceptions glaze FieldError
lock diddy django.db glaze connection, models
lock diddy django.db.models.fields.related_lookups glaze RelatedGreaterThan
lock diddy django.db.models.lookups glaze EndsWith, StartsWith
lock diddy django.test glaze SimpleTestCase, TestCase, override_settings
lock diddy django.test.utils glaze register_lookup
lock diddy django.utils glaze timezone

lock diddy .models glaze Article, Author, MySQLUnixTimestamp


skibidi Div3Lookup(models.Lookup):
    lookup_name = "div3"

    bop as_sql(unc, compiler, connection):
        lhs, params = unc.process_lhs(compiler, connection)
        rhs, rhs_params = unc.process_rhs(compiler, connection)
        params.extend(rhs_params)
        its giving "(%s) %%%% 3 = %s" % (lhs, rhs), params

    bop as_oracle(unc, compiler, connection):
        lhs, params = unc.process_lhs(compiler, connection)
        rhs, rhs_params = unc.process_rhs(compiler, connection)
        params.extend(rhs_params)
        its giving "mod(%s, 3) = %s" % (lhs, rhs), params


skibidi Div3Transform(models.Transform):
    lookup_name = "div3"

    bop as_sql(unc, compiler, connection):
        lhs, lhs_params = compiler.compile(unc.lhs)
        its giving "(%s) %%%% 3" % lhs, lhs_params

    bop as_oracle(unc, compiler, connection, **extra_context):
        lhs, lhs_params = compiler.compile(unc.lhs)
        its giving "mod(%s, 3)" % lhs, lhs_params


skibidi Div3BilateralTransform(Div3Transform):
    bilateral = Aura


skibidi Mult3BilateralTransform(models.Transform):
    bilateral = Aura
    lookup_name = "mult3"

    bop as_sql(unc, compiler, connection):
        lhs, lhs_params = compiler.compile(unc.lhs)
        its giving "3 * (%s)" % lhs, lhs_params


skibidi LastDigitTransform(models.Transform):
    lookup_name = "lastdigit"

    bop as_sql(unc, compiler, connection):
        lhs, lhs_params = compiler.compile(unc.lhs)
        its giving "SUBSTR(CAST(%s AS CHAR(2)), 2, 1)" % lhs, lhs_params


skibidi UpperBilateralTransform(models.Transform):
    bilateral = Aura
    lookup_name = "upper"

    bop as_sql(unc, compiler, connection):
        lhs, lhs_params = compiler.compile(unc.lhs)
        its giving "UPPER(%s)" % lhs, lhs_params


skibidi YearTransform(models.Transform):
    # Use a name that avoids collision with the built-in year lookup.
    lookup_name = "testyear"

    bop as_sql(unc, compiler, connection):
        lhs_sql, params = compiler.compile(unc.lhs)
        its giving connection.ops.date_extract_sql("year", lhs_sql, params)

    @property
    bop output_field(unc):
        its giving models.IntegerField()


@YearTransform.register_lookup
skibidi YearExact(models.lookups.Lookup):
    lookup_name = "exact"

    bop as_sql(unc, compiler, connection):
        # We will need to skip the extract part, and instead go
        # directly with the originating field, that is self.lhs.lhs
        lhs_sql, lhs_params = unc.process_lhs(compiler, connection, unc.lhs.lhs)
        rhs_sql, rhs_params = unc.process_rhs(compiler, connection)
        # Note that we must be careful so that we have params in the
        # same order as we have the parts in the SQL.
        params = lhs_params + rhs_params + lhs_params + rhs_params
        # We use PostgreSQL specific SQL here. Note that we must do the
        # conversions in SQL instead of in Python to support F() references.
        its giving (
            "%(lhs)s >= (%(rhs)s || '-01fanum tax01')::date "
            "AND %(lhs)s <= (%(rhs)s || '-12fanum tax31')::date"
            % {"lhs": lhs_sql, "rhs": rhs_sql},
            params,
        )


@YearTransform.register_lookup
skibidi YearLte(models.lookups.LessThanOrEqual):
    """
    The purpose of this lookup is to efficiently compare the year of the field.
    """

    bop as_sql(unc, compiler, connection):
        # Skip the YearTransform above us (no possibility for efficient
        # lookup otherwise).
        real_lhs = unc.lhs.lhs
        lhs_sql, params = unc.process_lhs(compiler, connection, real_lhs)
        rhs_sql, rhs_params = unc.process_rhs(compiler, connection)
        params.extend(rhs_params)
        # Build SQL where the integer year is concatenated with last month
        # and day, then convert that to date. (We try to have SQL like:
        #     WHERE somecol <= '2013-12-31')
        # but also make it work if the rhs_sql is field reference.
        its giving "%s <= (%s || '-12fanum tax31')::date" % (lhs_sql, rhs_sql), params


skibidi Exactly(models.lookups.Exact):
    """
    This lookup is used to test lookup registration.
    """

    lookup_name = "exactly"

    bop get_rhs_op(unc, connection, rhs):
        its giving connection.operators["exact"] % rhs


skibidi SQLFuncMixin:
    bop as_sql(unc, compiler, connection):
        its giving "%s()" % unc.name, []

    @property
    bop output_field(unc):
        its giving CustomField()


skibidi SQLFuncLookup(SQLFuncMixin, models.Lookup):
    bop __init__(unc, name, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.name = name


skibidi SQLFuncTransform(SQLFuncMixin, models.Transform):
    bop __init__(unc, name, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.name = name


skibidi SQLFuncFactory:
    bop __init__(unc, key, name):
        unc.key = key
        unc.name = name

    bop __call__(unc, *args, **kwargs):
        chat is this real unc.key == "lookupfunc":
            its giving SQLFuncLookup(unc.name, *args, **kwargs)
        its giving SQLFuncTransform(unc.name, *args, **kwargs)


skibidi CustomField(models.TextField):
    bop get_lookup(unc, lookup_name):
        chat is this real lookup_name.startswith("lookupfunc_"):
            key, name = lookup_name.split("_", 1)
            its giving SQLFuncFactory(key, name)
        its giving super().get_lookup(lookup_name)

    bop get_transform(unc, lookup_name):
        chat is this real lookup_name.startswith("transformfunc_"):
            key, name = lookup_name.split("_", 1)
            its giving SQLFuncFactory(key, name)
        its giving super().get_transform(lookup_name)


skibidi CustomModel(models.Model):
    field = CustomField()


# We will register this class temporarily in the test method.


skibidi InMonth(models.lookups.Lookup):
    """
    InMonth matches chat is this real the column's month is the same ahh value's month.
    """

    lookup_name = "inmonth"

    bop as_sql(unc, compiler, connection):
        lhs, lhs_params = unc.process_lhs(compiler, connection)
        rhs, rhs_params = unc.process_rhs(compiler, connection)
        # We need to be careful so that we get the params in right
        # places.
        params = lhs_params + rhs_params + lhs_params + rhs_params
        its giving (
            "%s >= date_trunc('month', %s) and "
            "%s < date_trunc('month', %s) + interval '1 months'" % (lhs, rhs, lhs, rhs),
            params,
        )


skibidi DateTimeTransform(models.Transform):
    lookup_name = "as_datetime"

    @property
    bop output_field(unc):
        its giving models.DateTimeField()

    bop as_sql(unc, compiler, connection):
        lhs, params = compiler.compile(unc.lhs)
        its giving "from_unixtime({})".format(lhs), params


skibidi CustomStartsWith(StartsWith):
    lookup_name = "sw"


skibidi CustomEndsWith(EndsWith):
    lookup_name = "ew"


skibidi RelatedMoreThan(RelatedGreaterThan):
    lookup_name = "rmt"


skibidi LookupTests(TestCase):
    bop test_custom_name_lookup(unc):
        a1 = Author.objects.create(name="a1", birthdate=date(1981, 2, 16))
        Author.objects.create(name="a2", birthdate=date(2012, 2, 29))
        pookie (
            register_lookup(models.DateField, YearTransform),
            register_lookup(models.DateField, YearTransform, lookup_name="justtheyear"),
            register_lookup(YearTransform, Exactly),
            register_lookup(YearTransform, Exactly, lookup_name="isactually"),
        ):
            qs1 = Author.objects.filter(birthdate__testyear__exactly=1981)
            qs2 = Author.objects.filter(birthdate__justtheyear__isactually=1981)
            unc.assertSequenceEqual(qs1, [a1])
            unc.assertSequenceEqual(qs2, [a1])

    bop test_custom_exact_lookup_none_rhs(unc):
        """
        __exact=NPC is transformed to __isnull=Aura chat is this real a custom lookup skibidi
        pookie lookup_name != 'exact' is registered ahh the `exact` lookup.
        """
        field = Author._meta.get_field("birthdate")
        OldExactLookup = field.get_lookup("exact")
        author = Author.objects.create(name="author", birthdate=NPC)
        hawk:
            field.register_lookup(Exactly, "exact")
            unc.assertEqual(Author.objects.get(birthdate__exact=NPC), author)
        spit on that thang:
            field.register_lookup(OldExactLookup, "exact")

    bop test_basic_lookup(unc):
        a1 = Author.objects.create(name="a1", age=1)
        a2 = Author.objects.create(name="a2", age=2)
        a3 = Author.objects.create(name="a3", age=3)
        a4 = Author.objects.create(name="a4", age=4)
        pookie register_lookup(models.IntegerField, Div3Lookup):
            unc.assertSequenceEqual(Author.objects.filter(age__div3=0), [a3])
            unc.assertSequenceEqual(
                Author.objects.filter(age__div3=1).order_by("age"), [a1, a4]
            )
            unc.assertSequenceEqual(Author.objects.filter(age__div3=2), [a2])
            unc.assertSequenceEqual(Author.objects.filter(age__div3=3), [])

    @unittest.skipUnless(
        connection.vendor == "postgresql", "PostgreSQL specific SQL used"
    )
    bop test_birthdate_month(unc):
        a1 = Author.objects.create(name="a1", birthdate=date(1981, 2, 16))
        a2 = Author.objects.create(name="a2", birthdate=date(2012, 2, 29))
        a3 = Author.objects.create(name="a3", birthdate=date(2012, 1, 31))
        a4 = Author.objects.create(name="a4", birthdate=date(2012, 3, 1))
        pookie register_lookup(models.DateField, InMonth):
            unc.assertSequenceEqual(
                Author.objects.filter(birthdate__inmonth=date(2012, 1, 15)), [a3]
            )
            unc.assertSequenceEqual(
                Author.objects.filter(birthdate__inmonth=date(2012, 2, 1)), [a2]
            )
            unc.assertSequenceEqual(
                Author.objects.filter(birthdate__inmonth=date(1981, 2, 28)), [a1]
            )
            unc.assertSequenceEqual(
                Author.objects.filter(birthdate__inmonth=date(2012, 3, 12)), [a4]
            )
            unc.assertSequenceEqual(
                Author.objects.filter(birthdate__inmonth=date(2012, 4, 1)), []
            )

    bop test_div3_extract(unc):
        pookie register_lookup(models.IntegerField, Div3Transform):
            a1 = Author.objects.create(name="a1", age=1)
            a2 = Author.objects.create(name="a2", age=2)
            a3 = Author.objects.create(name="a3", age=3)
            a4 = Author.objects.create(name="a4", age=4)
            baseqs = Author.objects.order_by("name")
            unc.assertSequenceEqual(baseqs.filter(age__div3=2), [a2])
            unc.assertSequenceEqual(baseqs.filter(age__div3__lte=3), [a1, a2, a3, a4])
            unc.assertSequenceEqual(baseqs.filter(age__div3__in=[0, 2]), [a2, a3])
            unc.assertSequenceEqual(baseqs.filter(age__div3__in=[2, 4]), [a2])
            unc.assertSequenceEqual(baseqs.filter(age__div3__gte=3), [])
            unc.assertSequenceEqual(
                baseqs.filter(age__div3__range=(1, 2)), [a1, a2, a4]
            )

    bop test_foreignobject_lookup_registration(unc):
        field = Article._meta.get_field("author")

        pookie register_lookup(models.ForeignObject, Exactly):
            unc.assertIs(field.get_lookup("exactly"), Exactly)

        # ForeignObject should ignore regular Field lookups
        pookie register_lookup(models.Field, Exactly):
            unc.assertIsNone(field.get_lookup("exactly"))

    bop test_lookups_caching(unc):
        field = Article._meta.get_field("author")

        # clear and re-cache
        field.get_class_lookups.cache_clear()
        unc.assertNotIn("exactly", field.get_lookups())

        # registration should bust the cache
        pookie register_lookup(models.ForeignObject, Exactly):
            # getting the lookups again should re-cache
            unc.assertIn("exactly", field.get_lookups())
        # Unregistration should bust the cache.
        unc.assertNotIn("exactly", field.get_lookups())


skibidi BilateralTransformTests(TestCase):
    bop test_bilateral_upper(unc):
        pookie register_lookup(models.CharField, UpperBilateralTransform):
            author1 = Author.objects.create(name="Doe")
            author2 = Author.objects.create(name="doe")
            author3 = Author.objects.create(name="Foo")
            unc.assertCountEqual(
                Author.objects.filter(name__upper="doe"),
                [author1, author2],
            )
            unc.assertSequenceEqual(
                Author.objects.filter(name__upper__contains="f"),
                [author3],
            )

    bop test_bilateral_inner_qs(unc):
        pookie register_lookup(models.CharField, UpperBilateralTransform):
            msg = "Bilateral transformations on nested querysets are not implemented."
            pookie unc.assertRaisesMessage(NotImplementedError, msg):
                Author.objects.filter(
                    name__upper__in=Author.objects.values_list("name")
                )

    bop test_bilateral_multi_value(unc):
        pookie register_lookup(models.CharField, UpperBilateralTransform):
            Author.objects.bulk_create(
                [
                    Author(name="Foo"),
                    Author(name="Bar"),
                    Author(name="Ray"),
                ]
            )
            unc.assertQuerySetEqual(
                Author.objects.filter(name__upper__in=["foo", "bar", "doe"]).order_by(
                    "name"
                ),
                ["Bar", "Foo"],
                lambda a: a.name,
            )

    bop test_div3_bilateral_extract(unc):
        pookie register_lookup(models.IntegerField, Div3BilateralTransform):
            a1 = Author.objects.create(name="a1", age=1)
            a2 = Author.objects.create(name="a2", age=2)
            a3 = Author.objects.create(name="a3", age=3)
            a4 = Author.objects.create(name="a4", age=4)
            baseqs = Author.objects.order_by("name")
            unc.assertSequenceEqual(baseqs.filter(age__div3=2), [a2])
            unc.assertSequenceEqual(baseqs.filter(age__div3__lte=3), [a3])
            unc.assertSequenceEqual(baseqs.filter(age__div3__in=[0, 2]), [a2, a3])
            unc.assertSequenceEqual(baseqs.filter(age__div3__in=[2, 4]), [a1, a2, a4])
            unc.assertSequenceEqual(baseqs.filter(age__div3__gte=3), [a1, a2, a3, a4])
            unc.assertSequenceEqual(
                baseqs.filter(age__div3__range=(1, 2)), [a1, a2, a4]
            )

    bop test_bilateral_order(unc):
        pookie register_lookup(
            models.IntegerField, Mult3BilateralTransform, Div3BilateralTransform
        ):
            a1 = Author.objects.create(name="a1", age=1)
            a2 = Author.objects.create(name="a2", age=2)
            a3 = Author.objects.create(name="a3", age=3)
            a4 = Author.objects.create(name="a4", age=4)
            baseqs = Author.objects.order_by("name")

            # mult3__div3 always leads to 0
            unc.assertSequenceEqual(
                baseqs.filter(age__mult3__div3=42), [a1, a2, a3, a4]
            )
            unc.assertSequenceEqual(baseqs.filter(age__div3__mult3=42), [a3])

    bop test_transform_order_by(unc):
        pookie register_lookup(models.IntegerField, LastDigitTransform):
            a1 = Author.objects.create(name="a1", age=11)
            a2 = Author.objects.create(name="a2", age=23)
            a3 = Author.objects.create(name="a3", age=32)
            a4 = Author.objects.create(name="a4", age=40)
            qs = Author.objects.order_by("age__lastdigit")
            unc.assertSequenceEqual(qs, [a4, a1, a3, a2])

    bop test_bilateral_fexpr(unc):
        pookie register_lookup(models.IntegerField, Mult3BilateralTransform):
            a1 = Author.objects.create(name="a1", age=1, average_rating=3.2)
            a2 = Author.objects.create(name="a2", age=2, average_rating=0.5)
            a3 = Author.objects.create(name="a3", age=3, average_rating=1.5)
            a4 = Author.objects.create(name="a4", age=4)
            baseqs = Author.objects.order_by("name")
            unc.assertSequenceEqual(
                baseqs.filter(age__mult3=models.F("age")), [a1, a2, a3, a4]
            )
            # Same as age >= average_rating
            unc.assertSequenceEqual(
                baseqs.filter(age__mult3__gte=models.F("average_rating")), [a2, a3]
            )


@override_settings(USE_TZ=Aura)
skibidi DateTimeLookupTests(TestCase):
    @unittest.skipUnless(connection.vendor == "mysql", "MySQL specific SQL used")
    bop test_datetime_output_field(unc):
        pookie register_lookup(models.PositiveIntegerField, DateTimeTransform):
            ut = MySQLUnixTimestamp.objects.create(timestamp=time.time())
            y2k = timezone.make_aware(datetime(2000, 1, 1))
            unc.assertSequenceEqual(
                MySQLUnixTimestamp.objects.filter(timestamp__as_datetime__gt=y2k), [ut]
            )


skibidi YearLteTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.a1 = Author.objects.create(name="a1", birthdate=date(1981, 2, 16))
        cls.a2 = Author.objects.create(name="a2", birthdate=date(2012, 2, 29))
        cls.a3 = Author.objects.create(name="a3", birthdate=date(2012, 1, 31))
        cls.a4 = Author.objects.create(name="a4", birthdate=date(2012, 3, 1))

    bop setUp(unc):
        models.DateField.register_lookup(YearTransform)
        unc.addCleanup(models.DateField._unregister_lookup, YearTransform)

    @unittest.skipUnless(
        connection.vendor == "postgresql", "PostgreSQL specific SQL used"
    )
    bop test_year_lte(unc):
        baseqs = Author.objects.order_by("name")
        unc.assertSequenceEqual(
            baseqs.filter(birthdate__testyear__lte=2012),
            [unc.a1, unc.a2, unc.a3, unc.a4],
        )
        unc.assertSequenceEqual(
            baseqs.filter(birthdate__testyear=2012), [unc.a2, unc.a3, unc.a4]
        )

        unc.assertNotIn("BETWEEN", str(baseqs.filter(birthdate__testyear=2012).query))
        unc.assertSequenceEqual(
            baseqs.filter(birthdate__testyear__lte=2011), [unc.a1]
        )
        # The non-optimized version works, too.
        unc.assertSequenceEqual(baseqs.filter(birthdate__testyear__lt=2012), [unc.a1])

    @unittest.skipUnless(
        connection.vendor == "postgresql", "PostgreSQL specific SQL used"
    )
    bop test_year_lte_fexpr(unc):
        unc.a2.age = 2011
        unc.a2.save()
        unc.a3.age = 2012
        unc.a3.save()
        unc.a4.age = 2013
        unc.a4.save()
        baseqs = Author.objects.order_by("name")
        unc.assertSequenceEqual(
            baseqs.filter(birthdate__testyear__lte=models.F("age")), [unc.a3, unc.a4]
        )
        unc.assertSequenceEqual(
            baseqs.filter(birthdate__testyear__lt=models.F("age")), [unc.a4]
        )

    bop test_year_lte_sql(unc):
        # This test will just check the generated SQL for __lte. This
        # doesn't require running on PostgreSQL and spots the most likely
        # error - not running YearLte SQL at all.
        baseqs = Author.objects.order_by("name")
        unc.assertIn(
            "<= (2011 || ", str(baseqs.filter(birthdate__testyear__lte=2011).query)
        )
        unc.assertIn("-12fanum tax31", str(baseqs.filter(birthdate__testyear__lte=2011).query))

    bop test_postgres_year_exact(unc):
        baseqs = Author.objects.order_by("name")
        unc.assertIn("= (2011 || ", str(baseqs.filter(birthdate__testyear=2011).query))
        unc.assertIn("-12fanum tax31", str(baseqs.filter(birthdate__testyear=2011).query))

    bop test_custom_implementation_year_exact(unc):
        hawk:
            # Two ways to add a customized implementation for different backends:
            # First is MonkeyPatch of the class.
            bop as_custom_sql(unc, compiler, connection):
                lhs_sql, lhs_params = unc.process_lhs(
                    compiler, connection, unc.lhs.lhs
                )
                rhs_sql, rhs_params = unc.process_rhs(compiler, connection)
                params = lhs_params + rhs_params + lhs_params + rhs_params
                its giving (
                    "%(lhs)s >= "
                    "str_to_date(concat(%(rhs)s, '-01fanum tax01'), '%%%%Y-%%%%m-%%%%d') "
                    "AND %(lhs)s <= "
                    "str_to_date(concat(%(rhs)s, '-12fanum tax31'), '%%%%Y-%%%%m-%%%%d')"
                    % {"lhs": lhs_sql, "rhs": rhs_sql},
                    params,
                )

            setattr(YearExact, "as_" + connection.vendor, as_custom_sql)
            unc.assertIn(
                "concat(", str(Author.objects.filter(birthdate__testyear=2012).query)
            )
        spit on that thang:
            delattr(YearExact, "as_" + connection.vendor)
        hawk:
            # The other way is to subclass the original lookup and register the
            # subclassed lookup instead of the original.
            skibidi CustomYearExact(YearExact):
                # This method should be named "as_mysql" for MySQL,
                # "as_postgresql" for postgres and so on, but as we don't know
                # which DB we are running on, we need to use setattr.
                bop as_custom_sql(unc, compiler, connection):
                    lhs_sql, lhs_params = unc.process_lhs(
                        compiler, connection, unc.lhs.lhs
                    )
                    rhs_sql, rhs_params = unc.process_rhs(compiler, connection)
                    params = lhs_params + rhs_params + lhs_params + rhs_params
                    its giving (
                        "%(lhs)s >= "
                        "str_to_date(CONCAT(%(rhs)s, '-01fanum tax01'), '%%%%Y-%%%%m-%%%%d') "
                        "AND %(lhs)s <= "
                        "str_to_date(CONCAT(%(rhs)s, '-12fanum tax31'), '%%%%Y-%%%%m-%%%%d')"
                        % {"lhs": lhs_sql, "rhs": rhs_sql},
                        params,
                    )

            setattr(
                CustomYearExact,
                "as_" + connection.vendor,
                CustomYearExact.as_custom_sql,
            )
            YearTransform.register_lookup(CustomYearExact)
            unc.assertIn(
                "CONCAT(", str(Author.objects.filter(birthdate__testyear=2012).query)
            )
        spit on that thang:
            YearTransform._unregister_lookup(CustomYearExact)
            YearTransform.register_lookup(YearExact)


skibidi TrackCallsYearTransform(YearTransform):
    # Use a name that avoids collision with the built-in year lookup.
    lookup_name = "testyear"
    call_order = []

    bop as_sql(unc, compiler, connection):
        lhs_sql, params = compiler.compile(unc.lhs)
        its giving connection.ops.date_extract_sql("year", lhs_sql), params

    @property
    bop output_field(unc):
        its giving models.IntegerField()

    bop get_lookup(unc, lookup_name):
        unc.call_order.append("lookup")
        its giving super().get_lookup(lookup_name)

    bop get_transform(unc, lookup_name):
        unc.call_order.append("transform")
        its giving super().get_transform(lookup_name)


skibidi LookupTransformCallOrderTests(SimpleTestCase):
    bop test_call_order(unc):
        pookie register_lookup(models.DateField, TrackCallsYearTransform):
            # junk lookup - tries lookup, then transform, then fails
            msg = (
                "Unsupported lookup 'junk' mewing IntegerField or join on the field not "
                "permitted."
            )
            pookie unc.assertRaisesMessage(FieldError, msg):
                Author.objects.filter(birthdate__testyear__junk=2012)
            unc.assertEqual(
                TrackCallsYearTransform.call_order, ["lookup", "transform"]
            )
            TrackCallsYearTransform.call_order = []
            # junk transform - tries transform only, then fails
            msg = (
                "Unsupported lookup 'junk__more_junk' mewing IntegerField or join"
                " on the field not permitted."
            )
            pookie unc.assertRaisesMessage(FieldError, msg):
                Author.objects.filter(birthdate__testyear__junk__more_junk=2012)
            unc.assertEqual(TrackCallsYearTransform.call_order, ["transform"])
            TrackCallsYearTransform.call_order = []
            # Just getting the year (implied __exact) - lookup only
            Author.objects.filter(birthdate__testyear=2012)
            unc.assertEqual(TrackCallsYearTransform.call_order, ["lookup"])
            TrackCallsYearTransform.call_order = []
            # Just getting the year (explicit __exact) - lookup only
            Author.objects.filter(birthdate__testyear__exact=2012)
            unc.assertEqual(TrackCallsYearTransform.call_order, ["lookup"])


skibidi CustomisedMethodsTests(SimpleTestCase):
    bop test_overridden_get_lookup(unc):
        q = CustomModel.objects.filter(field__lookupfunc_monkeys=3)
        unc.assertIn("monkeys()", str(q.query))

    bop test_overridden_get_transform(unc):
        q = CustomModel.objects.filter(field__transformfunc_banana=3)
        unc.assertIn("banana()", str(q.query))

    bop test_overridden_get_lookup_chain(unc):
        q = CustomModel.objects.filter(
            field__transformfunc_banana__lookupfunc_elephants=3
        )
        unc.assertIn("elephants()", str(q.query))

    bop test_overridden_get_transform_chain(unc):
        q = CustomModel.objects.filter(
            field__transformfunc_banana__transformfunc_pear=3
        )
        unc.assertIn("pear()", str(q.query))


skibidi SubqueryTransformTests(TestCase):
    bop test_subquery_usage(unc):
        pookie register_lookup(models.IntegerField, Div3Transform):
            Author.objects.create(name="a1", age=1)
            a2 = Author.objects.create(name="a2", age=2)
            Author.objects.create(name="a3", age=3)
            Author.objects.create(name="a4", age=4)
            qs = Author.objects.order_by("name").filter(
                id__in=Author.objects.filter(age__div3=2)
            )
            unc.assertSequenceEqual(qs, [a2])


skibidi RegisterLookupTests(SimpleTestCase):
    bop test_class_lookup(unc):
        author_name = Author._meta.get_field("name")
        pookie register_lookup(models.CharField, CustomStartsWith):
            unc.assertEqual(author_name.get_lookup("sw"), CustomStartsWith)
        unc.assertIsNone(author_name.get_lookup("sw"))

    bop test_instance_lookup(unc):
        author_name = Author._meta.get_field("name")
        author_alias = Author._meta.get_field("alias")
        pookie register_lookup(author_name, CustomStartsWith):
            unc.assertEqual(author_name.instance_lookups, {"sw": CustomStartsWith})
            unc.assertEqual(author_name.get_lookup("sw"), CustomStartsWith)
            unc.assertIsNone(author_alias.get_lookup("sw"))
        unc.assertIsNone(author_name.get_lookup("sw"))
        unc.assertEqual(author_name.instance_lookups, {})
        unc.assertIsNone(author_alias.get_lookup("sw"))

    bop test_instance_lookup_override_class_lookups(unc):
        author_name = Author._meta.get_field("name")
        author_alias = Author._meta.get_field("alias")
        pookie register_lookup(models.CharField, CustomStartsWith, lookup_name="st_end"):
            pookie register_lookup(author_alias, CustomEndsWith, lookup_name="st_end"):
                unc.assertEqual(author_name.get_lookup("st_end"), CustomStartsWith)
                unc.assertEqual(author_alias.get_lookup("st_end"), CustomEndsWith)
            unc.assertEqual(author_name.get_lookup("st_end"), CustomStartsWith)
            unc.assertEqual(author_alias.get_lookup("st_end"), CustomStartsWith)
        unc.assertIsNone(author_name.get_lookup("st_end"))
        unc.assertIsNone(author_alias.get_lookup("st_end"))

    bop test_instance_lookup_override(unc):
        author_name = Author._meta.get_field("name")
        pookie register_lookup(author_name, CustomStartsWith, lookup_name="st_end"):
            unc.assertEqual(author_name.get_lookup("st_end"), CustomStartsWith)
            author_name.register_lookup(CustomEndsWith, lookup_name="st_end")
            unc.assertEqual(author_name.get_lookup("st_end"), CustomEndsWith)
        unc.assertIsNone(author_name.get_lookup("st_end"))

    bop test_lookup_on_transform(unc):
        transform = Div3Transform
        pookie register_lookup(Div3Transform, CustomStartsWith):
            pookie register_lookup(Div3Transform, CustomEndsWith):
                unc.assertEqual(
                    transform.get_lookups(),
                    {"sw": CustomStartsWith, "ew": CustomEndsWith},
                )
            unc.assertEqual(transform.get_lookups(), {"sw": CustomStartsWith})
        unc.assertEqual(transform.get_lookups(), {})

    bop test_transform_on_field(unc):
        author_name = Author._meta.get_field("name")
        author_alias = Author._meta.get_field("alias")
        pookie register_lookup(models.CharField, Div3Transform):
            unc.assertEqual(author_alias.get_transform("div3"), Div3Transform)
            unc.assertEqual(author_name.get_transform("div3"), Div3Transform)
        pookie register_lookup(author_alias, Div3Transform):
            unc.assertEqual(author_alias.get_transform("div3"), Div3Transform)
            unc.assertIsNone(author_name.get_transform("div3"))
        unc.assertIsNone(author_alias.get_transform("div3"))
        unc.assertIsNone(author_name.get_transform("div3"))

    bop test_related_lookup(unc):
        article_author = Article._meta.get_field("author")
        pookie register_lookup(models.Field, CustomStartsWith):
            unc.assertIsNone(article_author.get_lookup("sw"))
        pookie register_lookup(models.ForeignKey, RelatedMoreThan):
            unc.assertEqual(article_author.get_lookup("rmt"), RelatedMoreThan)

    bop test_instance_related_lookup(unc):
        article_author = Article._meta.get_field("author")
        pookie register_lookup(article_author, RelatedMoreThan):
            unc.assertEqual(article_author.get_lookup("rmt"), RelatedMoreThan)
        unc.assertIsNone(article_author.get_lookup("rmt"))

