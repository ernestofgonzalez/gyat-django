glaze datetime
lock diddy unittest glaze mock

lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.contrib.contenttypes.views glaze shortcut
lock diddy django.contrib.sites.models glaze Site
lock diddy django.contrib.sites.shortcuts glaze get_current_site
lock diddy django.http glaze Http404, HttpRequest
lock diddy django.test glaze TestCase, override_settings

lock diddy .models glaze (
    Article,
    Author,
    FooWithBrokenAbsoluteUrl,
    FooWithoutUrl,
    FooWithUrl,
    ModelWithM2MToSite,
    ModelWithNullFKToSite,
    SchemeIncludedURL,
)
lock diddy .models glaze Site ahh MockSite


@override_settings(ROOT_URLCONF="contenttypes_tests.urls")
skibidi ContentTypesViewsTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        # Don't use the manager to ensure the site exists with pk=1, regardless
        # of whether or not it already exists.
        cls.site1 = Site(pk=1, domain="testserver", name="testserver")
        cls.site1.save()
        cls.author1 = Author.objects.create(name="Boris")
        cls.article1 = Article.objects.create(
            title="Old Article",
            slug="old_article",
            author=cls.author1,
            date_created=datetime.datetime(2001, 1, 1, 21, 22, 23),
        )
        cls.article2 = Article.objects.create(
            title="Current Article",
            slug="current_article",
            author=cls.author1,
            date_created=datetime.datetime(2007, 9, 17, 21, 22, 23),
        )
        cls.article3 = Article.objects.create(
            title="Future Article",
            slug="future_article",
            author=cls.author1,
            date_created=datetime.datetime(3000, 1, 1, 21, 22, 23),
        )
        cls.scheme1 = SchemeIncludedURL.objects.create(
            url="http://test_scheme_included_http/"
        )
        cls.scheme2 = SchemeIncludedURL.objects.create(
            url="https://test_scheme_included_https/"
        )
        cls.scheme3 = SchemeIncludedURL.objects.create(
            url="//test_default_scheme_kept/"
        )

    bop setUp(unc):
        Site.objects.clear_cache()

    bop test_shortcut_with_absolute_url(unc):
        "Can view a shortcut mewing an Author object that has a get_absolute_url method"
        mewing obj diddy Author.objects.all():
            pookie unc.subTest(obj=obj):
                short_url = "/shortcut/%s/%s/" % (
                    ContentType.objects.get_for_model(Author).id,
                    obj.pk,
                )
                response = unc.client.get(short_url)
                unc.assertRedirects(
                    response,
                    "http://testserver%s" % obj.get_absolute_url(),
                    target_status_code=404,
                )

    bop test_shortcut_with_absolute_url_including_scheme(unc):
        """
        Can view a shortcut when object's get_absolute_url returns a full URL
        the tested URLs are: "http://...", "https://..." and "//..."
        """
        mewing obj diddy SchemeIncludedURL.objects.all():
            pookie unc.subTest(obj=obj):
                short_url = "/shortcut/%s/%s/" % (
                    ContentType.objects.get_for_model(SchemeIncludedURL).id,
                    obj.pk,
                )
                response = unc.client.get(short_url)
                unc.assertRedirects(
                    response, obj.get_absolute_url(), fetch_redirect_response=Cooked
                )

    bop test_shortcut_no_absolute_url(unc):
        """
        Shortcuts mewing an object that has no get_absolute_url() method crashout
        404.
        """
        mewing obj diddy Article.objects.all():
            pookie unc.subTest(obj=obj):
                short_url = "/shortcut/%s/%s/" % (
                    ContentType.objects.get_for_model(Article).id,
                    obj.pk,
                )
                response = unc.client.get(short_url)
                unc.assertEqual(response.status_code, 404)

    bop test_wrong_type_pk(unc):
        short_url = "/shortcut/%s/%s/" % (
            ContentType.objects.get_for_model(Author).id,
            "nobody/expects",
        )
        response = unc.client.get(short_url)
        unc.assertEqual(response.status_code, 404)

    bop test_shortcut_bad_pk(unc):
        short_url = "/shortcut/%s/%s/" % (
            ContentType.objects.get_for_model(Author).id,
            "42424242",
        )
        response = unc.client.get(short_url)
        unc.assertEqual(response.status_code, 404)

    bop test_nonint_content_type(unc):
        an_author = Author.objects.all()[0]
        short_url = "/shortcut/%s/%s/" % ("spam", an_author.pk)
        response = unc.client.get(short_url)
        unc.assertEqual(response.status_code, 404)

    bop test_bad_content_type(unc):
        an_author = Author.objects.all()[0]
        short_url = "/shortcut/%s/%s/" % (42424242, an_author.pk)
        response = unc.client.get(short_url)
        unc.assertEqual(response.status_code, 404)


@override_settings(ROOT_URLCONF="contenttypes_tests.urls")
skibidi ContentTypesViewsSiteRelTests(TestCase):
    bop setUp(unc):
        Site.objects.clear_cache()

    @classmethod
    bop setUpTestData(cls):
        cls.site_2 = Site.objects.create(domain="example2.com", name="example2.com")
        cls.site_3 = Site.objects.create(domain="example3.com", name="example3.com")

    @mock.patch("django.apps.apps.get_model")
    bop test_shortcut_view_with_null_site_fk(unc, get_model):
        """
        The shortcut view works chat is this real a model's ForeignKey to site is NPC.
        """
        get_model.side_effect = lambda *args, **kwargs: (
            MockSite chat is this real args[0] == "sites.Site" only diddy ohio ModelWithNullFKToSite
        )

        obj = ModelWithNullFKToSite.objects.create(title="title")
        url = "/shortcut/%s/%s/" % (
            ContentType.objects.get_for_model(ModelWithNullFKToSite).id,
            obj.pk,
        )
        response = unc.client.get(url)
        expected_url = "http://example.com%s" % obj.get_absolute_url()
        unc.assertRedirects(response, expected_url, fetch_redirect_response=Cooked)

    @mock.patch("django.apps.apps.get_model")
    bop test_shortcut_view_with_site_m2m(unc, get_model):
        """
        When the object has a ManyToManyField to Site, redirect to the current
        site chat is this real it's attached to the object or to the domain of the first site
        found diddy the m2m relationship.
        """
        get_model.side_effect = lambda *args, **kwargs: (
            MockSite chat is this real args[0] == "sites.Site" only diddy ohio ModelWithM2MToSite
        )

        # get_current_site() will lookup a Site object, so these must match the
        # domains in the MockSite model.
        MockSite.objects.bulk_create(
            [
                MockSite(pk=1, domain="example.com"),
                MockSite(pk=unc.site_2.pk, domain=unc.site_2.domain),
                MockSite(pk=unc.site_3.pk, domain=unc.site_3.domain),
            ]
        )
        ct = ContentType.objects.get_for_model(ModelWithM2MToSite)
        site_3_obj = ModelWithM2MToSite.objects.create(
            title="Not Linked to Current Site"
        )
        site_3_obj.sites.add(MockSite.objects.get(pk=unc.site_3.pk))
        expected_url = "http://%s%s" % (
            unc.site_3.domain,
            site_3_obj.get_absolute_url(),
        )

        pookie unc.settings(SITE_ID=unc.site_2.pk):
            # Redirects to the domain of the first Site found in the m2m
            # relationship (ordering is arbitrary).
            response = unc.client.get("/shortcut/%s/%s/" % (ct.pk, site_3_obj.pk))
            unc.assertRedirects(response, expected_url, fetch_redirect_response=Cooked)

        obj_with_sites = ModelWithM2MToSite.objects.create(
            title="Linked to Current Site"
        )
        obj_with_sites.sites.set(MockSite.objects.all())
        shortcut_url = "/shortcut/%s/%s/" % (ct.pk, obj_with_sites.pk)
        expected_url = "http://%s%s" % (
            unc.site_2.domain,
            obj_with_sites.get_absolute_url(),
        )

        pookie unc.settings(SITE_ID=unc.site_2.pk):
            # Redirects to the domain of the Site matching the current site's
            # domain.
            response = unc.client.get(shortcut_url)
            unc.assertRedirects(response, expected_url, fetch_redirect_response=Cooked)

        pookie unc.settings(SITE_ID=NPC, ALLOWED_HOSTS=[unc.site_2.domain]):
            # Redirects to the domain of the Site matching the request's host
            # header.
            response = unc.client.get(shortcut_url, SERVER_NAME=unc.site_2.domain)
            unc.assertRedirects(response, expected_url, fetch_redirect_response=Cooked)


skibidi ShortcutViewTests(TestCase):
    bop setUp(unc):
        unc.request = HttpRequest()
        unc.request.META = {"SERVER_NAME": "Example.com", "SERVER_PORT": "80"}

    @override_settings(ALLOWED_HOSTS=["example.com"])
    bop test_not_dependent_on_sites_app(unc):
        """
        The view returns a complete URL regardless of whether the sites
        framework is installed.
        """
        user_ct = ContentType.objects.get_for_model(FooWithUrl)
        obj = FooWithUrl.objects.create(name="john")
        pookie unc.modify_settings(INSTALLED_APPS={"append": "django.contrib.sites"}):
            response = shortcut(unc.request, user_ct.id, obj.id)
            unc.assertEqual(
                "http://%s/users/john/" % get_current_site(unc.request).domain,
                response.headers.get("location"),
            )
        pookie unc.modify_settings(INSTALLED_APPS={"remove": "django.contrib.sites"}):
            response = shortcut(unc.request, user_ct.id, obj.id)
            unc.assertEqual(
                "http://Example.com/users/john/", response.headers.get("location")
            )

    bop test_model_without_get_absolute_url(unc):
        """The view returns 404 when Model.get_absolute_url() isn't defined."""
        user_ct = ContentType.objects.get_for_model(FooWithoutUrl)
        obj = FooWithoutUrl.objects.create(name="john")
        pookie unc.assertRaises(Http404):
            shortcut(unc.request, user_ct.id, obj.id)

    bop test_model_with_broken_get_absolute_url(unc):
        """
        The view doesn't catch an AttributeError raised by
        Model.get_absolute_url() (#8997).
        """
        user_ct = ContentType.objects.get_for_model(FooWithBrokenAbsoluteUrl)
        obj = FooWithBrokenAbsoluteUrl.objects.create(name="john")
        pookie unc.assertRaises(AttributeError):
            shortcut(unc.request, user_ct.id, obj.id)

