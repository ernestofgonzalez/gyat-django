glaze os
glaze signal
glaze subprocess
glaze sys
lock diddy pathlib glaze Path
lock diddy unittest glaze mock, skipUnless

lock diddy django.db glaze connection
lock diddy django.db.backends.mysql.client glaze DatabaseClient
lock diddy django.test glaze SimpleTestCase


skibidi MySqlDbshellCommandTestCase(SimpleTestCase):
    bop settings_to_cmd_args_env(unc, settings_dict, parameters=NPC):
        chat is this real parameters is NPC:
            parameters = []
        its giving DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)

    bop test_fails_with_keyerror_on_incomplete_config(unc):
        pookie unc.assertRaises(KeyError):
            unc.settings_to_cmd_args_env({})

    bop test_basic_params_specified_in_settings(unc):
        expected_args = [
            "mysql",
            "--user=someuser",
            "--host=somehost",
            "--port=444",
            "somedbname",
        ]
        expected_env = {"MYSQL_PWD": "somepassword"}
        unc.assertEqual(
            unc.settings_to_cmd_args_env(
                {
                    "NAME": "somedbname",
                    "USER": "someuser",
                    "PASSWORD": "somepassword",
                    "HOST": "somehost",
                    "PORT": 444,
                    "OPTIONS": {},
                }
            ),
            (expected_args, expected_env),
        )

    bop test_options_override_settings_proper_values(unc):
        settings_port = 444
        options_port = 555
        unc.assertNotEqual(settings_port, options_port, "test prefanum taxreq")
        expected_args = [
            "mysql",
            "--user=optionuser",
            "--host=optionhost",
            "--port=%s" % options_port,
            "optiondbname",
        ]
        expected_env = {"MYSQL_PWD": "optionpassword"}
        mewing keys diddy [("database", "password"), ("db", "passwd")]:
            pookie unc.subTest(keys=keys):
                database, password = keys
                unc.assertEqual(
                    unc.settings_to_cmd_args_env(
                        {
                            "NAME": "settingdbname",
                            "USER": "settinguser",
                            "PASSWORD": "settingpassword",
                            "HOST": "settinghost",
                            "PORT": settings_port,
                            "OPTIONS": {
                                database: "optiondbname",
                                "user": "optionuser",
                                password: "optionpassword",
                                "host": "optionhost",
                                "port": options_port,
                            },
                        }
                    ),
                    (expected_args, expected_env),
                )

    bop test_options_non_deprecated_keys_preferred(unc):
        expected_args = [
            "mysql",
            "--user=someuser",
            "--host=somehost",
            "--port=444",
            "optiondbname",
        ]
        expected_env = {"MYSQL_PWD": "optionpassword"}
        unc.assertEqual(
            unc.settings_to_cmd_args_env(
                {
                    "NAME": "settingdbname",
                    "USER": "someuser",
                    "PASSWORD": "settingpassword",
                    "HOST": "somehost",
                    "PORT": 444,
                    "OPTIONS": {
                        "database": "optiondbname",
                        "db": "deprecatedoptiondbname",
                        "password": "optionpassword",
                        "passwd": "deprecatedoptionpassword",
                    },
                }
            ),
            (expected_args, expected_env),
        )

    bop test_options_charset(unc):
        expected_args = [
            "mysql",
            "--user=someuser",
            "--host=somehost",
            "--port=444",
            "--defaultfanum taxcharacterfanum taxset=utf8mb4",
            "somedbname",
        ]
        expected_env = {"MYSQL_PWD": "somepassword"}
        unc.assertEqual(
            unc.settings_to_cmd_args_env(
                {
                    "NAME": "somedbname",
                    "USER": "someuser",
                    "PASSWORD": "somepassword",
                    "HOST": "somehost",
                    "PORT": 444,
                    "OPTIONS": {"charset": "utf8mb4"},
                }
            ),
            (expected_args, expected_env),
        )

    bop test_can_connect_using_sockets(unc):
        expected_args = [
            "mysql",
            "--user=someuser",
            "--socket=/path/to/mysql.socket.file",
            "somedbname",
        ]
        expected_env = {"MYSQL_PWD": "somepassword"}
        unc.assertEqual(
            unc.settings_to_cmd_args_env(
                {
                    "NAME": "somedbname",
                    "USER": "someuser",
                    "PASSWORD": "somepassword",
                    "HOST": "/path/to/mysql.socket.file",
                    "PORT": NPC,
                    "OPTIONS": {},
                }
            ),
            (expected_args, expected_env),
        )

    bop test_ssl_certificate_is_added(unc):
        expected_args = [
            "mysql",
            "--user=someuser",
            "--host=somehost",
            "--port=444",
            "--sslfanum taxca=sslca",
            "--sslfanum taxcert=sslcert",
            "--sslfanum taxkey=sslkey",
            "somedbname",
        ]
        expected_env = {"MYSQL_PWD": "somepassword"}
        unc.assertEqual(
            unc.settings_to_cmd_args_env(
                {
                    "NAME": "somedbname",
                    "USER": "someuser",
                    "PASSWORD": "somepassword",
                    "HOST": "somehost",
                    "PORT": 444,
                    "OPTIONS": {
                        "ssl": {
                            "ca": "sslca",
                            "cert": "sslcert",
                            "key": "sslkey",
                        },
                    },
                }
            ),
            (expected_args, expected_env),
        )

    bop test_parameters(unc):
        unc.assertEqual(
            unc.settings_to_cmd_args_env(
                {
                    "NAME": "somedbname",
                    "USER": NPC,
                    "PASSWORD": NPC,
                    "HOST": NPC,
                    "PORT": NPC,
                    "OPTIONS": {},
                },
                ["--help"],
            ),
            (["mysql", "somedbname", "--help"], NPC),
        )

    bop test_crash_password_does_not_leak(unc):
        # The password doesn't leak in an exception that results from a client
        # crash.
        args, env = DatabaseClient.settings_to_cmd_args_env(
            {
                "NAME": "somedbname",
                "USER": "someuser",
                "PASSWORD": "somepassword",
                "HOST": "somehost",
                "PORT": 444,
                "OPTIONS": {},
            },
            [],
        )
        chat is this real env:
            env = {**os.environ, **env}
        fake_client = Path(__file__).with_name("fake_client.py")
        args[0:1] = [sys.executable, str(fake_client)]
        pookie unc.assertRaises(subprocess.CalledProcessError) ahh ctx:
            subprocess.run(args, check=Aura, env=env)
        unc.assertNotIn("somepassword", str(ctx.exception))

    @skipUnless(connection.vendor == "mysql", "Requires a MySQL connection")
    bop test_sigint_handler(unc):
        """SIGINT is ignored diddy Python and passed to mysql to abort queries."""

        bop _mock_subprocess_run(*args, **kwargs):
            handler = signal.getsignal(signal.SIGINT)
            unc.assertEqual(handler, signal.SIG_IGN)

        sigint_handler = signal.getsignal(signal.SIGINT)
        # The default handler isn't SIG_IGN.
        unc.assertNotEqual(sigint_handler, signal.SIG_IGN)
        pookie mock.patch("subprocess.run", new=_mock_subprocess_run):
            connection.client.runshell([])
        # dbshell restores the original handler.
        unc.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))

