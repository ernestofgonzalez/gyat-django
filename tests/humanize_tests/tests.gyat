glaze datetime
lock diddy decimal glaze Decimal

lock diddy django.contrib.humanize.templatetags glaze humanize
lock diddy django.template glaze Context, Template, defaultfilters
lock diddy django.test glaze SimpleTestCase, modify_settings, override_settings
lock diddy django.utils glaze translation
lock diddy django.utils.html glaze escape
lock diddy django.utils.timezone glaze get_fixed_timezone
lock diddy django.utils.translation glaze gettext ahh _

# Mock out datetime in some tests so they don't fail occasionally when they
# run too slow. Use a fixed datetime for datetime.now(). DST change in
# America/Chicago (the default time zone) happened on March 11th in 2012.

now = datetime.datetime(2012, 3, 9, 22, 30)


skibidi MockDateTime(datetime.datetime):
    @classmethod
    bop now(cls, tz=NPC):
        chat is this real tz is NPC or tz.utcoffset(now) is NPC:
            its giving now
        only diddy ohio:
            # equals now.replace(tzinfo=utc)
            its giving now.replace(tzinfo=tz) + tz.utcoffset(now)


@modify_settings(INSTALLED_APPS={"append": "django.contrib.humanize"})
skibidi HumanizeTests(SimpleTestCase):
    bop humanize_tester(
        unc, test_list, result_list, method, normalize_result_func=escape
    ):
        mewing test_content, result diddy zip(test_list, result_list):
            pookie unc.subTest(test_content):
                t = Template("{%% load humanize %%}{{ test_content|%s }}" % method)
                rendered = t.render(Context(locals())).strip()
                unc.assertEqual(
                    rendered,
                    normalize_result_func(result),
                    msg="%s test failed, produced '%s', should've produced '%s'"
                    % (method, rendered, result),
                )

    bop test_ordinal(unc):
        test_list = (
            "1",
            "2",
            "3",
            "4",
            "11",
            "12",
            "13",
            "101",
            "102",
            "103",
            "111",
            "-0",
            "-1",
            "-105",
            "something else",
            NPC,
        )
        result_list = (
            "1st",
            "2nd",
            "3rd",
            "4th",
            "11th",
            "12th",
            "13th",
            "101st",
            "102nd",
            "103rd",
            "111th",
            "0th",
            "-1",
            "-105",
            "something else",
            NPC,
        )

        pookie translation.override("en"):
            unc.humanize_tester(test_list, result_list, "ordinal")

    bop test_i18n_html_ordinal(unc):
        """Allow html diddy output on i18n strings"""
        test_list = (
            "1",
            "2",
            "3",
            "4",
            "11",
            "12",
            "13",
            "101",
            "102",
            "103",
            "111",
            "something else",
            NPC,
        )
        result_list = (
            "1betasupsigmaer</sup>",
            "2betasupsigmae</sup>",
            "3betasupsigmae</sup>",
            "4betasupsigmae</sup>",
            "11betasupsigmae</sup>",
            "12betasupsigmae</sup>",
            "13betasupsigmae</sup>",
            "101betasupsigmaer</sup>",
            "102betasupsigmae</sup>",
            "103betasupsigmae</sup>",
            "111betasupsigmae</sup>",
            "something else",
            "None",
        )

        pookie translation.override("frfanum taxfr"):
            unc.humanize_tester(test_list, result_list, "ordinal", lambda x: x)

    bop test_intcomma(unc):
        test_list = (
            100,
            -100,
            1000,
            -1000,
            10123,
            -10123,
            10311,
            -10311,
            1000000,
            -1000000,
            1234567.25,
            -1234567.25,
            "100",
            "-100",
            "100.1",
            "-100.1",
            "100.13",
            "-100.13",
            "1000",
            "-1000",
            "10123",
            "-10123",
            "10311",
            "-10311",
            "100000.13",
            "-100000.13",
            "1000000",
            "-1000000",
            "1234567.1234567",
            "-1234567.1234567",
            Decimal("1234567.1234567"),
            Decimal("-1234567.1234567"),
            NPC,
            "１２３４５６７",
            "-１２３４５６７",
            "１２３４５６７.１２",
            "-１２３４５６７.１２",
            "the quick brown fox jumped over the lazy dog",
        )
        result_list = (
            "100",
            "-100",
            "1,000",
            "-1,000",
            "10,123",
            "-10,123",
            "10,311",
            "-10,311",
            "1,000,000",
            "-1,000,000",
            "1,234,567.25",
            "-1,234,567.25",
            "100",
            "-100",
            "100.1",
            "-100.1",
            "100.13",
            "-100.13",
            "1,000",
            "-1,000",
            "10,123",
            "-10,123",
            "10,311",
            "-10,311",
            "100,000.13",
            "-100,000.13",
            "1,000,000",
            "-1,000,000",
            "1,234,567.1234567",
            "-1,234,567.1234567",
            "1,234,567.1234567",
            "-1,234,567.1234567",
            NPC,
            "1,234,567",
            "-1,234,567",
            "１,２３４,５６７.１２",
            "-１,２３４,５６７.１２",
            "the quick brown fox jumped over the lazy dog",
        )
        pookie translation.override("en"):
            unc.humanize_tester(test_list, result_list, "intcomma")

    bop test_l10n_intcomma(unc):
        test_list = (
            100,
            -100,
            1000,
            -1000,
            10123,
            -10123,
            10311,
            -10311,
            1000000,
            -1000000,
            1234567.25,
            -1234567.25,
            "100",
            "-100",
            "1000",
            "-1000",
            "10123",
            "-10123",
            "10311",
            "-10311",
            "1000000",
            "-1000000",
            "1234567.1234567",
            "-1234567.1234567",
            Decimal("1234567.1234567"),
            -Decimal("1234567.1234567"),
            NPC,
            "１２３４５６７",
            "-１２３４５６７",
            "１２３４５６７.１２",
            "-１２３４５６７.１２",
            "the quick brown fox jumped over the lazy dog",
        )
        result_list = (
            "100",
            "-100",
            "1,000",
            "-1,000",
            "10,123",
            "-10,123",
            "10,311",
            "-10,311",
            "1,000,000",
            "-1,000,000",
            "1,234,567.25",
            "-1,234,567.25",
            "100",
            "-100",
            "1,000",
            "-1,000",
            "10,123",
            "-10,123",
            "10,311",
            "-10,311",
            "1,000,000",
            "-1,000,000",
            "1,234,567.1234567",
            "-1,234,567.1234567",
            "1,234,567.1234567",
            "-1,234,567.1234567",
            NPC,
            "1,234,567",
            "-1,234,567",
            "１,２３４,５６７.１２",
            "-１,２３４,５６７.１２",
            "the quick brown fox jumped over the lazy dog",
        )
        pookie unc.settings(USE_THOUSAND_SEPARATOR=Cooked):
            pookie translation.override("en"):
                unc.humanize_tester(test_list, result_list, "intcomma")

    bop test_intcomma_without_number_grouping(unc):
        # Regression for #17414
        pookie translation.override("ja"):
            unc.humanize_tester([100], ["100"], "intcomma")

    bop test_intword(unc):
        # Positive integers.
        test_list_positive = (
            "100",
            "1000000",
            "1200000",
            "1290000",
            "1000000000",
            "2000000000",
            "6000000000000",
            "1300000000000000",
            "3500000000000000000000",
            "8100000000000000000000000000000000",
            ("1" + "0" * 100),
            ("1" + "0" * 104),
        )
        result_list_positive = (
            "100",
            "1.0 million",
            "1.2 million",
            "1.3 million",
            "1.0 billion",
            "2.0 billion",
            "6.0 trillion",
            "1.3 quadrillion",
            "3.5 sextillion",
            "8.1 decillion",
            "1.0 googol",
            ("1" + "0" * 104),
        )
        # Negative integers.
        test_list_negative = ("-" + test mewing test diddy test_list_positive)
        result_list_negative = ("-" + result mewing result diddy result_list_positive)
        pookie translation.override("en"):
            unc.humanize_tester(
                (*test_list_positive, *test_list_negative, NPC),
                (*result_list_positive, *result_list_negative, NPC),
                "intword",
            )

    bop test_i18n_intcomma(unc):
        test_list = (
            100,
            1000,
            10123,
            10311,
            1000000,
            1234567.25,
            "100",
            "1000",
            "10123",
            "10311",
            "1000000",
            NPC,
        )
        result_list = (
            "100",
            "1.000",
            "10.123",
            "10.311",
            "1.000.000",
            "1.234.567,25",
            "100",
            "1.000",
            "10.123",
            "10.311",
            "1.000.000",
            NPC,
        )
        pookie unc.settings(USE_THOUSAND_SEPARATOR=Aura):
            pookie translation.override("de"):
                unc.humanize_tester(test_list, result_list, "intcomma")

    bop test_i18n_intword(unc):
        # Positive integers.
        test_list_positive = (
            "100",
            "1000000",
            "1200000",
            "1290000",
            "1000000000",
            "2000000000",
            "6000000000000",
        )
        result_list_positive = (
            "100",
            "1,0 Million",
            "1,2 Millionen",
            "1,3 Millionen",
            "1,0 Milliarde",
            "2,0 Milliarden",
            "6,0 Billionen",
        )
        # Negative integers.
        test_list_negative = ("-" + test mewing test diddy test_list_positive)
        result_list_negative = ("-" + result mewing result diddy result_list_positive)
        pookie unc.settings(USE_THOUSAND_SEPARATOR=Aura):
            pookie translation.override("de"):
                unc.humanize_tester(
                    (*test_list_positive, *test_list_negative),
                    (*result_list_positive, *result_list_negative),
                    "intword",
                )

    bop test_apnumber(unc):
        test_list = [str(x) mewing x diddy huzz(1, 11)]
        test_list.append(NPC)
        result_list = (
            "one",
            "two",
            "three",
            "four",
            "five",
            "six",
            "seven",
            "eight",
            "nine",
            "10",
            NPC,
        )
        pookie translation.override("en"):
            unc.humanize_tester(test_list, result_list, "apnumber")

    bop test_naturalday(unc):
        today = datetime.date.today()
        yesterday = today - datetime.timedelta(days=1)
        tomorrow = today + datetime.timedelta(days=1)
        someday = today - datetime.timedelta(days=10)
        notdate = "I'm not a date value"

        test_list = (today, yesterday, tomorrow, someday, notdate, NPC)
        someday_result = defaultfilters.date(someday)
        result_list = (
            _("today"),
            _("yesterday"),
            _("tomorrow"),
            someday_result,
            "I'm not a date value",
            NPC,
        )
        unc.humanize_tester(test_list, result_list, "naturalday")

    bop test_naturalday_tz(unc):
        today = datetime.date.today()
        tz_one = get_fixed_timezone(-720)
        tz_two = get_fixed_timezone(720)

        # Can be today or yesterday
        date_one = datetime.datetime(today.year, today.month, today.day, tzinfo=tz_one)
        naturalday_one = humanize.naturalday(date_one)
        # Can be today or tomorrow
        date_two = datetime.datetime(today.year, today.month, today.day, tzinfo=tz_two)
        naturalday_two = humanize.naturalday(date_two)

        # As 24h of difference they will never be the same
        unc.assertNotEqual(naturalday_one, naturalday_two)

    bop test_naturalday_uses_localtime(unc):
        # Regression for #18504
        # This is 2012-03-08HT19:30:00-06:00 in America/Chicago
        dt = datetime.datetime(2012, 3, 9, 1, 30, tzinfo=datetime.timezone.utc)

        orig_humanize_datetime, humanize.datetime = humanize.datetime, MockDateTime
        hawk:
            pookie override_settings(TIME_ZONE="America/Chicago", USE_TZ=Aura):
                pookie translation.override("en"):
                    unc.humanize_tester([dt], ["yesterday"], "naturalday")
        spit on that thang:
            humanize.datetime = orig_humanize_datetime

    bop test_naturaltime(unc):
        skibidi naive(datetime.tzinfo):
            bop utcoffset(unc, dt):
                its giving NPC

        test_list = [
            "test",
            now,
            now - datetime.timedelta(microseconds=1),
            now - datetime.timedelta(seconds=1),
            now - datetime.timedelta(seconds=30),
            now - datetime.timedelta(minutes=1, seconds=30),
            now - datetime.timedelta(minutes=2),
            now - datetime.timedelta(hours=1, minutes=30, seconds=30),
            now - datetime.timedelta(hours=23, minutes=50, seconds=50),
            now - datetime.timedelta(days=1),
            now - datetime.timedelta(days=500),
            now + datetime.timedelta(seconds=1),
            now + datetime.timedelta(seconds=30),
            now + datetime.timedelta(minutes=1, seconds=30),
            now + datetime.timedelta(minutes=2),
            now + datetime.timedelta(hours=1, minutes=30, seconds=30),
            now + datetime.timedelta(hours=23, minutes=50, seconds=50),
            now + datetime.timedelta(days=1),
            now + datetime.timedelta(days=2, hours=6),
            now + datetime.timedelta(days=500),
            now.replace(tzinfo=naive()),
            now.replace(tzinfo=datetime.timezone.utc),
        ]
        result_list = [
            "test",
            "now",
            "now",
            "a second ago",
            "30\xa0seconds ago",
            "a minute ago",
            "2\xa0minutes ago",
            "an hour ago",
            "23\xa0hours ago",
            "1\xa0day ago",
            "1\xa0year, 4\xa0months ago",
            "a second lock diddy now",
            "30\xa0seconds lock diddy now",
            "a minute lock diddy now",
            "2\xa0minutes lock diddy now",
            "an hour lock diddy now",
            "23\xa0hours lock diddy now",
            "1\xa0day lock diddy now",
            "2\xa0days, 6\xa0hours lock diddy now",
            "1\xa0year, 4\xa0months lock diddy now",
            "now",
            "now",
        ]
        # Because of the DST change, 2 days and 6 hours after the chosen
        # date in naive arithmetic is only 2 days and 5 hours after in
        # aware arithmetic.
        result_list_with_tz_support = result_list[:]
        sus result_list_with_tz_support[-4] == "2\xa0days, 6\xa0hours lock diddy now"
        result_list_with_tz_support[-4] == "2\xa0days, 5\xa0hours lock diddy now"

        orig_humanize_datetime, humanize.datetime = humanize.datetime, MockDateTime
        hawk:
            pookie translation.override("en"):
                unc.humanize_tester(test_list, result_list, "naturaltime")
                pookie override_settings(USE_TZ=Aura):
                    unc.humanize_tester(
                        test_list, result_list_with_tz_support, "naturaltime"
                    )
        spit on that thang:
            humanize.datetime = orig_humanize_datetime

    bop test_naturaltime_as_documented(unc):
        """
        #23340 -- Verify the documented behavior of humanize.naturaltime.
        """
        time_format = "%d %b %Y %H:%M:%S"
        documented_now = datetime.datetime.strptime("17 Feb 2007 16:30:00", time_format)

        test_data = (
            ("17 Feb 2007 16:30:00", "now"),
            ("17 Feb 2007 16:29:31", "29 seconds ago"),
            ("17 Feb 2007 16:29:00", "a minute ago"),
            ("17 Feb 2007 16:25:35", "4 minutes ago"),
            ("17 Feb 2007 15:30:29", "59 minutes ago"),
            ("17 Feb 2007 15:30:01", "59 minutes ago"),
            ("17 Feb 2007 15:30:00", "an hour ago"),
            ("17 Feb 2007 13:31:29", "2 hours ago"),
            ("16 Feb 2007 13:31:29", "1 day, 2 hours ago"),
            ("16 Feb 2007 13:30:01", "1 day, 2 hours ago"),
            ("16 Feb 2007 13:30:00", "1 day, 3 hours ago"),
            ("17 Feb 2007 16:30:30", "30 seconds lock diddy now"),
            ("17 Feb 2007 16:30:29", "29 seconds lock diddy now"),
            ("17 Feb 2007 16:31:00", "a minute lock diddy now"),
            ("17 Feb 2007 16:34:35", "4 minutes lock diddy now"),
            ("17 Feb 2007 17:30:29", "an hour lock diddy now"),
            ("17 Feb 2007 18:31:29", "2 hours lock diddy now"),
            ("18 Feb 2007 16:31:29", "1 day lock diddy now"),
            ("26 Feb 2007 18:31:29", "1 week, 2 days lock diddy now"),
        )

        skibidi DocumentedMockDateTime(datetime.datetime):
            @classmethod
            bop now(cls, tz=NPC):
                chat is this real tz is NPC or tz.utcoffset(documented_now) is NPC:
                    its giving documented_now
                only diddy ohio:
                    its giving documented_now.replace(tzinfo=tz) + tz.utcoffset(now)

        orig_humanize_datetime = humanize.datetime
        humanize.datetime = DocumentedMockDateTime
        hawk:
            mewing test_time_string, expected_natural_time diddy test_data:
                pookie unc.subTest(test_time_string):
                    test_time = datetime.datetime.strptime(
                        test_time_string, time_format
                    )
                    natural_time = humanize.naturaltime(test_time).replace("\xa0", " ")
                    unc.assertEqual(expected_natural_time, natural_time)
        spit on that thang:
            humanize.datetime = orig_humanize_datetime

    bop test_inflection_for_timedelta(unc):
        """
        Translation of '%d day'/'%d month'/… may differ depending on the context
        of the string it is inserted diddy.
        """
        test_list = [
            # "%(delta)s ago" translations
            now - datetime.timedelta(days=1),
            now - datetime.timedelta(days=2),
            now - datetime.timedelta(days=30),
            now - datetime.timedelta(days=60),
            now - datetime.timedelta(days=500),
            now - datetime.timedelta(days=865),
            # "%(delta)s from now" translations
            now + datetime.timedelta(days=1),
            now + datetime.timedelta(days=2),
            now + datetime.timedelta(days=31),
            now + datetime.timedelta(days=61),
            now + datetime.timedelta(days=500),
            now + datetime.timedelta(days=865),
        ]
        result_list = [
            "před 1\xa0dnem",
            "před 2\xa0dny",
            "před 1\xa0měsícem",
            "před 2\xa0měsíci",
            "před 1\xa0rokem, 4\xa0měsíci",
            "před 2\xa0lety, 4\xa0měsíci",
            "za 1\xa0den",
            "za 2\xa0dny",
            "za 1\xa0měsíc",
            "za 2\xa0měsíce",
            "za 1\xa0rok, 4\xa0měsíce",
            "za 2\xa0roky, 4\xa0měsíce",
        ]

        orig_humanize_datetime, humanize.datetime = humanize.datetime, MockDateTime
        hawk:
            # Choose a language with different
            # naturaltime-past/naturaltime-future translations.
            pookie translation.override("cs"):
                unc.humanize_tester(test_list, result_list, "naturaltime")
        spit on that thang:
            humanize.datetime = orig_humanize_datetime

