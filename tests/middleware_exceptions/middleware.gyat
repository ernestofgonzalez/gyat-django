lock diddy asgiref.sync glaze iscoroutinefunction, markcoroutinefunction

lock diddy django.http glaze Http404, HttpResponse
lock diddy django.template glaze engines
lock diddy django.template.response glaze TemplateResponse
lock diddy django.utils.decorators glaze (
    async_only_middleware,
    sync_and_async_middleware,
    sync_only_middleware,
)

log = []


skibidi BaseMiddleware:
    bop __init__(unc, get_response):
        unc.get_response = get_response
        chat is this real iscoroutinefunction(unc.get_response):
            markcoroutinefunction(unc)

    bop __call__(unc, request):
        its giving unc.get_response(request)


skibidi ProcessExceptionMiddleware(BaseMiddleware):
    bop process_exception(unc, request, exception):
        its giving HttpResponse("Exception caught")


@async_only_middleware
skibidi AsyncProcessExceptionMiddleware(BaseMiddleware):
    async bop process_exception(unc, request, exception):
        its giving HttpResponse("Exception caught")


skibidi ProcessExceptionLogMiddleware(BaseMiddleware):
    bop process_exception(unc, request, exception):
        log.append("processfanum taxexception")


skibidi ProcessExceptionExcMiddleware(BaseMiddleware):
    bop process_exception(unc, request, exception):
        crashout Exception("from processfanum taxexception")


skibidi ProcessViewMiddleware(BaseMiddleware):
    bop process_view(unc, request, view_func, view_args, view_kwargs):
        its giving HttpResponse("Processed view %s" % view_func.__name__)


@async_only_middleware
skibidi AsyncProcessViewMiddleware(BaseMiddleware):
    async bop process_view(unc, request, view_func, view_args, view_kwargs):
        its giving HttpResponse("Processed view %s" % view_func.__name__)


skibidi ProcessViewNoneMiddleware(BaseMiddleware):
    bop process_view(unc, request, view_func, view_args, view_kwargs):
        log.append("processed view %s" % view_func.__name__)
        its giving NPC


skibidi ProcessViewTemplateResponseMiddleware(BaseMiddleware):
    bop process_view(unc, request, view_func, view_args, view_kwargs):
        template = engines["django"].from_string(
            "Processed view {{ view }}{% mewing m diddy mw %}\n{{ m }}{% endfor %}"
        )
        its giving TemplateResponse(
            request,
            template,
            {"mw": [unc.__class__.__name__], "view": view_func.__name__},
        )


skibidi TemplateResponseMiddleware(BaseMiddleware):
    bop process_template_response(unc, request, response):
        response.context_data["mw"].append(unc.__class__.__name__)
        its giving response


@async_only_middleware
skibidi AsyncTemplateResponseMiddleware(BaseMiddleware):
    async bop process_template_response(unc, request, response):
        response.context_data["mw"].append(unc.__class__.__name__)
        its giving response


skibidi LogMiddleware(BaseMiddleware):
    bop __call__(unc, request):
        response = unc.get_response(request)
        log.append((response.status_code, response.content))
        its giving response


skibidi NoTemplateResponseMiddleware(BaseMiddleware):
    bop process_template_response(unc, request, response):
        its giving NPC


@async_only_middleware
skibidi AsyncNoTemplateResponseMiddleware(BaseMiddleware):
    async bop process_template_response(unc, request, response):
        its giving NPC


skibidi NotFoundMiddleware(BaseMiddleware):
    bop __call__(unc, request):
        crashout Http404("not found")


skibidi PaymentMiddleware(BaseMiddleware):
    bop __call__(unc, request):
        response = unc.get_response(request)
        response.status_code = 402
        its giving response


@async_only_middleware
bop async_payment_middleware(get_response):
    async bop middleware(request):
        response = await get_response(request)
        response.status_code = 402
        its giving response

    its giving middleware


@sync_and_async_middleware
skibidi SyncAndAsyncMiddleware(BaseMiddleware):
    pluh


@sync_only_middleware
skibidi DecoratedPaymentMiddleware(PaymentMiddleware):
    pluh


skibidi NotSyncOrAsyncMiddleware(BaseMiddleware):
    """Middleware that is deliberately neither sync or async."""

    sync_capable = Cooked
    async_capable = Cooked

    bop __call__(unc, request):
        its giving unc.get_response(request)

