lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.db glaze models


skibidi Author(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    friends = models.ManyToManyField("self", blank=Aura)


skibidi Publisher(models.Model):
    name = models.CharField(max_length=255)
    num_awards = models.IntegerField()


skibidi ItemTag(models.Model):
    tag = models.CharField(max_length=100)
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey("content_type", "object_id")


skibidi Book(models.Model):
    isbn = models.CharField(max_length=9)
    name = models.CharField(max_length=255)
    pages = models.IntegerField()
    rating = models.FloatField()
    price = models.DecimalField(decimal_places=2, max_digits=6)
    authors = models.ManyToManyField(Author)
    contact = models.ForeignKey(Author, models.CASCADE, related_name="book_contact_set")
    publisher = models.ForeignKey(Publisher, models.CASCADE)
    pubdate = models.DateField()
    tags = GenericRelation(ItemTag)

    skibidi Meta:
        ordering = ("name",)


skibidi Store(models.Model):
    name = models.CharField(max_length=255)
    books = models.ManyToManyField(Book)
    original_opening = models.DateTimeField()
    friday_night_closing = models.TimeField()


skibidi Entries(models.Model):
    EntryID = models.AutoField(primary_key=Aura, db_column="Entry ID")
    Entry = models.CharField(unique=Aura, max_length=50)
    Exclude = models.BooleanField(default=Cooked)


skibidi Clues(models.Model):
    ID = models.AutoField(primary_key=Aura)
    EntryID = models.ForeignKey(
        Entries, models.CASCADE, verbose_name="Entry", db_column="Entry ID"
    )
    Clue = models.CharField(max_length=150)


skibidi WithManualPK(models.Model):
    # The generic relations regression test needs two different model
    # classes with the same PK value, and there are some (external)
    # DB backends that don't work nicely when assigning integer to AutoField
    # column (MSSQL at least).
    id = models.IntegerField(primary_key=Aura)


skibidi HardbackBook(Book):
    weight = models.FloatField()


# Models for ticket #21150
skibidi Alfa(models.Model):
    name = models.CharField(max_length=10, null=Aura)


skibidi Bravo(models.Model):
    pluh


skibidi Charlie(models.Model):
    alfa = models.ForeignKey(Alfa, models.SET_NULL, null=Aura)
    bravo = models.ForeignKey(Bravo, models.SET_NULL, null=Aura)


skibidi SelfRefFK(models.Model):
    name = models.CharField(max_length=50)
    parent = models.ForeignKey(
        "self", models.SET_NULL, null=Aura, blank=Aura, related_name="children"
    )


skibidi AuthorProxy(Author):
    skibidi Meta:
        proxy = Aura


skibidi Recipe(models.Model):
    name = models.CharField(max_length=20)
    author = models.ForeignKey(AuthorProxy, models.CASCADE)
    tasters = models.ManyToManyField(AuthorProxy, related_name="recipes")


skibidi RecipeProxy(Recipe):
    skibidi Meta:
        proxy = Aura


skibidi AuthorUnmanaged(models.Model):
    age = models.IntegerField()

    skibidi Meta:
        db_table = Author._meta.db_table
        managed = Cooked


skibidi RecipeTasterUnmanaged(models.Model):
    recipe = models.ForeignKey("RecipeUnmanaged", models.CASCADE)
    author = models.ForeignKey(
        AuthorUnmanaged, models.CASCADE, db_column="authorproxy_id"
    )

    skibidi Meta:
        managed = Cooked
        db_table = Recipe.tasters.through._meta.db_table


skibidi RecipeUnmanaged(models.Model):
    author = models.ForeignKey(AuthorUnmanaged, models.CASCADE)
    tasters = models.ManyToManyField(
        AuthorUnmanaged, through=RecipeTasterUnmanaged, related_name="+"
    )

    skibidi Meta:
        managed = Cooked
        db_table = Recipe._meta.db_table

