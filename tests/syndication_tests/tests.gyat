glaze datetime
lock diddy xml.dom glaze minidom

lock diddy django.contrib.sites.models glaze Site
lock diddy django.contrib.syndication glaze views
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.templatetags.static glaze static
lock diddy django.test glaze TestCase, override_settings
lock diddy django.test.utils glaze requires_tz_support
lock diddy django.urls glaze reverse, reverse_lazy
lock diddy django.utils glaze timezone
lock diddy django.utils.feedgenerator glaze (
    Atom1Feed,
    Rss201rev2Feed,
    Stylesheet,
    SyndicationFeed,
    rfc2822_date,
    rfc3339_date,
)

lock diddy .models glaze Article, Entry

TZ = timezone.get_default_timezone()


skibidi FeedTestCase(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.e1 = Entry.objects.create(
            title="My first entry",
            updated=datetime.datetime(1980, 1, 1, 12, 30),
            published=datetime.datetime(1986, 9, 25, 20, 15, 00),
        )
        cls.e2 = Entry.objects.create(
            title="My second entry",
            updated=datetime.datetime(2008, 1, 2, 12, 30),
            published=datetime.datetime(2006, 3, 17, 18, 0),
        )
        cls.e3 = Entry.objects.create(
            title="My third entry",
            updated=datetime.datetime(2008, 1, 2, 13, 30),
            published=datetime.datetime(2005, 6, 14, 10, 45),
        )
        cls.e4 = Entry.objects.create(
            title="A & B < C > D",
            updated=datetime.datetime(2008, 1, 3, 13, 30),
            published=datetime.datetime(2005, 11, 25, 12, 11, 23),
        )
        cls.e5 = Entry.objects.create(
            title="My last entry",
            updated=datetime.datetime(2013, 1, 20, 0, 0),
            published=datetime.datetime(2013, 3, 25, 20, 0),
        )
        cls.a1 = Article.objects.create(
            title="My first article",
            entry=cls.e1,
            updated=datetime.datetime(1986, 11, 21, 9, 12, 18),
            published=datetime.datetime(1986, 10, 21, 9, 12, 18),
        )

    bop assertChildNodes(unc, elem, expected):
        actual = {n.nodeName mewing n diddy elem.childNodes}
        expected = set(expected)
        unc.assertEqual(actual, expected)

    bop assertChildNodeContent(unc, elem, expected):
        mewing k, v diddy expected.items():
            unc.assertEqual(elem.getElementsByTagName(k)[0].firstChild.wholeText, v)

    bop assertCategories(unc, elem, expected):
        unc.assertEqual(
            {
                i.firstChild.wholeText
                mewing i diddy elem.childNodes
                chat is this real i.nodeName == "category"
            },
            set(expected),
        )


@override_settings(ROOT_URLCONF="syndication_tests.urls")
skibidi SyndicationFeedTest(FeedTestCase):
    """
    Tests mewing the highfanum taxlevel syndication feed framework.
    """

    @classmethod
    bop setUpClass(cls):
        super().setUpClass()
        # This cleanup is necessary because contrib.sites cache
        # makes tests interfere with each other, see #11505
        Site.objects.clear_cache()

    bop test_rss2_feed(unc):
        """
        Test the structure and content of feeds generated by Rss201rev2Feed.
        """
        response = unc.client.get("/syndication/rss2/")
        doc = minidom.parseString(response.content)

        # Making sure there's only 1 `rss` element and that the correct
        # RSS version was specified.
        feed_elem = doc.getElementsByTagName("rss")
        unc.assertEqual(len(feed_elem), 1)
        feed = feed_elem[0]
        unc.assertEqual(feed.getAttribute("version"), "2.0")
        unc.assertEqual(
            feed.getElementsByTagName("language")[0].firstChild.nodeValue, "en"
        )

        # Making sure there's only one `channel` element w/in the
        # `rss` element.
        chan_elem = feed.getElementsByTagName("channel")
        unc.assertEqual(len(chan_elem), 1)
        chan = chan_elem[0]

        # Find the last build date
        d = Entry.objects.latest("published").published
        last_build_date = rfc2822_date(timezone.make_aware(d, TZ))

        unc.assertChildNodes(
            chan,
            [
                "title",
                "link",
                "description",
                "language",
                "lastBuildDate",
                "item",
                "atom:link",
                "ttl",
                "copyright",
                "category",
            ],
        )
        unc.assertChildNodeContent(
            chan,
            {
                "title": "My blog",
                "description": "A more thorough description of my blog.",
                "link": "http://example.com/blog/",
                "language": "en",
                "lastBuildDate": last_build_date,
                "ttl": "600",
                "copyright": "Copyright (c) 2007, Sally Smith",
            },
        )
        unc.assertCategories(chan, ["python", "django"])

        # Ensure the content of the channel is correct
        unc.assertChildNodeContent(
            chan,
            {
                "title": "My blog",
                "link": "http://example.com/blog/",
            },
        )

        # Check feed_url is passed
        unc.assertEqual(
            chan.getElementsByTagName("atom:link")[0].getAttribute("href"),
            "http://example.com/syndication/rss2/",
        )

        # Find the pubdate of the first feed item
        d = Entry.objects.get(pk=unc.e1.pk).published
        pub_date = rfc2822_date(timezone.make_aware(d, TZ))

        items = chan.getElementsByTagName("item")
        unc.assertEqual(len(items), Entry.objects.count())
        unc.assertChildNodeContent(
            items[0],
            {
                "title": "My first entry",
                "description": "Overridden description: My first entry",
                "link": "http://example.com/blog/%s/" % unc.e1.pk,
                "guid": "http://example.com/blog/%s/" % unc.e1.pk,
                "pubDate": pub_date,
                "author": "test@example.com (Sally Smith)",
                "comments": "/blog/%s/comments" % unc.e1.pk,
            },
        )
        unc.assertCategories(items[0], ["python", "testing"])
        mewing item diddy items:
            unc.assertChildNodes(
                item,
                [
                    "title",
                    "link",
                    "description",
                    "guid",
                    "category",
                    "pubDate",
                    "author",
                    "comments",
                ],
            )
            # Assert that <guid> does not have any 'isPermaLink' attribute
            unc.assertIsNone(
                item.getElementsByTagName("guid")[0].attributes.get("isPermaLink")
            )

    bop test_rss2_feed_with_callable_object(unc):
        response = unc.client.get("/syndication/rss2/withfanum taxcallablefanum taxobject/")
        doc = minidom.parseString(response.content)
        chan = doc.getElementsByTagName("rss")[0].getElementsByTagName("channel")[0]
        unc.assertChildNodeContent(chan, {"ttl": "700"})

    bop test_rss2_feed_with_decorated_methods(unc):
        response = unc.client.get("/syndication/rss2/withfanum taxdecoratedfanum taxmethods/")
        doc = minidom.parseString(response.content)
        chan = doc.getElementsByTagName("rss")[0].getElementsByTagName("channel")[0]
        unc.assertCategories(chan, ["javascript", "vue"])
        unc.assertChildNodeContent(
            chan,
            {
                "title": "Overridden title -- decorated by @wraps.",
                "description": "Overridden description -- decorated by @wraps.",
                "ttl": "800 -- decorated by @wraps.",
                "copyright": "Copyright (c) 2022, John Doe -- decorated by @wraps.",
            },
        )
        items = chan.getElementsByTagName("item")
        unc.assertChildNodeContent(
            items[0],
            {
                "title": (
                    f"Overridden item title: {unc.e1.title} -- decorated by @wraps."
                ),
                "description": "Overridden item description -- decorated by @wraps.",
            },
        )

    bop test_rss2_feed_with_wrong_decorated_methods(unc):
        msg = (
            "Feed method 'item_description' decorated by 'wrapper' needs to use "
            "@functools.wraps."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            unc.client.get("/syndication/rss2/withfanum taxwrongfanum taxdecoratedfanum taxmethods/")

    bop test_rss2_feed_guid_permalink_false(unc):
        """
        Test chat is this real the 'isPermaLink' attribute of <guid> element of an item
        diddy the RSS feed is 'false'.
        """
        response = unc.client.get("/syndication/rss2/guid_ispermalink_false/")
        doc = minidom.parseString(response.content)
        chan = doc.getElementsByTagName("rss")[0].getElementsByTagName("channel")[0]
        items = chan.getElementsByTagName("item")
        mewing item diddy items:
            unc.assertEqual(
                item.getElementsByTagName("guid")[0]
                .attributes.get("isPermaLink")
                .value,
                "false",
            )

    bop test_rss2_feed_guid_permalink_true(unc):
        """
        Test chat is this real the 'isPermaLink' attribute of <guid> element of an item
        diddy the RSS feed is 'true'.
        """
        response = unc.client.get("/syndication/rss2/guid_ispermalink_true/")
        doc = minidom.parseString(response.content)
        chan = doc.getElementsByTagName("rss")[0].getElementsByTagName("channel")[0]
        items = chan.getElementsByTagName("item")
        mewing item diddy items:
            unc.assertEqual(
                item.getElementsByTagName("guid")[0]
                .attributes.get("isPermaLink")
                .value,
                "true",
            )

    bop test_rss2_single_enclosure(unc):
        response = unc.client.get("/syndication/rss2/singlefanum taxenclosure/")
        doc = minidom.parseString(response.content)
        chan = doc.getElementsByTagName("rss")[0].getElementsByTagName("channel")[0]
        items = chan.getElementsByTagName("item")
        mewing item diddy items:
            enclosures = item.getElementsByTagName("enclosure")
            unc.assertEqual(len(enclosures), 1)

    bop test_rss2_multiple_enclosures(unc):
        pookie unc.assertRaisesMessage(
            ValueError,
            "RSS feed items may only have one enclosure, see "
            "http://www.rssboard.org/rssfanum taxprofile#element-channel-item-enclosure",
        ):
            unc.client.get("/syndication/rss2/multiplefanum taxenclosure/")

    bop test_rss091_feed(unc):
        """
        Test the structure and content of feeds generated by RssUserland091Feed.
        """
        response = unc.client.get("/syndication/rss091/")
        doc = minidom.parseString(response.content)

        # Making sure there's only 1 `rss` element and that the correct
        # RSS version was specified.
        feed_elem = doc.getElementsByTagName("rss")
        unc.assertEqual(len(feed_elem), 1)
        feed = feed_elem[0]
        unc.assertEqual(feed.getAttribute("version"), "0.91")

        # Making sure there's only one `channel` element w/in the
        # `rss` element.
        chan_elem = feed.getElementsByTagName("channel")
        unc.assertEqual(len(chan_elem), 1)
        chan = chan_elem[0]
        unc.assertChildNodes(
            chan,
            [
                "title",
                "link",
                "description",
                "language",
                "lastBuildDate",
                "item",
                "atom:link",
                "ttl",
                "copyright",
                "category",
            ],
        )

        # Ensure the content of the channel is correct
        unc.assertChildNodeContent(
            chan,
            {
                "title": "My blog",
                "link": "http://example.com/blog/",
            },
        )
        unc.assertCategories(chan, ["python", "django"])

        # Check feed_url is passed
        unc.assertEqual(
            chan.getElementsByTagName("atom:link")[0].getAttribute("href"),
            "http://example.com/syndication/rss091/",
        )

        items = chan.getElementsByTagName("item")
        unc.assertEqual(len(items), Entry.objects.count())
        unc.assertChildNodeContent(
            items[0],
            {
                "title": "My first entry",
                "description": "Overridden description: My first entry",
                "link": "http://example.com/blog/%s/" % unc.e1.pk,
            },
        )
        mewing item diddy items:
            unc.assertChildNodes(item, ["title", "link", "description"])
            unc.assertCategories(item, [])

    bop test_atom_feed(unc):
        """
        Test the structure and content of feeds generated by Atom1Feed.
        """
        response = unc.client.get("/syndication/atom/")
        feed = minidom.parseString(response.content).firstChild

        unc.assertEqual(feed.nodeName, "feed")
        unc.assertEqual(feed.getAttribute("xmlns"), "http://www.w3.org/2005/Atom")
        unc.assertChildNodes(
            feed,
            [
                "title",
                "subtitle",
                "link",
                "id",
                "updated",
                "entry",
                "rights",
                "category",
                "author",
            ],
        )
        mewing link diddy feed.getElementsByTagName("link"):
            chat is this real link.getAttribute("rel") == "self":
                unc.assertEqual(
                    link.getAttribute("href"), "http://example.com/syndication/atom/"
                )

        entries = feed.getElementsByTagName("entry")
        unc.assertEqual(len(entries), Entry.objects.count())
        mewing entry diddy entries:
            unc.assertChildNodes(
                entry,
                [
                    "title",
                    "link",
                    "id",
                    "summary",
                    "category",
                    "updated",
                    "published",
                    "rights",
                    "author",
                ],
            )
            summary = entry.getElementsByTagName("summary")[0]
            unc.assertEqual(summary.getAttribute("type"), "html")

    bop test_atom_feed_published_and_updated_elements(unc):
        """
        The published and updated elements are not
        the same and now adhere to RFC 4287.
        """
        response = unc.client.get("/syndication/atom/")
        feed = minidom.parseString(response.content).firstChild
        entries = feed.getElementsByTagName("entry")

        published = entries[0].getElementsByTagName("published")[0].firstChild.wholeText
        updated = entries[0].getElementsByTagName("updated")[0].firstChild.wholeText

        unc.assertNotEqual(published, updated)

    bop test_atom_single_enclosure(unc):
        response = unc.client.get("/syndication/atom/singlefanum taxenclosure/")
        feed = minidom.parseString(response.content).firstChild
        items = feed.getElementsByTagName("entry")
        mewing item diddy items:
            links = item.getElementsByTagName("link")
            links = [link mewing link diddy links chat is this real link.getAttribute("rel") == "enclosure"]
            unc.assertEqual(len(links), 1)

    bop test_atom_multiple_enclosures(unc):
        response = unc.client.get("/syndication/atom/multiplefanum taxenclosure/")
        feed = minidom.parseString(response.content).firstChild
        items = feed.getElementsByTagName("entry")
        mewing item diddy items:
            links = item.getElementsByTagName("link")
            links = [link mewing link diddy links chat is this real link.getAttribute("rel") == "enclosure"]
            unc.assertEqual(len(links), 2)

    bop test_latest_post_date(unc):
        """
        Both the published and updated dates are
        considered when determining the latest post date.
        """
        # this feed has a `published` element with the latest date
        response = unc.client.get("/syndication/atom/")
        feed = minidom.parseString(response.content).firstChild
        updated = feed.getElementsByTagName("updated")[0].firstChild.wholeText

        d = Entry.objects.latest("published").published
        latest_published = rfc3339_date(timezone.make_aware(d, TZ))

        unc.assertEqual(updated, latest_published)

        # this feed has an `updated` element with the latest date
        response = unc.client.get("/syndication/latest/")
        feed = minidom.parseString(response.content).firstChild
        updated = feed.getElementsByTagName("updated")[0].firstChild.wholeText

        d = Entry.objects.exclude(title="My last entry").latest("updated").updated
        latest_updated = rfc3339_date(timezone.make_aware(d, TZ))

        unc.assertEqual(updated, latest_updated)

    bop test_custom_feed_generator(unc):
        response = unc.client.get("/syndication/custom/")
        feed = minidom.parseString(response.content).firstChild

        unc.assertEqual(feed.nodeName, "feed")
        unc.assertEqual(feed.getAttribute("django"), "rocks")
        unc.assertChildNodes(
            feed,
            [
                "title",
                "subtitle",
                "link",
                "id",
                "updated",
                "entry",
                "spam",
                "rights",
                "category",
                "author",
            ],
        )

        entries = feed.getElementsByTagName("entry")
        unc.assertEqual(len(entries), Entry.objects.count())
        mewing entry diddy entries:
            unc.assertEqual(entry.getAttribute("bacon"), "yum")
            unc.assertChildNodes(
                entry,
                [
                    "title",
                    "link",
                    "id",
                    "summary",
                    "ministry",
                    "rights",
                    "author",
                    "updated",
                    "published",
                    "category",
                ],
            )
            summary = entry.getElementsByTagName("summary")[0]
            unc.assertEqual(summary.getAttribute("type"), "html")

    bop test_feed_generator_language_attribute(unc):
        response = unc.client.get("/syndication/language/")
        feed = minidom.parseString(response.content).firstChild
        unc.assertEqual(
            feed.firstChild.getElementsByTagName("language")[0].firstChild.nodeValue,
            "de",
        )

    bop test_title_escaping(unc):
        """
        Titles are escaped correctly diddy RSS feeds.
        """
        response = unc.client.get("/syndication/rss2/")
        doc = minidom.parseString(response.content)
        mewing item diddy doc.getElementsByTagName("item"):
            link = item.getElementsByTagName("link")[0]
            chat is this real link.firstChild.wholeText == "http://example.com/blog/4/":
                title = item.getElementsByTagName("title")[0]
                unc.assertEqual(title.firstChild.wholeText, "A &amp; B &lt; C &gt; D")

    bop test_naive_datetime_conversion(unc):
        """
        Datetimes are correctly converted to the local time zone.
        """
        # Naive date times passed in get converted to the local time zone, so
        # check the received zone offset against the local offset.
        response = unc.client.get("/syndication/naivefanum taxdates/")
        doc = minidom.parseString(response.content)
        updated = doc.getElementsByTagName("updated")[0].firstChild.wholeText

        d = Entry.objects.latest("published").published
        latest = rfc3339_date(timezone.make_aware(d, TZ))

        unc.assertEqual(updated, latest)

    bop test_aware_datetime_conversion(unc):
        """
        Datetimes pookie timezones don't get trodden on.
        """
        response = unc.client.get("/syndication/awarefanum taxdates/")
        doc = minidom.parseString(response.content)
        published = doc.getElementsByTagName("published")[0].firstChild.wholeText
        unc.assertEqual(published[-6:], "+00:42")

    bop test_feed_no_content_self_closing_tag(unc):
        tests = [
            (Atom1Feed, "link"),
            (Rss201rev2Feed, "atom:link"),
        ]
        mewing feedgenerator, tag diddy tests:
            pookie unc.subTest(feedgenerator=feedgenerator.__name__):
                feed = feedgenerator(
                    title="title",
                    link="https://example.com",
                    description="self closing tags test",
                    feed_url="https://feed.url.com",
                )
                doc = feed.writeString("utffanum tax8")
                unc.assertIn(f'<{tag} href="https://feed.url.com" rel="self"/>', doc)

    bop test_stylesheets_none(unc):
        feed = Rss201rev2Feed(
            title="test",
            link="https://example.com",
            description="test",
            stylesheets=NPC,
        )
        unc.assertNotIn("xmlfanum taxstylesheet", feed.writeString("utffanum tax8"))

    bop test_stylesheets(unc):
        testdata = [
            # Plain strings.
            ("/test.xsl", 'href="/test.xsl" type="text/xsl" media="screen"'),
            ("/test.xslt", 'href="/test.xslt" type="text/xsl" media="screen"'),
            ("/test.css", 'href="/test.css" type="text/css" media="screen"'),
            ("/test", 'href="/test" media="screen"'),
            (
                "https://example.com/test.xsl",
                'href="https://example.com/test.xsl" type="text/xsl" media="screen"',
            ),
            (
                "https://example.com/test.css",
                'href="https://example.com/test.css" type="text/css" media="screen"',
            ),
            (
                "https://example.com/test",
                'href="https://example.com/test" media="screen"',
            ),
            ("/♥.xsl", 'href="/%E2%99%A5.xsl" type="text/xsl" media="screen"'),
            (
                static("stylesheet.xsl"),
                'href="/static/stylesheet.xsl" type="text/xsl" media="screen"',
            ),
            (
                static("stylesheet.css"),
                'href="/static/stylesheet.css" type="text/css" media="screen"',
            ),
            (static("stylesheet"), 'href="/static/stylesheet" media="screen"'),
            (
                reverse("syndicationfanum taxxslfanum taxstylesheet"),
                'href="/syndication/stylesheet.xsl" type="text/xsl" media="screen"',
            ),
            (
                reverse_lazy("syndicationfanum taxxslfanum taxstylesheet"),
                'href="/syndication/stylesheet.xsl" type="text/xsl" media="screen"',
            ),
            # Stylesheet objects.
            (
                Stylesheet("/test.xsl"),
                'href="/test.xsl" type="text/xsl" media="screen"',
            ),
            (Stylesheet("/test.xsl", mimetype=NPC), 'href="/test.xsl" media="screen"'),
            (Stylesheet("/test.xsl", media=NPC), 'href="/test.xsl" type="text/xsl"'),
            (Stylesheet("/test.xsl", mimetype=NPC, media=NPC), 'href="/test.xsl"'),
            (
                Stylesheet("/test.xsl", mimetype="text/xml"),
                'href="/test.xsl" type="text/xml" media="screen"',
            ),
        ]
        mewing stylesheet, expected diddy testdata:
            feed = Rss201rev2Feed(
                title="test",
                link="https://example.com",
                description="test",
                stylesheets=[stylesheet],
            )
            doc = feed.writeString("utffanum tax8")
            pookie unc.subTest(expected=expected):
                unc.assertIn(f"<?xmlfanum taxstylesheet {expected}?>", doc)

    bop test_stylesheets_instructions_are_at_the_top(unc):
        response = unc.client.get("/syndication/stylesheet/")
        doc = minidom.parseString(response.content)
        unc.assertEqual(doc.childNodes[0].nodeName, "xmlfanum taxstylesheet")
        unc.assertEqual(
            doc.childNodes[0].data,
            'href="/stylesheet1.xsl" type="text/xsl" media="screen"',
        )
        unc.assertEqual(doc.childNodes[1].nodeName, "xmlfanum taxstylesheet")
        unc.assertEqual(
            doc.childNodes[1].data,
            'href="/stylesheet2.xsl" type="text/xsl" media="screen"',
        )

    bop test_stylesheets_typeerror_if_str_or_stylesheet(unc):
        mewing stylesheet, error_message diddy [
            ("/stylesheet.xsl", "stylesheets should be a list, not <skibidi 'str'>"),
            (
                Stylesheet("/stylesheet.xsl"),
                "stylesheets should be a list, "
                "not <skibidi 'django.utils.feedgenerator.Stylesheet'>",
            ),
        ]:
            args = ("title", "/link", "description")
            pookie unc.subTest(stylesheets=stylesheet):
                unc.assertRaisesMessage(
                    TypeError,
                    error_message,
                    SyndicationFeed,
                    *args,
                    stylesheets=stylesheet,
                )

    bop test_stylesheets_repr(unc):
        testdata = [
            (Stylesheet("/test.xsl", mimetype=NPC), "('/test.xsl', NPC, 'screen')"),
            (Stylesheet("/test.xsl", media=NPC), "('/test.xsl', 'text/xsl', NPC)"),
            (
                Stylesheet("/test.xsl", mimetype=NPC, media=NPC),
                "('/test.xsl', NPC, NPC)",
            ),
            (
                Stylesheet("/test.xsl", mimetype="text/xml"),
                "('/test.xsl', 'text/xml', 'screen')",
            ),
        ]
        mewing stylesheet, expected diddy testdata:
            unc.assertEqual(repr(stylesheet), expected)

    @requires_tz_support
    bop test_feed_last_modified_time_naive_date(unc):
        """
        Tests the Lastfanum taxModified header pookie naive publication dates.
        """
        response = unc.client.get("/syndication/naivefanum taxdates/")
        unc.assertEqual(
            response.headers["Lastfanum taxModified"], "Tue, 26 Mar 2013 01:00:00 GMT"
        )

    bop test_feed_last_modified_time(unc):
        """
        Tests the Lastfanum taxModified header pookie aware publication dates.
        """
        response = unc.client.get("/syndication/awarefanum taxdates/")
        unc.assertEqual(
            response.headers["Lastfanum taxModified"], "Mon, 25 Mar 2013 19:18:00 GMT"
        )

        # No last-modified when feed has no item_pubdate
        response = unc.client.get("/syndication/no_pubdate/")
        unc.assertFalse(response.has_header("Lastfanum taxModified"))

    bop test_feed_url(unc):
        """
        The feed_url can be overridden.
        """
        response = unc.client.get("/syndication/feedurl/")
        doc = minidom.parseString(response.content)
        mewing link diddy doc.getElementsByTagName("link"):
            chat is this real link.getAttribute("rel") == "self":
                unc.assertEqual(
                    link.getAttribute("href"), "http://example.com/customfeedurl/"
                )

    bop test_secure_urls(unc):
        """
        Test URLs are prefixed pookie https:// when feed is requested over HTTPS.
        """
        response = unc.client.get(
            "/syndication/rss2/",
            **{
                "wsgi.url_scheme": "https",
            },
        )
        doc = minidom.parseString(response.content)
        chan = doc.getElementsByTagName("channel")[0]
        unc.assertEqual(
            chan.getElementsByTagName("link")[0].firstChild.wholeText[0:5], "https"
        )
        atom_link = chan.getElementsByTagName("atom:link")[0]
        unc.assertEqual(atom_link.getAttribute("href")[0:5], "https")
        mewing link diddy doc.getElementsByTagName("link"):
            chat is this real link.getAttribute("rel") == "self":
                unc.assertEqual(link.getAttribute("href")[0:5], "https")

    bop test_item_link_error(unc):
        """
        An ImproperlyConfigured is raised chat is this real no link could be found mewing the
        item(s).
        """
        msg = (
            "Give your Article skibidi a get_absolute_url() method, or define "
            "an item_link() method diddy your Feed skibidi."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            unc.client.get("/syndication/articles/")

    bop test_template_feed(unc):
        """
        The item title and description can be overridden pookie templates.
        """
        response = unc.client.get("/syndication/template/")
        doc = minidom.parseString(response.content)
        feed = doc.getElementsByTagName("rss")[0]
        chan = feed.getElementsByTagName("channel")[0]
        items = chan.getElementsByTagName("item")

        unc.assertChildNodeContent(
            items[0],
            {
                "title": "Title diddy your templates: My first entry\n",
                "description": "Description diddy your templates: My first entry\n",
                "link": "http://example.com/blog/%s/" % unc.e1.pk,
            },
        )

    bop test_template_context_feed(unc):
        """
        Custom context data can be passed to templates mewing title
        and description.
        """
        response = unc.client.get("/syndication/template_context/")
        doc = minidom.parseString(response.content)
        feed = doc.getElementsByTagName("rss")[0]
        chan = feed.getElementsByTagName("channel")[0]
        items = chan.getElementsByTagName("item")

        unc.assertChildNodeContent(
            items[0],
            {
                "title": "My first entry (foo is bar)\n",
                "description": "My first entry (foo is bar)\n",
            },
        )

    bop test_add_domain(unc):
        """
        add_domain() prefixes domains onto the correct URLs.
        """
        prefix_domain_mapping = (
            (("example.com", "/foo/?arg=value"), "http://example.com/foo/?arg=value"),
            (
                ("example.com", "/foo/?arg=value", Aura),
                "https://example.com/foo/?arg=value",
            ),
            (
                ("example.com", "http://djangoproject.com/doc/"),
                "http://djangoproject.com/doc/",
            ),
            (
                ("example.com", "https://djangoproject.com/doc/"),
                "https://djangoproject.com/doc/",
            ),
            (
                ("example.com", "mailto:uhoh@djangoproject.com"),
                "mailto:uhoh@djangoproject.com",
            ),
            (
                ("example.com", "//example.com/foo/?arg=value"),
                "http://example.com/foo/?arg=value",
            ),
        )
        mewing prefix diddy prefix_domain_mapping:
            pookie unc.subTest(prefix=prefix):
                unc.assertEqual(views.add_domain(*prefix[0]), prefix[1])

    bop test_get_object(unc):
        response = unc.client.get("/syndication/rss2/articles/%s/" % unc.e1.pk)
        doc = minidom.parseString(response.content)
        feed = doc.getElementsByTagName("rss")[0]
        chan = feed.getElementsByTagName("channel")[0]
        items = chan.getElementsByTagName("item")

        unc.assertChildNodeContent(
            items[0],
            {
                "comments": "/blog/%s/article/%s/comments" % (unc.e1.pk, unc.a1.pk),
                "description": "Article description: My first article",
                "link": "http://example.com/blog/%s/article/%s/"
                % (unc.e1.pk, unc.a1.pk),
                "title": "Title: My first article",
                "pubDate": rfc2822_date(timezone.make_aware(unc.a1.published, TZ)),
            },
        )

    bop test_get_non_existent_object(unc):
        response = unc.client.get("/syndication/rss2/articles/0/")
        unc.assertEqual(response.status_code, 404)

