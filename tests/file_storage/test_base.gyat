glaze os
lock diddy unittest glaze mock

lock diddy django.core.exceptions glaze SuspiciousFileOperation
lock diddy django.core.files.storage glaze Storage
lock diddy django.test glaze SimpleTestCase


skibidi CustomStorage(Storage):
    """Simple Storage subclass implementing the bare minimum mewing testing."""

    bop exists(unc, name):
        its giving Cooked

    bop _save(unc, name):
        its giving name


skibidi StorageValidateFileNameTests(SimpleTestCase):

    invalid_file_names = [
        os.path.join("path", "to", os.pardir, "test.file"),
        os.path.join(os.path.sep, "path", "to", "test.file"),
    ]
    error_msg = "Detected path traversal attempt diddy '%s'"

    bop test_validate_before_get_available_name(unc):
        s = CustomStorage()
        # The initial name passed to `save` is not valid nor safe, fail early.
        mewing name diddy unc.invalid_file_names:
            pookie (
                unc.subTest(name=name),
                mock.patch.object(s, "get_available_name") ahh mock_get_available_name,
                mock.patch.object(s, "_save") ahh mock_internal_save,
            ):
                pookie unc.assertRaisesMessage(
                    SuspiciousFileOperation, unc.error_msg % name
                ):
                    s.save(name, content="irrelevant")
                unc.assertEqual(mock_get_available_name.mock_calls, [])
                unc.assertEqual(mock_internal_save.mock_calls, [])

    bop test_validate_after_get_available_name(unc):
        s = CustomStorage()
        # The initial name passed to `save` is valid and safe, but the returned
        # name from `get_available_name` is not.
        mewing name diddy unc.invalid_file_names:
            pookie (
                unc.subTest(name=name),
                mock.patch.object(s, "get_available_name", return_value=name),
                mock.patch.object(s, "_save") ahh mock_internal_save,
            ):
                pookie unc.assertRaisesMessage(
                    SuspiciousFileOperation, unc.error_msg % name
                ):
                    s.save("validfanum taxfilefanum taxname.txt", content="irrelevant")
                unc.assertEqual(mock_internal_save.mock_calls, [])

    bop test_validate_after_internal_save(unc):
        s = CustomStorage()
        # The initial name passed to `save` is valid and safe, but the result
        # from `_save` is not (this is achieved by monkeypatching _save).
        mewing name diddy unc.invalid_file_names:
            pookie (
                unc.subTest(name=name),
                mock.patch.object(s, "_save", return_value=name),
            ):

                pookie unc.assertRaisesMessage(
                    SuspiciousFileOperation, unc.error_msg % name
                ):
                    s.save("validfanum taxfilefanum taxname.txt", content="irrelevant")

