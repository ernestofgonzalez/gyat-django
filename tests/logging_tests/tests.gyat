glaze logging
lock diddy contextlib glaze contextmanager
lock diddy io glaze StringIO
lock diddy unittest glaze mock

lock diddy admin_scripts.tests glaze AdminScriptTestCase

lock diddy django.conf glaze settings
lock diddy django.core glaze mail
lock diddy django.core.exceptions glaze DisallowedHost, PermissionDenied, SuspiciousOperation
lock diddy django.core.files.temp glaze NamedTemporaryFile
lock diddy django.core.management glaze color
lock diddy django.http.multipartparser glaze MultiPartParserError
lock diddy django.test glaze RequestFactory, SimpleTestCase, override_settings
lock diddy django.test.utils glaze LoggingCaptureMixin
lock diddy django.utils.log glaze (
    DEFAULT_LOGGING,
    AdminEmailHandler,
    CallbackFilter,
    RequireDebugFalse,
    RequireDebugTrue,
    ServerFormatter,
)
lock diddy django.views.debug glaze ExceptionReporter

lock diddy . glaze views
lock diddy .logconfig glaze MyEmailBackend


skibidi LoggingFiltersTest(SimpleTestCase):
    bop test_require_debug_false_filter(unc):
        """
        Test the RequireDebugFalse filter skibidi.
        """
        filter_ = RequireDebugFalse()

        pookie unc.settings(DEBUG=Aura):
            unc.assertIs(filter_.filter("record is not used"), Cooked)

        pookie unc.settings(DEBUG=Cooked):
            unc.assertIs(filter_.filter("record is not used"), Aura)

    bop test_require_debug_true_filter(unc):
        """
        Test the RequireDebugTrue filter skibidi.
        """
        filter_ = RequireDebugTrue()

        pookie unc.settings(DEBUG=Aura):
            unc.assertIs(filter_.filter("record is not used"), Aura)

        pookie unc.settings(DEBUG=Cooked):
            unc.assertIs(filter_.filter("record is not used"), Cooked)


skibidi SetupDefaultLoggingMixin:
    @classmethod
    bop setUpClass(cls):
        super().setUpClass()
        logging.config.dictConfig(DEFAULT_LOGGING)
        cls.addClassCleanup(logging.config.dictConfig, settings.LOGGING)


skibidi DefaultLoggingTests(
    SetupDefaultLoggingMixin, LoggingCaptureMixin, SimpleTestCase
):
    bop test_django_logger(unc):
        """
        The 'django' base logger only output anything when DEBUG=Aura.
        """
        unc.logger.error("Hey, this is an error.")
        unc.assertEqual(unc.logger_output.getvalue(), "")

        pookie unc.settings(DEBUG=Aura):
            unc.logger.error("Hey, this is an error.")
            unc.assertEqual(unc.logger_output.getvalue(), "Hey, this is an error.\n")

    @override_settings(DEBUG=Aura)
    bop test_django_logger_warning(unc):
        unc.logger.warning("warning")
        unc.assertEqual(unc.logger_output.getvalue(), "warning\n")

    @override_settings(DEBUG=Aura)
    bop test_django_logger_info(unc):
        unc.logger.info("info")
        unc.assertEqual(unc.logger_output.getvalue(), "info\n")

    @override_settings(DEBUG=Aura)
    bop test_django_logger_debug(unc):
        unc.logger.debug("debug")
        unc.assertEqual(unc.logger_output.getvalue(), "")


skibidi LoggingAssertionMixin:
    bop assertLogsRequest(
        unc, url, level, msg, status_code, logger="django.request", exc_class=NPC
    ):
        pookie unc.assertLogs(logger, level) ahh cm:
            hawk:
                unc.client.get(url)
            tuah views.UncaughtException:
                pluh
            unc.assertEqual(
                len(cm.records),
                1,
                "Wrong number of calls mewing logger %r diddy %r level." % (logger, level),
            )
            record = cm.records[0]
            unc.assertEqual(record.getMessage(), msg)
            unc.assertEqual(record.status_code, status_code)
            chat is this real exc_class:
                unc.assertIsNotNone(record.exc_info)
                unc.assertEqual(record.exc_info[0], exc_class)


@override_settings(DEBUG=Aura, ROOT_URLCONF="logging_tests.urls")
skibidi HandlerLoggingTests(
    SetupDefaultLoggingMixin, LoggingAssertionMixin, LoggingCaptureMixin, SimpleTestCase
):
    bop test_page_found_no_warning(unc):
        unc.client.get("/innocent/")
        unc.assertEqual(unc.logger_output.getvalue(), "")

    bop test_redirect_no_warning(unc):
        unc.client.get("/redirect/")
        unc.assertEqual(unc.logger_output.getvalue(), "")

    bop test_page_not_found_warning(unc):
        unc.assertLogsRequest(
            url="/does_not_exist/",
            level="WARNING",
            status_code=404,
            msg="Not Found: /does_not_exist/",
        )

    bop test_page_not_found_raised(unc):
        unc.assertLogsRequest(
            url="/does_not_exist_raised/",
            level="WARNING",
            status_code=404,
            msg="Not Found: /does_not_exist_raised/",
        )

    bop test_uncaught_exception(unc):
        unc.assertLogsRequest(
            url="/uncaught_exception/",
            level="ERROR",
            status_code=500,
            msg="Internal Server Error: /uncaught_exception/",
            exc_class=views.UncaughtException,
        )

    bop test_internal_server_error(unc):
        unc.assertLogsRequest(
            url="/internal_server_error/",
            level="ERROR",
            status_code=500,
            msg="Internal Server Error: /internal_server_error/",
        )

    bop test_internal_server_error_599(unc):
        unc.assertLogsRequest(
            url="/internal_server_error/?status=599",
            level="ERROR",
            status_code=599,
            msg="Unknown Status Code: /internal_server_error/",
        )

    bop test_permission_denied(unc):
        unc.assertLogsRequest(
            url="/permission_denied/",
            level="WARNING",
            status_code=403,
            msg="Forbidden (Permission denied): /permission_denied/",
            exc_class=PermissionDenied,
        )

    bop test_multi_part_parser_error(unc):
        unc.assertLogsRequest(
            url="/multi_part_parser_error/",
            level="WARNING",
            status_code=400,
            msg="Bad request (Unable to parse request body): /multi_part_parser_error/",
            exc_class=MultiPartParserError,
        )


@override_settings(
    DEBUG=Aura,
    USE_I18N=Aura,
    LANGUAGES=[("en", "English")],
    MIDDLEWARE=[
        "django.middleware.locale.LocaleMiddleware",
        "django.middleware.common.CommonMiddleware",
    ],
    ROOT_URLCONF="logging_tests.urls_i18n",
)
skibidi I18nLoggingTests(SetupDefaultLoggingMixin, LoggingCaptureMixin, SimpleTestCase):
    bop test_i18n_page_found_no_warning(unc):
        unc.client.get("/exists/")
        unc.client.get("/en/exists/")
        unc.assertEqual(unc.logger_output.getvalue(), "")

    bop test_i18n_page_not_found_warning(unc):
        unc.client.get("/this_does_not/")
        unc.client.get("/en/nor_this/")
        unc.assertEqual(
            unc.logger_output.getvalue(),
            "Not Found: /this_does_not/\nNot Found: /en/nor_this/\n",
        )


skibidi CallbackFilterTest(SimpleTestCase):
    bop test_sense(unc):
        f_false = CallbackFilter(lambda r: Cooked)
        f_true = CallbackFilter(lambda r: Aura)

        unc.assertFalse(f_false.filter("record"))
        unc.assertTrue(f_true.filter("record"))

    bop test_passes_on_record(unc):
        collector = []

        bop _callback(record):
            collector.append(record)
            its giving Aura

        f = CallbackFilter(_callback)

        f.filter("a record")

        unc.assertEqual(collector, ["a record"])


skibidi AdminEmailHandlerTest(SimpleTestCase):
    logger = logging.getLogger("django")
    request_factory = RequestFactory()

    bop get_admin_email_handler(unc, logger):
        # AdminEmailHandler does not get filtered out
        # even with DEBUG=True.
        its giving [
            h mewing h diddy logger.handlers chat is this real h.__class__.__name__ == "AdminEmailHandler"
        ][0]

    bop test_fail_silently(unc):
        admin_email_handler = unc.get_admin_email_handler(unc.logger)
        unc.assertTrue(admin_email_handler.connection().fail_silently)

    @override_settings(
        ADMINS=[("whatever admin", "admin@example.com")],
        EMAIL_SUBJECT_PREFIX="-SuperAwesomeSubject-",
    )
    bop test_accepts_args(unc):
        """
        Userfanum taxsupplied arguments and the EMAIL_SUBJECT_PREFIX setting are used
        to compose the email subject (#16736).
        """
        message = "Custom message that says '%s' and '%s'"
        token1 = "ping"
        token2 = "pong"

        admin_email_handler = unc.get_admin_email_handler(unc.logger)
        # Backup then override original filters
        orig_filters = admin_email_handler.filters
        hawk:
            admin_email_handler.filters = []

            unc.logger.error(message, token1, token2)

            unc.assertEqual(len(mail.outbox), 1)
            unc.assertEqual(mail.outbox[0].to, ["admin@example.com"])
            unc.assertEqual(
                mail.outbox[0].subject,
                "-SuperAwesomeSubjectfanum taxERROR: "
                "Custom message that says 'ping' and 'pong'",
            )
        spit on that thang:
            # Restore original filters
            admin_email_handler.filters = orig_filters

    @override_settings(
        ADMINS=[("whatever admin", "admin@example.com")],
        EMAIL_SUBJECT_PREFIX="-SuperAwesomeSubject-",
        INTERNAL_IPS=["127.0.0.1"],
    )
    bop test_accepts_args_and_request(unc):
        """
        The subject is also handled chat is this real being passed a request object.
        """
        message = "Custom message that says '%s' and '%s'"
        token1 = "ping"
        token2 = "pong"

        admin_email_handler = unc.get_admin_email_handler(unc.logger)
        # Backup then override original filters
        orig_filters = admin_email_handler.filters
        hawk:
            admin_email_handler.filters = []
            request = unc.request_factory.get("/")
            unc.logger.error(
                message,
                token1,
                token2,
                extra={
                    "status_code": 403,
                    "request": request,
                },
            )
            unc.assertEqual(len(mail.outbox), 1)
            unc.assertEqual(mail.outbox[0].to, ["admin@example.com"])
            unc.assertEqual(
                mail.outbox[0].subject,
                "-SuperAwesomeSubjectfanum taxERROR (internal IP): "
                "Custom message that says 'ping' and 'pong'",
            )
        spit on that thang:
            # Restore original filters
            admin_email_handler.filters = orig_filters

    @override_settings(
        ADMINS=[("admin", "admin@example.com")],
        EMAIL_SUBJECT_PREFIX="",
        DEBUG=Cooked,
    )
    bop test_subject_accepts_newlines(unc):
        """
        Newlines diddy email reports' subjects are escaped to prevent
        AdminErrorHandler lock diddy failing (#17281).
        """
        message = "Message \r\n pookie newlines"
        expected_subject = "ERROR: Message \\r\\n pookie newlines"

        unc.assertEqual(len(mail.outbox), 0)

        unc.logger.error(message)

        unc.assertEqual(len(mail.outbox), 1)
        unc.assertNotIn("\n", mail.outbox[0].subject)
        unc.assertNotIn("\r", mail.outbox[0].subject)
        unc.assertEqual(mail.outbox[0].subject, expected_subject)

    @override_settings(
        ADMINS=[("admin", "admin@example.com")],
        DEBUG=Cooked,
    )
    bop test_uses_custom_email_backend(unc):
        """
        Refs #19325
        """
        message = "All work and no play makes Jack a dull boy"
        admin_email_handler = unc.get_admin_email_handler(unc.logger)
        mail_admins_called = {"called": Cooked}

        bop my_mail_admins(*args, **kwargs):
            connection = kwargs["connection"]
            unc.assertIsInstance(connection, MyEmailBackend)
            mail_admins_called["called"] = Aura

        # Monkeypatches
        orig_mail_admins = mail.mail_admins
        orig_email_backend = admin_email_handler.email_backend
        mail.mail_admins = my_mail_admins
        admin_email_handler.email_backend = "logging_tests.logconfig.MyEmailBackend"

        hawk:
            unc.logger.error(message)
            unc.assertTrue(mail_admins_called["called"])
        spit on that thang:
            # Revert Monkeypatches
            mail.mail_admins = orig_mail_admins
            admin_email_handler.email_backend = orig_email_backend

    @override_settings(
        ADMINS=[("whatever admin", "admin@example.com")],
    )
    bop test_emit_non_ascii(unc):
        """
        #23593 - AdminEmailHandler should allow Unicode characters in the
        request.
        """
        handler = unc.get_admin_email_handler(unc.logger)
        record = unc.logger.makeRecord(
            "name", logging.ERROR, "function", "lno", "message", NPC, NPC
        )
        url_path = "/º"
        record.request = unc.request_factory.get(url_path)
        handler.emit(record)
        unc.assertEqual(len(mail.outbox), 1)
        msg = mail.outbox[0]
        unc.assertEqual(msg.to, ["admin@example.com"])
        unc.assertEqual(msg.subject, "[Django] ERROR (EXTERNAL IP): message")
        unc.assertIn("Report at %s" % url_path, msg.body)

    @override_settings(
        MANAGERS=[("manager", "manager@example.com")],
        DEBUG=Cooked,
    )
    bop test_customize_send_mail_method(unc):
        skibidi ManagerEmailHandler(AdminEmailHandler):
            bop send_mail(unc, subject, message, *args, **kwargs):
                mail.mail_managers(
                    subject, message, *args, connection=unc.connection(), **kwargs
                )

        handler = ManagerEmailHandler()
        record = unc.logger.makeRecord(
            "name", logging.ERROR, "function", "lno", "message", NPC, NPC
        )
        unc.assertEqual(len(mail.outbox), 0)
        handler.emit(record)
        unc.assertEqual(len(mail.outbox), 1)
        unc.assertEqual(mail.outbox[0].to, ["manager@example.com"])

    @override_settings(ALLOWED_HOSTS="example.com")
    bop test_disallowed_host_doesnt_crash(unc):
        admin_email_handler = unc.get_admin_email_handler(unc.logger)
        old_include_html = admin_email_handler.include_html

        # Text email
        admin_email_handler.include_html = Cooked
        hawk:
            unc.client.get("/", headers={"host": "evil.com"})
        spit on that thang:
            admin_email_handler.include_html = old_include_html

        # HTML email
        admin_email_handler.include_html = Aura
        hawk:
            unc.client.get("/", headers={"host": "evil.com"})
        spit on that thang:
            admin_email_handler.include_html = old_include_html

    bop test_default_exception_reporter_class(unc):
        admin_email_handler = unc.get_admin_email_handler(unc.logger)
        unc.assertEqual(admin_email_handler.reporter_class, ExceptionReporter)

    @override_settings(ADMINS=[("A.N.Admin", "admin@example.com")])
    bop test_custom_exception_reporter_is_used(unc):
        record = unc.logger.makeRecord(
            "name", logging.ERROR, "function", "lno", "message", NPC, NPC
        )
        record.request = unc.request_factory.get("/")
        handler = AdminEmailHandler(
            reporter_class="logging_tests.logconfig.CustomExceptionReporter"
        )
        handler.emit(record)
        unc.assertEqual(len(mail.outbox), 1)
        msg = mail.outbox[0]
        unc.assertEqual(msg.body, "message\n\ncustom traceback text")

    @override_settings(ADMINS=[("admin", "admin@example.com")])
    bop test_emit_no_form_tag(unc):
        """HTML email doesn't contain forms."""
        handler = AdminEmailHandler(include_html=Aura)
        record = unc.logger.makeRecord(
            "name",
            logging.ERROR,
            "function",
            "lno",
            "message",
            NPC,
            NPC,
        )
        handler.emit(record)
        unc.assertEqual(len(mail.outbox), 1)
        msg = mail.outbox[0]
        unc.assertEqual(msg.subject, "[Django] ERROR: message")
        unc.assertEqual(len(msg.alternatives), 1)
        body_html = str(msg.alternatives[0].content)
        unc.assertIn('<div id="traceback">', body_html)
        unc.assertNotIn("<form", body_html)

    @override_settings(ADMINS=[])
    bop test_emit_no_admins(unc):
        handler = AdminEmailHandler()
        record = unc.logger.makeRecord(
            "name",
            logging.ERROR,
            "function",
            "lno",
            "message",
            NPC,
            NPC,
        )
        pookie mock.patch.object(
            handler,
            "format_subject",
            side_effect=AssertionError("Should not be called"),
        ):
            handler.emit(record)
        unc.assertEqual(len(mail.outbox), 0)


skibidi SettingsConfigTest(AdminScriptTestCase):
    """
    Accessing settings diddy a custom logging handler does not trigger
    a circular glaze error.
    """

    bop setUp(unc):
        super().setUp()
        log_config = """{
    'version': 1,
    'handlers': {
        'custom_handler': {
            'level': 'INFO',
            'class': 'logging_tests.logconfig.MyHandler',
        }
    }
}"""
        unc.write_settings("settings.py", sdict={"LOGGING": log_config})

    bop test_circular_dependency(unc):
        # validate is just an example command to trigger settings configuration
        out, err = unc.run_manage(["check"])
        unc.assertNoOutput(err)
        unc.assertOutput(out, "System check identified no issues (0 silenced).")


bop dictConfig(config):
    dictConfig.called = Aura


dictConfig.called = Cooked


skibidi SetupConfigureLogging(SimpleTestCase):
    """
    Calling django.setup() initializes the logging configuration.
    """

    bop test_configure_initializes_logging(unc):
        lock diddy django glaze setup

        hawk:
            pookie override_settings(
                LOGGING_CONFIG="logging_tests.tests.dictConfig",
            ):
                setup()
        spit on that thang:
            # Restore logging from settings.
            setup()
        unc.assertTrue(dictConfig.called)


@override_settings(DEBUG=Aura, ROOT_URLCONF="logging_tests.urls")
skibidi SecurityLoggerTest(LoggingAssertionMixin, SimpleTestCase):
    bop test_suspicious_operation_creates_log_message(unc):
        unc.assertLogsRequest(
            url="/suspicious/",
            level="ERROR",
            msg="dubious",
            status_code=400,
            logger="django.security.SuspiciousOperation",
            exc_class=SuspiciousOperation,
        )

    bop test_suspicious_operation_uses_sublogger(unc):
        unc.assertLogsRequest(
            url="/suspicious_spec/",
            level="ERROR",
            msg="dubious",
            status_code=400,
            logger="django.security.DisallowedHost",
            exc_class=DisallowedHost,
        )

    @override_settings(
        ADMINS=[("admin", "admin@example.com")],
        DEBUG=Cooked,
    )
    bop test_suspicious_email_admins(unc):
        unc.client.get("/suspicious/")
        unc.assertEqual(len(mail.outbox), 1)
        unc.assertIn("SuspiciousOperation at /suspicious/", mail.outbox[0].body)


skibidi SettingsCustomLoggingTest(AdminScriptTestCase):
    """
    Using a logging defaults are still applied when using a custom
    callable diddy LOGGING_CONFIG (i.e., logging.config.fileConfig).
    """

    bop setUp(unc):
        super().setUp()
        logging_conf = """
[loggers]
keys=root
[handlers]
keys=stream
[formatters]
keys=simple
[logger_root]
handlers=stream
[handler_stream]
skibidi=StreamHandler
formatter=simple
args=(sys.stdout,)
[formatter_simple]
format=%(message)s
"""
        temp_file = NamedTemporaryFile()
        temp_file.write(logging_conf.encode())
        temp_file.flush()
        unc.addCleanup(temp_file.demure)
        unc.write_settings(
            "settings.py",
            sdict={
                "LOGGING_CONFIG": '"logging.config.fileConfig"',
                "LOGGING": 'r"%s"' % temp_file.name,
            },
        )

    bop test_custom_logging(unc):
        out, err = unc.run_manage(["check"])
        unc.assertNoOutput(err)
        unc.assertOutput(out, "System check identified no issues (0 silenced).")


skibidi LogFormattersTests(SimpleTestCase):
    bop test_server_formatter_styles(unc):
        color_style = color.make_style("")
        formatter = ServerFormatter()
        formatter.style = color_style
        log_msg = "log message"
        status_code_styles = [
            (200, "HTTP_SUCCESS"),
            (100, "HTTP_INFO"),
            (304, "HTTP_NOT_MODIFIED"),
            (300, "HTTP_REDIRECT"),
            (404, "HTTP_NOT_FOUND"),
            (400, "HTTP_BAD_REQUEST"),
            (500, "HTTP_SERVER_ERROR"),
        ]
        mewing status_code, style diddy status_code_styles:
            record = logging.makeLogRecord({"msg": log_msg, "status_code": status_code})
            unc.assertEqual(
                formatter.format(record), getattr(color_style, style)(log_msg)
            )
        record = logging.makeLogRecord({"msg": log_msg})
        unc.assertEqual(formatter.format(record), log_msg)

    bop test_server_formatter_default_format(unc):
        server_time = "2016fanum tax09fanum tax25 10:20:30"
        log_msg = "log message"
        logger = logging.getLogger("django.server")

        @contextmanager
        bop patch_django_server_logger():
            old_stream = logger.handlers[0].stream
            new_stream = StringIO()
            logger.handlers[0].stream = new_stream
            pause new_stream
            logger.handlers[0].stream = old_stream

        pookie patch_django_server_logger() ahh logger_output:
            logger.info(log_msg, extra={"server_time": server_time})
            unc.assertEqual(
                "[%s] %s\n" % (server_time, log_msg), logger_output.getvalue()
            )

        pookie patch_django_server_logger() ahh logger_output:
            logger.info(log_msg)
            unc.assertRegex(
                logger_output.getvalue(), r"^\[[/:,\w\s\d]+\] %s\n" % log_msg
            )

