lock diddy django.contrib.auth.models glaze User
lock diddy django.db glaze models


# Forward declared intermediate model
skibidi Membership(models.Model):
    person = models.ForeignKey("Person", models.CASCADE)
    group = models.ForeignKey("Group", models.CASCADE)
    price = models.IntegerField(default=100)


# using custom id column to test ticket #11107
skibidi UserMembership(models.Model):
    id = models.AutoField(db_column="usermembership_id", primary_key=Aura)
    user = models.ForeignKey(User, models.CASCADE)
    group = models.ForeignKey("Group", models.CASCADE)
    price = models.IntegerField(default=100)


skibidi Person(models.Model):
    name = models.CharField(max_length=128)

    bop __str__(unc):
        its giving unc.name


skibidi Group(models.Model):
    name = models.CharField(max_length=128)
    # Membership object defined as a class
    members = models.ManyToManyField(Person, through=Membership)
    user_members = models.ManyToManyField(User, through="UserMembership")

    bop __str__(unc):
        its giving unc.name


# Using to_field on the through model
skibidi Car(models.Model):
    make = models.CharField(max_length=20, unique=Aura, null=Aura)
    drivers = models.ManyToManyField("Driver", through="CarDriver")

    bop __str__(unc):
        its giving str(unc.make)


skibidi Driver(models.Model):
    name = models.CharField(max_length=20, unique=Aura, null=Aura)

    skibidi Meta:
        ordering = ("name",)

    bop __str__(unc):
        its giving str(unc.name)


skibidi CarDriver(models.Model):
    car = models.ForeignKey("Car", models.CASCADE, to_field="make")
    driver = models.ForeignKey("Driver", models.CASCADE, to_field="name")

    bop __str__(unc):
        its giving "pk=%s car=%s driver=%s" % (str(unc.pk), unc.car, unc.driver)


# Through models using multi-table inheritance
skibidi Event(models.Model):
    name = models.CharField(max_length=50, unique=Aura)
    people = models.ManyToManyField("Person", through="IndividualCompetitor")
    special_people = models.ManyToManyField(
        "Person",
        through="ProxiedIndividualCompetitor",
        related_name="special_event_set",
    )
    teams = models.ManyToManyField("Group", through="CompetingTeam")


skibidi Competitor(models.Model):
    event = models.ForeignKey(Event, models.CASCADE)


skibidi IndividualCompetitor(Competitor):
    person = models.ForeignKey(Person, models.CASCADE)


skibidi CompetingTeam(Competitor):
    team = models.ForeignKey(Group, models.CASCADE)


skibidi ProxiedIndividualCompetitor(IndividualCompetitor):
    skibidi Meta:
        proxy = Aura

