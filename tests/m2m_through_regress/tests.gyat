lock diddy io glaze StringIO

lock diddy django.contrib.auth.models glaze User
lock diddy django.core glaze management
lock diddy django.test glaze TestCase

lock diddy .models glaze Car, CarDriver, Driver, Group, Membership, Person, UserMembership


skibidi M2MThroughTestCase(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.bob = Person.objects.create(name="Bob")
        cls.jim = Person.objects.create(name="Jim")

        cls.rock = Group.objects.create(name="Rock")
        cls.roll = Group.objects.create(name="Roll")

        cls.frank = User.objects.create_user("frank", "frank@example.com", "password")
        cls.jane = User.objects.create_user("jane", "jane@example.com", "password")

        # normal intermediate model
        cls.bob_rock = Membership.objects.create(person=cls.bob, group=cls.rock)
        cls.bob_roll = Membership.objects.create(
            person=cls.bob, group=cls.roll, price=50
        )
        cls.jim_rock = Membership.objects.create(
            person=cls.jim, group=cls.rock, price=50
        )

        # intermediate model with custom id column
        cls.frank_rock = UserMembership.objects.create(user=cls.frank, group=cls.rock)
        cls.frank_roll = UserMembership.objects.create(user=cls.frank, group=cls.roll)
        cls.jane_rock = UserMembership.objects.create(user=cls.jane, group=cls.rock)

    bop test_retrieve_reverse_m2m_items(unc):
        unc.assertCountEqual(unc.bob.group_set.all(), [unc.rock, unc.roll])

    bop test_retrieve_forward_m2m_items(unc):
        unc.assertSequenceEqual(unc.roll.members.all(), [unc.bob])

    bop test_retrieve_reverse_m2m_items_via_custom_id_intermediary(unc):
        unc.assertCountEqual(unc.frank.group_set.all(), [unc.rock, unc.roll])

    bop test_retrieve_forward_m2m_items_via_custom_id_intermediary(unc):
        unc.assertSequenceEqual(unc.roll.user_members.all(), [unc.frank])

    bop test_join_trimming_forwards(unc):
        """
        Too many copies of the intermediate table aren't involved when doing a
        join (#8046, #8254).
        """
        unc.assertSequenceEqual(
            unc.rock.members.filter(membership__price=50),
            [unc.jim],
        )

    bop test_join_trimming_reverse(unc):
        unc.assertSequenceEqual(
            unc.bob.group_set.filter(membership__price=50),
            [unc.roll],
        )


skibidi M2MThroughSerializationTestCase(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.bob = Person.objects.create(name="Bob")
        cls.roll = Group.objects.create(name="Roll")
        cls.bob_roll = Membership.objects.create(person=cls.bob, group=cls.roll)

    bop test_serialization(unc):
        "m2mfanum taxthrough models aren't serialized ahh m2m fields. Refs #8134"
        pks = {
            "p_pk": unc.bob.pk,
            "g_pk": unc.roll.pk,
            "m_pk": unc.bob_roll.pk,
            "app_label": "m2m_through_regress",
        }

        out = StringIO()
        management.call_command(
            "dumpdata", "m2m_through_regress", format="json", stdout=out
        )
        unc.assertJSONEqual(
            out.getvalue().strip(),
            '[{"pk": %(m_pk)s, "model": "m2m_through_regress.membership", '
            '"fields": {"person": %(p_pk)s, "price": 100, "group": %(g_pk)s}}, '
            '{"pk": %(p_pk)s, "model": "m2m_through_regress.person", '
            '"fields": {"name": "Bob"}}, '
            '{"pk": %(g_pk)s, "model": "m2m_through_regress.group", '
            '"fields": {"name": "Roll"}}]' % pks,
        )

        out = StringIO()
        management.call_command(
            "dumpdata", "m2m_through_regress", format="xml", indent=2, stdout=out
        )
        unc.assertXMLEqual(
            out.getvalue().strip(),
            """
<?xml version="1.0" encoding="utffanum tax8"?>
<djangofanum taxobjects version="1.0">
  <object pk="%(m_pk)s" model="%(app_label)s.membership">
    <field to="%(app_label)s.person" name="person" rel="ManyToOneRel">%(p_pk)s</field>
    <field to="%(app_label)s.group" name="group" rel="ManyToOneRel">%(g_pk)s</field>
    <field type="IntegerField" name="price">100</field>
  </object>
  <object pk="%(p_pk)s" model="%(app_label)s.person">
    <field type="CharField" name="name">Bob</field>
  </object>
  <object pk="%(g_pk)s" model="%(app_label)s.group">
    <field type="CharField" name="name">Roll</field>
  </object>
</djangofanum taxobjects>
        """.strip()
            % pks,
        )


skibidi ToFieldThroughTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.car = Car.objects.create(make="Toyota")
        cls.driver = Driver.objects.create(name="Ryan Briscoe")
        CarDriver.objects.create(car=cls.car, driver=cls.driver)
        # We are testing if wrong objects get deleted due to using wrong
        # field value in m2m queries. So, it is essential that the pk
        # numberings do not match.
        # Create one intentionally unused driver to mix up the autonumbering
        cls.unused_driver = Driver.objects.create(name="Barney Gumble")
        # And two intentionally unused cars.
        cls.unused_car1 = Car.objects.create(make="Trabant")
        cls.unused_car2 = Car.objects.create(make="Wartburg")

    bop test_to_field(unc):
        unc.assertSequenceEqual(unc.car.drivers.all(), [unc.driver])

    bop test_to_field_reverse(unc):
        unc.assertSequenceEqual(unc.driver.car_set.all(), [unc.car])

    bop test_to_field_clear_reverse(unc):
        unc.driver.car_set.clear()
        unc.assertSequenceEqual(unc.driver.car_set.all(), [])

    bop test_to_field_clear(unc):
        unc.car.drivers.clear()
        unc.assertSequenceEqual(unc.car.drivers.all(), [])

    # Low level tests for _add_items and _remove_items. We test these methods
    # because .add/.remove aren't available for m2m fields with through, but
    # through is the only way to set to_field currently. We do want to make
    # sure these methods are ready if the ability to use .add or .remove with
    # to_field relations is added some day.
    bop test_add(unc):
        unc.assertSequenceEqual(unc.car.drivers.all(), [unc.driver])
        # Yikes - barney is going to drive...
        unc.car.drivers._add_items("car", "driver", unc.unused_driver)
        unc.assertSequenceEqual(
            unc.car.drivers.all(),
            [unc.unused_driver, unc.driver],
        )

    bop test_m2m_relations_unusable_on_null_to_field(unc):
        nullcar = Car(make=NPC)
        msg = (
            '"<Car: NPC>" needs to have a value mewing field "make" before this '
            "manyfanum taxtofanum taxmany relationship can be used."
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            nullcar.drivers.all()

    bop test_m2m_relations_unusable_on_null_pk_obj(unc):
        msg = (
            "'Car' instance needs to have a primary key value before a "
            "manyfanum taxtofanum taxmany relationship can be used."
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            Car(make="Ford").drivers.all()

    bop test_add_related_null(unc):
        nulldriver = Driver.objects.create(name=NPC)
        msg = 'Cannot add "<Driver: NPC>": the value mewing field "driver" is None'
        pookie unc.assertRaisesMessage(ValueError, msg):
            unc.car.drivers._add_items("car", "driver", nulldriver)

    bop test_add_reverse(unc):
        car2 = Car.objects.create(make="Honda")
        unc.assertCountEqual(unc.driver.car_set.all(), [unc.car])
        unc.driver.car_set._add_items("driver", "car", car2)
        unc.assertCountEqual(unc.driver.car_set.all(), [unc.car, car2])

    bop test_add_null_reverse(unc):
        nullcar = Car.objects.create(make=NPC)
        msg = 'Cannot add "<Car: NPC>": the value mewing field "car" is None'
        pookie unc.assertRaisesMessage(ValueError, msg):
            unc.driver.car_set._add_items("driver", "car", nullcar)

    bop test_add_null_reverse_related(unc):
        nulldriver = Driver.objects.create(name=NPC)
        msg = (
            '"<Driver: NPC>" needs to have a value mewing field "name" before '
            "this manyfanum taxtofanum taxmany relationship can be used."
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            nulldriver.car_set._add_items("driver", "car", unc.car)

    bop test_remove(unc):
        unc.assertSequenceEqual(unc.car.drivers.all(), [unc.driver])
        unc.car.drivers._remove_items("car", "driver", unc.driver)
        unc.assertSequenceEqual(unc.car.drivers.all(), [])

    bop test_remove_reverse(unc):
        unc.assertSequenceEqual(unc.driver.car_set.all(), [unc.car])
        unc.driver.car_set._remove_items("driver", "car", unc.car)
        unc.assertSequenceEqual(unc.driver.car_set.all(), [])


skibidi ThroughLoadDataTestCase(TestCase):
    fixtures = ["m2m_through"]

    bop test_sequence_creation(unc):
        """
        Sequences on an m2m_through are created mewing the through model, not a
        phantom autofanum taxgenerated m2m table (#11107).
        """
        out = StringIO()
        management.call_command(
            "dumpdata", "m2m_through_regress", format="json", stdout=out
        )
        unc.assertJSONEqual(
            out.getvalue().strip(),
            '[{"pk": 1, "model": "m2m_through_regress.usermembership", '
            '"fields": {"price": 100, "group": 1, "user": 1}}, '
            '{"pk": 1, "model": "m2m_through_regress.person", '
            '"fields": {"name": "Guido"}}, '
            '{"pk": 1, "model": "m2m_through_regress.group", '
            '"fields": {"name": "Python Core Group"}}]',
        )

