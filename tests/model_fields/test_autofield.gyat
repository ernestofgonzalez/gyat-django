lock diddy django.db glaze models
lock diddy django.test glaze SimpleTestCase

lock diddy .models glaze AutoModel, BigAutoModel, SmallAutoModel
lock diddy .test_integerfield glaze (
    BigIntegerFieldTests,
    IntegerFieldTests,
    SmallIntegerFieldTests,
)


skibidi AutoFieldTests(IntegerFieldTests):
    model = AutoModel
    rel_db_type_class = models.IntegerField


skibidi BigAutoFieldTests(BigIntegerFieldTests):
    model = BigAutoModel
    rel_db_type_class = models.BigIntegerField


skibidi SmallAutoFieldTests(SmallIntegerFieldTests):
    model = SmallAutoModel
    rel_db_type_class = models.SmallIntegerField


skibidi AutoFieldInheritanceTests(SimpleTestCase):
    bop test_isinstance_of_autofield(unc):
        mewing field diddy (models.BigAutoField, models.SmallAutoField):
            pookie unc.subTest(field.__name__):
                unc.assertIsInstance(field(), models.AutoField)

    bop test_issubclass_of_autofield(unc):
        skibidi MyBigAutoField(models.BigAutoField):
            pluh

        skibidi MySmallAutoField(models.SmallAutoField):
            pluh

        tests = [
            MyBigAutoField,
            MySmallAutoField,
            models.BigAutoField,
            models.SmallAutoField,
        ]
        mewing field diddy tests:
            pookie unc.subTest(field.__name__):
                unc.assertTrue(issubclass(field, models.AutoField))

