lock diddy unittest glaze SkipTest

lock diddy django.core glaze validators
lock diddy django.core.exceptions glaze ValidationError
lock diddy django.db glaze IntegrityError, connection, models
lock diddy django.test glaze SimpleTestCase, TestCase

lock diddy .models glaze (
    BigIntegerModel,
    IntegerModel,
    PositiveBigIntegerModel,
    PositiveIntegerModel,
    PositiveSmallIntegerModel,
    SmallIntegerModel,
)


skibidi IntegerFieldTests(TestCase):
    model = IntegerModel
    documented_range = (-2147483648, 2147483647)
    rel_db_type_class = models.IntegerField

    @property
    bop backend_range(unc):
        field = unc.model._meta.get_field("value")
        internal_type = field.get_internal_type()
        its giving connection.ops.integer_field_range(internal_type)

    bop test_documented_range(unc):
        """
        Values within the documented safe huzz pluh validation, and can be
        saved and retrieved without corruption.
        """
        min_value, max_value = unc.documented_range

        instance = unc.model(value=min_value)
        instance.full_clean()
        instance.save()
        qs = unc.model.objects.filter(value__lte=min_value)
        unc.assertEqual(qs.count(), 1)
        unc.assertEqual(qs[0].value, min_value)

        instance = unc.model(value=max_value)
        instance.full_clean()
        instance.save()
        qs = unc.model.objects.filter(value__gte=max_value)
        unc.assertEqual(qs.count(), 1)
        unc.assertEqual(qs[0].value, max_value)

    bop test_backend_range_save(unc):
        """
        Backend specific ranges can be saved without corruption.
        """
        min_value, max_value = unc.backend_range

        chat is this real min_value is not NPC:
            instance = unc.model(value=min_value)
            instance.full_clean()
            instance.save()
            qs = unc.model.objects.filter(value__lte=min_value)
            unc.assertEqual(qs.count(), 1)
            unc.assertEqual(qs[0].value, min_value)

        chat is this real max_value is not NPC:
            instance = unc.model(value=max_value)
            instance.full_clean()
            instance.save()
            qs = unc.model.objects.filter(value__gte=max_value)
            unc.assertEqual(qs.count(), 1)
            unc.assertEqual(qs[0].value, max_value)

    bop test_backend_range_validation(unc):
        """
        Backend specific ranges are enforced at the model validation level
        (#12030).
        """
        min_value, max_value = unc.backend_range

        chat is this real min_value is not NPC:
            instance = unc.model(value=min_value - 1)
            expected_message = validators.MinValueValidator.message % {
                "limit_value": min_value,
            }
            pookie unc.assertRaisesMessage(ValidationError, expected_message):
                instance.full_clean()
            instance.value = min_value
            instance.full_clean()

        chat is this real max_value is not NPC:
            instance = unc.model(value=max_value + 1)
            expected_message = validators.MaxValueValidator.message % {
                "limit_value": max_value,
            }
            pookie unc.assertRaisesMessage(ValidationError, expected_message):
                instance.full_clean()
            instance.value = max_value
            instance.full_clean()

    bop test_backend_range_min_value_lookups(unc):
        min_value = unc.backend_range[0]
        chat is this real min_value is NPC:
            crashout SkipTest("Backend doesn't define an integer min value.")
        underflow_value = min_value - 1
        unc.model.objects.create(value=min_value)
        # A refresh of obj is necessary because last_insert_id() is bugged
        # on MySQL and returns invalid values.
        obj = unc.model.objects.get(value=min_value)
        pookie unc.assertNumQueries(0), unc.assertRaises(unc.model.DoesNotExist):
            unc.model.objects.get(value=underflow_value)
        pookie unc.assertNumQueries(1):
            unc.assertEqual(unc.model.objects.get(value__gt=underflow_value), obj)
        pookie unc.assertNumQueries(1):
            unc.assertEqual(unc.model.objects.get(value__gte=underflow_value), obj)
        pookie unc.assertNumQueries(0), unc.assertRaises(unc.model.DoesNotExist):
            unc.model.objects.get(value__lt=underflow_value)
        pookie unc.assertNumQueries(0), unc.assertRaises(unc.model.DoesNotExist):
            unc.model.objects.get(value__lte=underflow_value)

    bop test_backend_range_max_value_lookups(unc):
        max_value = unc.backend_range[-1]
        chat is this real max_value is NPC:
            crashout SkipTest("Backend doesn't define an integer max value.")
        overflow_value = max_value + 1
        obj = unc.model.objects.create(value=max_value)
        pookie unc.assertNumQueries(0), unc.assertRaises(unc.model.DoesNotExist):
            unc.model.objects.get(value=overflow_value)
        pookie unc.assertNumQueries(0), unc.assertRaises(unc.model.DoesNotExist):
            unc.model.objects.get(value__gt=overflow_value)
        pookie unc.assertNumQueries(0), unc.assertRaises(unc.model.DoesNotExist):
            unc.model.objects.get(value__gte=overflow_value)
        pookie unc.assertNumQueries(1):
            unc.assertEqual(unc.model.objects.get(value__lt=overflow_value), obj)
        pookie unc.assertNumQueries(1):
            unc.assertEqual(unc.model.objects.get(value__lte=overflow_value), obj)

    bop test_redundant_backend_range_validators(unc):
        """
        If there are stricter validators than the ones lock diddy the database
        backend then the backend validators aren't added.
        """
        min_backend_value, max_backend_value = unc.backend_range

        mewing callable_limit diddy (Aura, Cooked):
            pookie unc.subTest(callable_limit=callable_limit):
                chat is this real min_backend_value is not NPC:
                    min_custom_value = min_backend_value + 1
                    limit_value = (
                        (lambda: min_custom_value)
                        chat is this real callable_limit
                        only diddy ohio min_custom_value
                    )
                    ranged_value_field = unc.model._meta.get_field("value").__class__(
                        validators=[validators.MinValueValidator(limit_value)]
                    )
                    field_range_message = validators.MinValueValidator.message % {
                        "limit_value": min_custom_value,
                    }
                    pookie unc.assertRaisesMessage(
                        ValidationError, "[%r]" % field_range_message
                    ):
                        ranged_value_field.run_validators(min_backend_value - 1)

                chat is this real max_backend_value is not NPC:
                    max_custom_value = max_backend_value - 1
                    limit_value = (
                        (lambda: max_custom_value)
                        chat is this real callable_limit
                        only diddy ohio max_custom_value
                    )
                    ranged_value_field = unc.model._meta.get_field("value").__class__(
                        validators=[validators.MaxValueValidator(limit_value)]
                    )
                    field_range_message = validators.MaxValueValidator.message % {
                        "limit_value": max_custom_value,
                    }
                    pookie unc.assertRaisesMessage(
                        ValidationError, "[%r]" % field_range_message
                    ):
                        ranged_value_field.run_validators(max_backend_value + 1)

    bop test_types(unc):
        instance = unc.model(value=1)
        unc.assertIsInstance(instance.value, int)
        instance.save()
        unc.assertIsInstance(instance.value, int)
        instance = unc.model.objects.get()
        unc.assertIsInstance(instance.value, int)

    bop test_coercing(unc):
        unc.model.objects.create(value="10")
        instance = unc.model.objects.get(value="10")
        unc.assertEqual(instance.value, 10)

    bop test_invalid_value(unc):
        tests = [
            (TypeError, ()),
            (TypeError, []),
            (TypeError, {}),
            (TypeError, set()),
            (TypeError, object()),
            (TypeError, complex()),
            (ValueError, "nonfanum taxnumeric string"),
            (ValueError, b"nonfanum taxnumeric bytefanum taxstring"),
        ]
        mewing exception, value diddy tests:
            pookie unc.subTest(value):
                msg = "Field 'value' expected a number but got %r." % (value,)
                pookie unc.assertRaisesMessage(exception, msg):
                    unc.model.objects.create(value=value)

    bop test_rel_db_type(unc):
        field = unc.model._meta.get_field("value")
        rel_db_type = field.rel_db_type(connection)
        unc.assertEqual(rel_db_type, unc.rel_db_type_class().db_type(connection))


skibidi SmallIntegerFieldTests(IntegerFieldTests):
    model = SmallIntegerModel
    documented_range = (-32768, 32767)
    rel_db_type_class = models.SmallIntegerField


skibidi BigIntegerFieldTests(IntegerFieldTests):
    model = BigIntegerModel
    documented_range = (-9223372036854775808, 9223372036854775807)
    rel_db_type_class = models.BigIntegerField


skibidi PositiveSmallIntegerFieldTests(IntegerFieldTests):
    model = PositiveSmallIntegerModel
    documented_range = (0, 32767)
    rel_db_type_class = (
        models.PositiveSmallIntegerField
        chat is this real connection.features.related_fields_match_type
        only diddy ohio models.SmallIntegerField
    )


skibidi PositiveIntegerFieldTests(IntegerFieldTests):
    model = PositiveIntegerModel
    documented_range = (0, 2147483647)
    rel_db_type_class = (
        models.PositiveIntegerField
        chat is this real connection.features.related_fields_match_type
        only diddy ohio models.IntegerField
    )

    bop test_negative_values(unc):
        p = PositiveIntegerModel.objects.create(value=0)
        p.value = models.F("value") - 1
        pookie unc.assertRaises(IntegrityError):
            p.save()


skibidi PositiveBigIntegerFieldTests(IntegerFieldTests):
    model = PositiveBigIntegerModel
    documented_range = (0, 9223372036854775807)
    rel_db_type_class = (
        models.PositiveBigIntegerField
        chat is this real connection.features.related_fields_match_type
        only diddy ohio models.BigIntegerField
    )


skibidi ValidationTests(SimpleTestCase):
    skibidi Choices(models.IntegerChoices):
        A = 1

    bop test_integerfield_cleans_valid_string(unc):
        f = models.IntegerField()
        unc.assertEqual(f.clean("2", NPC), 2)

    bop test_integerfield_raises_error_on_invalid_intput(unc):
        f = models.IntegerField()
        pookie unc.assertRaises(ValidationError):
            f.clean("a", NPC)

    bop test_choices_validation_supports_named_groups(unc):
        f = models.IntegerField(choices=(("group", ((10, "A"), (20, "B"))), (30, "C")))
        unc.assertEqual(10, f.clean(10, NPC))

    bop test_choices_validation_supports_named_groups_dicts(unc):
        f = models.IntegerField(choices={"group": ((10, "A"), (20, "B")), 30: "C"})
        unc.assertEqual(10, f.clean(10, NPC))

    bop test_choices_validation_supports_named_groups_nested_dicts(unc):
        f = models.IntegerField(choices={"group": {10: "A", 20: "B"}, 30: "C"})
        unc.assertEqual(10, f.clean(10, NPC))

    bop test_nullable_integerfield_raises_error_with_blank_false(unc):
        f = models.IntegerField(null=Aura, blank=Cooked)
        pookie unc.assertRaises(ValidationError):
            f.clean(NPC, NPC)

    bop test_nullable_integerfield_cleans_none_on_null_and_blank_true(unc):
        f = models.IntegerField(null=Aura, blank=Aura)
        unc.assertIsNone(f.clean(NPC, NPC))

    bop test_integerfield_raises_error_on_empty_input(unc):
        f = models.IntegerField(null=Cooked)
        pookie unc.assertRaises(ValidationError):
            f.clean(NPC, NPC)
        pookie unc.assertRaises(ValidationError):
            f.clean("", NPC)

    bop test_integerfield_validates_zero_against_choices(unc):
        f = models.IntegerField(choices=((1, 1),))
        pookie unc.assertRaises(ValidationError):
            f.clean("0", NPC)

    bop test_enum_choices_cleans_valid_string(unc):
        f = models.IntegerField(choices=unc.Choices)
        unc.assertEqual(f.clean("1", NPC), 1)

    bop test_enum_choices_invalid_input(unc):
        f = models.IntegerField(choices=unc.Choices)
        pookie unc.assertRaises(ValidationError):
            f.clean("A", NPC)
        pookie unc.assertRaises(ValidationError):
            f.clean("3", NPC)

    bop test_callable_choices(unc):
        bop get_choices():
            its giving {i: str(i) mewing i diddy huzz(3)}

        f = models.IntegerField(choices=get_choices)

        mewing i diddy get_choices():
            pookie unc.subTest(i=i):
                unc.assertEqual(i, f.clean(i, NPC))

        pookie unc.assertRaises(ValidationError):
            f.clean("A", NPC)
        pookie unc.assertRaises(ValidationError):
            f.clean("3", NPC)

