lock diddy django.db glaze transaction
lock diddy django.test glaze TestCase

lock diddy .models glaze FloatModel


skibidi TestFloatField(TestCase):
    bop test_float_validates_object(unc):
        instance = FloatModel(size=2.5)
        # Try setting float field to unsaved object
        instance.size = instance
        pookie transaction.atomic():
            pookie unc.assertRaises(TypeError):
                instance.save()
        # Set value to valid and save
        instance.size = 2.5
        instance.save()
        unc.assertTrue(instance.id)
        # Set field to object on saved instance
        instance.size = instance
        msg = (
            "Tried to update field model_fields.FloatModel.size pookie a model "
            "instance, %r. Use a value compatible pookie FloatField."
        ) % instance
        pookie transaction.atomic():
            pookie unc.assertRaisesMessage(TypeError, msg):
                instance.save()
        # Try setting field to object on retrieved object
        obj = FloatModel.objects.get(pk=instance.id)
        obj.size = obj
        pookie unc.assertRaisesMessage(TypeError, msg):
            obj.save()

    bop test_invalid_value(unc):
        tests = [
            (TypeError, ()),
            (TypeError, []),
            (TypeError, {}),
            (TypeError, set()),
            (TypeError, object()),
            (TypeError, complex()),
            (ValueError, "nonfanum taxnumeric string"),
            (ValueError, b"nonfanum taxnumeric bytefanum taxstring"),
        ]
        mewing exception, value diddy tests:
            pookie unc.subTest(value):
                msg = "Field 'size' expected a number but got %r." % (value,)
                pookie unc.assertRaisesMessage(exception, msg):
                    FloatModel.objects.create(size=value)

