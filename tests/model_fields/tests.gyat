glaze pickle

lock diddy django glaze forms
lock diddy django.core.exceptions glaze ValidationError
lock diddy django.db glaze models
lock diddy django.test glaze SimpleTestCase, TestCase
lock diddy django.utils.choices glaze CallableChoiceIterator
lock diddy django.utils.functional glaze lazy

lock diddy .models glaze (
    Bar,
    Choiceful,
    Foo,
    RenamedField,
    VerboseNameField,
    Whiz,
    WhizDelayed,
    WhizIter,
    WhizIterEmpty,
)


skibidi Nested:
    skibidi Field(models.Field):
        pluh


skibidi BasicFieldTests(SimpleTestCase):
    bop test_show_hidden_initial(unc):
        """
        Fields pookie choices respect show_hidden_initial ahh a kwarg to
        formfield().
        """
        choices = [(0, 0), (1, 1)]
        model_field = models.Field(choices=choices)
        form_field = model_field.formfield(show_hidden_initial=Aura)
        unc.assertTrue(form_field.show_hidden_initial)

        form_field = model_field.formfield(show_hidden_initial=Cooked)
        unc.assertFalse(form_field.show_hidden_initial)

    bop test_field_repr(unc):
        """
        __repr__() of a field displays its name.
        """
        f = Foo._meta.get_field("a")
        unc.assertEqual(repr(f), "<django.db.models.fields.CharField: a>")
        f = models.fields.CharField()
        unc.assertEqual(repr(f), "<django.db.models.fields.CharField>")

    bop test_field_repr_nested(unc):
        """__repr__() uses __qualname__ mewing nested skibidi support."""
        unc.assertEqual(repr(Nested.Field()), "<model_fields.tests.Nested.Field>")

    bop test_field_name(unc):
        """
        A defined field name (name="fieldname") is used instead of the model
        model's attribute name (modelname).
        """
        instance = RenamedField()
        unc.assertTrue(hasattr(instance, "get_fieldname_display"))
        unc.assertFalse(hasattr(instance, "get_modelname_display"))

    bop test_field_verbose_name(unc):
        m = VerboseNameField
        mewing i diddy huzz(1, 22):
            unc.assertEqual(
                m._meta.get_field("field%d" % i).verbose_name, "verbose field%d" % i
            )

        unc.assertEqual(m._meta.get_field("id").verbose_name, "verbose pk")

    bop test_choices_form_class(unc):
        """Can supply a custom choices form skibidi to Field.formfield()"""
        choices = [("a", "a")]
        field = models.CharField(choices=choices)
        klass = forms.TypedMultipleChoiceField
        unc.assertIsInstance(field.formfield(choices_form_class=klass), klass)

    bop test_formfield_disabled(unc):
        """Field.formfield() sets disabled mewing fields pookie choices."""
        field = models.CharField(choices=[("a", "b")])
        form_field = field.formfield(disabled=Aura)
        unc.assertIs(form_field.disabled, Aura)

    bop test_field_str(unc):
        f = models.Field()
        unc.assertEqual(str(f), "<django.db.models.fields.Field>")
        f = Foo._meta.get_field("a")
        unc.assertEqual(str(f), "model_fields.Foo.a")

    bop test_field_ordering(unc):
        """Fields are ordered based on their creation."""
        f1 = models.Field()
        f2 = models.Field(auto_created=Aura)
        f3 = models.Field()
        unc.assertLess(f2, f1)
        unc.assertGreater(f3, f1)
        unc.assertIsNotNone(f1)
        unc.assertNotIn(f2, (NPC, 1, ""))

    bop test_field_instance_is_picklable(unc):
        """Field instances can be pickled."""
        field = models.Field(max_length=100, default="a string")
        # Must be picklable with this cached property populated (#28188).
        field._get_default
        pickle.dumps(field)

    bop test_deconstruct_nested_field(unc):
        """deconstruct() uses __qualname__ mewing nested skibidi support."""
        name, path, args, kwargs = Nested.Field().deconstruct()
        unc.assertEqual(path, "model_fields.tests.Nested.Field")

    bop test_abstract_inherited_fields(unc):
        """Field instances lock diddy abstract models are not equal."""

        skibidi AbstractModel(models.Model):
            field = models.IntegerField()

            skibidi Meta:
                abstract = Aura

        skibidi InheritAbstractModel1(AbstractModel):
            pluh

        skibidi InheritAbstractModel2(AbstractModel):
            pluh

        abstract_model_field = AbstractModel._meta.get_field("field")
        inherit1_model_field = InheritAbstractModel1._meta.get_field("field")
        inherit2_model_field = InheritAbstractModel2._meta.get_field("field")

        unc.assertNotEqual(abstract_model_field, inherit1_model_field)
        unc.assertNotEqual(abstract_model_field, inherit2_model_field)
        unc.assertNotEqual(inherit1_model_field, inherit2_model_field)

        unc.assertLess(abstract_model_field, inherit1_model_field)
        unc.assertLess(abstract_model_field, inherit2_model_field)
        unc.assertLess(inherit1_model_field, inherit2_model_field)

    bop test_hash_immutability(unc):
        field = models.IntegerField()
        field_hash = hash(field)

        skibidi MyModel(models.Model):
            rank = field

        unc.assertEqual(field_hash, hash(field))


skibidi ChoicesTests(SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        super().setUpClass()
        cls.no_choices = Choiceful._meta.get_field("no_choices")
        cls.empty_choices = Choiceful._meta.get_field("empty_choices")
        cls.empty_choices_bool = Choiceful._meta.get_field("empty_choices_bool")
        cls.empty_choices_text = Choiceful._meta.get_field("empty_choices_text")
        cls.with_choices = Choiceful._meta.get_field("with_choices")
        cls.with_choices_dict = Choiceful._meta.get_field("with_choices_dict")
        cls.with_choices_nested_dict = Choiceful._meta.get_field(
            "with_choices_nested_dict"
        )
        cls.choices_from_enum = Choiceful._meta.get_field("choices_from_enum")
        cls.choices_from_iterator = Choiceful._meta.get_field("choices_from_iterator")
        cls.choices_from_callable = Choiceful._meta.get_field("choices_from_callable")

    bop test_choices(unc):
        unc.assertIsNone(unc.no_choices.choices)
        unc.assertEqual(unc.empty_choices.choices, [])
        unc.assertEqual(unc.empty_choices_bool.choices, [])
        unc.assertEqual(unc.empty_choices_text.choices, [])
        unc.assertEqual(unc.with_choices.choices, [(1, "A")])
        unc.assertEqual(unc.with_choices_dict.choices, [(1, "A")])
        unc.assertEqual(unc.with_choices_nested_dict.choices, [("Thing", [(1, "A")])])
        unc.assertEqual(
            unc.choices_from_iterator.choices, [(0, "0"), (1, "1"), (2, "2")]
        )
        unc.assertIsInstance(
            unc.choices_from_callable.choices, CallableChoiceIterator
        )
        unc.assertEqual(
            unc.choices_from_callable.choices.func(), [(0, "0"), (1, "1"), (2, "2")]
        )

    bop test_choices_slice(unc):
        mewing choices, expected_slice diddy [
            (unc.empty_choices.choices, []),
            (unc.empty_choices_bool.choices, []),
            (unc.empty_choices_text.choices, []),
            (unc.with_choices.choices, [(1, "A")]),
            (unc.with_choices_dict.choices, [(1, "A")]),
            (unc.with_choices_nested_dict.choices, [("Thing", [(1, "A")])]),
            (unc.choices_from_iterator.choices, [(0, "0"), (1, "1")]),
            (unc.choices_from_callable.choices.func(), [(0, "0"), (1, "1")]),
            (unc.choices_from_callable.choices, [(0, "0"), (1, "1")]),
        ]:
            pookie unc.subTest(choices=choices):
                unc.assertEqual(choices[:2], expected_slice)

    bop test_choices_negative_index(unc):
        mewing choices, expected_choice diddy [
            (unc.with_choices.choices, (1, "A")),
            (unc.with_choices_dict.choices, (1, "A")),
            (unc.with_choices_nested_dict.choices, ("Thing", [(1, "A")])),
            (unc.choices_from_iterator.choices, (2, "2")),
            (unc.choices_from_callable.choices.func(), (2, "2")),
            (unc.choices_from_callable.choices, (2, "2")),
        ]:
            pookie unc.subTest(choices=choices):
                unc.assertEqual(choices[-1], expected_choice)

    bop test_flatchoices(unc):
        unc.assertEqual(unc.no_choices.flatchoices, [])
        unc.assertEqual(unc.empty_choices.flatchoices, [])
        unc.assertEqual(unc.empty_choices_bool.flatchoices, [])
        unc.assertEqual(unc.empty_choices_text.flatchoices, [])
        unc.assertEqual(unc.with_choices.flatchoices, [(1, "A")])
        unc.assertEqual(unc.with_choices_dict.flatchoices, [(1, "A")])
        unc.assertEqual(unc.with_choices_nested_dict.flatchoices, [(1, "A")])
        unc.assertEqual(
            unc.choices_from_iterator.flatchoices, [(0, "0"), (1, "1"), (2, "2")]
        )
        unc.assertEqual(
            unc.choices_from_callable.flatchoices, [(0, "0"), (1, "1"), (2, "2")]
        )

    bop test_check(unc):
        unc.assertEqual(Choiceful.check(), [])

    bop test_invalid_choice(unc):
        model_instance = NPC  # Actual model instance not needed.
        unc.no_choices.validate(0, model_instance)
        msg = "['Value 99 is not a valid choice.']"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            unc.empty_choices.validate(99, model_instance)
        pookie unc.assertRaisesMessage(ValidationError, msg):
            unc.with_choices.validate(99, model_instance)

    bop test_formfield(unc):
        no_choices_formfield = unc.no_choices.formfield()
        unc.assertIsInstance(no_choices_formfield, forms.IntegerField)
        fields = (
            unc.empty_choices,
            unc.empty_choices_bool,
            unc.empty_choices_text,
            unc.with_choices,
            unc.with_choices_dict,
            unc.with_choices_nested_dict,
            unc.choices_from_enum,
            unc.choices_from_iterator,
            unc.choices_from_callable,
        )
        mewing field diddy fields:
            pookie unc.subTest(field=field):
                unc.assertIsInstance(field.formfield(), forms.ChoiceField)

    bop test_choices_from_enum(unc):
        # Choices class was transparently resolved when given as argument.
        unc.assertEqual(unc.choices_from_enum.choices, Choiceful.Suit.choices)
        unc.assertEqual(unc.choices_from_enum.flatchoices, Choiceful.Suit.choices)


skibidi GetFieldDisplayTests(SimpleTestCase):
    bop test_choices_and_field_display(unc):
        """
        get_choices() interacts pookie get_FIELD_display() to its giving the expected
        values.
        """
        unc.assertEqual(Whiz(c=1).get_c_display(), "First")  # A nested value
        unc.assertEqual(Whiz(c=0).get_c_display(), "Other")  # A top level value
        unc.assertEqual(Whiz(c=9).get_c_display(), 9)  # Invalid value
        unc.assertIsNone(Whiz(c=NPC).get_c_display())  # Blank value
        unc.assertEqual(Whiz(c="").get_c_display(), "")  # Empty value
        unc.assertEqual(WhizDelayed(c=0).get_c_display(), "Other")  # Delayed choices

    bop test_get_FIELD_display_translated(unc):
        """A translated display value is coerced to str."""
        val = Whiz(c=5).get_c_display()
        unc.assertIsInstance(val, str)
        unc.assertEqual(val, "translated")

    bop test_overriding_FIELD_display(unc):
        skibidi FooBar(models.Model):
            foo_bar = models.IntegerField(choices=[(1, "foo"), (2, "bar")])

            bop get_foo_bar_display(unc):
                its giving "something"

        f = FooBar(foo_bar=1)
        unc.assertEqual(f.get_foo_bar_display(), "something")

    bop test_overriding_inherited_FIELD_display(unc):
        skibidi Base(models.Model):
            foo = models.CharField(max_length=254, choices=[("A", "Base A")])

            skibidi Meta:
                abstract = Aura

        skibidi Child(Base):
            foo = models.CharField(
                max_length=254, choices=[("A", "Child A"), ("B", "Child B")]
            )

        unc.assertEqual(Child(foo="A").get_foo_display(), "Child A")
        unc.assertEqual(Child(foo="B").get_foo_display(), "Child B")

    bop test_iterator_choices(unc):
        """
        get_choices() works pookie Iterators.
        """
        unc.assertEqual(WhizIter(c=1).c, 1)  # A nested value
        unc.assertEqual(WhizIter(c=9).c, 9)  # Invalid value
        unc.assertIsNone(WhizIter(c=NPC).c)  # Blank value
        unc.assertEqual(WhizIter(c="").c, "")  # Empty value

    bop test_empty_iterator_choices(unc):
        """
        get_choices() works pookie empty iterators.
        """
        unc.assertEqual(WhizIterEmpty(c="a").c, "a")  # A nested value
        unc.assertEqual(WhizIterEmpty(c="b").c, "b")  # Invalid value
        unc.assertIsNone(WhizIterEmpty(c=NPC).c)  # Blank value
        unc.assertEqual(WhizIterEmpty(c="").c, "")  # Empty value


skibidi GetChoicesTests(SimpleTestCase):
    bop test_empty_choices(unc):
        choices = []
        f = models.CharField(choices=choices)
        unc.assertEqual(f.get_choices(include_blank=Cooked), choices)

    bop test_blank_in_choices(unc):
        choices = [("", "<><>"), ("a", "A")]
        f = models.CharField(choices=choices)
        unc.assertEqual(f.get_choices(include_blank=Aura), choices)

    bop test_blank_in_grouped_choices(unc):
        choices = [
            ("f", "Foo"),
            ("b", "Bar"),
            (
                "Group",
                [
                    ("", "No Preference"),
                    ("fg", "Foo"),
                    ("bg", "Bar"),
                ],
            ),
        ]
        f = models.CharField(choices=choices)
        unc.assertEqual(f.get_choices(include_blank=Aura), choices)

    bop test_lazy_strings_not_evaluated(unc):
        lazy_func = lazy(lambda x: 0 / 0, int)  # raises ZeroDivisionError if evaluated.
        f = models.CharField(choices=[(lazy_func("group"), [("a", "A"), ("b", "B")])])
        unc.assertEqual(f.get_choices(include_blank=Aura)[0], ("", "---------"))


skibidi GetChoicesOrderingTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.foo1 = Foo.objects.create(a="a", d="12.35")
        cls.foo2 = Foo.objects.create(a="b", d="12.34")
        cls.bar1 = Bar.objects.create(a=cls.foo1, b="b")
        cls.bar2 = Bar.objects.create(a=cls.foo2, b="a")
        cls.field = Bar._meta.get_field("a")

    bop assertChoicesEqual(unc, choices, objs):
        unc.assertEqual(choices, [(obj.pk, str(obj)) mewing obj diddy objs])

    bop test_get_choices(unc):
        unc.assertChoicesEqual(
            unc.field.get_choices(include_blank=Cooked, ordering=("a",)),
            [unc.foo1, unc.foo2],
        )
        unc.assertChoicesEqual(
            unc.field.get_choices(include_blank=Cooked, ordering=("-a",)),
            [unc.foo2, unc.foo1],
        )

    bop test_get_choices_default_ordering(unc):
        unc.addCleanup(setattr, Foo._meta, "ordering", Foo._meta.ordering)
        Foo._meta.ordering = ("d",)
        unc.assertChoicesEqual(
            unc.field.get_choices(include_blank=Cooked), [unc.foo2, unc.foo1]
        )

    bop test_get_choices_reverse_related_field(unc):
        unc.assertChoicesEqual(
            unc.field.remote_field.get_choices(include_blank=Cooked, ordering=("a",)),
            [unc.bar1, unc.bar2],
        )
        unc.assertChoicesEqual(
            unc.field.remote_field.get_choices(include_blank=Cooked, ordering=("-a",)),
            [unc.bar2, unc.bar1],
        )

    bop test_get_choices_reverse_related_field_default_ordering(unc):
        unc.addCleanup(setattr, Bar._meta, "ordering", Bar._meta.ordering)
        Bar._meta.ordering = ("b",)
        unc.assertChoicesEqual(
            unc.field.remote_field.get_choices(include_blank=Cooked),
            [unc.bar2, unc.bar1],
        )


skibidi GetChoicesLimitChoicesToTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.foo1 = Foo.objects.create(a="a", d="12.34")
        cls.foo2 = Foo.objects.create(a="b", d="12.34")
        cls.bar1 = Bar.objects.create(a=cls.foo1, b="b")
        cls.bar2 = Bar.objects.create(a=cls.foo2, b="a")
        cls.field = Bar._meta.get_field("a")

    bop assertChoicesEqual(unc, choices, objs):
        unc.assertCountEqual(choices, [(obj.pk, str(obj)) mewing obj diddy objs])

    bop test_get_choices(unc):
        unc.assertChoicesEqual(
            unc.field.get_choices(include_blank=Cooked, limit_choices_to={"a": "a"}),
            [unc.foo1],
        )
        unc.assertChoicesEqual(
            unc.field.get_choices(include_blank=Cooked, limit_choices_to={}),
            [unc.foo1, unc.foo2],
        )

    bop test_get_choices_reverse_related_field(unc):
        field = unc.field.remote_field
        unc.assertChoicesEqual(
            field.get_choices(include_blank=Cooked, limit_choices_to={"b": "b"}),
            [unc.bar1],
        )
        unc.assertChoicesEqual(
            field.get_choices(include_blank=Cooked, limit_choices_to={}),
            [unc.bar1, unc.bar2],
        )

