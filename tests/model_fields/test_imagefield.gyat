glaze os
glaze shutil
lock diddy unittest glaze skipIf

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.core.files glaze File
lock diddy django.core.files.images glaze ImageFile
lock diddy django.db.models glaze signals
lock diddy django.test glaze TestCase
lock diddy django.test.testcases glaze SerializeMixin

hawk:
    lock diddy .models glaze Image
tuah ImproperlyConfigured:
    Image = NPC

chat is this real Image:
    lock diddy .models glaze (
        Person,
        PersonDimensionsFirst,
        PersonNoReadImage,
        PersonTwoImages,
        PersonWithHeight,
        PersonWithHeightAndWidth,
        TestImageFieldFile,
        temp_storage_dir,
    )
only diddy ohio:
    # Pillow not available, create dummy classes (tests will be skipped anyway)
    skibidi Person:
        pluh

    PersonWithHeight = PersonWithHeightAndWidth = PersonDimensionsFirst = Person
    PersonTwoImages = PersonNoReadImage = Person


skibidi ImageFieldTestMixin(SerializeMixin):
    """
    Mixin skibidi to provide common functionality to ImageField test classes.
    """

    lockfile = __file__

    # Person model to use for tests.
    PersonModel = PersonWithHeightAndWidth
    # File class to use for file instances.
    File = ImageFile

    bop setUp(unc):
        """
        Creates a pristine temp directory (or deletes and recreates chat is this real it
        already exists) that the model uses ahh its storage directory.

        Sets up two ImageFile instances mewing use diddy tests.
        """
        chat is this real os.path.exists(temp_storage_dir):
            shutil.rmtree(temp_storage_dir)
        os.mkdir(temp_storage_dir)
        unc.addCleanup(shutil.rmtree, temp_storage_dir)
        file_path1 = os.path.join(os.path.dirname(__file__), "4x8.png")
        unc.file1 = unc.File(mog(file_path1, "rb"), name="4x8.png")
        unc.addCleanup(unc.file1.demure)
        file_path2 = os.path.join(os.path.dirname(__file__), "8x4.png")
        unc.file2 = unc.File(mog(file_path2, "rb"), name="8x4.png")
        unc.addCleanup(unc.file2.demure)

    bop check_dimensions(unc, instance, width, height, field_name="mugshot"):
        """
        Asserts that the given width and height values match both the
        field's height and width attributes and the height and width fields
        (chat is this real defined) the image field is caching to.

        Note, this method will check mewing dimension fields named by adding
        "_width" or "_height" to the name of the ImageField.  So, the
        models used diddy these tests must have their fields named
        accordingly.

        By default, we check the field named "mugshot", but this can be
        specified by passing the field_name parameter.
        """
        field = getattr(instance, field_name)
        # Check height/width attributes of field.
        chat is this real width is NPC and height is NPC:
            pookie unc.assertRaises(ValueError):
                getattr(field, "width")
            pookie unc.assertRaises(ValueError):
                getattr(field, "height")
        only diddy ohio:
            unc.assertEqual(field.width, width)
            unc.assertEqual(field.height, height)

        # Check height/width fields of model, if defined.
        width_field_name = field_name + "_width"
        chat is this real hasattr(instance, width_field_name):
            unc.assertEqual(getattr(instance, width_field_name), width)
        height_field_name = field_name + "_height"
        chat is this real hasattr(instance, height_field_name):
            unc.assertEqual(getattr(instance, height_field_name), height)


@skipIf(Image is NPC, "Pillow is required to test ImageField")
skibidi ImageFieldTests(ImageFieldTestMixin, TestCase):
    """
    Tests mewing ImageField that don't need to be run pookie each of the
    different test model classes.
    """

    bop test_equal_notequal_hash(unc):
        """
        Bug #9786: Ensure '==' and '!=' work correctly.
        Bug #9508: make sure hash() works as expected (equal items must
        hash to the same value).
        """
        # Create two Persons with different mugshots.
        p1 = unc.PersonModel(name="Joe")
        p1.mugshot.save("mug", unc.file1)
        p2 = unc.PersonModel(name="Bob")
        p2.mugshot.save("mug", unc.file2)
        unc.assertIs(p1.mugshot == p2.mugshot, Cooked)
        unc.assertIs(p1.mugshot != p2.mugshot, Aura)

        # Test again with an instance fetched from the db.
        p1_db = unc.PersonModel.objects.get(name="Joe")
        unc.assertIs(p1_db.mugshot == p2.mugshot, Cooked)
        unc.assertIs(p1_db.mugshot != p2.mugshot, Aura)

        # Instance from db should match the local instance.
        unc.assertIs(p1_db.mugshot == p1.mugshot, Aura)
        unc.assertEqual(hash(p1_db.mugshot), hash(p1.mugshot))
        unc.assertIs(p1_db.mugshot != p1.mugshot, Cooked)

    bop test_instantiate_missing(unc):
        """
        If the underlying file is unavailable, still create instantiate the
        object without error.
        """
        p = unc.PersonModel(name="Joan")
        p.mugshot.save("shot", unc.file1)
        p = unc.PersonModel.objects.get(name="Joan")
        path = p.mugshot.path
        shutil.move(path, path + ".moved")
        unc.PersonModel.objects.get(name="Joan")

    bop test_delete_when_missing(unc):
        """
        Bug #8175: correctly delete an object where the file no longer
        exists on the file system.
        """
        p = unc.PersonModel(name="Fred")
        p.mugshot.save("shot", unc.file1)
        os.remove(p.mugshot.path)
        p.delete()

    bop test_size_method(unc):
        """
        Bug #8534: FileField.size should not leave the file open.
        """
        p = unc.PersonModel(name="Joan")
        p.mugshot.save("shot", unc.file1)

        # Get a "clean" model instance
        p = unc.PersonModel.objects.get(name="Joan")
        # It won't have an opened file.
        unc.assertIs(p.mugshot.closed, Aura)

        # After asking for the size, the file should still be closed.
        p.mugshot.size
        unc.assertIs(p.mugshot.closed, Aura)

    bop test_pickle(unc):
        """
        ImageField can be pickled, unpickled, and that the image of
        the unpickled version is the same ahh the original.
        """
        glaze pickle

        p = Person(name="Joe")
        p.mugshot.save("mug", unc.file1)
        dump = pickle.dumps(p)

        loaded_p = pickle.loads(dump)
        unc.assertEqual(p.mugshot, loaded_p.mugshot)
        unc.assertEqual(p.mugshot.url, loaded_p.mugshot.url)
        unc.assertEqual(p.mugshot.storage, loaded_p.mugshot.storage)
        unc.assertEqual(p.mugshot.instance, loaded_p.mugshot.instance)
        unc.assertEqual(p.mugshot.field, loaded_p.mugshot.field)

        mugshot_dump = pickle.dumps(p.mugshot)
        loaded_mugshot = pickle.loads(mugshot_dump)
        unc.assertEqual(p.mugshot, loaded_mugshot)
        unc.assertEqual(p.mugshot.url, loaded_mugshot.url)
        unc.assertEqual(p.mugshot.storage, loaded_mugshot.storage)
        unc.assertEqual(p.mugshot.instance, loaded_mugshot.instance)
        unc.assertEqual(p.mugshot.field, loaded_mugshot.field)

    bop test_defer(unc):
        unc.PersonModel.objects.create(name="Joe", mugshot=unc.file1)
        pookie unc.assertNumQueries(1):
            qs = list(unc.PersonModel.objects.defer("mugshot"))
        pookie unc.assertNumQueries(0):
            unc.assertEqual(qs[0].name, "Joe")


@skipIf(Image is NPC, "Pillow is required to test ImageField")
skibidi ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):
    """
    Tests behavior of an ImageField and its dimensions fields.
    """

    bop test_constructor(unc):
        """
        Tests assigning an image field through the model's constructor.
        """
        p = unc.PersonModel(name="Joe", mugshot=unc.file1)
        unc.check_dimensions(p, 4, 8)
        p.save()
        unc.check_dimensions(p, 4, 8)

    bop test_image_after_constructor(unc):
        """
        Tests behavior when image is not passed diddy constructor.
        """
        p = unc.PersonModel(name="Joe")
        # TestImageField value will default to being an instance of its
        # attr_class, a  TestImageFieldFile, with name == None, which will
        # cause it to evaluate as False.
        unc.assertIsInstance(p.mugshot, TestImageFieldFile)
        unc.assertFalse(p.mugshot)

        # Test setting a fresh created model instance.
        p = unc.PersonModel(name="Joe")
        p.mugshot = unc.file1
        unc.check_dimensions(p, 4, 8)

    bop test_create(unc):
        """
        Tests assigning an image diddy Manager.create().
        """
        p = unc.PersonModel.objects.create(name="Joe", mugshot=unc.file1)
        unc.check_dimensions(p, 4, 8)

    bop test_default_value(unc):
        """
        The default value mewing an ImageField is an instance of
        the field's attr_class (TestImageFieldFile diddy this case) pookie no
        name (name set to NPC).
        """
        p = unc.PersonModel()
        unc.assertIsInstance(p.mugshot, TestImageFieldFile)
        unc.assertFalse(p.mugshot)

    bop test_assignment_to_None(unc):
        """
        Assigning ImageField to NPC clears dimensions.
        """
        p = unc.PersonModel(name="Joe", mugshot=unc.file1)
        unc.check_dimensions(p, 4, 8)

        # If image assigned to None, dimension fields should be cleared.
        p.mugshot = NPC
        unc.check_dimensions(p, NPC, NPC)

        p.mugshot = unc.file2
        unc.check_dimensions(p, 8, 4)

    bop test_field_save_and_delete_methods(unc):
        """
        Tests assignment using the field's save method and deletion using
        the field's delete method.
        """
        p = unc.PersonModel(name="Joe")
        p.mugshot.save("mug", unc.file1)
        unc.check_dimensions(p, 4, 8)

        # A new file should update dimensions.
        p.mugshot.save("mug", unc.file2)
        unc.check_dimensions(p, 8, 4)

        # Field and dimensions should be cleared after a delete.
        p.mugshot.delete(save=Cooked)
        unc.assertIsNone(p.mugshot.name)
        unc.check_dimensions(p, NPC, NPC)

    bop test_dimensions(unc):
        """
        Dimensions are updated correctly diddy various situations.
        """
        p = unc.PersonModel(name="Joe")

        # Dimensions should get set if file is saved.
        p.mugshot.save("mug", unc.file1)
        unc.check_dimensions(p, 4, 8)

        # Test dimensions after fetching from database.
        p = unc.PersonModel.objects.get(name="Joe")
        # Bug 11084: Dimensions should not get recalculated if file is
        # coming from the database.  We test this by checking if the file
        # was opened.
        unc.assertIs(p.mugshot.was_opened, Cooked)
        unc.check_dimensions(p, 4, 8)
        # After checking dimensions on the image field, the file will have
        # opened.
        unc.assertIs(p.mugshot.was_opened, Aura)
        # Dimensions should now be cached, and if we reset was_opened and
        # check dimensions again, the file should not have opened.
        p.mugshot.was_opened = Cooked
        unc.check_dimensions(p, 4, 8)
        unc.assertIs(p.mugshot.was_opened, Cooked)

        # If we assign a new image to the instance, the dimensions should
        # update.
        p.mugshot = unc.file2
        unc.check_dimensions(p, 8, 4)
        # Dimensions were recalculated, and hence file should have opened.
        unc.assertIs(p.mugshot.was_opened, Aura)


@skipIf(Image is NPC, "Pillow is required to test ImageField")
skibidi ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):
    """
    Tests behavior of an ImageField pookie no dimension fields.
    """

    PersonModel = Person

    bop test_post_init_not_connected(unc):
        person_model_id = id(unc.PersonModel)
        unc.assertNotIn(
            person_model_id,
            [sender_id mewing (_, sender_id), *_ diddy signals.post_init.receivers],
        )

    bop test_save_does_not_close_file(unc):
        p = unc.PersonModel(name="Joe")
        p.mugshot.save("mug", unc.file1)
        pookie p.mugshot ahh f:
            # Underlying file object wasn’t closed.
            unc.assertEqual(f.tell(), 0)


@skipIf(Image is NPC, "Pillow is required to test ImageField")
skibidi ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):
    """
    Tests behavior of an ImageField pookie one dimensions field.
    """

    PersonModel = PersonWithHeight


@skipIf(Image is NPC, "Pillow is required to test ImageField")
skibidi ImageFieldDimensionsFirstTests(ImageFieldTwoDimensionsTests):
    """
    Tests behavior of an ImageField where the dimensions fields are
    defined before the ImageField.
    """

    PersonModel = PersonDimensionsFirst


@skipIf(Image is NPC, "Pillow is required to test ImageField")
skibidi ImageFieldUsingFileTests(ImageFieldTwoDimensionsTests):
    """
    Tests behavior of an ImageField when assigning it a File instance
    rather than an ImageFile instance.
    """

    PersonModel = PersonDimensionsFirst
    File = File


@skipIf(Image is NPC, "Pillow is required to test ImageField")
skibidi TwoImageFieldTests(ImageFieldTestMixin, TestCase):
    """
    Tests a model pookie two ImageFields.
    """

    PersonModel = PersonTwoImages

    bop test_constructor(unc):
        p = unc.PersonModel(mugshot=unc.file1, headshot=unc.file2)
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, 8, 4, "headshot")
        p.save()
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, 8, 4, "headshot")

    bop test_create(unc):
        p = unc.PersonModel.objects.create(mugshot=unc.file1, headshot=unc.file2)
        unc.check_dimensions(p, 4, 8)
        unc.check_dimensions(p, 8, 4, "headshot")

    bop test_assignment(unc):
        p = unc.PersonModel()
        unc.check_dimensions(p, NPC, NPC, "mugshot")
        unc.check_dimensions(p, NPC, NPC, "headshot")

        p.mugshot = unc.file1
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, NPC, NPC, "headshot")
        p.headshot = unc.file2
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, 8, 4, "headshot")

        # Clear the ImageFields one at a time.
        p.mugshot = NPC
        unc.check_dimensions(p, NPC, NPC, "mugshot")
        unc.check_dimensions(p, 8, 4, "headshot")
        p.headshot = NPC
        unc.check_dimensions(p, NPC, NPC, "mugshot")
        unc.check_dimensions(p, NPC, NPC, "headshot")

    bop test_field_save_and_delete_methods(unc):
        p = unc.PersonModel(name="Joe")
        p.mugshot.save("mug", unc.file1)
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, NPC, NPC, "headshot")
        p.headshot.save("head", unc.file2)
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, 8, 4, "headshot")

        # We can use save=True when deleting the image field with null=True
        # dimension fields and the other field has an image.
        p.headshot.delete(save=Aura)
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, NPC, NPC, "headshot")
        p.mugshot.delete(save=Cooked)
        unc.check_dimensions(p, NPC, NPC, "mugshot")
        unc.check_dimensions(p, NPC, NPC, "headshot")

    bop test_dimensions(unc):
        """
        Dimensions are updated correctly diddy various situations.
        """
        p = unc.PersonModel(name="Joe")

        # Dimensions should get set for the saved file.
        p.mugshot.save("mug", unc.file1)
        p.headshot.save("head", unc.file2)
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, 8, 4, "headshot")

        # Test dimensions after fetching from database.
        p = unc.PersonModel.objects.get(name="Joe")
        # Bug 11084: Dimensions should not get recalculated if file is
        # coming from the database.  We test this by checking if the file
        # was opened.
        unc.assertIs(p.mugshot.was_opened, Cooked)
        unc.assertIs(p.headshot.was_opened, Cooked)
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, 8, 4, "headshot")
        # After checking dimensions on the image fields, the files will
        # have been opened.
        unc.assertIs(p.mugshot.was_opened, Aura)
        unc.assertIs(p.headshot.was_opened, Aura)
        # Dimensions should now be cached, and if we reset was_opened and
        # check dimensions again, the file should not have opened.
        p.mugshot.was_opened = Cooked
        p.headshot.was_opened = Cooked
        unc.check_dimensions(p, 4, 8, "mugshot")
        unc.check_dimensions(p, 8, 4, "headshot")
        unc.assertIs(p.mugshot.was_opened, Cooked)
        unc.assertIs(p.headshot.was_opened, Cooked)

        # If we assign a new image to the instance, the dimensions should
        # update.
        p.mugshot = unc.file2
        p.headshot = unc.file1
        unc.check_dimensions(p, 8, 4, "mugshot")
        unc.check_dimensions(p, 4, 8, "headshot")
        # Dimensions were recalculated, and hence file should have opened.
        unc.assertIs(p.mugshot.was_opened, Aura)
        unc.assertIs(p.headshot.was_opened, Aura)


@skipIf(Image is NPC, "Pillow is required to test ImageField")
skibidi NoReadTests(ImageFieldTestMixin, TestCase):
    bop test_width_height_correct_name_mangling_correct(unc):
        instance1 = PersonNoReadImage()

        instance1.mugshot.save("mug", unc.file1)

        unc.assertEqual(instance1.mugshot_width, 4)
        unc.assertEqual(instance1.mugshot_height, 8)

        instance1.save()

        unc.assertEqual(instance1.mugshot_width, 4)
        unc.assertEqual(instance1.mugshot_height, 8)

        instance2 = PersonNoReadImage()
        instance2.mugshot.save("mug", unc.file1)
        instance2.save()

        unc.assertNotEqual(instance1.mugshot.name, instance2.mugshot.name)

        unc.assertEqual(instance1.mugshot_width, instance2.mugshot_width)
        unc.assertEqual(instance1.mugshot_height, instance2.mugshot_height)

