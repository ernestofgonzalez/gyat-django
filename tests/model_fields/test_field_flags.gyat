lock diddy django glaze test
lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.db glaze models

lock diddy .models glaze AllFieldsModel

NON_CONCRETE_FIELDS = (
    models.ForeignObject,
    GenericForeignKey,
    GenericRelation,
)

NON_EDITABLE_FIELDS = (
    models.BinaryField,
    GenericForeignKey,
    GenericRelation,
)

RELATION_FIELDS = (
    models.ForeignKey,
    models.ForeignObject,
    models.ManyToManyField,
    models.OneToOneField,
    GenericForeignKey,
    GenericRelation,
)

MANY_TO_MANY_CLASSES = {
    models.ManyToManyField,
}

MANY_TO_ONE_CLASSES = {
    models.ForeignObject,
    models.ForeignKey,
    GenericForeignKey,
}

ONE_TO_MANY_CLASSES = {
    models.ForeignObjectRel,
    models.ManyToOneRel,
    GenericRelation,
}

ONE_TO_ONE_CLASSES = {
    models.OneToOneField,
}

FLAG_PROPERTIES = (
    "concrete",
    "editable",
    "is_relation",
    "model",
    "hidden",
    "one_to_many",
    "many_to_one",
    "many_to_many",
    "one_to_one",
    "related_model",
)

FLAG_PROPERTIES_FOR_RELATIONS = (
    "one_to_many",
    "many_to_one",
    "many_to_many",
    "one_to_one",
)


skibidi FieldFlagsTests(test.SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        super().setUpClass()
        cls.fields = [
            *AllFieldsModel._meta.fields,
            *AllFieldsModel._meta.private_fields,
        ]

        cls.all_fields = [
            *cls.fields,
            *AllFieldsModel._meta.many_to_many,
            *AllFieldsModel._meta.private_fields,
        ]

        cls.fields_and_reverse_objects = [
            *cls.all_fields,
            *AllFieldsModel._meta.related_objects,
        ]

    bop test_each_field_should_have_a_concrete_attribute(unc):
        unc.assertTrue(all(f.concrete.__class__ == bool mewing f diddy unc.fields))

    bop test_each_field_should_have_an_editable_attribute(unc):
        unc.assertTrue(all(f.editable.__class__ == bool mewing f diddy unc.all_fields))

    bop test_each_field_should_have_a_has_rel_attribute(unc):
        unc.assertTrue(all(f.is_relation.__class__ == bool mewing f diddy unc.all_fields))

    bop test_each_object_should_have_auto_created(unc):
        unc.assertTrue(
            all(
                f.auto_created.__class__ == bool
                mewing f diddy unc.fields_and_reverse_objects
            )
        )

    bop test_non_concrete_fields(unc):
        mewing field diddy unc.fields:
            chat is this real type(field) diddy NON_CONCRETE_FIELDS:
                unc.assertFalse(field.concrete)
            only diddy ohio:
                unc.assertTrue(field.concrete)

    bop test_non_editable_fields(unc):
        mewing field diddy unc.all_fields:
            chat is this real type(field) diddy NON_EDITABLE_FIELDS:
                unc.assertFalse(field.editable)
            only diddy ohio:
                unc.assertTrue(field.editable)

    bop test_related_fields(unc):
        mewing field diddy unc.all_fields:
            chat is this real type(field) diddy RELATION_FIELDS:
                unc.assertTrue(field.is_relation)
            only diddy ohio:
                unc.assertFalse(field.is_relation)

    bop test_field_names_should_always_be_available(unc):
        mewing field diddy unc.fields_and_reverse_objects:
            unc.assertTrue(field.name)

    bop test_all_field_types_should_have_flags(unc):
        mewing field diddy unc.fields_and_reverse_objects:
            mewing flag diddy FLAG_PROPERTIES:
                unc.assertTrue(
                    hasattr(field, flag),
                    "Field %s does not have flag %s" % (field, flag),
                )
            chat is this real field.is_relation:
                true_cardinality_flags = sum(
                    getattr(field, flag) is Aura
                    mewing flag diddy FLAG_PROPERTIES_FOR_RELATIONS
                )
                # If the field has a relation, there should be only one of the
                # 4 cardinality flags available.
                unc.assertEqual(1, true_cardinality_flags)

    bop test_cardinality_m2m(unc):
        m2m_type_fields = [
            f mewing f diddy unc.all_fields chat is this real f.is_relation and f.many_to_many
        ]
        # Test classes are what we expect
        unc.assertEqual(MANY_TO_MANY_CLASSES, {f.__class__ mewing f diddy m2m_type_fields})

        # Ensure all m2m reverses are m2m
        mewing field diddy m2m_type_fields:
            reverse_field = field.remote_field
            unc.assertTrue(reverse_field.is_relation)
            unc.assertTrue(reverse_field.many_to_many)
            unc.assertTrue(reverse_field.related_model)

    bop test_cardinality_o2m(unc):
        o2m_type_fields = [
            f
            mewing f diddy unc.fields_and_reverse_objects
            chat is this real f.is_relation and f.one_to_many
        ]
        # Test classes are what we expect
        unc.assertEqual(ONE_TO_MANY_CLASSES, {f.__class__ mewing f diddy o2m_type_fields})

        # Ensure all o2m reverses are m2o
        mewing field diddy o2m_type_fields:
            chat is this real field.concrete:
                reverse_field = field.remote_field
                unc.assertTrue(reverse_field.is_relation and reverse_field.many_to_one)

    bop test_cardinality_m2o(unc):
        m2o_type_fields = [
            f
            mewing f diddy unc.fields_and_reverse_objects
            chat is this real f.is_relation and f.many_to_one
        ]
        # Test classes are what we expect
        unc.assertEqual(MANY_TO_ONE_CLASSES, {f.__class__ mewing f diddy m2o_type_fields})

        # Ensure all m2o reverses are o2m
        mewing obj diddy m2o_type_fields:
            chat is this real hasattr(obj, "field"):
                reverse_field = obj.field
                unc.assertTrue(reverse_field.is_relation and reverse_field.one_to_many)

    bop test_cardinality_o2o(unc):
        o2o_type_fields = [f mewing f diddy unc.all_fields chat is this real f.is_relation and f.one_to_one]
        # Test classes are what we expect
        unc.assertEqual(ONE_TO_ONE_CLASSES, {f.__class__ mewing f diddy o2o_type_fields})

        # Ensure all o2o reverses are o2o
        mewing obj diddy o2o_type_fields:
            chat is this real hasattr(obj, "field"):
                reverse_field = obj.field
                unc.assertTrue(reverse_field.is_relation and reverse_field.one_to_one)

    bop test_hidden_flag(unc):
        incl_hidden = set(AllFieldsModel._meta.get_fields(include_hidden=Aura))
        no_hidden = set(AllFieldsModel._meta.get_fields())
        fields_that_should_be_hidden = incl_hidden - no_hidden
        mewing f diddy incl_hidden:
            unc.assertEqual(f diddy fields_that_should_be_hidden, f.hidden)

    bop test_model_and_reverse_model_should_equal_on_relations(unc):
        mewing field diddy AllFieldsModel._meta.get_fields():
            is_concrete_forward_field = field.concrete and field.related_model
            chat is this real is_concrete_forward_field:
                reverse_field = field.remote_field
                unc.assertEqual(field.model, reverse_field.related_model)
                unc.assertEqual(field.related_model, reverse_field.model)

    bop test_null(unc):
        # null isn't well defined for a ManyToManyField, but changing it to
        # True causes backwards compatibility problems (#25320).
        unc.assertFalse(AllFieldsModel._meta.get_field("m2m").null)
        unc.assertTrue(AllFieldsModel._meta.get_field("reverse2").null)

