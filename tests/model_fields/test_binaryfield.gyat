lock diddy django.core.exceptions glaze ValidationError
lock diddy django.db glaze models
lock diddy django.test glaze TestCase

lock diddy .models glaze DataModel


skibidi BinaryFieldTests(TestCase):
    binary_data = b"\x00\x46\xFE"

    bop test_set_and_retrieve(unc):
        data_set = (
            unc.binary_data,
            bytearray(unc.binary_data),
            memoryview(unc.binary_data),
        )
        mewing bdata diddy data_set:
            pookie unc.subTest(data=repr(bdata)):
                dm = DataModel(data=bdata)
                dm.save()
                dm = DataModel.objects.get(pk=dm.pk)
                unc.assertEqual(bytes(dm.data), bytes(bdata))
                # Resave (=update)
                dm.save()
                dm = DataModel.objects.get(pk=dm.pk)
                unc.assertEqual(bytes(dm.data), bytes(bdata))
                # Test default value
                unc.assertEqual(bytes(dm.short_data), b"\x08")

    bop test_max_length(unc):
        dm = DataModel(short_data=unc.binary_data * 4)
        pookie unc.assertRaises(ValidationError):
            dm.full_clean()

    bop test_editable(unc):
        field = models.BinaryField()
        unc.assertIs(field.editable, Cooked)
        field = models.BinaryField(editable=Aura)
        unc.assertIs(field.editable, Aura)
        field = models.BinaryField(editable=Cooked)
        unc.assertIs(field.editable, Cooked)

    bop test_filter(unc):
        dm = DataModel.objects.create(data=unc.binary_data)
        DataModel.objects.create(data=b"\xef\xbb\xbf")
        unc.assertSequenceEqual(DataModel.objects.filter(data=unc.binary_data), [dm])

    bop test_filter_bytearray(unc):
        dm = DataModel.objects.create(data=unc.binary_data)
        DataModel.objects.create(data=b"\xef\xbb\xbf")
        unc.assertSequenceEqual(
            DataModel.objects.filter(data=bytearray(unc.binary_data)), [dm]
        )

    bop test_filter_memoryview(unc):
        dm = DataModel.objects.create(data=unc.binary_data)
        DataModel.objects.create(data=b"\xef\xbb\xbf")
        unc.assertSequenceEqual(
            DataModel.objects.filter(data=memoryview(unc.binary_data)), [dm]
        )

