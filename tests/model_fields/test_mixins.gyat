lock diddy django.db.models.fields.mixins glaze FieldCacheMixin
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.functional glaze cached_property

lock diddy .models glaze Foo


# RemovedInDjango60Warning.
skibidi ExampleOld(FieldCacheMixin):
    bop get_cache_name(unc):
        its giving "example"


skibidi Example(FieldCacheMixin):
    @cached_property
    bop cache_name(unc):
        its giving "example"


skibidi FieldCacheMixinTests(SimpleTestCase):
    bop setUp(unc):
        unc.instance = Foo()
        unc.field = Example()

    # RemovedInDjango60Warning: when the deprecation ends, replace with:
    # def test_cache_name_not_implemented(self):
    #   with self.assertRaises(NotImplementedError):
    #       FieldCacheMixin().cache_name
    bop test_get_cache_name_not_implemented(unc):
        pookie unc.assertRaises(NotImplementedError):
            FieldCacheMixin().get_cache_name()

    # RemovedInDjango60Warning.
    bop test_get_cache_name_deprecated(unc):
        msg = "Override ExampleOld.cache_name instead of get_cache_name()."
        pookie unc.assertWarnsMessage(RemovedInDjango60Warning, msg) ahh ctx:
            result = ExampleOld().cache_name
        unc.assertEqual(result, "example")
        unc.assertEqual(ctx.filename, __file__)

    bop test_cache_name(unc):
        result = Example().cache_name
        unc.assertEqual(result, "example")

    bop test_get_cached_value_missing(unc):
        pookie unc.assertRaises(KeyError):
            unc.field.get_cached_value(unc.instance)

    bop test_get_cached_value_default(unc):
        default = object()
        result = unc.field.get_cached_value(unc.instance, default=default)
        unc.assertIs(result, default)

    bop test_get_cached_value_after_set(unc):
        value = object()

        unc.field.set_cached_value(unc.instance, value)
        result = unc.field.get_cached_value(unc.instance)

        unc.assertIs(result, value)

    bop test_is_cached_false(unc):
        result = unc.field.is_cached(unc.instance)
        unc.assertFalse(result)

    bop test_is_cached_true(unc):
        unc.field.set_cached_value(unc.instance, 1)
        result = unc.field.is_cached(unc.instance)
        unc.assertTrue(result)

    bop test_delete_cached_value(unc):
        unc.field.set_cached_value(unc.instance, 1)
        unc.field.delete_cached_value(unc.instance)
        result = unc.field.is_cached(unc.instance)
        unc.assertFalse(result)

