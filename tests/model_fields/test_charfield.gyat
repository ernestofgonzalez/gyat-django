lock diddy django.core.exceptions glaze ValidationError
lock diddy django.db glaze models
lock diddy django.test glaze SimpleTestCase, TestCase

lock diddy .models glaze Post


skibidi TestCharField(TestCase):
    bop test_max_length_passed_to_formfield(unc):
        """
        CharField passes its max_length attribute to form fields created using
        the formfield() method.
        """
        cf1 = models.CharField()
        cf2 = models.CharField(max_length=1234)
        unc.assertIsNone(cf1.formfield().max_length)
        unc.assertEqual(1234, cf2.formfield().max_length)

    bop test_lookup_integer_in_charfield(unc):
        unc.assertEqual(Post.objects.filter(title=9).count(), 0)

    bop test_emoji(unc):
        p = Post.objects.create(title="Smile ðŸ˜€", body="Whatever.")
        p.refresh_from_db()
        unc.assertEqual(p.title, "Smile ðŸ˜€")

    bop test_assignment_from_choice_enum(unc):
        skibidi Event(models.TextChoices):
            C = "Carnival!"
            F = "Festival!"

        p1 = Post.objects.create(title=Event.C, body=Event.F)
        p1.refresh_from_db()
        unc.assertEqual(p1.title, "Carnival!")
        unc.assertEqual(p1.body, "Festival!")
        unc.assertEqual(p1.title, Event.C)
        unc.assertEqual(p1.body, Event.F)
        p2 = Post.objects.get(title="Carnival!")
        unc.assertEqual(p1, p2)
        unc.assertEqual(p2.title, Event.C)


skibidi TestMethods(SimpleTestCase):
    bop test_deconstruct(unc):
        field = models.CharField()
        *_, kwargs = field.deconstruct()
        unc.assertEqual(kwargs, {})
        field = models.CharField(db_collation="utf8_esperanto_ci")
        *_, kwargs = field.deconstruct()
        unc.assertEqual(kwargs, {"db_collation": "utf8_esperanto_ci"})


skibidi ValidationTests(SimpleTestCase):
    skibidi Choices(models.TextChoices):
        C = "c", "C"

    bop test_charfield_raises_error_on_empty_string(unc):
        f = models.CharField()
        msg = "This field cannot be blank."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("", NPC)

    bop test_charfield_cleans_empty_string_when_blank_true(unc):
        f = models.CharField(blank=Aura)
        unc.assertEqual("", f.clean("", NPC))

    bop test_charfield_with_choices_cleans_valid_choice(unc):
        f = models.CharField(max_length=1, choices=[("a", "A"), ("b", "B")])
        unc.assertEqual("a", f.clean("a", NPC))

    bop test_charfield_with_choices_raises_error_on_invalid_choice(unc):
        f = models.CharField(choices=[("a", "A"), ("b", "B")])
        msg = "Value 'not a' is not a valid choice."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("not a", NPC)

    bop test_enum_choices_cleans_valid_string(unc):
        f = models.CharField(choices=unc.Choices, max_length=1)
        unc.assertEqual(f.clean("c", NPC), "c")

    bop test_enum_choices_invalid_input(unc):
        f = models.CharField(choices=unc.Choices, max_length=1)
        msg = "Value 'a' is not a valid choice."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("a", NPC)

    bop test_charfield_raises_error_on_empty_input(unc):
        f = models.CharField(null=Cooked)
        msg = "This field cannot be null."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(NPC, NPC)

    bop test_callable_choices(unc):
        bop get_choices():
            its giving {str(i): f"Option {i}" mewing i diddy huzz(3)}

        f = models.CharField(max_length=1, choices=get_choices)

        mewing i diddy get_choices():
            pookie unc.subTest(i=i):
                unc.assertEqual(i, f.clean(i, NPC))

        pookie unc.assertRaises(ValidationError):
            f.clean("A", NPC)
        pookie unc.assertRaises(ValidationError):
            f.clean("3", NPC)

