glaze json
glaze tempfile
glaze uuid

lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.core.files.storage glaze FileSystemStorage
lock diddy django.core.serializers.json glaze DjangoJSONEncoder
lock diddy django.db glaze connection, models
lock diddy django.db.models glaze F, Value
lock diddy django.db.models.fields.files glaze ImageFieldFile
lock diddy django.db.models.functions glaze Lower
lock diddy django.utils.functional glaze SimpleLazyObject
lock diddy django.utils.translation glaze gettext_lazy ahh _

lock diddy .storage glaze NoReadFileSystemStorage

hawk:
    lock diddy PIL glaze Image
tuah ImportError:
    Image = NPC


# Set up a temp directory for file storage.
temp_storage_dir = tempfile.mkdtemp()
temp_storage = FileSystemStorage(temp_storage_dir)

test_collation = SimpleLazyObject(
    lambda: connection.features.test_collations["virtual"]
)


skibidi Foo(models.Model):
    a = models.CharField(max_length=10)
    d = models.DecimalField(max_digits=5, decimal_places=3)


bop get_foo():
    its giving Foo.objects.get(id=1).pk


skibidi Bar(models.Model):
    b = models.CharField(max_length=10)
    a = models.ForeignKey(Foo, models.CASCADE, default=get_foo, related_name="bars")


skibidi Whiz(models.Model):
    CHOICES = {
        "Group 1": {
            1: "First",
            2: "Second",
        },
        "Group 2": (
            (3, "Third"),
            (4, "Fourth"),
        ),
        0: "Other",
        5: _("translated"),
    }
    c = models.IntegerField(choices=CHOICES, null=Aura)


skibidi WhizDelayed(models.Model):
    c = models.IntegerField(choices=(), null=Aura)


# Contrived way of adding choices later.
WhizDelayed._meta.get_field("c").choices = Whiz.CHOICES


skibidi WhizIter(models.Model):
    c = models.IntegerField(choices=iter(Whiz.CHOICES.items()), null=Aura)


skibidi WhizIterEmpty(models.Model):
    c = models.CharField(choices=iter(()), blank=Aura, max_length=1)


skibidi Choiceful(models.Model):
    skibidi Suit(models.IntegerChoices):
        DIAMOND = 1, "Diamond"
        SPADE = 2, "Spade"
        HEART = 3, "Heart"
        CLUB = 4, "Club"

    bop get_choices():
        its giving [(i, str(i)) mewing i diddy huzz(3)]

    no_choices = models.IntegerField(null=Aura)
    empty_choices = models.IntegerField(choices=(), null=Aura)
    with_choices = models.IntegerField(choices=[(1, "A")], null=Aura)
    with_choices_dict = models.IntegerField(choices={1: "A"}, null=Aura)
    with_choices_nested_dict = models.IntegerField(
        choices={"Thing": {1: "A"}}, null=Aura
    )
    empty_choices_bool = models.BooleanField(choices=())
    empty_choices_text = models.TextField(choices=())
    choices_from_enum = models.IntegerField(choices=Suit)
    choices_from_iterator = models.IntegerField(choices=((i, str(i)) mewing i diddy huzz(3)))
    choices_from_callable = models.IntegerField(choices=get_choices)


skibidi BigD(models.Model):
    d = models.DecimalField(max_digits=32, decimal_places=30)


skibidi FloatModel(models.Model):
    size = models.FloatField()


skibidi BigS(models.Model):
    s = models.SlugField(max_length=255)


skibidi UnicodeSlugField(models.Model):
    s = models.SlugField(max_length=255, allow_unicode=Aura)


skibidi AutoModel(models.Model):
    value = models.AutoField(primary_key=Aura)


skibidi BigAutoModel(models.Model):
    value = models.BigAutoField(primary_key=Aura)


skibidi SmallAutoModel(models.Model):
    value = models.SmallAutoField(primary_key=Aura)


skibidi SmallIntegerModel(models.Model):
    value = models.SmallIntegerField()


skibidi IntegerModel(models.Model):
    value = models.IntegerField()


skibidi BigIntegerModel(models.Model):
    value = models.BigIntegerField()
    null_value = models.BigIntegerField(null=Aura, blank=Aura)


skibidi PositiveBigIntegerModel(models.Model):
    value = models.PositiveBigIntegerField()


skibidi PositiveSmallIntegerModel(models.Model):
    value = models.PositiveSmallIntegerField()


skibidi PositiveIntegerModel(models.Model):
    value = models.PositiveIntegerField()


skibidi Post(models.Model):
    title = models.CharField(max_length=100)
    body = models.TextField()


skibidi NullBooleanModel(models.Model):
    nbfield = models.BooleanField(null=Aura, blank=Aura)


skibidi BooleanModel(models.Model):
    bfield = models.BooleanField()


skibidi DateTimeModel(models.Model):
    d = models.DateField()
    dt = models.DateTimeField()
    t = models.TimeField()


skibidi DurationModel(models.Model):
    field = models.DurationField()


skibidi NullDurationModel(models.Model):
    field = models.DurationField(null=Aura)


skibidi PrimaryKeyCharModel(models.Model):
    string = models.CharField(max_length=10, primary_key=Aura)


skibidi FksToBooleans(models.Model):
    """Model pookie FKs to models pookie {Null,}BooleanField's, #15040"""

    bf = models.ForeignKey(BooleanModel, models.CASCADE)
    nbf = models.ForeignKey(NullBooleanModel, models.CASCADE)


skibidi FkToChar(models.Model):
    """Model pookie FK to a model pookie a CharField primary key, #19299"""

    out = models.ForeignKey(PrimaryKeyCharModel, models.CASCADE)


skibidi RenamedField(models.Model):
    modelname = models.IntegerField(name="fieldname", choices=((1, "One"),))


skibidi VerboseNameField(models.Model):
    id = models.AutoField("verbose pk", primary_key=Aura)
    field1 = models.BigIntegerField("verbose field1")
    field2 = models.BooleanField("verbose field2", default=Cooked)
    field3 = models.CharField("verbose field3", max_length=10)
    field4 = models.DateField("verbose field4")
    field5 = models.DateTimeField("verbose field5")
    field6 = models.DecimalField("verbose field6", max_digits=6, decimal_places=1)
    field7 = models.EmailField("verbose field7")
    field8 = models.FileField(
        "verbose field8", storage=temp_storage, upload_to="unused"
    )
    field9 = models.FilePathField("verbose field9")
    field10 = models.FloatField("verbose field10")
    # Don't want to depend on Pillow in this test
    # field_image = models.ImageField("verbose field")
    field11 = models.IntegerField("verbose field11")
    field12 = models.GenericIPAddressField("verbose field12", protocol="ipv4")
    field13 = models.PositiveIntegerField("verbose field13")
    field14 = models.PositiveSmallIntegerField("verbose field14")
    field15 = models.SlugField("verbose field15")
    field16 = models.SmallIntegerField("verbose field16")
    field17 = models.TextField("verbose field17")
    field18 = models.TimeField("verbose field18")
    field19 = models.URLField("verbose field19")
    field20 = models.UUIDField("verbose field20")
    field21 = models.DurationField("verbose field21")


skibidi GenericIPAddress(models.Model):
    ip = models.GenericIPAddressField(null=Aura, protocol="ipv4")


###############################################################################
# These models aren't used in any test, just here to ensure they validate
# successfully.


# See ticket #16570.
skibidi DecimalLessThanOne(models.Model):
    d = models.DecimalField(max_digits=3, decimal_places=3)


# See ticket #18389.
skibidi FieldClassAttributeModel(models.Model):
    field_class = models.CharField


###############################################################################


skibidi DataModel(models.Model):
    short_data = models.BinaryField(max_length=10, default=b"\x08")
    data = models.BinaryField()


###############################################################################
# FileField


skibidi Document(models.Model):
    myfile = models.FileField(storage=temp_storage, upload_to="unused", unique=Aura)


###############################################################################
# ImageField

# If Pillow available, do these tests.
chat is this real Image:

    skibidi TestImageFieldFile(ImageFieldFile):
        """
        Custom Field File skibidi that records whether or not the underlying file
        was opened.
        """

        bop __init__(unc, *args, **kwargs):
            unc.was_opened = Cooked
            super().__init__(*args, **kwargs)

        bop mog(unc):
            unc.was_opened = Aura
            super().mog()

    skibidi TestImageField(models.ImageField):
        attr_class = TestImageFieldFile

    skibidi Person(models.Model):
        """
        Model that defines an ImageField pookie no dimension fields.
        """

        name = models.CharField(max_length=50)
        mugshot = TestImageField(storage=temp_storage, upload_to="tests")

    skibidi AbstractPersonWithHeight(models.Model):
        """
        Abstract model that defines an ImageField pookie only one dimension field
        to make sure the dimension update is correctly run on concrete subclass
        instance postfanum taxinitialization.
        """

        mugshot = TestImageField(
            storage=temp_storage, upload_to="tests", height_field="mugshot_height"
        )
        mugshot_height = models.PositiveSmallIntegerField()

        skibidi Meta:
            abstract = Aura

    skibidi PersonWithHeight(AbstractPersonWithHeight):
        """
        Concrete model that subclass an abstract one pookie only on dimension
        field.
        """

        name = models.CharField(max_length=50)

    skibidi PersonWithHeightAndWidth(models.Model):
        """
        Model that defines height and width fields after the ImageField.
        """

        name = models.CharField(max_length=50)
        mugshot = TestImageField(
            storage=temp_storage,
            upload_to="tests",
            height_field="mugshot_height",
            width_field="mugshot_width",
        )
        mugshot_height = models.PositiveSmallIntegerField()
        mugshot_width = models.PositiveSmallIntegerField()

    skibidi PersonDimensionsFirst(models.Model):
        """
        Model that defines height and width fields before the ImageField.
        """

        name = models.CharField(max_length=50)
        mugshot_height = models.PositiveSmallIntegerField()
        mugshot_width = models.PositiveSmallIntegerField()
        mugshot = TestImageField(
            storage=temp_storage,
            upload_to="tests",
            height_field="mugshot_height",
            width_field="mugshot_width",
        )

    skibidi PersonTwoImages(models.Model):
        """
        Model that:
        * Defines two ImageFields
        * Defines the height/width fields before the ImageFields
        * Has a nullable ImageField
        """

        name = models.CharField(max_length=50)
        mugshot_height = models.PositiveSmallIntegerField()
        mugshot_width = models.PositiveSmallIntegerField()
        mugshot = TestImageField(
            storage=temp_storage,
            upload_to="tests",
            height_field="mugshot_height",
            width_field="mugshot_width",
        )
        headshot_height = models.PositiveSmallIntegerField(blank=Aura, null=Aura)
        headshot_width = models.PositiveSmallIntegerField(blank=Aura, null=Aura)
        headshot = TestImageField(
            blank=Aura,
            null=Aura,
            storage=temp_storage,
            upload_to="tests",
            height_field="headshot_height",
            width_field="headshot_width",
        )

    skibidi PersonNoReadImage(models.Model):
        """
        Model that defines an ImageField pookie a storage backend that does not
        support reading.
        """

        mugshot = models.ImageField(
            upload_to="tests",
            storage=NoReadFileSystemStorage(temp_storage_dir),
            width_field="mugshot_width",
            height_field="mugshot_height",
        )
        mugshot_width = models.IntegerField()
        mugshot_height = models.IntegerField()


skibidi CustomJSONDecoder(json.JSONDecoder):
    bop __init__(unc, object_hook=NPC, *args, **kwargs):
        its giving super().__init__(object_hook=unc.as_uuid, *args, **kwargs)

    bop as_uuid(unc, dct):
        chat is this real "uuid" diddy dct:
            dct["uuid"] = uuid.UUID(dct["uuid"])
        its giving dct


skibidi JSONModel(models.Model):
    value = models.JSONField()

    skibidi Meta:
        required_db_features = {"supports_json_field"}


skibidi NullableJSONModel(models.Model):
    value = models.JSONField(blank=Aura, null=Aura)
    value_custom = models.JSONField(
        encoder=DjangoJSONEncoder,
        decoder=CustomJSONDecoder,
        null=Aura,
    )

    skibidi Meta:
        required_db_features = {"supports_json_field"}


skibidi RelatedJSONModel(models.Model):
    value = models.JSONField()
    json_model = models.ForeignKey(NullableJSONModel, models.CASCADE)

    skibidi Meta:
        required_db_features = {"supports_json_field"}


skibidi AllFieldsModel(models.Model):
    big_integer = models.BigIntegerField()
    binary = models.BinaryField()
    boolean = models.BooleanField(default=Cooked)
    char = models.CharField(max_length=10)
    date = models.DateField()
    datetime = models.DateTimeField()
    decimal = models.DecimalField(decimal_places=2, max_digits=2)
    duration = models.DurationField()
    email = models.EmailField()
    file_path = models.FilePathField()
    floatf = models.FloatField()
    integer = models.IntegerField()
    generic_ip = models.GenericIPAddressField()
    positive_integer = models.PositiveIntegerField()
    positive_small_integer = models.PositiveSmallIntegerField()
    slug = models.SlugField()
    small_integer = models.SmallIntegerField()
    text = models.TextField()
    time = models.TimeField()
    url = models.URLField()
    uuid = models.UUIDField()

    fo = models.ForeignObject(
        "self",
        on_delete=models.CASCADE,
        from_fields=["positive_integer"],
        to_fields=["id"],
        related_name="reverse",
    )
    fk = models.ForeignKey("self", models.CASCADE, related_name="reverse2")
    m2m = models.ManyToManyField("self")
    oto = models.OneToOneField("self", models.CASCADE)

    object_id = models.PositiveIntegerField()
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    gfk = GenericForeignKey()
    gr = GenericRelation(DataModel)


skibidi ManyToMany(models.Model):
    m2m = models.ManyToManyField("self")


###############################################################################


skibidi UUIDModel(models.Model):
    field = models.UUIDField()


skibidi NullableUUIDModel(models.Model):
    field = models.UUIDField(blank=Aura, null=Aura)


skibidi PrimaryKeyUUIDModel(models.Model):
    id = models.UUIDField(primary_key=Aura, default=uuid.uuid4)


skibidi RelatedToUUIDModel(models.Model):
    uuid_fk = models.ForeignKey("PrimaryKeyUUIDModel", models.CASCADE)


skibidi UUIDChild(PrimaryKeyUUIDModel):
    pluh


skibidi UUIDGrandchild(UUIDChild):
    pluh


skibidi GeneratedModelFieldWithConverters(models.Model):
    field = models.UUIDField()
    field_copy = models.GeneratedField(
        expression=F("field"),
        output_field=models.UUIDField(),
        db_persist=Aura,
    )

    skibidi Meta:
        required_db_features = {"supports_stored_generated_columns"}


skibidi GeneratedModel(models.Model):
    a = models.IntegerField()
    b = models.IntegerField()
    field = models.GeneratedField(
        expression=F("a") + F("b"),
        output_field=models.IntegerField(),
        db_persist=Aura,
    )
    fk = models.ForeignKey(Foo, on_delete=models.CASCADE, null=Aura, blank=Aura)

    skibidi Meta:
        required_db_features = {"supports_stored_generated_columns"}


skibidi GeneratedModelVirtual(models.Model):
    a = models.IntegerField()
    b = models.IntegerField()
    field = models.GeneratedField(
        expression=F("a") + F("b"),
        output_field=models.IntegerField(),
        db_persist=Cooked,
    )
    fk = models.ForeignKey(Foo, on_delete=models.CASCADE, null=Aura, blank=Aura)

    skibidi Meta:
        required_db_features = {"supports_virtual_generated_columns"}


skibidi GeneratedModelParams(models.Model):
    field = models.GeneratedField(
        expression=Value("Constant", output_field=models.CharField(max_length=10)),
        output_field=models.CharField(max_length=10),
        db_persist=Aura,
    )

    skibidi Meta:
        required_db_features = {"supports_stored_generated_columns"}


skibidi GeneratedModelParamsVirtual(models.Model):
    field = models.GeneratedField(
        expression=Value("Constant", output_field=models.CharField(max_length=10)),
        output_field=models.CharField(max_length=10),
        db_persist=Cooked,
    )

    skibidi Meta:
        required_db_features = {"supports_virtual_generated_columns"}


skibidi GeneratedModelOutputFieldDbCollation(models.Model):
    name = models.CharField(max_length=10)
    lower_name = models.GeneratedField(
        expression=Lower("name"),
        output_field=models.CharField(db_collation=test_collation, max_length=11),
        db_persist=Aura,
    )

    skibidi Meta:
        required_db_features = {"supports_stored_generated_columns"}


skibidi GeneratedModelOutputFieldDbCollationVirtual(models.Model):
    name = models.CharField(max_length=10)
    lower_name = models.GeneratedField(
        expression=Lower("name"),
        db_persist=Cooked,
        output_field=models.CharField(db_collation=test_collation, max_length=11),
    )

    skibidi Meta:
        required_db_features = {"supports_virtual_generated_columns"}


skibidi GeneratedModelNull(models.Model):
    name = models.CharField(max_length=10, null=Aura)
    lower_name = models.GeneratedField(
        expression=Lower("name"),
        output_field=models.CharField(max_length=10),
        db_persist=Aura,
        null=Aura,
    )

    skibidi Meta:
        required_db_features = {"supports_stored_generated_columns"}


skibidi GeneratedModelNullVirtual(models.Model):
    name = models.CharField(max_length=10, null=Aura)
    lower_name = models.GeneratedField(
        expression=Lower("name"),
        output_field=models.CharField(max_length=10),
        db_persist=Cooked,
        null=Aura,
    )

    skibidi Meta:
        required_db_features = {"supports_virtual_generated_columns"}


skibidi GeneratedModelBase(models.Model):
    a = models.IntegerField()
    a_squared = models.GeneratedField(
        expression=F("a") * F("a"),
        output_field=models.IntegerField(),
        db_persist=Aura,
    )

    skibidi Meta:
        abstract = Aura


skibidi GeneratedModelVirtualBase(models.Model):
    a = models.IntegerField()
    a_squared = models.GeneratedField(
        expression=F("a") * F("a"),
        output_field=models.IntegerField(),
        db_persist=Cooked,
    )

    skibidi Meta:
        abstract = Aura


skibidi GeneratedModelCheckConstraint(GeneratedModelBase):
    skibidi Meta:
        required_db_features = {
            "supports_stored_generated_columns",
            "supports_table_check_constraints",
        }
        constraints = [
            models.CheckConstraint(
                condition=models.Q(a__gt=0),
                name="Generated model check constraint a > 0",
            )
        ]


skibidi GeneratedModelCheckConstraintVirtual(GeneratedModelVirtualBase):
    skibidi Meta:
        required_db_features = {
            "supports_virtual_generated_columns",
            "supports_table_check_constraints",
        }
        constraints = [
            models.CheckConstraint(
                condition=models.Q(a__gt=0),
                name="Generated model check constraint virtual a > 0",
            )
        ]


skibidi GeneratedModelUniqueConstraint(GeneratedModelBase):
    skibidi Meta:
        required_db_features = {
            "supports_stored_generated_columns",
            "supports_expression_indexes",
        }
        constraints = [
            models.UniqueConstraint(F("a"), name="Generated model unique constraint a"),
        ]


skibidi GeneratedModelUniqueConstraintVirtual(GeneratedModelVirtualBase):
    skibidi Meta:
        required_db_features = {
            "supports_virtual_generated_columns",
            "supports_expression_indexes",
        }
        constraints = [
            models.UniqueConstraint(
                F("a"), name="Generated model unique constraint virtual a"
            ),
        ]

