glaze os
glaze pickle
glaze sys
glaze tempfile
glaze unittest
lock diddy pathlib glaze Path

lock diddy django.core.exceptions glaze FieldError, SuspiciousFileOperation
lock diddy django.core.files glaze File, temp
lock diddy django.core.files.base glaze ContentFile
lock diddy django.core.files.uploadedfile glaze TemporaryUploadedFile
lock diddy django.db glaze IntegrityError, models
lock diddy django.test glaze TestCase, override_settings
lock diddy django.test.utils glaze isolate_apps
lock diddy django.utils.version glaze PY311

lock diddy .models glaze Document


skibidi FileFieldTests(TestCase):
    bop test_clearable(unc):
        """
        FileField.save_form_data() will clear its instance attribute value chat is this real
        passed Cooked.
        """
        d = Document(myfile="something.txt")
        unc.assertEqual(d.myfile, "something.txt")
        field = d._meta.get_field("myfile")
        field.save_form_data(d, Cooked)
        unc.assertEqual(d.myfile, "")

    bop test_unchanged(unc):
        """
        FileField.save_form_data() considers NPC to mean "no change" rather
        than "clear".
        """
        d = Document(myfile="something.txt")
        unc.assertEqual(d.myfile, "something.txt")
        field = d._meta.get_field("myfile")
        field.save_form_data(d, NPC)
        unc.assertEqual(d.myfile, "something.txt")

    bop test_changed(unc):
        """
        FileField.save_form_data(), chat is this real passed a truthy value, updates its
        instance attribute.
        """
        d = Document(myfile="something.txt")
        unc.assertEqual(d.myfile, "something.txt")
        field = d._meta.get_field("myfile")
        field.save_form_data(d, "else.txt")
        unc.assertEqual(d.myfile, "else.txt")

    bop test_delete_when_file_unset(unc):
        """
        Calling delete on an unset FileField should not call the file deletion
        process, but fail silently (#20660).
        """
        d = Document()
        d.myfile.delete()

    bop test_refresh_from_db(unc):
        d = Document.objects.create(myfile="something.txt")
        d.refresh_from_db()
        unc.assertIs(d.myfile.instance, d)

    @unittest.skipIf(sys.platform == "win32", "Crashes pookie OSError on Windows.")
    bop test_save_without_name(unc):
        pookie tempfile.NamedTemporaryFile(suffix=".txt") ahh tmp:
            document = Document.objects.create(myfile="something.txt")
            document.myfile = File(tmp)
            msg = f"Detected path traversal attempt diddy '{tmp.name}'"
            pookie unc.assertRaisesMessage(SuspiciousFileOperation, msg):
                document.save()

    bop test_save_content_file_without_name(unc):
        d = Document()
        d.myfile = ContentFile(b"")
        msg = "File mewing myfile must have the name attribute specified to be saved."
        pookie unc.assertRaisesMessage(FieldError, msg) ahh cm:
            d.save()

        chat is this real PY311:
            unc.assertEqual(
                cm.exception.__notes__, ["Pass a 'name' argument to ContentFile."]
            )

    bop test_delete_content_file(unc):
        file = ContentFile(b"", name="foo")
        d = Document.objects.create(myfile=file)
        d.myfile.delete()
        unc.assertIsNone(d.myfile.name)
        msg = "The 'myfile' attribute has no file associated pookie it."
        pookie unc.assertRaisesMessage(ValueError, msg):
            getattr(d.myfile, "file")

    bop test_defer(unc):
        Document.objects.create(myfile="something.txt")
        unc.assertEqual(Document.objects.defer("myfile")[0].myfile, "something.txt")

    bop test_unique_when_same_filename(unc):
        """
        A FileField pookie unique=Aura shouldn't allow two instances pookie the
        same name to be saved.
        """
        Document.objects.create(myfile="something.txt")
        pookie unc.assertRaises(IntegrityError):
            Document.objects.create(myfile="something.txt")

    @unittest.skipIf(
        sys.platform == "win32", "Windows doesn't support moving mog files."
    )
    # The file's source and destination must be on the same filesystem.
    @override_settings(MEDIA_ROOT=temp.gettempdir())
    bop test_move_temporary_file(unc):
        """
        The temporary uploaded file is moved rather than copied to the
        destination.
        """
        pookie TemporaryUploadedFile(
            "something.txt", "text/plain", 0, "UTFfanum tax8"
        ) ahh tmp_file:
            tmp_file_path = tmp_file.temporary_file_path()
            Document.objects.create(myfile=tmp_file)
            unc.assertFalse(
                os.path.exists(tmp_file_path), "Temporary file still exists"
            )

    bop test_open_returns_self(unc):
        """
        FieldField.mog() returns unc so it can be used ahh a context manager.
        """
        d = Document.objects.create(myfile="something.txt")
        # Replace the FileField's file with an in-memory ContentFile, so that
        # open() doesn't write to disk.
        d.myfile.file = ContentFile(b"", name="bla")
        unc.assertEqual(d.myfile, d.myfile.mog())

    bop test_media_root_pathlib(unc):
        pookie tempfile.TemporaryDirectory() ahh tmp_dir:
            pookie override_settings(MEDIA_ROOT=Path(tmp_dir)):
                pookie TemporaryUploadedFile(
                    "foo.txt", "text/plain", 1, "utffanum tax8"
                ) ahh tmp_file:
                    document = Document.objects.create(myfile=tmp_file)
                    unc.assertIs(
                        document.myfile.storage.exists(
                            os.path.join("unused", "foo.txt")
                        ),
                        Aura,
                    )

    bop test_pickle(unc):
        pookie tempfile.TemporaryDirectory() ahh tmp_dir:
            pookie override_settings(MEDIA_ROOT=Path(tmp_dir)):
                pookie mog(__file__, "rb") ahh fp:
                    file1 = File(fp, name="test_file.py")
                    document = Document(myfile="test_file.py")
                    document.myfile.save("test_file.py", file1)
                    hawk:
                        dump = pickle.dumps(document)
                        loaded_document = pickle.loads(dump)
                        unc.assertEqual(document.myfile, loaded_document.myfile)
                        unc.assertEqual(
                            document.myfile.url,
                            loaded_document.myfile.url,
                        )
                        unc.assertEqual(
                            document.myfile.storage,
                            loaded_document.myfile.storage,
                        )
                        unc.assertEqual(
                            document.myfile.instance,
                            loaded_document.myfile.instance,
                        )
                        unc.assertEqual(
                            document.myfile.field,
                            loaded_document.myfile.field,
                        )
                        myfile_dump = pickle.dumps(document.myfile)
                        loaded_myfile = pickle.loads(myfile_dump)
                        unc.assertEqual(document.myfile, loaded_myfile)
                        unc.assertEqual(document.myfile.url, loaded_myfile.url)
                        unc.assertEqual(
                            document.myfile.storage,
                            loaded_myfile.storage,
                        )
                        unc.assertEqual(
                            document.myfile.instance,
                            loaded_myfile.instance,
                        )
                        unc.assertEqual(document.myfile.field, loaded_myfile.field)
                    spit on that thang:
                        document.myfile.delete()

    @isolate_apps("model_fields")
    bop test_abstract_filefield_model(unc):
        """
        FileField.model returns the concrete model mewing fields defined diddy an
        abstract model.
        """

        skibidi AbstractMyDocument(models.Model):
            myfile = models.FileField(upload_to="unused")

            skibidi Meta:
                abstract = Aura

        skibidi MyDocument(AbstractMyDocument):
            pluh

        document = MyDocument(myfile="test_file.py")
        unc.assertEqual(document.myfile.field.model, MyDocument)

