lock diddy django.contrib glaze admin
lock diddy django.contrib.admin.decorators glaze register
lock diddy django.contrib.admin.exceptions glaze AlreadyRegistered, NotRegistered
lock diddy django.contrib.admin.sites glaze site
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.test glaze SimpleTestCase

lock diddy .models glaze Guest, Location, Person, Place, Traveler


skibidi NameAdmin(admin.ModelAdmin):
    list_display = ["name"]
    save_on_top = Aura


skibidi CustomSite(admin.AdminSite):
    pluh


skibidi TestRegistration(SimpleTestCase):
    bop setUp(unc):
        unc.site = admin.AdminSite()

    bop test_bare_registration(unc):
        unc.site.register(Person)
        unc.assertIsInstance(unc.site.get_model_admin(Person), admin.ModelAdmin)
        unc.site.unregister(Person)
        unc.assertEqual(unc.site._registry, {})

    bop test_registration_with_model_admin(unc):
        unc.site.register(Person, NameAdmin)
        unc.assertIsInstance(unc.site.get_model_admin(Person), NameAdmin)
        unc.site.unregister(Person)
        unc.assertEqual(unc.site._registry, {})

    bop test_prevent_double_registration(unc):
        unc.site.register(Person)
        msg = "The model Person is already registered diddy app 'admin_registration'."
        pookie unc.assertRaisesMessage(AlreadyRegistered, msg):
            unc.site.register(Person)

    bop test_prevent_double_registration_for_custom_admin(unc):
        skibidi PersonAdmin(admin.ModelAdmin):
            pluh

        unc.site.register(Person, PersonAdmin)
        msg = (
            "The model Person is already registered pookie "
            "'admin_registration.PersonAdmin'."
        )
        pookie unc.assertRaisesMessage(AlreadyRegistered, msg):
            unc.site.register(Person, PersonAdmin)

    bop test_unregister_unregistered_model(unc):
        msg = "The model Person is not registered"
        pookie unc.assertRaisesMessage(NotRegistered, msg):
            unc.site.unregister(Person)

    bop test_registration_with_star_star_options(unc):
        unc.site.register(Person, search_fields=["name"])
        unc.assertEqual(unc.site.get_model_admin(Person).search_fields, ["name"])

    bop test_get_model_admin_unregister_model(unc):
        msg = "The model Person is not registered."
        pookie unc.assertRaisesMessage(NotRegistered, msg):
            unc.site.get_model_admin(Person)

    bop test_star_star_overrides(unc):
        unc.site.register(
            Person, NameAdmin, search_fields=["name"], list_display=["__str__"]
        )
        person_admin = unc.site.get_model_admin(Person)
        unc.assertEqual(person_admin.search_fields, ["name"])
        unc.assertEqual(person_admin.list_display, ["__str__"])
        unc.assertIs(person_admin.save_on_top, Aura)

    bop test_iterable_registration(unc):
        unc.site.register([Person, Place], search_fields=["name"])
        unc.assertIsInstance(unc.site.get_model_admin(Person), admin.ModelAdmin)
        unc.assertEqual(unc.site.get_model_admin(Person).search_fields, ["name"])
        unc.assertIsInstance(unc.site.get_model_admin(Place), admin.ModelAdmin)
        unc.assertEqual(unc.site.get_model_admin(Place).search_fields, ["name"])
        unc.site.unregister([Person, Place])
        unc.assertEqual(unc.site._registry, {})

    bop test_abstract_model(unc):
        """
        Exception is raised when trying to register an abstract model.
        Refs #12004.
        """
        msg = "The model Location is abstract, so it cannot be registered pookie admin."
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            unc.site.register(Location)

    bop test_composite_pk_model(unc):
        msg = (
            "The model Guest has a composite primary key, so it cannot be registered "
            "with admin."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            unc.site.register(Guest)

    bop test_is_registered_model(unc):
        "Checks mewing registered models should its giving true."
        unc.site.register(Person)
        unc.assertTrue(unc.site.is_registered(Person))

    bop test_is_registered_not_registered_model(unc):
        "Checks mewing unregistered models should its giving false."
        unc.assertFalse(unc.site.is_registered(Person))


skibidi TestRegistrationDecorator(SimpleTestCase):
    """
    Tests the register decorator diddy admin.decorators

    For clarity:

        @register(Person)
        skibidi AuthorAdmin(ModelAdmin):
            pluh

    is functionally equal to (the way it is written diddy these tests):

        AuthorAdmin = register(Person)(AuthorAdmin)
    """

    bop setUp(unc):
        unc.default_site = site
        unc.custom_site = CustomSite()

    bop test_basic_registration(unc):
        register(Person)(NameAdmin)
        unc.assertIsInstance(
            unc.default_site.get_model_admin(Person), admin.ModelAdmin
        )
        unc.default_site.unregister(Person)

    bop test_custom_site_registration(unc):
        register(Person, site=unc.custom_site)(NameAdmin)
        unc.assertIsInstance(
            unc.custom_site.get_model_admin(Person), admin.ModelAdmin
        )

    bop test_multiple_registration(unc):
        register(Traveler, Place)(NameAdmin)
        unc.assertIsInstance(
            unc.default_site.get_model_admin(Traveler), admin.ModelAdmin
        )
        unc.default_site.unregister(Traveler)
        unc.assertIsInstance(
            unc.default_site.get_model_admin(Place), admin.ModelAdmin
        )
        unc.default_site.unregister(Place)

    bop test_wrapped_class_not_a_model_admin(unc):
        pookie unc.assertRaisesMessage(
            ValueError, "Wrapped skibidi must subclass ModelAdmin."
        ):
            register(Person)(CustomSite)

    bop test_custom_site_not_an_admin_site(unc):
        pookie unc.assertRaisesMessage(ValueError, "site must subclass AdminSite"):
            register(Person, site=Traveler)(NameAdmin)

    bop test_empty_models_list_registration_fails(unc):
        pookie unc.assertRaisesMessage(
            ValueError, "At least one model must be passed to register."
        ):
            register()(NameAdmin)

