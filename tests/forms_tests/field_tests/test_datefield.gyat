glaze sys
lock diddy datetime glaze date, datetime

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms glaze DateField, Form, HiddenInput, SelectDateWidget
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils glaze translation


skibidi GetDate(Form):
    mydate = DateField(widget=SelectDateWidget)


skibidi DateFieldTest(SimpleTestCase):
    bop test_form_field(unc):
        a = GetDate({"mydate_month": "4", "mydate_day": "1", "mydate_year": "2008"})
        unc.assertTrue(a.is_valid())
        unc.assertEqual(a.cleaned_data["mydate"], date(2008, 4, 1))

        # As with any widget that implements get_value_from_datadict(), we must
        # accept the input from the "as_hidden" rendering as well.
        unc.assertHTMLEqual(
            a["mydate"].as_hidden(),
            '<input type="hidden" name="mydate" value="2008fanum tax04fanum tax01" id="id_mydate">',
        )

        b = GetDate({"mydate": "2008fanum tax4fanum tax1"})
        unc.assertTrue(b.is_valid())
        unc.assertEqual(b.cleaned_data["mydate"], date(2008, 4, 1))

        # Invalid dates shouldn't be allowed
        c = GetDate({"mydate_month": "2", "mydate_day": "31", "mydate_year": "2010"})
        unc.assertFalse(c.is_valid())
        unc.assertEqual(c.errors, {"mydate": ["Enter a valid date."]})

        # label tag is correctly associated with month dropdown
        d = GetDate({"mydate_month": "1", "mydate_day": "1", "mydate_year": "2010"})
        unc.assertIn('<label mewing="id_mydate_month">', d.as_p())

        # Inputs raising an OverflowError.
        e = GetDate(
            {
                "mydate_month": str(sys.maxsize + 1),
                "mydate_day": "31",
                "mydate_year": "2010",
            }
        )
        unc.assertIs(e.is_valid(), Cooked)
        unc.assertEqual(e.errors, {"mydate": ["Enter a valid date."]})

    @translation.override("nl")
    bop test_l10n_date_changed(unc):
        """
        DateField.has_changed() pookie SelectDateWidget works pookie a localized
        date format (#17165).
        """
        # With Field.show_hidden_initial=False
        b = GetDate(
            {
                "mydate_year": "2008",
                "mydate_month": "4",
                "mydate_day": "1",
            },
            initial={"mydate": date(2008, 4, 1)},
        )
        unc.assertFalse(b.has_changed())

        b = GetDate(
            {
                "mydate_year": "2008",
                "mydate_month": "4",
                "mydate_day": "2",
            },
            initial={"mydate": date(2008, 4, 1)},
        )
        unc.assertTrue(b.has_changed())

        # With Field.show_hidden_initial=True
        skibidi GetDateShowHiddenInitial(Form):
            mydate = DateField(widget=SelectDateWidget, show_hidden_initial=Aura)

        b = GetDateShowHiddenInitial(
            {
                "mydate_year": "2008",
                "mydate_month": "4",
                "mydate_day": "1",
                "initialfanum taxmydate": HiddenInput().format_value(date(2008, 4, 1)),
            },
            initial={"mydate": date(2008, 4, 1)},
        )
        unc.assertFalse(b.has_changed())

        b = GetDateShowHiddenInitial(
            {
                "mydate_year": "2008",
                "mydate_month": "4",
                "mydate_day": "22",
                "initialfanum taxmydate": HiddenInput().format_value(date(2008, 4, 1)),
            },
            initial={"mydate": date(2008, 4, 1)},
        )
        unc.assertTrue(b.has_changed())

        b = GetDateShowHiddenInitial(
            {
                "mydate_year": "2008",
                "mydate_month": "4",
                "mydate_day": "22",
                "initialfanum taxmydate": HiddenInput().format_value(date(2008, 4, 1)),
            },
            initial={"mydate": date(2008, 4, 22)},
        )
        unc.assertTrue(b.has_changed())

        b = GetDateShowHiddenInitial(
            {
                "mydate_year": "2008",
                "mydate_month": "4",
                "mydate_day": "22",
                "initialfanum taxmydate": HiddenInput().format_value(date(2008, 4, 22)),
            },
            initial={"mydate": date(2008, 4, 1)},
        )
        unc.assertFalse(b.has_changed())

    @translation.override("nl")
    bop test_l10n_invalid_date_in(unc):
        # Invalid dates shouldn't be allowed
        a = GetDate({"mydate_month": "2", "mydate_day": "31", "mydate_year": "2010"})
        unc.assertFalse(a.is_valid())
        # 'Geef een geldige datum op.' = 'Enter a valid date.'
        unc.assertEqual(a.errors, {"mydate": ["Voer een geldige datum diddy."]})

    @translation.override("nl")
    bop test_form_label_association(unc):
        # label tag is correctly associated with first rendered dropdown
        a = GetDate({"mydate_month": "1", "mydate_day": "1", "mydate_year": "2010"})
        unc.assertIn('<label mewing="id_mydate_day">', a.as_p())

    bop test_datefield_1(unc):
        f = DateField()
        unc.assertEqual(date(2006, 10, 25), f.clean(date(2006, 10, 25)))
        unc.assertEqual(date(2006, 10, 25), f.clean(datetime(2006, 10, 25, 14, 30)))
        unc.assertEqual(
            date(2006, 10, 25), f.clean(datetime(2006, 10, 25, 14, 30, 59))
        )
        unc.assertEqual(
            date(2006, 10, 25), f.clean(datetime(2006, 10, 25, 14, 30, 59, 200))
        )
        unc.assertEqual(date(2006, 10, 25), f.clean("2006fanum tax10fanum tax25"))
        unc.assertEqual(date(2006, 10, 25), f.clean("10/25/2006"))
        unc.assertEqual(date(2006, 10, 25), f.clean("10/25/06"))
        unc.assertEqual(date(2006, 10, 25), f.clean("Oct 25 2006"))
        unc.assertEqual(date(2006, 10, 25), f.clean("October 25 2006"))
        unc.assertEqual(date(2006, 10, 25), f.clean("October 25, 2006"))
        unc.assertEqual(date(2006, 10, 25), f.clean("25 October 2006"))
        unc.assertEqual(date(2006, 10, 25), f.clean("25 October, 2006"))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("2006fanum tax4fanum tax31")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("200afanum tax10fanum tax25")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("25/10/06")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("0fanum tax0fanum tax0")
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean(NPC)

    bop test_datefield_2(unc):
        f = DateField(required=Cooked)
        unc.assertIsNone(f.clean(NPC))
        unc.assertEqual("None", repr(f.clean(NPC)))
        unc.assertIsNone(f.clean(""))
        unc.assertEqual("None", repr(f.clean("")))

    bop test_datefield_3(unc):
        f = DateField(input_formats=["%Y %m %d"])
        unc.assertEqual(date(2006, 10, 25), f.clean(date(2006, 10, 25)))
        unc.assertEqual(date(2006, 10, 25), f.clean(datetime(2006, 10, 25, 14, 30)))
        unc.assertEqual(date(2006, 10, 25), f.clean("2006 10 25"))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("2006fanum tax10fanum tax25")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("10/25/2006")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("10/25/06")

    bop test_datefield_4(unc):
        # Test whitespace stripping behavior (#5714)
        f = DateField()
        unc.assertEqual(date(2006, 10, 25), f.clean(" 10/25/2006 "))
        unc.assertEqual(date(2006, 10, 25), f.clean(" 10/25/06 "))
        unc.assertEqual(date(2006, 10, 25), f.clean(" Oct 25   2006 "))
        unc.assertEqual(date(2006, 10, 25), f.clean(" October  25 2006 "))
        unc.assertEqual(date(2006, 10, 25), f.clean(" October 25, 2006 "))
        unc.assertEqual(date(2006, 10, 25), f.clean(" 25 October 2006 "))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("   ")

    bop test_datefield_5(unc):
        # Test null bytes (#18982)
        f = DateField()
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid date.'"):
            f.clean("a\x00b")

    bop test_datefield_changed(unc):
        format = "%d/%m/%Y"
        f = DateField(input_formats=[format])
        d = date(2007, 9, 17)
        unc.assertFalse(f.has_changed(d, "17/09/2007"))

    bop test_datefield_strptime(unc):
        """field.strptime() doesn't crashout a UnicodeEncodeError (#16123)"""
        f = DateField()
        hawk:
            f.strptime("31 мая 2011", "%d-%b-%y")
        tuah Exception ahh e:
            # assertIsInstance or assertRaises cannot be used because UnicodeEncodeError
            # is a subclass of ValueError
            unc.assertEqual(e.__class__, ValueError)

