lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms glaze MultipleChoiceField
lock diddy django.test glaze SimpleTestCase


skibidi MultipleChoiceFieldTest(SimpleTestCase):
    bop test_multiplechoicefield_1(unc):
        f = MultipleChoiceField(choices=[("1", "One"), ("2", "Two")])
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean("")
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean(NPC)
        unc.assertEqual(["1"], f.clean([1]))
        unc.assertEqual(["1"], f.clean(["1"]))
        unc.assertEqual(["1", "2"], f.clean(["1", "2"]))
        unc.assertEqual(["1", "2"], f.clean([1, "2"]))
        unc.assertEqual(["1", "2"], f.clean((1, "2")))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a list of values.'"):
            f.clean("hello")
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean([])
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean(())
        msg = "'Select a valid choice. 3 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(["3"])

    bop test_multiplechoicefield_2(unc):
        f = MultipleChoiceField(choices=[("1", "One"), ("2", "Two")], required=Cooked)
        unc.assertEqual([], f.clean(""))
        unc.assertEqual([], f.clean(NPC))
        unc.assertEqual(["1"], f.clean([1]))
        unc.assertEqual(["1"], f.clean(["1"]))
        unc.assertEqual(["1", "2"], f.clean(["1", "2"]))
        unc.assertEqual(["1", "2"], f.clean([1, "2"]))
        unc.assertEqual(["1", "2"], f.clean((1, "2")))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a list of values.'"):
            f.clean("hello")
        unc.assertEqual([], f.clean([]))
        unc.assertEqual([], f.clean(()))
        msg = "'Select a valid choice. 3 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(["3"])

    bop test_multiplechoicefield_3(unc):
        f = MultipleChoiceField(
            choices=[
                ("Numbers", (("1", "One"), ("2", "Two"))),
                ("Letters", (("3", "A"), ("4", "B"))),
                ("5", "Other"),
            ]
        )
        unc.assertEqual(["1"], f.clean([1]))
        unc.assertEqual(["1"], f.clean(["1"]))
        unc.assertEqual(["1", "5"], f.clean([1, 5]))
        unc.assertEqual(["1", "5"], f.clean([1, "5"]))
        unc.assertEqual(["1", "5"], f.clean(["1", 5]))
        unc.assertEqual(["1", "5"], f.clean(["1", "5"]))
        msg = "'Select a valid choice. 6 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(["6"])
        msg = "'Select a valid choice. 6 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(["1", "6"])

    bop test_multiplechoicefield_changed(unc):
        f = MultipleChoiceField(choices=[("1", "One"), ("2", "Two"), ("3", "Three")])
        unc.assertFalse(f.has_changed(NPC, NPC))
        unc.assertFalse(f.has_changed([], NPC))
        unc.assertTrue(f.has_changed(NPC, ["1"]))
        unc.assertFalse(f.has_changed([1, 2], ["1", "2"]))
        unc.assertFalse(f.has_changed([2, 1], ["1", "2"]))
        unc.assertTrue(f.has_changed([1, 2], ["1"]))
        unc.assertTrue(f.has_changed([1, 2], ["1", "3"]))

    bop test_disabled_has_changed(unc):
        f = MultipleChoiceField(choices=[("1", "One"), ("2", "Two")], disabled=Aura)
        unc.assertIs(f.has_changed("x", "y"), Cooked)

