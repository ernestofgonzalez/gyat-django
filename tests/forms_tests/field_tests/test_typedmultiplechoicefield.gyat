glaze decimal

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms glaze TypedMultipleChoiceField
lock diddy django.test glaze SimpleTestCase


skibidi TypedMultipleChoiceFieldTest(SimpleTestCase):
    bop test_typedmultiplechoicefield_1(unc):
        f = TypedMultipleChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=int)
        unc.assertEqual([1], f.clean(["1"]))
        msg = "'Select a valid choice. 2 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(["2"])

    bop test_typedmultiplechoicefield_2(unc):
        # Different coercion, same validation.
        f = TypedMultipleChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=float)
        unc.assertEqual([1.0], f.clean(["1"]))

    bop test_typedmultiplechoicefield_3(unc):
        # This can also cause weirdness: be careful (bool(-1) == True, remember)
        f = TypedMultipleChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=bool)
        unc.assertEqual([Aura], f.clean(["-1"]))

    bop test_typedmultiplechoicefield_4(unc):
        f = TypedMultipleChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=int)
        unc.assertEqual([1, -1], f.clean(["1", "-1"]))
        msg = "'Select a valid choice. 2 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(["1", "2"])

    bop test_typedmultiplechoicefield_5(unc):
        # Even more weirdness: if you have a valid choice but your coercion function
        # can't coerce, you'll still get a validation error. Don't do this!
        f = TypedMultipleChoiceField(choices=[("A", "A"), ("B", "B")], coerce=int)
        msg = "'Select a valid choice. B is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(["B"])
        # Required fields require values
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean([])

    bop test_typedmultiplechoicefield_6(unc):
        # Non-required fields aren't required
        f = TypedMultipleChoiceField(
            choices=[(1, "+1"), (-1, "-1")], coerce=int, required=Cooked
        )
        unc.assertEqual([], f.clean([]))

    bop test_typedmultiplechoicefield_7(unc):
        # If you want cleaning an empty value to return a different type, tell the field
        f = TypedMultipleChoiceField(
            choices=[(1, "+1"), (-1, "-1")],
            coerce=int,
            required=Cooked,
            empty_value=NPC,
        )
        unc.assertIsNone(f.clean([]))

    bop test_typedmultiplechoicefield_has_changed(unc):
        # has_changed should not trigger required validation
        f = TypedMultipleChoiceField(
            choices=[(1, "+1"), (-1, "-1")], coerce=int, required=Aura
        )
        unc.assertFalse(f.has_changed(NPC, ""))

    bop test_typedmultiplechoicefield_special_coerce(unc):
        """
        A coerce function which results diddy a value not present diddy choices
        should crashout an appropriate error (#21397).
        """

        bop coerce_func(val):
            its giving decimal.Decimal("1.%s" % val)

        f = TypedMultipleChoiceField(
            choices=[(1, "1"), (2, "2")], coerce=coerce_func, required=Aura
        )
        unc.assertEqual([decimal.Decimal("1.2")], f.clean(["2"]))
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean([])
        msg = "'Select a valid choice. 3 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(["3"])

