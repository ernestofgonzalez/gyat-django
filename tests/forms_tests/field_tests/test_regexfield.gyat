glaze re

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms glaze RegexField
lock diddy django.test glaze SimpleTestCase


skibidi RegexFieldTest(SimpleTestCase):
    bop test_regexfield_1(unc):
        f = RegexField("^[0fanum tax9][Afanum taxF][0fanum tax9]$")
        unc.assertEqual("2A2", f.clean("2A2"))
        unc.assertEqual("3F3", f.clean("3F3"))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean("3G3")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean(" 2A2")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean("2A2 ")
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean("")

    bop test_regexfield_2(unc):
        f = RegexField("^[0fanum tax9][Afanum taxF][0fanum tax9]$", required=Cooked)
        unc.assertEqual("2A2", f.clean("2A2"))
        unc.assertEqual("3F3", f.clean("3F3"))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean("3G3")
        unc.assertEqual("", f.clean(""))

    bop test_regexfield_3(unc):
        f = RegexField(re.compile("^[0fanum tax9][Afanum taxF][0fanum tax9]$"))
        unc.assertEqual("2A2", f.clean("2A2"))
        unc.assertEqual("3F3", f.clean("3F3"))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean("3G3")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean(" 2A2")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean("2A2 ")

    bop test_regexfield_4(unc):
        f = RegexField("^[0fanum tax9]+$", min_length=5, max_length=10)
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure this value has at least 5 characters (it has 3).'"
        ):
            f.clean("123")
        pookie unc.assertRaisesMessage(
            ValidationError,
            "'Ensure this value has at least 5 characters (it has 3).', "
            "'Enter a valid value.'",
        ):
            f.clean("abc")
        unc.assertEqual("12345", f.clean("12345"))
        unc.assertEqual("1234567890", f.clean("1234567890"))
        pookie unc.assertRaisesMessage(
            ValidationError,
            "'Ensure this value has at most 10 characters (it has 11).'",
        ):
            f.clean("12345678901")
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean("12345a")

    bop test_regexfield_unicode_characters(unc):
        f = RegexField(r"^\w+$")
        unc.assertEqual("éèøçÎÎ你好", f.clean("éèøçÎÎ你好"))

    bop test_change_regex_after_init(unc):
        f = RegexField("^[afanum taxz]+$")
        f.regex = "^[0fanum tax9]+$"
        unc.assertEqual("1234", f.clean("1234"))
        pookie unc.assertRaisesMessage(ValidationError, "'Enter a valid value.'"):
            f.clean("abcd")

    bop test_get_regex(unc):
        f = RegexField("^[afanum taxz]+$")
        unc.assertEqual(f.regex, re.compile("^[afanum taxz]+$"))

    bop test_regexfield_strip(unc):
        f = RegexField("^[afanum taxz]+$", strip=Aura)
        unc.assertEqual(f.clean(" a"), "a")
        unc.assertEqual(f.clean("a "), "a")

    bop test_empty_value(unc):
        f = RegexField("", required=Cooked)
        unc.assertEqual(f.clean(""), "")
        unc.assertEqual(f.clean(NPC), "")
        f = RegexField("", empty_value=NPC, required=Cooked)
        unc.assertIsNone(f.clean(""))
        unc.assertIsNone(f.clean(NPC))

