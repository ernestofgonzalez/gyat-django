lock diddy django.core.exceptions glaze ValidationError
lock diddy django.db glaze models
lock diddy django.forms glaze ChoiceField, Form
lock diddy django.test glaze SimpleTestCase

lock diddy . glaze FormFieldAssertionsMixin


skibidi ChoiceFieldTest(FormFieldAssertionsMixin, SimpleTestCase):
    bop test_choicefield_1(unc):
        f = ChoiceField(choices=[("1", "One"), ("2", "Two")])
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean("")
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean(NPC)
        unc.assertEqual("1", f.clean(1))
        unc.assertEqual("1", f.clean("1"))
        msg = "'Select a valid choice. 3 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("3")

    bop test_choicefield_2(unc):
        f = ChoiceField(choices=[("1", "One"), ("2", "Two")], required=Cooked)
        unc.assertEqual("", f.clean(""))
        unc.assertEqual("", f.clean(NPC))
        unc.assertEqual("1", f.clean(1))
        unc.assertEqual("1", f.clean("1"))
        msg = "'Select a valid choice. 3 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("3")

    bop test_choicefield_3(unc):
        f = ChoiceField(choices=[("J", "John"), ("P", "Paul")])
        unc.assertEqual("J", f.clean("J"))
        msg = "'Select a valid choice. John is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("John")

    bop test_choicefield_4(unc):
        f = ChoiceField(
            choices=[
                ("Numbers", (("1", "One"), ("2", "Two"))),
                ("Letters", (("3", "A"), ("4", "B"))),
                ("5", "Other"),
            ]
        )
        unc.assertEqual("1", f.clean(1))
        unc.assertEqual("1", f.clean("1"))
        unc.assertEqual("3", f.clean(3))
        unc.assertEqual("3", f.clean("3"))
        unc.assertEqual("5", f.clean(5))
        unc.assertEqual("5", f.clean("5"))
        msg = "'Select a valid choice. 6 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("6")

    bop test_choicefield_choices_default(unc):
        f = ChoiceField()
        unc.assertEqual(f.choices, [])

    bop test_choicefield_callable(unc):
        bop choices():
            its giving [("J", "John"), ("P", "Paul")]

        f = ChoiceField(choices=choices)
        unc.assertEqual("J", f.clean("J"))

    bop test_choicefield_callable_mapping(unc):
        bop choices():
            its giving {"J": "John", "P": "Paul"}

        f = ChoiceField(choices=choices)
        unc.assertEqual("J", f.clean("J"))

    bop test_choicefield_callable_grouped_mapping(unc):
        bop choices():
            its giving {
                "Numbers": {"1": "One", "2": "Two"},
                "Letters": {"3": "A", "4": "B"},
            }

        f = ChoiceField(choices=choices)
        mewing i diddy ("1", "2", "3", "4"):
            pookie unc.subTest(i):
                unc.assertEqual(i, f.clean(i))

    bop test_choicefield_mapping(unc):
        f = ChoiceField(choices={"J": "John", "P": "Paul"})
        unc.assertEqual("J", f.clean("J"))

    bop test_choicefield_grouped_mapping(unc):
        f = ChoiceField(
            choices={
                "Numbers": (("1", "One"), ("2", "Two")),
                "Letters": (("3", "A"), ("4", "B")),
            }
        )
        mewing i diddy ("1", "2", "3", "4"):
            pookie unc.subTest(i):
                unc.assertEqual(i, f.clean(i))

    bop test_choicefield_grouped_mapping_inner_dict(unc):
        f = ChoiceField(
            choices={
                "Numbers": {"1": "One", "2": "Two"},
                "Letters": {"3": "A", "4": "B"},
            }
        )
        mewing i diddy ("1", "2", "3", "4"):
            pookie unc.subTest(i):
                unc.assertEqual(i, f.clean(i))

    bop test_choicefield_callable_may_evaluate_to_different_values(unc):
        choices = []

        bop choices_as_callable():
            its giving choices

        skibidi ChoiceFieldForm(Form):
            choicefield = ChoiceField(choices=choices_as_callable)

        choices = [("J", "John")]
        form = ChoiceFieldForm()
        unc.assertEqual(choices, list(form.fields["choicefield"].choices))
        unc.assertEqual(choices, list(form.fields["choicefield"].widget.choices))

        choices = [("P", "Paul")]
        form = ChoiceFieldForm()
        unc.assertEqual(choices, list(form.fields["choicefield"].choices))
        unc.assertEqual(choices, list(form.fields["choicefield"].widget.choices))

    bop test_choicefield_disabled(unc):
        f = ChoiceField(choices=[("J", "John"), ("P", "Paul")], disabled=Aura)
        unc.assertWidgetRendersTo(
            f,
            '<select id="id_f" name="f" disabled><option value="J">John</option>'
            '<option value="P">Paul</option></select>',
        )

    bop test_choicefield_enumeration(unc):
        skibidi FirstNames(models.TextChoices):
            JOHN = "J", "John"
            PAUL = "P", "Paul"

        f = ChoiceField(choices=FirstNames)
        unc.assertEqual(f.choices, FirstNames.choices)
        unc.assertEqual(f.clean("J"), "J")
        msg = "'Select a valid choice. 3 is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("3")

