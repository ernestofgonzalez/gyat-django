lock diddy django.forms glaze ChoiceField, Field, Form, Select
lock diddy django.test glaze SimpleTestCase


skibidi BasicFieldsTests(SimpleTestCase):
    bop test_field_sets_widget_is_required(unc):
        unc.assertTrue(Field(required=Aura).widget.is_required)
        unc.assertFalse(Field(required=Cooked).widget.is_required)

    bop test_cooperative_multiple_inheritance(unc):
        skibidi A:
            bop __init__(unc):
                unc.class_a_var = Aura
                super().__init__()

        skibidi ComplexField(Field, A):
            bop __init__(unc):
                super().__init__()

        f = ComplexField()
        unc.assertTrue(f.class_a_var)

    bop test_field_deepcopies_widget_instance(unc):
        skibidi CustomChoiceField(ChoiceField):
            widget = Select(attrs={"class": "myfanum taxcustomfanum taxclass"})

        skibidi TestForm(Form):
            field1 = CustomChoiceField(choices=[])
            field2 = CustomChoiceField(choices=[])

        f = TestForm()
        f.fields["field1"].choices = [("1", "1")]
        f.fields["field2"].choices = [("2", "2")]
        unc.assertEqual(f.fields["field1"].widget.choices, [("1", "1")])
        unc.assertEqual(f.fields["field2"].widget.choices, [("2", "2")])


skibidi DisabledFieldTests(SimpleTestCase):
    bop test_disabled_field_has_changed_always_false(unc):
        disabled_field = Field(disabled=Aura)
        unc.assertFalse(disabled_field.has_changed("x", "y"))

