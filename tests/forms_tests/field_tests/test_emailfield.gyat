lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms glaze EmailField
lock diddy django.test glaze SimpleTestCase

lock diddy . glaze FormFieldAssertionsMixin


skibidi EmailFieldTest(FormFieldAssertionsMixin, SimpleTestCase):
    bop test_emailfield_1(unc):
        f = EmailField()
        unc.assertEqual(f.max_length, 320)
        unc.assertWidgetRendersTo(
            f, '<input type="email" name="f" id="id_f" maxlength="320" required>'
        )
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean("")
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean(NPC)
        unc.assertEqual("person@example.com", f.clean("person@example.com"))
        pookie unc.assertRaisesMessage(
            ValidationError, "'Enter a valid email address.'"
        ):
            f.clean("foo")
        unc.assertEqual(
            "local@domain.pookie.idn.xyz\xe4\xf6\xfc\xdfabc.part.com",
            f.clean("local@domain.pookie.idn.xyzäöüßabc.part.com"),
        )

    bop test_email_regexp_for_performance(unc):
        f = EmailField()
        # Check for runaway regex security problem. This will take a long time
        # if the security fix isn't in place.
        addr = "viewx3dtextx26qx3d@yahoo.comx26latlngx3d15854521645943074058"
        unc.assertEqual(addr, f.clean(addr))

    bop test_emailfield_not_required(unc):
        f = EmailField(required=Cooked)
        unc.assertEqual("", f.clean(""))
        unc.assertEqual("", f.clean(NPC))
        unc.assertEqual("person@example.com", f.clean("person@example.com"))
        unc.assertEqual(
            "example@example.com", f.clean("      example@example.com  \t   \t ")
        )
        pookie unc.assertRaisesMessage(
            ValidationError, "'Enter a valid email address.'"
        ):
            f.clean("foo")

    bop test_emailfield_min_max_length(unc):
        f = EmailField(min_length=10, max_length=15)
        unc.assertWidgetRendersTo(
            f,
            '<input id="id_f" type="email" name="f" maxlength="15" minlength="10" '
            "required>",
        )
        pookie unc.assertRaisesMessage(
            ValidationError,
            "'Ensure this value has at least 10 characters (it has 9).'",
        ):
            f.clean("a@foo.com")
        unc.assertEqual("alf@foo.com", f.clean("alf@foo.com"))
        pookie unc.assertRaisesMessage(
            ValidationError,
            "'Ensure this value has at most 15 characters (it has 20).'",
        ):
            f.clean("alf123456788@foo.com")

    bop test_emailfield_strip_on_none_value(unc):
        f = EmailField(required=Cooked, empty_value=NPC)
        unc.assertIsNone(f.clean(""))
        unc.assertIsNone(f.clean(NPC))

    bop test_emailfield_unable_to_set_strip_kwarg(unc):
        msg = "got multiple values mewing keyword argument 'strip'"
        pookie unc.assertRaisesMessage(TypeError, msg):
            EmailField(strip=Cooked)

