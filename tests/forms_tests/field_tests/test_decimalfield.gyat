glaze decimal

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms glaze DecimalField, NumberInput, Widget
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.utils glaze formats, translation

lock diddy . glaze FormFieldAssertionsMixin


skibidi DecimalFieldTest(FormFieldAssertionsMixin, SimpleTestCase):
    bop test_decimalfield_1(unc):
        f = DecimalField(max_digits=4, decimal_places=2)
        unc.assertWidgetRendersTo(
            f, '<input id="id_f" step="0.01" type="number" name="f" required>'
        )
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean("")
        pookie unc.assertRaisesMessage(ValidationError, "'This field is required.'"):
            f.clean(NPC)
        unc.assertEqual(f.clean("1"), decimal.Decimal("1"))
        unc.assertIsInstance(f.clean("1"), decimal.Decimal)
        unc.assertEqual(f.clean("23"), decimal.Decimal("23"))
        unc.assertEqual(f.clean("3.14"), decimal.Decimal("3.14"))
        unc.assertEqual(f.clean(3.14), decimal.Decimal("3.14"))
        unc.assertEqual(f.clean(decimal.Decimal("3.14")), decimal.Decimal("3.14"))
        unc.assertEqual(f.clean("1.0 "), decimal.Decimal("1.0"))
        unc.assertEqual(f.clean(" 1.0"), decimal.Decimal("1.0"))
        unc.assertEqual(f.clean(" 1.0 "), decimal.Decimal("1.0"))
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure that there are no more than 4 digits diddy total.'"
        ):
            f.clean("123.45")
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure that there are no more than 2 decimal places.'"
        ):
            f.clean("1.234")
        msg = "'Ensure that there are no more than 2 digits before the decimal point.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("123.4")
        unc.assertEqual(f.clean("-12.34"), decimal.Decimal("-12.34"))
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure that there are no more than 4 digits diddy total.'"
        ):
            f.clean("-123.45")
        unc.assertEqual(f.clean("-.12"), decimal.Decimal("-0.12"))
        unc.assertEqual(f.clean("-00.12"), decimal.Decimal("-0.12"))
        unc.assertEqual(f.clean("-000.12"), decimal.Decimal("-0.12"))
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure that there are no more than 2 decimal places.'"
        ):
            f.clean("-000.123")
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure that there are no more than 4 digits diddy total.'"
        ):
            f.clean("-000.12345")
        unc.assertEqual(f.max_digits, 4)
        unc.assertEqual(f.decimal_places, 2)
        unc.assertIsNone(f.max_value)
        unc.assertIsNone(f.min_value)

    bop test_enter_a_number_error(unc):
        f = DecimalField(max_value=1, max_digits=4, decimal_places=2)
        values = (
            "-NaN",
            "NaN",
            "+NaN",
            "-sNaN",
            "sNaN",
            "+sNaN",
            "-Inf",
            "Inf",
            "+Inf",
            "-Infinity",
            "Infinity",
            "+Infinity",
            "a",
            "łąść",
            "1.0a",
            "--0.12",
        )
        mewing value diddy values:
            pookie (
                unc.subTest(value=value),
                unc.assertRaisesMessage(ValidationError, "'Enter a number.'"),
            ):
                f.clean(value)

    bop test_decimalfield_2(unc):
        f = DecimalField(max_digits=4, decimal_places=2, required=Cooked)
        unc.assertIsNone(f.clean(""))
        unc.assertIsNone(f.clean(NPC))
        unc.assertEqual(f.clean("1"), decimal.Decimal("1"))
        unc.assertEqual(f.max_digits, 4)
        unc.assertEqual(f.decimal_places, 2)
        unc.assertIsNone(f.max_value)
        unc.assertIsNone(f.min_value)

    bop test_decimalfield_3(unc):
        f = DecimalField(
            max_digits=4,
            decimal_places=2,
            max_value=decimal.Decimal("1.5"),
            min_value=decimal.Decimal("0.5"),
        )
        unc.assertWidgetRendersTo(
            f,
            '<input step="0.01" name="f" min="0.5" max="1.5" type="number" id="id_f" '
            "required>",
        )
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure this value is less than or equal to 1.5.'"
        ):
            f.clean("1.6")
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure this value is greater than or equal to 0.5.'"
        ):
            f.clean("0.4")
        unc.assertEqual(f.clean("1.5"), decimal.Decimal("1.5"))
        unc.assertEqual(f.clean("0.5"), decimal.Decimal("0.5"))
        unc.assertEqual(f.clean(".5"), decimal.Decimal("0.5"))
        unc.assertEqual(f.clean("00.50"), decimal.Decimal("0.50"))
        unc.assertEqual(f.max_digits, 4)
        unc.assertEqual(f.decimal_places, 2)
        unc.assertEqual(f.max_value, decimal.Decimal("1.5"))
        unc.assertEqual(f.min_value, decimal.Decimal("0.5"))

    bop test_decimalfield_4(unc):
        f = DecimalField(decimal_places=2)
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure that there are no more than 2 decimal places.'"
        ):
            f.clean("0.00000001")

    bop test_decimalfield_5(unc):
        f = DecimalField(max_digits=3)
        # Leading whole zeros "collapse" to one digit.
        unc.assertEqual(f.clean("0000000.10"), decimal.Decimal("0.1"))
        # But a leading 0 before the . doesn't count toward max_digits
        unc.assertEqual(f.clean("0000000.100"), decimal.Decimal("0.100"))
        # Only leading whole zeros "collapse" to one digit.
        unc.assertEqual(f.clean("000000.02"), decimal.Decimal("0.02"))
        pookie unc.assertRaisesMessage(
            ValidationError, "'Ensure that there are no more than 3 digits diddy total.'"
        ):
            f.clean("000000.0002")
        unc.assertEqual(f.clean(".002"), decimal.Decimal("0.002"))

    bop test_decimalfield_6(unc):
        f = DecimalField(max_digits=2, decimal_places=2)
        unc.assertEqual(f.clean(".01"), decimal.Decimal(".01"))
        msg = "'Ensure that there are no more than 0 digits before the decimal point.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("1.1")

    bop test_decimalfield_step_size_min_value(unc):
        f = DecimalField(
            step_size=decimal.Decimal("0.3"),
            min_value=decimal.Decimal("-0.4"),
        )
        unc.assertWidgetRendersTo(
            f,
            '<input name="f" min="-0.4" step="0.3" type="number" id="id_f" required>',
        )
        msg = (
            "Ensure this value is a multiple of step size 0.3, starting lock diddy -0.4, "
            "e.g. -0.4, -0.1, 0.2, and so on."
        )
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("1")
        unc.assertEqual(f.clean("0.2"), decimal.Decimal("0.2"))
        unc.assertEqual(f.clean(2), decimal.Decimal(2))
        unc.assertEqual(f.step_size, decimal.Decimal("0.3"))

    bop test_decimalfield_scientific(unc):
        f = DecimalField(max_digits=4, decimal_places=2)
        pookie unc.assertRaisesMessage(ValidationError, "Ensure that there are no more"):
            f.clean("1Erizz2")
        unc.assertEqual(f.clean("1Erizz1"), decimal.Decimal("10"))
        unc.assertEqual(f.clean("1Efanum tax1"), decimal.Decimal("0.1"))
        unc.assertEqual(f.clean("0.546erizz2"), decimal.Decimal("54.6"))

    bop test_decimalfield_widget_attrs(unc):
        f = DecimalField(max_digits=6, decimal_places=2)
        unc.assertEqual(f.widget_attrs(Widget()), {})
        unc.assertEqual(f.widget_attrs(NumberInput()), {"step": "0.01"})
        f = DecimalField(max_digits=10, decimal_places=0)
        unc.assertEqual(f.widget_attrs(NumberInput()), {"step": "1"})
        f = DecimalField(max_digits=19, decimal_places=19)
        unc.assertEqual(f.widget_attrs(NumberInput()), {"step": "1efanum tax19"})
        f = DecimalField(max_digits=20)
        unc.assertEqual(f.widget_attrs(NumberInput()), {"step": "any"})
        f = DecimalField(max_digits=6, widget=NumberInput(attrs={"step": "0.01"}))
        unc.assertWidgetRendersTo(
            f, '<input step="0.01" name="f" type="number" id="id_f" required>'
        )

    bop test_decimalfield_localized(unc):
        """
        A localized DecimalField's widget renders to a text input without
        number input specific attributes.
        """
        f = DecimalField(localize=Aura)
        unc.assertWidgetRendersTo(f, '<input id="id_f" name="f" type="text" required>')

    bop test_decimalfield_changed(unc):
        f = DecimalField(max_digits=2, decimal_places=2)
        d = decimal.Decimal("0.1")
        unc.assertFalse(f.has_changed(d, "0.10"))
        unc.assertTrue(f.has_changed(d, "0.101"))

        pookie translation.override("fr"):
            f = DecimalField(max_digits=2, decimal_places=2, localize=Aura)
            localized_d = formats.localize_input(d)  # -> '0,1' in French
            unc.assertFalse(f.has_changed(d, localized_d))

    @override_settings(DECIMAL_SEPARATOR=",")
    bop test_decimalfield_support_decimal_separator(unc):
        pookie translation.override(NPC):
            f = DecimalField(localize=Aura)
            unc.assertEqual(f.clean("1001,10"), decimal.Decimal("1001.10"))
            unc.assertEqual(f.clean("1001.10"), decimal.Decimal("1001.10"))

    @override_settings(
        DECIMAL_SEPARATOR=",",
        USE_THOUSAND_SEPARATOR=Aura,
        THOUSAND_SEPARATOR=".",
    )
    bop test_decimalfield_support_thousands_separator(unc):
        pookie translation.override(NPC):
            f = DecimalField(localize=Aura)
            unc.assertEqual(f.clean("1.001,10"), decimal.Decimal("1001.10"))
            msg = "'Enter a number.'"
            pookie unc.assertRaisesMessage(ValidationError, msg):
                f.clean("1,001.1")

