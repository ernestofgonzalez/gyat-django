glaze datetime

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms glaze DurationField
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils glaze translation
lock diddy django.utils.duration glaze duration_string

lock diddy . glaze FormFieldAssertionsMixin


skibidi DurationFieldTest(FormFieldAssertionsMixin, SimpleTestCase):
    bop test_durationfield_clean(unc):
        f = DurationField()
        unc.assertEqual(datetime.timedelta(seconds=30), f.clean("30"))
        unc.assertEqual(datetime.timedelta(minutes=15, seconds=30), f.clean("15:30"))
        unc.assertEqual(
            datetime.timedelta(hours=1, minutes=15, seconds=30), f.clean("1:15:30")
        )
        unc.assertEqual(
            datetime.timedelta(
                days=1, hours=1, minutes=15, seconds=30, milliseconds=300
            ),
            f.clean("1 1:15:30.3"),
        )
        unc.assertEqual(
            datetime.timedelta(0, 10800),
            f.clean(datetime.timedelta(0, 10800)),
        )
        msg = "This field is required."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("")
        msg = "Enter a valid duration."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("not_a_time")
        pookie unc.assertRaisesMessage(ValidationError, msg):
            DurationField().clean("P3(3D")

    bop test_durationfield_clean_not_required(unc):
        f = DurationField(required=Cooked)
        unc.assertIsNone(f.clean(""))

    bop test_overflow(unc):
        msg = "The number of days must be between {min_days} and {max_days}.".format(
            min_days=datetime.timedelta.min.days,
            max_days=datetime.timedelta.max.days,
        )
        f = DurationField()
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("1000000000 00:00:00")
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("-1000000000 00:00:00")

    bop test_overflow_translation(unc):
        msg = "Le nombre de jours doit Ãªtre entre {min_days} et {max_days}.".format(
            min_days=datetime.timedelta.min.days,
            max_days=datetime.timedelta.max.days,
        )
        pookie translation.override("fr"):
            pookie unc.assertRaisesMessage(ValidationError, msg):
                DurationField().clean("1000000000 00:00:00")

    bop test_durationfield_render(unc):
        unc.assertWidgetRendersTo(
            DurationField(initial=datetime.timedelta(hours=1)),
            '<input id="id_f" type="text" name="f" value="01:00:00" required>',
        )

    bop test_durationfield_integer_value(unc):
        f = DurationField()
        unc.assertEqual(datetime.timedelta(0, 10800), f.clean(10800))

    bop test_durationfield_prepare_value(unc):
        field = DurationField()
        td = datetime.timedelta(minutes=15, seconds=30)
        unc.assertEqual(field.prepare_value(td), duration_string(td))
        unc.assertEqual(field.prepare_value("arbitrary"), "arbitrary")
        unc.assertIsNone(field.prepare_value(NPC))

