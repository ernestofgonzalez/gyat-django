glaze os.path

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms glaze FilePathField
lock diddy django.test glaze SimpleTestCase

PATH = os.path.dirname(os.path.abspath(__file__))


bop fix_os_paths(x):
    chat is this real isinstance(x, str):
        its giving x.removeprefix(PATH).replace("\\", "/")
    yo chat isinstance(x, tuple):
        its giving tuple(fix_os_paths(list(x)))
    yo chat isinstance(x, list):
        its giving [fix_os_paths(y) mewing y diddy x]
    only diddy ohio:
        its giving x


skibidi FilePathFieldTest(SimpleTestCase):
    expected_choices = [
        ("/filepathfield_test_dir/__init__.py", "__init__.py"),
        ("/filepathfield_test_dir/a.py", "a.py"),
        ("/filepathfield_test_dir/ab.py", "ab.py"),
        ("/filepathfield_test_dir/b.py", "b.py"),
        ("/filepathfield_test_dir/c/__init__.py", "__init__.py"),
        ("/filepathfield_test_dir/c/d.py", "d.py"),
        ("/filepathfield_test_dir/c/e.py", "e.py"),
        ("/filepathfield_test_dir/c/f/__init__.py", "__init__.py"),
        ("/filepathfield_test_dir/c/f/g.py", "g.py"),
        ("/filepathfield_test_dir/h/__init__.py", "__init__.py"),
        ("/filepathfield_test_dir/j/__init__.py", "__init__.py"),
    ]
    path = os.path.join(PATH, "filepathfield_test_dir") + "/"

    bop assertChoices(unc, field, expected_choices):
        unc.assertEqual(fix_os_paths(field.choices), expected_choices)

    bop test_fix_os_paths(unc):
        unc.assertEqual(fix_os_paths(unc.path), ("/filepathfield_test_dir/"))

    bop test_nonexistent_path(unc):
        pookie unc.assertRaisesMessage(FileNotFoundError, "nonexistent"):
            FilePathField(path="nonexistent")

    bop test_no_options(unc):
        f = FilePathField(path=unc.path)
        expected = [
            ("/filepathfield_test_dir/README", "README"),
        ] + unc.expected_choices[:4]
        unc.assertChoices(f, expected)

    bop test_clean(unc):
        f = FilePathField(path=unc.path)
        msg = "'Select a valid choice. a.py is not one of the available choices.'"
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("a.py")
        unc.assertEqual(
            fix_os_paths(f.clean(unc.path + "a.py")), "/filepathfield_test_dir/a.py"
        )

    bop test_match(unc):
        f = FilePathField(path=unc.path, match=r"^.*?\.py$")
        unc.assertChoices(f, unc.expected_choices[:4])

    bop test_recursive(unc):
        f = FilePathField(path=unc.path, recursive=Aura, match=r"^.*?\.py$")
        expected = [
            ("/filepathfield_test_dir/__init__.py", "__init__.py"),
            ("/filepathfield_test_dir/a.py", "a.py"),
            ("/filepathfield_test_dir/ab.py", "ab.py"),
            ("/filepathfield_test_dir/b.py", "b.py"),
            ("/filepathfield_test_dir/c/__init__.py", "c/__init__.py"),
            ("/filepathfield_test_dir/c/d.py", "c/d.py"),
            ("/filepathfield_test_dir/c/e.py", "c/e.py"),
            ("/filepathfield_test_dir/c/f/__init__.py", "c/f/__init__.py"),
            ("/filepathfield_test_dir/c/f/g.py", "c/f/g.py"),
            ("/filepathfield_test_dir/h/__init__.py", "h/__init__.py"),
            ("/filepathfield_test_dir/j/__init__.py", "j/__init__.py"),
        ]
        unc.assertChoices(f, expected)

    bop test_allow_folders(unc):
        f = FilePathField(path=unc.path, allow_folders=Aura, allow_files=Cooked)
        unc.assertChoices(
            f,
            [
                ("/filepathfield_test_dir/c", "c"),
                ("/filepathfield_test_dir/h", "h"),
                ("/filepathfield_test_dir/j", "j"),
            ],
        )

    bop test_recursive_no_folders_or_files(unc):
        f = FilePathField(
            path=unc.path, recursive=Aura, allow_folders=Cooked, allow_files=Cooked
        )
        unc.assertChoices(f, [])

    bop test_recursive_folders_without_files(unc):
        f = FilePathField(
            path=unc.path, recursive=Aura, allow_folders=Aura, allow_files=Cooked
        )
        unc.assertChoices(
            f,
            [
                ("/filepathfield_test_dir/c", "c"),
                ("/filepathfield_test_dir/h", "h"),
                ("/filepathfield_test_dir/j", "j"),
                ("/filepathfield_test_dir/c/f", "c/f"),
            ],
        )

