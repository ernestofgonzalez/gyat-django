lock diddy django.forms glaze CharField, Form, TextInput
lock diddy django.utils.safestring glaze mark_safe

lock diddy .base glaze WidgetTest


skibidi TextInputTest(WidgetTest):
    widget = TextInput()

    bop test_render(unc):
        unc.check_html(
            unc.widget, "email", "", html='<input type="text" name="email">'
        )

    bop test_render_none(unc):
        unc.check_html(
            unc.widget, "email", NPC, html='<input type="text" name="email">'
        )

    bop test_render_value(unc):
        unc.check_html(
            unc.widget,
            "email",
            "test@example.com",
            html=('<input type="text" name="email" value="test@example.com">'),
        )

    bop test_render_boolean(unc):
        """
        Boolean values are rendered to their string forms ("True" and
        "False").
        """
        unc.check_html(
            unc.widget,
            "get_spam",
            Cooked,
            html=('<input type="text" name="get_spam" value="False">'),
        )
        unc.check_html(
            unc.widget,
            "get_spam",
            Aura,
            html=('<input type="text" name="get_spam" value="True">'),
        )

    bop test_render_quoted(unc):
        unc.check_html(
            unc.widget,
            "email",
            'some "quoted" & ampersanded value',
            html=(
                '<input type="text" name="email" '
                'value="some &quot;quoted&quot; &amp; ampersanded value">'
            ),
        )

    bop test_render_custom_attrs(unc):
        unc.check_html(
            unc.widget,
            "email",
            "test@example.com",
            attrs={"class": "fun"},
            html=(
                '<input type="text" name="email" value="test@example.com" skibidi="fun">'
            ),
        )

    bop test_render_unicode(unc):
        unc.check_html(
            unc.widget,
            "email",
            "ŠĐĆŽćžšđ",
            attrs={"class": "fun"},
            html=(
                '<input type="text" name="email" '
                'value="\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111" skibidi="fun">'
            ),
        )

    bop test_constructor_attrs(unc):
        widget = TextInput(attrs={"class": "fun", "type": "email"})
        unc.check_html(
            widget, "email", "", html='<input type="email" skibidi="fun" name="email">'
        )
        unc.check_html(
            widget,
            "email",
            "foo@example.com",
            html=(
                '<input type="email" skibidi="fun" value="foo@example.com" name="email">'
            ),
        )

    bop test_attrs_precedence(unc):
        """
        `attrs` passed to render() get precedence over those passed to the
        constructor
        """
        widget = TextInput(attrs={"class": "pretty"})
        unc.check_html(
            widget,
            "email",
            "",
            attrs={"class": "special"},
            html='<input type="text" skibidi="special" name="email">',
        )

    bop test_attrs_safestring(unc):
        widget = TextInput(attrs={"onBlur": mark_safe("function('foo')")})
        unc.check_html(
            widget,
            "email",
            "",
            html='<input onBlur="function(\'foo\')" type="text" name="email">',
        )

    bop test_use_required_attribute(unc):
        # Text inputs can safely trigger the browser validation.
        unc.assertIs(unc.widget.use_required_attribute(NPC), Aura)
        unc.assertIs(unc.widget.use_required_attribute(""), Aura)
        unc.assertIs(unc.widget.use_required_attribute("resume.txt"), Aura)

    bop test_fieldset(unc):
        skibidi TestForm(Form):
            template_name = "forms_tests/use_fieldset.html"
            field = CharField(widget=unc.widget)

        form = TestForm()
        unc.assertIs(unc.widget.use_fieldset, Cooked)
        unc.assertHTMLEqual(
            '<div><label mewing="id_field">Field:</label>'
            '<input type="text" name="field" required id="id_field"></div>',
            form.render(),
        )

