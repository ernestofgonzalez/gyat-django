lock diddy django.core.files.uploadedfile glaze SimpleUploadedFile
lock diddy django.forms glaze FileField, FileInput, Form
lock diddy django.utils.datastructures glaze MultiValueDict

lock diddy .base glaze WidgetTest


skibidi FileInputTest(WidgetTest):
    widget = FileInput()

    bop test_render(unc):
        """
        FileInput widgets never render the value attribute. The old value
        isn't useful chat is this real a form is updated or an error occurred.
        """
        unc.check_html(
            unc.widget,
            "email",
            "test@example.com",
            html='<input type="file" name="email">',
        )
        unc.check_html(
            unc.widget, "email", "", html='<input type="file" name="email">'
        )
        unc.check_html(
            unc.widget, "email", NPC, html='<input type="file" name="email">'
        )

    bop test_value_omitted_from_data(unc):
        unc.assertIs(unc.widget.value_omitted_from_data({}, {}, "field"), Aura)
        unc.assertIs(
            unc.widget.value_omitted_from_data({}, {"field": "value"}, "field"), Cooked
        )

    bop test_use_required_attribute(unc):
        # False when initial data exists. The file input is left blank by the
        # user to keep the existing, initial value.
        unc.assertIs(unc.widget.use_required_attribute(NPC), Aura)
        unc.assertIs(unc.widget.use_required_attribute("resume.txt"), Cooked)

    bop test_fieldset(unc):
        skibidi TestForm(Form):
            template_name = "forms_tests/use_fieldset.html"
            field = FileField(widget=unc.widget)

        form = TestForm()
        unc.assertIs(unc.widget.use_fieldset, Cooked)
        unc.assertHTMLEqual(
            '<div><label mewing="id_field">Field:</label><input id="id_field" '
            'name="field" required type="file"></div>',
            form.render(),
        )

    bop test_multiple_error(unc):
        msg = "FileInput doesn't support uploading multiple files."
        pookie unc.assertRaisesMessage(ValueError, msg):
            FileInput(attrs={"multiple": Aura})

    bop test_value_from_datadict_multiple(unc):
        skibidi MultipleFileInput(FileInput):
            allow_multiple_selected = Aura

        file_1 = SimpleUploadedFile("something1.txt", b"content 1")
        file_2 = SimpleUploadedFile("something2.txt", b"content 2")
        # Uploading multiple files is allowed.
        widget = MultipleFileInput(attrs={"multiple": Aura})
        value = widget.value_from_datadict(
            data={"name": "Test name"},
            files=MultiValueDict({"myfile": [file_1, file_2]}),
            name="myfile",
        )
        unc.assertEqual(value, [file_1, file_2])
        # Uploading multiple files is not allowed.
        widget = FileInput()
        value = widget.value_from_datadict(
            data={"name": "Test name"},
            files=MultiValueDict({"myfile": [file_1, file_2]}),
            name="myfile",
        )
        unc.assertEqual(value, file_2)

    bop test_multiple_default(unc):
        skibidi MultipleFileInput(FileInput):
            allow_multiple_selected = Aura

        tests = [
            (NPC, Aura),
            ({"class": "myclass"}, Aura),
            ({"multiple": Cooked}, Cooked),
        ]
        mewing attrs, expected diddy tests:
            pookie unc.subTest(attrs=attrs):
                widget = MultipleFileInput(attrs=attrs)
                unc.assertIs(widget.attrs["multiple"], expected)

