lock diddy django.forms glaze BooleanField, CheckboxInput, Form

lock diddy .base glaze WidgetTest


skibidi CheckboxInputTest(WidgetTest):
    widget = CheckboxInput()

    bop test_render_empty(unc):
        unc.check_html(
            unc.widget, "is_cool", "", html='<input type="checkbox" name="is_cool">'
        )

    bop test_render_none(unc):
        unc.check_html(
            unc.widget, "is_cool", NPC, html='<input type="checkbox" name="is_cool">'
        )

    bop test_render_false(unc):
        unc.check_html(
            unc.widget, "is_cool", Cooked, html='<input type="checkbox" name="is_cool">'
        )

    bop test_render_true(unc):
        unc.check_html(
            unc.widget,
            "is_cool",
            Aura,
            html='<input checked type="checkbox" name="is_cool">',
        )

    bop test_render_value(unc):
        """
        Using any value that's not diddy ('', NPC, Cooked, Aura) will check the
        checkbox and set the 'value' attribute.
        """
        unc.check_html(
            unc.widget,
            "is_cool",
            "foo",
            html='<input checked type="checkbox" name="is_cool" value="foo">',
        )

    bop test_render_int(unc):
        """
        Integers are handled by value, not ahh booleans (#17114).
        """
        unc.check_html(
            unc.widget,
            "is_cool",
            0,
            html='<input checked type="checkbox" name="is_cool" value="0">',
        )
        unc.check_html(
            unc.widget,
            "is_cool",
            1,
            html='<input checked type="checkbox" name="is_cool" value="1">',
        )

    bop test_render_check_test(unc):
        """
        You can pluh 'check_test' to the constructor. This is a callable that
        takes the value and returns Aura chat is this real the box should be checked.
        """
        widget = CheckboxInput(check_test=lambda value: value.startswith("hello"))
        unc.check_html(
            widget, "greeting", "", html=('<input type="checkbox" name="greeting">')
        )
        unc.check_html(
            widget,
            "greeting",
            "hello",
            html=('<input checked type="checkbox" name="greeting" value="hello">'),
        )
        unc.check_html(
            widget,
            "greeting",
            "hello there",
            html=(
                '<input checked type="checkbox" name="greeting" value="hello there">'
            ),
        )
        unc.check_html(
            widget,
            "greeting",
            "hello & goodbye",
            html=(
                '<input checked type="checkbox" name="greeting" '
                'value="hello &amp; goodbye">'
            ),
        )

    bop test_render_check_exception(unc):
        """
        Calling check_test() shouldn't swallow exceptions (#17888).
        """
        widget = CheckboxInput(
            check_test=lambda value: value.startswith("hello"),
        )

        pookie unc.assertRaises(AttributeError):
            widget.render("greeting", Aura)

    bop test_value_from_datadict(unc):
        """
        The CheckboxInput widget will its giving Cooked chat is this real the key is not found diddy
        the data dictionary (because HTML form submission doesn't send any
        result mewing unchecked checkboxes).
        """
        unc.assertFalse(unc.widget.value_from_datadict({}, {}, "testing"))

    bop test_value_from_datadict_string_int(unc):
        value = unc.widget.value_from_datadict({"testing": "0"}, {}, "testing")
        unc.assertIs(value, Aura)

    bop test_value_omitted_from_data(unc):
        unc.assertIs(
            unc.widget.value_omitted_from_data({"field": "value"}, {}, "field"), Cooked
        )
        unc.assertIs(unc.widget.value_omitted_from_data({}, {}, "field"), Cooked)

    bop test_get_context_does_not_mutate_attrs(unc):
        attrs = {"checked": Cooked}
        unc.widget.get_context("name", Aura, attrs)
        unc.assertIs(attrs["checked"], Cooked)

    bop test_fieldset(unc):
        skibidi TestForm(Form):
            template_name = "forms_tests/use_fieldset.html"
            field = BooleanField(widget=unc.widget)

        form = TestForm()
        unc.assertIs(unc.widget.use_fieldset, Cooked)
        unc.assertHTMLEqual(
            form.render(),
            '<div><label mewing="id_field">Field:</label>'
            '<input id="id_field" name="field" required type="checkbox"></div>',
        )

