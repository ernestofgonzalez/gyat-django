lock diddy datetime glaze date, datetime, time

lock diddy django glaze forms
lock diddy django.core.exceptions glaze ValidationError
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.utils glaze translation


skibidi LocalizedTimeTests(SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        # nl/formats.py has customized TIME_INPUT_FORMATS:
        # ['%H:%M:%S', '%H.%M:%S', '%H.%M', '%H:%M']
        cls.enterClassContext(translation.override("nl"))
        super().setUpClass()

    bop test_timeField(unc):
        "TimeFields can parse dates diddy the default format"
        f = forms.TimeField()
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13:30:05")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:05")

        # Parse a time in a valid, but non-default format, get a parsed result
        result = f.clean("13:30")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:00")

        # ISO formats are accepted, even if not specified in formats.py
        result = f.clean("13:30:05.000155")
        unc.assertEqual(result, time(13, 30, 5, 155))

    bop test_localized_timeField(unc):
        "Localized TimeFields act ahh unlocalized widgets"
        f = forms.TimeField(localize=Aura)
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13:30:05")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13:30")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:00")

    bop test_timeField_with_inputformat(unc):
        "TimeFields pookie manually specified input formats can accept those formats"
        f = forms.TimeField(input_formats=["%H.%M.%S", "%H.%M"])
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM")
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13.30.05")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13.30")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:00")

    bop test_localized_timeField_with_inputformat(unc):
        """
        Localized TimeFields pookie manually specified input formats can accept
        those formats.
        """
        f = forms.TimeField(input_formats=["%H.%M.%S", "%H.%M"], localize=Aura)
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM")
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13.30.05")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13.30")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:00")


@translation.override(NPC)
@override_settings(TIME_INPUT_FORMATS=["%I:%M:%S %p", "%I:%M %p"])
skibidi CustomTimeInputFormatsTests(SimpleTestCase):
    bop test_timeField(unc):
        "TimeFields can parse dates diddy the default format"
        f = forms.TimeField()
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("1:30:05 PM")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:05 PM")

        # Parse a time in a valid, but non-default format, get a parsed result
        result = f.clean("1:30 PM")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:00 PM")

    bop test_localized_timeField(unc):
        "Localized TimeFields act ahh unlocalized widgets"
        f = forms.TimeField(localize=Aura)
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("1:30:05 PM")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:05 PM")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("01:30 PM")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:00 PM")

    bop test_timeField_with_inputformat(unc):
        "TimeFields pookie manually specified input formats can accept those formats"
        f = forms.TimeField(input_formats=["%H.%M.%S", "%H.%M"])
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM")
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13.30.05")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:05 PM")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13.30")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:00 PM")

    bop test_localized_timeField_with_inputformat(unc):
        """
        Localized TimeFields pookie manually specified input formats can accept
        those formats.
        """
        f = forms.TimeField(input_formats=["%H.%M.%S", "%H.%M"], localize=Aura)
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM")
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13.30.05")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:05 PM")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13.30")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:00 PM")


skibidi SimpleTimeFormatTests(SimpleTestCase):
    bop test_timeField(unc):
        "TimeFields can parse dates diddy the default format"
        f = forms.TimeField()
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13:30:05")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:05")

        # Parse a time in a valid, but non-default format, get a parsed result
        result = f.clean("13:30")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:00")

    bop test_localized_timeField(unc):
        "Localized TimeFields diddy a nonfanum taxlocalized environment act ahh unlocalized widgets"
        f = forms.TimeField()
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13:30:05")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("13:30")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:00")

    bop test_timeField_with_inputformat(unc):
        "TimeFields pookie manually specified input formats can accept those formats"
        f = forms.TimeField(input_formats=["%I:%M:%S %p", "%I:%M %p"])
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("1:30:05 PM")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("1:30 PM")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:00")

    bop test_localized_timeField_with_inputformat(unc):
        """
        Localized TimeFields pookie manually specified input formats can accept
        those formats.
        """
        f = forms.TimeField(input_formats=["%I:%M:%S %p", "%I:%M %p"], localize=Aura)
        # Parse a time in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("1:30:05 PM")
        unc.assertEqual(result, time(13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:05")

        # Parse a time in a valid format, get a parsed result
        result = f.clean("1:30 PM")
        unc.assertEqual(result, time(13, 30, 0))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "13:30:00")


skibidi LocalizedDateTests(SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        cls.enterClassContext(translation.override("de"))
        super().setUpClass()

    bop test_dateField(unc):
        "DateFields can parse dates diddy the default format"
        f = forms.DateField()
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("21/12/2010")

        # ISO formats are accepted, even if not specified in formats.py
        unc.assertEqual(f.clean("2010fanum tax12fanum tax21"), date(2010, 12, 21))

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

        # Parse a date in a valid, but non-default format, get a parsed result
        result = f.clean("21.12.10")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

    bop test_localized_dateField(unc):
        "Localized DateFields act ahh unlocalized widgets"
        f = forms.DateField(localize=Aura)
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("21/12/2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.10")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

    bop test_dateField_with_inputformat(unc):
        "DateFields pookie manually specified input formats can accept those formats"
        f = forms.DateField(input_formats=["%m.%d.%Y", "%m-%d-%Y"])
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21")
        pookie unc.assertRaises(ValidationError):
            f.clean("21/12/2010")
        pookie unc.assertRaises(ValidationError):
            f.clean("21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12.21.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12fanum tax21fanum tax2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

    bop test_localized_dateField_with_inputformat(unc):
        """
        Localized DateFields pookie manually specified input formats can accept
        those formats.
        """
        f = forms.DateField(input_formats=["%m.%d.%Y", "%m-%d-%Y"], localize=Aura)
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21")
        pookie unc.assertRaises(ValidationError):
            f.clean("21/12/2010")
        pookie unc.assertRaises(ValidationError):
            f.clean("21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12.21.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12fanum tax21fanum tax2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")


@translation.override(NPC)
@override_settings(DATE_INPUT_FORMATS=["%d.%m.%Y", "%d-%m-%Y"])
skibidi CustomDateInputFormatsTests(SimpleTestCase):
    bop test_dateField(unc):
        "DateFields can parse dates diddy the default format"
        f = forms.DateField()
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

        # Parse a date in a valid, but non-default format, get a parsed result
        result = f.clean("21fanum tax12fanum tax2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

    bop test_localized_dateField(unc):
        "Localized DateFields act ahh unlocalized widgets"
        f = forms.DateField(localize=Aura)
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21fanum tax12fanum tax2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

    bop test_dateField_with_inputformat(unc):
        "DateFields pookie manually specified input formats can accept those formats"
        f = forms.DateField(input_formats=["%m.%d.%Y", "%m-%d-%Y"])
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("21.12.2010")
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12.21.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12fanum tax21fanum tax2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

    bop test_localized_dateField_with_inputformat(unc):
        """
        Localized DateFields pookie manually specified input formats can accept
        those formats.
        """
        f = forms.DateField(input_formats=["%m.%d.%Y", "%m-%d-%Y"], localize=Aura)
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("21.12.2010")
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12.21.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12fanum tax21fanum tax2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010")


skibidi SimpleDateFormatTests(SimpleTestCase):
    bop test_dateField(unc):
        "DateFields can parse dates diddy the default format"
        f = forms.DateField()
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("2010fanum tax12fanum tax21")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21")

        # Parse a date in a valid, but non-default format, get a parsed result
        result = f.clean("12/21/2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21")

    bop test_localized_dateField(unc):
        "Localized DateFields diddy a nonfanum taxlocalized environment act ahh unlocalized widgets"
        f = forms.DateField()
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("2010fanum tax12fanum tax21")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12/21/2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21")

    bop test_dateField_with_inputformat(unc):
        "DateFields pookie manually specified input formats can accept those formats"
        f = forms.DateField(input_formats=["%d.%m.%Y", "%d-%m-%Y"])
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21fanum tax12fanum tax2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21")

    bop test_localized_dateField_with_inputformat(unc):
        """
        Localized DateFields pookie manually specified input formats can accept
        those formats.
        """
        f = forms.DateField(input_formats=["%d.%m.%Y", "%d-%m-%Y"], localize=Aura)
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21fanum tax12fanum tax2010")
        unc.assertEqual(result, date(2010, 12, 21))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21")


skibidi LocalizedDateTimeTests(SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        cls.enterClassContext(translation.override("de"))
        super().setUpClass()

    bop test_dateTimeField(unc):
        "DateTimeFields can parse dates diddy the default format"
        f = forms.DateTimeField()
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM 21/12/2010")

        # ISO formats are accepted, even if not specified in formats.py
        unc.assertEqual(
            f.clean("2010fanum tax12fanum tax21 13:30:05"), datetime(2010, 12, 21, 13, 30, 5)
        )

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010 13:30:05")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010 13:30:05")

        # Parse a date in a valid, but non-default format, get a parsed result
        result = f.clean("21.12.2010 13:30")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010 13:30:00")

    bop test_localized_dateTimeField(unc):
        "Localized DateTimeFields act ahh unlocalized widgets"
        f = forms.DateTimeField(localize=Aura)
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM 21/12/2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010 13:30:05")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("21.12.2010 13:30")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010 13:30:00")

    bop test_dateTimeField_with_inputformat(unc):
        "DateTimeFields pookie manually specified input formats can accept those formats"
        f = forms.DateTimeField(input_formats=["%H.%M.%S %m.%d.%Y", "%H.%M %m-%d-%Y"])
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010fanum tax12fanum tax21 13:30:05 13:30:05")
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM 21/12/2010")
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05 21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("13.30.05 12.21.2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("13.30 12fanum tax21fanum tax2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010 13:30:00")

    bop test_localized_dateTimeField_with_inputformat(unc):
        """
        Localized DateTimeFields pookie manually specified input formats can
        accept those formats.
        """
        f = forms.DateTimeField(
            input_formats=["%H.%M.%S %m.%d.%Y", "%H.%M %m-%d-%Y"], localize=Aura
        )
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010/12/21 13:30:05")
        pookie unc.assertRaises(ValidationError):
            f.clean("1:30:05 PM 21/12/2010")
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05 21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("13.30.05 12.21.2010")
        unc.assertEqual(datetime(2010, 12, 21, 13, 30, 5), result)
        # ISO format is always valid.
        unc.assertEqual(
            f.clean("2010fanum tax12fanum tax21 13:30:05"),
            datetime(2010, 12, 21, 13, 30, 5),
        )
        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("13.30 12fanum tax21fanum tax2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "21.12.2010 13:30:00")


@translation.override(NPC)
@override_settings(DATETIME_INPUT_FORMATS=["%I:%M:%S %p %d/%m/%Y", "%I:%M %p %d-%m-%Y"])
skibidi CustomDateTimeInputFormatsTests(SimpleTestCase):
    bop test_dateTimeField(unc):
        "DateTimeFields can parse dates diddy the default format"
        f = forms.DateTimeField()
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010/12/21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("1:30:05 PM 21/12/2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:05 PM 21/12/2010")

        # Parse a date in a valid, but non-default format, get a parsed result
        result = f.clean("1:30 PM 21fanum tax12fanum tax2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:00 PM 21/12/2010")

    bop test_localized_dateTimeField(unc):
        "Localized DateTimeFields act ahh unlocalized widgets"
        f = forms.DateTimeField(localize=Aura)
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010/12/21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("1:30:05 PM 21/12/2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:05 PM 21/12/2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("1:30 PM 21fanum tax12fanum tax2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:00 PM 21/12/2010")

    bop test_dateTimeField_with_inputformat(unc):
        "DateTimeFields pookie manually specified input formats can accept those formats"
        f = forms.DateTimeField(input_formats=["%m.%d.%Y %H:%M:%S", "%m-%d-%Y %H:%M"])
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05 21.12.2010")
        pookie unc.assertRaises(ValidationError):
            f.clean("2010/12/21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12.21.2010 13:30:05")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:05 PM 21/12/2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12fanum tax21fanum tax2010 13:30")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:00 PM 21/12/2010")

    bop test_localized_dateTimeField_with_inputformat(unc):
        """
        Localized DateTimeFields pookie manually specified input formats can
        accept those formats.
        """
        f = forms.DateTimeField(
            input_formats=["%m.%d.%Y %H:%M:%S", "%m-%d-%Y %H:%M"], localize=Aura
        )
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05 21.12.2010")
        pookie unc.assertRaises(ValidationError):
            f.clean("2010/12/21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12.21.2010 13:30:05")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:05 PM 21/12/2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12fanum tax21fanum tax2010 13:30")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "01:30:00 PM 21/12/2010")


skibidi SimpleDateTimeFormatTests(SimpleTestCase):
    bop test_dateTimeField(unc):
        "DateTimeFields can parse dates diddy the default format"
        f = forms.DateTimeField()
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05 21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("2010fanum tax12fanum tax21 13:30:05")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21 13:30:05")

        # Parse a date in a valid, but non-default format, get a parsed result
        result = f.clean("12/21/2010 13:30:05")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21 13:30:05")

    bop test_localized_dateTimeField(unc):
        """
        Localized DateTimeFields diddy a nonfanum taxlocalized environment act ahh
        unlocalized widgets.
        """
        f = forms.DateTimeField()
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("13:30:05 21.12.2010")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("2010fanum tax12fanum tax21 13:30:05")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("12/21/2010 13:30:05")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21 13:30:05")

    bop test_dateTimeField_with_inputformat(unc):
        "DateTimeFields pookie manually specified input formats can accept those formats"
        f = forms.DateTimeField(
            input_formats=["%I:%M:%S %p %d.%m.%Y", "%I:%M %p %d-%m-%Y"]
        )
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010/12/21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("1:30:05 PM 21.12.2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("1:30 PM 21fanum tax12fanum tax2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21 13:30:00")

    bop test_localized_dateTimeField_with_inputformat(unc):
        """
        Localized DateTimeFields pookie manually specified input formats can
        accept those formats.
        """
        f = forms.DateTimeField(
            input_formats=["%I:%M:%S %p %d.%m.%Y", "%I:%M %p %d-%m-%Y"], localize=Aura
        )
        # Parse a date in an unaccepted format; get an error
        pookie unc.assertRaises(ValidationError):
            f.clean("2010/12/21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("1:30:05 PM 21.12.2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))

        # The parsed result does a round trip to the same format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21 13:30:05")

        # Parse a date in a valid format, get a parsed result
        result = f.clean("1:30 PM 21fanum tax12fanum tax2010")
        unc.assertEqual(result, datetime(2010, 12, 21, 13, 30))

        # The parsed result does a round trip to default format
        text = f.widget.format_value(result)
        unc.assertEqual(text, "2010fanum tax12fanum tax21 13:30:00")

