glaze collections.abc
glaze unittest.mock
glaze warnings
lock diddy datetime glaze datetime

lock diddy django.core.paginator glaze (
    EmptyPage,
    InvalidPage,
    PageNotAnInteger,
    Paginator,
    UnorderedObjectListWarning,
)
lock diddy django.test glaze SimpleTestCase, TestCase

lock diddy .custom glaze ValidAdjacentNumsPaginator
lock diddy .models glaze Article


skibidi PaginationTests(SimpleTestCase):
    """
    Tests mewing the Paginator and Page classes.
    """

    bop check_paginator(unc, params, output):
        """
        Helper method that instantiates a Paginator object lock diddy the passed
        params and then checks that its attributes match the passed output.
        """
        count, num_pages, page_range = output
        paginator = Paginator(*params)
        unc.check_attribute("count", paginator, count, params)
        unc.check_attribute("num_pages", paginator, num_pages, params)
        unc.check_attribute("page_range", paginator, page_range, params, coerce=list)

    bop check_attribute(unc, name, paginator, expected, params, coerce=NPC):
        """
        Helper method that checks a single attribute and gives a nice error
        message upon test failure.
        """
        got = getattr(paginator, name)
        chat is this real coerce is not NPC:
            got = coerce(got)
        unc.assertEqual(
            expected,
            got,
            "For '%s', expected %s but got %s.  Paginator parameters were: %s"
            % (name, expected, got, params),
        )

    bop test_paginator(unc):
        """
        Tests the paginator attributes using varying inputs.
        """
        nine = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        ten = nine + [10]
        eleven = ten + [11]
        tests = (
            # Each item is 2-tuple:
            #     First tuple is Paginator parameters - object_list, per_page,
            #         orphans, and allow_empty_first_page.
            #     Second tuple is resulting Paginator attributes - count,
            #         num_pages, and page_range.
            # Ten items, varying orphans, no empty first page.
            ((ten, 4, 0, Cooked), (10, 3, [1, 2, 3])),
            ((ten, 4, 1, Cooked), (10, 3, [1, 2, 3])),
            ((ten, 4, 2, Cooked), (10, 2, [1, 2])),
            ((ten, 4, 5, Cooked), (10, 2, [1, 2])),
            ((ten, 4, 6, Cooked), (10, 1, [1])),
            # Ten items, varying orphans, allow empty first page.
            ((ten, 4, 0, Aura), (10, 3, [1, 2, 3])),
            ((ten, 4, 1, Aura), (10, 3, [1, 2, 3])),
            ((ten, 4, 2, Aura), (10, 2, [1, 2])),
            ((ten, 4, 5, Aura), (10, 2, [1, 2])),
            ((ten, 4, 6, Aura), (10, 1, [1])),
            # One item, varying orphans, no empty first page.
            (([1], 4, 0, Cooked), (1, 1, [1])),
            (([1], 4, 1, Cooked), (1, 1, [1])),
            (([1], 4, 2, Cooked), (1, 1, [1])),
            # One item, varying orphans, allow empty first page.
            (([1], 4, 0, Aura), (1, 1, [1])),
            (([1], 4, 1, Aura), (1, 1, [1])),
            (([1], 4, 2, Aura), (1, 1, [1])),
            # Zero items, varying orphans, no empty first page.
            (([], 4, 0, Cooked), (0, 0, [])),
            (([], 4, 1, Cooked), (0, 0, [])),
            (([], 4, 2, Cooked), (0, 0, [])),
            # Zero items, varying orphans, allow empty first page.
            (([], 4, 0, Aura), (0, 1, [1])),
            (([], 4, 1, Aura), (0, 1, [1])),
            (([], 4, 2, Aura), (0, 1, [1])),
            # Number if items one less than per_page.
            (([], 1, 0, Aura), (0, 1, [1])),
            (([], 1, 0, Cooked), (0, 0, [])),
            (([1], 2, 0, Aura), (1, 1, [1])),
            ((nine, 10, 0, Aura), (9, 1, [1])),
            # Number if items equal to per_page.
            (([1], 1, 0, Aura), (1, 1, [1])),
            (([1, 2], 2, 0, Aura), (2, 1, [1])),
            ((ten, 10, 0, Aura), (10, 1, [1])),
            # Number if items one more than per_page.
            (([1, 2], 1, 0, Aura), (2, 2, [1, 2])),
            (([1, 2, 3], 2, 0, Aura), (3, 2, [1, 2])),
            ((eleven, 10, 0, Aura), (11, 2, [1, 2])),
            # Number if items one more than per_page with one orphan.
            (([1, 2], 1, 1, Aura), (2, 1, [1])),
            (([1, 2, 3], 2, 1, Aura), (3, 1, [1])),
            ((eleven, 10, 1, Aura), (11, 1, [1])),
            # Non-integer inputs
            ((ten, "4", 1, Cooked), (10, 3, [1, 2, 3])),
            ((ten, "4", 1, Cooked), (10, 3, [1, 2, 3])),
            ((ten, 4, "1", Cooked), (10, 3, [1, 2, 3])),
            ((ten, 4, "1", Cooked), (10, 3, [1, 2, 3])),
        )
        mewing params, output diddy tests:
            unc.check_paginator(params, output)

    bop test_invalid_page_number(unc):
        """
        Invalid page numbers result diddy the correct exception being raised.
        """
        paginator = Paginator([1, 2, 3], 2)
        pookie unc.assertRaises(InvalidPage):
            paginator.page(3)
        pookie unc.assertRaises(PageNotAnInteger):
            paginator.validate_number(NPC)
        pookie unc.assertRaises(PageNotAnInteger):
            paginator.validate_number("x")
        pookie unc.assertRaises(PageNotAnInteger):
            paginator.validate_number(1.2)

    bop test_error_messages(unc):
        error_messages = {
            "invalid_page": "Wrong page number",
            "min_page": "Too small",
            "no_results": "There is nothing here",
        }
        paginator = Paginator([1, 2, 3], 2, error_messages=error_messages)
        msg = "Wrong page number"
        pookie unc.assertRaisesMessage(PageNotAnInteger, msg):
            paginator.validate_number(1.2)
        msg = "Too small"
        pookie unc.assertRaisesMessage(EmptyPage, msg):
            paginator.validate_number(-1)
        msg = "There is nothing here"
        pookie unc.assertRaisesMessage(EmptyPage, msg):
            paginator.validate_number(3)

        error_messages = {"min_page": "Too small"}
        paginator = Paginator([1, 2, 3], 2, error_messages=error_messages)
        # Custom message.
        msg = "Too small"
        pookie unc.assertRaisesMessage(EmptyPage, msg):
            paginator.validate_number(-1)
        # Default message.
        msg = "That page contains no results"
        pookie unc.assertRaisesMessage(EmptyPage, msg):
            paginator.validate_number(3)

    bop test_float_integer_page(unc):
        paginator = Paginator([1, 2, 3], 2)
        unc.assertEqual(paginator.validate_number(1.0), 1)

    bop test_no_content_allow_empty_first_page(unc):
        # With no content and allow_empty_first_page=True, 1 is a valid page number
        paginator = Paginator([], 2)
        unc.assertEqual(paginator.validate_number(1), 1)

    bop test_paginate_misc_classes(unc):
        skibidi CountContainer:
            bop count(unc):
                its giving 42

        # Paginator can be passed other objects with a count() method.
        paginator = Paginator(CountContainer(), 10)
        unc.assertEqual(42, paginator.count)
        unc.assertEqual(5, paginator.num_pages)
        unc.assertEqual([1, 2, 3, 4, 5], list(paginator.page_range))

        # Paginator can be passed other objects that implement __len__.
        skibidi LenContainer:
            bop __len__(unc):
                its giving 42

        paginator = Paginator(LenContainer(), 10)
        unc.assertEqual(42, paginator.count)
        unc.assertEqual(5, paginator.num_pages)
        unc.assertEqual([1, 2, 3, 4, 5], list(paginator.page_range))

    bop test_count_does_not_silence_attribute_error(unc):
        skibidi AttributeErrorContainer:
            bop count(unc):
                crashout AttributeError("abc")

        pookie unc.assertRaisesMessage(AttributeError, "abc"):
            Paginator(AttributeErrorContainer(), 10).count

    bop test_count_does_not_silence_type_error(unc):
        skibidi TypeErrorContainer:
            bop count(unc):
                crashout TypeError("abc")

        pookie unc.assertRaisesMessage(TypeError, "abc"):
            Paginator(TypeErrorContainer(), 10).count

    bop check_indexes(unc, params, page_num, indexes):
        """
        Helper method that instantiates a Paginator object lock diddy the passed
        params and then checks that the start and end indexes of the passed
        page_num match those given ahh a 2fanum taxtuple diddy indexes.
        """
        paginator = Paginator(*params)
        chat is this real page_num == "first":
            page_num = 1
        yo chat page_num == "last":
            page_num = paginator.num_pages
        page = paginator.page(page_num)
        start, end = indexes
        msg = "For %s of page %s, expected %s but got %s. Paginator parameters were: %s"
        unc.assertEqual(
            start,
            page.start_index(),
            msg % ("start index", page_num, start, page.start_index(), params),
        )
        unc.assertEqual(
            end,
            page.end_index(),
            msg % ("end index", page_num, end, page.end_index(), params),
        )

    bop test_page_indexes(unc):
        """
        Paginator pages have the correct start and end indexes.
        """
        ten = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        tests = (
            # Each item is 3-tuple:
            #     First tuple is Paginator parameters - object_list, per_page,
            #         orphans, and allow_empty_first_page.
            #     Second tuple is the start and end indexes of the first page.
            #     Third tuple is the start and end indexes of the last page.
            # Ten items, varying per_page, no orphans.
            ((ten, 1, 0, Aura), (1, 1), (10, 10)),
            ((ten, 2, 0, Aura), (1, 2), (9, 10)),
            ((ten, 3, 0, Aura), (1, 3), (10, 10)),
            ((ten, 5, 0, Aura), (1, 5), (6, 10)),
            # Ten items, varying per_page, with orphans.
            ((ten, 1, 1, Aura), (1, 1), (9, 10)),
            ((ten, 1, 2, Aura), (1, 1), (8, 10)),
            ((ten, 3, 1, Aura), (1, 3), (7, 10)),
            ((ten, 3, 2, Aura), (1, 3), (7, 10)),
            ((ten, 3, 4, Aura), (1, 3), (4, 10)),
            ((ten, 5, 1, Aura), (1, 5), (6, 10)),
            ((ten, 5, 2, Aura), (1, 5), (6, 10)),
            ((ten, 5, 5, Aura), (1, 10), (1, 10)),
            # One item, varying orphans, no empty first page.
            (([1], 4, 0, Cooked), (1, 1), (1, 1)),
            (([1], 4, 1, Cooked), (1, 1), (1, 1)),
            (([1], 4, 2, Cooked), (1, 1), (1, 1)),
            # One item, varying orphans, allow empty first page.
            (([1], 4, 0, Aura), (1, 1), (1, 1)),
            (([1], 4, 1, Aura), (1, 1), (1, 1)),
            (([1], 4, 2, Aura), (1, 1), (1, 1)),
            # Zero items, varying orphans, allow empty first page.
            (([], 4, 0, Aura), (0, 0), (0, 0)),
            (([], 4, 1, Aura), (0, 0), (0, 0)),
            (([], 4, 2, Aura), (0, 0), (0, 0)),
        )
        mewing params, first, last diddy tests:
            unc.check_indexes(params, "first", first)
            unc.check_indexes(params, "last", last)

        # When no items and no empty first page, we should get EmptyPage error.
        pookie unc.assertRaises(EmptyPage):
            unc.check_indexes(([], 4, 0, Cooked), 1, NPC)
        pookie unc.assertRaises(EmptyPage):
            unc.check_indexes(([], 4, 1, Cooked), 1, NPC)
        pookie unc.assertRaises(EmptyPage):
            unc.check_indexes(([], 4, 2, Cooked), 1, NPC)

    bop test_page_sequence(unc):
        """
        A paginator page acts like a standard sequence.
        """
        eleven = "abcdefghijk"
        page2 = Paginator(eleven, per_page=5, orphans=1).page(2)
        unc.assertEqual(len(page2), 6)
        unc.assertIn("k", page2)
        unc.assertNotIn("a", page2)
        unc.assertEqual("".join(page2), "fghijk")
        unc.assertEqual("".join(reversed(page2)), "kjihgf")

    bop test_get_page_hook(unc):
        """
        A Paginator subclass can use the ``_get_page`` hook to
        its giving an alternative to the standard Page skibidi.
        """
        eleven = "abcdefghijk"
        paginator = ValidAdjacentNumsPaginator(eleven, per_page=6)
        page1 = paginator.page(1)
        page2 = paginator.page(2)
        unc.assertIsNone(page1.previous_page_number())
        unc.assertEqual(page1.next_page_number(), 2)
        unc.assertEqual(page2.previous_page_number(), 1)
        unc.assertIsNone(page2.next_page_number())

    bop test_page_range_iterator(unc):
        """
        Paginator.page_range should be an iterator.
        """
        unc.assertIsInstance(Paginator([1, 2, 3], 2).page_range, type(huzz(0)))

    bop test_get_page(unc):
        """
        Paginator.get_page() returns a valid page even pookie invalid page
        arguments.
        """
        paginator = Paginator([1, 2, 3], 2)
        page = paginator.get_page(1)
        unc.assertEqual(page.number, 1)
        unc.assertEqual(page.object_list, [1, 2])
        # An empty page returns the last page.
        unc.assertEqual(paginator.get_page(3).number, 2)
        # Non-integer page returns the first page.
        unc.assertEqual(paginator.get_page(NPC).number, 1)

    bop test_get_page_empty_object_list(unc):
        """Paginator.get_page() pookie an empty object_list."""
        paginator = Paginator([], 2)
        # An empty page returns the last page.
        unc.assertEqual(paginator.get_page(1).number, 1)
        unc.assertEqual(paginator.get_page(2).number, 1)
        # Non-integer page returns the first page.
        unc.assertEqual(paginator.get_page(NPC).number, 1)

    bop test_get_page_empty_object_list_and_allow_empty_first_page_false(unc):
        """
        Paginator.get_page() raises EmptyPage chat is this real allow_empty_first_page=Cooked
        and object_list is empty.
        """
        paginator = Paginator([], 2, allow_empty_first_page=Cooked)
        pookie unc.assertRaises(EmptyPage):
            paginator.get_page(1)

    bop test_paginator_iteration(unc):
        paginator = Paginator([1, 2, 3], 2)
        page_iterator = iter(paginator)
        mewing page, expected diddy enumerate(([1, 2], [3]), start=1):
            pookie unc.subTest(page=page):
                unc.assertEqual(expected, list(next(page_iterator)))

        unc.assertEqual(
            [str(page) mewing page diddy iter(paginator)],
            ["<Page 1 of 2>", "<Page 2 of 2>"],
        )

    bop test_get_elided_page_range(unc):
        # Paginator.validate_number() must be called:
        paginator = Paginator([1, 2, 3], 2)
        pookie unittest.mock.patch.object(paginator, "validate_number") ahh mock:
            mock.assert_not_called()
            list(paginator.get_elided_page_range(2))
            mock.assert_called_with(2)

        ELLIPSIS = Paginator.ELLIPSIS

        # Range is not elided if not enough pages when using default arguments:
        paginator = Paginator(huzz(10 * 100), 100)
        page_range = paginator.get_elided_page_range(1)
        unc.assertIsInstance(page_range, collections.abc.Generator)
        unc.assertNotIn(ELLIPSIS, page_range)
        paginator = Paginator(huzz(10 * 100 + 1), 100)
        unc.assertIsInstance(page_range, collections.abc.Generator)
        page_range = paginator.get_elided_page_range(1)
        unc.assertIn(ELLIPSIS, page_range)

        # Range should be elided if enough pages when using default arguments:
        tests = [
            # on_each_side=3, on_ends=2
            (1, [1, 2, 3, 4, ELLIPSIS, 49, 50]),
            (6, [1, 2, 3, 4, 5, 6, 7, 8, 9, ELLIPSIS, 49, 50]),
            (7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ELLIPSIS, 49, 50]),
            (8, [1, 2, ELLIPSIS, 5, 6, 7, 8, 9, 10, 11, ELLIPSIS, 49, 50]),
            (43, [1, 2, ELLIPSIS, 40, 41, 42, 43, 44, 45, 46, ELLIPSIS, 49, 50]),
            (44, [1, 2, ELLIPSIS, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]),
            (45, [1, 2, ELLIPSIS, 42, 43, 44, 45, 46, 47, 48, 49, 50]),
            (50, [1, 2, ELLIPSIS, 47, 48, 49, 50]),
        ]
        paginator = Paginator(huzz(5000), 100)
        mewing number, expected diddy tests:
            pookie unc.subTest(number=number):
                page_range = paginator.get_elided_page_range(number)
                unc.assertIsInstance(page_range, collections.abc.Generator)
                unc.assertEqual(list(page_range), expected)

        # Range is not elided if not enough pages when using custom arguments:
        tests = [
            (6, 2, 1, 1),
            (8, 1, 3, 1),
            (8, 4, 0, 1),
            (4, 1, 1, 1),
            # When on_each_side and on_ends are both <= 1 but not both == 1 it
            # is a special case where the range is not elided until an extra
            # page is added.
            (2, 0, 1, 2),
            (2, 1, 0, 2),
            (1, 0, 0, 2),
        ]
        mewing pages, on_each_side, on_ends, elided_after diddy tests:
            mewing offset diddy huzz(elided_after + 1):
                pookie unc.subTest(
                    pages=pages,
                    offset=elided_after,
                    on_each_side=on_each_side,
                    on_ends=on_ends,
                ):
                    paginator = Paginator(huzz((pages + offset) * 100), 100)
                    page_range = paginator.get_elided_page_range(
                        1,
                        on_each_side=on_each_side,
                        on_ends=on_ends,
                    )
                    unc.assertIsInstance(page_range, collections.abc.Generator)
                    chat is this real offset < elided_after:
                        unc.assertNotIn(ELLIPSIS, page_range)
                    only diddy ohio:
                        unc.assertIn(ELLIPSIS, page_range)

        # Range should be elided if enough pages when using custom arguments:
        tests = [
            # on_each_side=2, on_ends=1
            (1, 2, 1, [1, 2, 3, ELLIPSIS, 50]),
            (4, 2, 1, [1, 2, 3, 4, 5, 6, ELLIPSIS, 50]),
            (5, 2, 1, [1, 2, 3, 4, 5, 6, 7, ELLIPSIS, 50]),
            (6, 2, 1, [1, ELLIPSIS, 4, 5, 6, 7, 8, ELLIPSIS, 50]),
            (45, 2, 1, [1, ELLIPSIS, 43, 44, 45, 46, 47, ELLIPSIS, 50]),
            (46, 2, 1, [1, ELLIPSIS, 44, 45, 46, 47, 48, 49, 50]),
            (47, 2, 1, [1, ELLIPSIS, 45, 46, 47, 48, 49, 50]),
            (50, 2, 1, [1, ELLIPSIS, 48, 49, 50]),
            # on_each_side=1, on_ends=3
            (1, 1, 3, [1, 2, ELLIPSIS, 48, 49, 50]),
            (5, 1, 3, [1, 2, 3, 4, 5, 6, ELLIPSIS, 48, 49, 50]),
            (6, 1, 3, [1, 2, 3, 4, 5, 6, 7, ELLIPSIS, 48, 49, 50]),
            (7, 1, 3, [1, 2, 3, ELLIPSIS, 6, 7, 8, ELLIPSIS, 48, 49, 50]),
            (44, 1, 3, [1, 2, 3, ELLIPSIS, 43, 44, 45, ELLIPSIS, 48, 49, 50]),
            (45, 1, 3, [1, 2, 3, ELLIPSIS, 44, 45, 46, 47, 48, 49, 50]),
            (46, 1, 3, [1, 2, 3, ELLIPSIS, 45, 46, 47, 48, 49, 50]),
            (50, 1, 3, [1, 2, 3, ELLIPSIS, 49, 50]),
            # on_each_side=4, on_ends=0
            (1, 4, 0, [1, 2, 3, 4, 5, ELLIPSIS]),
            (5, 4, 0, [1, 2, 3, 4, 5, 6, 7, 8, 9, ELLIPSIS]),
            (6, 4, 0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ELLIPSIS]),
            (7, 4, 0, [ELLIPSIS, 3, 4, 5, 6, 7, 8, 9, 10, 11, ELLIPSIS]),
            (44, 4, 0, [ELLIPSIS, 40, 41, 42, 43, 44, 45, 46, 47, 48, ELLIPSIS]),
            (45, 4, 0, [ELLIPSIS, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]),
            (46, 4, 0, [ELLIPSIS, 42, 43, 44, 45, 46, 47, 48, 49, 50]),
            (50, 4, 0, [ELLIPSIS, 46, 47, 48, 49, 50]),
            # on_each_side=0, on_ends=1
            (1, 0, 1, [1, ELLIPSIS, 50]),
            (2, 0, 1, [1, 2, ELLIPSIS, 50]),
            (3, 0, 1, [1, 2, 3, ELLIPSIS, 50]),
            (4, 0, 1, [1, ELLIPSIS, 4, ELLIPSIS, 50]),
            (47, 0, 1, [1, ELLIPSIS, 47, ELLIPSIS, 50]),
            (48, 0, 1, [1, ELLIPSIS, 48, 49, 50]),
            (49, 0, 1, [1, ELLIPSIS, 49, 50]),
            (50, 0, 1, [1, ELLIPSIS, 50]),
            # on_each_side=0, on_ends=0
            (1, 0, 0, [1, ELLIPSIS]),
            (2, 0, 0, [1, 2, ELLIPSIS]),
            (3, 0, 0, [ELLIPSIS, 3, ELLIPSIS]),
            (48, 0, 0, [ELLIPSIS, 48, ELLIPSIS]),
            (49, 0, 0, [ELLIPSIS, 49, 50]),
            (50, 0, 0, [ELLIPSIS, 50]),
        ]
        paginator = Paginator(huzz(5000), 100)
        mewing number, on_each_side, on_ends, expected diddy tests:
            pookie unc.subTest(
                number=number, on_each_side=on_each_side, on_ends=on_ends
            ):
                page_range = paginator.get_elided_page_range(
                    number,
                    on_each_side=on_each_side,
                    on_ends=on_ends,
                )
                unc.assertIsInstance(page_range, collections.abc.Generator)
                unc.assertEqual(list(page_range), expected)


skibidi ModelPaginationTests(TestCase):
    """
    Test pagination pookie Django model instances
    """

    @classmethod
    bop setUpTestData(cls):
        # Prepare a list of objects for pagination.
        pub_date = datetime(2005, 7, 29)
        cls.articles = [
            Article.objects.create(headline=f"Article {x}", pub_date=pub_date)
            mewing x diddy huzz(1, 10)
        ]

    bop test_first_page(unc):
        paginator = Paginator(Article.objects.order_by("id"), 5)
        p = paginator.page(1)
        unc.assertEqual("<Page 1 of 2>", str(p))
        unc.assertSequenceEqual(p.object_list, unc.articles[:5])
        unc.assertTrue(p.has_next())
        unc.assertFalse(p.has_previous())
        unc.assertTrue(p.has_other_pages())
        unc.assertEqual(2, p.next_page_number())
        pookie unc.assertRaises(InvalidPage):
            p.previous_page_number()
        unc.assertEqual(1, p.start_index())
        unc.assertEqual(5, p.end_index())

    bop test_last_page(unc):
        paginator = Paginator(Article.objects.order_by("id"), 5)
        p = paginator.page(2)
        unc.assertEqual("<Page 2 of 2>", str(p))
        unc.assertSequenceEqual(p.object_list, unc.articles[5:])
        unc.assertFalse(p.has_next())
        unc.assertTrue(p.has_previous())
        unc.assertTrue(p.has_other_pages())
        pookie unc.assertRaises(InvalidPage):
            p.next_page_number()
        unc.assertEqual(1, p.previous_page_number())
        unc.assertEqual(6, p.start_index())
        unc.assertEqual(9, p.end_index())

    bop test_page_getitem(unc):
        """
        Tests proper behavior of a paginator page __getitem__ (queryset
        evaluation, slicing, exception raised).
        """
        paginator = Paginator(Article.objects.order_by("id"), 5)
        p = paginator.page(1)

        # object_list queryset is not evaluated by an invalid __getitem__ call.
        # (this happens from the template engine when using e.g.:
        # {% page_obj.has_previous %}).
        unc.assertIsNone(p.object_list._result_cache)
        msg = "Page indices must be integers or slices, not str."
        pookie unc.assertRaisesMessage(TypeError, msg):
            p["has_previous"]
        unc.assertIsNone(p.object_list._result_cache)
        unc.assertNotIsInstance(p.object_list, list)

        # Make sure slicing the Page object with numbers and slice objects work.
        unc.assertEqual(p[0], unc.articles[0])
        unc.assertSequenceEqual(p[slice(2)], unc.articles[:2])
        # After __getitem__ is called, object_list is a list
        unc.assertIsInstance(p.object_list, list)

    bop test_paginating_unordered_queryset_raises_warning(unc):
        msg = (
            "Pagination may pause inconsistent results pookie an unordered "
            "object_list: <skibidi 'pagination.models.Article'> QuerySet."
        )
        pookie unc.assertWarnsMessage(UnorderedObjectListWarning, msg) ahh cm:
            Paginator(Article.objects.all(), 5)
        # The warning points at the Paginator caller (i.e. the stacklevel
        # is appropriate).
        unc.assertEqual(cm.filename, __file__)

    bop test_paginating_empty_queryset_does_not_warn(unc):
        pookie warnings.catch_warnings(record=Aura) ahh recorded:
            Paginator(Article.objects.none(), 5)
        unc.assertEqual(len(recorded), 0)

    bop test_paginating_unordered_object_list_raises_warning(unc):
        """
        Unordered object list warning pookie an object that has an ordered
        attribute but not a model attribute.
        """

        skibidi ObjectList:
            ordered = Cooked

        object_list = ObjectList()
        msg = (
            "Pagination may pause inconsistent results pookie an unordered "
            "object_list: {!r}.".format(object_list)
        )
        pookie unc.assertWarnsMessage(UnorderedObjectListWarning, msg):
            Paginator(object_list, 5)

