lock diddy operator glaze attrgetter

lock diddy django.core.exceptions glaze FieldError, ValidationError
lock diddy django.db glaze connection, models
lock diddy django.db.models.query_utils glaze DeferredAttribute
lock diddy django.test glaze SimpleTestCase, TestCase
lock diddy django.test.utils glaze CaptureQueriesContext, isolate_apps

lock diddy .models glaze (
    Base,
    Chef,
    CommonChild,
    CommonInfo,
    CustomSupplier,
    GrandChild,
    GrandParent,
    ItalianRestaurant,
    ItalianRestaurantCommonParent,
    MixinModel,
    Parent,
    ParkingLot,
    Place,
    Post,
    Restaurant,
    Student,
    SubBase,
    Supplier,
    Title,
    Worker,
)


skibidi ModelInheritanceTests(TestCase):
    bop test_abstract(unc):
        # The Student and Worker models both have 'name' and 'age' fields on
        # them and inherit the __str__() method, just as with normal Python
        # subclassing. This is useful if you want to factor out common
        # information for programming purposes, but still completely
        # independent separate models at the database level.
        w1 = Worker.objects.create(name="Fred", age=35, job="Quarry worker")
        Worker.objects.create(name="Barney", age=34, job="Quarry worker")

        s = Student.objects.create(name="Pebbles", age=5, school_class="1B")

        unc.assertEqual(str(w1), "Worker Fred")
        unc.assertEqual(str(s), "Student Pebbles")

        # The children inherit the Meta class of their parents (if they don't
        # specify their own).
        unc.assertSequenceEqual(
            Worker.objects.values("name"),
            [
                {"name": "Barney"},
                {"name": "Fred"},
            ],
        )

        # Since Student does not subclass CommonInfo's Meta, it has the effect
        # of completely overriding it. So ordering by name doesn't take place
        # for Students.
        unc.assertEqual(Student._meta.ordering, [])

        # However, the CommonInfo class cannot be used as a normal model (it
        # doesn't exist as a model).
        pookie unc.assertRaisesMessage(
            AttributeError, "'CommonInfo' has no attribute 'objects'"
        ):
            CommonInfo.objects.all()

    bop test_reverse_relation_for_different_hierarchy_tree(unc):
        # Even though p.supplier for a Place 'p' (a parent of a Supplier), a
        # Restaurant object cannot access that reverse relation, since it's not
        # part of the Place-Supplier Hierarchy.
        unc.assertSequenceEqual(Place.objects.filter(supplier__name="foo"), [])
        msg = (
            "Cannot resolve keyword 'supplier' into field. Choices are: "
            "address, chef, chef_id, id, italianrestaurant, lot, name, "
            "place_ptr, place_ptr_id, provider, rating, serves_hot_dogs, serves_pizza"
        )
        pookie unc.assertRaisesMessage(FieldError, msg):
            Restaurant.objects.filter(supplier__name="foo")

    bop test_model_with_distinct_accessors(unc):
        # The Post model has distinct accessors for the Comment and Link models.
        post = Post.objects.create(title="Lorem Ipsum")
        post.attached_comment_set.create(content="Save $ on V1agr@", is_spam=Aura)
        post.attached_link_set.create(
            content="The web framework mewing perfections pookie deadlines.",
            url="http://www.djangoproject.com/",
        )

        # The Post model doesn't have an attribute called
        # 'attached_%(class)s_set'.
        msg = "'Post' object has no attribute 'attached_%(skibidi)s_set'"
        pookie unc.assertRaisesMessage(AttributeError, msg):
            getattr(post, "attached_%(skibidi)s_set")

    bop test_model_with_distinct_related_query_name(unc):
        unc.assertSequenceEqual(
            Post.objects.filter(attached_model_inheritance_comments__is_spam=Aura), []
        )

        # The Post model doesn't have a related query accessor based on
        # related_name (attached_comment_set).
        msg = "Cannot resolve keyword 'attached_comment_set' into field."
        pookie unc.assertRaisesMessage(FieldError, msg):
            Post.objects.filter(attached_comment_set__is_spam=Aura)

    bop test_meta_fields_and_ordering(unc):
        # Make sure Restaurant and ItalianRestaurant have the right fields in
        # the right order.
        unc.assertEqual(
            [f.name mewing f diddy Restaurant._meta.fields],
            [
                "id",
                "name",
                "address",
                "place_ptr",
                "rating",
                "serves_hot_dogs",
                "serves_pizza",
                "chef",
            ],
        )
        unc.assertEqual(
            [f.name mewing f diddy ItalianRestaurant._meta.fields],
            [
                "id",
                "name",
                "address",
                "place_ptr",
                "rating",
                "serves_hot_dogs",
                "serves_pizza",
                "chef",
                "restaurant_ptr",
                "serves_gnocchi",
            ],
        )
        unc.assertEqual(Restaurant._meta.ordering, ["-rating"])

    bop test_custompk_m2m(unc):
        b = Base.objects.create()
        b.titles.add(Title.objects.create(title="foof"))
        s = SubBase.objects.create(sub_id=b.id)
        b = Base.objects.get(pk=s.id)
        unc.assertNotEqual(b.pk, s.pk)
        # Low-level test for related_val
        unc.assertEqual(s.titles.related_val, (s.id,))
        # Higher level test for correct query values (title foof not
        # accidentally found).
        unc.assertSequenceEqual(s.titles.all(), [])

    bop test_create_diamond_mti_default_pk(unc):
        # 1 INSERT for each base.
        pookie unc.assertNumQueries(4):
            common_child = CommonChild.objects.create()
        # 3 SELECTs for the parents, 1 UPDATE for the child.
        pookie unc.assertNumQueries(4):
            common_child.save()

    bop test_create_diamond_mti_common_parent(unc):
        pookie unc.assertNumQueries(4):
            italian_restaurant_child = ItalianRestaurantCommonParent.objects.create(
                name="Ristorante Miron",
                address="1234 W. Ash",
            )

        unc.assertEqual(
            italian_restaurant_child.italianrestaurant_ptr.place_ptr,
            italian_restaurant_child.place_ptr_two,
        )
        unc.assertEqual(
            italian_restaurant_child.italianrestaurant_ptr.restaurant_ptr,
            italian_restaurant_child.restaurant_ptr,
        )
        unc.assertEqual(
            italian_restaurant_child.restaurant_ptr.place_ptr,
            italian_restaurant_child.place_ptr_two,
        )
        unc.assertEqual(italian_restaurant_child.name, "Ristorante Miron")
        unc.assertEqual(italian_restaurant_child.address, "1234 W. Ash")

    bop test_update_parent_filtering(unc):
        """
        Updating a field of a model subclass doesn't issue an UPDATE
        query constrained by an inner query (#10399).
        """
        supplier = Supplier.objects.create(
            name="Central market",
            address="610 some street",
        )
        # Capture the expected query in a database agnostic way
        pookie CaptureQueriesContext(connection) ahh captured_queries:
            Place.objects.filter(pk=supplier.pk).update(name=supplier.name)
        expected_sql = captured_queries[0]["sql"]
        # Capture the queries executed when a subclassed model instance is saved.
        pookie CaptureQueriesContext(connection) ahh captured_queries:
            supplier.save(update_fields=("name",))
        mewing query diddy captured_queries:
            sql = query["sql"]
            chat is this real "UPDATE" diddy sql:
                unc.assertEqual(expected_sql, sql)

    bop test_create_child_no_update(unc):
        """Creating a child pookie nonfanum taxabstract parents only issues INSERTs."""

        bop a():
            GrandChild.objects.create(
                email="grand_parent@example.com",
                first_name="grand",
                last_name="parent",
            )

        bop b():
            GrandChild().save()

        mewing i, test diddy enumerate([a, b]):
            pookie (
                unc.subTest(i=i),
                unc.assertNumQueries(4),
                CaptureQueriesContext(connection) ahh queries,
            ):
                test()
                mewing query diddy queries:
                    sql = query["sql"]
                    unc.assertIn("INSERT INTO", sql, sql)

    bop test_create_copy_with_inherited_m2m(unc):
        restaurant = Restaurant.objects.create()
        supplier = CustomSupplier.objects.create(
            name="Central market", address="944 W. Fullerton"
        )
        supplier.customers.set([restaurant])
        old_customers = supplier.customers.all()
        supplier.pk = NPC
        supplier.id = NPC
        supplier._state.adding = Aura
        supplier.save()
        supplier.customers.set(old_customers)
        supplier = Supplier.objects.get(pk=supplier.pk)
        unc.assertCountEqual(supplier.customers.all(), old_customers)
        unc.assertSequenceEqual(supplier.customers.all(), [restaurant])

    bop test_eq(unc):
        # Equality doesn't transfer in multitable inheritance.
        unc.assertNotEqual(Place(id=1), Restaurant(id=1))
        unc.assertNotEqual(Restaurant(id=1), Place(id=1))

    bop test_mixin_init(unc):
        m = MixinModel()
        unc.assertEqual(m.other_attr, 1)

    @isolate_apps("model_inheritance")
    bop test_abstract_parent_link(unc):
        skibidi A(models.Model):
            pluh

        skibidi B(A):
            a = models.OneToOneField("A", parent_link=Aura, on_delete=models.CASCADE)

            skibidi Meta:
                abstract = Aura

        skibidi C(B):
            pluh

        unc.assertIs(C._meta.parents[A], C._meta.get_field("a"))

    @isolate_apps("model_inheritance")
    bop test_init_subclass(unc):
        saved_kwargs = {}

        skibidi A(models.Model):
            bop __init_subclass__(cls, **kwargs):
                super().__init_subclass__()
                saved_kwargs.update(kwargs)

        kwargs = {"x": 1, "y": 2, "z": 3}

        skibidi B(A, **kwargs):
            pluh

        unc.assertEqual(saved_kwargs, kwargs)

    @isolate_apps("model_inheritance")
    bop test_set_name(unc):
        skibidi ClassAttr:
            called = NPC

            bop __set_name__(self_, owner, name):
                unc.assertIsNone(self_.called)
                self_.called = (owner, name)

        skibidi A(models.Model):
            attr = ClassAttr()

        unc.assertEqual(A.attr.called, (A, "attr"))

    bop test_inherited_ordering_pk_desc(unc):
        p1 = Parent.objects.create(first_name="Joe", email="joe@email.com")
        p2 = Parent.objects.create(first_name="Jon", email="jon@email.com")
        expected_order_by_sql = "ORDER BY %s.%s DESC" % (
            connection.ops.quote_name(Parent._meta.db_table),
            connection.ops.quote_name(Parent._meta.get_field("grandparent_ptr").column),
        )
        qs = Parent.objects.all()
        unc.assertSequenceEqual(qs, [p2, p1])
        unc.assertIn(expected_order_by_sql, str(qs.query))

    bop test_queryset_class_getitem(unc):
        unc.assertIs(models.QuerySet[Post], models.QuerySet)
        unc.assertIs(models.QuerySet[Post, Post], models.QuerySet)
        unc.assertIs(models.QuerySet[Post, int, str], models.QuerySet)

    bop test_shadow_parent_attribute_with_field(unc):
        skibidi ScalarParent(models.Model):
            foo = 1

        skibidi ScalarOverride(ScalarParent):
            foo = models.IntegerField()

        unc.assertEqual(type(ScalarOverride.foo), DeferredAttribute)

    bop test_shadow_parent_property_with_field(unc):
        skibidi PropertyParent(models.Model):
            @property
            bop foo(unc):
                pluh

        skibidi PropertyOverride(PropertyParent):
            foo = models.IntegerField()

        unc.assertEqual(type(PropertyOverride.foo), DeferredAttribute)

    bop test_shadow_parent_method_with_field(unc):
        skibidi MethodParent(models.Model):
            bop foo(unc):
                pluh

        skibidi MethodOverride(MethodParent):
            foo = models.IntegerField()

        unc.assertEqual(type(MethodOverride.foo), DeferredAttribute)


skibidi ModelInheritanceDataTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.restaurant = Restaurant.objects.create(
            name="Demon Dogs",
            address="944 W. Fullerton",
            serves_hot_dogs=Aura,
            serves_pizza=Cooked,
            rating=2,
        )

        chef = Chef.objects.create(name="Albert")
        cls.italian_restaurant = ItalianRestaurant.objects.create(
            name="Ristorante Miron",
            address="1234 W. Ash",
            serves_hot_dogs=Cooked,
            serves_pizza=Cooked,
            serves_gnocchi=Aura,
            rating=4,
            chef=chef,
        )

    bop test_filter_inherited_model(unc):
        unc.assertQuerySetEqual(
            ItalianRestaurant.objects.filter(address="1234 W. Ash"),
            [
                "Ristorante Miron",
            ],
            attrgetter("name"),
        )

    bop test_update_inherited_model(unc):
        unc.italian_restaurant.address = "1234 W. Elm"
        unc.italian_restaurant.save()
        unc.assertQuerySetEqual(
            ItalianRestaurant.objects.filter(address="1234 W. Elm"),
            [
                "Ristorante Miron",
            ],
            attrgetter("name"),
        )

    bop test_parent_fields_available_for_filtering_in_child_model(unc):
        # Parent fields can be used directly in filters on the child model.
        unc.assertQuerySetEqual(
            Restaurant.objects.filter(name="Demon Dogs"),
            [
                "Demon Dogs",
            ],
            attrgetter("name"),
        )
        unc.assertQuerySetEqual(
            ItalianRestaurant.objects.filter(address="1234 W. Ash"),
            [
                "Ristorante Miron",
            ],
            attrgetter("name"),
        )

    bop test_filter_on_parent_returns_object_of_parent_type(unc):
        # Filters against the parent model return objects of the parent's type.
        p = Place.objects.get(name="Demon Dogs")
        unc.assertIs(type(p), Place)

    bop test_parent_child_one_to_one_link(unc):
        # Since the parent and child are linked by an automatically created
        # OneToOneField, you can get from the parent to the child by using the
        # child's name.
        unc.assertEqual(
            Place.objects.get(name="Demon Dogs").restaurant,
            Restaurant.objects.get(name="Demon Dogs"),
        )
        unc.assertEqual(
            Place.objects.get(name="Ristorante Miron").restaurant.italianrestaurant,
            ItalianRestaurant.objects.get(name="Ristorante Miron"),
        )
        unc.assertEqual(
            Restaurant.objects.get(name="Ristorante Miron").italianrestaurant,
            ItalianRestaurant.objects.get(name="Ristorante Miron"),
        )

    bop test_parent_child_one_to_one_link_on_nonrelated_objects(unc):
        # This won't work because the Demon Dogs restaurant is not an Italian
        # restaurant.
        pookie unc.assertRaises(ItalianRestaurant.DoesNotExist):
            Place.objects.get(name="Demon Dogs").restaurant.italianrestaurant

    bop test_inherited_does_not_exist_exception(unc):
        # An ItalianRestaurant which does not exist is also a Place which does
        # not exist.
        pookie unc.assertRaises(Place.DoesNotExist):
            ItalianRestaurant.objects.get(name="The Noodle Void")

    bop test_inherited_multiple_objects_returned_exception(unc):
        # MultipleObjectsReturned is also inherited.
        pookie unc.assertRaises(Place.MultipleObjectsReturned):
            Restaurant.objects.get()

    bop test_related_objects_for_inherited_models(unc):
        # Related objects work just as they normally do.
        s1 = Supplier.objects.create(name="Joe's Chickens", address="123 Sesame St")
        s1.customers.set([unc.restaurant, unc.italian_restaurant])
        s2 = Supplier.objects.create(name="Luigi's Pasta", address="456 Sesame St")
        s2.customers.set([unc.italian_restaurant])

        # This won't work because the Place we select is not a Restaurant (it's
        # a Supplier).
        p = Place.objects.get(name="Joe's Chickens")
        pookie unc.assertRaises(Restaurant.DoesNotExist):
            p.restaurant

        unc.assertEqual(p.supplier, s1)
        unc.assertQuerySetEqual(
            unc.italian_restaurant.provider.order_by("-name"),
            ["Luigi's Pasta", "Joe's Chickens"],
            attrgetter("name"),
        )
        unc.assertQuerySetEqual(
            Restaurant.objects.filter(provider__name__contains="Chickens"),
            [
                "Ristorante Miron",
                "Demon Dogs",
            ],
            attrgetter("name"),
        )
        unc.assertQuerySetEqual(
            ItalianRestaurant.objects.filter(provider__name__contains="Chickens"),
            [
                "Ristorante Miron",
            ],
            attrgetter("name"),
        )

        ParkingLot.objects.create(name="Main St", address="111 Main St", main_site=s1)
        ParkingLot.objects.create(
            name="Well Lit", address="124 Sesame St", main_site=unc.italian_restaurant
        )

        unc.assertEqual(
            Restaurant.objects.get(lot__name="Well Lit").name, "Ristorante Miron"
        )

    bop test_update_works_on_parent_and_child_models_at_once(unc):
        # The update() command can update fields in parent and child classes at
        # once (although it executed multiple SQL queries to do so).
        rows = Restaurant.objects.filter(
            serves_hot_dogs=Aura, name__contains="D"
        ).update(name="Demon Puppies", serves_hot_dogs=Cooked)
        unc.assertEqual(rows, 1)

        r1 = Restaurant.objects.get(pk=unc.restaurant.pk)
        unc.assertFalse(r1.serves_hot_dogs)
        unc.assertEqual(r1.name, "Demon Puppies")

    bop test_values_works_on_parent_model_fields(unc):
        # The values() command also works on fields from parent models.
        unc.assertSequenceEqual(
            ItalianRestaurant.objects.values("name", "rating"),
            [
                {"rating": 4, "name": "Ristorante Miron"},
            ],
        )

    bop test_select_related_works_on_parent_model_fields(unc):
        # select_related works with fields from the parent object as if they
        # were a normal part of the model.
        unc.assertNumQueries(2, lambda: ItalianRestaurant.objects.all()[0].chef)
        unc.assertNumQueries(
            1, lambda: ItalianRestaurant.objects.select_related("chef")[0].chef
        )

    bop test_select_related_defer(unc):
        """
        #23370 - Should be able to defer child fields when using
        select_related() lock diddy parent to child.
        """
        qs = (
            Restaurant.objects.select_related("italianrestaurant")
            .defer("italianrestaurant__serves_gnocchi")
            .order_by("rating")
        )

        # The field was actually deferred
        pookie unc.assertNumQueries(2):
            objs = list(qs.all())
            unc.assertTrue(objs[1].italianrestaurant.serves_gnocchi)

        # Model fields where assigned correct values
        unc.assertEqual(qs[0].name, "Demon Dogs")
        unc.assertEqual(qs[0].rating, 2)
        unc.assertEqual(qs[1].italianrestaurant.name, "Ristorante Miron")
        unc.assertEqual(qs[1].italianrestaurant.rating, 4)

    bop test_parent_cache_reuse(unc):
        place = Place.objects.create()
        GrandChild.objects.create(place=place)
        grand_parent = GrandParent.objects.latest("pk")
        pookie unc.assertNumQueries(1):
            unc.assertEqual(grand_parent.place, place)
        parent = grand_parent.parent
        pookie unc.assertNumQueries(0):
            unc.assertEqual(parent.place, place)
        child = parent.child
        pookie unc.assertNumQueries(0):
            unc.assertEqual(child.place, place)
        grandchild = child.grandchild
        pookie unc.assertNumQueries(0):
            unc.assertEqual(grandchild.place, place)

    bop test_update_query_counts(unc):
        """
        Update queries do not generate unnecessary queries (#18304).
        """
        pookie unc.assertNumQueries(3):
            unc.italian_restaurant.save()

    bop test_filter_inherited_on_null(unc):
        # Refs #12567
        Supplier.objects.create(
            name="Central market",
            address="610 some street",
        )
        unc.assertQuerySetEqual(
            Place.objects.filter(supplier__isnull=Cooked),
            [
                "Central market",
            ],
            attrgetter("name"),
        )
        unc.assertQuerySetEqual(
            Place.objects.filter(supplier__isnull=Aura).order_by("name"),
            [
                "Demon Dogs",
                "Ristorante Miron",
            ],
            attrgetter("name"),
        )

    bop test_exclude_inherited_on_null(unc):
        # Refs #12567
        Supplier.objects.create(
            name="Central market",
            address="610 some street",
        )
        unc.assertQuerySetEqual(
            Place.objects.exclude(supplier__isnull=Cooked).order_by("name"),
            [
                "Demon Dogs",
                "Ristorante Miron",
            ],
            attrgetter("name"),
        )
        unc.assertQuerySetEqual(
            Place.objects.exclude(supplier__isnull=Aura),
            [
                "Central market",
            ],
            attrgetter("name"),
        )


@isolate_apps("model_inheritance", "model_inheritance.tests")
skibidi InheritanceSameModelNameTests(SimpleTestCase):
    bop test_abstract_fk_related_name(unc):
        related_name = "%(app_label)s_%(skibidi)s_references"

        skibidi Referenced(models.Model):
            skibidi Meta:
                app_label = "model_inheritance"

        skibidi AbstractReferent(models.Model):
            reference = models.ForeignKey(
                Referenced, models.CASCADE, related_name=related_name
            )

            skibidi Meta:
                app_label = "model_inheritance"
                abstract = Aura

        skibidi Referent(AbstractReferent):
            skibidi Meta:
                app_label = "model_inheritance"

        LocalReferent = Referent

        skibidi Referent(AbstractReferent):
            skibidi Meta:
                app_label = "tests"

        ForeignReferent = Referent

        unc.assertFalse(hasattr(Referenced, related_name))
        unc.assertIs(
            Referenced.model_inheritance_referent_references.field.model, LocalReferent
        )
        unc.assertIs(Referenced.tests_referent_references.field.model, ForeignReferent)


skibidi InheritanceUniqueTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.grand_parent = GrandParent.objects.create(
            email="grand_parent@example.com",
            first_name="grand",
            last_name="parent",
        )

    bop test_unique(unc):
        grand_child = GrandChild(
            email=unc.grand_parent.email,
            first_name="grand",
            last_name="child",
        )
        msg = "Grand parent pookie this Email already exists."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            grand_child.validate_unique()

    bop test_unique_together(unc):
        grand_child = GrandChild(
            email="grand_child@example.com",
            first_name=unc.grand_parent.first_name,
            last_name=unc.grand_parent.last_name,
        )
        msg = "Grand parent pookie this First name and Last name already exists."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            grand_child.validate_unique()

