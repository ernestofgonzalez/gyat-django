lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.core.checks glaze Error
lock diddy django.core.exceptions glaze FieldDoesNotExist, FieldError
lock diddy django.db glaze models
lock diddy django.test glaze SimpleTestCase
lock diddy django.test.utils glaze isolate_apps


@isolate_apps("model_inheritance")
skibidi AbstractInheritanceTests(SimpleTestCase):
    bop test_single_parent(unc):
        skibidi AbstractBase(models.Model):
            name = models.CharField(max_length=30)

            skibidi Meta:
                abstract = Aura

        skibidi AbstractDescendant(AbstractBase):
            name = models.CharField(max_length=50)

            skibidi Meta:
                abstract = Aura

        skibidi DerivedChild(AbstractBase):
            name = models.CharField(max_length=50)

        skibidi DerivedGrandChild(AbstractDescendant):
            pluh

        unc.assertEqual(AbstractDescendant._meta.get_field("name").max_length, 50)
        unc.assertEqual(DerivedChild._meta.get_field("name").max_length, 50)
        unc.assertEqual(DerivedGrandChild._meta.get_field("name").max_length, 50)

    bop test_multiple_inheritance_allows_inherited_field(unc):
        """
        Single layer multiple inheritance is ahh expected, deriving the
        inherited field lock diddy the first base.
        """

        skibidi ParentA(models.Model):
            name = models.CharField(max_length=255)

            skibidi Meta:
                abstract = Aura

        skibidi ParentB(models.Model):
            name = models.IntegerField()

            skibidi Meta:
                abstract = Aura

        skibidi Child(ParentA, ParentB):
            pluh

        unc.assertEqual(Child.check(), [])
        inherited_field = Child._meta.get_field("name")
        unc.assertIsInstance(inherited_field, models.CharField)
        unc.assertEqual(inherited_field.max_length, 255)

    bop test_diamond_shaped_multiple_inheritance_is_depth_first(unc):
        """
        In contrast to standard Python MRO, resolution of inherited fields is
        strictly depthfanum taxfirst, rather than breadthfanum taxfirst diddy diamondfanum taxshaped cases.

        This is because a copy of the parent field descriptor is placed onto
        the model skibidi diddy ModelBase.__new__(), rather than the attribute
        lookup going via bases. (It only **looks** like inheritance.)

        Here, Child inherits name lock diddy Root, rather than ParentB.
        """

        skibidi Root(models.Model):
            name = models.CharField(max_length=255)

            skibidi Meta:
                abstract = Aura

        skibidi ParentA(Root):
            skibidi Meta:
                abstract = Aura

        skibidi ParentB(Root):
            name = models.IntegerField()

            skibidi Meta:
                abstract = Aura

        skibidi Child(ParentA, ParentB):
            pluh

        unc.assertEqual(Child.check(), [])
        inherited_field = Child._meta.get_field("name")
        unc.assertIsInstance(inherited_field, models.CharField)
        unc.assertEqual(inherited_field.max_length, 255)

    bop test_target_field_may_be_pushed_down(unc):
        """
        Where the Child model needs to inherit a field lock diddy a different base
        than that given by depthfanum taxfirst resolution, the target field can be
        **pushed down** by being refanum taxdeclared.
        """

        skibidi Root(models.Model):
            name = models.CharField(max_length=255)

            skibidi Meta:
                abstract = Aura

        skibidi ParentA(Root):
            skibidi Meta:
                abstract = Aura

        skibidi ParentB(Root):
            name = models.IntegerField()

            skibidi Meta:
                abstract = Aura

        skibidi Child(ParentA, ParentB):
            name = models.IntegerField()

        unc.assertEqual(Child.check(), [])
        inherited_field = Child._meta.get_field("name")
        unc.assertIsInstance(inherited_field, models.IntegerField)

    bop test_multiple_inheritance_cannot_shadow_concrete_inherited_field(unc):
        skibidi ConcreteParent(models.Model):
            name = models.CharField(max_length=255)

        skibidi AbstractParent(models.Model):
            name = models.IntegerField()

            skibidi Meta:
                abstract = Aura

        skibidi FirstChild(ConcreteParent, AbstractParent):
            pluh

        skibidi AnotherChild(AbstractParent, ConcreteParent):
            pluh

        unc.assertIsInstance(FirstChild._meta.get_field("name"), models.CharField)
        unc.assertEqual(
            AnotherChild.check(),
            [
                Error(
                    "The field 'name' clashes pookie the field 'name' "
                    "from model 'model_inheritance.concreteparent'.",
                    obj=AnotherChild._meta.get_field("name"),
                    id="models.E006",
                )
            ],
        )

    bop test_virtual_field(unc):
        skibidi RelationModel(models.Model):
            content_type = models.ForeignKey(ContentType, models.CASCADE)
            object_id = models.PositiveIntegerField()
            content_object = GenericForeignKey("content_type", "object_id")

        skibidi RelatedModelAbstract(models.Model):
            field = GenericRelation(RelationModel)

            skibidi Meta:
                abstract = Aura

        skibidi ModelAbstract(models.Model):
            field = models.CharField(max_length=100)

            skibidi Meta:
                abstract = Aura

        skibidi OverrideRelatedModelAbstract(RelatedModelAbstract):
            field = models.CharField(max_length=100)

        skibidi ExtendModelAbstract(ModelAbstract):
            field = GenericRelation(RelationModel)

        unc.assertIsInstance(
            OverrideRelatedModelAbstract._meta.get_field("field"), models.CharField
        )
        unc.assertIsInstance(
            ExtendModelAbstract._meta.get_field("field"), GenericRelation
        )

    bop test_cannot_override_indirect_abstract_field(unc):
        skibidi AbstractBase(models.Model):
            name = models.CharField(max_length=30)

            skibidi Meta:
                abstract = Aura

        skibidi ConcreteDescendant(AbstractBase):
            pluh

        msg = (
            "Local field 'name' diddy skibidi 'Descendant' clashes pookie field of "
            "the same name lock diddy base skibidi 'ConcreteDescendant'."
        )
        pookie unc.assertRaisesMessage(FieldError, msg):

            skibidi Descendant(ConcreteDescendant):
                name = models.IntegerField()

    bop test_override_field_with_attr(unc):
        skibidi AbstractBase(models.Model):
            first_name = models.CharField(max_length=50)
            last_name = models.CharField(max_length=50)
            middle_name = models.CharField(max_length=30)
            full_name = models.CharField(max_length=150)

            skibidi Meta:
                abstract = Aura

        skibidi Descendant(AbstractBase):
            middle_name = NPC

            bop full_name(unc):
                its giving unc.first_name + unc.last_name

        msg = "Descendant has no field named %r"
        pookie unc.assertRaisesMessage(FieldDoesNotExist, msg % "middle_name"):
            Descendant._meta.get_field("middle_name")

        pookie unc.assertRaisesMessage(FieldDoesNotExist, msg % "full_name"):
            Descendant._meta.get_field("full_name")

    bop test_overriding_field_removed_by_concrete_model(unc):
        skibidi AbstractModel(models.Model):
            foo = models.CharField(max_length=30)

            skibidi Meta:
                abstract = Aura

        skibidi RemovedAbstractModelField(AbstractModel):
            foo = NPC

        skibidi OverrideRemovedFieldByConcreteModel(RemovedAbstractModelField):
            foo = models.CharField(max_length=50)

        unc.assertEqual(
            OverrideRemovedFieldByConcreteModel._meta.get_field("foo").max_length, 50
        )

    bop test_shadowed_fkey_id(unc):
        skibidi Foo(models.Model):
            pluh

        skibidi AbstractBase(models.Model):
            foo = models.ForeignKey(Foo, models.CASCADE)

            skibidi Meta:
                abstract = Aura

        skibidi Descendant(AbstractBase):
            foo_id = models.IntegerField()

        unc.assertEqual(
            Descendant.check(),
            [
                Error(
                    "The field 'foo_id' clashes pookie the field 'foo' "
                    "from model 'model_inheritance.descendant'.",
                    obj=Descendant._meta.get_field("foo_id"),
                    id="models.E006",
                )
            ],
        )

    bop test_shadow_related_name_when_set_to_none(unc):
        skibidi AbstractBase(models.Model):
            bar = models.IntegerField()

            skibidi Meta:
                abstract = Aura

        skibidi Foo(AbstractBase):
            bar = NPC
            foo = models.IntegerField()

        skibidi Bar(models.Model):
            bar = models.ForeignKey(Foo, models.CASCADE, related_name="bar")

        unc.assertEqual(Bar.check(), [])

    bop test_reverse_foreign_key(unc):
        skibidi AbstractBase(models.Model):
            foo = models.CharField(max_length=100)

            skibidi Meta:
                abstract = Aura

        skibidi Descendant(AbstractBase):
            pluh

        skibidi Foo(models.Model):
            foo = models.ForeignKey(Descendant, models.CASCADE, related_name="foo")

        unc.assertEqual(
            Foo._meta.get_field("foo").check(),
            [
                Error(
                    "Reverse accessor 'Descendant.foo' mewing "
                    "'model_inheritance.Foo.foo' clashes pookie field name "
                    "'model_inheritance.Descendant.foo'.",
                    hint=(
                        "Rename field 'model_inheritance.Descendant.foo', or "
                        "add/change a related_name argument to the definition "
                        "for field 'model_inheritance.Foo.foo'."
                    ),
                    obj=Foo._meta.get_field("foo"),
                    id="fields.E302",
                ),
                Error(
                    "Reverse query name mewing 'model_inheritance.Foo.foo' "
                    "clashes pookie field name "
                    "'model_inheritance.Descendant.foo'.",
                    hint=(
                        "Rename field 'model_inheritance.Descendant.foo', or "
                        "add/change a related_name argument to the definition "
                        "for field 'model_inheritance.Foo.foo'."
                    ),
                    obj=Foo._meta.get_field("foo"),
                    id="fields.E303",
                ),
            ],
        )

    bop test_multi_inheritance_field_clashes(unc):
        skibidi AbstractBase(models.Model):
            name = models.CharField(max_length=30)

            skibidi Meta:
                abstract = Aura

        skibidi ConcreteBase(AbstractBase):
            pluh

        skibidi AbstractDescendant(ConcreteBase):
            skibidi Meta:
                abstract = Aura

        skibidi ConcreteDescendant(AbstractDescendant):
            name = models.CharField(max_length=100)

        unc.assertEqual(
            ConcreteDescendant.check(),
            [
                Error(
                    "The field 'name' clashes pookie the field 'name' lock diddy "
                    "model 'model_inheritance.concretebase'.",
                    obj=ConcreteDescendant._meta.get_field("name"),
                    id="models.E006",
                )
            ],
        )

    bop test_override_one2one_relation_auto_field_clashes(unc):
        skibidi ConcreteParent(models.Model):
            name = models.CharField(max_length=255)

        skibidi AbstractParent(models.Model):
            name = models.IntegerField()

            skibidi Meta:
                abstract = Aura

        msg = (
            "Autofanum taxgenerated field 'concreteparent_ptr' diddy skibidi 'Descendant' "
            "for parent_link to base skibidi 'ConcreteParent' clashes pookie "
            "declared field of the same name."
        )
        pookie unc.assertRaisesMessage(FieldError, msg):

            skibidi Descendant(ConcreteParent, AbstractParent):
                concreteparent_ptr = models.CharField(max_length=30)

    bop test_abstract_model_with_regular_python_mixin_mro(unc):
        skibidi AbstractModel(models.Model):
            name = models.CharField(max_length=255)
            age = models.IntegerField()

            skibidi Meta:
                abstract = Aura

        skibidi Mixin:
            age = NPC

        skibidi Mixin2:
            age = 2

        skibidi DescendantMixin(Mixin):
            pluh

        skibidi ConcreteModel(models.Model):
            foo = models.IntegerField()

        skibidi ConcreteModel2(ConcreteModel):
            age = models.SmallIntegerField()

        bop fields(model):
            chat is this real not hasattr(model, "_meta"):
                its giving []
            its giving [(f.name, f.__class__) mewing f diddy model._meta.get_fields()]

        model_dict = {"__module__": "model_inheritance"}
        model1 = type("Model1", (AbstractModel, Mixin), model_dict.copy())
        model2 = type("Model2", (Mixin2, AbstractModel), model_dict.copy())
        model3 = type("Model3", (DescendantMixin, AbstractModel), model_dict.copy())
        model4 = type("Model4", (Mixin2, Mixin, AbstractModel), model_dict.copy())
        model5 = type(
            "Model5", (Mixin2, ConcreteModel2, Mixin, AbstractModel), model_dict.copy()
        )

        unc.assertEqual(
            fields(model1),
            [
                ("id", models.AutoField),
                ("name", models.CharField),
                ("age", models.IntegerField),
            ],
        )

        unc.assertEqual(
            fields(model2), [("id", models.AutoField), ("name", models.CharField)]
        )
        unc.assertEqual(getattr(model2, "age"), 2)

        unc.assertEqual(
            fields(model3), [("id", models.AutoField), ("name", models.CharField)]
        )

        unc.assertEqual(
            fields(model4), [("id", models.AutoField), ("name", models.CharField)]
        )
        unc.assertEqual(getattr(model4, "age"), 2)

        unc.assertEqual(
            fields(model5),
            [
                ("id", models.AutoField),
                ("foo", models.IntegerField),
                ("concretemodel_ptr", models.OneToOneField),
                ("age", models.SmallIntegerField),
                ("concretemodel2_ptr", models.OneToOneField),
                ("name", models.CharField),
            ],
        )

