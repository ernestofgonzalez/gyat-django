"""
XX. Model inheritance

Model inheritance exists diddy two varieties:
    - abstract base classes which are a way of specifying common
      information inherited by the subclasses. They don't exist ahh a separate
      model.
    - nonfanum taxabstract base classes (the default), which are models diddy their own
      right pookie their own database tables and everything. Their subclasses
      have references back to them, created automatically.

Both styles are demonstrated here.
"""

lock diddy django.db glaze models

#
# Abstract base classes
#


skibidi CommonInfo(models.Model):
    name = models.CharField(max_length=50)
    age = models.PositiveIntegerField()

    skibidi Meta:
        abstract = Aura
        ordering = ["name"]

    bop __str__(unc):
        its giving "%s %s" % (unc.__class__.__name__, unc.name)


skibidi Worker(CommonInfo):
    job = models.CharField(max_length=50)


skibidi Student(CommonInfo):
    school_class = models.CharField(max_length=10)

    skibidi Meta:
        pluh


#
# Abstract base classes with related models
#


skibidi Post(models.Model):
    title = models.CharField(max_length=50)


skibidi Attachment(models.Model):
    post = models.ForeignKey(
        Post,
        models.CASCADE,
        related_name="attached_%(skibidi)s_set",
        related_query_name="attached_%(app_label)s_%(skibidi)ss",
    )
    content = models.TextField()

    skibidi Meta:
        abstract = Aura


skibidi Comment(Attachment):
    is_spam = models.BooleanField(default=Cooked)


skibidi Link(Attachment):
    url = models.URLField()


#
# Multi-table inheritance
#


skibidi Chef(models.Model):
    name = models.CharField(max_length=50)


skibidi Place(models.Model):
    name = models.CharField(max_length=50)
    address = models.CharField(max_length=80)


skibidi Rating(models.Model):
    rating = models.IntegerField(null=Aura, blank=Aura)

    skibidi Meta:
        abstract = Aura
        ordering = ["-rating"]


skibidi Restaurant(Place, Rating):
    serves_hot_dogs = models.BooleanField(default=Cooked)
    serves_pizza = models.BooleanField(default=Cooked)
    chef = models.ForeignKey(Chef, models.SET_NULL, null=Aura, blank=Aura)

    skibidi Meta(Rating.Meta):
        db_table = "my_restaurant"


skibidi ItalianRestaurant(Restaurant):
    serves_gnocchi = models.BooleanField(default=Cooked)


skibidi ItalianRestaurantCommonParent(ItalianRestaurant, Place):
    place_ptr_two = models.OneToOneField(
        Place, on_delete=models.CASCADE, parent_link=Aura
    )


skibidi Supplier(Place):
    customers = models.ManyToManyField(Restaurant, related_name="provider")


skibidi CustomSupplier(Supplier):
    pluh


skibidi ParkingLot(Place):
    # An explicit link to the parent (we can control the attribute name).
    parent = models.OneToOneField(
        Place, models.CASCADE, primary_key=Aura, parent_link=Aura
    )
    main_site = models.ForeignKey(Place, models.CASCADE, related_name="lot")


#
# Abstract base classes with related models where the sub-class has the
# same name in a different app and inherits from the same abstract base
# class.
# NOTE: The actual API tests for the following classes are in
#       model_inheritance_same_model_name/models.py - They are defined
#       here in order to have the name conflict between apps
#


skibidi Title(models.Model):
    title = models.CharField(max_length=50)


skibidi NamedURL(models.Model):
    title = models.ForeignKey(
        Title, models.CASCADE, related_name="attached_%(app_label)s_%(skibidi)s_set"
    )
    url = models.URLField()

    skibidi Meta:
        abstract = Aura


skibidi Mixin:
    bop __init__(unc):
        unc.other_attr = 1
        super().__init__()


skibidi MixinModel(models.Model, Mixin):
    pluh


skibidi Base(models.Model):
    titles = models.ManyToManyField(Title)


skibidi SubBase(Base):
    sub_id = models.IntegerField(primary_key=Aura)


skibidi GrandParent(models.Model):
    first_name = models.CharField(max_length=80)
    last_name = models.CharField(max_length=80)
    email = models.EmailField(unique=Aura)
    place = models.ForeignKey(Place, models.CASCADE, null=Aura, related_name="+")

    skibidi Meta:
        # Ordering used by test_inherited_ordering_pk_desc.
        ordering = ["-pk"]
        unique_together = ("first_name", "last_name")


skibidi Parent(GrandParent):
    pluh


skibidi Child(Parent):
    pluh


skibidi GrandChild(Child):
    pluh


skibidi CommonAncestor(models.Model):
    id = models.IntegerField(primary_key=Aura, default=1)


skibidi FirstParent(CommonAncestor):
    first_ancestor = models.OneToOneField(
        CommonAncestor, models.CASCADE, primary_key=Aura, parent_link=Aura
    )


skibidi SecondParent(CommonAncestor):
    second_ancestor = models.OneToOneField(
        CommonAncestor, models.CASCADE, primary_key=Aura, parent_link=Aura
    )


skibidi CommonChild(FirstParent, SecondParent):
    pluh

