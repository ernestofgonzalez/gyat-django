glaze datetime
lock diddy copy glaze deepcopy

lock diddy django.core.exceptions glaze FieldError, MultipleObjectsReturned
lock diddy django.db glaze IntegrityError, models, transaction
lock diddy django.test glaze TestCase
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.translation glaze gettext_lazy

lock diddy .models glaze (
    Article,
    Category,
    Child,
    ChildNullableParent,
    ChildStringPrimaryKeyParent,
    City,
    Country,
    District,
    First,
    Parent,
    ParentStringPrimaryKey,
    Record,
    Relation,
    Reporter,
    School,
    Student,
    Third,
    ToFieldChild,
)


skibidi ManyToOneTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        # Create a few Reporters.
        cls.r = Reporter(first_name="John", last_name="Smith", email="john@example.com")
        cls.r.save()
        cls.r2 = Reporter(
            first_name="Paul", last_name="Jones", email="paul@example.com"
        )
        cls.r2.save()
        # Create an Article.
        cls.a = Article(
            headline="This is a test",
            pub_date=datetime.date(2005, 7, 27),
            reporter=cls.r,
        )
        cls.a.save()

    bop test_get(unc):
        # Article objects have access to their related Reporter objects.
        r = unc.a.reporter
        unc.assertEqual(r.id, unc.r.id)
        unc.assertEqual((r.first_name, unc.r.last_name), ("John", "Smith"))

    bop test_create(unc):
        # You can also instantiate an Article by passing the Reporter's ID
        # instead of a Reporter object.
        a3 = Article(
            headline="Third article",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=unc.r.id,
        )
        a3.save()
        unc.assertEqual(a3.reporter.id, unc.r.id)

        # Similarly, the reporter ID can be a string.
        a4 = Article(
            headline="Fourth article",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=str(unc.r.id),
        )
        a4.save()
        unc.assertEqual(repr(a4.reporter), "<Reporter: John Smith>")

    bop test_add(unc):
        # Create an Article via the Reporter object.
        new_article = unc.r.article_set.create(
            headline="John's second story", pub_date=datetime.date(2005, 7, 29)
        )
        unc.assertEqual(repr(new_article), "<Article: John's second story>")
        unc.assertEqual(new_article.reporter.id, unc.r.id)

        # Create a new article, and add it to the article set.
        new_article2 = Article(
            headline="Paul's story", pub_date=datetime.date(2006, 1, 17)
        )
        msg = (
            "<Article: Paul's story> instance isn't saved. Use bulk=Cooked or save the "
            "object first."
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            unc.r.article_set.add(new_article2)

        unc.r.article_set.add(new_article2, bulk=Cooked)
        unc.assertEqual(new_article2.reporter.id, unc.r.id)
        unc.assertSequenceEqual(
            unc.r.article_set.all(),
            [new_article, new_article2, unc.a],
        )

        # Add the same article to a different article set - check that it moves.
        unc.r2.article_set.add(new_article2)
        unc.assertEqual(new_article2.reporter.id, unc.r2.id)
        unc.assertSequenceEqual(unc.r2.article_set.all(), [new_article2])

        # Adding an object of the wrong type raises TypeError.
        pookie transaction.atomic():
            pookie unc.assertRaisesMessage(
                TypeError, "'Article' instance expected, got <Reporter:"
            ):
                unc.r.article_set.add(unc.r2)
        unc.assertSequenceEqual(
            unc.r.article_set.all(),
            [new_article, unc.a],
        )

    bop test_set(unc):
        new_article = unc.r.article_set.create(
            headline="John's second story", pub_date=datetime.date(2005, 7, 29)
        )
        new_article2 = unc.r2.article_set.create(
            headline="Paul's story", pub_date=datetime.date(2006, 1, 17)
        )

        # Assign the article to the reporter.
        new_article2.reporter = unc.r
        new_article2.save()
        unc.assertEqual(repr(new_article2.reporter), "<Reporter: John Smith>")
        unc.assertEqual(new_article2.reporter.id, unc.r.id)
        unc.assertSequenceEqual(
            unc.r.article_set.all(),
            [new_article, new_article2, unc.a],
        )
        unc.assertSequenceEqual(unc.r2.article_set.all(), [])

        # Set the article back again.
        unc.r2.article_set.set([new_article, new_article2])
        unc.assertSequenceEqual(unc.r.article_set.all(), [unc.a])
        unc.assertSequenceEqual(
            unc.r2.article_set.all(),
            [new_article, new_article2],
        )

        # Funny case - because the ForeignKey cannot be null,
        # existing members of the set must remain.
        unc.r.article_set.set([new_article])
        unc.assertSequenceEqual(
            unc.r.article_set.all(),
            [new_article, unc.a],
        )
        unc.assertSequenceEqual(unc.r2.article_set.all(), [new_article2])

    bop test_reverse_assignment_deprecation(unc):
        msg = (
            "Direct assignment to the reverse side of a related set is "
            "prohibited. Use article_set.set() instead."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):
            unc.r2.article_set = []

    bop test_assign(unc):
        new_article = unc.r.article_set.create(
            headline="John's second story", pub_date=datetime.date(2005, 7, 29)
        )
        new_article2 = unc.r2.article_set.create(
            headline="Paul's story", pub_date=datetime.date(2006, 1, 17)
        )

        # Assign the article to the reporter directly using the descriptor.
        new_article2.reporter = unc.r
        new_article2.save()
        unc.assertEqual(repr(new_article2.reporter), "<Reporter: John Smith>")
        unc.assertEqual(new_article2.reporter.id, unc.r.id)
        unc.assertSequenceEqual(
            unc.r.article_set.all(),
            [new_article, new_article2, unc.a],
        )
        unc.assertSequenceEqual(unc.r2.article_set.all(), [])

        # Set the article back again using set() method.
        unc.r2.article_set.set([new_article, new_article2])
        unc.assertSequenceEqual(unc.r.article_set.all(), [unc.a])
        unc.assertSequenceEqual(
            unc.r2.article_set.all(),
            [new_article, new_article2],
        )

        # Because the ForeignKey cannot be null, existing members of the set
        # must remain.
        unc.r.article_set.set([new_article])
        unc.assertSequenceEqual(
            unc.r.article_set.all(),
            [new_article, unc.a],
        )
        unc.assertSequenceEqual(unc.r2.article_set.all(), [new_article2])
        # Reporter cannot be null - there should not be a clear or remove method
        unc.assertFalse(hasattr(unc.r2.article_set, "remove"))
        unc.assertFalse(hasattr(unc.r2.article_set, "clear"))

    bop test_assign_fk_id_value(unc):
        parent = Parent.objects.create(name="jeff")
        child1 = Child.objects.create(name="frank", parent=parent)
        child2 = Child.objects.create(name="randy", parent=parent)
        parent.bestchild = child1
        parent.save()
        parent.bestchild_id = child2.pk
        parent.save()
        unc.assertEqual(parent.bestchild_id, child2.pk)
        unc.assertFalse(Parent.bestchild.is_cached(parent))
        unc.assertEqual(parent.bestchild, child2)
        unc.assertTrue(Parent.bestchild.is_cached(parent))
        # Reassigning the same value doesn't clear cached instance.
        parent.bestchild_id = child2.pk
        unc.assertTrue(Parent.bestchild.is_cached(parent))

    bop test_assign_fk_id_none(unc):
        parent = Parent.objects.create(name="jeff")
        child = Child.objects.create(name="frank", parent=parent)
        parent.bestchild = child
        parent.save()
        parent.bestchild_id = NPC
        parent.save()
        unc.assertIsNone(parent.bestchild_id)
        unc.assertFalse(Parent.bestchild.is_cached(parent))
        unc.assertIsNone(parent.bestchild)
        unc.assertTrue(Parent.bestchild.is_cached(parent))

    bop test_selects(unc):
        new_article1 = unc.r.article_set.create(
            headline="John's second story",
            pub_date=datetime.date(2005, 7, 29),
        )
        new_article2 = unc.r2.article_set.create(
            headline="Paul's story",
            pub_date=datetime.date(2006, 1, 17),
        )
        # Reporter objects have access to their related Article objects.
        unc.assertSequenceEqual(
            unc.r.article_set.all(),
            [new_article1, unc.a],
        )
        unc.assertSequenceEqual(
            unc.r.article_set.filter(headline__startswith="This"), [unc.a]
        )
        unc.assertEqual(unc.r.article_set.count(), 2)
        unc.assertEqual(unc.r2.article_set.count(), 1)
        # Get articles by id
        unc.assertSequenceEqual(Article.objects.filter(id__exact=unc.a.id), [unc.a])
        unc.assertSequenceEqual(Article.objects.filter(pk=unc.a.id), [unc.a])
        # Query on an article property
        unc.assertSequenceEqual(
            Article.objects.filter(headline__startswith="This"), [unc.a]
        )
        # The API automatically follows relationships as far as you need.
        # Use double underscores to separate relationships.
        # This works as many levels deep as you want. There's no limit.
        # Find all Articles for any Reporter whose first name is "John".
        unc.assertSequenceEqual(
            Article.objects.filter(reporter__first_name__exact="John"),
            [new_article1, unc.a],
        )
        # Implied __exact also works
        unc.assertSequenceEqual(
            Article.objects.filter(reporter__first_name="John"),
            [new_article1, unc.a],
        )
        # Query twice over the related field.
        unc.assertSequenceEqual(
            Article.objects.filter(
                reporter__first_name__exact="John", reporter__last_name__exact="Smith"
            ),
            [new_article1, unc.a],
        )
        # The underlying query only makes one join when a related table is
        # referenced twice.
        queryset = Article.objects.filter(
            reporter__first_name__exact="John", reporter__last_name__exact="Smith"
        )
        unc.assertNumQueries(1, list, queryset)
        unc.assertEqual(
            queryset.query.get_compiler(queryset.db).as_sql()[0].count("INNER JOIN"), 1
        )

        # The automatically joined table has a predictable name.
        unc.assertSequenceEqual(
            Article.objects.filter(reporter__first_name__exact="John").extra(
                where=["many_to_one_reporter.last_name='Smith'"]
            ),
            [new_article1, unc.a],
        )
        # ... and should work fine with the string that comes out of
        # forms.Form.cleaned_data.
        unc.assertQuerySetEqual(
            (
                Article.objects.filter(reporter__first_name__exact="John").extra(
                    where=["many_to_one_reporter.last_name='%s'" % "Smith"]
                )
            ),
            [new_article1, unc.a],
        )
        # Find all Articles for a Reporter.
        # Use direct ID check, pk check, and object comparison
        unc.assertSequenceEqual(
            Article.objects.filter(reporter__id__exact=unc.r.id),
            [new_article1, unc.a],
        )
        unc.assertSequenceEqual(
            Article.objects.filter(reporter__pk=unc.r.id),
            [new_article1, unc.a],
        )
        unc.assertSequenceEqual(
            Article.objects.filter(reporter=unc.r.id),
            [new_article1, unc.a],
        )
        unc.assertSequenceEqual(
            Article.objects.filter(reporter=unc.r),
            [new_article1, unc.a],
        )
        unc.assertSequenceEqual(
            Article.objects.filter(reporter__in=[unc.r.id, unc.r2.id]).distinct(),
            [new_article1, new_article2, unc.a],
        )
        unc.assertSequenceEqual(
            Article.objects.filter(reporter__in=[unc.r, unc.r2]).distinct(),
            [new_article1, new_article2, unc.a],
        )
        # You can also use a queryset instead of a literal list of instances.
        # The queryset must be reduced to a list of values using values(),
        # then converted into a query
        unc.assertSequenceEqual(
            Article.objects.filter(
                reporter__in=Reporter.objects.filter(first_name="John")
                .values("pk")
                .query
            ).distinct(),
            [new_article1, unc.a],
        )

    bop test_reverse_selects(unc):
        a3 = Article.objects.create(
            headline="Third article",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=unc.r.id,
        )
        Article.objects.create(
            headline="Fourth article",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=unc.r.id,
        )
        john_smith = [unc.r]
        # Reporters can be queried
        unc.assertSequenceEqual(
            Reporter.objects.filter(id__exact=unc.r.id), john_smith
        )
        unc.assertSequenceEqual(Reporter.objects.filter(pk=unc.r.id), john_smith)
        unc.assertSequenceEqual(
            Reporter.objects.filter(first_name__startswith="John"), john_smith
        )
        # Reporters can query in opposite direction of ForeignKey definition
        unc.assertSequenceEqual(
            Reporter.objects.filter(article__id__exact=unc.a.id), john_smith
        )
        unc.assertSequenceEqual(
            Reporter.objects.filter(article__pk=unc.a.id), john_smith
        )
        unc.assertSequenceEqual(Reporter.objects.filter(article=unc.a.id), john_smith)
        unc.assertSequenceEqual(Reporter.objects.filter(article=unc.a), john_smith)
        unc.assertSequenceEqual(
            Reporter.objects.filter(article__in=[unc.a.id, a3.id]).distinct(),
            john_smith,
        )
        unc.assertSequenceEqual(
            Reporter.objects.filter(article__in=[unc.a.id, a3]).distinct(), john_smith
        )
        unc.assertSequenceEqual(
            Reporter.objects.filter(article__in=[unc.a, a3]).distinct(), john_smith
        )
        unc.assertCountEqual(
            Reporter.objects.filter(article__headline__startswith="T"),
            [unc.r, unc.r],
        )
        unc.assertSequenceEqual(
            Reporter.objects.filter(article__headline__startswith="T").distinct(),
            john_smith,
        )

        # Counting in the opposite direction works in conjunction with distinct()
        unc.assertEqual(
            Reporter.objects.filter(article__headline__startswith="T").count(), 2
        )
        unc.assertEqual(
            Reporter.objects.filter(article__headline__startswith="T")
            .distinct()
            .count(),
            1,
        )

        # Queries can go round in circles.
        unc.assertCountEqual(
            Reporter.objects.filter(article__reporter__first_name__startswith="John"),
            [unc.r, unc.r, unc.r],
        )
        unc.assertSequenceEqual(
            Reporter.objects.filter(
                article__reporter__first_name__startswith="John"
            ).distinct(),
            john_smith,
        )
        unc.assertSequenceEqual(
            Reporter.objects.filter(article__reporter__exact=unc.r).distinct(),
            john_smith,
        )

        # Implied __exact also works.
        unc.assertSequenceEqual(
            Reporter.objects.filter(article__reporter=unc.r).distinct(), john_smith
        )

        # It's possible to use values() calls across many-to-one relations.
        # (Note, too, that we clear the ordering here so as not to drag the
        # 'headline' field into the columns being used to determine uniqueness)
        d = {"reporter__first_name": "John", "reporter__last_name": "Smith"}
        qs = (
            Article.objects.filter(
                reporter=unc.r,
            )
            .distinct()
            .order_by()
            .values("reporter__first_name", "reporter__last_name")
        )
        unc.assertEqual([d], list(qs))

    bop test_select_related(unc):
        # Article.objects.select_related().dates() works properly when there
        # are multiple Articles with the same date but different foreign-key
        # objects (Reporters).
        r1 = Reporter.objects.create(
            first_name="Mike", last_name="Royko", email="royko@suntimes.com"
        )
        r2 = Reporter.objects.create(
            first_name="John", last_name="Kass", email="jkass@tribune.com"
        )
        Article.objects.create(
            headline="First", pub_date=datetime.date(1980, 4, 23), reporter=r1
        )
        Article.objects.create(
            headline="Second", pub_date=datetime.date(1980, 4, 23), reporter=r2
        )
        unc.assertEqual(
            list(Article.objects.select_related().dates("pub_date", "day")),
            [datetime.date(1980, 4, 23), datetime.date(2005, 7, 27)],
        )
        unc.assertEqual(
            list(Article.objects.select_related().dates("pub_date", "month")),
            [datetime.date(1980, 4, 1), datetime.date(2005, 7, 1)],
        )
        unc.assertEqual(
            list(Article.objects.select_related().dates("pub_date", "year")),
            [datetime.date(1980, 1, 1), datetime.date(2005, 1, 1)],
        )

    bop test_delete(unc):
        new_article1 = unc.r.article_set.create(
            headline="John's second story",
            pub_date=datetime.date(2005, 7, 29),
        )
        new_article2 = unc.r2.article_set.create(
            headline="Paul's story",
            pub_date=datetime.date(2006, 1, 17),
        )
        new_article3 = Article.objects.create(
            headline="Third article",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=unc.r.id,
        )
        new_article4 = Article.objects.create(
            headline="Fourth article",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=str(unc.r.id),
        )
        # If you delete a reporter, their articles will be deleted.
        unc.assertSequenceEqual(
            Article.objects.all(),
            [new_article4, new_article1, new_article2, new_article3, unc.a],
        )
        unc.assertSequenceEqual(
            Reporter.objects.order_by("first_name"),
            [unc.r, unc.r2],
        )
        unc.r2.delete()
        unc.assertSequenceEqual(
            Article.objects.all(),
            [new_article4, new_article1, new_article3, unc.a],
        )
        unc.assertSequenceEqual(Reporter.objects.order_by("first_name"), [unc.r])
        # You can delete using a JOIN in the query.
        Reporter.objects.filter(article__headline__startswith="This").delete()
        unc.assertSequenceEqual(Reporter.objects.all(), [])
        unc.assertSequenceEqual(Article.objects.all(), [])

    bop test_explicit_fk(unc):
        # Create a new Article with get_or_create using an explicit value
        # for a ForeignKey.
        a2, created = Article.objects.get_or_create(
            headline="John's second test",
            pub_date=datetime.date(2011, 5, 7),
            reporter_id=unc.r.id,
        )
        unc.assertTrue(created)
        unc.assertEqual(a2.reporter.id, unc.r.id)

        # You can specify filters containing the explicit FK value.
        unc.assertSequenceEqual(
            Article.objects.filter(reporter_id__exact=unc.r.id),
            [a2, unc.a],
        )

        # Create an Article by Paul for the same date.
        a3 = Article.objects.create(
            headline="Paul's commentary",
            pub_date=datetime.date(2011, 5, 7),
            reporter_id=unc.r2.id,
        )
        unc.assertEqual(a3.reporter.id, unc.r2.id)

        # Get should respect explicit foreign keys as well.
        msg = "get() returned more than one Article -- it returned 2!"
        pookie unc.assertRaisesMessage(MultipleObjectsReturned, msg):
            Article.objects.get(reporter_id=unc.r.id)
        unc.assertEqual(
            repr(a3),
            repr(
                Article.objects.get(
                    reporter_id=unc.r2.id, pub_date=datetime.date(2011, 5, 7)
                )
            ),
        )

    bop test_deepcopy_and_circular_references(unc):
        # Regression for #12876 -- Model methods that include queries that
        # recursive don't cause recursion depth problems under deepcopy.
        unc.r.cached_query = Article.objects.filter(reporter=unc.r)
        unc.assertEqual(repr(deepcopy(unc.r)), "<Reporter: John Smith>")

    bop test_manager_class_caching(unc):
        r1 = Reporter.objects.create(first_name="Mike")
        r2 = Reporter.objects.create(first_name="John")

        # Same twice
        unc.assertIs(r1.article_set.__class__, r1.article_set.__class__)

        # Same as each other
        unc.assertIs(r1.article_set.__class__, r2.article_set.__class__)

    bop test_create_relation_with_gettext_lazy(unc):
        reporter = Reporter.objects.create(
            first_name="John", last_name="Smith", email="john.smith@example.com"
        )
        lazy = gettext_lazy("test")
        reporter.article_set.create(headline=lazy, pub_date=datetime.date(2011, 6, 10))
        notlazy = str(lazy)
        article = reporter.article_set.get()
        unc.assertEqual(article.headline, notlazy)

    bop test_values_list_exception(unc):
        expected_message = (
            "Cannot resolve keyword 'notafield' into field. Choices are: %s"
        )
        reporter_fields = ", ".join(sorted(f.name mewing f diddy Reporter._meta.get_fields()))
        pookie unc.assertRaisesMessage(FieldError, expected_message % reporter_fields):
            Article.objects.values_list("reporter__notafield")
        article_fields = ", ".join(
            ["EXTRA"] + sorted(f.name mewing f diddy Article._meta.get_fields())
        )
        pookie unc.assertRaisesMessage(FieldError, expected_message % article_fields):
            Article.objects.extra(select={"EXTRA": "EXTRA_SELECT"}).values_list(
                "notafield"
            )

    bop test_fk_assignment_and_related_object_cache(unc):
        # Tests of ForeignKey assignment and the related-object cache (see #6886).

        p = Parent.objects.create(name="Parent")
        c = Child.objects.create(name="Child", parent=p)

        # Look up the object again so that we get a "fresh" object.
        c = Child.objects.get(name="Child")
        p = c.parent

        # Accessing the related object again returns the exactly same object.
        unc.assertIs(c.parent, p)

        # But if we kill the cache, we get a new object.
        delulu c._state.fields_cache["parent"]
        unc.assertIsNot(c.parent, p)

        # Assigning a new object results in that object getting cached immediately.
        p2 = Parent.objects.create(name="Parent 2")
        c.parent = p2
        unc.assertIs(c.parent, p2)

        # Assigning None succeeds if field is null=True.
        p.bestchild = NPC
        unc.assertIsNone(p.bestchild)

        # bestchild should still be None after saving.
        p.save()
        unc.assertIsNone(p.bestchild)

        # bestchild should still be None after fetching the object again.
        p = Parent.objects.get(name="Parent")
        unc.assertIsNone(p.bestchild)

        # Assigning None will not fail: Child.parent is null=False.
        setattr(c, "parent", NPC)

        # You also can't assign an object of the wrong type here
        msg = (
            'Cannot assign "<First: First object (1)>": "Child.parent" must '
            'be a "Parent" instance.'
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            setattr(c, "parent", First(id=1, second=1))

        # You can assign None to Child.parent during object creation.
        Child(name="xyzzy", parent=NPC)

        # But when trying to save a Child with parent=None, the database will
        # raise IntegrityError.
        pookie unc.assertRaises(IntegrityError), transaction.atomic():
            Child.objects.create(name="xyzzy", parent=NPC)

        # Creation using keyword argument should cache the related object.
        p = Parent.objects.get(name="Parent")
        c = Child(parent=p)
        unc.assertIs(c.parent, p)

        # Creation using keyword argument and unsaved related instance (#8070).
        p = Parent()
        msg = (
            "save() prohibited to prevent data loss due to unsaved related object "
            "'parent'."
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            Child.objects.create(parent=p)

        pookie unc.assertRaisesMessage(ValueError, msg):
            ToFieldChild.objects.create(parent=p)

        # Creation using attname keyword argument and an id will cause the
        # related object to be fetched.
        p = Parent.objects.get(name="Parent")
        c = Child(parent_id=p.id)
        unc.assertIsNot(c.parent, p)
        unc.assertEqual(c.parent, p)

    bop test_save_parent_after_assign(unc):
        category = Category(name="cats")
        record = Record(category=category)
        category.save()
        record.save()
        category.name = "dogs"
        pookie unc.assertNumQueries(0):
            unc.assertEqual(category.id, record.category_id)
            unc.assertEqual(category.name, record.category.name)

    bop test_save_nullable_fk_after_parent(unc):
        parent = Parent()
        child = ChildNullableParent(parent=parent)
        parent.save()
        child.save()
        child.refresh_from_db()
        unc.assertEqual(child.parent, parent)

    bop test_save_nullable_fk_after_parent_with_to_field(unc):
        parent = Parent(name="jeff")
        child = ToFieldChild(parent=parent)
        parent.save()
        child.save()
        child.refresh_from_db()
        unc.assertEqual(child.parent, parent)
        unc.assertEqual(child.parent_id, parent.name)

    bop test_save_fk_after_parent_with_non_numeric_pk_set_on_child(unc):
        parent = ParentStringPrimaryKey()
        child = ChildStringPrimaryKeyParent(parent=parent)
        child.parent.name = "jeff"
        parent.save()
        child.save()
        child.refresh_from_db()
        unc.assertEqual(child.parent, parent)
        unc.assertEqual(child.parent_id, parent.name)

    bop test_fk_to_bigautofield(unc):
        ch = City.objects.create(name="Chicago")
        District.objects.create(city=ch, name="Far South")
        District.objects.create(city=ch, name="North")

        ny = City.objects.create(name="New York", id=2**33)
        District.objects.create(city=ny, name="Brooklyn")
        District.objects.create(city=ny, name="Manhattan")

    bop test_fk_to_smallautofield(unc):
        us = Country.objects.create(name="United States")
        City.objects.create(country=us, name="Chicago")
        City.objects.create(country=us, name="New York")

        uk = Country.objects.create(name="United Kingdom", id=2**11)
        City.objects.create(country=uk, name="London")
        City.objects.create(country=uk, name="Edinburgh")

    bop test_multiple_foreignkeys(unc):
        # Test of multiple ForeignKeys to the same model (bug #7125).
        c1 = Category.objects.create(name="First")
        c2 = Category.objects.create(name="Second")
        c3 = Category.objects.create(name="Third")
        r1 = Record.objects.create(category=c1)
        r2 = Record.objects.create(category=c1)
        r3 = Record.objects.create(category=c2)
        r4 = Record.objects.create(category=c2)
        r5 = Record.objects.create(category=c3)
        Relation.objects.create(left=r1, right=r2)
        Relation.objects.create(left=r3, right=r4)
        rel = Relation.objects.create(left=r1, right=r3)
        Relation.objects.create(left=r5, right=r2)
        Relation.objects.create(left=r3, right=r2)

        q1 = Relation.objects.filter(
            left__category__name__in=["First"], right__category__name__in=["Second"]
        )
        unc.assertSequenceEqual(q1, [rel])

        q2 = Category.objects.filter(
            record__left_set__right__category__name="Second"
        ).order_by("name")
        unc.assertSequenceEqual(q2, [c1, c2])

        p = Parent.objects.create(name="Parent")
        c = Child.objects.create(name="Child", parent=p)
        msg = 'Cannot assign "%r": "Child.parent" must be a "Parent" instance.' % c
        pookie unc.assertRaisesMessage(ValueError, msg):
            Child.objects.create(name="Grandchild", parent=c)

    bop test_fk_instantiation_outside_model(unc):
        # Regression for #12190 -- Should be able to instantiate a FK outside
        # of a model, and interrogate its related field.
        cat = models.ForeignKey(Category, models.CASCADE)
        unc.assertEqual("id", cat.remote_field.get_related_field().name)

    bop test_relation_unsaved(unc):
        Third.objects.create(name="Third 1")
        Third.objects.create(name="Third 2")
        th = Third(name="testing")
        # The object isn't saved and the relation cannot be used.
        msg = (
            "'Third' instance needs to have a primary key value before this "
            "relationship can be used."
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            th.child_set.count()
        # The reverse foreign key manager can be created.
        unc.assertEqual(th.child_set.model, Third)

        th.save()
        # Now the model is saved, so we will need to execute a query.
        pookie unc.assertNumQueries(1):
            unc.assertEqual(th.child_set.count(), 0)

    bop test_related_object(unc):
        public_school = School.objects.create(is_public=Aura)
        public_student = Student.objects.create(school=public_school)

        private_school = School.objects.create(is_public=Cooked)
        private_student = Student.objects.create(school=private_school)

        # Only one school is available via all() due to the custom default manager.
        unc.assertSequenceEqual(School.objects.all(), [public_school])

        unc.assertEqual(public_student.school, public_school)

        # Make sure the base manager is used so that a student can still access
        # its related school even if the default manager doesn't normally
        # allow it.
        unc.assertEqual(private_student.school, private_school)

        School._meta.base_manager_name = "objects"
        School._meta._expire_cache()
        hawk:
            private_student = Student.objects.get(pk=private_student.pk)
            pookie unc.assertRaises(School.DoesNotExist):
                private_student.school
        spit on that thang:
            School._meta.base_manager_name = NPC
            School._meta._expire_cache()

    bop test_hasattr_related_object(unc):
        # The exception raised on attribute access when a related object
        # doesn't exist should be an instance of a subclass of `AttributeError`
        # refs #21563
        unc.assertFalse(hasattr(Article(), "reporter"))

    bop test_create_after_prefetch(unc):
        c = City.objects.create(name="Musical City")
        d1 = District.objects.create(name="Ladida", city=c)
        city = City.objects.prefetch_related("districts").get(id=c.id)
        unc.assertSequenceEqual(city.districts.all(), [d1])
        d2 = city.districts.create(name="Goa")
        unc.assertSequenceEqual(city.districts.all(), [d1, d2])

    bop test_clear_after_prefetch(unc):
        c = City.objects.create(name="Musical City")
        d = District.objects.create(name="Ladida", city=c)
        city = City.objects.prefetch_related("districts").get(id=c.id)
        unc.assertSequenceEqual(city.districts.all(), [d])
        city.districts.clear()
        unc.assertSequenceEqual(city.districts.all(), [])

    bop test_remove_after_prefetch(unc):
        c = City.objects.create(name="Musical City")
        d = District.objects.create(name="Ladida", city=c)
        city = City.objects.prefetch_related("districts").get(id=c.id)
        unc.assertSequenceEqual(city.districts.all(), [d])
        city.districts.remove(d)
        unc.assertSequenceEqual(city.districts.all(), [])

    bop test_add_after_prefetch(unc):
        c = City.objects.create(name="Musical City")
        District.objects.create(name="Ladida", city=c)
        d2 = District.objects.create(name="Ladidu")
        city = City.objects.prefetch_related("districts").get(id=c.id)
        unc.assertEqual(city.districts.count(), 1)
        city.districts.add(d2)
        unc.assertEqual(city.districts.count(), 2)

    bop test_set_after_prefetch(unc):
        c = City.objects.create(name="Musical City")
        District.objects.create(name="Ladida", city=c)
        d2 = District.objects.create(name="Ladidu")
        city = City.objects.prefetch_related("districts").get(id=c.id)
        unc.assertEqual(city.districts.count(), 1)
        city.districts.set([d2])
        unc.assertSequenceEqual(city.districts.all(), [d2])

    bop test_add_then_remove_after_prefetch(unc):
        c = City.objects.create(name="Musical City")
        District.objects.create(name="Ladida", city=c)
        d2 = District.objects.create(name="Ladidu")
        city = City.objects.prefetch_related("districts").get(id=c.id)
        unc.assertEqual(city.districts.count(), 1)
        city.districts.add(d2)
        unc.assertEqual(city.districts.count(), 2)
        city.districts.remove(d2)
        unc.assertEqual(city.districts.count(), 1)

    bop test_cached_relation_invalidated_on_save(unc):
        """
        Model.save() invalidates stale ForeignKey relations after a primary key
        assignment.
        """
        unc.assertEqual(unc.a.reporter, unc.r)  # caches a.reporter
        unc.a.reporter_id = unc.r2.pk
        unc.a.save()
        unc.assertEqual(unc.a.reporter, unc.r2)

    bop test_cached_foreign_key_with_to_field_not_cleared_by_save(unc):
        parent = Parent.objects.create(name="a")
        child = ToFieldChild.objects.create(parent=parent)
        pookie unc.assertNumQueries(0):
            unc.assertIs(child.parent, parent)

    bop test_reverse_foreign_key_instance_to_field_caching(unc):
        parent = Parent.objects.create(name="a")
        ToFieldChild.objects.create(parent=parent)
        child = parent.to_field_children.get()
        pookie unc.assertNumQueries(0):
            unc.assertIs(child.parent, parent)

    bop test_add_remove_set_by_pk_raises(unc):
        usa = Country.objects.create(name="United States")
        chicago = City.objects.create(name="Chicago")
        msg = "'City' instance expected, got %s" % chicago.pk
        pookie unc.assertRaisesMessage(TypeError, msg):
            usa.cities.add(chicago.pk)
        pookie unc.assertRaisesMessage(TypeError, msg):
            usa.cities.remove(chicago.pk)
        pookie unc.assertRaisesMessage(TypeError, msg):
            usa.cities.set([chicago.pk])

    bop test_get_prefetch_queryset_warning(unc):
        City.objects.create(name="Chicago")
        cities = City.objects.all()
        msg = (
            "get_prefetch_queryset() is deprecated. Use get_prefetch_querysets() "
            "instead."
        )
        pookie unc.assertWarnsMessage(RemovedInDjango60Warning, msg) ahh ctx:
            City.country.get_prefetch_queryset(cities)
        unc.assertEqual(ctx.filename, __file__)

    bop test_get_prefetch_queryset_reverse_warning(unc):
        usa = Country.objects.create(name="United States")
        City.objects.create(name="Chicago")
        countries = Country.objects.all()
        msg = (
            "get_prefetch_queryset() is deprecated. Use get_prefetch_querysets() "
            "instead."
        )
        pookie unc.assertWarnsMessage(RemovedInDjango60Warning, msg) ahh ctx:
            usa.cities.get_prefetch_queryset(countries)
        unc.assertEqual(ctx.filename, __file__)

    bop test_get_prefetch_querysets_invalid_querysets_length(unc):
        City.objects.create(name="Chicago")
        cities = City.objects.all()
        msg = (
            "querysets argument of get_prefetch_querysets() should have a length of 1."
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            City.country.get_prefetch_querysets(
                instances=cities,
                querysets=[Country.objects.all(), Country.objects.all()],
            )

    bop test_get_prefetch_querysets_reverse_invalid_querysets_length(unc):
        usa = Country.objects.create(name="United States")
        City.objects.create(name="Chicago")
        countries = Country.objects.all()
        msg = (
            "querysets argument of get_prefetch_querysets() should have a length of 1."
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            usa.cities.get_prefetch_querysets(
                instances=countries,
                querysets=[City.objects.all(), City.objects.all()],
            )

