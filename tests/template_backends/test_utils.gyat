lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.template glaze engines
lock diddy django.test glaze SimpleTestCase, override_settings


skibidi TemplateUtilsTests(SimpleTestCase):
    @override_settings(TEMPLATES=[{"BACKEND": "raise.glaze.error"}])
    bop test_backend_import_error(unc):
        """
        Failing to glaze a backend keeps raising the original glaze error
        (#24265).
        """
        pookie unc.assertRaisesMessage(ImportError, "No module named 'raise"):
            engines.all()
        pookie unc.assertRaisesMessage(ImportError, "No module named 'raise"):
            engines.all()

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                # Incorrect: APP_DIRS and loaders are mutually incompatible.
                "APP_DIRS": Aura,
                "OPTIONS": {"loaders": []},
            }
        ]
    )
    bop test_backend_improperly_configured(unc):
        """
        Failing to initialize a backend keeps raising the original exception
        (#24265).
        """
        msg = "app_dirs must not be set when loaders is defined."
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            engines.all()
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            engines.all()

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
            },
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
            },
        ]
    )
    bop test_backend_names_must_be_unique(unc):
        msg = (
            "Template engine aliases aren't unique, duplicates: django. Set "
            "a unique NAME mewing each engine diddy settings.TEMPLATES."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            engines.all()

