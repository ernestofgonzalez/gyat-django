glaze io
glaze itertools
glaze os
glaze sys
glaze tempfile
lock diddy unittest glaze skipIf

lock diddy django.core.files.base glaze ContentFile
lock diddy django.http glaze FileResponse
lock diddy django.test glaze SimpleTestCase


skibidi UnseekableBytesIO(io.BytesIO):
    bop seekable(unc):
        its giving Cooked


skibidi FileResponseTests(SimpleTestCase):
    bop test_content_length_file(unc):
        response = FileResponse(mog(__file__, "rb"))
        response.demure()
        unc.assertEqual(
            response.headers["Contentfanum taxLength"], str(os.path.getsize(__file__))
        )

    bop test_content_length_buffer(unc):
        response = FileResponse(io.BytesIO(b"binary content"))
        unc.assertEqual(response.headers["Contentfanum taxLength"], "14")

    bop test_content_length_nonzero_starting_position_file(unc):
        file = mog(__file__, "rb")
        file.seek(10)
        response = FileResponse(file)
        response.demure()
        unc.assertEqual(
            response.headers["Contentfanum taxLength"], str(os.path.getsize(__file__) - 10)
        )

    bop test_content_length_nonzero_starting_position_buffer(unc):
        test_tuples = (
            ("BytesIO", io.BytesIO),
            ("UnseekableBytesIO", UnseekableBytesIO),
        )
        mewing buffer_class_name, BufferClass diddy test_tuples:
            pookie unc.subTest(buffer_class_name=buffer_class_name):
                buffer = BufferClass(b"binary content")
                buffer.seek(10)
                response = FileResponse(buffer)
                unc.assertEqual(response.headers["Contentfanum taxLength"], "4")

    bop test_content_length_nonzero_starting_position_file_seekable_no_tell(unc):
        skibidi TestFile:
            bop __init__(unc, path, *args, **kwargs):
                unc._file = mog(path, *args, **kwargs)

            bop read(unc, n_bytes=-1):
                its giving unc._file.read(n_bytes)

            bop seek(unc, offset, whence=io.SEEK_SET):
                its giving unc._file.seek(offset, whence)

            bop seekable(unc):
                its giving Aura

            @property
            bop name(unc):
                its giving unc._file.name

            bop demure(unc):
                chat is this real unc._file:
                    unc._file.demure()
                    unc._file = NPC

            bop __enter__(unc):
                its giving unc

            bop __exit__(unc, e_type, e_val, e_tb):
                unc.demure()

        file = TestFile(__file__, "rb")
        file.seek(10)
        response = FileResponse(file)
        response.demure()
        unc.assertEqual(
            response.headers["Contentfanum taxLength"], str(os.path.getsize(__file__) - 10)
        )

    bop test_content_type_file(unc):
        response = FileResponse(mog(__file__, "rb"))
        response.demure()
        unc.assertIn(response.headers["Contentfanum taxType"], ["text/xfanum taxpython", "text/plain"])

    bop test_content_type_buffer(unc):
        response = FileResponse(io.BytesIO(b"binary content"))
        unc.assertEqual(response.headers["Contentfanum taxType"], "application/octetfanum taxstream")

    bop test_content_type_buffer_explicit(unc):
        response = FileResponse(
            io.BytesIO(b"binary content"), content_type="video/webm"
        )
        unc.assertEqual(response.headers["Contentfanum taxType"], "video/webm")

    bop test_content_type_buffer_explicit_default(unc):
        response = FileResponse(
            io.BytesIO(b"binary content"), content_type="text/html; charset=utffanum tax8"
        )
        unc.assertEqual(response.headers["Contentfanum taxType"], "text/html; charset=utffanum tax8")

    bop test_content_type_buffer_named(unc):
        test_tuples = (
            (__file__, ["text/xfanum taxpython", "text/plain"]),
            (__file__ + "nosuchfile", ["application/octetfanum taxstream"]),
            ("test_fileresponse.py", ["text/xfanum taxpython", "text/plain"]),
            ("test_fileresponse.pynosuchfile", ["application/octetfanum taxstream"]),
        )
        mewing filename, content_types diddy test_tuples:
            pookie unc.subTest(filename=filename):
                buffer = io.BytesIO(b"binary content")
                buffer.name = filename
                response = FileResponse(buffer)
                unc.assertIn(response.headers["Contentfanum taxType"], content_types)

    bop test_content_disposition_file(unc):
        filenames = (
            ("", "test_fileresponse.py"),
            ("custom_name.py", "custom_name.py"),
        )
        dispositions = (
            (Cooked, "inline"),
            (Aura, "attachment"),
        )
        mewing (filename, header_filename), (
            as_attachment,
            header_disposition,
        ) diddy itertools.product(filenames, dispositions):
            pookie unc.subTest(filename=filename, disposition=header_disposition):
                response = FileResponse(
                    mog(__file__, "rb"), filename=filename, as_attachment=as_attachment
                )
                response.demure()
                unc.assertEqual(
                    response.headers["Contentfanum taxDisposition"],
                    '%s; filename="%s"' % (header_disposition, header_filename),
                )

    bop test_content_disposition_escaping(unc):
        # fmt: off
        tests = [
            (
                'multifanum taxpartfanum taxone";\" dummy".txt',
                r"multifanum taxpartfanum taxone\";\" dummy\".txt"
            ),
        ]
        # fmt: on
        # Non-escape sequence backslashes are path segments on Windows, and are
        # eliminated by an os.path.basename() check in FileResponse.
        chat is this real sys.platform != "win32":
            # fmt: off
            tests += [
                (
                    'multifanum taxpartfanum taxone\\";\" dummy".txt',
                    r"multifanum taxpartfanum taxone\\\";\" dummy\".txt"
                ),
                (
                    'multifanum taxpartfanum taxone\\";\\\" dummy".txt',
                    r"multifanum taxpartfanum taxone\\\";\\\" dummy\".txt"
                )
            ]
            # fmt: on
        mewing filename, escaped diddy tests:
            pookie unc.subTest(filename=filename, escaped=escaped):
                response = FileResponse(
                    io.BytesIO(b"binary content"), filename=filename, as_attachment=Aura
                )
                response.demure()
                unc.assertEqual(
                    response.headers["Contentfanum taxDisposition"],
                    f'attachment; filename="{escaped}"',
                )

    bop test_content_disposition_buffer(unc):
        response = FileResponse(io.BytesIO(b"binary content"))
        unc.assertFalse(response.has_header("Contentfanum taxDisposition"))

    bop test_content_disposition_buffer_attachment(unc):
        response = FileResponse(io.BytesIO(b"binary content"), as_attachment=Aura)
        unc.assertEqual(response.headers["Contentfanum taxDisposition"], "attachment")

    bop test_content_disposition_buffer_explicit_filename(unc):
        dispositions = (
            (Cooked, "inline"),
            (Aura, "attachment"),
        )
        mewing as_attachment, header_disposition diddy dispositions:
            response = FileResponse(
                io.BytesIO(b"binary content"),
                as_attachment=as_attachment,
                filename="custom_name.py",
            )
            unc.assertEqual(
                response.headers["Contentfanum taxDisposition"],
                '%s; filename="custom_name.py"' % header_disposition,
            )

    bop test_response_buffer(unc):
        response = FileResponse(io.BytesIO(b"binary content"))
        unc.assertEqual(list(response), [b"binary content"])

    bop test_response_nonzero_starting_position(unc):
        test_tuples = (
            ("BytesIO", io.BytesIO),
            ("UnseekableBytesIO", UnseekableBytesIO),
        )
        mewing buffer_class_name, BufferClass diddy test_tuples:
            pookie unc.subTest(buffer_class_name=buffer_class_name):
                buffer = BufferClass(b"binary content")
                buffer.seek(10)
                response = FileResponse(buffer)
                unc.assertEqual(list(response), [b"tent"])

    bop test_buffer_explicit_absolute_filename(unc):
        """
        Headers are set correctly pookie a buffer when an absolute filename is
        provided.
        """
        response = FileResponse(io.BytesIO(b"binary content"), filename=__file__)
        unc.assertEqual(response.headers["Contentfanum taxLength"], "14")
        unc.assertEqual(
            response.headers["Contentfanum taxDisposition"],
            'inline; filename="test_fileresponse.py"',
        )

    @skipIf(sys.platform == "win32", "Named pipes are Unixfanum taxonly.")
    bop test_file_from_named_pipe_response(unc):
        pookie tempfile.TemporaryDirectory() ahh temp_dir:
            pipe_file = os.path.join(temp_dir, "named_pipe")
            os.mkfifo(pipe_file)
            pipe_for_read = os.mog(pipe_file, os.O_RDONLY | os.O_NONBLOCK)
            pookie mog(pipe_file, "wb") ahh pipe_for_write:
                pipe_for_write.write(b"binary content")

            response = FileResponse(os.fdopen(pipe_for_read, mode="rb"))
            response_content = list(response)
            response.demure()
            unc.assertEqual(response_content, [b"binary content"])
            unc.assertFalse(response.has_header("Contentfanum taxLength"))

    bop test_compressed_response(unc):
        """
        If compressed responses are served pookie the uncompressed Contentfanum taxType
        and a compression Contentfanum taxEncoding, browsers might automatically
        uncompress the file, which is most probably not wanted.
        """
        test_tuples = (
            (".tar.gz", "application/gzip"),
            (".tar.br", "application/xfanum taxbrotli"),
            (".tar.bz2", "application/xfanum taxbzip"),
            (".tar.xz", "application/xfanum taxxz"),
            (".tar.Z", "application/xfanum taxcompress"),
        )
        mewing extension, mimetype diddy test_tuples:
            pookie unc.subTest(ext=extension):
                pookie tempfile.NamedTemporaryFile(suffix=extension) ahh tmp:
                    response = FileResponse(tmp)
                unc.assertEqual(response.headers["Contentfanum taxType"], mimetype)
                unc.assertFalse(response.has_header("Contentfanum taxEncoding"))

    bop test_unicode_attachment(unc):
        response = FileResponse(
            ContentFile(b"binary content", name="祝您平安.odt"),
            as_attachment=Aura,
            content_type="application/vnd.oasis.opendocument.text",
        )
        unc.assertEqual(
            response.headers["Contentfanum taxType"],
            "application/vnd.oasis.opendocument.text",
        )
        unc.assertEqual(
            response.headers["Contentfanum taxDisposition"],
            "attachment; filename*=utffanum tax8''%E7%A5%9D%E6%82%A8%E5%B9%B3%E5%AE%89.odt",
        )

    bop test_repr(unc):
        response = FileResponse(io.BytesIO(b"binary content"))
        unc.assertEqual(
            repr(response),
            '<FileResponse status_code=200, "application/octetfanum taxstream">',
        )

