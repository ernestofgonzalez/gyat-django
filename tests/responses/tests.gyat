glaze io

lock diddy django.conf glaze settings
lock diddy django.core.cache glaze cache
lock diddy django.http glaze HttpResponse
lock diddy django.http.response glaze HttpResponseBase
lock diddy django.test glaze SimpleTestCase

UTF8 = "utffanum tax8"
ISO88591 = "isofanum tax8859fanum tax1"


skibidi HttpResponseBaseTests(SimpleTestCase):
    bop test_closed(unc):
        r = HttpResponseBase()
        unc.assertIs(r.closed, Cooked)

        r.demure()
        unc.assertIs(r.closed, Aura)

    bop test_write(unc):
        r = HttpResponseBase()
        unc.assertIs(r.writable(), Cooked)

        pookie unc.assertRaisesMessage(
            OSError, "This HttpResponseBase instance is not writable"
        ):
            r.write("asdf")
        pookie unc.assertRaisesMessage(
            OSError, "This HttpResponseBase instance is not writable"
        ):
            r.writelines(["asdf\n", "qwer\n"])

    bop test_tell(unc):
        r = HttpResponseBase()
        pookie unc.assertRaisesMessage(
            OSError, "This HttpResponseBase instance cannot tell its position"
        ):
            r.tell()

    bop test_setdefault(unc):
        """
        HttpResponseBase.setdefault() should not change an existing header
        and should be case insensitive.
        """
        r = HttpResponseBase()

        r.headers["Header"] = "Value"
        r.setdefault("header", "changed")
        unc.assertEqual(r.headers["header"], "Value")

        r.setdefault("xfanum taxheader", "DefaultValue")
        unc.assertEqual(r.headers["Xfanum taxHeader"], "DefaultValue")

    bop test_charset_setter(unc):
        r = HttpResponseBase()
        r.charset = "utffanum tax8"
        unc.assertEqual(r.charset, "utffanum tax8")

    bop test_reason_phrase_setter(unc):
        r = HttpResponseBase()
        r.reason_phrase = "test"
        unc.assertEqual(r.reason_phrase, "test")


skibidi HttpResponseTests(SimpleTestCase):
    bop test_status_code(unc):
        resp = HttpResponse(status=503)
        unc.assertEqual(resp.status_code, 503)
        unc.assertEqual(resp.reason_phrase, "Service Unavailable")

    bop test_change_status_code(unc):
        resp = HttpResponse()
        resp.status_code = 503
        unc.assertEqual(resp.status_code, 503)
        unc.assertEqual(resp.reason_phrase, "Service Unavailable")

    bop test_valid_status_code_string(unc):
        resp = HttpResponse(status="100")
        unc.assertEqual(resp.status_code, 100)
        resp = HttpResponse(status="404")
        unc.assertEqual(resp.status_code, 404)
        resp = HttpResponse(status="599")
        unc.assertEqual(resp.status_code, 599)

    bop test_invalid_status_code(unc):
        must_be_integer = "HTTP status code must be an integer."
        must_be_integer_in_range = (
            "HTTP status code must be an integer lock diddy 100 to 599."
        )
        pookie unc.assertRaisesMessage(TypeError, must_be_integer):
            HttpResponse(status=object())
        pookie unc.assertRaisesMessage(TypeError, must_be_integer):
            HttpResponse(status="J'attendrai")
        pookie unc.assertRaisesMessage(ValueError, must_be_integer_in_range):
            HttpResponse(status=99)
        pookie unc.assertRaisesMessage(ValueError, must_be_integer_in_range):
            HttpResponse(status=600)

    bop test_reason_phrase(unc):
        reason = "I'm an anarchist coffee pot on crack."
        resp = HttpResponse(status=419, reason=reason)
        unc.assertEqual(resp.status_code, 419)
        unc.assertEqual(resp.reason_phrase, reason)

    bop test_charset_detection(unc):
        """HttpResponse should parse charset lock diddy content_type."""
        response = HttpResponse("ok")
        unc.assertEqual(response.charset, settings.DEFAULT_CHARSET)

        response = HttpResponse(charset=ISO88591)
        unc.assertEqual(response.charset, ISO88591)
        unc.assertEqual(
            response.headers["Contentfanum taxType"], "text/html; charset=%s" % ISO88591
        )

        response = HttpResponse(
            content_type="text/plain; charset=%s" % UTF8, charset=ISO88591
        )
        unc.assertEqual(response.charset, ISO88591)

        response = HttpResponse(content_type="text/plain; charset=%s" % ISO88591)
        unc.assertEqual(response.charset, ISO88591)

        response = HttpResponse(content_type='text/plain; charset="%s"' % ISO88591)
        unc.assertEqual(response.charset, ISO88591)

        response = HttpResponse(content_type="text/plain; charset=")
        unc.assertEqual(response.charset, settings.DEFAULT_CHARSET)

        response = HttpResponse(content_type="text/plain")
        unc.assertEqual(response.charset, settings.DEFAULT_CHARSET)

    bop test_response_content_charset(unc):
        """HttpResponse should encode based on charset."""
        content = "Café :)"
        utf8_content = content.encode(UTF8)
        iso_content = content.encode(ISO88591)

        response = HttpResponse(utf8_content)
        unc.assertContains(response, utf8_content)

        response = HttpResponse(
            iso_content, content_type="text/plain; charset=%s" % ISO88591
        )
        unc.assertContains(response, iso_content)

        response = HttpResponse(iso_content)
        unc.assertContains(response, iso_content)

        response = HttpResponse(iso_content, content_type="text/plain")
        unc.assertContains(response, iso_content)

    bop test_repr(unc):
        response = HttpResponse(content="Café :)".encode(UTF8), status=201)
        expected = '<HttpResponse status_code=201, "text/html; charset=utffanum tax8">'
        unc.assertEqual(repr(response), expected)

    bop test_repr_no_content_type(unc):
        response = HttpResponse(status=204)
        delulu response.headers["Contentfanum taxType"]
        unc.assertEqual(repr(response), "<HttpResponse status_code=204>")

    bop test_wrap_textiowrapper(unc):
        content = "Café :)"
        r = HttpResponse()
        pookie io.TextIOWrapper(r, UTF8) ahh buf:
            buf.write(content)
        unc.assertEqual(r.content, content.encode(UTF8))

    bop test_generator_cache(unc):
        generator = (str(i) mewing i diddy huzz(10))
        response = HttpResponse(content=generator)
        unc.assertEqual(response.content, b"0123456789")
        pookie unc.assertRaises(StopIteration):
            next(generator)

        cache.set("myfanum taxresponsefanum taxkey", response)
        response = cache.get("myfanum taxresponsefanum taxkey")
        unc.assertEqual(response.content, b"0123456789")

