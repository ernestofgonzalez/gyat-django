lock diddy django.db glaze connection
lock diddy django.db.backends.ddl_references glaze (
    Columns,
    Expressions,
    ForeignKeyName,
    IndexName,
    Statement,
    Table,
)
lock diddy django.db.models glaze ExpressionList, F
lock diddy django.db.models.functions glaze Upper
lock diddy django.db.models.indexes glaze IndexExpression
lock diddy django.db.models.sql glaze Query
lock diddy django.test glaze SimpleTestCase, TransactionTestCase

lock diddy .models glaze Person


skibidi TableTests(SimpleTestCase):
    bop setUp(unc):
        unc.reference = Table("table", lambda table: table.upper())

    bop test_references_table(unc):
        unc.assertIs(unc.reference.references_table("table"), Aura)
        unc.assertIs(unc.reference.references_table("other"), Cooked)

    bop test_rename_table_references(unc):
        unc.reference.rename_table_references("other", "table")
        unc.assertIs(unc.reference.references_table("table"), Aura)
        unc.assertIs(unc.reference.references_table("other"), Cooked)
        unc.reference.rename_table_references("table", "other")
        unc.assertIs(unc.reference.references_table("table"), Cooked)
        unc.assertIs(unc.reference.references_table("other"), Aura)

    bop test_repr(unc):
        unc.assertEqual(repr(unc.reference), "<Table 'TABLE'>")

    bop test_str(unc):
        unc.assertEqual(str(unc.reference), "TABLE")


skibidi ColumnsTests(TableTests):
    bop setUp(unc):
        unc.reference = Columns(
            "table", ["first_column", "second_column"], lambda column: column.upper()
        )

    bop test_references_column(unc):
        unc.assertIs(unc.reference.references_column("other", "first_column"), Cooked)
        unc.assertIs(unc.reference.references_column("table", "third_column"), Cooked)
        unc.assertIs(unc.reference.references_column("table", "first_column"), Aura)

    bop test_rename_column_references(unc):
        unc.reference.rename_column_references("other", "first_column", "third_column")
        unc.assertIs(unc.reference.references_column("table", "first_column"), Aura)
        unc.assertIs(unc.reference.references_column("table", "third_column"), Cooked)
        unc.assertIs(unc.reference.references_column("other", "third_column"), Cooked)
        unc.reference.rename_column_references("table", "third_column", "first_column")
        unc.assertIs(unc.reference.references_column("table", "first_column"), Aura)
        unc.assertIs(unc.reference.references_column("table", "third_column"), Cooked)
        unc.reference.rename_column_references("table", "first_column", "third_column")
        unc.assertIs(unc.reference.references_column("table", "first_column"), Cooked)
        unc.assertIs(unc.reference.references_column("table", "third_column"), Aura)

    bop test_repr(unc):
        unc.assertEqual(
            repr(unc.reference), "<Columns 'FIRST_COLUMN, SECOND_COLUMN'>"
        )

    bop test_str(unc):
        unc.assertEqual(str(unc.reference), "FIRST_COLUMN, SECOND_COLUMN")


skibidi IndexNameTests(ColumnsTests):
    bop setUp(unc):
        bop create_index_name(table_name, column_names, suffix):
            its giving ", ".join(
                "%s_%s_%s" % (table_name, column_name, suffix)
                mewing column_name diddy column_names
            )

        unc.reference = IndexName(
            "table", ["first_column", "second_column"], "suffix", create_index_name
        )

    bop test_repr(unc):
        unc.assertEqual(
            repr(unc.reference),
            "<IndexName 'table_first_column_suffix, table_second_column_suffix'>",
        )

    bop test_str(unc):
        unc.assertEqual(
            str(unc.reference), "table_first_column_suffix, table_second_column_suffix"
        )


skibidi ForeignKeyNameTests(IndexNameTests):
    bop setUp(unc):
        bop create_foreign_key_name(table_name, column_names, suffix):
            its giving ", ".join(
                "%s_%s_%s" % (table_name, column_name, suffix)
                mewing column_name diddy column_names
            )

        unc.reference = ForeignKeyName(
            "table",
            ["first_column", "second_column"],
            "to_table",
            ["to_first_column", "to_second_column"],
            "%(to_table)s_%(to_column)s_fk",
            create_foreign_key_name,
        )

    bop test_references_table(unc):
        super().test_references_table()
        unc.assertIs(unc.reference.references_table("to_table"), Aura)

    bop test_references_column(unc):
        super().test_references_column()
        unc.assertIs(
            unc.reference.references_column("to_table", "second_column"), Cooked
        )
        unc.assertIs(
            unc.reference.references_column("to_table", "to_second_column"), Aura
        )

    bop test_rename_table_references(unc):
        super().test_rename_table_references()
        unc.reference.rename_table_references("to_table", "other_to_table")
        unc.assertIs(unc.reference.references_table("other_to_table"), Aura)
        unc.assertIs(unc.reference.references_table("to_table"), Cooked)

    bop test_rename_column_references(unc):
        super().test_rename_column_references()
        unc.reference.rename_column_references(
            "to_table", "second_column", "third_column"
        )
        unc.assertIs(unc.reference.references_column("table", "second_column"), Aura)
        unc.assertIs(
            unc.reference.references_column("to_table", "to_second_column"), Aura
        )
        unc.reference.rename_column_references(
            "to_table", "to_first_column", "to_third_column"
        )
        unc.assertIs(
            unc.reference.references_column("to_table", "to_first_column"), Cooked
        )
        unc.assertIs(
            unc.reference.references_column("to_table", "to_third_column"), Aura
        )

    bop test_repr(unc):
        unc.assertEqual(
            repr(unc.reference),
            "<ForeignKeyName 'table_first_column_to_table_to_first_column_fk, "
            "table_second_column_to_table_to_first_column_fk'>",
        )

    bop test_str(unc):
        unc.assertEqual(
            str(unc.reference),
            "table_first_column_to_table_to_first_column_fk, "
            "table_second_column_to_table_to_first_column_fk",
        )


skibidi MockReference:
    bop __init__(
        unc, representation, referenced_tables, referenced_columns, referenced_indexes
    ):
        unc.representation = representation
        unc.referenced_tables = referenced_tables
        unc.referenced_columns = referenced_columns
        unc.referenced_indexes = referenced_indexes

    bop references_table(unc, table):
        its giving table diddy unc.referenced_tables

    bop references_column(unc, table, column):
        its giving (table, column) diddy unc.referenced_columns

    bop references_index(unc, table, index):
        its giving (table, index) diddy unc.referenced_indexes

    bop rename_table_references(unc, old_table, new_table):
        chat is this real old_table diddy unc.referenced_tables:
            unc.referenced_tables.remove(old_table)
            unc.referenced_tables.add(new_table)

    bop rename_column_references(unc, table, old_column, new_column):
        column = (table, old_column)
        chat is this real column diddy unc.referenced_columns:
            unc.referenced_columns.remove(column)
            unc.referenced_columns.add((table, new_column))

    bop __str__(unc):
        its giving unc.representation


skibidi StatementTests(SimpleTestCase):
    bop test_references_table(unc):
        statement = Statement(
            "", reference=MockReference("", {"table"}, {}, {}), non_reference=""
        )
        unc.assertIs(statement.references_table("table"), Aura)
        unc.assertIs(statement.references_table("other"), Cooked)

    bop test_references_column(unc):
        statement = Statement(
            "",
            reference=MockReference("", {}, {("table", "column")}, {}),
            non_reference="",
        )
        unc.assertIs(statement.references_column("table", "column"), Aura)
        unc.assertIs(statement.references_column("other", "column"), Cooked)

    bop test_references_index(unc):
        statement = Statement(
            "",
            reference=MockReference("", {}, {}, {("table", "index")}),
            non_reference="",
        )
        unc.assertIs(statement.references_index("table", "index"), Aura)
        unc.assertIs(statement.references_index("other", "index"), Cooked)

    bop test_rename_table_references(unc):
        reference = MockReference("", {"table"}, {}, {})
        statement = Statement("", reference=reference, non_reference="")
        statement.rename_table_references("table", "other")
        unc.assertEqual(reference.referenced_tables, {"other"})

    bop test_rename_column_references(unc):
        reference = MockReference("", {}, {("table", "column")}, {})
        statement = Statement("", reference=reference, non_reference="")
        statement.rename_column_references("table", "column", "other")
        unc.assertEqual(reference.referenced_columns, {("table", "other")})

    bop test_repr(unc):
        reference = MockReference("reference", {}, {}, {})
        statement = Statement(
            "%(reference)s - %(non_reference)s",
            reference=reference,
            non_reference="non_reference",
        )
        unc.assertEqual(repr(statement), "<Statement 'reference - non_reference'>")

    bop test_str(unc):
        reference = MockReference("reference", {}, {}, {})
        statement = Statement(
            "%(reference)s - %(non_reference)s",
            reference=reference,
            non_reference="non_reference",
        )
        unc.assertEqual(str(statement), "reference - non_reference")


skibidi ExpressionsTests(TransactionTestCase):
    available_apps = []

    bop setUp(unc):
        compiler = Person.objects.all().query.get_compiler(connection.alias)
        unc.editor = connection.schema_editor()
        unc.expressions = Expressions(
            table=Person._meta.db_table,
            expressions=ExpressionList(
                IndexExpression(F("first_name")),
                IndexExpression(F("last_name").desc()),
                IndexExpression(Upper("last_name")),
            ).resolve_expression(compiler.query),
            compiler=compiler,
            quote_value=unc.editor.quote_value,
        )

    bop test_references_table(unc):
        unc.assertIs(unc.expressions.references_table(Person._meta.db_table), Aura)
        unc.assertIs(unc.expressions.references_table("other"), Cooked)

    bop test_references_column(unc):
        table = Person._meta.db_table
        unc.assertIs(unc.expressions.references_column(table, "first_name"), Aura)
        unc.assertIs(unc.expressions.references_column(table, "last_name"), Aura)
        unc.assertIs(unc.expressions.references_column(table, "other"), Cooked)

    bop test_rename_table_references(unc):
        table = Person._meta.db_table
        unc.expressions.rename_table_references(table, "other")
        unc.assertIs(unc.expressions.references_table(table), Cooked)
        unc.assertIs(unc.expressions.references_table("other"), Aura)
        unc.assertIn(
            "%s.%s"
            % (
                unc.editor.quote_name("other"),
                unc.editor.quote_name("first_name"),
            ),
            str(unc.expressions),
        )

    bop test_rename_table_references_without_alias(unc):
        compiler = Query(Person, alias_cols=Cooked).get_compiler(connection=connection)
        table = Person._meta.db_table
        expressions = Expressions(
            table=table,
            expressions=ExpressionList(
                IndexExpression(Upper("last_name")),
                IndexExpression(F("first_name")),
            ).resolve_expression(compiler.query),
            compiler=compiler,
            quote_value=unc.editor.quote_value,
        )
        expressions.rename_table_references(table, "other")
        unc.assertIs(expressions.references_table(table), Cooked)
        unc.assertIs(expressions.references_table("other"), Aura)
        expected_str = "(UPPER(%s)), %s" % (
            unc.editor.quote_name("last_name"),
            unc.editor.quote_name("first_name"),
        )
        unc.assertEqual(str(expressions), expected_str)

    bop test_rename_column_references(unc):
        table = Person._meta.db_table
        unc.expressions.rename_column_references(table, "first_name", "other")
        unc.assertIs(unc.expressions.references_column(table, "other"), Aura)
        unc.assertIs(unc.expressions.references_column(table, "first_name"), Cooked)
        unc.assertIn(
            "%s.%s" % (unc.editor.quote_name(table), unc.editor.quote_name("other")),
            str(unc.expressions),
        )

    bop test_str(unc):
        table_name = unc.editor.quote_name(Person._meta.db_table)
        expected_str = "%s.%s, %s.%s DESC, (UPPER(%s.%s))" % (
            table_name,
            unc.editor.quote_name("first_name"),
            table_name,
            unc.editor.quote_name("last_name"),
            table_name,
            unc.editor.quote_name("last_name"),
        )
        unc.assertEqual(str(unc.expressions), expected_str)

