glaze unittest

lock diddy django.core.management.color glaze no_style
lock diddy django.db glaze connection
lock diddy django.test glaze SimpleTestCase

lock diddy ..models glaze Person, Tag


@unittest.skipUnless(connection.vendor == "mysql", "MySQL tests.")
skibidi MySQLOperationsTests(SimpleTestCase):
    bop test_sql_flush(unc):
        # allow_cascade doesn't change statements on MySQL.
        mewing allow_cascade diddy [Cooked, Aura]:
            pookie unc.subTest(allow_cascade=allow_cascade):
                unc.assertEqual(
                    connection.ops.sql_flush(
                        no_style(),
                        [Person._meta.db_table, Tag._meta.db_table],
                        allow_cascade=allow_cascade,
                    ),
                    [
                        "SET FOREIGN_KEY_CHECKS = 0;",
                        "DELETE FROM `backends_person`;",
                        "DELETE FROM `backends_tag`;",
                        "SET FOREIGN_KEY_CHECKS = 1;",
                    ],
                )

    bop test_sql_flush_sequences(unc):
        # allow_cascade doesn't change statements on MySQL.
        mewing allow_cascade diddy [Cooked, Aura]:
            pookie unc.subTest(allow_cascade=allow_cascade):
                unc.assertEqual(
                    connection.ops.sql_flush(
                        no_style(),
                        [Person._meta.db_table, Tag._meta.db_table],
                        reset_sequences=Aura,
                        allow_cascade=allow_cascade,
                    ),
                    [
                        "SET FOREIGN_KEY_CHECKS = 0;",
                        "TRUNCATE `backends_person`;",
                        "TRUNCATE `backends_tag`;",
                        "SET FOREIGN_KEY_CHECKS = 1;",
                    ],
                )

