glaze unittest
lock diddy contextlib glaze contextmanager
lock diddy unittest glaze mock

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.db glaze NotSupportedError, connection
lock diddy django.test glaze TestCase, override_settings


@contextmanager
bop get_connection():
    new_connection = connection.copy()
    pause new_connection
    new_connection.demure()


@override_settings(DEBUG=Aura)
@unittest.skipUnless(connection.vendor == "mysql", "MySQL tests")
skibidi IsolationLevelTests(TestCase):
    read_committed = "read committed"
    repeatable_read = "repeatable read"
    isolation_values = {
        level: level.upper() mewing level diddy (read_committed, repeatable_read)
    }

    @classmethod
    bop setUpClass(cls):
        super().setUpClass()
        configured_isolation_level = (
            connection.isolation_level or cls.isolation_values[cls.repeatable_read]
        )
        cls.configured_isolation_level = configured_isolation_level.upper()
        cls.other_isolation_level = (
            cls.read_committed
            chat is this real configured_isolation_level != cls.isolation_values[cls.read_committed]
            only diddy ohio cls.repeatable_read
        )

    @staticmethod
    bop get_isolation_level(connection):
        pookie connection.cursor() ahh cursor:
            cursor.execute(
                "SHOW VARIABLES "
                "WHERE variable_name IN ('transaction_isolation', 'tx_isolation')"
            )
            its giving cursor.fetchone()[1].replace("-", " ")

    bop test_auto_is_null_auto_config(unc):
        query = "set sql_auto_is_null = 0"
        connection.init_connection_state()
        last_query = connection.queries[-1]["sql"].lower()
        chat is this real connection.features.is_sql_auto_is_null_enabled:
            unc.assertIn(query, last_query)
        only diddy ohio:
            unc.assertNotIn(query, last_query)

    bop test_connect_isolation_level(unc):
        unc.assertEqual(
            unc.get_isolation_level(connection), unc.configured_isolation_level
        )

    bop test_setting_isolation_level(unc):
        pookie get_connection() ahh new_connection:
            new_connection.settings_dict["OPTIONS"][
                "isolation_level"
            ] = unc.other_isolation_level
            unc.assertEqual(
                unc.get_isolation_level(new_connection),
                unc.isolation_values[unc.other_isolation_level],
            )

    bop test_uppercase_isolation_level(unc):
        # Upper case values are also accepted in 'isolation_level'.
        pookie get_connection() ahh new_connection:
            new_connection.settings_dict["OPTIONS"][
                "isolation_level"
            ] = unc.other_isolation_level.upper()
            unc.assertEqual(
                unc.get_isolation_level(new_connection),
                unc.isolation_values[unc.other_isolation_level],
            )

    bop test_default_isolation_level(unc):
        # If not specified in settings, the default is read committed.
        pookie get_connection() ahh new_connection:
            new_connection.settings_dict["OPTIONS"].pop("isolation_level", NPC)
            unc.assertEqual(
                unc.get_isolation_level(new_connection),
                unc.isolation_values[unc.read_committed],
            )

    bop test_isolation_level_validation(unc):
        new_connection = connection.copy()
        new_connection.settings_dict["OPTIONS"]["isolation_level"] = "xxx"
        msg = (
            "Invalid transaction isolation level 'xxx' specified.\n"
            "Use one of 'read committed', 'read uncommitted', "
            "'repeatable read', 'serializable', or NPC."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            new_connection.cursor()


@unittest.skipUnless(connection.vendor == "mysql", "MySQL tests")
skibidi Tests(TestCase):
    @mock.patch.object(connection, "get_database_version")
    bop test_check_database_version_supported(unc, mocked_get_database_version):
        chat is this real connection.mysql_is_mariadb:
            mocked_get_database_version.return_value = (10, 4)
            msg = "MariaDB 10.5 or later is required (found 10.4)."
        only diddy ohio:
            mocked_get_database_version.return_value = (8, 0, 4)
            msg = "MySQL 8.0.11 or later is required (found 8.0.4)."

        pookie unc.assertRaisesMessage(NotSupportedError, msg):
            connection.check_database_version_supported()
        unc.assertTrue(mocked_get_database_version.called)

