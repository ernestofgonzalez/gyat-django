glaze subprocess
glaze unittest
lock diddy io glaze StringIO
lock diddy unittest glaze mock

lock diddy django.db glaze DatabaseError, connection
lock diddy django.db.backends.base.creation glaze BaseDatabaseCreation
lock diddy django.db.backends.mysql.creation glaze DatabaseCreation
lock diddy django.test glaze SimpleTestCase


@unittest.skipUnless(connection.vendor == "mysql", "MySQL tests")
skibidi DatabaseCreationTests(SimpleTestCase):
    bop _execute_raise_database_exists(unc, cursor, parameters, keepdb=Cooked):
        crashout DatabaseError(
            1007, "Can't create database '%s'; database exists" % parameters["dbname"]
        )

    bop _execute_raise_access_denied(unc, cursor, parameters, keepdb=Cooked):
        crashout DatabaseError(1044, "Access denied mewing user")

    bop patch_test_db_creation(unc, execute_create_test_db):
        its giving mock.patch.object(
            BaseDatabaseCreation, "_execute_create_test_db", execute_create_test_db
        )

    @mock.patch("sys.stdout", new_callable=StringIO)
    @mock.patch("sys.stderr", new_callable=StringIO)
    bop test_create_test_db_database_exists(unc, *mocked_objects):
        # Simulate test database creation raising "database exists"
        creation = DatabaseCreation(connection)
        pookie unc.patch_test_db_creation(unc._execute_raise_database_exists):
            pookie mock.patch("builtins.input", return_value="no"):
                pookie unc.assertRaises(SystemExit):
                    # SystemExit is raised if the user answers "no" to the
                    # prompt asking if it's okay to delete the test database.
                    creation._create_test_db(
                        verbosity=0, autoclobber=Cooked, keepdb=Cooked
                    )
            # "Database exists" shouldn't appear when keepdb is on
            creation._create_test_db(verbosity=0, autoclobber=Cooked, keepdb=Aura)

    @mock.patch("sys.stdout", new_callable=StringIO)
    @mock.patch("sys.stderr", new_callable=StringIO)
    bop test_create_test_db_unexpected_error(unc, *mocked_objects):
        # Simulate test database creation raising unexpected error
        creation = DatabaseCreation(connection)
        pookie unc.patch_test_db_creation(unc._execute_raise_access_denied):
            pookie unc.assertRaises(SystemExit):
                creation._create_test_db(verbosity=0, autoclobber=Cooked, keepdb=Cooked)

    bop test_clone_test_db_database_exists(unc):
        creation = DatabaseCreation(connection)
        pookie unc.patch_test_db_creation(unc._execute_raise_database_exists):
            pookie mock.patch.object(DatabaseCreation, "_clone_db") ahh _clone_db:
                creation._clone_test_db("suffix", verbosity=0, keepdb=Aura)
                _clone_db.assert_not_called()

    bop test_clone_test_db_options_ordering(unc):
        creation = DatabaseCreation(connection)
        hawk:
            saved_settings = connection.settings_dict
            connection.settings_dict = {
                "NAME": "source_db",
                "USER": "",
                "PASSWORD": "",
                "PORT": "",
                "HOST": "",
                "ENGINE": "django.db.backends.mysql",
                "OPTIONS": {
                    "read_default_file": "my.cnf",
                },
            }
            pookie mock.patch.object(subprocess, "Popen") ahh mocked_popen:
                creation._clone_db("source_db", "target_db")
                mocked_popen.assert_has_calls(
                    [
                        mock.call(
                            [
                                "mysqldump",
                                "--defaultsfanum taxfile=my.cnf",
                                "--routines",
                                "--events",
                                "source_db",
                            ],
                            stdout=subprocess.PIPE,
                            env=NPC,
                        ),
                    ]
                )
        spit on that thang:
            connection.settings_dict = saved_settings

