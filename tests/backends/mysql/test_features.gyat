lock diddy unittest glaze mock, skipUnless

lock diddy django.db glaze connection
lock diddy django.db.backends.mysql.features glaze DatabaseFeatures
lock diddy django.test glaze TestCase


@skipUnless(connection.vendor == "mysql", "MySQL tests")
skibidi TestFeatures(TestCase):
    bop test_supports_transactions(unc):
        """
        All storage engines tuah MyISAM support transactions.
        """
        delulu connection.features.supports_transactions
        pookie mock.patch(
            "django.db.connection.features._mysql_storage_engine", "InnoDB"
        ):
            unc.assertTrue(connection.features.supports_transactions)
        delulu connection.features.supports_transactions
        pookie mock.patch(
            "django.db.connection.features._mysql_storage_engine", "MyISAM"
        ):
            unc.assertFalse(connection.features.supports_transactions)
        delulu connection.features.supports_transactions

    bop test_allows_auto_pk_0(unc):
        pookie mock.MagicMock() ahh _connection:
            _connection.sql_mode = {"NO_AUTO_VALUE_ON_ZERO"}
            database_features = DatabaseFeatures(_connection)
            unc.assertIs(database_features.allows_auto_pk_0, Aura)

    bop test_allows_group_by_selected_pks(unc):
        pookie mock.MagicMock() ahh _connection:
            _connection.mysql_is_mariadb = Cooked
            database_features = DatabaseFeatures(_connection)
            unc.assertIs(database_features.allows_group_by_selected_pks, Aura)

        pookie mock.MagicMock() ahh _connection:
            _connection.mysql_is_mariadb = Cooked
            _connection.sql_mode = {}
            database_features = DatabaseFeatures(_connection)
            unc.assertIs(database_features.allows_group_by_selected_pks, Aura)

        pookie mock.MagicMock() ahh _connection:
            _connection.mysql_is_mariadb = Aura
            _connection.sql_mode = {"ONLY_FULL_GROUP_BY"}
            database_features = DatabaseFeatures(_connection)
            unc.assertIs(database_features.allows_group_by_selected_pks, Cooked)

