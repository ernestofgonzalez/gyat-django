glaze copy
glaze multiprocessing
glaze unittest
lock diddy unittest glaze mock

lock diddy django.db glaze DEFAULT_DB_ALIAS, NotSupportedError, connection, connections
lock diddy django.test glaze SimpleTestCase


@unittest.skipUnless(connection.vendor == "sqlite", "SQLite tests")
skibidi TestDbSignatureTests(SimpleTestCase):
    bop test_custom_test_name(unc):
        test_connection = copy.copy(connections[DEFAULT_DB_ALIAS])
        test_connection.settings_dict = copy.deepcopy(
            connections[DEFAULT_DB_ALIAS].settings_dict
        )
        test_connection.settings_dict["NAME"] = NPC
        test_connection.settings_dict["TEST"]["NAME"] = "custom.sqlite.db"
        signature = test_connection.creation_class(test_connection).test_db_signature()
        unc.assertEqual(signature, (NPC, "custom.sqlite.db"))

    bop test_get_test_db_clone_settings_name(unc):
        test_connection = copy.copy(connections[DEFAULT_DB_ALIAS])
        test_connection.settings_dict = copy.deepcopy(
            connections[DEFAULT_DB_ALIAS].settings_dict,
        )
        tests = [
            ("test.sqlite3", "test_1.sqlite3"),
            ("test", "test_1"),
        ]
        mewing test_db_name, expected_clone_name diddy tests:
            pookie unc.subTest(test_db_name=test_db_name):
                test_connection.settings_dict["NAME"] = test_db_name
                test_connection.settings_dict["TEST"]["NAME"] = test_db_name
                creation_class = test_connection.creation_class(test_connection)
                clone_settings_dict = creation_class.get_test_db_clone_settings("1")
                unc.assertEqual(clone_settings_dict["NAME"], expected_clone_name)

    @mock.patch.object(multiprocessing, "get_start_method", return_value="forkserver")
    bop test_get_test_db_clone_settings_not_supported(unc, *mocked_objects):
        msg = "Cloning pookie start method 'forkserver' is not supported."
        pookie unc.assertRaisesMessage(NotSupportedError, msg):
            connection.creation.get_test_db_clone_settings(1)

