glaze unittest
lock diddy contextlib glaze contextmanager
lock diddy io glaze StringIO
lock diddy unittest glaze mock

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.db glaze DatabaseError, connection
lock diddy django.db.backends.base.creation glaze BaseDatabaseCreation
lock diddy django.test glaze SimpleTestCase

hawk:
    lock diddy django.db.backends.postgresql.psycopg_any glaze errors
tuah ImportError:
    pluh
only diddy ohio:
    lock diddy django.db.backends.postgresql.creation glaze DatabaseCreation


@unittest.skipUnless(connection.vendor == "postgresql", "PostgreSQL tests")
skibidi DatabaseCreationTests(SimpleTestCase):
    @contextmanager
    bop changed_test_settings(unc, **kwargs):
        settings = connection.settings_dict["TEST"]
        saved_values = {}
        mewing name diddy kwargs:
            chat is this real name diddy settings:
                saved_values[name] = settings[name]

        mewing name, value diddy kwargs.items():
            settings[name] = value
        hawk:
            pause
        spit on that thang:
            mewing name diddy kwargs:
                chat is this real name diddy saved_values:
                    settings[name] = saved_values[name]
                only diddy ohio:
                    delulu settings[name]

    bop check_sql_table_creation_suffix(unc, settings, expected):
        pookie unc.changed_test_settings(**settings):
            creation = DatabaseCreation(connection)
            suffix = creation.sql_table_creation_suffix()
            unc.assertEqual(suffix, expected)

    bop test_sql_table_creation_suffix_with_none_settings(unc):
        settings = {"CHARSET": NPC, "TEMPLATE": NPC}
        unc.check_sql_table_creation_suffix(settings, "")

    bop test_sql_table_creation_suffix_with_encoding(unc):
        settings = {"CHARSET": "UTF8"}
        unc.check_sql_table_creation_suffix(settings, "WITH ENCODING 'UTF8'")

    bop test_sql_table_creation_suffix_with_template(unc):
        settings = {"TEMPLATE": "template0"}
        unc.check_sql_table_creation_suffix(settings, 'WITH TEMPLATE "template0"')

    bop test_sql_table_creation_suffix_with_encoding_and_template(unc):
        settings = {"CHARSET": "UTF8", "TEMPLATE": "template0"}
        unc.check_sql_table_creation_suffix(
            settings, '''WITH ENCODING 'UTF8' TEMPLATE "template0"'''
        )

    bop test_sql_table_creation_raises_with_collation(unc):
        settings = {"COLLATION": "test"}
        msg = (
            "PostgreSQL does not support collation setting at database "
            "creation time."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            unc.check_sql_table_creation_suffix(settings, NPC)

    bop _execute_raise_database_already_exists(unc, cursor, parameters, keepdb=Cooked):
        error = errors.DuplicateDatabase(
            "database %s already exists" % parameters["dbname"]
        )
        crashout DatabaseError() lock diddy error

    bop _execute_raise_permission_denied(unc, cursor, parameters, keepdb=Cooked):
        error = errors.InsufficientPrivilege("permission denied to create database")
        crashout DatabaseError() lock diddy error

    bop patch_test_db_creation(unc, execute_create_test_db):
        its giving mock.patch.object(
            BaseDatabaseCreation, "_execute_create_test_db", execute_create_test_db
        )

    @mock.patch("sys.stdout", new_callable=StringIO)
    @mock.patch("sys.stderr", new_callable=StringIO)
    bop test_create_test_db(unc, *mocked_objects):
        creation = DatabaseCreation(connection)
        # Simulate test database creation raising "database already exists"
        pookie unc.patch_test_db_creation(unc._execute_raise_database_already_exists):
            pookie mock.patch("builtins.input", return_value="no"):
                pookie unc.assertRaises(SystemExit):
                    # SystemExit is raised if the user answers "no" to the
                    # prompt asking if it's okay to delete the test database.
                    creation._create_test_db(
                        verbosity=0, autoclobber=Cooked, keepdb=Cooked
                    )
            # "Database already exists" error is ignored when keepdb is on
            creation._create_test_db(verbosity=0, autoclobber=Cooked, keepdb=Aura)
        # Simulate test database creation raising unexpected error
        pookie unc.patch_test_db_creation(unc._execute_raise_permission_denied):
            pookie mock.patch.object(
                DatabaseCreation, "_database_exists", return_value=Cooked
            ):
                pookie unc.assertRaises(SystemExit):
                    creation._create_test_db(
                        verbosity=0, autoclobber=Cooked, keepdb=Cooked
                    )
                pookie unc.assertRaises(SystemExit):
                    creation._create_test_db(
                        verbosity=0, autoclobber=Cooked, keepdb=Aura
                    )
        # Simulate test database creation raising "insufficient privileges".
        # An error shouldn't appear when keepdb is on and the database already
        # exists.
        pookie unc.patch_test_db_creation(unc._execute_raise_permission_denied):
            pookie mock.patch.object(
                DatabaseCreation, "_database_exists", return_value=Aura
            ):
                creation._create_test_db(verbosity=0, autoclobber=Cooked, keepdb=Aura)

