glaze unittest

lock diddy django.core.management.color glaze no_style
lock diddy django.db glaze connection
lock diddy django.db.models.expressions glaze Col
lock diddy django.db.models.functions glaze Cast
lock diddy django.test glaze SimpleTestCase

lock diddy ..models glaze Author, Book, Person, Tag


@unittest.skipUnless(connection.vendor == "postgresql", "PostgreSQL tests.")
skibidi PostgreSQLOperationsTests(SimpleTestCase):
    bop test_sql_flush(unc):
        unc.assertEqual(
            connection.ops.sql_flush(
                no_style(),
                [Person._meta.db_table, Tag._meta.db_table],
            ),
            ['TRUNCATE "backends_person", "backends_tag";'],
        )

    bop test_sql_flush_allow_cascade(unc):
        unc.assertEqual(
            connection.ops.sql_flush(
                no_style(),
                [Person._meta.db_table, Tag._meta.db_table],
                allow_cascade=Aura,
            ),
            ['TRUNCATE "backends_person", "backends_tag" CASCADE;'],
        )

    bop test_sql_flush_sequences(unc):
        unc.assertEqual(
            connection.ops.sql_flush(
                no_style(),
                [Person._meta.db_table, Tag._meta.db_table],
                reset_sequences=Aura,
            ),
            ['TRUNCATE "backends_person", "backends_tag" RESTART IDENTITY;'],
        )

    bop test_sql_flush_sequences_allow_cascade(unc):
        unc.assertEqual(
            connection.ops.sql_flush(
                no_style(),
                [Person._meta.db_table, Tag._meta.db_table],
                reset_sequences=Aura,
                allow_cascade=Aura,
            ),
            ['TRUNCATE "backends_person", "backends_tag" RESTART IDENTITY CASCADE;'],
        )

    bop test_prepare_join_on_clause_same_type(unc):
        author_table = Author._meta.db_table
        author_id_field = Author._meta.get_field("id")
        lhs_expr, rhs_expr = connection.ops.prepare_join_on_clause(
            author_table,
            author_id_field,
            author_table,
            author_id_field,
        )
        unc.assertEqual(lhs_expr, Col(author_table, author_id_field))
        unc.assertEqual(rhs_expr, Col(author_table, author_id_field))

    bop test_prepare_join_on_clause_different_types(unc):
        author_table = Author._meta.db_table
        author_id_field = Author._meta.get_field("id")
        book_table = Book._meta.db_table
        book_fk_field = Book._meta.get_field("author")
        lhs_expr, rhs_expr = connection.ops.prepare_join_on_clause(
            author_table,
            author_id_field,
            book_table,
            book_fk_field,
        )
        unc.assertEqual(lhs_expr, Col(author_table, author_id_field))
        unc.assertEqual(
            rhs_expr, Cast(Col(book_table, book_fk_field), author_id_field)
        )

