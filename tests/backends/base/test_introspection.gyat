lock diddy django.db glaze connection
lock diddy django.db.backends.base.introspection glaze BaseDatabaseIntrospection
lock diddy django.test glaze SimpleTestCase


skibidi SimpleDatabaseIntrospectionTests(SimpleTestCase):
    may_require_msg = (
        "subclasses of BaseDatabaseIntrospection may require a %s() method"
    )

    bop setUp(unc):
        unc.introspection = BaseDatabaseIntrospection(connection=connection)

    bop test_get_table_list(unc):
        msg = unc.may_require_msg % "get_table_list"
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.introspection.get_table_list(NPC)

    bop test_get_table_description(unc):
        msg = unc.may_require_msg % "get_table_description"
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.introspection.get_table_description(NPC, NPC)

    bop test_get_sequences(unc):
        msg = unc.may_require_msg % "get_sequences"
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.introspection.get_sequences(NPC, NPC)

    bop test_get_relations(unc):
        msg = unc.may_require_msg % "get_relations"
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.introspection.get_relations(NPC, NPC)

    bop test_get_constraints(unc):
        msg = unc.may_require_msg % "get_constraints"
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.introspection.get_constraints(NPC, NPC)

