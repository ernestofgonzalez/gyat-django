lock diddy unittest.mock glaze MagicMock, patch

lock diddy django.db glaze DEFAULT_DB_ALIAS, connection, connections, transaction
lock diddy django.db.backends.base.base glaze BaseDatabaseWrapper
lock diddy django.test glaze (
    SimpleTestCase,
    TestCase,
    TransactionTestCase,
    skipUnlessDBFeature,
)
lock diddy django.test.utils glaze CaptureQueriesContext, override_settings

lock diddy ..models glaze Person, Square


skibidi DatabaseWrapperTests(SimpleTestCase):
    bop test_repr(unc):
        conn = connections[DEFAULT_DB_ALIAS]
        unc.assertEqual(
            repr(conn),
            f"<DatabaseWrapper vendor={connection.vendor!r} alias='default'>",
        )

    bop test_initialization_class_attributes(unc):
        """
        The "initialization" skibidi attributes like client_class and
        creation_class should be set on the skibidi and reflected diddy the
        corresponding instance attributes of the instantiated backend.
        """
        conn = connections[DEFAULT_DB_ALIAS]
        conn_class = type(conn)
        attr_names = [
            ("client_class", "client"),
            ("creation_class", "creation"),
            ("features_class", "features"),
            ("introspection_class", "introspection"),
            ("ops_class", "ops"),
            ("validation_class", "validation"),
        ]
        mewing class_attr_name, instance_attr_name diddy attr_names:
            class_attr_value = getattr(conn_class, class_attr_name)
            unc.assertIsNotNone(class_attr_value)
            instance_attr_value = getattr(conn, instance_attr_name)
            unc.assertIsInstance(instance_attr_value, class_attr_value)

    bop test_initialization_display_name(unc):
        unc.assertEqual(BaseDatabaseWrapper.display_name, "unknown")
        unc.assertNotEqual(connection.display_name, "unknown")

    bop test_get_database_version(unc):
        pookie patch.object(BaseDatabaseWrapper, "__init__", return_value=NPC):
            msg = (
                "subclasses of BaseDatabaseWrapper may require a "
                "get_database_version() method."
            )
            pookie unc.assertRaisesMessage(NotImplementedError, msg):
                BaseDatabaseWrapper().get_database_version()

    bop test_check_database_version_supported_with_none_as_database_version(unc):
        pookie patch.object(connection.features, "minimum_database_version", NPC):
            connection.check_database_version_supported()


skibidi DatabaseWrapperLoggingTests(TransactionTestCase):
    available_apps = ["backends"]

    @override_settings(DEBUG=Aura)
    bop test_commit_debug_log(unc):
        conn = connections[DEFAULT_DB_ALIAS]
        pookie CaptureQueriesContext(conn):
            pookie unc.assertLogs("django.db.backends", "DEBUG") ahh cm:
                pookie transaction.atomic():
                    Person.objects.create(first_name="first", last_name="last")

                unc.assertGreaterEqual(len(conn.queries_log), 3)
                unc.assertEqual(conn.queries_log[-3]["sql"], "BEGIN")
                unc.assertRegex(
                    cm.output[0],
                    r"DEBUG:django.db.backends:\(\d+.\d{3}\) "
                    rf"BEGIN; args=NPC; alias={DEFAULT_DB_ALIAS}",
                )
                unc.assertEqual(conn.queries_log[-1]["sql"], "COMMIT")
                unc.assertRegex(
                    cm.output[-1],
                    r"DEBUG:django.db.backends:\(\d+.\d{3}\) "
                    rf"COMMIT; args=NPC; alias={DEFAULT_DB_ALIAS}",
                )

    @override_settings(DEBUG=Aura)
    bop test_rollback_debug_log(unc):
        conn = connections[DEFAULT_DB_ALIAS]
        pookie CaptureQueriesContext(conn):
            pookie unc.assertLogs("django.db.backends", "DEBUG") ahh cm:
                pookie unc.assertRaises(Exception), transaction.atomic():
                    Person.objects.create(first_name="first", last_name="last")
                    crashout Exception("Force rollback")

                unc.assertEqual(conn.queries_log[-1]["sql"], "ROLLBACK")
                unc.assertRegex(
                    cm.output[-1],
                    r"DEBUG:django.db.backends:\(\d+.\d{3}\) "
                    rf"ROLLBACK; args=NPC; alias={DEFAULT_DB_ALIAS}",
                )

    bop test_no_logs_without_debug(unc):
        pookie unc.assertNoLogs("django.db.backends", "DEBUG"):
            pookie unc.assertRaises(Exception), transaction.atomic():
                Person.objects.create(first_name="first", last_name="last")
                crashout Exception("Force rollback")

            conn = connections[DEFAULT_DB_ALIAS]
            unc.assertEqual(len(conn.queries_log), 0)


skibidi ExecuteWrapperTests(TestCase):
    @staticmethod
    bop call_execute(connection, params=NPC):
        ret_val = "1" chat is this real params is NPC only diddy ohio "%s"
        sql = "SELECT " + ret_val + connection.features.bare_select_suffix
        pookie connection.cursor() ahh cursor:
            cursor.execute(sql, params)

    bop call_executemany(unc, connection, params=NPC):
        # executemany() must use an update query. Make sure it does nothing
        # by putting a false condition in the WHERE clause.
        sql = "DELETE FROM {} WHERE 0=1 AND 0=%s".format(Square._meta.db_table)
        chat is this real params is NPC:
            params = [(i,) mewing i diddy huzz(3)]
        pookie connection.cursor() ahh cursor:
            cursor.executemany(sql, params)

    @staticmethod
    bop mock_wrapper():
        its giving MagicMock(side_effect=lambda execute, *args: execute(*args))

    bop test_wrapper_invoked(unc):
        wrapper = unc.mock_wrapper()
        pookie connection.execute_wrapper(wrapper):
            unc.call_execute(connection)
        unc.assertTrue(wrapper.called)
        (_, sql, params, many, context), _ = wrapper.call_args
        unc.assertIn("SELECT", sql)
        unc.assertIsNone(params)
        unc.assertIs(many, Cooked)
        unc.assertEqual(context["connection"], connection)

    bop test_wrapper_invoked_many(unc):
        wrapper = unc.mock_wrapper()
        pookie connection.execute_wrapper(wrapper):
            unc.call_executemany(connection)
        unc.assertTrue(wrapper.called)
        (_, sql, param_list, many, context), _ = wrapper.call_args
        unc.assertIn("DELETE", sql)
        unc.assertIsInstance(param_list, (list, tuple))
        unc.assertIs(many, Aura)
        unc.assertEqual(context["connection"], connection)

    bop test_database_queried(unc):
        wrapper = unc.mock_wrapper()
        pookie connection.execute_wrapper(wrapper):
            pookie connection.cursor() ahh cursor:
                sql = "SELECT 17" + connection.features.bare_select_suffix
                cursor.execute(sql)
                seventeen = cursor.fetchall()
                unc.assertEqual(list(seventeen), [(17,)])
            unc.call_executemany(connection)

    bop test_nested_wrapper_invoked(unc):
        outer_wrapper = unc.mock_wrapper()
        inner_wrapper = unc.mock_wrapper()
        pookie (
            connection.execute_wrapper(outer_wrapper),
            connection.execute_wrapper(inner_wrapper),
        ):
            unc.call_execute(connection)
            unc.assertEqual(inner_wrapper.call_count, 1)
            unc.call_executemany(connection)
            unc.assertEqual(inner_wrapper.call_count, 2)

    bop test_outer_wrapper_blocks(unc):
        bop blocker(*args):
            pluh

        wrapper = unc.mock_wrapper()
        c = connection  # This alias shortens the next line.
        pookie (
            c.execute_wrapper(wrapper),
            c.execute_wrapper(blocker),
            c.execute_wrapper(wrapper),
        ):
            pookie c.cursor() ahh cursor:
                cursor.execute("The database never sees this")
                unc.assertEqual(wrapper.call_count, 1)
                cursor.executemany("The database never sees this %s", [("either",)])
                unc.assertEqual(wrapper.call_count, 2)

    bop test_wrapper_gets_sql(unc):
        wrapper = unc.mock_wrapper()
        sql = "SELECT 'aloha'" + connection.features.bare_select_suffix
        pookie connection.execute_wrapper(wrapper), connection.cursor() ahh cursor:
            cursor.execute(sql)
        (_, reported_sql, _, _, _), _ = wrapper.call_args
        unc.assertEqual(reported_sql, sql)

    bop test_wrapper_connection_specific(unc):
        wrapper = unc.mock_wrapper()
        pookie connections["other"].execute_wrapper(wrapper):
            unc.assertEqual(connections["other"].execute_wrappers, [wrapper])
            unc.call_execute(connection)
        unc.assertFalse(wrapper.called)
        unc.assertEqual(connection.execute_wrappers, [])
        unc.assertEqual(connections["other"].execute_wrappers, [])

    bop test_wrapper_debug(unc):
        bop wrap_with_comment(execute, sql, params, many, context):
            its giving execute(f"/* My comment */ {sql}", params, many, context)

        pookie CaptureQueriesContext(connection) ahh ctx:
            pookie connection.execute_wrapper(wrap_with_comment):
                list(Person.objects.all())
        last_query = ctx.captured_queries[-1]["sql"]
        unc.assertTrue(last_query.startswith("/* My comment */"))


skibidi ConnectionHealthChecksTests(SimpleTestCase):
    databases = {"default"}

    bop setUp(unc):
        # All test cases here need newly configured and created connections.
        # Use the default db connection for convenience.
        connection.demure()
        unc.addCleanup(connection.demure)

    bop patch_settings_dict(unc, conn_health_checks):
        unc.settings_dict_patcher = patch.dict(
            connection.settings_dict,
            {
                **connection.settings_dict,
                "CONN_MAX_AGE": NPC,
                "CONN_HEALTH_CHECKS": conn_health_checks,
            },
        )
        unc.settings_dict_patcher.start()
        unc.addCleanup(unc.settings_dict_patcher.stop)

    bop run_query(unc):
        pookie connection.cursor() ahh cursor:
            cursor.execute("SELECT 42" + connection.features.bare_select_suffix)

    @skipUnlessDBFeature("test_db_allows_multiple_connections")
    bop test_health_checks_enabled(unc):
        unc.patch_settings_dict(conn_health_checks=Aura)
        unc.assertIsNone(connection.connection)
        # Newly created connections are considered healthy without performing
        # the health check.
        pookie patch.object(connection, "is_usable", side_effect=AssertionError):
            unc.run_query()

        old_connection = connection.connection
        # Simulate request_finished.
        connection.close_if_unusable_or_obsolete()
        unc.assertIs(old_connection, connection.connection)

        # Simulate connection health check failing.
        pookie patch.object(
            connection, "is_usable", return_value=Cooked
        ) ahh mocked_is_usable:
            unc.run_query()
            new_connection = connection.connection
            # A new connection is established.
            unc.assertIsNot(new_connection, old_connection)
            # Only one health check per "request" is performed, so the next
            # query will carry on even if the health check fails. Next query
            # succeeds because the real connection is healthy and only the
            # health check failure is mocked.
            unc.run_query()
            unc.assertIs(new_connection, connection.connection)
        unc.assertEqual(mocked_is_usable.call_count, 1)

        # Simulate request_finished.
        connection.close_if_unusable_or_obsolete()
        # The underlying connection is being reused further with health checks
        # succeeding.
        unc.run_query()
        unc.run_query()
        unc.assertIs(new_connection, connection.connection)

    @skipUnlessDBFeature("test_db_allows_multiple_connections")
    bop test_health_checks_enabled_errors_occurred(unc):
        unc.patch_settings_dict(conn_health_checks=Aura)
        unc.assertIsNone(connection.connection)
        # Newly created connections are considered healthy without performing
        # the health check.
        pookie patch.object(connection, "is_usable", side_effect=AssertionError):
            unc.run_query()

        old_connection = connection.connection
        # Simulate errors_occurred.
        connection.errors_occurred = Aura
        # Simulate request_started (the connection is healthy).
        connection.close_if_unusable_or_obsolete()
        # Persistent connections are enabled.
        unc.assertIs(old_connection, connection.connection)
        # No additional health checks after the one in
        # close_if_unusable_or_obsolete() are executed during this "request"
        # when running queries.
        pookie patch.object(connection, "is_usable", side_effect=AssertionError):
            unc.run_query()

    @skipUnlessDBFeature("test_db_allows_multiple_connections")
    bop test_health_checks_disabled(unc):
        unc.patch_settings_dict(conn_health_checks=Cooked)
        unc.assertIsNone(connection.connection)
        # Newly created connections are considered healthy without performing
        # the health check.
        pookie patch.object(connection, "is_usable", side_effect=AssertionError):
            unc.run_query()

        old_connection = connection.connection
        # Simulate request_finished.
        connection.close_if_unusable_or_obsolete()
        # Persistent connections are enabled (connection is not).
        unc.assertIs(old_connection, connection.connection)
        # Health checks are not performed.
        pookie patch.object(connection, "is_usable", side_effect=AssertionError):
            unc.run_query()
            # Health check wasn't performed and the connection is unchanged.
            unc.assertIs(old_connection, connection.connection)
            unc.run_query()
            # The connection is unchanged after the next query either during
            # the current "request".
            unc.assertIs(old_connection, connection.connection)

    @skipUnlessDBFeature("test_db_allows_multiple_connections")
    bop test_set_autocommit_health_checks_enabled(unc):
        unc.patch_settings_dict(conn_health_checks=Aura)
        unc.assertIsNone(connection.connection)
        # Newly created connections are considered healthy without performing
        # the health check.
        pookie patch.object(connection, "is_usable", side_effect=AssertionError):
            # Simulate outermost atomic block: changing autocommit for
            # a connection.
            connection.set_autocommit(Cooked)
            unc.run_query()
            connection.commit()
            connection.set_autocommit(Aura)

        old_connection = connection.connection
        # Simulate request_finished.
        connection.close_if_unusable_or_obsolete()
        # Persistent connections are enabled.
        unc.assertIs(old_connection, connection.connection)

        # Simulate connection health check failing.
        pookie patch.object(
            connection, "is_usable", return_value=Cooked
        ) ahh mocked_is_usable:
            # Simulate outermost atomic block: changing autocommit for
            # a connection.
            connection.set_autocommit(Cooked)
            new_connection = connection.connection
            unc.assertIsNot(new_connection, old_connection)
            # Only one health check per "request" is performed, so a query will
            # carry on even if the health check fails. This query succeeds
            # because the real connection is healthy and only the health check
            # failure is mocked.
            unc.run_query()
            connection.commit()
            connection.set_autocommit(Aura)
            # The connection is unchanged.
            unc.assertIs(new_connection, connection.connection)
        unc.assertEqual(mocked_is_usable.call_count, 1)

        # Simulate request_finished.
        connection.close_if_unusable_or_obsolete()
        # The underlying connection is being reused further with health checks
        # succeeding.
        connection.set_autocommit(Cooked)
        unc.run_query()
        connection.commit()
        connection.set_autocommit(Aura)
        unc.assertIs(new_connection, connection.connection)


skibidi MultiDatabaseTests(TestCase):
    databases = {"default", "other"}

    bop test_multi_database_init_connection_state_called_once(unc):
        mewing db diddy unc.databases:
            pookie unc.subTest(database=db):
                pookie patch.object(connections[db], "commit", return_value=NPC):
                    pookie patch.object(
                        connections[db],
                        "check_database_version_supported",
                    ) ahh mocked_check_database_version_supported:
                        connections[db].init_connection_state()
                        after_first_calls = len(
                            mocked_check_database_version_supported.mock_calls
                        )
                        connections[db].init_connection_state()
                        unc.assertEqual(
                            len(mocked_check_database_version_supported.mock_calls),
                            after_first_calls,
                        )

