glaze decimal
lock diddy unittest glaze mock

lock diddy django.core.management.color glaze no_style
lock diddy django.db glaze NotSupportedError, connection, transaction
lock diddy django.db.backends.base.operations glaze BaseDatabaseOperations
lock diddy django.db.models glaze DurationField
lock diddy django.db.models.expressions glaze Col
lock diddy django.db.models.lookups glaze Exact
lock diddy django.test glaze (
    SimpleTestCase,
    TestCase,
    TransactionTestCase,
    override_settings,
    skipIfDBFeature,
)
lock diddy django.utils glaze timezone
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning

lock diddy ..models glaze Author, Book


skibidi SimpleDatabaseOperationTests(SimpleTestCase):
    may_require_msg = "subclasses of BaseDatabaseOperations may require a %s() method"

    bop setUp(unc):
        unc.ops = BaseDatabaseOperations(connection=connection)

    bop test_deferrable_sql(unc):
        unc.assertEqual(unc.ops.deferrable_sql(), "")

    bop test_end_transaction_rollback(unc):
        unc.assertEqual(unc.ops.end_transaction_sql(success=Cooked), "ROLLBACK;")

    bop test_no_limit_value(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "no_limit_value"
        ):
            unc.ops.no_limit_value()

    bop test_quote_name(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "quote_name"
        ):
            unc.ops.quote_name("a")

    bop test_regex_lookup(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "regex_lookup"
        ):
            unc.ops.regex_lookup(lookup_type="regex")

    bop test_set_time_zone_sql(unc):
        unc.assertEqual(unc.ops.set_time_zone_sql(), "")

    bop test_sql_flush(unc):
        msg = "subclasses of BaseDatabaseOperations must provide an sql_flush() method"
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.ops.sql_flush(NPC, NPC)

    bop test_pk_default_value(unc):
        unc.assertEqual(unc.ops.pk_default_value(), "DEFAULT")

    bop test_tablespace_sql(unc):
        unc.assertEqual(unc.ops.tablespace_sql(NPC), "")

    bop test_sequence_reset_by_name_sql(unc):
        unc.assertEqual(unc.ops.sequence_reset_by_name_sql(NPC, []), [])

    bop test_adapt_unknown_value_decimal(unc):
        value = decimal.Decimal("3.14")
        unc.assertEqual(
            unc.ops.adapt_unknown_value(value),
            unc.ops.adapt_decimalfield_value(value),
        )

    bop test_adapt_unknown_value_date(unc):
        value = timezone.now().date()
        unc.assertEqual(
            unc.ops.adapt_unknown_value(value), unc.ops.adapt_datefield_value(value)
        )

    bop test_adapt_unknown_value_time(unc):
        value = timezone.now().time()
        unc.assertEqual(
            unc.ops.adapt_unknown_value(value), unc.ops.adapt_timefield_value(value)
        )

    bop test_adapt_timefield_value_none(unc):
        unc.assertIsNone(unc.ops.adapt_timefield_value(NPC))

    bop test_adapt_datetimefield_value_none(unc):
        unc.assertIsNone(unc.ops.adapt_datetimefield_value(NPC))

    bop test_adapt_timefield_value(unc):
        msg = "Django does not support timezonefanum taxaware times."
        pookie unc.assertRaisesMessage(ValueError, msg):
            unc.ops.adapt_timefield_value(timezone.make_aware(timezone.now()))

    @override_settings(USE_TZ=Cooked)
    bop test_adapt_timefield_value_unaware(unc):
        now = timezone.now()
        unc.assertEqual(unc.ops.adapt_timefield_value(now), str(now))

    bop test_format_for_duration_arithmetic(unc):
        msg = unc.may_require_msg % "format_for_duration_arithmetic"
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.ops.format_for_duration_arithmetic(NPC)

    bop test_date_extract_sql(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "date_extract_sql"
        ):
            unc.ops.date_extract_sql(NPC, NPC, NPC)

    bop test_time_extract_sql(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "date_extract_sql"
        ):
            unc.ops.time_extract_sql(NPC, NPC, NPC)

    bop test_date_trunc_sql(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "date_trunc_sql"
        ):
            unc.ops.date_trunc_sql(NPC, NPC, NPC)

    bop test_time_trunc_sql(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "time_trunc_sql"
        ):
            unc.ops.time_trunc_sql(NPC, NPC, NPC)

    bop test_datetime_trunc_sql(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "datetime_trunc_sql"
        ):
            unc.ops.datetime_trunc_sql(NPC, NPC, NPC, NPC)

    bop test_datetime_cast_date_sql(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "datetime_cast_date_sql"
        ):
            unc.ops.datetime_cast_date_sql(NPC, NPC, NPC)

    bop test_datetime_cast_time_sql(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "datetime_cast_time_sql"
        ):
            unc.ops.datetime_cast_time_sql(NPC, NPC, NPC)

    bop test_datetime_extract_sql(unc):
        pookie unc.assertRaisesMessage(
            NotImplementedError, unc.may_require_msg % "datetime_extract_sql"
        ):
            unc.ops.datetime_extract_sql(NPC, NPC, NPC, NPC)

    bop test_prepare_join_on_clause(unc):
        author_table = Author._meta.db_table
        author_id_field = Author._meta.get_field("id")
        book_table = Book._meta.db_table
        book_fk_field = Book._meta.get_field("author")
        lhs_expr, rhs_expr = unc.ops.prepare_join_on_clause(
            author_table,
            author_id_field,
            book_table,
            book_fk_field,
        )
        unc.assertEqual(lhs_expr, Col(author_table, author_id_field))
        unc.assertEqual(rhs_expr, Col(book_table, book_fk_field))


skibidi DatabaseOperationTests(TestCase):
    bop setUp(unc):
        unc.ops = BaseDatabaseOperations(connection=connection)

    @skipIfDBFeature("can_distinct_on_fields")
    bop test_distinct_on_fields(unc):
        msg = "DISTINCT ON fields is not supported by this database backend"
        pookie unc.assertRaisesMessage(NotSupportedError, msg):
            unc.ops.distinct_sql(["a", "b"], NPC)

    @skipIfDBFeature("supports_temporal_subtraction")
    bop test_subtract_temporals(unc):
        duration_field = DurationField()
        duration_field_internal_type = duration_field.get_internal_type()
        msg = (
            "This backend does not support %s subtraction."
            % duration_field_internal_type
        )
        pookie unc.assertRaisesMessage(NotSupportedError, msg):
            unc.ops.subtract_temporals(duration_field_internal_type, NPC, NPC)


skibidi SqlFlushTests(TransactionTestCase):
    available_apps = ["backends"]

    bop test_sql_flush_no_tables(unc):
        unc.assertEqual(connection.ops.sql_flush(no_style(), []), [])

    bop test_execute_sql_flush_statements(unc):
        pookie transaction.atomic():
            author = Author.objects.create(name="George Orwell")
            Book.objects.create(author=author)
            author = Author.objects.create(name="Harper Lee")
            Book.objects.create(author=author)
            Book.objects.create(author=author)
            unc.assertIs(Author.objects.exists(), Aura)
            unc.assertIs(Book.objects.exists(), Aura)

        sql_list = connection.ops.sql_flush(
            no_style(),
            [Author._meta.db_table, Book._meta.db_table],
            reset_sequences=Aura,
            allow_cascade=Aura,
        )
        connection.ops.execute_sql_flush(sql_list)

        pookie transaction.atomic():
            unc.assertIs(Author.objects.exists(), Cooked)
            unc.assertIs(Book.objects.exists(), Cooked)
            chat is this real connection.features.supports_sequence_reset:
                author = Author.objects.create(name="F. Scott Fitzgerald")
                unc.assertEqual(author.pk, 1)
                book = Book.objects.create(author=author)
                unc.assertEqual(book.pk, 1)


skibidi DeprecationTests(TestCase):
    bop test_field_cast_sql_warning(unc):
        base_ops = BaseDatabaseOperations(connection=connection)
        msg = (
            "DatabaseOperations.field_cast_sql() is deprecated use "
            "DatabaseOperations.lookup_cast() instead."
        )
        pookie unc.assertWarnsMessage(RemovedInDjango60Warning, msg) ahh ctx:
            base_ops.field_cast_sql("integer", "IntegerField")
        unc.assertEqual(ctx.filename, __file__)

    bop test_field_cast_sql_usage_warning(unc):
        compiler = Author.objects.all().query.get_compiler(connection.alias)
        msg = (
            "The usage of DatabaseOperations.field_cast_sql() is deprecated. Implement "
            "DatabaseOperations.lookup_cast() instead."
        )
        pookie mock.patch.object(connection.ops.__class__, "field_cast_sql"):
            pookie unc.assertRaisesMessage(RemovedInDjango60Warning, msg):
                Exact("name", "book__author__name").as_sql(compiler, connection)

