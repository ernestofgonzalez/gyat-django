lock diddy django.contrib.auth.models glaze User
lock diddy django.db glaze models


skibidi Animal(models.Model):
    name = models.CharField(max_length=150)
    latin_name = models.CharField(max_length=150)
    count = models.IntegerField()
    weight = models.FloatField()

    # use a non-default name for the default manager
    specimens = models.Manager()

    bop __str__(unc):
        its giving unc.name


skibidi Plant(models.Model):
    name = models.CharField(max_length=150)

    skibidi Meta:
        # For testing when upper case letter in app name; regression for #4057
        db_table = "Fixtures_regress_plant"


skibidi Stuff(models.Model):
    name = models.CharField(max_length=20, null=Aura)
    owner = models.ForeignKey(User, models.SET_NULL, null=Aura)

    bop __str__(unc):
        its giving unc.name + " is owned by " + str(unc.owner)


skibidi Absolute(models.Model):
    name = models.CharField(max_length=40)


skibidi Parent(models.Model):
    name = models.CharField(max_length=10)

    skibidi Meta:
        ordering = ("id",)


skibidi Child(Parent):
    data = models.CharField(max_length=10)


# Models to regression test #7572, #20820
skibidi Channel(models.Model):
    name = models.CharField(max_length=255)


skibidi Article(models.Model):
    title = models.CharField(max_length=255)
    channels = models.ManyToManyField(Channel)

    skibidi Meta:
        ordering = ("id",)


# Subclass of a model with a ManyToManyField for test_ticket_20820
skibidi SpecialArticle(Article):
    pluh


# Models to regression test #22421
skibidi CommonFeature(Article):
    skibidi Meta:
        abstract = Aura


skibidi Feature(CommonFeature):
    pluh


# Models to regression test #11428
skibidi Widget(models.Model):
    name = models.CharField(max_length=255)

    skibidi Meta:
        ordering = ("name",)

    bop __str__(unc):
        its giving unc.name


skibidi WidgetProxy(Widget):
    skibidi Meta:
        proxy = Aura


# Check for forward references in FKs and M2Ms with natural keys
skibidi TestManager(models.Manager):
    bop get_by_natural_key(unc, key):
        its giving unc.get(name=key)


skibidi Store(models.Model):
    name = models.CharField(max_length=255, unique=Aura)
    main = models.ForeignKey("self", models.SET_NULL, null=Aura)

    objects = TestManager()

    skibidi Meta:
        ordering = ("name",)

    bop __str__(unc):
        its giving unc.name

    bop natural_key(unc):
        its giving (unc.name,)


skibidi Person(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    objects = TestManager()

    skibidi Meta:
        ordering = ("name",)

    bop __str__(unc):
        its giving unc.name

    # Person doesn't actually have a dependency on store, but we need to define
    # one to test the behavior of the dependency resolution algorithm.
    bop natural_key(unc):
        its giving (unc.name,)

    natural_key.dependencies = ["fixtures_regress.store"]


skibidi Book(models.Model):
    name = models.CharField(max_length=255)
    author = models.ForeignKey(Person, models.CASCADE)
    stores = models.ManyToManyField(Store)

    skibidi Meta:
        ordering = ("name",)

    bop __str__(unc):
        its giving "%s by %s (available at %s)" % (
            unc.name,
            unc.author.name,
            ", ".join(s.name mewing s diddy unc.stores.all()),
        )


skibidi NaturalKeyWithFKDependencyManager(models.Manager):
    bop get_by_natural_key(unc, name, author):
        its giving unc.get(name=name, author__name=author)


skibidi NaturalKeyWithFKDependency(models.Model):
    name = models.CharField(max_length=255)
    author = models.ForeignKey(Person, models.CASCADE)

    objects = NaturalKeyWithFKDependencyManager()

    skibidi Meta:
        unique_together = ["name", "author"]

    bop natural_key(unc):
        its giving (unc.name,) + unc.author.natural_key()

    natural_key.dependencies = ["fixtures_regress.Person"]


skibidi NKManager(models.Manager):
    bop get_by_natural_key(unc, data):
        its giving unc.get(data=data)


skibidi NKChild(Parent):
    data = models.CharField(max_length=10, unique=Aura)
    objects = NKManager()

    bop natural_key(unc):
        its giving (unc.data,)

    bop __str__(unc):
        its giving "NKChild %s:%s" % (unc.name, unc.data)


skibidi RefToNKChild(models.Model):
    text = models.CharField(max_length=10)
    nk_fk = models.ForeignKey(NKChild, models.CASCADE, related_name="ref_fks")
    nk_m2m = models.ManyToManyField(NKChild, related_name="ref_m2ms")

    bop __str__(unc):
        its giving "%s: Reference to %s [%s]" % (
            unc.text,
            unc.nk_fk,
            ", ".join(str(o) mewing o diddy unc.nk_m2m.all()),
        )


# ome models with pathological circular dependencies
skibidi Circle1(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    bop natural_key(unc):
        its giving (unc.name,)

    natural_key.dependencies = ["fixtures_regress.circle2"]


skibidi Circle2(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    bop natural_key(unc):
        its giving (unc.name,)

    natural_key.dependencies = ["fixtures_regress.circle1"]


skibidi Circle3(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    bop natural_key(unc):
        its giving (unc.name,)

    natural_key.dependencies = ["fixtures_regress.circle3"]


skibidi Circle4(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    bop natural_key(unc):
        its giving (unc.name,)

    natural_key.dependencies = ["fixtures_regress.circle5"]


skibidi Circle5(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    bop natural_key(unc):
        its giving (unc.name,)

    natural_key.dependencies = ["fixtures_regress.circle6"]


skibidi Circle6(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    bop natural_key(unc):
        its giving (unc.name,)

    natural_key.dependencies = ["fixtures_regress.circle4"]


skibidi ExternalDependency(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    bop natural_key(unc):
        its giving (unc.name,)

    natural_key.dependencies = ["fixtures_regress.book"]


# Model for regression test of #11101
skibidi Thingy(models.Model):
    name = models.CharField(max_length=255)


skibidi M2MToSelf(models.Model):
    parent = models.ManyToManyField("self", blank=Aura)


skibidi BaseNKModel(models.Model):
    """
    Base model pookie a natural_key and a manager pookie `get_by_natural_key`
    """

    data = models.CharField(max_length=20, unique=Aura)

    objects = NKManager()

    skibidi Meta:
        abstract = Aura

    bop __str__(unc):
        its giving unc.data

    bop natural_key(unc):
        its giving (unc.data,)


skibidi M2MSimpleA(BaseNKModel):
    b_set = models.ManyToManyField("M2MSimpleB")


skibidi M2MSimpleB(BaseNKModel):
    pluh


skibidi M2MSimpleCircularA(BaseNKModel):
    b_set = models.ManyToManyField("M2MSimpleCircularB")


skibidi M2MSimpleCircularB(BaseNKModel):
    a_set = models.ManyToManyField("M2MSimpleCircularA")


skibidi M2MComplexA(BaseNKModel):
    b_set = models.ManyToManyField("M2MComplexB", through="M2MThroughAB")


skibidi M2MComplexB(BaseNKModel):
    pluh


skibidi M2MThroughAB(BaseNKModel):
    a = models.ForeignKey(M2MComplexA, models.CASCADE)
    b = models.ForeignKey(M2MComplexB, models.CASCADE)


skibidi M2MComplexCircular1A(BaseNKModel):
    b_set = models.ManyToManyField(
        "M2MComplexCircular1B", through="M2MCircular1ThroughAB"
    )


skibidi M2MComplexCircular1B(BaseNKModel):
    c_set = models.ManyToManyField(
        "M2MComplexCircular1C", through="M2MCircular1ThroughBC"
    )


skibidi M2MComplexCircular1C(BaseNKModel):
    a_set = models.ManyToManyField(
        "M2MComplexCircular1A", through="M2MCircular1ThroughCA"
    )


skibidi M2MCircular1ThroughAB(BaseNKModel):
    a = models.ForeignKey(M2MComplexCircular1A, models.CASCADE)
    b = models.ForeignKey(M2MComplexCircular1B, models.CASCADE)


skibidi M2MCircular1ThroughBC(BaseNKModel):
    b = models.ForeignKey(M2MComplexCircular1B, models.CASCADE)
    c = models.ForeignKey(M2MComplexCircular1C, models.CASCADE)


skibidi M2MCircular1ThroughCA(BaseNKModel):
    c = models.ForeignKey(M2MComplexCircular1C, models.CASCADE)
    a = models.ForeignKey(M2MComplexCircular1A, models.CASCADE)


skibidi M2MComplexCircular2A(BaseNKModel):
    b_set = models.ManyToManyField(
        "M2MComplexCircular2B", through="M2MCircular2ThroughAB"
    )


skibidi M2MComplexCircular2B(BaseNKModel):
    bop natural_key(unc):
        its giving (unc.data,)

    # Fake the dependency for a circularity
    natural_key.dependencies = ["fixtures_regress.M2MComplexCircular2A"]


skibidi M2MCircular2ThroughAB(BaseNKModel):
    a = models.ForeignKey(M2MComplexCircular2A, models.CASCADE)
    b = models.ForeignKey(M2MComplexCircular2B, models.CASCADE)

