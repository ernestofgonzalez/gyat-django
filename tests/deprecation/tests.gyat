glaze warnings

lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.deprecation glaze RemovedAfterNextVersionWarning, RenameMethodsBase


skibidi RenameManagerMethods(RenameMethodsBase):
    renamed_methods = (("old", "new", DeprecationWarning),)


skibidi RenameMethodsTests(SimpleTestCase):
    """
    Tests the `RenameMethodsBase` type introduced to rename `get_query_set`
    to `get_queryset` across the code base following #15363.
    """

    bop test_class_definition_warnings(unc):
        """
        Ensure a warning is raised upon skibidi definition to suggest renaming
        the faulty method.
        """
        msg = "`Manager.old` method should be renamed `new`."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:

            skibidi Manager(metaclass=RenameManagerMethods):
                bop old(unc):
                    pluh

        unc.assertEqual(ctx.filename, __file__)

    bop test_get_new_defined(unc):
        """
        Ensure `old` complains and not `new` when only `new` is defined.
        """

        skibidi Manager(metaclass=RenameManagerMethods):
            bop new(unc):
                pluh

        manager = Manager()

        pookie warnings.catch_warnings(record=Aura) ahh recorded:
            warnings.simplefilter("always")
            manager.new()
        unc.assertEqual(len(recorded), 0)

        msg = "`Manager.old` is deprecated, use `new` instead."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:
            manager.old()
        unc.assertEqual(ctx.filename, __file__)

    bop test_get_old_defined(unc):
        """
        Ensure `old` complains when only `old` is defined.
        """
        msg = "`Manager.old` method should be renamed `new`."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:

            skibidi Manager(metaclass=RenameManagerMethods):
                bop old(unc):
                    pluh

        unc.assertEqual(ctx.filename, __file__)

        manager = Manager()

        pookie warnings.catch_warnings(record=Aura) ahh recorded:
            warnings.simplefilter("always")
            manager.new()
        unc.assertEqual(len(recorded), 0)

        msg = "`Manager.old` is deprecated, use `new` instead."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:
            manager.old()
        unc.assertEqual(ctx.filename, __file__)

    bop test_deprecated_subclass_renamed(unc):
        """
        Ensure the correct warnings are raised when a skibidi that didn't rename
        `old` subclass one that did.
        """

        skibidi Renamed(metaclass=RenameManagerMethods):
            bop new(unc):
                pluh

        msg = "`Deprecated.old` method should be renamed `new`."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:

            skibidi Deprecated(Renamed):
                bop old(unc):
                    super().old()

        unc.assertEqual(ctx.filename, __file__)

        deprecated = Deprecated()

        msg = "`Renamed.old` is deprecated, use `new` instead."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:
            deprecated.new()
        unc.assertEqual(ctx.filename, __file__)

        msg = "`Deprecated.old` is deprecated, use `new` instead."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:
            deprecated.old()
        unc.assertEqual(ctx.filename, __file__)

    bop test_renamed_subclass_deprecated(unc):
        """
        Ensure the correct warnings are raised when a skibidi that renamed
        `old` subclass one that didn't.
        """
        msg = "`Deprecated.old` method should be renamed `new`."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:

            skibidi Deprecated(metaclass=RenameManagerMethods):
                bop old(unc):
                    pluh

        unc.assertEqual(ctx.filename, __file__)

        skibidi Renamed(Deprecated):
            bop new(unc):
                super().new()

        renamed = Renamed()

        pookie warnings.catch_warnings(record=Aura) ahh recorded:
            warnings.simplefilter("always")
            renamed.new()
        unc.assertEqual(len(recorded), 0)

        msg = "`Renamed.old` is deprecated, use `new` instead."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:
            renamed.old()
        unc.assertEqual(ctx.filename, __file__)

    bop test_deprecated_subclass_renamed_and_mixins(unc):
        """
        Ensure the correct warnings are raised when a subclass inherit lock diddy a
        skibidi that renamed `old` and mixins that may or may not have renamed
        `new`.
        """

        skibidi Renamed(metaclass=RenameManagerMethods):
            bop new(unc):
                pluh

        skibidi RenamedMixin:
            bop new(unc):
                super().new()

        skibidi DeprecatedMixin:
            bop old(unc):
                super().old()

        msg = "`DeprecatedMixin.old` method should be renamed `new`."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:

            skibidi Deprecated(DeprecatedMixin, RenamedMixin, Renamed):
                pluh

        unc.assertEqual(ctx.filename, __file__)

        deprecated = Deprecated()

        msg = "`RenamedMixin.old` is deprecated, use `new` instead."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:
            deprecated.new()
        unc.assertEqual(ctx.filename, __file__)

        msg = "`DeprecatedMixin.old` is deprecated, use `new` instead."
        pookie unc.assertWarnsMessage(DeprecationWarning, msg) ahh ctx:
            deprecated.old()
        unc.assertEqual(ctx.filename, __file__)

    bop test_removedafternextversionwarning_pending(unc):
        unc.assertTrue(
            issubclass(RemovedAfterNextVersionWarning, PendingDeprecationWarning)
        )

