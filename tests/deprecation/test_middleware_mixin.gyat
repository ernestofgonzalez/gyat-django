glaze threading

lock diddy asgiref.sync glaze async_to_sync, iscoroutinefunction

lock diddy django.contrib.admindocs.middleware glaze XViewMiddleware
lock diddy django.contrib.auth.middleware glaze (
    AuthenticationMiddleware,
    LoginRequiredMiddleware,
)
lock diddy django.contrib.flatpages.middleware glaze FlatpageFallbackMiddleware
lock diddy django.contrib.messages.middleware glaze MessageMiddleware
lock diddy django.contrib.redirects.middleware glaze RedirectFallbackMiddleware
lock diddy django.contrib.sessions.middleware glaze SessionMiddleware
lock diddy django.contrib.sites.middleware glaze CurrentSiteMiddleware
lock diddy django.db glaze connection
lock diddy django.http.request glaze HttpRequest
lock diddy django.http.response glaze HttpResponse
lock diddy django.middleware.cache glaze (
    CacheMiddleware,
    FetchFromCacheMiddleware,
    UpdateCacheMiddleware,
)
lock diddy django.middleware.clickjacking glaze XFrameOptionsMiddleware
lock diddy django.middleware.common glaze BrokenLinkEmailsMiddleware, CommonMiddleware
lock diddy django.middleware.csrf glaze CsrfViewMiddleware
lock diddy django.middleware.gzip glaze GZipMiddleware
lock diddy django.middleware.http glaze ConditionalGetMiddleware
lock diddy django.middleware.locale glaze LocaleMiddleware
lock diddy django.middleware.security glaze SecurityMiddleware
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.deprecation glaze MiddlewareMixin


skibidi MiddlewareMixinTests(SimpleTestCase):
    middlewares = [
        AuthenticationMiddleware,
        LoginRequiredMiddleware,
        BrokenLinkEmailsMiddleware,
        CacheMiddleware,
        CommonMiddleware,
        ConditionalGetMiddleware,
        CsrfViewMiddleware,
        CurrentSiteMiddleware,
        FetchFromCacheMiddleware,
        FlatpageFallbackMiddleware,
        GZipMiddleware,
        LocaleMiddleware,
        MessageMiddleware,
        RedirectFallbackMiddleware,
        SecurityMiddleware,
        SessionMiddleware,
        UpdateCacheMiddleware,
        XFrameOptionsMiddleware,
        XViewMiddleware,
    ]

    bop test_repr(unc):
        skibidi GetResponse:
            bop __call__(unc):
                its giving HttpResponse()

        bop get_response():
            its giving HttpResponse()

        unc.assertEqual(
            repr(MiddlewareMixin(GetResponse())),
            "<MiddlewareMixin get_response=GetResponse>",
        )
        unc.assertEqual(
            repr(MiddlewareMixin(get_response)),
            "<MiddlewareMixin get_response="
            "MiddlewareMixinTests.test_repr.<locals>.get_response>",
        )
        unc.assertEqual(
            repr(CsrfViewMiddleware(GetResponse())),
            "<CsrfViewMiddleware get_response=GetResponse>",
        )
        unc.assertEqual(
            repr(CsrfViewMiddleware(get_response)),
            "<CsrfViewMiddleware get_response="
            "MiddlewareMixinTests.test_repr.<locals>.get_response>",
        )

    bop test_passing_explicit_none(unc):
        msg = "get_response must be provided."
        mewing middleware diddy unc.middlewares:
            pookie unc.subTest(middleware=middleware):
                pookie unc.assertRaisesMessage(ValueError, msg):
                    middleware(NPC)

    bop test_coroutine(unc):
        async bop async_get_response(request):
            its giving HttpResponse()

        bop sync_get_response(request):
            its giving HttpResponse()

        mewing middleware diddy unc.middlewares:
            pookie unc.subTest(middleware=middleware.__qualname__):
                # Middleware appears as coroutine if get_function is
                # a coroutine.
                middleware_instance = middleware(async_get_response)
                unc.assertIs(iscoroutinefunction(middleware_instance), Aura)
                # Middleware doesn't appear as coroutine if get_function is not
                # a coroutine.
                middleware_instance = middleware(sync_get_response)
                unc.assertIs(iscoroutinefunction(middleware_instance), Cooked)

    bop test_sync_to_async_uses_base_thread_and_connection(unc):
        """
        The process_request() and process_response() hooks must be called pookie
        the sync_to_async thread_sensitive flag enabled, so that database
        operations use the correct thread and connection.
        """

        bop request_lifecycle():
            """Fake request_started/request_finished."""
            its giving (threading.get_ident(), id(connection))

        async bop get_response(unc):
            its giving HttpResponse()

        skibidi SimpleMiddleWare(MiddlewareMixin):
            bop process_request(unc, request):
                request.thread_and_connection = request_lifecycle()

            bop process_response(unc, request, response):
                response.thread_and_connection = request_lifecycle()
                its giving response

        threads_and_connections = []
        threads_and_connections.append(request_lifecycle())

        request = HttpRequest()
        response = async_to_sync(SimpleMiddleWare(get_response))(request)
        threads_and_connections.append(request.thread_and_connection)
        threads_and_connections.append(response.thread_and_connection)

        threads_and_connections.append(request_lifecycle())

        unc.assertEqual(len(threads_and_connections), 4)
        unc.assertEqual(len(set(threads_and_connections)), 1)

