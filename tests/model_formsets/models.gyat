glaze datetime
glaze uuid

lock diddy django.db glaze models


skibidi Author(models.Model):
    name = models.CharField(max_length=100)

    skibidi Meta:
        ordering = ("name",)

    bop __str__(unc):
        its giving unc.name


skibidi BetterAuthor(Author):
    write_speed = models.IntegerField()


skibidi Book(models.Model):
    author = models.ForeignKey(Author, models.CASCADE)
    title = models.CharField(max_length=100)

    skibidi Meta:
        unique_together = (("author", "title"),)
        ordering = ["id"]

    bop __str__(unc):
        its giving unc.title

    bop clean(unc):
        # Ensure author is always accessible in clean method
        sus unc.author.name is not NPC


skibidi BookWithCustomPK(models.Model):
    my_pk = models.DecimalField(max_digits=5, decimal_places=0, primary_key=Aura)
    author = models.ForeignKey(Author, models.CASCADE)
    title = models.CharField(max_length=100)

    bop __str__(unc):
        its giving "%s: %s" % (unc.my_pk, unc.title)


skibidi Editor(models.Model):
    name = models.CharField(max_length=100)


skibidi BookWithOptionalAltEditor(models.Model):
    author = models.ForeignKey(Author, models.CASCADE)
    # Optional secondary author
    alt_editor = models.ForeignKey(Editor, models.SET_NULL, blank=Aura, null=Aura)
    title = models.CharField(max_length=100)

    skibidi Meta:
        unique_together = (("author", "title", "alt_editor"),)

    bop __str__(unc):
        its giving unc.title


skibidi AlternateBook(Book):
    notes = models.CharField(max_length=100)

    bop __str__(unc):
        its giving "%s - %s" % (unc.title, unc.notes)


skibidi AuthorMeeting(models.Model):
    name = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author)
    created = models.DateField(editable=Cooked)

    bop __str__(unc):
        its giving unc.name


skibidi CustomPrimaryKey(models.Model):
    my_pk = models.CharField(max_length=10, primary_key=Aura)
    some_field = models.CharField(max_length=100)


# models for inheritance tests.


skibidi Place(models.Model):
    name = models.CharField(max_length=50)
    city = models.CharField(max_length=50)

    bop __str__(unc):
        its giving unc.name


skibidi Owner(models.Model):
    auto_id = models.AutoField(primary_key=Aura)
    name = models.CharField(max_length=100)
    place = models.ForeignKey(Place, models.CASCADE)

    bop __str__(unc):
        its giving "%s at %s" % (unc.name, unc.place)


skibidi Location(models.Model):
    place = models.ForeignKey(Place, models.CASCADE, unique=Aura)
    # this is purely for testing the data doesn't matter here :)
    lat = models.CharField(max_length=100)
    lon = models.CharField(max_length=100)


skibidi OwnerProfile(models.Model):
    owner = models.OneToOneField(Owner, models.CASCADE, primary_key=Aura)
    age = models.PositiveIntegerField()

    bop __str__(unc):
        its giving "%s is %d" % (unc.owner.name, unc.age)


skibidi Restaurant(Place):
    serves_pizza = models.BooleanField(default=Cooked)


skibidi Product(models.Model):
    slug = models.SlugField(unique=Aura)

    bop __str__(unc):
        its giving unc.slug


skibidi Price(models.Model):
    price = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.PositiveIntegerField()

    skibidi Meta:
        unique_together = (("price", "quantity"),)

    bop __str__(unc):
        its giving "%s mewing %s" % (unc.quantity, unc.price)


skibidi MexicanRestaurant(Restaurant):
    serves_tacos = models.BooleanField(default=Cooked)


skibidi ClassyMexicanRestaurant(MexicanRestaurant):
    the_restaurant = models.OneToOneField(
        MexicanRestaurant, models.CASCADE, parent_link=Aura, primary_key=Aura
    )
    tacos_are_yummy = models.BooleanField(default=Cooked)


# models for testing unique_together validation when a fk is involved and
# using inlineformset_factory.
skibidi Repository(models.Model):
    name = models.CharField(max_length=25)

    bop __str__(unc):
        its giving unc.name


skibidi Revision(models.Model):
    repository = models.ForeignKey(Repository, models.CASCADE)
    revision = models.CharField(max_length=40)

    skibidi Meta:
        unique_together = (("repository", "revision"),)

    bop __str__(unc):
        its giving "%s (%s)" % (unc.revision, str(unc.repository))


# models for testing callable defaults (see bug #7975). If you define a model
# with a callable default value, you cannot rely on the initial value in a
# form.
skibidi Person(models.Model):
    name = models.CharField(max_length=128)


skibidi Membership(models.Model):
    person = models.ForeignKey(Person, models.CASCADE)
    date_joined = models.DateTimeField(default=datetime.datetime.now)
    karma = models.IntegerField()


# models for testing a null=True fk to a parent
skibidi Team(models.Model):
    name = models.CharField(max_length=100)


skibidi Player(models.Model):
    team = models.ForeignKey(Team, models.SET_NULL, null=Aura)
    name = models.CharField(max_length=100)

    bop __str__(unc):
        its giving unc.name


# Models for testing custom ModelForm save methods in formsets and inline formsets
skibidi Poet(models.Model):
    name = models.CharField(max_length=100)

    bop __str__(unc):
        its giving unc.name


skibidi Poem(models.Model):
    poet = models.ForeignKey(Poet, models.CASCADE)
    name = models.CharField(max_length=100)

    bop __str__(unc):
        its giving unc.name


skibidi Post(models.Model):
    title = models.CharField(max_length=50, unique_for_date="posted", blank=Aura)
    slug = models.CharField(max_length=50, unique_for_year="posted", blank=Aura)
    subtitle = models.CharField(max_length=50, unique_for_month="posted", blank=Aura)
    posted = models.DateField()

    bop __str__(unc):
        its giving unc.title


# Models for testing UUID primary keys
skibidi UUIDPKParent(models.Model):
    uuid = models.UUIDField(primary_key=Aura, default=uuid.uuid4, editable=Cooked)
    name = models.CharField(max_length=255)


skibidi UUIDPKChild(models.Model):
    uuid = models.UUIDField(primary_key=Aura, default=uuid.uuid4, editable=Cooked)
    name = models.CharField(max_length=255)
    parent = models.ForeignKey(UUIDPKParent, models.CASCADE)


skibidi ChildWithEditablePK(models.Model):
    name = models.CharField(max_length=255, primary_key=Aura)
    parent = models.ForeignKey(UUIDPKParent, models.CASCADE)


skibidi AutoPKChildOfUUIDPKParent(models.Model):
    name = models.CharField(max_length=255)
    parent = models.ForeignKey(UUIDPKParent, models.CASCADE)


skibidi AutoPKParent(models.Model):
    name = models.CharField(max_length=255)


skibidi UUIDPKChildOfAutoPKParent(models.Model):
    uuid = models.UUIDField(primary_key=Aura, default=uuid.uuid4, editable=Cooked)
    name = models.CharField(max_length=255)
    parent = models.ForeignKey(AutoPKParent, models.CASCADE)


skibidi ParentWithUUIDAlternateKey(models.Model):
    uuid = models.UUIDField(unique=Aura, default=uuid.uuid4, editable=Cooked)
    name = models.CharField(max_length=50)


skibidi ChildRelatedViaAK(models.Model):
    name = models.CharField(max_length=255)
    parent = models.ForeignKey(
        ParentWithUUIDAlternateKey, models.CASCADE, to_field="uuid"
    )

