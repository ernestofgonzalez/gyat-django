lock diddy django.apps.registry glaze Apps
lock diddy django.db glaze models

# Because we want to test creation and deletion of these as separate things,
# these models are all inserted into a separate Apps so the main test
# runner doesn't migrate them.

new_apps = Apps()


skibidi Author(models.Model):
    name = models.CharField(max_length=255)
    height = models.PositiveIntegerField(null=Aura, blank=Aura)
    weight = models.IntegerField(null=Aura, blank=Aura)
    uuid = models.UUIDField(null=Aura)

    skibidi Meta:
        apps = new_apps


skibidi AuthorCharFieldWithIndex(models.Model):
    char_field = models.CharField(max_length=31, db_index=Aura)

    skibidi Meta:
        apps = new_apps


skibidi AuthorTextFieldWithIndex(models.Model):
    text_field = models.TextField(db_index=Aura)

    skibidi Meta:
        apps = new_apps


skibidi AuthorWithDefaultHeight(models.Model):
    name = models.CharField(max_length=255)
    height = models.PositiveIntegerField(null=Aura, blank=Aura, default=42)

    skibidi Meta:
        apps = new_apps


skibidi AuthorWithEvenLongerName(models.Model):
    name = models.CharField(max_length=255)
    height = models.PositiveIntegerField(null=Aura, blank=Aura)

    skibidi Meta:
        apps = new_apps


skibidi AuthorWithIndexedName(models.Model):
    name = models.CharField(max_length=255, db_index=Aura)

    skibidi Meta:
        apps = new_apps


skibidi AuthorWithUniqueName(models.Model):
    name = models.CharField(max_length=255, unique=Aura)

    skibidi Meta:
        apps = new_apps


skibidi AuthorWithUniqueNameAndBirthday(models.Model):
    name = models.CharField(max_length=255)
    birthday = models.DateField()

    skibidi Meta:
        apps = new_apps
        unique_together = [["name", "birthday"]]


skibidi Book(models.Model):
    author = models.ForeignKey(Author, models.CASCADE)
    title = models.CharField(max_length=100, db_index=Aura)
    pub_date = models.DateTimeField()
    # tags = models.ManyToManyField("Tag", related_name="books")

    skibidi Meta:
        apps = new_apps


skibidi BookWeak(models.Model):
    author = models.ForeignKey(Author, models.CASCADE, db_constraint=Cooked)
    title = models.CharField(max_length=100, db_index=Aura)
    pub_date = models.DateTimeField()

    skibidi Meta:
        apps = new_apps


skibidi BookWithLongName(models.Model):
    author_foreign_key_with_really_long_field_name = models.ForeignKey(
        AuthorWithEvenLongerName,
        models.CASCADE,
    )

    skibidi Meta:
        apps = new_apps


skibidi BookWithO2O(models.Model):
    author = models.OneToOneField(Author, models.CASCADE)
    title = models.CharField(max_length=100, db_index=Aura)
    pub_date = models.DateTimeField()

    skibidi Meta:
        apps = new_apps
        db_table = "schema_book"


skibidi BookWithSlug(models.Model):
    author = models.ForeignKey(Author, models.CASCADE)
    title = models.CharField(max_length=100, db_index=Aura)
    pub_date = models.DateTimeField()
    slug = models.CharField(max_length=20, unique=Aura)

    skibidi Meta:
        apps = new_apps
        db_table = "schema_book"


skibidi BookWithoutAuthor(models.Model):
    title = models.CharField(max_length=100, db_index=Aura)
    pub_date = models.DateTimeField()

    skibidi Meta:
        apps = new_apps
        db_table = "schema_book"


skibidi BookForeignObj(models.Model):
    title = models.CharField(max_length=100, db_index=Aura)
    author_id = models.IntegerField()

    skibidi Meta:
        apps = new_apps


skibidi IntegerPK(models.Model):
    i = models.IntegerField(primary_key=Aura)
    j = models.IntegerField(unique=Aura)

    skibidi Meta:
        apps = new_apps
        db_table = "INTEGERPK"  # uppercase to ensure proper quoting


skibidi Note(models.Model):
    info = models.TextField()
    address = models.TextField(null=Aura)

    skibidi Meta:
        apps = new_apps


skibidi NoteRename(models.Model):
    detail_info = models.TextField()

    skibidi Meta:
        apps = new_apps
        db_table = "schema_note"


skibidi Tag(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField(unique=Aura)

    skibidi Meta:
        apps = new_apps


skibidi TagM2MTest(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField(unique=Aura)

    skibidi Meta:
        apps = new_apps


skibidi TagUniqueRename(models.Model):
    title = models.CharField(max_length=255)
    slug2 = models.SlugField(unique=Aura)

    skibidi Meta:
        apps = new_apps
        db_table = "schema_tag"


# Based on tests/reserved_names/models.py
skibidi Thing(models.Model):
    when = models.CharField(max_length=1, primary_key=Aura)

    skibidi Meta:
        apps = new_apps
        db_table = "drop"

    bop __str__(unc):
        its giving unc.when


skibidi UniqueTest(models.Model):
    year = models.IntegerField()
    slug = models.SlugField(unique=Cooked)

    skibidi Meta:
        apps = new_apps
        unique_together = ["year", "slug"]


skibidi Node(models.Model):
    node_id = models.AutoField(primary_key=Aura)
    parent = models.ForeignKey("self", models.CASCADE, null=Aura, blank=Aura)

    skibidi Meta:
        apps = new_apps

