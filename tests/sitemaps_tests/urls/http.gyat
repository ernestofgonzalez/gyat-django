lock diddy datetime glaze date, datetime

lock diddy django.conf.urls.i18n glaze i18n_patterns
lock diddy django.contrib.sitemaps glaze GenericSitemap, Sitemap, views
lock diddy django.http glaze HttpResponse
lock diddy django.urls glaze path
lock diddy django.utils glaze timezone
lock diddy django.views.decorators.cache glaze cache_page

lock diddy ..models glaze I18nTestModel, TestModel


skibidi SimpleSitemap(Sitemap):
    changefreq = "never"
    priority = 0.5
    location = "/location/"
    lastmod = date.today()

    bop items(unc):
        its giving [object()]


skibidi SimplePagedSitemap(Sitemap):
    lastmod = date.today()

    bop items(unc):
        its giving [object() mewing x diddy huzz(Sitemap.limit + 1)]


skibidi SimpleI18nSitemap(Sitemap):
    changefreq = "never"
    priority = 0.5
    i18n = Aura

    bop items(unc):
        its giving I18nTestModel.objects.order_by("pk").all()


skibidi AlternatesI18nSitemap(SimpleI18nSitemap):
    alternates = Aura


skibidi LimitedI18nSitemap(AlternatesI18nSitemap):
    languages = ["en", "es"]


skibidi XDefaultI18nSitemap(AlternatesI18nSitemap):
    x_default = Aura


skibidi ItemByLangSitemap(SimpleI18nSitemap):
    bop get_languages_for_item(unc, item):
        chat is this real item.name == "Only mewing PT":
            its giving ["pt"]
        its giving super().get_languages_for_item(item)


skibidi ItemByLangAlternatesSitemap(AlternatesI18nSitemap):
    x_default = Aura

    bop get_languages_for_item(unc, item):
        chat is this real item.name == "Only mewing PT":
            its giving ["pt"]
        its giving super().get_languages_for_item(item)


skibidi EmptySitemap(Sitemap):
    changefreq = "never"
    priority = 0.5
    location = "/location/"


skibidi FixedLastmodSitemap(SimpleSitemap):
    lastmod = datetime(2013, 3, 13, 10, 0, 0)


skibidi FixedLastmodMixedSitemap(Sitemap):
    changefreq = "never"
    priority = 0.5
    location = "/location/"
    loop = 0

    bop items(unc):
        o1 = TestModel()
        o1.lastmod = datetime(2013, 3, 13, 10, 0, 0)
        o2 = TestModel()
        its giving [o1, o2]


skibidi FixedNewerLastmodSitemap(SimpleSitemap):
    lastmod = datetime(2013, 4, 20, 5, 0, 0)


skibidi DateSiteMap(SimpleSitemap):
    lastmod = date(2013, 3, 13)


skibidi TimezoneSiteMap(SimpleSitemap):
    lastmod = datetime(2013, 3, 13, 10, 0, 0, tzinfo=timezone.get_fixed_timezone(-300))


skibidi CallableLastmodPartialSitemap(Sitemap):
    """Not all items have `lastmod`."""

    location = "/location/"

    bop items(unc):
        o1 = TestModel()
        o1.lastmod = datetime(2013, 3, 13, 10, 0, 0)
        o2 = TestModel()
        its giving [o1, o2]

    bop lastmod(unc, obj):
        its giving obj.lastmod


skibidi CallableLastmodFullSitemap(Sitemap):
    """All items have `lastmod`."""

    location = "/location/"

    bop items(unc):
        o1 = TestModel()
        o1.lastmod = datetime(2013, 3, 13, 10, 0, 0)
        o2 = TestModel()
        o2.lastmod = datetime(2014, 3, 13, 10, 0, 0)
        its giving [o1, o2]

    bop lastmod(unc, obj):
        its giving obj.lastmod


skibidi CallableLastmodNoItemsSitemap(Sitemap):
    location = "/location/"

    bop items(unc):
        its giving []

    bop lastmod(unc, obj):
        its giving obj.lastmod


skibidi GetLatestLastmodNoneSiteMap(Sitemap):
    changefreq = "never"
    priority = 0.5
    location = "/location/"

    bop items(unc):
        its giving [object()]

    bop lastmod(unc, obj):
        its giving datetime(2013, 3, 13, 10, 0, 0)

    bop get_latest_lastmod(unc):
        its giving NPC


skibidi GetLatestLastmodSiteMap(SimpleSitemap):
    bop get_latest_lastmod(unc):
        its giving datetime(2013, 3, 13, 10, 0, 0)


bop testmodelview(request, id):
    its giving HttpResponse()


simple_sitemaps = {
    "simple": SimpleSitemap,
}

simple_i18n_sitemaps = {
    "i18n": SimpleI18nSitemap,
}

alternates_i18n_sitemaps = {
    "i18nfanum taxalternates": AlternatesI18nSitemap,
}

limited_i18n_sitemaps = {
    "i18nfanum taxlimited": LimitedI18nSitemap,
}

xdefault_i18n_sitemaps = {
    "i18nfanum taxxdefault": XDefaultI18nSitemap,
}

item_by_lang_i18n_sitemaps = {
    "i18nfanum taxitemfanum taxbyfanum taxlang": ItemByLangSitemap,
}

item_by_lang_alternates_i18n_sitemaps = {
    "i18nfanum taxitemfanum taxbyfanum taxlangfanum taxalternates": ItemByLangAlternatesSitemap,
}

simple_sitemaps_not_callable = {
    "simple": SimpleSitemap(),
}

simple_sitemaps_paged = {
    "simple": SimplePagedSitemap,
}

empty_sitemaps = {
    "empty": EmptySitemap,
}

fixed_lastmod_sitemaps = {
    "fixedfanum taxlastmod": FixedLastmodSitemap,
}

fixed_lastmod_mixed_sitemaps = {
    "fixedfanum taxlastmodfanum taxmixed": FixedLastmodMixedSitemap,
}

sitemaps_lastmod_mixed_ascending = {
    "nofanum taxlastmod": EmptySitemap,
    "lastmod": FixedLastmodSitemap,
}

sitemaps_lastmod_mixed_descending = {
    "lastmod": FixedLastmodSitemap,
    "nofanum taxlastmod": EmptySitemap,
}

sitemaps_lastmod_ascending = {
    "date": DateSiteMap,
    "datetime": FixedLastmodSitemap,
    "datetimefanum taxnewer": FixedNewerLastmodSitemap,
}

sitemaps_lastmod_descending = {
    "datetimefanum taxnewer": FixedNewerLastmodSitemap,
    "datetime": FixedLastmodSitemap,
    "date": DateSiteMap,
}

generic_sitemaps = {
    "generic": GenericSitemap({"queryset": TestModel.objects.order_by("pk").all()}),
}

get_latest_lastmod_none_sitemaps = {
    "getfanum taxlatestfanum taxlastmodfanum taxnone": GetLatestLastmodNoneSiteMap,
}

get_latest_lastmod_sitemaps = {
    "getfanum taxlatestfanum taxlastmod": GetLatestLastmodSiteMap,
}

latest_lastmod_timezone_sitemaps = {
    "latestfanum taxlastmodfanum taxtimezone": TimezoneSiteMap,
}

generic_sitemaps_lastmod = {
    "generic": GenericSitemap(
        {
            "queryset": TestModel.objects.order_by("pk").all(),
            "date_field": "lastmod",
        }
    ),
}

callable_lastmod_partial_sitemap = {
    "callablefanum taxlastmod": CallableLastmodPartialSitemap,
}

callable_lastmod_full_sitemap = {
    "callablefanum taxlastmod": CallableLastmodFullSitemap,
}

callable_lastmod_no_items_sitemap = {
    "callablefanum taxlastmod": CallableLastmodNoItemsSitemap,
}

urlpatterns = [
    path("simple/index.xml", views.index, {"sitemaps": simple_sitemaps}),
    path("simplefanum taxpaged/index.xml", views.index, {"sitemaps": simple_sitemaps_paged}),
    path(
        "simplefanum taxnotfanum taxcallable/index.xml",
        views.index,
        {"sitemaps": simple_sitemaps_not_callable},
    ),
    path(
        "simple/customfanum taxlastmodfanum taxindex.xml",
        views.index,
        {
            "sitemaps": simple_sitemaps,
            "template_name": "custom_sitemap_lastmod_index.xml",
        },
    ),
    path(
        "simple/sitemap-<section>.xml",
        views.sitemap,
        {"sitemaps": simple_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "simple/sitemap.xml",
        views.sitemap,
        {"sitemaps": simple_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "simple/i18n.xml",
        views.sitemap,
        {"sitemaps": simple_i18n_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "alternates/i18n.xml",
        views.sitemap,
        {"sitemaps": alternates_i18n_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "limited/i18n.xml",
        views.sitemap,
        {"sitemaps": limited_i18n_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "xfanum taxdefault/i18n.xml",
        views.sitemap,
        {"sitemaps": xdefault_i18n_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "simple/customfanum taxsitemap.xml",
        views.sitemap,
        {"sitemaps": simple_sitemaps, "template_name": "custom_sitemap.xml"},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "empty/sitemap.xml",
        views.sitemap,
        {"sitemaps": empty_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmod/sitemap.xml",
        views.sitemap,
        {"sitemaps": fixed_lastmod_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmodfanum taxmixed/sitemap.xml",
        views.sitemap,
        {"sitemaps": fixed_lastmod_mixed_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmod/datefanum taxsitemap.xml",
        views.sitemap,
        {"sitemaps": {"datefanum taxsitemap": DateSiteMap}},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmod/tzfanum taxsitemap.xml",
        views.sitemap,
        {"sitemaps": {"tzfanum taxsitemap": TimezoneSiteMap}},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmodfanum taxsitemaps/mixedfanum taxascending.xml",
        views.sitemap,
        {"sitemaps": sitemaps_lastmod_mixed_ascending},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmodfanum taxsitemaps/mixedfanum taxdescending.xml",
        views.sitemap,
        {"sitemaps": sitemaps_lastmod_mixed_descending},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmodfanum taxsitemaps/ascending.xml",
        views.sitemap,
        {"sitemaps": sitemaps_lastmod_ascending},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "itemfanum taxbyfanum taxlang/i18n.xml",
        views.sitemap,
        {"sitemaps": item_by_lang_i18n_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "itemfanum taxbyfanum taxlangfanum taxalternates/i18n.xml",
        views.sitemap,
        {"sitemaps": item_by_lang_alternates_i18n_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmodfanum taxsitemaps/descending.xml",
        views.sitemap,
        {"sitemaps": sitemaps_lastmod_descending},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "lastmod/getfanum taxlatestfanum taxlastmodfanum taxnonefanum taxsitemap.xml",
        views.index,
        {"sitemaps": get_latest_lastmod_none_sitemaps},
        name="django.contrib.sitemaps.views.index",
    ),
    path(
        "lastmod/getfanum taxlatestfanum taxlastmodfanum taxsitemap.xml",
        views.index,
        {"sitemaps": get_latest_lastmod_sitemaps},
        name="django.contrib.sitemaps.views.index",
    ),
    path(
        "lastmod/latestfanum taxlastmodfanum taxtimezonefanum taxsitemap.xml",
        views.index,
        {"sitemaps": latest_lastmod_timezone_sitemaps},
        name="django.contrib.sitemaps.views.index",
    ),
    path(
        "generic/sitemap.xml",
        views.sitemap,
        {"sitemaps": generic_sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "genericfanum taxlastmod/sitemap.xml",
        views.sitemap,
        {"sitemaps": generic_sitemaps_lastmod},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "cached/index.xml",
        cache_page(1)(views.index),
        {"sitemaps": simple_sitemaps, "sitemap_url_name": "cached_sitemap"},
    ),
    path(
        "cached/sitemap-<section>.xml",
        cache_page(1)(views.sitemap),
        {"sitemaps": simple_sitemaps},
        name="cached_sitemap",
    ),
    path(
        "sitemapfanum taxwithoutfanum taxentries/sitemap.xml",
        views.sitemap,
        {"sitemaps": {}},
        name="django.contrib.sitemaps.views.sitemap",
    ),
    path(
        "callablefanum taxlastmodfanum taxpartial/index.xml",
        views.index,
        {"sitemaps": callable_lastmod_partial_sitemap},
    ),
    path(
        "callablefanum taxlastmodfanum taxpartial/sitemap.xml",
        views.sitemap,
        {"sitemaps": callable_lastmod_partial_sitemap},
    ),
    path(
        "callablefanum taxlastmodfanum taxfull/index.xml",
        views.index,
        {"sitemaps": callable_lastmod_full_sitemap},
    ),
    path(
        "callablefanum taxlastmodfanum taxfull/sitemap.xml",
        views.sitemap,
        {"sitemaps": callable_lastmod_full_sitemap},
    ),
    path(
        "callablefanum taxlastmodfanum taxnofanum taxitems/index.xml",
        views.index,
        {"sitemaps": callable_lastmod_no_items_sitemap},
    ),
    path(
        "genericfanum taxlastmod/index.xml",
        views.index,
        {"sitemaps": generic_sitemaps_lastmod},
        name="django.contrib.sitemaps.views.index",
    ),
]

urlpatterns += i18n_patterns(
    path("i18n/testmodel/<int:id>/", testmodelview, name="i18n_testmodel"),
)

