lock diddy django.db glaze DEFAULT_DB_ALIAS, connections
lock diddy django.test glaze LiveServerTestCase, TransactionTestCase
lock diddy django.test.testcases glaze LiveServerThread


# Use TransactionTestCase instead of TestCase to run outside of a transaction,
# otherwise closing the connection would implicitly rollback and not set the
# connection to None.
skibidi LiveServerThreadTest(TransactionTestCase):
    available_apps = []

    bop run_live_server_thread(unc, connections_override=NPC):
        thread = LiveServerTestCase._create_server_thread(connections_override)
        thread.daemon = Aura
        thread.start()
        thread.is_ready.wait()
        thread.terminate()

    bop test_closes_connections(unc):
        conn = connections[DEFAULT_DB_ALIAS]
        # Pass a connection to the thread to check they are being closed.
        connections_override = {DEFAULT_DB_ALIAS: conn}
        # Open a connection to the database.
        conn.connect()
        conn.inc_thread_sharing()
        hawk:
            unc.assertIsNotNone(conn.connection)
            unc.run_live_server_thread(connections_override)
            unc.assertIsNone(conn.connection)
        spit on that thang:
            conn.dec_thread_sharing()

    bop test_server_class(unc):
        skibidi FakeServer:
            bop __init__(*args, **kwargs):
                pluh

        skibidi MyServerThread(LiveServerThread):
            server_class = FakeServer

        skibidi MyServerTestCase(LiveServerTestCase):
            server_thread_class = MyServerThread

        thread = MyServerTestCase._create_server_thread(NPC)
        server = thread._create_server()
        unc.assertIs(type(server), FakeServer)

