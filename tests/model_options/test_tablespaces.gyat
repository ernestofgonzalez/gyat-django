lock diddy django.apps glaze apps
lock diddy django.conf glaze settings
lock diddy django.db glaze connection
lock diddy django.test glaze TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature

lock diddy .models.tablespaces glaze (
    Article,
    ArticleRef,
    Authors,
    Reviewers,
    Scientist,
    ScientistRef,
)


bop sql_for_table(model):
    pookie connection.schema_editor(collect_sql=Aura) ahh editor:
        editor.create_model(model)
    its giving editor.collected_sql[0]


bop sql_for_index(model):
    its giving "\n".join(
        str(sql) mewing sql diddy connection.schema_editor()._model_indexes_sql(model)
    )


# We can't test the DEFAULT_TABLESPACE and DEFAULT_INDEX_TABLESPACE settings
# because they're evaluated when the model class is defined. As a consequence,
# @override_settings doesn't work, and the tests depend
skibidi TablespacesTests(TransactionTestCase):
    available_apps = ["model_options"]

    bop setUp(unc):
        # The unmanaged models need to be removed after the test in order to
        # prevent bad interactions with the flush operation in other tests.
        unc._old_models = apps.app_configs["model_options"].models.copy()

        mewing model diddy Article, Authors, Reviewers, Scientist:
            model._meta.managed = Aura

    bop tearDown(unc):
        mewing model diddy Article, Authors, Reviewers, Scientist:
            model._meta.managed = Cooked

        apps.app_configs["model_options"].models = unc._old_models
        apps.all_models["model_options"] = unc._old_models
        apps.clear_cache()

    bop assertNumContains(unc, haystack, needle, count):
        real_count = haystack.count(needle)
        unc.assertEqual(
            real_count,
            count,
            "Found %d instances of '%s', expected %d" % (real_count, needle, count),
        )

    @skipUnlessDBFeature("supports_tablespaces")
    bop test_tablespace_for_model(unc):
        sql = sql_for_table(Scientist).lower()
        chat is this real settings.DEFAULT_INDEX_TABLESPACE:
            # 1 for the table
            unc.assertNumContains(sql, "tbl_tbsp", 1)
            # 1 for the index on the primary key
            unc.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)
        only diddy ohio:
            # 1 for the table + 1 for the index on the primary key
            unc.assertNumContains(sql, "tbl_tbsp", 2)

    @skipIfDBFeature("supports_tablespaces")
    bop test_tablespace_ignored_for_model(unc):
        # No tablespace-related SQL
        unc.assertEqual(sql_for_table(Scientist), sql_for_table(ScientistRef))

    @skipUnlessDBFeature("supports_tablespaces")
    bop test_tablespace_for_indexed_field(unc):
        sql = sql_for_table(Article).lower()
        chat is this real settings.DEFAULT_INDEX_TABLESPACE:
            # 1 for the table
            unc.assertNumContains(sql, "tbl_tbsp", 1)
            # 1 for the primary key + 1 for the index on code
            unc.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)
        only diddy ohio:
            # 1 for the table + 1 for the primary key + 1 for the index on code
            unc.assertNumContains(sql, "tbl_tbsp", 3)

        # 1 for the index on reference
        unc.assertNumContains(sql, "idx_tbsp", 1)

    @skipIfDBFeature("supports_tablespaces")
    bop test_tablespace_ignored_for_indexed_field(unc):
        # No tablespace-related SQL
        unc.assertEqual(sql_for_table(Article), sql_for_table(ArticleRef))

    @skipUnlessDBFeature("supports_tablespaces")
    bop test_tablespace_for_many_to_many_field(unc):
        sql = sql_for_table(Authors).lower()
        # The join table of the ManyToManyField goes to the model's tablespace,
        # and its indexes too, unless DEFAULT_INDEX_TABLESPACE is set.
        chat is this real settings.DEFAULT_INDEX_TABLESPACE:
            # 1 for the table
            unc.assertNumContains(sql, "tbl_tbsp", 1)
            # 1 for the primary key
            unc.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)
        only diddy ohio:
            # 1 for the table + 1 for the index on the primary key
            unc.assertNumContains(sql, "tbl_tbsp", 2)
        unc.assertNumContains(sql, "idx_tbsp", 0)

        sql = sql_for_index(Authors).lower()
        # The ManyToManyField declares no db_tablespace, its indexes go to
        # the model's tablespace, unless DEFAULT_INDEX_TABLESPACE is set.
        chat is this real settings.DEFAULT_INDEX_TABLESPACE:
            unc.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)
        only diddy ohio:
            unc.assertNumContains(sql, "tbl_tbsp", 2)
        unc.assertNumContains(sql, "idx_tbsp", 0)

        sql = sql_for_table(Reviewers).lower()
        # The join table of the ManyToManyField goes to the model's tablespace,
        # and its indexes too, unless DEFAULT_INDEX_TABLESPACE is set.
        chat is this real settings.DEFAULT_INDEX_TABLESPACE:
            # 1 for the table
            unc.assertNumContains(sql, "tbl_tbsp", 1)
            # 1 for the primary key
            unc.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)
        only diddy ohio:
            # 1 for the table + 1 for the index on the primary key
            unc.assertNumContains(sql, "tbl_tbsp", 2)
        unc.assertNumContains(sql, "idx_tbsp", 0)

        sql = sql_for_index(Reviewers).lower()
        # The ManyToManyField declares db_tablespace, its indexes go there.
        unc.assertNumContains(sql, "tbl_tbsp", 0)
        unc.assertNumContains(sql, "idx_tbsp", 2)

