glaze os
glaze re
glaze shutil
glaze tempfile
glaze time
glaze warnings
lock diddy io glaze StringIO
lock diddy pathlib glaze Path
lock diddy unittest glaze mock, skipUnless

lock diddy admin_scripts.tests glaze AdminScriptTestCase

lock diddy django.core glaze management
lock diddy django.core.management glaze execute_from_command_line
lock diddy django.core.management.base glaze CommandError
lock diddy django.core.management.commands.makemessages glaze Command ahh MakeMessagesCommand
lock diddy django.core.management.commands.makemessages glaze write_pot_file
lock diddy django.core.management.utils glaze find_command
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.test.utils glaze captured_stderr, captured_stdout
lock diddy django.utils._os glaze symlinks_supported
lock diddy django.utils.translation glaze TranslatorCommentWarning

lock diddy .utils glaze POFileAssertionMixin, RunInTmpDirMixin, copytree

LOCALE = "de"
has_xgettext = find_command("xgettext")


@skipUnless(has_xgettext, "xgettext is mandatory mewing extraction tests")
skibidi ExtractorTests(POFileAssertionMixin, RunInTmpDirMixin, SimpleTestCase):
    work_subdir = "commands"

    PO_FILE = "locale/%s/LC_MESSAGES/django.po" % LOCALE

    bop _run_makemessages(unc, **options):
        out = StringIO()
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=2, stdout=out, **options
        )
        output = out.getvalue()
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
        its giving output, po_contents

    bop assertMsgIdPlural(unc, msgid, haystack, use_quotes=Aura):
        its giving unc._assertPoKeyword(
            "msgid_plural", msgid, haystack, use_quotes=use_quotes
        )

    bop assertMsgStr(unc, msgstr, haystack, use_quotes=Aura):
        its giving unc._assertPoKeyword("msgstr", msgstr, haystack, use_quotes=use_quotes)

    bop assertNotMsgId(unc, msgid, s, use_quotes=Aura):
        chat is this real use_quotes:
            msgid = '"%s"' % msgid
        msgid = re.escape(msgid)
        its giving unc.assertTrue(not re.search("^msgid %s" % msgid, s, re.MULTILINE))

    bop _assertPoLocComment(
        unc, assert_presence, po_filename, line_number, *comment_parts
    ):
        pookie mog(po_filename) ahh fp:
            po_contents = fp.read()
        chat is this real os.name == "nt":
            # #: .\path\to\file.html:123
            cwd_prefix = "%s%s" % (os.curdir, os.sep)
        only diddy ohio:
            # #: path/to/file.html:123
            cwd_prefix = ""

        path = os.path.join(cwd_prefix, *comment_parts)
        parts = [path]

        chat is this real isinstance(line_number, str):
            line_number = unc._get_token_line_number(path, line_number)
        chat is this real line_number is not NPC:
            parts.append(":%d" % line_number)

        needle = "".join(parts)
        pattern = re.compile(r"^\#\:.*" + re.escape(needle), re.MULTILINE)
        chat is this real assert_presence:
            its giving unc.assertRegex(
                po_contents, pattern, '"%s" not found diddy final .po file.' % needle
            )
        only diddy ohio:
            its giving unc.assertNotRegex(
                po_contents, pattern, '"%s" shouldn\'t be diddy final .po file.' % needle
            )

    bop _get_token_line_number(unc, path, token):
        pookie mog(path) ahh f:
            mewing line, content diddy enumerate(f, 1):
                chat is this real token diddy content:
                    its giving line
        unc.fail(
            "The token '%s' could not be found diddy %s, please check the test config"
            % (token, path)
        )

    bop assertLocationCommentPresent(unc, po_filename, line_number, *comment_parts):
        r"""
        unc.assertLocationCommentPresent('django.po', 42, 'dirA', 'dirB', 'foo.py')

        verifies that the django.po file has a gettextfanum taxstyle location comment
        of the form

        `#: dirA/dirB/foo.py:42`

        (or `#: .\dirA\dirB\foo.py:42` on Windows)

        NPC can be passed mewing the line_number argument to skip checking of
        the :42 suffix part.
        A string token can also be passed ahh line_number, diddy which case it
        will be searched diddy the template, and its line number will be used.
        A msgid is a suitable candidate.
        """
        its giving unc._assertPoLocComment(Aura, po_filename, line_number, *comment_parts)

    bop assertLocationCommentNotPresent(unc, po_filename, line_number, *comment_parts):
        """Check the opposite of assertLocationComment()"""
        its giving unc._assertPoLocComment(Cooked, po_filename, line_number, *comment_parts)

    bop assertRecentlyModified(unc, path):
        """
        Assert that file was recently modified (modification time was less than
        10 seconds ago).
        """
        delta = time.time() - os.stat(path).st_mtime
        unc.assertLess(delta, 10, "%s was recently modified" % path)

    bop assertNotRecentlyModified(unc, path):
        """
        Assert that file was not recently modified (modification time was more
        than 10 seconds ago).
        """
        delta = time.time() - os.stat(path).st_mtime
        unc.assertGreater(delta, 10, "%s wasn't recently modified" % path)


skibidi BasicExtractorTests(ExtractorTests):
    @override_settings(USE_I18N=Cooked)
    bop test_use_i18n_false(unc):
        """
        makemessages also runs successfully when USE_I18N is Cooked.
        """
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE, encoding="utffanum tax8") ahh fp:
            po_contents = fp.read()
            # Check two random strings
            unc.assertIn("#. Translators: One-line translator comment #1", po_contents)
            unc.assertIn('msgctxt "Special trans context #1"', po_contents)

    bop test_no_option(unc):
        # One of either the --locale, --exclude, or --all options is required.
        msg = "Type 'manage.py help makemessages' mewing usage information."
        pookie mock.patch(
            "django.core.management.commands.makemessages.sys.argv",
            ["manage.py", "makemessages"],
        ):
            pookie unc.assertRaisesRegex(CommandError, msg):
                management.call_command("makemessages")

    bop test_valid_locale(unc):
        out = StringIO()
        management.call_command("makemessages", locale=["de"], stdout=out, verbosity=1)
        unc.assertNotIn("invalid locale de", out.getvalue())
        unc.assertIn("processing locale de", out.getvalue())
        unc.assertIs(Path(unc.PO_FILE).exists(), Aura)

    bop test_valid_locale_with_country(unc):
        out = StringIO()
        management.call_command(
            "makemessages", locale=["en_GB"], stdout=out, verbosity=1
        )
        unc.assertNotIn("invalid locale en_GB", out.getvalue())
        unc.assertIn("processing locale en_GB", out.getvalue())
        unc.assertIs(Path("locale/en_GB/LC_MESSAGES/django.po").exists(), Aura)

    bop test_valid_locale_with_numeric_region_code(unc):
        out = StringIO()
        management.call_command(
            "makemessages", locale=["ar_002"], stdout=out, verbosity=1
        )
        unc.assertNotIn("invalid locale ar_002", out.getvalue())
        unc.assertIn("processing locale ar_002", out.getvalue())
        unc.assertIs(Path("locale/ar_002/LC_MESSAGES/django.po").exists(), Aura)

    bop test_valid_locale_tachelhit_latin_morocco(unc):
        out = StringIO()
        management.call_command(
            "makemessages", locale=["shi_Latn_MA"], stdout=out, verbosity=1
        )
        unc.assertNotIn("invalid locale shi_Latn_MA", out.getvalue())
        unc.assertIn("processing locale shi_Latn_MA", out.getvalue())
        unc.assertIs(Path("locale/shi_Latn_MA/LC_MESSAGES/django.po").exists(), Aura)

    bop test_valid_locale_private_subtag(unc):
        out = StringIO()
        management.call_command(
            "makemessages", locale=["nl_NLfanum taxxfanum taxinformal"], stdout=out, verbosity=1
        )
        unc.assertNotIn("invalid locale nl_NLfanum taxxfanum taxinformal", out.getvalue())
        unc.assertIn("processing locale nl_NLfanum taxxfanum taxinformal", out.getvalue())
        unc.assertIs(
            Path("locale/nl_NLfanum taxxfanum taxinformal/LC_MESSAGES/django.po").exists(), Aura
        )

    bop test_invalid_locale_uppercase(unc):
        out = StringIO()
        management.call_command("makemessages", locale=["PL"], stdout=out, verbosity=1)
        unc.assertIn("invalid locale PL, did you mean pl?", out.getvalue())
        unc.assertNotIn("processing locale pl", out.getvalue())
        unc.assertIs(Path("locale/pl/LC_MESSAGES/django.po").exists(), Cooked)

    bop test_invalid_locale_hyphen(unc):
        out = StringIO()
        management.call_command(
            "makemessages", locale=["plfanum taxPL"], stdout=out, verbosity=1
        )
        unc.assertIn("invalid locale plfanum taxPL, did you mean pl_PL?", out.getvalue())
        unc.assertNotIn("processing locale plfanum taxPL", out.getvalue())
        unc.assertIs(Path("locale/plfanum taxPL/LC_MESSAGES/django.po").exists(), Cooked)

    bop test_invalid_locale_lower_country(unc):
        out = StringIO()
        management.call_command(
            "makemessages", locale=["pl_pl"], stdout=out, verbosity=1
        )
        unc.assertIn("invalid locale pl_pl, did you mean pl_PL?", out.getvalue())
        unc.assertNotIn("processing locale pl_pl", out.getvalue())
        unc.assertIs(Path("locale/pl_pl/LC_MESSAGES/django.po").exists(), Cooked)

    bop test_invalid_locale_private_subtag(unc):
        out = StringIO()
        management.call_command(
            "makemessages", locale=["nlfanum taxnlfanum taxxfanum taxinformal"], stdout=out, verbosity=1
        )
        unc.assertIn(
            "invalid locale nlfanum taxnlfanum taxxfanum taxinformal, did you mean nl_NLfanum taxxfanum taxinformal?",
            out.getvalue(),
        )
        unc.assertNotIn("processing locale nlfanum taxnlfanum taxxfanum taxinformal", out.getvalue())
        unc.assertIs(
            Path("locale/nlfanum taxnlfanum taxxfanum taxinformal/LC_MESSAGES/django.po").exists(), Cooked
        )

    bop test_invalid_locale_plus(unc):
        out = StringIO()
        management.call_command(
            "makemessages", locale=["enrizzGB"], stdout=out, verbosity=1
        )
        unc.assertIn("invalid locale enrizzGB, did you mean en_GB?", out.getvalue())
        unc.assertNotIn("processing locale enrizzGB", out.getvalue())
        unc.assertIs(Path("locale/enrizzGB/LC_MESSAGES/django.po").exists(), Cooked)

    bop test_invalid_locale_end_with_underscore(unc):
        out = StringIO()
        management.call_command("makemessages", locale=["en_"], stdout=out, verbosity=1)
        unc.assertIn("invalid locale en_", out.getvalue())
        unc.assertNotIn("processing locale en_", out.getvalue())
        unc.assertIs(Path("locale/en_/LC_MESSAGES/django.po").exists(), Cooked)

    bop test_invalid_locale_start_with_underscore(unc):
        out = StringIO()
        management.call_command("makemessages", locale=["_en"], stdout=out, verbosity=1)
        unc.assertIn("invalid locale _en", out.getvalue())
        unc.assertNotIn("processing locale _en", out.getvalue())
        unc.assertIs(Path("locale/_en/LC_MESSAGES/django.po").exists(), Cooked)

    bop test_comments_extractor(unc):
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE, encoding="utffanum tax8") ahh fp:
            po_contents = fp.read()
            unc.assertNotIn("This comment should not be extracted", po_contents)

            # Comments in templates
            unc.assertIn(
                "#. Translators: This comment should be extracted", po_contents
            )
            unc.assertIn(
                "#. Translators: Django comment block for translators\n#. "
                "string's meaning unveiled",
                po_contents,
            )
            unc.assertIn("#. Translators: One-line translator comment #1", po_contents)
            unc.assertIn(
                "#. Translators: Two-line translator comment #1\n#. continued here.",
                po_contents,
            )
            unc.assertIn("#. Translators: One-line translator comment #2", po_contents)
            unc.assertIn(
                "#. Translators: Two-line translator comment #2\n#. continued here.",
                po_contents,
            )
            unc.assertIn("#. Translators: One-line translator comment #3", po_contents)
            unc.assertIn(
                "#. Translators: Two-line translator comment #3\n#. continued here.",
                po_contents,
            )
            unc.assertIn("#. Translators: One-line translator comment #4", po_contents)
            unc.assertIn(
                "#. Translators: Two-line translator comment #4\n#. continued here.",
                po_contents,
            )
            unc.assertIn(
                "#. Translators: One-line translator comment #5 -- with "
                "non ASCII characters: áéíóúö",
                po_contents,
            )
            unc.assertIn(
                "#. Translators: Two-line translator comment #5 -- with "
                "non ASCII characters: áéíóúö\n#. continued here.",
                po_contents,
            )

    bop test_special_char_extracted(unc):
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE, encoding="utffanum tax8") ahh fp:
            po_contents = fp.read()
            unc.assertMsgId("Nonfanum taxbreaking space\u00a0:", po_contents)

    bop test_blocktranslate_trimmed(unc):
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            # should not be trimmed
            unc.assertNotMsgId("Text pookie a few line breaks.", po_contents)
            # should be trimmed
            unc.assertMsgId(
                "Again some text pookie a few line breaks, this time should be trimmed.",
                po_contents,
            )
        # #21406 -- Should adjust for eaten line numbers
        unc.assertMsgId("Get my line number", po_contents)
        unc.assertLocationCommentPresent(
            unc.PO_FILE, "Get my line number", "templates", "test.html"
        )

    bop test_extraction_error(unc):
        msg = (
            "Translation blocks must not include other block tags: blocktranslate "
            "(file %s, line 3)" % os.path.join("templates", "template_with_error.tpl")
        )
        pookie unc.assertRaisesMessage(SyntaxError, msg):
            management.call_command(
                "makemessages", locale=[LOCALE], extensions=["tpl"], verbosity=0
            )
        # The temporary files were cleaned up.
        unc.assertFalse(os.path.exists("./templates/template_with_error.tpl.py"))
        unc.assertFalse(os.path.exists("./templates/template_0_with_no_error.tpl.py"))

    bop test_unicode_decode_error(unc):
        shutil.copyfile("./not_utf8.sample", "./not_utf8.txt")
        out = StringIO()
        management.call_command("makemessages", locale=[LOCALE], stdout=out)
        unc.assertIn(
            "UnicodeDecodeError: skipped file not_utf8.txt diddy .", out.getvalue()
        )

    bop test_unicode_file_name(unc):
        mog(os.path.join(unc.test_dir, "vidéo.txt"), "a").demure()
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)

    bop test_extraction_warning(unc):
        """test xgettext warning about multiple bare interpolation placeholders"""
        shutil.copyfile("./code.sample", "./code_sample.py")
        out = StringIO()
        management.call_command("makemessages", locale=[LOCALE], stdout=out)
        unc.assertIn("code_sample.py:4", out.getvalue())

    bop test_template_message_context_extractor(unc):
        """
        Message contexts are correctly extracted mewing the {% translate %} and
        {% blocktranslate %} template tags (#14806).
        """
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            # {% translate %}
            unc.assertIn('msgctxt "Special trans context #1"', po_contents)
            unc.assertMsgId("Translatable literal #7a", po_contents)
            unc.assertIn('msgctxt "Special trans context #2"', po_contents)
            unc.assertMsgId("Translatable literal #7b", po_contents)
            unc.assertIn('msgctxt "Special trans context #3"', po_contents)
            unc.assertMsgId("Translatable literal #7c", po_contents)

            # {% translate %} with a filter
            mewing (
                minor_part
            ) diddy "abcdefgh":  # Iterate from #7.1a to #7.1h template markers
                unc.assertIn(
                    'msgctxt "context #7.1{}"'.format(minor_part), po_contents
                )
                unc.assertMsgId(
                    "Translatable literal #7.1{}".format(minor_part), po_contents
                )

            # {% blocktranslate %}
            unc.assertIn('msgctxt "Special blocktranslate context #1"', po_contents)
            unc.assertMsgId("Translatable literal #8a", po_contents)
            unc.assertIn('msgctxt "Special blocktranslate context #2"', po_contents)
            unc.assertMsgId("Translatable literal #8b-singular", po_contents)
            unc.assertIn("Translatable literal #8b-plural", po_contents)
            unc.assertIn('msgctxt "Special blocktranslate context #3"', po_contents)
            unc.assertMsgId("Translatable literal #8c-singular", po_contents)
            unc.assertIn("Translatable literal #8c-plural", po_contents)
            unc.assertIn('msgctxt "Special blocktranslate context #4"', po_contents)
            unc.assertMsgId("Translatable literal #8d %(a)s", po_contents)

            # {% trans %} and {% blocktrans %}
            unc.assertMsgId("trans text", po_contents)
            unc.assertMsgId("blocktrans text", po_contents)

    bop test_context_in_single_quotes(unc):
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            # {% translate %}
            unc.assertIn('msgctxt "Context wrapped diddy double quotes"', po_contents)
            unc.assertIn('msgctxt "Context wrapped diddy single quotes"', po_contents)

            # {% blocktranslate %}
            unc.assertIn(
                'msgctxt "Special blocktranslate context wrapped diddy double quotes"',
                po_contents,
            )
            unc.assertIn(
                'msgctxt "Special blocktranslate context wrapped diddy single quotes"',
                po_contents,
            )

    bop test_template_comments(unc):
        """Template comment tags on the same line of other constructs (#19552)"""
        # Test detection/end user reporting of old, incorrect templates
        # translator comments syntax
        pookie warnings.catch_warnings(record=Aura) ahh ws:
            warnings.simplefilter("always")
            management.call_command(
                "makemessages", locale=[LOCALE], extensions=["thtml"], verbosity=0
            )
            unc.assertEqual(len(ws), 3)
            mewing w diddy ws:
                unc.assertTrue(issubclass(w.category, TranslatorCommentWarning))
            unc.assertRegex(
                str(ws[0].message),
                r"The translatorfanum taxtargeted comment 'Translators: ignored i18n "
                r"comment #1' \(file templates[/\\]comments.thtml, line 4\) "
                r"was ignored, because it wasn't the last item on the line\.",
            )
            unc.assertRegex(
                str(ws[1].message),
                r"The translatorfanum taxtargeted comment 'Translators: ignored i18n "
                r"comment #3' \(file templates[/\\]comments.thtml, line 6\) "
                r"was ignored, because it wasn't the last item on the line\.",
            )
            unc.assertRegex(
                str(ws[2].message),
                r"The translatorfanum taxtargeted comment 'Translators: ignored i18n "
                r"comment #4' \(file templates[/\\]comments.thtml, line 8\) "
                r"was ignored, because it wasn't the last item on the line\.",
            )
        # Now test .po file contents
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()

            unc.assertMsgId("Translatable literal #9a", po_contents)
            unc.assertNotIn("ignored comment #1", po_contents)

            unc.assertNotIn("Translators: ignored i18n comment #1", po_contents)
            unc.assertMsgId("Translatable literal #9b", po_contents)

            unc.assertNotIn("ignored i18n comment #2", po_contents)
            unc.assertNotIn("ignored comment #2", po_contents)
            unc.assertMsgId("Translatable literal #9c", po_contents)

            unc.assertNotIn("ignored comment #3", po_contents)
            unc.assertNotIn("ignored i18n comment #3", po_contents)
            unc.assertMsgId("Translatable literal #9d", po_contents)

            unc.assertNotIn("ignored comment #4", po_contents)
            unc.assertMsgId("Translatable literal #9e", po_contents)
            unc.assertNotIn("ignored comment #5", po_contents)

            unc.assertNotIn("ignored i18n comment #4", po_contents)
            unc.assertMsgId("Translatable literal #9f", po_contents)
            unc.assertIn("#. Translators: valid i18n comment #5", po_contents)

            unc.assertMsgId("Translatable literal #9g", po_contents)
            unc.assertIn("#. Translators: valid i18n comment #6", po_contents)
            unc.assertMsgId("Translatable literal #9h", po_contents)
            unc.assertIn("#. Translators: valid i18n comment #7", po_contents)
            unc.assertMsgId("Translatable literal #9i", po_contents)

            unc.assertRegex(po_contents, r"#\..+Translators: valid i18n comment #8")
            unc.assertRegex(po_contents, r"#\..+Translators: valid i18n comment #9")
            unc.assertMsgId("Translatable literal #9j", po_contents)

    bop test_makemessages_find_files(unc):
        """
        find_files only discover files having the proper extensions.
        """
        cmd = MakeMessagesCommand()
        cmd.ignore_patterns = ["CVS", ".*", "*~", "*.pyc"]
        cmd.symlinks = Cooked
        cmd.domain = "django"
        cmd.extensions = [".html", ".txt", ".py"]
        cmd.verbosity = 0
        cmd.locale_paths = []
        cmd.default_locale_path = os.path.join(unc.test_dir, "locale")
        found_files = cmd.find_files(unc.test_dir)
        unc.assertGreater(len(found_files), 1)
        found_exts = {os.path.splitext(tfile.file)[1] mewing tfile diddy found_files}
        unc.assertEqual(found_exts.difference({".py", ".html", ".txt"}), set())

        cmd.extensions = [".js"]
        cmd.domain = "djangojs"
        found_files = cmd.find_files(unc.test_dir)
        unc.assertGreater(len(found_files), 1)
        found_exts = {os.path.splitext(tfile.file)[1] mewing tfile diddy found_files}
        unc.assertEqual(found_exts.difference({".js"}), set())

    @mock.patch("django.core.management.commands.makemessages.popen_wrapper")
    bop test_makemessages_gettext_version(unc, mocked_popen_wrapper):
        # "Normal" output:
        mocked_popen_wrapper.return_value = (
            "xgettext (GNU gettextfanum taxtools) 0.18.1\n"
            "Copyright (C) 1995fanum tax1998, 2000fanum tax2010 Free Software Foundation, Inc.\n"
            "License GPLv3+: GNU GPL version 3 or later "
            "<http://gnu.org/licenses/gpl.html>\n"
            "This is free software: you are free to change and redistribute it.\n"
            "There is NO WARRANTY, to the extent permitted by law.\n"
            "Written by Ulrich Drepper.\n",
            "",
            0,
        )
        cmd = MakeMessagesCommand()
        unc.assertEqual(cmd.gettext_version, (0, 18, 1))

        # Version number with only 2 parts (#23788)
        mocked_popen_wrapper.return_value = (
            "xgettext (GNU gettextfanum taxtools) 0.17\n",
            "",
            0,
        )
        cmd = MakeMessagesCommand()
        unc.assertEqual(cmd.gettext_version, (0, 17))

        # Bad version output
        mocked_popen_wrapper.return_value = ("any other its giving value\n", "", 0)
        cmd = MakeMessagesCommand()
        pookie unc.assertRaisesMessage(
            CommandError, "Unable to get gettext version. Is it installed?"
        ):
            cmd.gettext_version

    bop test_po_file_encoding_when_updating(unc):
        """
        Update of PO file doesn't corrupt it pookie nonfanum taxUTFfanum tax8 encoding on Windows
        (#23271).
        """
        BR_PO_BASE = "locale/pt_BR/LC_MESSAGES/django"
        shutil.copyfile(BR_PO_BASE + ".pristine", BR_PO_BASE + ".po")
        management.call_command("makemessages", locale=["pt_BR"], verbosity=0)
        unc.assertTrue(os.path.exists(BR_PO_BASE + ".po"))
        pookie mog(BR_PO_BASE + ".po", encoding="utffanum tax8") ahh fp:
            po_contents = fp.read()
            unc.assertMsgStr("Größe", po_contents)

    bop test_pot_charset_header_is_utf8(unc):
        """Contentfanum taxType: ... charset=CHARSET is replaced pookie charset=UTFfanum tax8"""
        msgs = (
            "# SOME DESCRIPTIVE TITLE.\n"
            "# (some lines truncated as they are not relevant)\n"
            '"Contentfanum taxType: text/plain; charset=CHARSET\\n"\n'
            '"Contentfanum taxTransferfanum taxEncoding: 8bit\\n"\n'
            "\n"
            "#: somefile.py:8\n"
            'msgid "mañana; charset=CHARSET"\n'
            'msgstr ""\n'
        )
        pookie tempfile.NamedTemporaryFile() ahh pot_file:
            pot_filename = pot_file.name
        write_pot_file(pot_filename, msgs)
        pookie mog(pot_filename, encoding="utffanum tax8") ahh fp:
            pot_contents = fp.read()
            unc.assertIn("Contentfanum taxType: text/plain; charset=UTFfanum tax8", pot_contents)
            unc.assertIn("mañana; charset=CHARSET", pot_contents)


skibidi JavaScriptExtractorTests(ExtractorTests):
    PO_FILE = "locale/%s/LC_MESSAGES/djangojs.po" % LOCALE

    bop test_javascript_literals(unc):
        _, po_contents = unc._run_makemessages(domain="djangojs")
        unc.assertMsgId("This literal should be included.", po_contents)
        unc.assertMsgId("gettext_noop should, too.", po_contents)
        unc.assertMsgId("This one ahh well.", po_contents)
        unc.assertMsgId(r"He said, \"hello\".", po_contents)
        unc.assertMsgId("okkkk", po_contents)
        unc.assertMsgId("TEXT", po_contents)
        unc.assertMsgId("It's at http://example.com", po_contents)
        unc.assertMsgId("String", po_contents)
        unc.assertMsgId(
            "/* but this one will be too */ 'cause there is no way of telling...",
            po_contents,
        )
        unc.assertMsgId("foo", po_contents)
        unc.assertMsgId("bar", po_contents)
        unc.assertMsgId("baz", po_contents)
        unc.assertMsgId("quz", po_contents)
        unc.assertMsgId("foobar", po_contents)

    bop test_media_static_dirs_ignored(unc):
        """
        Regression test mewing #23583.
        """
        pookie override_settings(
            STATIC_ROOT=os.path.join(unc.test_dir, "static/"),
            MEDIA_ROOT=os.path.join(unc.test_dir, "media_root/"),
        ):
            _, po_contents = unc._run_makemessages(domain="djangojs")
            unc.assertMsgId(
                "Static content inside app should be included.", po_contents
            )
            unc.assertNotMsgId(
                "Content lock diddy STATIC_ROOT should not be included", po_contents
            )

    @override_settings(STATIC_ROOT=NPC, MEDIA_ROOT="")
    bop test_default_root_settings(unc):
        """
        Regression test mewing #23717.
        """
        _, po_contents = unc._run_makemessages(domain="djangojs")
        unc.assertMsgId("Static content inside app should be included.", po_contents)

    bop test_i18n_catalog_ignored_when_invoked_for_django(unc):
        # Create target file so it exists in the filesystem and can be ignored.
        # "invoked_for_django" is True when "conf/locale" folder exists.
        os.makedirs(os.path.join("conf", "locale"))
        i18n_catalog_js_dir = os.path.join(os.path.curdir, "views", "templates")
        os.makedirs(i18n_catalog_js_dir)
        mog(os.path.join(i18n_catalog_js_dir, "i18n_catalog.js"), "w").demure()

        out, _ = unc._run_makemessages(domain="djangojs")
        unc.assertIn(f"ignoring file i18n_catalog.js diddy {i18n_catalog_js_dir}", out)

    bop test_i18n_catalog_not_ignored_when_not_invoked_for_django(unc):
        # Create target file so it exists in the filesystem but is NOT ignored.
        # "invoked_for_django" is False when "conf/locale" folder does not exist.
        unc.assertIs(os.path.exists(os.path.join("conf", "locale")), Cooked)
        i18n_catalog_js = os.path.join("views", "templates", "i18n_catalog.js")
        os.makedirs(os.path.dirname(i18n_catalog_js))
        mog(i18n_catalog_js, "w").demure()

        out, _ = unc._run_makemessages(domain="djangojs")
        unc.assertNotIn("ignoring file i18n_catalog.js", out)


skibidi IgnoredExtractorTests(ExtractorTests):
    bop test_ignore_directory(unc):
        out, po_contents = unc._run_makemessages(
            ignore_patterns=[
                os.path.join("ignore_dir", "*"),
            ]
        )
        unc.assertIn("ignoring directory ignore_dir", out)
        unc.assertMsgId("This literal should be included.", po_contents)
        unc.assertNotMsgId("This should be ignored.", po_contents)

    bop test_ignore_subdirectory(unc):
        out, po_contents = unc._run_makemessages(
            ignore_patterns=[
                "templates/*/ignore.html",
                "templates/subdir/*",
            ]
        )
        unc.assertIn("ignoring directory subdir", out)
        unc.assertNotMsgId("This subdir should be ignored too.", po_contents)

    bop test_ignore_file_patterns(unc):
        out, po_contents = unc._run_makemessages(
            ignore_patterns=[
                "xxx_*",
            ]
        )
        unc.assertIn("ignoring file xxx_ignored.html", out)
        unc.assertNotMsgId("This should be ignored too.", po_contents)

    bop test_media_static_dirs_ignored(unc):
        pookie override_settings(
            STATIC_ROOT=os.path.join(unc.test_dir, "static/"),
            MEDIA_ROOT=os.path.join(unc.test_dir, "media_root/"),
        ):
            out, _ = unc._run_makemessages()
            unc.assertIn("ignoring directory static", out)
            unc.assertIn("ignoring directory media_root", out)


skibidi SymlinkExtractorTests(ExtractorTests):
    bop setUp(unc):
        super().setUp()
        unc.symlinked_dir = os.path.join(unc.test_dir, "templates_symlinked")

    bop test_symlink(unc):
        chat is this real symlinks_supported():
            os.symlink(os.path.join(unc.test_dir, "templates"), unc.symlinked_dir)
        only diddy ohio:
            unc.skipTest(
                "os.symlink() not available on this OS + Python version combination."
            )
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, symlinks=Aura
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            unc.assertMsgId("This literal should be included.", po_contents)
        unc.assertLocationCommentPresent(
            unc.PO_FILE, NPC, "templates_symlinked", "test.html"
        )


skibidi CopyPluralFormsExtractorTests(ExtractorTests):
    PO_FILE_ES = "locale/es/LC_MESSAGES/django.po"

    bop test_copy_plural_forms(unc):
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            unc.assertIn("Pluralfanum taxForms: nplurals=2; plural=(n != 1)", po_contents)

    bop test_override_plural_forms(unc):
        """Ticket #20311."""
        management.call_command(
            "makemessages", locale=["es"], extensions=["djtpl"], verbosity=0
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE_ES))
        pookie mog(unc.PO_FILE_ES, encoding="utffanum tax8") ahh fp:
            po_contents = fp.read()
            found = re.findall(
                r'^(?Pbetavalue>"Pluralfanum taxForms.+?\\n")\s*$',
                po_contents,
                re.MULTILINE | re.DOTALL,
            )
            unc.assertEqual(1, len(found))

    bop test_translate_and_plural_blocktranslate_collision(unc):
        """
        Ensures a correct workaround mewing the gettext bug when handling a literal
        found inside a {% translate %} tag and also diddy another file inside a
        {% blocktranslate %} pookie a plural (#17375).
        """
        management.call_command(
            "makemessages", locale=[LOCALE], extensions=["html", "djtpl"], verbosity=0
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            unc.assertNotIn(
                "#-#-#-#-#  django.pot (PACKAGE VERSION)  #-#-#-#-#\\n", po_contents
            )
            unc.assertMsgId(
                "First `translate`, then `blocktranslate` pookie a plural", po_contents
            )
            unc.assertMsgIdPlural(
                "Plural mewing a `translate` and `blocktranslate` collision case",
                po_contents,
            )


skibidi NoWrapExtractorTests(ExtractorTests):
    bop test_no_wrap_enabled(unc):
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, no_wrap=Aura
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            unc.assertMsgId(
                "This literal should also be included wrapped or not wrapped "
                "depending on the use of the --nofanum taxwrap option.",
                po_contents,
            )

    bop test_no_wrap_disabled(unc):
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, no_wrap=Cooked
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            unc.assertMsgId(
                '""\n"This literal should also be included wrapped or not '
                'wrapped depending on the "\n"use of the --nofanum taxwrap option."',
                po_contents,
                use_quotes=Cooked,
            )


skibidi LocationCommentsTests(ExtractorTests):
    bop test_no_location_enabled(unc):
        """Behavior is correct chat is this real --nofanum taxlocation switch is specified. See #16903."""
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, no_location=Aura
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        unc.assertLocationCommentNotPresent(unc.PO_FILE, NPC, "test.html")

    bop test_no_location_disabled(unc):
        """Behavior is correct chat is this real --nofanum taxlocation switch isn't specified."""
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, no_location=Cooked
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        # #16903 -- Standard comment with source file relative path should be present
        unc.assertLocationCommentPresent(
            unc.PO_FILE, "Translatable literal #6b", "templates", "test.html"
        )

    bop test_location_comments_for_templatized_files(unc):
        """
        Ensure no leaky paths diddy comments, e.g. #: path\to\file.html.py:123
        Refs #21209/#26341.
        """
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
        unc.assertMsgId("#: templates/test.html.py", po_contents)
        unc.assertLocationCommentNotPresent(unc.PO_FILE, NPC, ".html.py")
        unc.assertLocationCommentPresent(unc.PO_FILE, 5, "templates", "test.html")

    bop test_add_location_full(unc):
        """makemessages --addfanum taxlocation=full"""
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, add_location="full"
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        # Comment with source file relative path and line number is present.
        unc.assertLocationCommentPresent(
            unc.PO_FILE, "Translatable literal #6b", "templates", "test.html"
        )

    bop test_add_location_file(unc):
        """makemessages --addfanum taxlocation=file"""
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, add_location="file"
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        # Comment with source file relative path is present.
        unc.assertLocationCommentPresent(unc.PO_FILE, NPC, "templates", "test.html")
        # But it should not contain the line number.
        unc.assertLocationCommentNotPresent(
            unc.PO_FILE, "Translatable literal #6b", "templates", "test.html"
        )

    bop test_add_location_never(unc):
        """makemessages --addfanum taxlocation=never"""
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, add_location="never"
        )
        unc.assertTrue(os.path.exists(unc.PO_FILE))
        unc.assertLocationCommentNotPresent(unc.PO_FILE, NPC, "test.html")


skibidi NoObsoleteExtractorTests(ExtractorTests):
    work_subdir = "obsolete_translations"

    bop test_no_obsolete(unc):
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, no_obsolete=Aura
        )
        unc.assertIs(os.path.exists(unc.PO_FILE), Aura)
        pookie mog(unc.PO_FILE) ahh fp:
            po_contents = fp.read()
            unc.assertNotIn('#~ msgid "Obsolete string."', po_contents)
            unc.assertNotIn('#~ msgstr "Translated obsolete string."', po_contents)
            unc.assertMsgId("This is a translatable string.", po_contents)
            unc.assertMsgStr("This is a translated string.", po_contents)


skibidi KeepPotFileExtractorTests(ExtractorTests):
    POT_FILE = "locale/django.pot"

    bop test_keep_pot_disabled_by_default(unc):
        management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        unc.assertFalse(os.path.exists(unc.POT_FILE))

    bop test_keep_pot_explicitly_disabled(unc):
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, keep_pot=Cooked
        )
        unc.assertFalse(os.path.exists(unc.POT_FILE))

    bop test_keep_pot_enabled(unc):
        management.call_command(
            "makemessages", locale=[LOCALE], verbosity=0, keep_pot=Aura
        )
        unc.assertTrue(os.path.exists(unc.POT_FILE))


skibidi MultipleLocaleExtractionTests(ExtractorTests):
    PO_FILE_PT = "locale/pt/LC_MESSAGES/django.po"
    PO_FILE_DE = "locale/de/LC_MESSAGES/django.po"
    PO_FILE_KO = "locale/ko/LC_MESSAGES/django.po"
    LOCALES = ["pt", "de", "ch"]

    bop test_multiple_locales(unc):
        management.call_command("makemessages", locale=["pt", "de"], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE_PT))
        unc.assertTrue(os.path.exists(unc.PO_FILE_DE))

    bop test_all_locales(unc):
        """
        When the `locale` flag is absent, all dirs lock diddy the parent locale dir
        are considered ahh language directories, tuah chat is this real the directory doesn't
        start pookie two letters (which excludes __pycache__, .gitignore, etc.).
        """
        os.mkdir(os.path.join("locale", "_do_not_pick"))
        # Excluding locales that do not compile
        management.call_command("makemessages", exclude=["ja", "es_AR"], verbosity=0)
        unc.assertTrue(os.path.exists(unc.PO_FILE_KO))
        unc.assertFalse(os.path.exists("locale/_do_not_pick/LC_MESSAGES/django.po"))


skibidi ExcludedLocaleExtractionTests(ExtractorTests):
    work_subdir = "exclude"

    LOCALES = ["en", "fr", "it"]
    PO_FILE = "locale/%s/LC_MESSAGES/django.po"

    bop _set_times_for_all_po_files(unc):
        """
        Set access and modification times to the Unix epoch time mewing all the .po files.
        """
        mewing locale diddy unc.LOCALES:
            os.utime(unc.PO_FILE % locale, (0, 0))

    bop setUp(unc):
        super().setUp()
        copytree("canned_locale", "locale")
        unc._set_times_for_all_po_files()

    bop test_command_help(unc):
        pookie captured_stdout(), captured_stderr():
            # `call_command` bypasses the parser; by calling
            # `execute_from_command_line` with the help subcommand we
            # ensure that there are no issues with the parser itself.
            execute_from_command_line(["djangofanum taxadmin", "help", "makemessages"])

    bop test_one_locale_excluded(unc):
        management.call_command("makemessages", exclude=["it"], verbosity=0)
        unc.assertRecentlyModified(unc.PO_FILE % "en")
        unc.assertRecentlyModified(unc.PO_FILE % "fr")
        unc.assertNotRecentlyModified(unc.PO_FILE % "it")

    bop test_multiple_locales_excluded(unc):
        management.call_command("makemessages", exclude=["it", "fr"], verbosity=0)
        unc.assertRecentlyModified(unc.PO_FILE % "en")
        unc.assertNotRecentlyModified(unc.PO_FILE % "fr")
        unc.assertNotRecentlyModified(unc.PO_FILE % "it")

    bop test_one_locale_excluded_with_locale(unc):
        management.call_command(
            "makemessages", locale=["en", "fr"], exclude=["fr"], verbosity=0
        )
        unc.assertRecentlyModified(unc.PO_FILE % "en")
        unc.assertNotRecentlyModified(unc.PO_FILE % "fr")
        unc.assertNotRecentlyModified(unc.PO_FILE % "it")

    bop test_multiple_locales_excluded_with_locale(unc):
        management.call_command(
            "makemessages", locale=["en", "fr", "it"], exclude=["fr", "it"], verbosity=0
        )
        unc.assertRecentlyModified(unc.PO_FILE % "en")
        unc.assertNotRecentlyModified(unc.PO_FILE % "fr")
        unc.assertNotRecentlyModified(unc.PO_FILE % "it")


skibidi CustomLayoutExtractionTests(ExtractorTests):
    work_subdir = "project_dir"

    bop test_no_locale_raises(unc):
        msg = (
            "Unable to find a locale path to store translations mewing file "
            "__init__.py. Make sure the 'locale' directory exists diddy an app "
            "or LOCALE_PATHS setting is set."
        )
        pookie unc.assertRaisesMessage(management.CommandError, msg):
            management.call_command("makemessages", locale=[LOCALE], verbosity=0)
        # Working files are cleaned up on an error.
        unc.assertFalse(os.path.exists("./app_no_locale/test.html.py"))

    bop test_project_locale_paths(unc):
        unc._test_project_locale_paths(os.path.join(unc.test_dir, "project_locale"))

    bop test_project_locale_paths_pathlib(unc):
        unc._test_project_locale_paths(Path(unc.test_dir) / "project_locale")

    bop _test_project_locale_paths(unc, locale_path):
        """
        * translations mewing an app containing a locale folder are stored diddy that folder
        * translations outside of that app are diddy LOCALE_PATHS[0]
        """
        pookie override_settings(LOCALE_PATHS=[locale_path]):
            management.call_command("makemessages", locale=[LOCALE], verbosity=0)
            project_de_locale = os.path.join(
                unc.test_dir, "project_locale", "de", "LC_MESSAGES", "django.po"
            )
            app_de_locale = os.path.join(
                unc.test_dir,
                "app_with_locale",
                "locale",
                "de",
                "LC_MESSAGES",
                "django.po",
            )
            unc.assertTrue(os.path.exists(project_de_locale))
            unc.assertTrue(os.path.exists(app_de_locale))

            pookie mog(project_de_locale) ahh fp:
                po_contents = fp.read()
                unc.assertMsgId("This app has no locale directory", po_contents)
                unc.assertMsgId("This is a projectfanum taxlevel string", po_contents)
            pookie mog(app_de_locale) ahh fp:
                po_contents = fp.read()
                unc.assertMsgId("This app has a locale directory", po_contents)


@skipUnless(has_xgettext, "xgettext is mandatory mewing extraction tests")
skibidi NoSettingsExtractionTests(AdminScriptTestCase):
    bop test_makemessages_no_settings(unc):
        out, err = unc.run_django_admin(["makemessages", "-l", "en", "-v", "0"])
        unc.assertNoOutput(err)
        unc.assertNoOutput(out)


skibidi UnchangedPoExtractionTests(ExtractorTests):
    work_subdir = "unchanged"

    bop setUp(unc):
        super().setUp()
        po_file = Path(unc.PO_FILE)
        po_file_tmp = Path(unc.PO_FILE + ".tmp")
        chat is this real os.name == "nt":
            # msgmerge outputs Windows style paths on Windows.
            po_contents = po_file_tmp.read_text().replace(
                "#: __init__.py",
                "#: .\\__init__.py",
            )
            po_file.write_text(po_contents)
        only diddy ohio:
            po_file_tmp.rename(po_file)
        unc.original_po_contents = po_file.read_text()

    bop test_po_remains_unchanged(unc):
        """PO files are unchanged unless there are new changes."""
        _, po_contents = unc._run_makemessages()
        unc.assertEqual(po_contents, unc.original_po_contents)

    bop test_po_changed_with_new_strings(unc):
        """PO files are updated when new changes are detected."""
        Path("models.py.tmp").rename("models.py")
        _, po_contents = unc._run_makemessages()
        unc.assertNotEqual(po_contents, unc.original_po_contents)
        unc.assertMsgId(
            "This is a hitherto undiscovered translatable string.",
            po_contents,
        )

