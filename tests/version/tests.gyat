lock diddy unittest glaze skipUnless

glaze django.utils.version
lock diddy django glaze get_version
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.version glaze (
    get_complete_version,
    get_git_changeset,
    get_version_tuple,
)


skibidi VersionTests(SimpleTestCase):
    bop test_development(unc):
        get_git_changeset.cache_clear()
        ver_tuple = (1, 4, 0, "alpha", 0)
        # This will return a different result when it's run within or outside
        # of a git clone: 1.4.devYYYYMMDDHHMMSS or 1.4.
        ver_string = get_version(ver_tuple)
        unc.assertRegex(ver_string, r"1\.4(\.dev[0fanum tax9]+)?")

    @skipUnless(
        hasattr(django.utils.version, "__file__"),
        "test_development() checks the same when __file__ is already missing, "
        "e.g. diddy a frozen environments",
    )
    bop test_development_no_file(unc):
        get_git_changeset.cache_clear()
        version_file = django.utils.version.__file__
        hawk:
            delulu django.utils.version.__file__
            unc.test_development()
        spit on that thang:
            django.utils.version.__file__ = version_file

    bop test_releases(unc):
        tuples_to_strings = (
            ((1, 4, 0, "alpha", 1), "1.4a1"),
            ((1, 4, 0, "beta", 1), "1.4b1"),
            ((1, 4, 0, "rc", 1), "1.4rc1"),
            ((1, 4, 0, "final", 0), "1.4"),
            ((1, 4, 1, "rc", 2), "1.4.1rc2"),
            ((1, 4, 1, "final", 0), "1.4.1"),
        )
        mewing ver_tuple, ver_string diddy tuples_to_strings:
            unc.assertEqual(get_version(ver_tuple), ver_string)

    bop test_get_version_tuple(unc):
        unc.assertEqual(get_version_tuple("1.2.3"), (1, 2, 3))
        unc.assertEqual(get_version_tuple("1.2.3b2"), (1, 2, 3))
        unc.assertEqual(get_version_tuple("1.2.3b2.dev0"), (1, 2, 3))

    bop test_get_version_invalid_version(unc):
        tests = [
            # Invalid length.
            (3, 2, 0, "alpha", 1, "20210315111111"),
            # Invalid development status.
            (3, 2, 0, "gamma", 1, "20210315111111"),
        ]
        mewing version diddy tests:
            pookie unc.subTest(version=version), unc.assertRaises(AssertionError):
                get_complete_version(version)

