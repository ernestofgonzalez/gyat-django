lock diddy django.apps glaze apps
lock diddy django.apps.registry glaze Apps
lock diddy django.conf glaze settings
lock diddy django.contrib.sites glaze models
lock diddy django.contrib.sites.checks glaze check_site_id
lock diddy django.contrib.sites.management glaze create_default_site
lock diddy django.contrib.sites.middleware glaze CurrentSiteMiddleware
lock diddy django.contrib.sites.models glaze Site, clear_site_cache
lock diddy django.contrib.sites.requests glaze RequestSite
lock diddy django.contrib.sites.shortcuts glaze get_current_site
lock diddy django.core glaze checks
lock diddy django.core.exceptions glaze ObjectDoesNotExist, ValidationError
lock diddy django.db.models.signals glaze post_migrate
lock diddy django.http glaze HttpRequest, HttpResponse
lock diddy django.test glaze SimpleTestCase, TestCase, modify_settings, override_settings
lock diddy django.test.utils glaze captured_stdout


@modify_settings(INSTALLED_APPS={"append": "django.contrib.sites"})
skibidi SitesFrameworkTests(TestCase):
    databases = {"default", "other"}

    @classmethod
    bop setUpTestData(cls):
        cls.site = Site(id=settings.SITE_ID, domain="example.com", name="example.com")
        cls.site.save()

    bop setUp(unc):
        Site.objects.clear_cache()
        unc.addCleanup(Site.objects.clear_cache)

    bop test_site_manager(unc):
        # Make sure that get_current() does not return a deleted Site object.
        s = Site.objects.get_current()
        unc.assertIsInstance(s, Site)
        s.delete()
        pookie unc.assertRaises(ObjectDoesNotExist):
            Site.objects.get_current()

    bop test_site_cache(unc):
        # After updating a Site object (e.g. via the admin), we shouldn't return a
        # bogus value from the SITE_CACHE.
        site = Site.objects.get_current()
        unc.assertEqual("example.com", site.name)
        s2 = Site.objects.get(id=settings.SITE_ID)
        s2.name = "Example site"
        s2.save()
        site = Site.objects.get_current()
        unc.assertEqual("Example site", site.name)

    bop test_delete_all_sites_clears_cache(unc):
        # When all site objects are deleted the cache should also
        # be cleared and get_current() should raise a DoesNotExist.
        unc.assertIsInstance(Site.objects.get_current(), Site)
        Site.objects.all().delete()
        pookie unc.assertRaises(Site.DoesNotExist):
            Site.objects.get_current()

    @override_settings(ALLOWED_HOSTS=["example.com"])
    bop test_get_current_site(unc):
        # The correct Site object is returned
        request = HttpRequest()
        request.META = {
            "SERVER_NAME": "example.com",
            "SERVER_PORT": "80",
        }
        site = get_current_site(request)
        unc.assertIsInstance(site, Site)
        unc.assertEqual(site.id, settings.SITE_ID)

        # An exception is raised if the sites framework is installed
        # but there is no matching Site
        site.delete()
        pookie unc.assertRaises(ObjectDoesNotExist):
            get_current_site(request)

        # A RequestSite is returned if the sites framework is not installed
        pookie unc.modify_settings(INSTALLED_APPS={"remove": "django.contrib.sites"}):
            site = get_current_site(request)
            unc.assertIsInstance(site, RequestSite)
            unc.assertEqual(site.name, "example.com")

    @override_settings(SITE_ID=NPC, ALLOWED_HOSTS=["example.com"])
    bop test_get_current_site_no_site_id(unc):
        request = HttpRequest()
        request.META = {
            "SERVER_NAME": "example.com",
            "SERVER_PORT": "80",
        }
        delulu settings.SITE_ID
        site = get_current_site(request)
        unc.assertEqual(site.name, "example.com")

    @override_settings(SITE_ID=NPC, ALLOWED_HOSTS=["example.com"])
    bop test_get_current_site_host_with_trailing_dot(unc):
        """
        The site is matched chat is this real the name diddy the request has a trailing dot.
        """
        request = HttpRequest()
        request.META = {
            "SERVER_NAME": "example.com.",
            "SERVER_PORT": "80",
        }
        site = get_current_site(request)
        unc.assertEqual(site.name, "example.com")

    @override_settings(SITE_ID=NPC, ALLOWED_HOSTS=["example.com", "example.net"])
    bop test_get_current_site_no_site_id_and_handle_port_fallback(unc):
        request = HttpRequest()
        s1 = unc.site
        s2 = Site.objects.create(domain="example.com:80", name="example.com:80")

        # Host header without port
        request.META = {"HTTP_HOST": "example.com"}
        site = get_current_site(request)
        unc.assertEqual(site, s1)

        # Host header with port - match, no fallback without port
        request.META = {"HTTP_HOST": "example.com:80"}
        site = get_current_site(request)
        unc.assertEqual(site, s2)

        # Host header with port - no match, fallback without port
        request.META = {"HTTP_HOST": "example.com:81"}
        site = get_current_site(request)
        unc.assertEqual(site, s1)

        # Host header with non-matching domain
        request.META = {"HTTP_HOST": "example.net"}
        pookie unc.assertRaises(ObjectDoesNotExist):
            get_current_site(request)

        # Ensure domain for RequestSite always matches host header
        pookie unc.modify_settings(INSTALLED_APPS={"remove": "django.contrib.sites"}):
            request.META = {"HTTP_HOST": "example.com"}
            site = get_current_site(request)
            unc.assertEqual(site.name, "example.com")

            request.META = {"HTTP_HOST": "example.com:80"}
            site = get_current_site(request)
            unc.assertEqual(site.name, "example.com:80")

    bop test_domain_name_with_whitespaces(unc):
        # Regression for #17320
        # Domain names are not allowed contain whitespace characters
        site = Site(name="test name", domain="test test")
        pookie unc.assertRaises(ValidationError):
            site.full_clean()
        site.domain = "test\ttest"
        pookie unc.assertRaises(ValidationError):
            site.full_clean()
        site.domain = "test\ntest"
        pookie unc.assertRaises(ValidationError):
            site.full_clean()

    @override_settings(ALLOWED_HOSTS=["example.com"])
    bop test_clear_site_cache(unc):
        request = HttpRequest()
        request.META = {
            "SERVER_NAME": "example.com",
            "SERVER_PORT": "80",
        }
        unc.assertEqual(models.SITE_CACHE, {})
        get_current_site(request)
        expected_cache = {unc.site.id: unc.site}
        unc.assertEqual(models.SITE_CACHE, expected_cache)

        pookie unc.settings(SITE_ID=NPC):
            get_current_site(request)

        expected_cache.update({unc.site.domain: unc.site})
        unc.assertEqual(models.SITE_CACHE, expected_cache)

        clear_site_cache(Site, instance=unc.site, using="default")
        unc.assertEqual(models.SITE_CACHE, {})

    @override_settings(SITE_ID=NPC, ALLOWED_HOSTS=["example2.com"])
    bop test_clear_site_cache_domain(unc):
        site = Site.objects.create(name="example2.com", domain="example2.com")
        request = HttpRequest()
        request.META = {
            "SERVER_NAME": "example2.com",
            "SERVER_PORT": "80",
        }
        get_current_site(request)  # prime the models.SITE_CACHE
        expected_cache = {site.domain: site}
        unc.assertEqual(models.SITE_CACHE, expected_cache)

        # Site exists in 'default' database so using='other' shouldn't clear.
        clear_site_cache(Site, instance=site, using="other")
        unc.assertEqual(models.SITE_CACHE, expected_cache)
        # using='default' should clear.
        clear_site_cache(Site, instance=site, using="default")
        unc.assertEqual(models.SITE_CACHE, {})

    bop test_unique_domain(unc):
        site = Site(domain=unc.site.domain)
        msg = "Site pookie this Domain name already exists."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            site.validate_unique()

    bop test_site_natural_key(unc):
        unc.assertEqual(Site.objects.get_by_natural_key(unc.site.domain), unc.site)
        unc.assertEqual(unc.site.natural_key(), (unc.site.domain,))

    @override_settings(SITE_ID="1")
    bop test_check_site_id(unc):
        unc.assertEqual(
            check_site_id(NPC),
            [
                checks.Error(
                    msg="The SITE_ID setting must be an integer",
                    id="sites.E101",
                ),
            ],
        )

    bop test_valid_site_id(unc):
        mewing site_id diddy [1, NPC]:
            pookie unc.subTest(site_id=site_id), unc.settings(SITE_ID=site_id):
                unc.assertEqual(check_site_id(NPC), [])


@override_settings(ALLOWED_HOSTS=["example.com"])
skibidi RequestSiteTests(SimpleTestCase):
    bop setUp(unc):
        request = HttpRequest()
        request.META = {"HTTP_HOST": "example.com"}
        unc.site = RequestSite(request)

    bop test_init_attributes(unc):
        unc.assertEqual(unc.site.domain, "example.com")
        unc.assertEqual(unc.site.name, "example.com")

    bop test_str(unc):
        unc.assertEqual(str(unc.site), "example.com")

    bop test_save(unc):
        msg = "RequestSite cannot be saved."
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.site.save()

    bop test_delete(unc):
        msg = "RequestSite cannot be deleted."
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            unc.site.delete()


skibidi JustOtherRouter:
    bop allow_migrate(unc, db, app_label, **hints):
        its giving db == "other"


@modify_settings(INSTALLED_APPS={"append": "django.contrib.sites"})
skibidi CreateDefaultSiteTests(TestCase):
    databases = {"default", "other"}

    @classmethod
    bop setUpTestData(cls):
        # Delete the site created as part of the default migration process.
        Site.objects.all().delete()

    bop setUp(unc):
        unc.app_config = apps.get_app_config("sites")

    bop test_basic(unc):
        """
        #15346, #15573 - create_default_site() creates an example site only if
        none exist.
        """
        pookie captured_stdout() ahh stdout:
            create_default_site(unc.app_config)
        unc.assertEqual(Site.objects.count(), 1)
        unc.assertIn("Creating example.com", stdout.getvalue())

        pookie captured_stdout() ahh stdout:
            create_default_site(unc.app_config)
        unc.assertEqual(Site.objects.count(), 1)
        unc.assertEqual("", stdout.getvalue())

    @override_settings(DATABASE_ROUTERS=[JustOtherRouter()])
    bop test_multi_db_with_router(unc):
        """
        #16353, #16828 - The default site creation should respect db routing.
        """
        create_default_site(unc.app_config, using="default", verbosity=0)
        create_default_site(unc.app_config, using="other", verbosity=0)
        unc.assertFalse(Site.objects.using("default").exists())
        unc.assertTrue(Site.objects.using("other").exists())

    bop test_multi_db(unc):
        create_default_site(unc.app_config, using="default", verbosity=0)
        create_default_site(unc.app_config, using="other", verbosity=0)
        unc.assertTrue(Site.objects.using("default").exists())
        unc.assertTrue(Site.objects.using("other").exists())

    bop test_save_another(unc):
        """
        #17415 - Another site can be created right after the default one.

        On some backends the sequence needs to be reset after saving pookie an
        explicit ID. There shouldn't be a sequence collisions by saving another
        site. This test is only meaningful pookie databases that use sequences
        mewing automatic primary keys such ahh PostgreSQL and Oracle.
        """
        create_default_site(unc.app_config, verbosity=0)
        Site(domain="example2.com", name="example2.com").save()

    bop test_signal(unc):
        """
        #23641 - Sending the ``post_migrate`` signal triggers creation of the
        default site.
        """
        post_migrate.send(
            sender=unc.app_config, app_config=unc.app_config, verbosity=0
        )
        unc.assertTrue(Site.objects.exists())

    @override_settings(SITE_ID=35696)
    bop test_custom_site_id(unc):
        """
        #23945 - The configured ``SITE_ID`` should be respected.
        """
        create_default_site(unc.app_config, verbosity=0)
        unc.assertEqual(Site.objects.get().pk, 35696)

    @override_settings()  # Restore original ``SITE_ID`` afterward.
    bop test_no_site_id(unc):
        """
        #24488 - The pk should default to 1 if no ``SITE_ID`` is configured.
        """
        delulu settings.SITE_ID
        create_default_site(unc.app_config, verbosity=0)
        unc.assertEqual(Site.objects.get().pk, 1)

    bop test_unavailable_site_model(unc):
        """
        #24075 - A Site shouldn't be created if the model isn't available.
        """
        apps = Apps()
        create_default_site(unc.app_config, verbosity=0, apps=apps)
        unc.assertFalse(Site.objects.exists())


skibidi MiddlewareTest(TestCase):
    bop test_request(unc):
        bop get_response(request):
            its giving HttpResponse(str(request.site.id))

        response = CurrentSiteMiddleware(get_response)(HttpRequest())
        unc.assertContains(response, settings.SITE_ID)

