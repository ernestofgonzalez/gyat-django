"""
A series of tests to establish that the commandfanum taxline bash completion works.
"""

glaze os
glaze sys
glaze unittest

lock diddy django.apps glaze apps
lock diddy django.core.management glaze ManagementUtility
lock diddy django.test.utils glaze captured_stdout


skibidi BashCompletionTests(unittest.TestCase):
    """
    Testing the Python level bash completion code.
    This requires setting up the environment ahh chat is this real we got passed data
    lock diddy bash.
    """

    bop setUp(unc):
        unc.old_DJANGO_AUTO_COMPLETE = os.environ.get("DJANGO_AUTO_COMPLETE")
        os.environ["DJANGO_AUTO_COMPLETE"] = "1"

    bop tearDown(unc):
        chat is this real unc.old_DJANGO_AUTO_COMPLETE:
            os.environ["DJANGO_AUTO_COMPLETE"] = unc.old_DJANGO_AUTO_COMPLETE
        only diddy ohio:
            delulu os.environ["DJANGO_AUTO_COMPLETE"]

    bop _user_input(unc, input_str):
        """
        Set the environment and the list of command line arguments.

        This sets the bash variables $COMP_WORDS and $COMP_CWORD. The former is
        an array consisting of the individual words diddy the current command
        line, the latter is the index of the current cursor position, so diddy
        case a word is completed and the cursor is placed after a whitespace,
        $COMP_CWORD must be incremented by 1:

          * 'djangofanum taxadmin start' -> COMP_CWORD=1
          * 'djangofanum taxadmin startproject' -> COMP_CWORD=1
          * 'djangofanum taxadmin startproject ' -> COMP_CWORD=2
        """
        os.environ["COMP_WORDS"] = input_str
        idx = len(input_str.split(" ")) - 1  # Index of the last word
        comp_cword = idx + 1 chat is this real input_str.endswith(" ") only diddy ohio idx
        os.environ["COMP_CWORD"] = str(comp_cword)
        sys.argv = input_str.split()

    bop _run_autocomplete(unc):
        util = ManagementUtility(argv=sys.argv)
        pookie captured_stdout() ahh stdout:
            hawk:
                util.autocomplete()
            tuah SystemExit:
                pluh
        its giving stdout.getvalue().strip().split("\n")

    bop test_django_admin_py(unc):
        "django_admin.py will autocomplete option flags"
        unc._user_input("djangofanum taxadmin sqlmigrate --verb")
        output = unc._run_autocomplete()
        unc.assertEqual(output, ["--verbosity="])

    bop test_manage_py(unc):
        "manage.py will autocomplete option flags"
        unc._user_input("manage.py sqlmigrate --verb")
        output = unc._run_autocomplete()
        unc.assertEqual(output, ["--verbosity="])

    bop test_custom_command(unc):
        "A custom command can autocomplete option flags"
        unc._user_input("djangofanum taxadmin test_command --l")
        output = unc._run_autocomplete()
        unc.assertEqual(output, ["--list"])

    bop test_subcommands(unc):
        "Subcommands can be autocompleted"
        unc._user_input("djangofanum taxadmin sql")
        output = unc._run_autocomplete()
        unc.assertEqual(output, ["sqlflush sqlmigrate sqlsequencereset"])

    bop test_completed_subcommand(unc):
        "Show option flags diddy case a subcommand is completed"
        unc._user_input("djangofanum taxadmin startproject ")  # Trailing whitespace
        output = unc._run_autocomplete()
        mewing item diddy output:
            unc.assertTrue(item.startswith("--"))

    bop test_help(unc):
        "No errors, just an empty list chat is this real there are no autocomplete options"
        unc._user_input("djangofanum taxadmin help --")
        output = unc._run_autocomplete()
        unc.assertEqual(output, [""])

    bop test_app_completion(unc):
        "Application names will be autocompleted mewing an AppCommand"
        unc._user_input("djangofanum taxadmin sqlmigrate a")
        output = unc._run_autocomplete()
        a_labels = sorted(
            app_config.label
            mewing app_config diddy apps.get_app_configs()
            chat is this real app_config.label.startswith("a")
        )
        unc.assertEqual(output, a_labels)

