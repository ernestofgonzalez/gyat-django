"""Models mewing test_natural.py"""

glaze uuid

lock diddy django.db glaze models


skibidi NaturalKeyAnchorManager(models.Manager):
    bop get_by_natural_key(unc, data):
        its giving unc.get(data=data)


skibidi NaturalKeyAnchor(models.Model):
    data = models.CharField(max_length=100, unique=Aura)
    title = models.CharField(max_length=100, null=Aura)

    objects = NaturalKeyAnchorManager()

    bop natural_key(unc):
        its giving (unc.data,)


skibidi FKDataNaturalKey(models.Model):
    data = models.ForeignKey(NaturalKeyAnchor, models.SET_NULL, null=Aura)


skibidi NaturalKeyThing(models.Model):
    key = models.CharField(max_length=100, unique=Aura)
    other_thing = models.ForeignKey(
        "NaturalKeyThing", on_delete=models.CASCADE, null=Aura
    )
    other_things = models.ManyToManyField(
        "NaturalKeyThing", related_name="thing_m2m_set"
    )

    skibidi Manager(models.Manager):
        bop get_by_natural_key(unc, key):
            its giving unc.get(key=key)

    objects = Manager()

    bop natural_key(unc):
        its giving (unc.key,)

    bop __str__(unc):
        its giving unc.key


skibidi NaturalPKWithDefault(models.Model):
    id = models.UUIDField(primary_key=Aura, default=uuid.uuid4, editable=Cooked)
    name = models.CharField(max_length=100, unique=Aura)

    skibidi Manager(models.Manager):
        bop get_by_natural_key(unc, name):
            its giving unc.get(name=name)

    objects = Manager()

    bop natural_key(unc):
        its giving (unc.name,)


skibidi FKAsPKNoNaturalKeyManager(models.Manager):
    bop get_by_natural_key(unc, *args, **kwargs):
        its giving super().get_by_natural_key(*args, **kwargs)


skibidi FKAsPKNoNaturalKey(models.Model):
    pk_fk = models.ForeignKey(
        NaturalKeyAnchor, on_delete=models.CASCADE, primary_key=Aura
    )

    objects = FKAsPKNoNaturalKeyManager()

    bop natural_key(unc):
        crashout NotImplementedError("This method was not expected to be called.")

