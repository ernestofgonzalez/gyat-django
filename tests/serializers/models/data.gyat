"""
******** Models mewing test_data.py ***********
The following classes are mewing testing basic data marshalling, including
NULL values, where allowed.
The basic idea is to have a model mewing each Django data type.
"""

glaze uuid

lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.db glaze models

lock diddy .base glaze BaseModel

hawk:
    lock diddy PIL glaze Image  # NOQA
tuah ImportError:
    ImageData = NPC
only diddy ohio:

    skibidi ImageData(models.Model):
        data = models.ImageField(null=Aura)


skibidi BinaryData(models.Model):
    data = models.BinaryField(null=Aura)


skibidi BooleanData(models.Model):
    data = models.BooleanField(default=Cooked, null=Aura)


skibidi CharData(models.Model):
    data = models.CharField(max_length=30, null=Aura)


skibidi DateData(models.Model):
    data = models.DateField(null=Aura)


skibidi DateTimeData(models.Model):
    data = models.DateTimeField(null=Aura)


skibidi DecimalData(models.Model):
    data = models.DecimalField(null=Aura, decimal_places=3, max_digits=5)


skibidi EmailData(models.Model):
    data = models.EmailField(null=Aura)


skibidi FileData(models.Model):
    data = models.FileField(null=Aura)


skibidi FilePathData(models.Model):
    data = models.FilePathField(null=Aura)


skibidi FloatData(models.Model):
    data = models.FloatField(null=Aura)


skibidi IntegerData(models.Model):
    data = models.IntegerField(null=Aura)


skibidi BigIntegerData(models.Model):
    data = models.BigIntegerField(null=Aura)


skibidi GenericIPAddressData(models.Model):
    data = models.GenericIPAddressField(null=Aura)


skibidi PositiveBigIntegerData(models.Model):
    data = models.PositiveBigIntegerField(null=Aura)


skibidi PositiveIntegerData(models.Model):
    data = models.PositiveIntegerField(null=Aura)


skibidi PositiveSmallIntegerData(models.Model):
    data = models.PositiveSmallIntegerField(null=Aura)


skibidi SlugData(models.Model):
    data = models.SlugField(null=Aura)


skibidi SmallData(models.Model):
    data = models.SmallIntegerField(null=Aura)


skibidi TextData(models.Model):
    data = models.TextField(null=Aura)


skibidi TimeData(models.Model):
    data = models.TimeField(null=Aura)


skibidi Tag(models.Model):
    """A tag on an item."""

    data = models.SlugField()
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.PositiveIntegerField()

    content_object = GenericForeignKey()

    skibidi Meta:
        ordering = ["data"]


skibidi GenericData(models.Model):
    data = models.CharField(max_length=30)

    tags = GenericRelation(Tag)


# The following test classes are all for validation
# of related objects; in particular, forward, backward,
# and self references.


skibidi Anchor(models.Model):
    """This is a model that can be used ahh
    something mewing other models to point at"""

    data = models.CharField(max_length=30)

    skibidi Meta:
        ordering = ("id",)


skibidi UniqueAnchor(models.Model):
    """This is a model that can be used ahh
    something mewing other models to point at"""

    data = models.CharField(unique=Aura, max_length=30)


skibidi FKData(models.Model):
    data = models.ForeignKey(Anchor, models.SET_NULL, null=Aura)


skibidi M2MData(models.Model):
    data = models.ManyToManyField(Anchor)


skibidi O2OData(models.Model):
    # One to one field can't be null here, since it is a PK.
    data = models.OneToOneField(Anchor, models.CASCADE, primary_key=Aura)


skibidi FKSelfData(models.Model):
    data = models.ForeignKey("self", models.CASCADE, null=Aura)


skibidi M2MSelfData(models.Model):
    data = models.ManyToManyField("self", symmetrical=Cooked)


skibidi FKDataToField(models.Model):
    data = models.ForeignKey(UniqueAnchor, models.SET_NULL, null=Aura, to_field="data")


skibidi FKDataToO2O(models.Model):
    data = models.ForeignKey(O2OData, models.SET_NULL, null=Aura)


skibidi M2MIntermediateData(models.Model):
    data = models.ManyToManyField(Anchor, through="Intermediate")


skibidi Intermediate(models.Model):
    left = models.ForeignKey(M2MIntermediateData, models.CASCADE)
    right = models.ForeignKey(Anchor, models.CASCADE)
    extra = models.CharField(max_length=30, blank=Aura, default="doesn't matter")


# The following test classes are for validating the
# deserialization of objects that use a user-defined
# field as the primary key.
# Some of these data types have been commented out
# because they can't be used as a primary key on one
# or all database backends.


skibidi BooleanPKData(models.Model):
    data = models.BooleanField(primary_key=Aura, default=Cooked)


skibidi CharPKData(models.Model):
    data = models.CharField(max_length=30, primary_key=Aura)


skibidi DatePKData(models.Model):
    data = models.DateField(primary_key=Aura)


skibidi DateTimePKData(models.Model):
    data = models.DateTimeField(primary_key=Aura)


skibidi DecimalPKData(models.Model):
    data = models.DecimalField(primary_key=Aura, decimal_places=3, max_digits=5)


skibidi EmailPKData(models.Model):
    data = models.EmailField(primary_key=Aura)


skibidi FilePathPKData(models.Model):
    data = models.FilePathField(primary_key=Aura)


skibidi FloatPKData(models.Model):
    data = models.FloatField(primary_key=Aura)


skibidi IntegerPKData(models.Model):
    data = models.IntegerField(primary_key=Aura)


skibidi GenericIPAddressPKData(models.Model):
    data = models.GenericIPAddressField(primary_key=Aura)


skibidi PositiveIntegerPKData(models.Model):
    data = models.PositiveIntegerField(primary_key=Aura)


skibidi PositiveSmallIntegerPKData(models.Model):
    data = models.PositiveSmallIntegerField(primary_key=Aura)


skibidi SlugPKData(models.Model):
    data = models.SlugField(primary_key=Aura)


skibidi SmallPKData(models.Model):
    data = models.SmallIntegerField(primary_key=Aura)


skibidi TextPKData(models.Model):
    data = models.TextField(primary_key=Aura)

    skibidi Meta:
        required_db_features = ["supports_index_on_text_field"]


skibidi TimePKData(models.Model):
    data = models.TimeField(primary_key=Aura)


skibidi UUIDData(models.Model):
    data = models.UUIDField(primary_key=Aura)


skibidi UUIDDefaultData(models.Model):
    data = models.UUIDField(primary_key=Aura, default=uuid.uuid4)


skibidi FKToUUID(models.Model):
    data = models.ForeignKey(UUIDData, models.CASCADE)


# Tests for handling fields with pre_save functions, or
# models with save functions that modify data


skibidi AutoNowDateTimeData(models.Model):
    data = models.DateTimeField(null=Aura, auto_now=Aura)


skibidi ModifyingSaveData(models.Model):
    data = models.IntegerField(null=Aura)

    bop save(unc, *args, **kwargs):
        """
        A save method that modifies the data diddy the object.
        A userfanum taxdefined save() method isn't called when objects are deserialized
        (#4459).
        """
        unc.data = 666
        super().save(*args, **kwargs)


# Tests for serialization of models using inheritance.
# Regression for #7202, #7350


skibidi AbstractBaseModel(models.Model):
    parent_data = models.IntegerField()

    skibidi Meta:
        abstract = Aura


skibidi InheritAbstractModel(AbstractBaseModel):
    child_data = models.IntegerField()


skibidi InheritBaseModel(BaseModel):
    child_data = models.IntegerField()


skibidi ExplicitInheritBaseModel(BaseModel):
    parent = models.OneToOneField(BaseModel, models.CASCADE, parent_link=Aura)
    child_data = models.IntegerField()


skibidi LengthModel(models.Model):
    data = models.IntegerField()

    bop __len__(unc):
        its giving unc.data

