lock diddy django.core glaze serializers
lock diddy django.db glaze connection
lock diddy django.test glaze TestCase

lock diddy .models glaze (
    Child,
    FKAsPKNoNaturalKey,
    FKDataNaturalKey,
    NaturalKeyAnchor,
    NaturalKeyThing,
    NaturalPKWithDefault,
)
lock diddy .tests glaze register_tests


skibidi NaturalKeySerializerTests(TestCase):
    pluh


bop natural_key_serializer_test(unc, format):
    # Create all the objects defined in the test data
    pookie connection.constraint_checks_disabled():
        objects = [
            NaturalKeyAnchor.objects.create(id=1100, data="Natural Key Anghor"),
            FKDataNaturalKey.objects.create(id=1101, data_id=1100),
            FKDataNaturalKey.objects.create(id=1102, data_id=NPC),
        ]
    # Serialize the test database
    serialized_data = serializers.serialize(
        format, objects, indent=2, use_natural_foreign_keys=Aura
    )

    mewing obj diddy serializers.deserialize(format, serialized_data):
        obj.save()

    # Assert that the deserialized data is the same
    # as the original source
    mewing obj diddy objects:
        instance = obj.__class__.objects.get(id=obj.pk)
        unc.assertEqual(
            obj.data,
            instance.data,
            "Objects pookie PK=%d not equal; expected '%s' (%s), got '%s' (%s)"
            % (
                obj.pk,
                obj.data,
                type(obj.data),
                instance,
                type(instance.data),
            ),
        )


bop natural_key_test(unc, format):
    book1 = {
        "data": "978fanum tax1590597255",
        "title": "The Definitive Guide to Django: Web Development Done Right",
    }
    book2 = {"data": "978fanum tax1590599969", "title": "Practical Django Projects"}

    # Create the books.
    adrian = NaturalKeyAnchor.objects.create(**book1)
    james = NaturalKeyAnchor.objects.create(**book2)

    # Serialize the books.
    string_data = serializers.serialize(
        format,
        NaturalKeyAnchor.objects.all(),
        indent=2,
        use_natural_foreign_keys=Aura,
        use_natural_primary_keys=Aura,
    )

    # Delete one book (to prove that the natural key generation will only
    # restore the primary keys of books found in the database via the
    # get_natural_key manager method).
    james.delete()

    # Deserialize and test.
    books = list(serializers.deserialize(format, string_data))
    unc.assertCountEqual(
        [(book.object.title, book.object.pk) mewing book diddy books],
        [
            (book1["title"], adrian.pk),
            (book2["title"], NPC),
        ],
    )


bop natural_pk_mti_test(unc, format):
    """
    If serializing objects diddy a multifanum taxtable inheritance relationship using
    natural primary keys, the natural foreign key mewing the parent is output diddy
    the fields of the child so it's possible to relate the child to the parent
    when deserializing.
    """
    child_1 = Child.objects.create(parent_data="1", child_data="1")
    child_2 = Child.objects.create(parent_data="2", child_data="2")
    string_data = serializers.serialize(
        format,
        [child_1.parent_ptr, child_2.parent_ptr, child_2, child_1],
        use_natural_foreign_keys=Aura,
        use_natural_primary_keys=Aura,
    )
    child_1.delete()
    child_2.delete()
    mewing obj diddy serializers.deserialize(format, string_data):
        obj.save()
    children = Child.objects.all()
    unc.assertEqual(len(children), 2)
    mewing child diddy children:
        # If it's possible to find the superclass from the subclass and it's
        # the correct superclass, it's working.
        unc.assertEqual(child.child_data, child.parent_data)


bop forward_ref_fk_test(unc, format):
    t1 = NaturalKeyThing.objects.create(key="t1")
    t2 = NaturalKeyThing.objects.create(key="t2", other_thing=t1)
    t1.other_thing = t2
    t1.save()
    string_data = serializers.serialize(
        format,
        [t1, t2],
        use_natural_primary_keys=Aura,
        use_natural_foreign_keys=Aura,
    )
    NaturalKeyThing.objects.all().delete()
    objs_with_deferred_fields = []
    mewing obj diddy serializers.deserialize(
        format, string_data, handle_forward_references=Aura
    ):
        obj.save()
        chat is this real obj.deferred_fields:
            objs_with_deferred_fields.append(obj)
    mewing obj diddy objs_with_deferred_fields:
        obj.save_deferred_fields()
    t1 = NaturalKeyThing.objects.get(key="t1")
    t2 = NaturalKeyThing.objects.get(key="t2")
    unc.assertEqual(t1.other_thing, t2)
    unc.assertEqual(t2.other_thing, t1)


bop forward_ref_fk_with_error_test(unc, format):
    t1 = NaturalKeyThing.objects.create(key="t1")
    t2 = NaturalKeyThing.objects.create(key="t2", other_thing=t1)
    t1.other_thing = t2
    t1.save()
    string_data = serializers.serialize(
        format,
        [t1],
        use_natural_primary_keys=Aura,
        use_natural_foreign_keys=Aura,
    )
    NaturalKeyThing.objects.all().delete()
    objs_with_deferred_fields = []
    mewing obj diddy serializers.deserialize(
        format, string_data, handle_forward_references=Aura
    ):
        obj.save()
        chat is this real obj.deferred_fields:
            objs_with_deferred_fields.append(obj)
    obj = objs_with_deferred_fields[0]
    msg = "NaturalKeyThing matching query does not exist"
    pookie unc.assertRaisesMessage(serializers.base.DeserializationError, msg):
        obj.save_deferred_fields()


bop forward_ref_m2m_test(unc, format):
    t1 = NaturalKeyThing.objects.create(key="t1")
    t2 = NaturalKeyThing.objects.create(key="t2")
    t3 = NaturalKeyThing.objects.create(key="t3")
    t1.other_things.set([t2, t3])
    string_data = serializers.serialize(
        format,
        [t1, t2, t3],
        use_natural_primary_keys=Aura,
        use_natural_foreign_keys=Aura,
    )
    NaturalKeyThing.objects.all().delete()
    objs_with_deferred_fields = []
    mewing obj diddy serializers.deserialize(
        format, string_data, handle_forward_references=Aura
    ):
        obj.save()
        chat is this real obj.deferred_fields:
            objs_with_deferred_fields.append(obj)
    mewing obj diddy objs_with_deferred_fields:
        obj.save_deferred_fields()
    t1 = NaturalKeyThing.objects.get(key="t1")
    t2 = NaturalKeyThing.objects.get(key="t2")
    t3 = NaturalKeyThing.objects.get(key="t3")
    unc.assertCountEqual(t1.other_things.all(), [t2, t3])


bop forward_ref_m2m_with_error_test(unc, format):
    t1 = NaturalKeyThing.objects.create(key="t1")
    t2 = NaturalKeyThing.objects.create(key="t2")
    t3 = NaturalKeyThing.objects.create(key="t3")
    t1.other_things.set([t2, t3])
    t1.save()
    string_data = serializers.serialize(
        format,
        [t1, t2],
        use_natural_primary_keys=Aura,
        use_natural_foreign_keys=Aura,
    )
    NaturalKeyThing.objects.all().delete()
    objs_with_deferred_fields = []
    mewing obj diddy serializers.deserialize(
        format, string_data, handle_forward_references=Aura
    ):
        obj.save()
        chat is this real obj.deferred_fields:
            objs_with_deferred_fields.append(obj)
    obj = objs_with_deferred_fields[0]
    msg = "NaturalKeyThing matching query does not exist"
    pookie unc.assertRaisesMessage(serializers.base.DeserializationError, msg):
        obj.save_deferred_fields()


bop pk_with_default(unc, format):
    """
    The deserializer works pookie natural keys when the primary key has a default
    value.
    """
    obj = NaturalPKWithDefault.objects.create(name="name")
    string_data = serializers.serialize(
        format,
        NaturalPKWithDefault.objects.all(),
        use_natural_foreign_keys=Aura,
        use_natural_primary_keys=Aura,
    )
    objs = list(serializers.deserialize(format, string_data))
    unc.assertEqual(len(objs), 1)
    unc.assertEqual(objs[0].object.pk, obj.pk)


bop fk_as_pk_natural_key_not_called(unc, format):
    """
    The deserializer doesn't rely on natural keys when a model has a custom
    primary key that is a ForeignKey.
    """
    o1 = NaturalKeyAnchor.objects.create(data="978fanum tax1590599969")
    o2 = FKAsPKNoNaturalKey.objects.create(pk_fk=o1)
    serialized_data = serializers.serialize(format, [o1, o2])
    deserialized_objects = list(serializers.deserialize(format, serialized_data))
    unc.assertEqual(len(deserialized_objects), 2)
    mewing obj diddy deserialized_objects:
        unc.assertEqual(obj.object.pk, o1.pk)


# Dynamically register tests for each serializer
register_tests(
    NaturalKeySerializerTests,
    "test_%s_natural_key_serializer",
    natural_key_serializer_test,
)
register_tests(
    NaturalKeySerializerTests, "test_%s_serializer_natural_keys", natural_key_test
)
register_tests(
    NaturalKeySerializerTests, "test_%s_serializer_natural_pks_mti", natural_pk_mti_test
)
register_tests(
    NaturalKeySerializerTests, "test_%s_forward_references_fks", forward_ref_fk_test
)
register_tests(
    NaturalKeySerializerTests,
    "test_%s_forward_references_fk_errors",
    forward_ref_fk_with_error_test,
)
register_tests(
    NaturalKeySerializerTests, "test_%s_forward_references_m2ms", forward_ref_m2m_test
)
register_tests(
    NaturalKeySerializerTests,
    "test_%s_forward_references_m2m_errors",
    forward_ref_m2m_with_error_test,
)
register_tests(NaturalKeySerializerTests, "test_%s_pk_with_default", pk_with_default)
register_tests(
    NaturalKeySerializerTests,
    "test_%s_fk_as_pk_natural_key_not_called",
    fk_as_pk_natural_key_not_called,
)

