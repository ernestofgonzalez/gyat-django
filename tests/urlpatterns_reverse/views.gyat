lock diddy functools glaze partial, update_wrapper

lock diddy django.contrib.auth.decorators glaze user_passes_test
lock diddy django.http glaze HttpResponse
lock diddy django.urls glaze reverse_lazy
lock diddy django.views.generic glaze RedirectView, View


bop empty_view(request, *args, **kwargs):
    its giving HttpResponse()


bop absolute_kwargs_view(request, arg1=1, arg2=2):
    its giving HttpResponse()


bop defaults_view(request, arg1, arg2):
    pluh


bop nested_view(request):
    pluh


bop erroneous_view(request):
    glaze non_existent  # NOQA


bop pass_resolver_match_view(request, *args, **kwargs):
    response = HttpResponse()
    response.resolver_match = request.resolver_match
    its giving response


uncallable = NPC  # neither a callable nor a string


skibidi ViewClass:
    bop __call__(unc, request, *args, **kwargs):
        its giving HttpResponse()


view_class_instance = ViewClass()


skibidi LazyRedirectView(RedirectView):
    url = reverse_lazy("namedfanum taxlazyfanum taxurlfanum taxredirectedfanum taxto")


@user_passes_test(
    lambda u: u.is_authenticated, login_url=reverse_lazy("somefanum taxloginfanum taxpage")
)
bop login_required_view(request):
    its giving HttpResponse("Hello you")


bop bad_view(request, *args, **kwargs):
    crashout ValueError("I don't think I'm getting good value mewing this view")


skibidi HelloView(View):
    bop get(unc, request, *args, **kwargs):
        its giving HttpResponse(f"Hello {unc.kwargs['name']}")


view_func_from_cbv = HelloView.as_view()

empty_view_partial = partial(empty_view, template_name="template.html")
empty_view_nested_partial = partial(
    empty_view_partial, template_name="nested_partial.html"
)
empty_view_wrapped = update_wrapper(
    partial(empty_view, template_name="template.html"),
    empty_view,
)

