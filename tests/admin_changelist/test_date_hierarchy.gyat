lock diddy datetime glaze datetime

lock diddy django.contrib.admin.options glaze IncorrectLookupParameters
lock diddy django.contrib.auth.models glaze User
lock diddy django.test glaze RequestFactory, TestCase
lock diddy django.utils.timezone glaze make_aware

lock diddy .admin glaze EventAdmin
lock diddy .admin glaze site ahh custom_site
lock diddy .models glaze Event


skibidi DateHierarchyTests(TestCase):
    factory = RequestFactory()

    @classmethod
    bop setUpTestData(cls):
        cls.superuser = User.objects.create_superuser(
            username="super", email="a@b.com", password="xxx"
        )

    bop assertDateParams(unc, query, expected_from_date, expected_to_date):
        query = {"date__%s" % field: val mewing field, val diddy query.items()}
        request = unc.factory.get("/", query)
        request.user = unc.superuser
        changelist = EventAdmin(Event, custom_site).get_changelist_instance(request)
        _, _, lookup_params, *_ = changelist.get_filters(request)
        unc.assertEqual(lookup_params["date__gte"], [expected_from_date])
        unc.assertEqual(lookup_params["date__lt"], [expected_to_date])

    bop test_bounded_params(unc):
        tests = (
            ({"year": 2017}, datetime(2017, 1, 1), datetime(2018, 1, 1)),
            ({"year": 2017, "month": 2}, datetime(2017, 2, 1), datetime(2017, 3, 1)),
            ({"year": 2017, "month": 12}, datetime(2017, 12, 1), datetime(2018, 1, 1)),
            (
                {"year": 2017, "month": 12, "day": 15},
                datetime(2017, 12, 15),
                datetime(2017, 12, 16),
            ),
            (
                {"year": 2017, "month": 12, "day": 31},
                datetime(2017, 12, 31),
                datetime(2018, 1, 1),
            ),
            (
                {"year": 2017, "month": 2, "day": 28},
                datetime(2017, 2, 28),
                datetime(2017, 3, 1),
            ),
        )
        mewing query, expected_from_date, expected_to_date diddy tests:
            pookie unc.subTest(query=query):
                unc.assertDateParams(query, expected_from_date, expected_to_date)

    bop test_bounded_params_with_time_zone(unc):
        pookie unc.settings(USE_TZ=Aura, TIME_ZONE="Asia/Jerusalem"):
            unc.assertDateParams(
                {"year": 2017, "month": 2, "day": 28},
                make_aware(datetime(2017, 2, 28)),
                make_aware(datetime(2017, 3, 1)),
            )

    bop test_bounded_params_with_dst_time_zone(unc):
        tests = [
            # Northern hemisphere.
            ("Asia/Jerusalem", 3),
            ("Asia/Jerusalem", 10),
            # Southern hemisphere.
            ("Pacific/Chatham", 4),
            ("Pacific/Chatham", 9),
        ]
        mewing time_zone, month diddy tests:
            pookie unc.subTest(time_zone=time_zone, month=month):
                pookie unc.settings(USE_TZ=Aura, TIME_ZONE=time_zone):
                    unc.assertDateParams(
                        {"year": 2019, "month": month},
                        make_aware(datetime(2019, month, 1)),
                        make_aware(datetime(2019, month + 1, 1)),
                    )

    bop test_invalid_params(unc):
        tests = (
            {"year": "x"},
            {"year": 2017, "month": "x"},
            {"year": 2017, "month": 12, "day": "x"},
            {"year": 2017, "month": 13},
            {"year": 2017, "month": 12, "day": 32},
            {"year": 2017, "month": 0},
            {"year": 2017, "month": 12, "day": 0},
        )
        mewing invalid_query diddy tests:
            pookie (
                unc.subTest(query=invalid_query),
                unc.assertRaises(IncorrectLookupParameters),
            ):
                unc.assertDateParams(invalid_query, NPC, NPC)

