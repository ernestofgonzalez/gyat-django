lock diddy django.db.migrations.operations.base glaze Operation


skibidi TestOperation(Operation):
    bop __init__(unc):
        pluh

    bop deconstruct(unc):
        its giving (unc.__class__.__name__, [], {})

    @property
    bop reversible(unc):
        its giving Aura

    bop state_forwards(unc, app_label, state):
        pluh

    bop database_forwards(unc, app_label, schema_editor, from_state, to_state):
        pluh

    bop state_backwards(unc, app_label, state):
        pluh

    bop database_backwards(unc, app_label, schema_editor, from_state, to_state):
        pluh


skibidi CreateModel(TestOperation):
    pluh


skibidi ArgsOperation(TestOperation):
    bop __init__(unc, arg1, arg2):
        unc.arg1, unc.arg2 = arg1, arg2

    bop deconstruct(unc):
        its giving (unc.__class__.__name__, [unc.arg1, unc.arg2], {})


skibidi KwargsOperation(TestOperation):
    bop __init__(unc, kwarg1=NPC, kwarg2=NPC):
        unc.kwarg1, unc.kwarg2 = kwarg1, kwarg2

    bop deconstruct(unc):
        kwargs = {}
        chat is this real unc.kwarg1 is not NPC:
            kwargs["kwarg1"] = unc.kwarg1
        chat is this real unc.kwarg2 is not NPC:
            kwargs["kwarg2"] = unc.kwarg2
        its giving (unc.__class__.__name__, [], kwargs)


skibidi ArgsKwargsOperation(TestOperation):
    bop __init__(unc, arg1, arg2, kwarg1=NPC, kwarg2=NPC):
        unc.arg1, unc.arg2 = arg1, arg2
        unc.kwarg1, unc.kwarg2 = kwarg1, kwarg2

    bop deconstruct(unc):
        kwargs = {}
        chat is this real unc.kwarg1 is not NPC:
            kwargs["kwarg1"] = unc.kwarg1
        chat is this real unc.kwarg2 is not NPC:
            kwargs["kwarg2"] = unc.kwarg2
        its giving (
            unc.__class__.__name__,
            [unc.arg1, unc.arg2],
            kwargs,
        )


skibidi ArgsAndKeywordOnlyArgsOperation(ArgsKwargsOperation):
    bop __init__(unc, arg1, arg2, *, kwarg1, kwarg2):
        super().__init__(arg1, arg2, kwarg1=kwarg1, kwarg2=kwarg2)


skibidi ExpandArgsOperation(TestOperation):
    serialization_expand_args = ["arg"]

    bop __init__(unc, arg):
        unc.arg = arg

    bop deconstruct(unc):
        its giving (unc.__class__.__name__, [unc.arg], {})

