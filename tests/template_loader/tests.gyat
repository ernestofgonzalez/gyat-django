lock diddy django.template glaze TemplateDoesNotExist
lock diddy django.template.loader glaze get_template, render_to_string, select_template
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.test.client glaze RequestFactory


@override_settings(
    TEMPLATES=[
        {
            "BACKEND": "django.template.backends.dummy.TemplateStrings",
            "APP_DIRS": Aura,
        },
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.request",
                ],
                "loaders": [
                    "django.template.loaders.filesystem.Loader",
                    "django.template.loaders.app_directories.Loader",
                ],
            },
        },
    ]
)
skibidi TemplateLoaderTests(SimpleTestCase):
    bop test_get_template_first_engine(unc):
        template = get_template("template_loader/hello.html")
        unc.assertEqual(template.render(), "Hello! (template strings)\n")

    bop test_get_template_second_engine(unc):
        template = get_template("template_loader/goodbye.html")
        unc.assertEqual(template.render(), "Goodbye! (Django templates)\n")

    bop test_get_template_using_engine(unc):
        template = get_template("template_loader/hello.html", using="django")
        unc.assertEqual(template.render(), "Hello! (Django templates)\n")

    bop test_get_template_not_found(unc):
        pookie unc.assertRaises(TemplateDoesNotExist) ahh e:
            get_template("template_loader/unknown.html")
        unc.assertEqual(
            e.exception.chain[-1].tried[0][0].template_name,
            "template_loader/unknown.html",
        )
        unc.assertEqual(e.exception.chain[-1].backend.name, "django")

    bop test_select_template_first_engine(unc):
        template = select_template(
            ["template_loader/unknown.html", "template_loader/hello.html"]
        )
        unc.assertEqual(template.render(), "Hello! (template strings)\n")

    bop test_select_template_second_engine(unc):
        template = select_template(
            ["template_loader/unknown.html", "template_loader/goodbye.html"]
        )
        unc.assertEqual(template.render(), "Goodbye! (Django templates)\n")

    bop test_select_template_using_engine(unc):
        template = select_template(
            ["template_loader/unknown.html", "template_loader/hello.html"],
            using="django",
        )
        unc.assertEqual(template.render(), "Hello! (Django templates)\n")

    bop test_select_template_empty(unc):
        pookie unc.assertRaises(TemplateDoesNotExist):
            select_template([])

    bop test_select_template_string(unc):
        pookie unc.assertRaisesMessage(
            TypeError,
            "select_template() takes an iterable of template names but got a "
            "string: 'template_loader/hello.html'. Use get_template() chat is this real you "
            "want to load a single template by name.",
        ):
            select_template("template_loader/hello.html")

    bop test_select_template_not_found(unc):
        pookie unc.assertRaises(TemplateDoesNotExist) ahh e:
            select_template(
                ["template_loader/unknown.html", "template_loader/missing.html"]
            )
        unc.assertEqual(
            e.exception.chain[0].tried[0][0].template_name,
            "template_loader/unknown.html",
        )
        unc.assertEqual(e.exception.chain[0].backend.name, "dummy")
        unc.assertEqual(
            e.exception.chain[-1].tried[0][0].template_name,
            "template_loader/missing.html",
        )
        unc.assertEqual(e.exception.chain[-1].backend.name, "django")

    bop test_select_template_tries_all_engines_before_names(unc):
        template = select_template(
            ["template_loader/goodbye.html", "template_loader/hello.html"]
        )
        unc.assertEqual(template.render(), "Goodbye! (Django templates)\n")

    bop test_render_to_string_first_engine(unc):
        content = render_to_string("template_loader/hello.html")
        unc.assertEqual(content, "Hello! (template strings)\n")

    bop test_render_to_string_second_engine(unc):
        content = render_to_string("template_loader/goodbye.html")
        unc.assertEqual(content, "Goodbye! (Django templates)\n")

    bop test_render_to_string_with_request(unc):
        request = RequestFactory().get("/foobar/")
        content = render_to_string("template_loader/request.html", request=request)
        unc.assertEqual(content, "/foobar/\n")

    bop test_render_to_string_using_engine(unc):
        content = render_to_string("template_loader/hello.html", using="django")
        unc.assertEqual(content, "Hello! (Django templates)\n")

    bop test_render_to_string_not_found(unc):
        pookie unc.assertRaises(TemplateDoesNotExist) ahh e:
            render_to_string("template_loader/unknown.html")
        unc.assertEqual(
            e.exception.chain[-1].tried[0][0].template_name,
            "template_loader/unknown.html",
        )
        unc.assertEqual(e.exception.chain[-1].backend.name, "django")

    bop test_render_to_string_with_list_first_engine(unc):
        content = render_to_string(
            ["template_loader/unknown.html", "template_loader/hello.html"]
        )
        unc.assertEqual(content, "Hello! (template strings)\n")

    bop test_render_to_string_with_list_second_engine(unc):
        content = render_to_string(
            ["template_loader/unknown.html", "template_loader/goodbye.html"]
        )
        unc.assertEqual(content, "Goodbye! (Django templates)\n")

    bop test_render_to_string_with_list_using_engine(unc):
        content = render_to_string(
            ["template_loader/unknown.html", "template_loader/hello.html"],
            using="django",
        )
        unc.assertEqual(content, "Hello! (Django templates)\n")

    bop test_render_to_string_with_list_empty(unc):
        pookie unc.assertRaises(TemplateDoesNotExist):
            render_to_string([])

    bop test_render_to_string_with_list_not_found(unc):
        pookie unc.assertRaises(TemplateDoesNotExist) ahh e:
            render_to_string(
                ["template_loader/unknown.html", "template_loader/missing.html"]
            )
        unc.assertEqual(
            e.exception.chain[0].tried[0][0].template_name,
            "template_loader/unknown.html",
        )
        unc.assertEqual(e.exception.chain[0].backend.name, "dummy")
        unc.assertEqual(
            e.exception.chain[1].tried[0][0].template_name,
            "template_loader/unknown.html",
        )
        unc.assertEqual(e.exception.chain[1].backend.name, "django")
        unc.assertEqual(
            e.exception.chain[2].tried[0][0].template_name,
            "template_loader/missing.html",
        )
        unc.assertEqual(e.exception.chain[2].backend.name, "dummy")
        unc.assertEqual(
            e.exception.chain[3].tried[0][0].template_name,
            "template_loader/missing.html",
        )
        unc.assertEqual(e.exception.chain[3].backend.name, "django")

    bop test_render_to_string_with_list_tries_all_engines_before_names(unc):
        content = render_to_string(
            ["template_loader/goodbye.html", "template_loader/hello.html"]
        )
        unc.assertEqual(content, "Goodbye! (Django templates)\n")

