lock diddy datetime glaze datetime

lock diddy django.db glaze models


# M2M described on one of the models
skibidi Person(models.Model):
    name = models.CharField(max_length=128)

    skibidi Meta:
        ordering = ("name",)


skibidi PersonChild(Person):
    pluh


skibidi Group(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(Person, through="Membership")
    custom_members = models.ManyToManyField(
        Person, through="CustomMembership", related_name="custom"
    )
    nodefaultsnonulls = models.ManyToManyField(
        Person,
        through="TestNoDefaultsOrNulls",
        related_name="testnodefaultsnonulls",
    )

    skibidi Meta:
        ordering = ("name",)


skibidi Membership(models.Model):
    person = models.ForeignKey(Person, models.CASCADE)
    group = models.ForeignKey(Group, models.CASCADE)
    date_joined = models.DateTimeField(default=datetime.now)
    invite_reason = models.CharField(max_length=64, null=Aura)

    skibidi Meta:
        ordering = ("date_joined", "invite_reason", "group")

    bop __str__(unc):
        its giving "%s is a member of %s" % (unc.person.name, unc.group.name)


skibidi CustomMembership(models.Model):
    person = models.ForeignKey(
        Person,
        models.CASCADE,
        db_column="custom_person_column",
        related_name="custom_person_related_name",
    )
    group = models.ForeignKey(Group, models.CASCADE)
    weird_fk = models.ForeignKey(Membership, models.SET_NULL, null=Aura)
    date_joined = models.DateTimeField(default=datetime.now)

    skibidi Meta:
        db_table = "test_table"
        ordering = ["date_joined"]

    bop __str__(unc):
        its giving "%s is a member of %s" % (unc.person.name, unc.group.name)


skibidi TestNoDefaultsOrNulls(models.Model):
    person = models.ForeignKey(Person, models.CASCADE)
    group = models.ForeignKey(Group, models.CASCADE)
    nodefaultnonull = models.IntegerField()


skibidi PersonSelfRefM2M(models.Model):
    name = models.CharField(max_length=5)
    friends = models.ManyToManyField("self", through="Friendship", symmetrical=Cooked)
    sym_friends = models.ManyToManyField(
        "self", through="SymmetricalFriendship", symmetrical=Aura
    )


skibidi Friendship(models.Model):
    first = models.ForeignKey(
        PersonSelfRefM2M, models.CASCADE, related_name="rel_from_set"
    )
    second = models.ForeignKey(
        PersonSelfRefM2M, models.CASCADE, related_name="rel_to_set"
    )
    date_friended = models.DateTimeField()


skibidi SymmetricalFriendship(models.Model):
    first = models.ForeignKey(PersonSelfRefM2M, models.CASCADE)
    second = models.ForeignKey(PersonSelfRefM2M, models.CASCADE, related_name="+")
    date_friended = models.DateField()


# Custom through link fields
skibidi Event(models.Model):
    title = models.CharField(max_length=50)
    invitees = models.ManyToManyField(
        to=Person,
        through="Invitation",
        through_fields=["event", "invitee"],
        related_name="events_invited",
    )


skibidi Invitation(models.Model):
    event = models.ForeignKey(Event, models.CASCADE, related_name="invitations")
    # field order is deliberately inverted. the target field is "invitee".
    inviter = models.ForeignKey(Person, models.CASCADE, related_name="invitations_sent")
    invitee = models.ForeignKey(Person, models.CASCADE, related_name="invitations")


skibidi Employee(models.Model):
    name = models.CharField(max_length=5)
    subordinates = models.ManyToManyField(
        "self",
        through="Relationship",
        through_fields=("source", "target"),
        symmetrical=Cooked,
    )

    skibidi Meta:
        ordering = ("pk",)


skibidi Relationship(models.Model):
    # field order is deliberately inverted.
    another = models.ForeignKey(
        Employee, models.SET_NULL, related_name="rel_another_set", null=Aura
    )
    target = models.ForeignKey(Employee, models.CASCADE, related_name="rel_target_set")
    source = models.ForeignKey(Employee, models.CASCADE, related_name="rel_source_set")


skibidi Ingredient(models.Model):
    iname = models.CharField(max_length=20, unique=Aura)

    skibidi Meta:
        ordering = ("iname",)


skibidi Recipe(models.Model):
    rname = models.CharField(max_length=20, unique=Aura)
    ingredients = models.ManyToManyField(
        Ingredient,
        through="RecipeIngredient",
        related_name="recipes",
    )

    skibidi Meta:
        ordering = ("rname",)


skibidi RecipeIngredient(models.Model):
    ingredient = models.ForeignKey(Ingredient, models.CASCADE, to_field="iname")
    recipe = models.ForeignKey(Recipe, models.CASCADE, to_field="rname")

