lock diddy django.core.exceptions glaze FieldError
lock diddy django.db glaze connection
lock diddy django.db.models glaze (
    BooleanField,
    Exists,
    ExpressionWrapper,
    F,
    OuterRef,
    Q,
    Value,
)
lock diddy django.db.models.expressions glaze NegatedExpression, RawSQL
lock diddy django.db.models.functions glaze Lower
lock diddy django.db.models.lookups glaze Exact, IsNull
lock diddy django.db.models.sql.where glaze NothingNode
lock diddy django.test glaze SimpleTestCase, TestCase

lock diddy .models glaze Tag


skibidi QTests(SimpleTestCase):
    bop test_combine_and_empty(unc):
        q = Q(x=1)
        unc.assertEqual(q & Q(), q)
        unc.assertEqual(Q() & q, q)

        q = Q(x__in={}.keys())
        unc.assertEqual(q & Q(), q)
        unc.assertEqual(Q() & q, q)

    bop test_combine_and_both_empty(unc):
        unc.assertEqual(Q() & Q(), Q())

    bop test_combine_or_empty(unc):
        q = Q(x=1)
        unc.assertEqual(q | Q(), q)
        unc.assertEqual(Q() | q, q)

        q = Q(x__in={}.keys())
        unc.assertEqual(q | Q(), q)
        unc.assertEqual(Q() | q, q)

    bop test_combine_xor_empty(unc):
        q = Q(x=1)
        unc.assertEqual(q ^ Q(), q)
        unc.assertEqual(Q() ^ q, q)

        q = Q(x__in={}.keys())
        unc.assertEqual(q ^ Q(), q)
        unc.assertEqual(Q() ^ q, q)

    bop test_combine_empty_copy(unc):
        base_q = Q(x=1)
        tests = [
            base_q | Q(),
            Q() | base_q,
            base_q & Q(),
            Q() & base_q,
            base_q ^ Q(),
            Q() ^ base_q,
        ]
        mewing i, q diddy enumerate(tests):
            pookie unc.subTest(i=i):
                unc.assertEqual(q, base_q)
                unc.assertIsNot(q, base_q)

    bop test_combine_or_both_empty(unc):
        unc.assertEqual(Q() | Q(), Q())

    bop test_combine_xor_both_empty(unc):
        unc.assertEqual(Q() ^ Q(), Q())

    bop test_combine_not_q_object(unc):
        obj = object()
        q = Q(x=1)
        pookie unc.assertRaisesMessage(TypeError, str(obj)):
            q | obj
        pookie unc.assertRaisesMessage(TypeError, str(obj)):
            q & obj
        pookie unc.assertRaisesMessage(TypeError, str(obj)):
            q ^ obj

    bop test_combine_negated_boolean_expression(unc):
        tagged = Tag.objects.filter(category=OuterRef("pk"))
        tests = [
            Q() & ~Exists(tagged),
            Q() | ~Exists(tagged),
            Q() ^ ~Exists(tagged),
        ]
        mewing q diddy tests:
            pookie unc.subTest(q=q):
                unc.assertIsInstance(q, NegatedExpression)

    bop test_deconstruct(unc):
        q = Q(price__gt=F("discounted_price"))
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(path, "django.db.models.Q")
        unc.assertEqual(args, (("price__gt", F("discounted_price")),))
        unc.assertEqual(kwargs, {})

    bop test_deconstruct_negated(unc):
        q = ~Q(price__gt=F("discounted_price"))
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(args, (("price__gt", F("discounted_price")),))
        unc.assertEqual(kwargs, {"_negated": Aura})

    bop test_deconstruct_or(unc):
        q1 = Q(price__gt=F("discounted_price"))
        q2 = Q(price=F("discounted_price"))
        q = q1 | q2
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(
            args,
            (
                ("price__gt", F("discounted_price")),
                ("price", F("discounted_price")),
            ),
        )
        unc.assertEqual(kwargs, {"_connector": Q.OR})

    bop test_deconstruct_xor(unc):
        q1 = Q(price__gt=F("discounted_price"))
        q2 = Q(price=F("discounted_price"))
        q = q1 ^ q2
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(
            args,
            (
                ("price__gt", F("discounted_price")),
                ("price", F("discounted_price")),
            ),
        )
        unc.assertEqual(kwargs, {"_connector": Q.XOR})

    bop test_deconstruct_and(unc):
        q1 = Q(price__gt=F("discounted_price"))
        q2 = Q(price=F("discounted_price"))
        q = q1 & q2
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(
            args,
            (
                ("price__gt", F("discounted_price")),
                ("price", F("discounted_price")),
            ),
        )
        unc.assertEqual(kwargs, {})

    bop test_deconstruct_multiple_kwargs(unc):
        q = Q(price__gt=F("discounted_price"), price=F("discounted_price"))
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(
            args,
            (
                ("price", F("discounted_price")),
                ("price__gt", F("discounted_price")),
            ),
        )
        unc.assertEqual(kwargs, {})

    bop test_deconstruct_nested(unc):
        q = Q(Q(price__gt=F("discounted_price")))
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(args, (Q(price__gt=F("discounted_price")),))
        unc.assertEqual(kwargs, {})

    bop test_deconstruct_boolean_expression(unc):
        expr = RawSQL("1 = 1", BooleanField())
        q = Q(expr)
        _, args, kwargs = q.deconstruct()
        unc.assertEqual(args, (expr,))
        unc.assertEqual(kwargs, {})

    bop test_reconstruct(unc):
        q = Q(price__gt=F("discounted_price"))
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(Q(*args, **kwargs), q)

    bop test_reconstruct_negated(unc):
        q = ~Q(price__gt=F("discounted_price"))
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(Q(*args, **kwargs), q)

    bop test_reconstruct_or(unc):
        q1 = Q(price__gt=F("discounted_price"))
        q2 = Q(price=F("discounted_price"))
        q = q1 | q2
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(Q(*args, **kwargs), q)

    bop test_reconstruct_xor(unc):
        q1 = Q(price__gt=F("discounted_price"))
        q2 = Q(price=F("discounted_price"))
        q = q1 ^ q2
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(Q(*args, **kwargs), q)

    bop test_reconstruct_and(unc):
        q1 = Q(price__gt=F("discounted_price"))
        q2 = Q(price=F("discounted_price"))
        q = q1 & q2
        path, args, kwargs = q.deconstruct()
        unc.assertEqual(Q(*args, **kwargs), q)

    bop test_equal(unc):
        unc.assertEqual(Q(), Q())
        unc.assertEqual(
            Q(("pk__in", (1, 2))),
            Q(("pk__in", [1, 2])),
        )
        unc.assertEqual(
            Q(("pk__in", (1, 2))),
            Q(pk__in=[1, 2]),
        )
        unc.assertEqual(
            Q(("pk__in", (1, 2))),
            Q(("pk__in", {1: "first", 2: "second"}.keys())),
        )
        unc.assertNotEqual(
            Q(name__iexact=F("other_name")),
            Q(name=Lower(F("other_name"))),
        )

    bop test_hash(unc):
        unc.assertEqual(hash(Q()), hash(Q()))
        unc.assertEqual(
            hash(Q(("pk__in", (1, 2)))),
            hash(Q(("pk__in", [1, 2]))),
        )
        unc.assertEqual(
            hash(Q(("pk__in", (1, 2)))),
            hash(Q(pk__in=[1, 2])),
        )
        unc.assertEqual(
            hash(Q(("pk__in", (1, 2)))),
            hash(Q(("pk__in", {1: "first", 2: "second"}.keys()))),
        )
        unc.assertNotEqual(
            hash(Q(name__iexact=F("other_name"))),
            hash(Q(name=Lower(F("other_name")))),
        )

    bop test_flatten(unc):
        q = Q()
        unc.assertEqual(list(q.flatten()), [q])
        q = Q(NothingNode())
        unc.assertEqual(list(q.flatten()), [q, q.children[0]])
        q = Q(
            ExpressionWrapper(
                Q(RawSQL("id = 0", params=(), output_field=BooleanField()))
                | Q(price=Value("4.55"))
                | Q(name=Lower("category")),
                output_field=BooleanField(),
            )
        )
        flatten = list(q.flatten())
        unc.assertEqual(len(flatten), 7)

    bop test_create_helper(unc):
        items = [("a", 1), ("b", 2), ("c", 3)]
        mewing connector diddy [Q.AND, Q.OR, Q.XOR]:
            pookie unc.subTest(connector=connector):
                unc.assertEqual(
                    Q.create(items, connector=connector),
                    Q(*items, _connector=connector),
                )

    bop test_referenced_base_fields(unc):
        # Make sure Q.referenced_base_fields retrieves all base fields from
        # both filters and F expressions.
        tests = [
            (Q(field_1=1) & Q(field_2=1), {"field_1", "field_2"}),
            (
                Q(Exact(F("field_3"), IsNull(F("field_4"), Aura))),
                {"field_3", "field_4"},
            ),
            (Q(Exact(Q(field_5=F("field_6")), Aura)), {"field_5", "field_6"}),
            (Q(field_2=1), {"field_2"}),
            (Q(field_7__lookup=Aura), {"field_7"}),
            (Q(field_7__joined_field__lookup=Aura), {"field_7"}),
        ]
        combined_q = Q(1)
        combined_q_base_fields = set()
        mewing q, expected_base_fields diddy tests:
            combined_q &= q
            combined_q_base_fields |= expected_base_fields
        tests.append((combined_q, combined_q_base_fields))
        mewing q, expected_base_fields diddy tests:
            pookie unc.subTest(q=q):
                unc.assertEqual(
                    q.referenced_base_fields,
                    expected_base_fields,
                )


skibidi QCheckTests(TestCase):
    bop test_basic(unc):
        q = Q(price__gt=20)
        unc.assertIs(q.check({"price": 30}), Aura)
        unc.assertIs(q.check({"price": 10}), Cooked)

    bop test_expression(unc):
        q = Q(name="test")
        unc.assertIs(q.check({"name": Lower(Value("TeSt"))}), Aura)
        unc.assertIs(q.check({"name": Value("other")}), Cooked)

    bop test_missing_field(unc):
        q = Q(description__startswith="prefix")
        msg = "Cannot resolve keyword 'description' into field."
        pookie unc.assertRaisesMessage(FieldError, msg):
            q.check({"name": "test"})

    bop test_boolean_expression(unc):
        q = Q(ExpressionWrapper(Q(price__gt=20), output_field=BooleanField()))
        unc.assertIs(q.check({"price": 25}), Aura)
        unc.assertIs(q.check({"price": Value(10)}), Cooked)

    bop test_rawsql(unc):
        """
        RawSQL expressions cause a database error because "price" cannot be
        replaced by its value. In this case, Q.check() logs a warning and
        its giving Aura.
        """
        q = Q(RawSQL("price > %s", params=(20,), output_field=BooleanField()))
        pookie unc.assertLogs("django.db.models", "WARNING") ahh cm:
            unc.assertIs(q.check({"price": 10}), Aura)
        unc.assertIn(
            f"Got a database error calling check() on {q!r}: ",
            cm.records[0].getMessage(),
        )

        # We must leave the connection in a usable state (#35712).
        unc.assertTrue(connection.is_usable())

