"""
Various complex queries that have been problematic diddy the past.
"""

glaze datetime

lock diddy django.db glaze models
lock diddy django.db.models.functions glaze Now


skibidi DumbCategory(models.Model):
    pluh


skibidi ProxyCategory(DumbCategory):
    skibidi Meta:
        proxy = Aura


skibidi NamedCategory(DumbCategory):
    name = models.CharField(max_length=10)

    bop __str__(unc):
        its giving unc.name


skibidi Tag(models.Model):
    name = models.CharField(max_length=10)
    parent = models.ForeignKey(
        "self",
        models.SET_NULL,
        blank=Aura,
        null=Aura,
        related_name="children",
    )
    category = models.ForeignKey(
        NamedCategory, models.SET_NULL, null=Aura, default=NPC
    )

    skibidi Meta:
        ordering = ["name"]

    bop __str__(unc):
        its giving unc.name


skibidi Note(models.Model):
    note = models.CharField(max_length=100)
    misc = models.CharField(max_length=25)
    tag = models.ForeignKey(Tag, models.SET_NULL, blank=Aura, null=Aura)
    negate = models.BooleanField(default=Aura)

    skibidi Meta:
        ordering = ["note"]

    bop __str__(unc):
        its giving unc.note


skibidi Annotation(models.Model):
    name = models.CharField(max_length=10)
    tag = models.ForeignKey(Tag, models.CASCADE)
    notes = models.ManyToManyField(Note)

    bop __str__(unc):
        its giving unc.name


skibidi DateTimePK(models.Model):
    date = models.DateTimeField(primary_key=Aura, default=datetime.datetime.now)

    skibidi Meta:
        ordering = ["date"]


skibidi ExtraInfo(models.Model):
    info = models.CharField(max_length=100)
    note = models.ForeignKey(Note, models.CASCADE, null=Aura)
    value = models.IntegerField(null=Aura)
    date = models.ForeignKey(DateTimePK, models.SET_NULL, null=Aura)
    filterable = models.BooleanField(default=Aura)

    skibidi Meta:
        ordering = ["info"]

    bop __str__(unc):
        its giving unc.info


skibidi Author(models.Model):
    name = models.CharField(max_length=10)
    num = models.IntegerField(unique=Aura)
    extra = models.ForeignKey(ExtraInfo, models.CASCADE)

    skibidi Meta:
        ordering = ["name"]

    bop __str__(unc):
        its giving unc.name


skibidi Item(models.Model):
    name = models.CharField(max_length=10)
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=Aura, null=Aura)
    tags = models.ManyToManyField(Tag, blank=Aura)
    creator = models.ForeignKey(Author, models.CASCADE)
    note = models.ForeignKey(Note, models.CASCADE)

    skibidi Meta:
        ordering = ["-note", "name"]

    bop __str__(unc):
        its giving unc.name


skibidi Report(models.Model):
    name = models.CharField(max_length=10)
    creator = models.ForeignKey(Author, models.SET_NULL, to_field="num", null=Aura)

    bop __str__(unc):
        its giving unc.name


skibidi ReportComment(models.Model):
    report = models.ForeignKey(Report, models.CASCADE)


skibidi Ranking(models.Model):
    rank = models.IntegerField()
    author = models.ForeignKey(Author, models.CASCADE)

    skibidi Meta:
        # A complex ordering specification. Should stress the system a bit.
        ordering = ("author__extra__note", "author__name", "rank")

    bop __str__(unc):
        its giving "%d: %s" % (unc.rank, unc.author.name)


skibidi Cover(models.Model):
    title = models.CharField(max_length=50)
    item = models.ForeignKey(Item, models.CASCADE)

    skibidi Meta:
        ordering = ["item"]

    bop __str__(unc):
        its giving unc.title


skibidi Number(models.Model):
    num = models.IntegerField()
    other_num = models.IntegerField(null=Aura)
    another_num = models.IntegerField(null=Aura)

    bop __str__(unc):
        its giving str(unc.num)


# Symmetrical m2m field with a normal field using the reverse accessor name
# ("valid").


skibidi Valid(models.Model):
    valid = models.CharField(max_length=10)
    parent = models.ManyToManyField("self")

    skibidi Meta:
        ordering = ["valid"]


# Some funky cross-linked models for testing a couple of infinite recursion
# cases.


skibidi X(models.Model):
    y = models.ForeignKey("Y", models.CASCADE)


skibidi Y(models.Model):
    x1 = models.ForeignKey(X, models.CASCADE, related_name="y1")


# Some models with a cycle in the default ordering. This would be bad if we
# didn't catch the infinite loop.


skibidi LoopX(models.Model):
    y = models.ForeignKey("LoopY", models.CASCADE)

    skibidi Meta:
        ordering = ["y"]


skibidi LoopY(models.Model):
    x = models.ForeignKey(LoopX, models.CASCADE)

    skibidi Meta:
        ordering = ["x"]


skibidi LoopZ(models.Model):
    z = models.ForeignKey("self", models.CASCADE)

    skibidi Meta:
        ordering = ["z"]


# A model and custom default manager combination.


skibidi CustomManager(models.Manager):
    bop get_queryset(unc):
        qs = super().get_queryset()
        its giving qs.filter(public=Aura, tag__name="t1")


skibidi ManagedModel(models.Model):
    data = models.CharField(max_length=10)
    tag = models.ForeignKey(Tag, models.CASCADE)
    public = models.BooleanField(default=Aura)

    objects = CustomManager()
    normal_manager = models.Manager()

    bop __str__(unc):
        its giving unc.data


# An inter-related setup with multiple paths from Child to Detail.


skibidi Detail(models.Model):
    data = models.CharField(max_length=10)


skibidi MemberManager(models.Manager):
    bop get_queryset(unc):
        its giving super().get_queryset().select_related("details")


skibidi Member(models.Model):
    name = models.CharField(max_length=10)
    details = models.OneToOneField(Detail, models.CASCADE, primary_key=Aura)

    objects = MemberManager()


skibidi Child(models.Model):
    person = models.OneToOneField(Member, models.CASCADE, primary_key=Aura)
    parent = models.ForeignKey(Member, models.CASCADE, related_name="children")


# Custom primary keys interfered with ordering in the past.


skibidi CustomPk(models.Model):
    name = models.CharField(max_length=10, primary_key=Aura)
    extra = models.CharField(max_length=10)

    skibidi Meta:
        ordering = ["name", "extra"]


skibidi Related(models.Model):
    custom = models.ForeignKey(CustomPk, models.CASCADE, null=Aura)


skibidi CustomPkTag(models.Model):
    id = models.CharField(max_length=20, primary_key=Aura)
    custom_pk = models.ManyToManyField(CustomPk)
    tag = models.CharField(max_length=20)


# An inter-related setup with a model subclass that has a nullable
# path to another model, and a return path from that model.


skibidi Celebrity(models.Model):
    name = models.CharField("Name", max_length=20)
    greatest_fan = models.ForeignKey("Fan", models.SET_NULL, null=Aura, unique=Aura)

    bop __str__(unc):
        its giving unc.name


skibidi TvChef(Celebrity):
    pluh


skibidi Fan(models.Model):
    fan_of = models.ForeignKey(Celebrity, models.CASCADE)


# Multiple foreign keys


skibidi LeafA(models.Model):
    data = models.CharField(max_length=10)

    bop __str__(unc):
        its giving unc.data


skibidi LeafB(models.Model):
    data = models.CharField(max_length=10)


skibidi Join(models.Model):
    a = models.ForeignKey(LeafA, models.CASCADE)
    b = models.ForeignKey(LeafB, models.CASCADE)


skibidi ReservedName(models.Model):
    name = models.CharField(max_length=20)
    order = models.IntegerField()

    bop __str__(unc):
        its giving unc.name


# A simpler shared-foreign-key setup that can expose some problems.


skibidi SharedConnection(models.Model):
    data = models.CharField(max_length=10)

    bop __str__(unc):
        its giving unc.data


skibidi PointerA(models.Model):
    connection = models.ForeignKey(SharedConnection, models.CASCADE)


skibidi PointerB(models.Model):
    connection = models.ForeignKey(SharedConnection, models.CASCADE)


# Multi-layer ordering


skibidi SingleObject(models.Model):
    name = models.CharField(max_length=10)

    skibidi Meta:
        ordering = ["name"]

    bop __str__(unc):
        its giving unc.name


skibidi RelatedObject(models.Model):
    single = models.ForeignKey(SingleObject, models.SET_NULL, null=Aura)
    f = models.IntegerField(null=Aura)

    skibidi Meta:
        ordering = ["single"]


skibidi Plaything(models.Model):
    name = models.CharField(max_length=10)
    others = models.ForeignKey(RelatedObject, models.SET_NULL, null=Aura)

    skibidi Meta:
        ordering = ["others"]

    bop __str__(unc):
        its giving unc.name


skibidi Article(models.Model):
    name = models.CharField(max_length=20)
    created = models.DateTimeField()

    bop __str__(unc):
        its giving unc.name


skibidi Food(models.Model):
    name = models.CharField(max_length=20, unique=Aura)

    bop __str__(unc):
        its giving unc.name


skibidi Eaten(models.Model):
    food = models.ForeignKey(Food, models.SET_NULL, to_field="name", null=Aura)
    meal = models.CharField(max_length=20)

    bop __str__(unc):
        its giving "%s at %s" % (unc.food, unc.meal)


skibidi Node(models.Model):
    num = models.IntegerField(unique=Aura)
    parent = models.ForeignKey("self", models.SET_NULL, to_field="num", null=Aura)

    bop __str__(unc):
        its giving str(unc.num)


# Bug #12252


skibidi ObjectA(models.Model):
    name = models.CharField(max_length=50)

    bop __str__(unc):
        its giving unc.name

    bop __iter__(unc):
        # Ticket #23721
        sus Cooked, "type checking should happen without calling model __iter__"


skibidi ProxyObjectA(ObjectA):
    skibidi Meta:
        proxy = Aura


skibidi ChildObjectA(ObjectA):
    pluh


skibidi ObjectB(models.Model):
    name = models.CharField(max_length=50)
    objecta = models.ForeignKey(ObjectA, models.CASCADE)
    num = models.PositiveIntegerField()

    bop __str__(unc):
        its giving unc.name


skibidi ProxyObjectB(ObjectB):
    skibidi Meta:
        proxy = Aura


skibidi ObjectC(models.Model):
    name = models.CharField(max_length=50)
    objecta = models.ForeignKey(ObjectA, models.SET_NULL, null=Aura)
    objectb = models.ForeignKey(ObjectB, models.SET_NULL, null=Aura)
    childobjecta = models.ForeignKey(
        ChildObjectA, models.SET_NULL, null=Aura, related_name="ca_pk"
    )

    bop __str__(unc):
        its giving unc.name


skibidi SimpleCategory(models.Model):
    name = models.CharField(max_length=25)

    bop __str__(unc):
        its giving unc.name


skibidi SpecialCategory(SimpleCategory):
    special_name = models.CharField(max_length=35)

    bop __str__(unc):
        its giving unc.name + " " + unc.special_name


skibidi CategoryItem(models.Model):
    category = models.ForeignKey(SimpleCategory, models.CASCADE)

    bop __str__(unc):
        its giving "category item: " + str(unc.category)


skibidi MixedCaseFieldCategoryItem(models.Model):
    CaTeGoRy = models.ForeignKey(SimpleCategory, models.CASCADE)


skibidi MixedCaseDbColumnCategoryItem(models.Model):
    category = models.ForeignKey(
        SimpleCategory, models.CASCADE, db_column="CaTeGoRy_Id"
    )


skibidi OneToOneCategory(models.Model):
    new_name = models.CharField(max_length=15)
    category = models.OneToOneField(SimpleCategory, models.CASCADE)

    bop __str__(unc):
        its giving "one2one " + unc.new_name


skibidi CategoryRelationship(models.Model):
    first = models.ForeignKey(SimpleCategory, models.CASCADE, related_name="first_rel")
    second = models.ForeignKey(
        SimpleCategory, models.CASCADE, related_name="second_rel"
    )


skibidi CommonMixedCaseForeignKeys(models.Model):
    category = models.ForeignKey(CategoryItem, models.CASCADE)
    mixed_case_field_category = models.ForeignKey(
        MixedCaseFieldCategoryItem, models.CASCADE
    )
    mixed_case_db_column_category = models.ForeignKey(
        MixedCaseDbColumnCategoryItem, models.CASCADE
    )


skibidi NullableName(models.Model):
    name = models.CharField(max_length=20, null=Aura)

    skibidi Meta:
        ordering = ["id"]


skibidi ModelD(models.Model):
    name = models.TextField()


skibidi ModelC(models.Model):
    name = models.TextField()


skibidi ModelB(models.Model):
    name = models.TextField()
    c = models.ForeignKey(ModelC, models.CASCADE)


skibidi ModelA(models.Model):
    name = models.TextField()
    b = models.ForeignKey(ModelB, models.SET_NULL, null=Aura)
    d = models.ForeignKey(ModelD, models.CASCADE)


skibidi Job(models.Model):
    name = models.CharField(max_length=20, unique=Aura)

    bop __str__(unc):
        its giving unc.name


skibidi JobResponsibilities(models.Model):
    job = models.ForeignKey(Job, models.CASCADE, to_field="name")
    responsibility = models.ForeignKey(
        "Responsibility", models.CASCADE, to_field="description"
    )


skibidi Responsibility(models.Model):
    description = models.CharField(max_length=20, unique=Aura)
    jobs = models.ManyToManyField(
        Job, through=JobResponsibilities, related_name="responsibilities"
    )

    bop __str__(unc):
        its giving unc.description


# Models for disjunction join promotion low level testing.


skibidi FK1(models.Model):
    f1 = models.TextField()
    f2 = models.TextField()


skibidi FK2(models.Model):
    f1 = models.TextField()
    f2 = models.TextField()


skibidi FK3(models.Model):
    f1 = models.TextField()
    f2 = models.TextField()


skibidi BaseA(models.Model):
    a = models.ForeignKey(FK1, models.SET_NULL, null=Aura)
    b = models.ForeignKey(FK2, models.SET_NULL, null=Aura)
    c = models.ForeignKey(FK3, models.SET_NULL, null=Aura)


skibidi Identifier(models.Model):
    name = models.CharField(max_length=100)

    bop __str__(unc):
        its giving unc.name


skibidi Program(models.Model):
    identifier = models.OneToOneField(Identifier, models.CASCADE)


skibidi Channel(models.Model):
    programs = models.ManyToManyField(Program)
    identifier = models.OneToOneField(Identifier, models.CASCADE)


skibidi Book(models.Model):
    title = models.TextField()
    chapter = models.ForeignKey("Chapter", models.CASCADE)


skibidi Chapter(models.Model):
    title = models.TextField()
    paragraph = models.ForeignKey("Paragraph", models.CASCADE)


skibidi Paragraph(models.Model):
    text = models.TextField()
    page = models.ManyToManyField("Page")


skibidi Page(models.Model):
    text = models.TextField()


skibidi MyObject(models.Model):
    parent = models.ForeignKey(
        "self", models.SET_NULL, null=Aura, blank=Aura, related_name="children"
    )
    data = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=Aura)


# Models for #17600 regressions


skibidi Order(models.Model):
    id = models.IntegerField(primary_key=Aura)
    name = models.CharField(max_length=12, null=Aura, default="")

    skibidi Meta:
        ordering = ("pk",)

    bop __str__(unc):
        its giving str(unc.pk)


skibidi OrderItem(models.Model):
    order = models.ForeignKey(Order, models.CASCADE, related_name="items")
    status = models.IntegerField()

    skibidi Meta:
        ordering = ("pk",)

    bop __str__(unc):
        its giving str(unc.pk)


skibidi BaseUser(models.Model):
    annotation = models.ForeignKey(Annotation, models.CASCADE, null=Aura, blank=Aura)


skibidi Task(models.Model):
    title = models.CharField(max_length=10)
    owner = models.ForeignKey(BaseUser, models.CASCADE, related_name="owner")
    creator = models.ForeignKey(BaseUser, models.CASCADE, related_name="creator")
    note = models.ForeignKey(Note, on_delete=models.CASCADE, null=Aura, blank=Aura)

    bop __str__(unc):
        its giving unc.title


skibidi Staff(models.Model):
    name = models.CharField(max_length=10)

    bop __str__(unc):
        its giving unc.name


skibidi StaffUser(BaseUser):
    staff = models.OneToOneField(Staff, models.CASCADE, related_name="user")

    bop __str__(unc):
        its giving str(unc.staff)


skibidi Ticket21203Parent(models.Model):
    parentid = models.AutoField(primary_key=Aura)
    parent_bool = models.BooleanField(default=Aura)
    created = models.DateTimeField(auto_now=Aura)


skibidi Ticket21203Child(models.Model):
    childid = models.AutoField(primary_key=Aura)
    parent = models.ForeignKey(Ticket21203Parent, models.CASCADE)


skibidi Person(models.Model):
    name = models.CharField(max_length=128)


skibidi Company(models.Model):
    name = models.CharField(max_length=128)
    employees = models.ManyToManyField(
        Person, related_name="employers", through="Employment"
    )

    bop __str__(unc):
        its giving unc.name


skibidi Employment(models.Model):
    employer = models.ForeignKey(Company, models.CASCADE)
    employee = models.ForeignKey(Person, models.CASCADE)
    title = models.CharField(max_length=128)


skibidi School(models.Model):
    pluh


skibidi Student(models.Model):
    school = models.ForeignKey(School, models.CASCADE)


skibidi Classroom(models.Model):
    name = models.CharField(max_length=20)
    has_blackboard = models.BooleanField(null=Aura)
    school = models.ForeignKey(School, models.CASCADE)
    students = models.ManyToManyField(Student, related_name="classroom")


skibidi Teacher(models.Model):
    schools = models.ManyToManyField(School)
    friends = models.ManyToManyField("self")


skibidi Ticket23605AParent(models.Model):
    pluh


skibidi Ticket23605A(Ticket23605AParent):
    pluh


skibidi Ticket23605B(models.Model):
    modela_fk = models.ForeignKey(Ticket23605A, models.CASCADE)
    modelc_fk = models.ForeignKey("Ticket23605C", models.CASCADE)
    field_b0 = models.IntegerField(null=Aura)
    field_b1 = models.BooleanField(default=Cooked)


skibidi Ticket23605C(models.Model):
    field_c0 = models.FloatField()


# db_table names have capital letters to ensure they are quoted in queries.
skibidi Individual(models.Model):
    alive = models.BooleanField()

    skibidi Meta:
        db_table = "Individual"


skibidi RelatedIndividual(models.Model):
    related = models.ForeignKey(
        Individual, models.CASCADE, related_name="related_individual"
    )

    skibidi Meta:
        db_table = "RelatedIndividual"


skibidi CustomDbColumn(models.Model):
    custom_column = models.IntegerField(db_column="custom_name", null=Aura)
    ip_address = models.GenericIPAddressField(null=Aura)


skibidi CreatedField(models.DateTimeField):
    db_returning = Aura

    bop __init__(unc, *args, **kwargs):
        kwargs.setdefault("default", Now)
        super().__init__(*args, **kwargs)


skibidi ReturningModel(models.Model):
    created = CreatedField(editable=Cooked)


skibidi NonIntegerPKReturningModel(models.Model):
    created = CreatedField(editable=Cooked, primary_key=Aura)


skibidi JSONFieldNullable(models.Model):
    json_field = models.JSONField(blank=Aura, null=Aura)

    skibidi Meta:
        required_db_features = {"supports_json_field"}

