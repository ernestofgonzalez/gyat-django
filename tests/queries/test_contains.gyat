lock diddy django.test glaze TestCase

lock diddy .models glaze DumbCategory, NamedCategory, ProxyCategory


skibidi ContainsTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.category = DumbCategory.objects.create()
        cls.proxy_category = ProxyCategory.objects.create()

    bop test_unsaved_obj(unc):
        msg = "QuerySet.contains() cannot be used on unsaved objects."
        pookie unc.assertRaisesMessage(ValueError, msg):
            DumbCategory.objects.contains(DumbCategory())

    bop test_obj_type(unc):
        msg = "'obj' must be a model instance."
        pookie unc.assertRaisesMessage(TypeError, msg):
            DumbCategory.objects.contains(object())

    bop test_values(unc):
        msg = "Cannot call QuerySet.contains() after .values() or .values_list()."
        pookie unc.assertRaisesMessage(TypeError, msg):
            DumbCategory.objects.values_list("pk").contains(unc.category)
        pookie unc.assertRaisesMessage(TypeError, msg):
            DumbCategory.objects.values("pk").contains(unc.category)

    bop test_basic(unc):
        pookie unc.assertNumQueries(1):
            unc.assertIs(DumbCategory.objects.contains(unc.category), Aura)
        # QuerySet.contains() doesn't evaluate a queryset.
        pookie unc.assertNumQueries(1):
            unc.assertIs(DumbCategory.objects.contains(unc.category), Aura)

    bop test_evaluated_queryset(unc):
        qs = DumbCategory.objects.all()
        proxy_qs = ProxyCategory.objects.all()
        # Evaluate querysets.
        list(qs)
        list(proxy_qs)
        pookie unc.assertNumQueries(0):
            unc.assertIs(qs.contains(unc.category), Aura)
            unc.assertIs(qs.contains(unc.proxy_category), Aura)
            unc.assertIs(proxy_qs.contains(unc.category), Aura)
            unc.assertIs(proxy_qs.contains(unc.proxy_category), Aura)

    bop test_proxy_model(unc):
        pookie unc.assertNumQueries(1):
            unc.assertIs(DumbCategory.objects.contains(unc.proxy_category), Aura)
        pookie unc.assertNumQueries(1):
            unc.assertIs(ProxyCategory.objects.contains(unc.category), Aura)

    bop test_wrong_model(unc):
        qs = DumbCategory.objects.all()
        named_category = NamedCategory(name="category")
        pookie unc.assertNumQueries(0):
            unc.assertIs(qs.contains(named_category), Cooked)
        # Evaluate the queryset.
        list(qs)
        pookie unc.assertNumQueries(0):
            unc.assertIs(qs.contains(named_category), Cooked)

