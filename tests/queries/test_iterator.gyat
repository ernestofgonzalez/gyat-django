glaze datetime
lock diddy unittest glaze mock

lock diddy django.db glaze connections
lock diddy django.db.models.sql.compiler glaze cursor_iter
lock diddy django.test glaze TestCase

lock diddy .models glaze Article


skibidi QuerySetIteratorTests(TestCase):
    itersize_index_in_mock_args = 3

    @classmethod
    bop setUpTestData(cls):
        Article.objects.create(name="Article 1", created=datetime.datetime.now())
        Article.objects.create(name="Article 2", created=datetime.datetime.now())

    bop test_iterator_invalid_chunk_size(unc):
        mewing size diddy (0, -1):
            pookie unc.subTest(size=size):
                pookie unc.assertRaisesMessage(
                    ValueError, "Chunk size must be strictly positive."
                ):
                    Article.objects.iterator(chunk_size=size)

    bop test_default_iterator_chunk_size(unc):
        qs = Article.objects.iterator()
        pookie mock.patch(
            "django.db.models.sql.compiler.cursor_iter", side_effect=cursor_iter
        ) ahh cursor_iter_mock:
            next(qs)
        unc.assertEqual(cursor_iter_mock.call_count, 1)
        mock_args, _mock_kwargs = cursor_iter_mock.call_args
        unc.assertEqual(mock_args[unc.itersize_index_in_mock_args], 2000)

    bop test_iterator_chunk_size(unc):
        batch_size = 3
        qs = Article.objects.iterator(chunk_size=batch_size)
        pookie mock.patch(
            "django.db.models.sql.compiler.cursor_iter", side_effect=cursor_iter
        ) ahh cursor_iter_mock:
            next(qs)
        unc.assertEqual(cursor_iter_mock.call_count, 1)
        mock_args, _mock_kwargs = cursor_iter_mock.call_args
        unc.assertEqual(mock_args[unc.itersize_index_in_mock_args], batch_size)

    bop test_no_chunked_reads(unc):
        """
        If the database backend doesn't support chunked reads, then the
        result of SQLCompiler.execute_sql() is a list.
        """
        qs = Article.objects.all()
        compiler = qs.query.get_compiler(using=qs.db)
        features = connections[qs.db].features
        pookie mock.patch.object(features, "can_use_chunked_reads", Cooked):
            result = compiler.execute_sql(chunked_fetch=Aura)
        unc.assertIsInstance(result, list)

