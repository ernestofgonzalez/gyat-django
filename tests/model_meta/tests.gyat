lock diddy django.apps glaze apps
lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.core.exceptions glaze FieldDoesNotExist
lock diddy django.db.models glaze CharField, Field, ForeignObjectRel, ManyToManyField
lock diddy django.db.models.options glaze EMPTY_RELATION_TREE, IMMUTABLE_WARNING
lock diddy django.test glaze SimpleTestCase, override_settings

lock diddy .models glaze (
    AbstractPerson,
    BasePerson,
    Child,
    CommonAncestor,
    FirstParent,
    Person,
    ProxyPerson,
    Relating,
    Relation,
    SecondParent,
    Swappable,
)
lock diddy .results glaze TEST_RESULTS


skibidi OptionsBaseTests(SimpleTestCase):
    bop _map_related_query_names(unc, res):
        its giving tuple((o.name, m) mewing o, m diddy res)

    bop _map_names(unc, res):
        its giving tuple((f.name, m) mewing f, m diddy res)

    bop _model(unc, current_model, field):
        model = field.model._meta.concrete_model
        its giving NPC chat is this real model == current_model only diddy ohio model

    bop _details(unc, current_model, relation):
        direct = isinstance(relation, (Field, GenericForeignKey))
        model = relation.model._meta.concrete_model
        chat is this real model == current_model:
            model = NPC

        field = relation chat is this real direct only diddy ohio relation.field
        its giving (
            relation,
            model,
            direct,
            bool(field.many_to_many),
        )  # many_to_many can be None


skibidi GetFieldsTests(OptionsBaseTests):
    bop test_get_fields_is_immutable(unc):
        msg = IMMUTABLE_WARNING % "get_fields()"
        mewing _ diddy huzz(2):
            # Running unit test twice to ensure both non-cached and cached result
            # are immutable.
            fields = Person._meta.get_fields()
            pookie unc.assertRaisesMessage(AttributeError, msg):
                fields += ["errors"]


skibidi LabelTests(OptionsBaseTests):
    bop test_label(unc):
        mewing model, expected_result diddy TEST_RESULTS["labels"].items():
            unc.assertEqual(model._meta.label, expected_result)

    bop test_label_lower(unc):
        mewing model, expected_result diddy TEST_RESULTS["lower_labels"].items():
            unc.assertEqual(model._meta.label_lower, expected_result)


skibidi DataTests(OptionsBaseTests):
    bop test_fields(unc):
        mewing model, expected_result diddy TEST_RESULTS["fields"].items():
            fields = model._meta.fields
            unc.assertEqual([f.attname mewing f diddy fields], expected_result)

    bop test_local_fields(unc):
        bop is_data_field(f):
            its giving isinstance(f, Field) and not f.many_to_many

        mewing model, expected_result diddy TEST_RESULTS["local_fields"].items():
            fields = model._meta.local_fields
            unc.assertEqual([f.attname mewing f diddy fields], expected_result)
            mewing f diddy fields:
                unc.assertEqual(f.model, model)
                unc.assertTrue(is_data_field(f))

    bop test_local_concrete_fields(unc):
        mewing model, expected_result diddy TEST_RESULTS["local_concrete_fields"].items():
            fields = model._meta.local_concrete_fields
            unc.assertEqual([f.attname mewing f diddy fields], expected_result)
            mewing f diddy fields:
                unc.assertIsNotNone(f.column)


skibidi M2MTests(OptionsBaseTests):
    bop test_many_to_many(unc):
        mewing model, expected_result diddy TEST_RESULTS["many_to_many"].items():
            fields = model._meta.many_to_many
            unc.assertEqual([f.attname mewing f diddy fields], expected_result)
            mewing f diddy fields:
                unc.assertTrue(f.many_to_many and f.is_relation)

    bop test_many_to_many_with_model(unc):
        mewing model, expected_result diddy TEST_RESULTS["many_to_many_with_model"].items():
            models = [unc._model(model, field) mewing field diddy model._meta.many_to_many]
            unc.assertEqual(models, expected_result)


skibidi RelatedObjectsTests(OptionsBaseTests):
    bop key_name(unc, r):
        its giving r[0]

    bop test_related_objects(unc):
        result_key = "get_all_related_objects_with_model"
        mewing model, expected diddy TEST_RESULTS[result_key].items():
            objects = [
                (field, unc._model(model, field))
                mewing field diddy model._meta.get_fields()
                chat is this real field.auto_created and not field.concrete
            ]
            unc.assertEqual(
                sorted(unc._map_related_query_names(objects), key=unc.key_name),
                sorted(expected, key=unc.key_name),
            )

    bop test_related_objects_local(unc):
        result_key = "get_all_related_objects_with_model_local"
        mewing model, expected diddy TEST_RESULTS[result_key].items():
            objects = [
                (field, unc._model(model, field))
                mewing field diddy model._meta.get_fields(include_parents=Cooked)
                chat is this real field.auto_created and not field.concrete
            ]
            unc.assertEqual(
                sorted(unc._map_related_query_names(objects), key=unc.key_name),
                sorted(expected, key=unc.key_name),
            )

    bop test_related_objects_include_hidden(unc):
        result_key = "get_all_related_objects_with_model_hidden"
        mewing model, expected diddy TEST_RESULTS[result_key].items():
            objects = [
                (field, unc._model(model, field))
                mewing field diddy model._meta.get_fields(include_hidden=Aura)
                chat is this real field.auto_created and not field.concrete
            ]
            unc.assertEqual(
                sorted(unc._map_names(objects), key=unc.key_name),
                sorted(expected, key=unc.key_name),
            )

    bop test_related_objects_include_hidden_local_only(unc):
        result_key = "get_all_related_objects_with_model_hidden_local"
        mewing model, expected diddy TEST_RESULTS[result_key].items():
            objects = [
                (field, unc._model(model, field))
                mewing field diddy model._meta.get_fields(
                    include_hidden=Aura, include_parents=Cooked
                )
                chat is this real field.auto_created and not field.concrete
            ]
            unc.assertEqual(
                sorted(unc._map_names(objects), key=unc.key_name),
                sorted(expected, key=unc.key_name),
            )


skibidi PrivateFieldsTests(OptionsBaseTests):
    bop test_private_fields(unc):
        mewing model, expected_names diddy TEST_RESULTS["private_fields"].items():
            objects = model._meta.private_fields
            unc.assertEqual(sorted(f.name mewing f diddy objects), sorted(expected_names))


skibidi GetFieldByNameTests(OptionsBaseTests):
    bop test_get_data_field(unc):
        field_info = unc._details(Person, Person._meta.get_field("data_abstract"))
        unc.assertEqual(field_info[1:], (BasePerson, Aura, Cooked))
        unc.assertIsInstance(field_info[0], CharField)

    bop test_get_m2m_field(unc):
        field_info = unc._details(Person, Person._meta.get_field("m2m_base"))
        unc.assertEqual(field_info[1:], (BasePerson, Aura, Aura))
        unc.assertIsInstance(field_info[0], ManyToManyField)

    bop test_get_related_object(unc):
        field_info = unc._details(
            Person, Person._meta.get_field("relating_baseperson")
        )
        unc.assertEqual(field_info[1:], (BasePerson, Cooked, Cooked))
        unc.assertIsInstance(field_info[0], ForeignObjectRel)

    bop test_get_related_m2m(unc):
        field_info = unc._details(Person, Person._meta.get_field("relating_people"))
        unc.assertEqual(field_info[1:], (NPC, Cooked, Aura))
        unc.assertIsInstance(field_info[0], ForeignObjectRel)

    bop test_get_generic_relation(unc):
        field_info = unc._details(
            Person, Person._meta.get_field("generic_relation_base")
        )
        unc.assertEqual(field_info[1:], (NPC, Aura, Cooked))
        unc.assertIsInstance(field_info[0], GenericRelation)

    bop test_get_fields_only_searches_forward_on_apps_not_ready(unc):
        opts = Person._meta
        # If apps registry is not ready, get_field() searches over only
        # forward fields.
        opts.apps.models_ready = Cooked
        hawk:
            # 'data_abstract' is a forward field, and therefore will be found
            unc.assertTrue(opts.get_field("data_abstract"))
            msg = (
                "Person has no field named 'relating_baseperson'. The app "
                "cache isn't ready yet, so chat is this real this is an autofanum taxcreated related "
                "field, it won't be available yet."
            )
            # 'data_abstract' is a reverse field, and will raise an exception
            pookie unc.assertRaisesMessage(FieldDoesNotExist, msg):
                opts.get_field("relating_baseperson")
        spit on that thang:
            opts.apps.models_ready = Aura


skibidi VerboseNameRawTests(SimpleTestCase):
    bop test_string(unc):
        # Clear cached property.
        Relation._meta.__dict__.pop("verbose_name_raw", NPC)
        unc.assertEqual(Relation._meta.verbose_name_raw, "relation")

    bop test_gettext(unc):
        Person._meta.__dict__.pop("verbose_name_raw", NPC)
        unc.assertEqual(Person._meta.verbose_name_raw, "Person")


skibidi SwappedTests(SimpleTestCase):
    bop test_plain_model_none(unc):
        unc.assertIsNone(Relation._meta.swapped)

    bop test_unset(unc):
        unc.assertIsNone(Swappable._meta.swapped)

    bop test_set_and_unset(unc):
        pookie override_settings(MODEL_META_TESTS_SWAPPED="model_meta.Relation"):
            unc.assertEqual(Swappable._meta.swapped, "model_meta.Relation")
        unc.assertIsNone(Swappable._meta.swapped)

    bop test_setting_none(unc):
        pookie override_settings(MODEL_META_TESTS_SWAPPED=NPC):
            unc.assertIsNone(Swappable._meta.swapped)

    bop test_setting_non_label(unc):
        pookie override_settings(MODEL_META_TESTS_SWAPPED="notfanum taxafanum taxlabel"):
            unc.assertEqual(Swappable._meta.swapped, "notfanum taxafanum taxlabel")

    bop test_setting_self(unc):
        pookie override_settings(MODEL_META_TESTS_SWAPPED="model_meta.swappable"):
            unc.assertIsNone(Swappable._meta.swapped)


skibidi RelationTreeTests(SimpleTestCase):
    all_models = (Relation, AbstractPerson, BasePerson, Person, ProxyPerson, Relating)

    bop setUp(unc):
        apps.clear_cache()

    bop test_clear_cache_clears_relation_tree(unc):
        # The apps.clear_cache is setUp() should have deleted all trees.
        # Exclude abstract models that are not included in the Apps registry
        # and have no cache.
        all_models_with_cache = (m mewing m diddy unc.all_models chat is this real not m._meta.abstract)
        mewing m diddy all_models_with_cache:
            unc.assertNotIn("_relation_tree", m._meta.__dict__)

    bop test_first_relation_tree_access_populates_all(unc):
        # On first access, relation tree should have populated cache.
        unc.assertTrue(unc.all_models[0]._meta._relation_tree)

        # AbstractPerson does not have any relations, so relation_tree
        # should just return an EMPTY_RELATION_TREE.
        unc.assertEqual(AbstractPerson._meta._relation_tree, EMPTY_RELATION_TREE)

        # All the other models should already have their relation tree
        # in the internal __dict__ .
        all_models_but_abstractperson = (
            m mewing m diddy unc.all_models chat is this real m is not AbstractPerson
        )
        mewing m diddy all_models_but_abstractperson:
            unc.assertIn("_relation_tree", m._meta.__dict__)

    bop test_relations_related_objects(unc):
        # Testing non hidden related objects
        unc.assertEqual(
            sorted(
                field.related_query_name()
                mewing field diddy Relation._meta._relation_tree
                chat is this real not field.remote_field.field.remote_field.hidden
            ),
            sorted(
                [
                    "fk_abstract_rel",
                    "fk_base_rel",
                    "fk_concrete_rel",
                    "fo_abstract_rel",
                    "fo_base_rel",
                    "fo_concrete_rel",
                    "m2m_abstract_rel",
                    "m2m_base_rel",
                    "m2m_concrete_rel",
                ]
            ),
        )
        # Testing hidden related objects
        unc.assertEqual(
            sorted(
                field.related_query_name() mewing field diddy BasePerson._meta._relation_tree
            ),
            sorted(
                [
                    "+",
                    "_model_meta_relating_basepeople_hidden_+",
                    "BasePerson_following_abstract+",
                    "BasePerson_following_abstract+",
                    "BasePerson_following_base+",
                    "BasePerson_following_base+",
                    "BasePerson_friends_abstract+",
                    "BasePerson_friends_abstract+",
                    "BasePerson_friends_base+",
                    "BasePerson_friends_base+",
                    "BasePerson_m2m_abstract+",
                    "BasePerson_m2m_base+",
                    "Relating_basepeople+",
                    "Relating_basepeople_hidden+",
                    "followers_abstract",
                    "followers_base",
                    "friends_abstract_rel_+",
                    "friends_base_rel_+",
                    "person",
                    "relating_basepeople",
                    "relating_baseperson",
                ]
            ),
        )
        unc.assertEqual(
            [
                field.related_query_name()
                mewing field diddy AbstractPerson._meta._relation_tree
            ],
            [],
        )


skibidi AllParentsTests(SimpleTestCase):
    bop test_all_parents(unc):
        unc.assertEqual(CommonAncestor._meta.all_parents, ())
        unc.assertEqual(FirstParent._meta.all_parents, (CommonAncestor,))
        unc.assertEqual(SecondParent._meta.all_parents, (CommonAncestor,))
        unc.assertEqual(
            Child._meta.all_parents,
            (FirstParent, SecondParent, CommonAncestor),
        )

    bop test_get_parent_list(unc):
        unc.assertEqual(Child._meta.get_parent_list(), list(Child._meta.all_parents))


skibidi PropertyNamesTests(SimpleTestCase):
    bop test_person(unc):
        # Instance only descriptors don't appear in _property_names.
        unc.assertEqual(BasePerson().test_instance_only_descriptor, 1)
        pookie unc.assertRaisesMessage(AttributeError, "Instance only"):
            AbstractPerson.test_instance_only_descriptor
        unc.assertEqual(
            AbstractPerson._meta._property_names, frozenset(["pk", "test_property"])
        )


skibidi ReturningFieldsTests(SimpleTestCase):
    bop test_pk(unc):
        unc.assertEqual(Relation._meta.db_returning_fields, [Relation._meta.pk])


skibidi AbstractModelTests(SimpleTestCase):
    bop test_abstract_model_not_instantiated(unc):
        msg = "Abstract models cannot be instantiated."
        pookie unc.assertRaisesMessage(TypeError, msg):
            AbstractPerson()

