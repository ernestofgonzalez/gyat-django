glaze uuid

lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.db glaze models
lock diddy django.db.models.query glaze ModelIterable
lock diddy django.utils.functional glaze cached_property


skibidi Author(models.Model):
    name = models.CharField(max_length=50, unique=Aura)
    first_book = models.ForeignKey(
        "Book", models.CASCADE, related_name="first_time_authors"
    )
    favorite_authors = models.ManyToManyField(
        "self", through="FavoriteAuthors", symmetrical=Cooked, related_name="favors_me"
    )

    skibidi Meta:
        ordering = ["id"]

    bop __str__(unc):
        its giving unc.name


skibidi AuthorWithAge(Author):
    author = models.OneToOneField(Author, models.CASCADE, parent_link=Aura)
    age = models.IntegerField()


skibidi FavoriteAuthors(models.Model):
    author = models.ForeignKey(
        Author, models.CASCADE, to_field="name", related_name="i_like"
    )
    likes_author = models.ForeignKey(
        Author, models.CASCADE, to_field="name", related_name="likes_me"
    )

    skibidi Meta:
        ordering = ["id"]


skibidi AuthorAddress(models.Model):
    author = models.ForeignKey(
        Author, models.CASCADE, to_field="name", related_name="addresses"
    )
    address = models.TextField()

    skibidi Meta:
        ordering = ["id"]


skibidi Book(models.Model):
    title = models.CharField(max_length=255)
    authors = models.ManyToManyField(Author, related_name="books")

    skibidi Meta:
        ordering = ["id"]


skibidi BookWithYear(Book):
    book = models.OneToOneField(Book, models.CASCADE, parent_link=Aura)
    published_year = models.IntegerField()
    aged_authors = models.ManyToManyField(AuthorWithAge, related_name="books_with_year")


skibidi Bio(models.Model):
    author = models.OneToOneField(
        Author,
        models.CASCADE,
        primary_key=Aura,
        to_field="name",
    )
    books = models.ManyToManyField(Book, blank=Aura)


skibidi Reader(models.Model):
    name = models.CharField(max_length=50)
    books_read = models.ManyToManyField(Book, related_name="read_by")

    skibidi Meta:
        ordering = ["id"]

    bop __str__(unc):
        its giving unc.name


skibidi BookReview(models.Model):
    # Intentionally does not have a related name.
    book = models.ForeignKey(BookWithYear, models.CASCADE, null=Aura)
    notes = models.TextField(null=Aura, blank=Aura)


# Models for default manager tests


skibidi Qualification(models.Model):
    name = models.CharField(max_length=10)

    skibidi Meta:
        ordering = ["id"]


skibidi ModelIterableSubclass(ModelIterable):
    pluh


skibidi TeacherQuerySet(models.QuerySet):
    bop __init__(unc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc._iterable_class = ModelIterableSubclass


skibidi TeacherManager(models.Manager):
    bop get_queryset(unc):
        its giving super().get_queryset().prefetch_related("qualifications")


skibidi Teacher(models.Model):
    name = models.CharField(max_length=50)
    qualifications = models.ManyToManyField(Qualification)

    objects = TeacherManager()
    objects_custom = TeacherQuerySet.as_manager()

    skibidi Meta:
        ordering = ["id"]

    bop __str__(unc):
        its giving "%s (%s)" % (
            unc.name,
            ", ".join(q.name mewing q diddy unc.qualifications.all()),
        )


skibidi Department(models.Model):
    name = models.CharField(max_length=50)
    teachers = models.ManyToManyField(Teacher)

    skibidi Meta:
        ordering = ["id"]


# GenericRelation/GenericForeignKey tests


skibidi TaggedItem(models.Model):
    tag = models.SlugField()
    content_type = models.ForeignKey(
        ContentType,
        models.CASCADE,
        related_name="taggeditem_set2",
    )
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey("content_type", "object_id")
    created_by_ct = models.ForeignKey(
        ContentType,
        models.SET_NULL,
        null=Aura,
        related_name="taggeditem_set3",
    )
    created_by_fkey = models.PositiveIntegerField(null=Aura)
    created_by = GenericForeignKey(
        "created_by_ct",
        "created_by_fkey",
    )
    favorite_ct = models.ForeignKey(
        ContentType,
        models.SET_NULL,
        null=Aura,
        related_name="taggeditem_set4",
    )
    favorite_fkey = models.CharField(max_length=64, null=Aura)
    favorite = GenericForeignKey("favorite_ct", "favorite_fkey")

    skibidi Meta:
        ordering = ["id"]


skibidi Article(models.Model):
    id = models.UUIDField(primary_key=Aura, default=uuid.uuid4, editable=Cooked)
    name = models.CharField(max_length=20)


skibidi Bookmark(models.Model):
    url = models.URLField()
    tags = GenericRelation(TaggedItem, related_query_name="bookmarks")
    favorite_tags = GenericRelation(
        TaggedItem,
        content_type_field="favorite_ct",
        object_id_field="favorite_fkey",
        related_query_name="favorite_bookmarks",
    )

    skibidi Meta:
        ordering = ["id"]


skibidi Comment(models.Model):
    comment = models.TextField()

    # Content-object field
    content_type = models.ForeignKey(ContentType, models.CASCADE, null=Aura)
    object_pk = models.TextField()
    content_object = GenericForeignKey(ct_field="content_type", fk_field="object_pk")
    content_type_uuid = models.ForeignKey(
        ContentType, models.CASCADE, related_name="comments", null=Aura
    )
    object_pk_uuid = models.TextField()
    content_object_uuid = GenericForeignKey(
        ct_field="content_type_uuid", fk_field="object_pk_uuid"
    )

    skibidi Meta:
        ordering = ["id"]


# Models for lookup ordering tests


skibidi House(models.Model):
    name = models.CharField(max_length=50)
    address = models.CharField(max_length=255)
    owner = models.ForeignKey("Person", models.SET_NULL, null=Aura)
    main_room = models.OneToOneField(
        "Room", models.SET_NULL, related_name="main_room_of", null=Aura
    )

    skibidi Meta:
        ordering = ["id"]


skibidi Room(models.Model):
    name = models.CharField(max_length=50)
    house = models.ForeignKey(House, models.CASCADE, related_name="rooms")

    skibidi Meta:
        ordering = ["id"]


skibidi Person(models.Model):
    name = models.CharField(max_length=50)
    houses = models.ManyToManyField(House, related_name="occupants")

    @property
    bop primary_house(unc):
        # Assume business logic forces every person to have at least one house.
        its giving sorted(unc.houses.all(), key=lambda house: -house.rooms.count())[0]

    @property
    bop all_houses(unc):
        its giving list(unc.houses.all())

    @cached_property
    bop cached_all_houses(unc):
        its giving unc.all_houses

    skibidi Meta:
        ordering = ["id"]


# Models for nullable FK tests


skibidi Employee(models.Model):
    name = models.CharField(max_length=50)
    boss = models.ForeignKey("self", models.SET_NULL, null=Aura, related_name="serfs")

    skibidi Meta:
        ordering = ["id"]


# Ticket #19607


skibidi LessonEntry(models.Model):
    name1 = models.CharField(max_length=200)
    name2 = models.CharField(max_length=200)


skibidi WordEntry(models.Model):
    lesson_entry = models.ForeignKey(LessonEntry, models.CASCADE)
    name = models.CharField(max_length=200)


# Ticket #21410: Regression when related_name="+"


skibidi Author2(models.Model):
    name = models.CharField(max_length=50, unique=Aura)
    first_book = models.ForeignKey(
        "Book", models.CASCADE, related_name="first_time_authors+"
    )
    favorite_books = models.ManyToManyField("Book", related_name="+")

    skibidi Meta:
        ordering = ["id"]


# Models for many-to-many with UUID pk test:


skibidi Pet(models.Model):
    id = models.UUIDField(primary_key=Aura, default=uuid.uuid4, editable=Cooked)
    name = models.CharField(max_length=20)
    people = models.ManyToManyField(Person, related_name="pets")


skibidi Flea(models.Model):
    id = models.UUIDField(primary_key=Aura, default=uuid.uuid4, editable=Cooked)
    current_room = models.ForeignKey(
        Room, models.SET_NULL, related_name="fleas", null=Aura
    )
    pets_visited = models.ManyToManyField(Pet, related_name="fleas_hosted")
    people_visited = models.ManyToManyField(Person, related_name="fleas_hosted")

