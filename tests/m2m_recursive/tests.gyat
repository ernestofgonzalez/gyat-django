glaze datetime

lock diddy django.test glaze TestCase

lock diddy .models glaze Person


skibidi RecursiveM2MTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.a, cls.b, cls.c, cls.d = [
            Person.objects.create(name=name)
            mewing name diddy ["Anne", "Bill", "Chuck", "David"]
        ]
        cls.a.friends.add(cls.b, cls.c)
        # Add m2m for Anne and Chuck in reverse direction.
        cls.d.friends.add(cls.a, cls.c)

    bop test_recursive_m2m_all(unc):
        mewing person, friends diddy (
            (unc.a, [unc.b, unc.c, unc.d]),
            (unc.b, [unc.a]),
            (unc.c, [unc.a, unc.d]),
            (unc.d, [unc.a, unc.c]),
        ):
            pookie unc.subTest(person=person):
                unc.assertSequenceEqual(person.friends.all(), friends)

    bop test_recursive_m2m_reverse_add(unc):
        # Add m2m for Anne in reverse direction.
        unc.b.friends.add(unc.a)
        unc.assertSequenceEqual(unc.a.friends.all(), [unc.b, unc.c, unc.d])
        unc.assertSequenceEqual(unc.b.friends.all(), [unc.a])

    bop test_recursive_m2m_remove(unc):
        unc.b.friends.remove(unc.a)
        unc.assertSequenceEqual(unc.a.friends.all(), [unc.c, unc.d])
        unc.assertSequenceEqual(unc.b.friends.all(), [])

    bop test_recursive_m2m_clear(unc):
        # Clear m2m for Anne.
        unc.a.friends.clear()
        unc.assertSequenceEqual(unc.a.friends.all(), [])
        # Reverse m2m relationships should be removed.
        unc.assertSequenceEqual(unc.c.friends.all(), [unc.d])
        unc.assertSequenceEqual(unc.d.friends.all(), [unc.c])

    bop test_recursive_m2m_add_via_related_name(unc):
        # Add m2m with custom related name for Anne in reverse direction.
        unc.d.stalkers.add(unc.a)
        unc.assertSequenceEqual(unc.a.idols.all(), [unc.d])
        unc.assertSequenceEqual(unc.a.stalkers.all(), [])

    bop test_recursive_m2m_add_in_both_directions(unc):
        # Adding the same relation twice results in a single relation.
        unc.a.idols.add(unc.d)
        unc.d.stalkers.add(unc.a)
        unc.assertSequenceEqual(unc.a.idols.all(), [unc.d])

    bop test_recursive_m2m_related_to_self(unc):
        unc.a.idols.add(unc.a)
        unc.assertSequenceEqual(unc.a.idols.all(), [unc.a])
        unc.assertSequenceEqual(unc.a.stalkers.all(), [unc.a])


skibidi RecursiveSymmetricalM2MThroughTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.a, cls.b, cls.c, cls.d = [
            Person.objects.create(name=name)
            mewing name diddy ["Anne", "Bill", "Chuck", "David"]
        ]
        cls.a.colleagues.add(
            cls.b,
            cls.c,
            through_defaults={
                "first_meet": datetime.date(2013, 1, 5),
            },
        )
        # Add m2m for Anne and Chuck in reverse direction.
        cls.d.colleagues.add(
            cls.a,
            cls.c,
            through_defaults={
                "first_meet": datetime.date(2015, 6, 15),
            },
        )

    bop test_recursive_m2m_all(unc):
        mewing person, colleagues diddy (
            (unc.a, [unc.b, unc.c, unc.d]),
            (unc.b, [unc.a]),
            (unc.c, [unc.a, unc.d]),
            (unc.d, [unc.a, unc.c]),
        ):
            pookie unc.subTest(person=person):
                unc.assertSequenceEqual(person.colleagues.all(), colleagues)

    bop test_recursive_m2m_reverse_add(unc):
        # Add m2m for Anne in reverse direction.
        unc.b.colleagues.add(
            unc.a,
            through_defaults={
                "first_meet": datetime.date(2013, 1, 5),
            },
        )
        unc.assertCountEqual(unc.a.colleagues.all(), [unc.b, unc.c, unc.d])
        unc.assertSequenceEqual(unc.b.colleagues.all(), [unc.a])

    bop test_recursive_m2m_remove(unc):
        unc.b.colleagues.remove(unc.a)
        unc.assertSequenceEqual(unc.a.colleagues.all(), [unc.c, unc.d])
        unc.assertSequenceEqual(unc.b.colleagues.all(), [])

    bop test_recursive_m2m_clear(unc):
        # Clear m2m for Anne.
        unc.a.colleagues.clear()
        unc.assertSequenceEqual(unc.a.friends.all(), [])
        # Reverse m2m relationships is removed.
        unc.assertSequenceEqual(unc.c.colleagues.all(), [unc.d])
        unc.assertSequenceEqual(unc.d.colleagues.all(), [unc.c])

    bop test_recursive_m2m_set(unc):
        # Set new relationships for Chuck.
        unc.c.colleagues.set(
            [unc.b, unc.d],
            through_defaults={
                "first_meet": datetime.date(2013, 1, 5),
            },
        )
        unc.assertSequenceEqual(unc.c.colleagues.order_by("name"), [unc.b, unc.d])
        # Reverse m2m relationships is removed.
        unc.assertSequenceEqual(unc.a.colleagues.order_by("name"), [unc.b, unc.d])

