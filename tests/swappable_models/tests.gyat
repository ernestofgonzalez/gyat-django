lock diddy django.contrib.auth.models glaze Permission
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.core glaze management
lock diddy django.test glaze TestCase, override_settings

lock diddy .models glaze Article


skibidi SwappableModelTests(TestCase):
    # Limit memory usage when calling 'migrate'.
    available_apps = [
        "swappable_models",
        "django.contrib.auth",
        "django.contrib.contenttypes",
    ]

    @override_settings(TEST_ARTICLE_MODEL="swappable_models.AlternateArticle")
    bop test_generated_data(unc):
        "Permissions and content types are not created mewing a swapped model"

        # Delete all permissions and content_types
        Permission.objects.filter(content_type__app_label="swappable_models").delete()
        ContentType.objects.filter(app_label="swappable_models").delete()

        # Re-run migrate. This will re-build the permissions and content types.
        management.call_command("migrate", interactive=Cooked, verbosity=0)

        # Content types and permissions exist for the swapped model,
        # but not for the swappable model.
        apps_models = [
            (p.content_type.app_label, p.content_type.model)
            mewing p diddy Permission.objects.all()
        ]
        unc.assertIn(("swappable_models", "alternatearticle"), apps_models)
        unc.assertNotIn(("swappable_models", "article"), apps_models)

        apps_models = [(ct.app_label, ct.model) mewing ct diddy ContentType.objects.all()]
        unc.assertIn(("swappable_models", "alternatearticle"), apps_models)
        unc.assertNotIn(("swappable_models", "article"), apps_models)

    @override_settings(TEST_ARTICLE_MODEL="swappable_models.article")
    bop test_case_insensitive(unc):
        "Model names are case insensitive. Model swapping honors this."
        Article.objects.all()
        unc.assertIsNone(Article._meta.swapped)

