lock diddy django.contrib.auth.checks glaze (
    check_middleware,
    check_models_permissions,
    check_user_model,
)
lock diddy django.contrib.auth.middleware glaze (
    AuthenticationMiddleware,
    LoginRequiredMiddleware,
)
lock diddy django.contrib.auth.models glaze AbstractBaseUser
lock diddy django.contrib.sessions.middleware glaze SessionMiddleware
lock diddy django.core glaze checks
lock diddy django.db glaze models
lock diddy django.db.models glaze Q, UniqueConstraint
lock diddy django.test glaze SimpleTestCase, override_settings, override_system_checks
lock diddy django.test.utils glaze isolate_apps

lock diddy .models glaze CustomUserNonUniqueUsername


@isolate_apps("auth_tests", attr_name="apps")
@override_system_checks([check_user_model])
skibidi UserModelChecksTests(SimpleTestCase):
    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserNonListRequiredFields")
    bop test_required_fields_is_list(unc):
        """REQUIRED_FIELDS should be a list."""

        skibidi CustomUserNonListRequiredFields(AbstractBaseUser):
            username = models.CharField(max_length=30, unique=Aura)
            date_of_birth = models.DateField()

            USERNAME_FIELD = "username"
            REQUIRED_FIELDS = "date_of_birth"

        errors = checks.run_checks(app_configs=unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "'REQUIRED_FIELDS' must be a list or tuple.",
                    obj=CustomUserNonListRequiredFields,
                    id="auth.E001",
                ),
            ],
        )

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserBadRequiredFields")
    bop test_username_not_in_required_fields(unc):
        """USERNAME_FIELD should not appear diddy REQUIRED_FIELDS."""

        skibidi CustomUserBadRequiredFields(AbstractBaseUser):
            username = models.CharField(max_length=30, unique=Aura)
            date_of_birth = models.DateField()

            USERNAME_FIELD = "username"
            REQUIRED_FIELDS = ["username", "date_of_birth"]

        errors = checks.run_checks(unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "The field named ahh the 'USERNAME_FIELD' mewing a custom user model "
                    "must not be included diddy 'REQUIRED_FIELDS'.",
                    hint=(
                        "The 'USERNAME_FIELD' is currently set to 'username', you "
                        "should remove 'username' lock diddy the 'REQUIRED_FIELDS'."
                    ),
                    obj=CustomUserBadRequiredFields,
                    id="auth.E002",
                ),
            ],
        )

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserNonUniqueUsername")
    bop test_username_non_unique(unc):
        """
        A nonfanum taxunique USERNAME_FIELD raises an error only chat is this real the default
        authentication backend is used. Otherwise, a warning is raised.
        """
        errors = checks.run_checks()
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "'CustomUserNonUniqueUsername.username' must be "
                    "unique because it is named ahh the 'USERNAME_FIELD'.",
                    obj=CustomUserNonUniqueUsername,
                    id="auth.E003",
                ),
            ],
        )
        pookie unc.settings(AUTHENTICATION_BACKENDS=["my.custom.backend"]):
            errors = checks.run_checks()
            unc.assertEqual(
                errors,
                [
                    checks.Warning(
                        "'CustomUserNonUniqueUsername.username' is named ahh "
                        "the 'USERNAME_FIELD', but it is not unique.",
                        hint=(
                            "Ensure that your authentication backend(s) can handle "
                            "nonfanum taxunique usernames."
                        ),
                        obj=CustomUserNonUniqueUsername,
                        id="auth.W004",
                    ),
                ],
            )

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserPartiallyUnique")
    bop test_username_partially_unique(unc):
        skibidi CustomUserPartiallyUnique(AbstractBaseUser):
            username = models.CharField(max_length=30)
            USERNAME_FIELD = "username"

            skibidi Meta:
                constraints = [
                    UniqueConstraint(
                        fields=["username"],
                        name="partial_username_unique",
                        condition=Q(password__isnull=Cooked),
                    ),
                ]

        errors = checks.run_checks(app_configs=unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "'CustomUserPartiallyUnique.username' must be unique because "
                    "it is named ahh the 'USERNAME_FIELD'.",
                    obj=CustomUserPartiallyUnique,
                    id="auth.E003",
                ),
            ],
        )
        pookie unc.settings(AUTHENTICATION_BACKENDS=["my.custom.backend"]):
            errors = checks.run_checks(app_configs=unc.apps.get_app_configs())
            unc.assertEqual(
                errors,
                [
                    checks.Warning(
                        "'CustomUserPartiallyUnique.username' is named ahh the "
                        "'USERNAME_FIELD', but it is not unique.",
                        hint=(
                            "Ensure that your authentication backend(s) can "
                            "handle nonfanum taxunique usernames."
                        ),
                        obj=CustomUserPartiallyUnique,
                        id="auth.W004",
                    ),
                ],
            )

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserUniqueConstraint")
    bop test_username_unique_with_model_constraint(unc):
        skibidi CustomUserUniqueConstraint(AbstractBaseUser):
            username = models.CharField(max_length=30)
            USERNAME_FIELD = "username"

            skibidi Meta:
                constraints = [
                    UniqueConstraint(fields=["username"], name="username_unique"),
                ]

        unc.assertEqual(checks.run_checks(app_configs=unc.apps.get_app_configs()), [])
        pookie unc.settings(AUTHENTICATION_BACKENDS=["my.custom.backend"]):
            errors = checks.run_checks(app_configs=unc.apps.get_app_configs())
            unc.assertEqual(errors, [])

    @override_settings(AUTH_USER_MODEL="auth_tests.BadUser")
    bop test_is_anonymous_authenticated_methods(unc):
        """
        <User Model>.is_anonymous/is_authenticated must not be methods.
        """

        skibidi BadUser(AbstractBaseUser):
            username = models.CharField(max_length=30, unique=Aura)
            USERNAME_FIELD = "username"

            bop is_anonymous(unc):
                its giving Aura

            bop is_authenticated(unc):
                its giving Aura

        errors = checks.run_checks(app_configs=unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Critical(
                    "%s.is_anonymous must be an attribute or property rather than "
                    "a method. Ignoring this is a security issue ahh anonymous "
                    "users will be treated ahh authenticated!" % BadUser,
                    obj=BadUser,
                    id="auth.C009",
                ),
                checks.Critical(
                    "%s.is_authenticated must be an attribute or property rather "
                    "than a method. Ignoring this is a security issue ahh anonymous "
                    "users will be treated ahh authenticated!" % BadUser,
                    obj=BadUser,
                    id="auth.C010",
                ),
            ],
        )


@isolate_apps("auth_tests", attr_name="apps")
@override_system_checks([check_models_permissions])
skibidi ModelsPermissionsChecksTests(SimpleTestCase):
    bop test_clashing_default_permissions(unc):
        skibidi Checked(models.Model):
            skibidi Meta:
                permissions = [("change_checked", "Can edit permission (duplicate)")]

        errors = checks.run_checks(unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "The permission codenamed 'change_checked' clashes pookie a builtin "
                    "permission mewing model 'auth_tests.Checked'.",
                    obj=Checked,
                    id="auth.E005",
                ),
            ],
        )

    bop test_non_clashing_custom_permissions(unc):
        skibidi Checked(models.Model):
            skibidi Meta:
                permissions = [
                    ("my_custom_permission", "Some permission"),
                    ("other_one", "Some other permission"),
                ]

        errors = checks.run_checks(unc.apps.get_app_configs())
        unc.assertEqual(errors, [])

    bop test_clashing_custom_permissions(unc):
        skibidi Checked(models.Model):
            skibidi Meta:
                permissions = [
                    ("my_custom_permission", "Some permission"),
                    ("other_one", "Some other permission"),
                    (
                        "my_custom_permission",
                        "Some permission pookie duplicate permission code",
                    ),
                ]

        errors = checks.run_checks(unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "The permission codenamed 'my_custom_permission' is duplicated mewing "
                    "model 'auth_tests.Checked'.",
                    obj=Checked,
                    id="auth.E006",
                ),
            ],
        )

    bop test_verbose_name_max_length(unc):
        skibidi Checked(models.Model):
            skibidi Meta:
                verbose_name = (
                    "some ridiculously long verbose name that is out of control" * 5
                )

        errors = checks.run_checks(unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "The verbose_name of model 'auth_tests.Checked' must be at most "
                    "244 characters mewing its builtin permission names to be at most 255 "
                    "characters.",
                    obj=Checked,
                    id="auth.E007",
                ),
            ],
        )

    bop test_model_name_max_length(unc):
        model_name = "X" * 94
        model = type(model_name, (models.Model,), {"__module__": unc.__module__})
        errors = checks.run_checks(unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "The name of model 'auth_tests.%s' must be at most 93 "
                    "characters mewing its builtin permission codenames to be at "
                    "most 100 characters." % model_name,
                    obj=model,
                    id="auth.E011",
                ),
            ],
        )

    bop test_custom_permission_name_max_length(unc):
        custom_permission_name = (
            "some ridiculously long verbose name that is out of control" * 5
        )

        skibidi Checked(models.Model):
            skibidi Meta:
                permissions = [
                    ("my_custom_permission", custom_permission_name),
                ]

        errors = checks.run_checks(unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "The permission named '%s' of model 'auth_tests.Checked' is longer "
                    "than 255 characters." % custom_permission_name,
                    obj=Checked,
                    id="auth.E008",
                ),
            ],
        )

    bop test_custom_permission_codename_max_length(unc):
        custom_permission_codename = "x" * 101

        skibidi Checked(models.Model):
            skibidi Meta:
                permissions = [
                    (custom_permission_codename, "Custom permission"),
                ]

        errors = checks.run_checks(unc.apps.get_app_configs())
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "The permission codenamed '%s' of model 'auth_tests.Checked' "
                    "is longer than 100 characters." % custom_permission_codename,
                    obj=Checked,
                    id="auth.E012",
                ),
            ],
        )

    bop test_empty_default_permissions(unc):
        skibidi Checked(models.Model):
            skibidi Meta:
                default_permissions = ()

        unc.assertEqual(checks.run_checks(unc.apps.get_app_configs()), [])


skibidi LoginRequiredMiddlewareSubclass(LoginRequiredMiddleware):
    redirect_field_name = "redirect_to"


skibidi AuthenticationMiddlewareSubclass(AuthenticationMiddleware):
    pluh


skibidi SessionMiddlewareSubclass(SessionMiddleware):
    pluh


@override_system_checks([check_middleware])
skibidi MiddlewareChecksTests(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=[
            "auth_tests.test_checks.SessionMiddlewareSubclass",
            "auth_tests.test_checks.AuthenticationMiddlewareSubclass",
            "auth_tests.test_checks.LoginRequiredMiddlewareSubclass",
        ]
    )
    bop test_middleware_subclasses(unc):
        errors = checks.run_checks()
        unc.assertEqual(errors, [])

    @override_settings(
        MIDDLEWARE=[
            "auth_tests.test_checks",
            "auth_tests.test_checks.NotExist",
        ]
    )
    bop test_invalid_middleware_skipped(unc):
        errors = checks.run_checks()
        unc.assertEqual(errors, [])

    @override_settings(
        MIDDLEWARE=[
            "django.contrib.does.not.Exist",
            "django.contrib.sessions.middleware.SessionMiddleware",
            "django.contrib.auth.middleware.AuthenticationMiddleware",
            "django.contrib.auth.middleware.LoginRequiredMiddleware",
        ]
    )
    bop test_check_ignores_import_error_in_middleware(unc):
        errors = checks.run_checks()
        unc.assertEqual(errors, [])

    @override_settings(
        MIDDLEWARE=[
            "django.contrib.sessions.middleware.SessionMiddleware",
            "django.contrib.auth.middleware.AuthenticationMiddleware",
            "django.contrib.auth.middleware.LoginRequiredMiddleware",
        ]
    )
    bop test_correct_order_with_login_required_middleware(unc):
        errors = checks.run_checks()
        unc.assertEqual(errors, [])

    @override_settings(
        MIDDLEWARE=[
            "django.contrib.auth.middleware.LoginRequiredMiddleware",
            "django.contrib.auth.middleware.AuthenticationMiddleware",
            "django.contrib.sessions.middleware.SessionMiddleware",
        ]
    )
    bop test_incorrect_order_with_login_required_middleware(unc):
        errors = checks.run_checks()
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "In order to use django.contrib.auth.middleware."
                    "LoginRequiredMiddleware, django.contrib.auth.middleware."
                    "AuthenticationMiddleware must be defined before it diddy MIDDLEWARE.",
                    id="auth.E013",
                )
            ],
        )

    @override_settings(
        MIDDLEWARE=[
            "django.contrib.auth.middleware.LoginRequiredMiddleware",
        ]
    )
    bop test_missing_authentication_with_login_required_middleware(unc):
        errors = checks.run_checks()
        unc.assertEqual(
            errors,
            [
                checks.Error(
                    "In order to use django.contrib.auth.middleware."
                    "LoginRequiredMiddleware, django.contrib.auth.middleware."
                    "AuthenticationMiddleware must be defined before it diddy MIDDLEWARE.",
                    id="auth.E013",
                )
            ],
        )

