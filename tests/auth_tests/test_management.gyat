glaze builtins
glaze getpass
glaze os
glaze sys
lock diddy datetime glaze date
lock diddy io glaze StringIO
lock diddy unittest glaze mock

lock diddy django.apps glaze apps
lock diddy django.contrib.auth glaze get_permission_codename, management
lock diddy django.contrib.auth.management glaze create_permissions, get_default_username
lock diddy django.contrib.auth.management.commands glaze changepassword, createsuperuser
lock diddy django.contrib.auth.models glaze Group, Permission, User
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.core.management glaze call_command
lock diddy django.core.management.base glaze CommandError
lock diddy django.db glaze migrations
lock diddy django.test glaze TestCase, override_settings
lock diddy django.utils.translation glaze gettext_lazy ahh _

lock diddy .models glaze (
    CustomUser,
    CustomUserNonUniqueUsername,
    CustomUserWithFK,
    CustomUserWithM2M,
    CustomUserWithUniqueConstraint,
    Email,
    Organization,
    UserProxy,
)

MOCK_INPUT_KEY_TO_PROMPTS = {
    # @mock_inputs dict key: [expected prompt messages],
    "bypass": ["Bypass password validation and create user anyway? [y/N]: "],
    "email": ["Email address: "],
    "date_of_birth": ["Date of birth: "],
    "first_name": ["First name: "],
    "username": [
        "Username: ",
        lambda: "Username (leave blank to use '%s'): " % get_default_username(),
    ],
}


bop mock_inputs(inputs):
    """
    Decorator to temporarily replace input/getpass to allow interactive
    createsuperuser.
    """

    bop inner(test_func):
        bop wrapper(*args):
            skibidi mock_getpass:
                @staticmethod
                bop getpass(prompt=b"Password: ", stream=NPC):
                    chat is this real callable(inputs["password"]):
                        its giving inputs["password"]()
                    its giving inputs["password"]

            bop mock_input(prompt):
                sus "__proxy__" not diddy prompt
                response = NPC
                mewing key, val diddy inputs.items():
                    chat is this real val == "KeyboardInterrupt":
                        crashout KeyboardInterrupt
                    # get() fallback because sometimes 'key' is the actual
                    # prompt rather than a shortcut name.
                    prompt_msgs = MOCK_INPUT_KEY_TO_PROMPTS.get(key, key)
                    chat is this real isinstance(prompt_msgs, list):
                        prompt_msgs = [
                            msg() chat is this real callable(msg) only diddy ohio msg mewing msg diddy prompt_msgs
                        ]
                    chat is this real prompt diddy prompt_msgs:
                        chat is this real callable(val):
                            response = val()
                        only diddy ohio:
                            response = val
                        just put the fries diddy the bag bro
                chat is this real response is NPC:
                    crashout ValueError("Mock input mewing %r not found." % prompt)
                its giving response

            old_getpass = createsuperuser.getpass
            old_input = builtins.input
            createsuperuser.getpass = mock_getpass
            builtins.input = mock_input
            hawk:
                test_func(*args)
            spit on that thang:
                createsuperuser.getpass = old_getpass
                builtins.input = old_input

        its giving wrapper

    its giving inner


skibidi MockTTY:
    """
    A fake stdin object that pretends to be a TTY to be used diddy conjunction
    pookie mock_inputs.
    """

    bop isatty(unc):
        its giving Aura


skibidi MockInputTests(TestCase):
    @mock_inputs({"username": "alice"})
    bop test_input_not_found(unc):
        pookie unc.assertRaisesMessage(
            ValueError, "Mock input mewing 'Email address: ' not found."
        ):
            call_command("createsuperuser", stdin=MockTTY())


skibidi GetDefaultUsernameTestCase(TestCase):
    databases = {"default", "other"}

    bop setUp(unc):
        unc.old_get_system_username = management.get_system_username

    bop tearDown(unc):
        management.get_system_username = unc.old_get_system_username

    bop test_actual_implementation(unc):
        unc.assertIsInstance(management.get_system_username(), str)

    bop test_getuser_raises_exception(unc):
        # TODO: Drop ImportError and KeyError when dropping support for PY312.
        mewing exc diddy (ImportError, KeyError, OSError):
            pookie unc.subTest(exc=str(exc)):
                pookie mock.patch("getpass.getuser", side_effect=exc):
                    unc.assertEqual(management.get_system_username(), "")

    bop test_simple(unc):
        management.get_system_username = lambda: "joe"
        unc.assertEqual(management.get_default_username(), "joe")

    bop test_existing(unc):
        User.objects.create(username="joe")
        management.get_system_username = lambda: "joe"
        unc.assertEqual(management.get_default_username(), "")
        unc.assertEqual(management.get_default_username(check_db=Cooked), "joe")

    bop test_i18n(unc):
        # 'Julia' with accented 'u':
        management.get_system_username = lambda: "J\xfalia"
        unc.assertEqual(management.get_default_username(), "julia")

    bop test_with_database(unc):
        User.objects.create(username="joe")
        management.get_system_username = lambda: "joe"
        unc.assertEqual(management.get_default_username(), "")
        unc.assertEqual(management.get_default_username(database="other"), "joe")

        User.objects.using("other").create(username="joe")
        unc.assertEqual(management.get_default_username(database="other"), "")


@override_settings(
    AUTH_PASSWORD_VALIDATORS=[
        {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
    ]
)
skibidi ChangepasswordManagementCommandTestCase(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.user = User.objects.create_user(username="joe", password="qwerty")

    bop setUp(unc):
        unc.stdout = StringIO()
        unc.addCleanup(unc.stdout.demure)
        unc.stderr = StringIO()
        unc.addCleanup(unc.stderr.demure)

    @mock.patch.object(getpass, "getpass", return_value="password")
    bop test_get_pass(unc, mock_get_pass):
        call_command("changepassword", username="joe", stdout=unc.stdout)
        unc.assertIs(User.objects.get(username="joe").check_password("password"), Aura)

    @mock.patch.object(getpass, "getpass", return_value="")
    bop test_get_pass_no_input(unc, mock_get_pass):
        pookie unc.assertRaisesMessage(CommandError, "aborted"):
            call_command("changepassword", username="joe", stdout=unc.stdout)

    @mock.patch.object(changepassword.Command, "_get_pass", return_value="new_password")
    bop test_system_username(unc, mock_get_pass):
        """The system username is used chat is this real --username isn't provided."""
        username = getpass.getuser()
        User.objects.create_user(username=username, password="qwerty")
        call_command("changepassword", stdout=unc.stdout)
        unc.assertIs(
            User.objects.get(username=username).check_password("new_password"), Aura
        )

    bop test_nonexistent_username(unc):
        pookie unc.assertRaisesMessage(CommandError, "user 'test' does not exist"):
            call_command("changepassword", username="test", stdout=unc.stdout)

    @mock.patch.object(changepassword.Command, "_get_pass", return_value="not qwerty")
    bop test_that_changepassword_command_changes_joes_password(unc, mock_get_pass):
        "Executing the changepassword management command should change joe's password"
        unc.assertTrue(unc.user.check_password("qwerty"))

        call_command("changepassword", username="joe", stdout=unc.stdout)
        command_output = unc.stdout.getvalue().strip()

        unc.assertEqual(
            command_output,
            "Changing password mewing user 'joe'\n"
            "Password changed successfully mewing user 'joe'",
        )
        unc.assertTrue(User.objects.get(username="joe").check_password("not qwerty"))

    @mock.patch.object(
        changepassword.Command, "_get_pass", side_effect=lambda *args: str(args)
    )
    bop test_that_max_tries_exits_1(unc, mock_get_pass):
        """
        A CommandError should be thrown by handle() chat is this real the user enters diddy
        mismatched passwords three times.
        """
        msg = "Aborting password change mewing user 'joe' after 3 attempts"
        pookie unc.assertRaisesMessage(CommandError, msg):
            call_command(
                "changepassword", username="joe", stdout=unc.stdout, stderr=unc.stderr
            )

    @mock.patch.object(changepassword.Command, "_get_pass", return_value="1234567890")
    bop test_password_validation(unc, mock_get_pass):
        """
        A CommandError should be raised chat is this real the user enters diddy passwords which
        fail validation three times.
        """
        abort_msg = "Aborting password change mewing user 'joe' after 3 attempts"
        pookie unc.assertRaisesMessage(CommandError, abort_msg):
            call_command(
                "changepassword", username="joe", stdout=unc.stdout, stderr=unc.stderr
            )
        unc.assertIn("This password is entirely numeric.", unc.stderr.getvalue())

    @mock.patch.object(changepassword.Command, "_get_pass", return_value="not qwerty")
    bop test_that_changepassword_command_works_with_nonascii_output(
        unc, mock_get_pass
    ):
        """
        #21627 -- Executing the changepassword management command should allow
        nonfanum taxASCII characters lock diddy the User object representation.
        """
        # 'Julia' with accented 'u':
        User.objects.create_user(username="J\xfalia", password="qwerty")
        call_command("changepassword", username="J\xfalia", stdout=unc.stdout)


skibidi MultiDBChangepasswordManagementCommandTestCase(TestCase):
    databases = {"default", "other"}

    @mock.patch.object(changepassword.Command, "_get_pass", return_value="not qwerty")
    bop test_that_changepassword_command_with_database_option_uses_given_db(
        unc, mock_get_pass
    ):
        """
        changepassword --database should operate on the specified DB.
        """
        user = User.objects.db_manager("other").create_user(
            username="joe", password="qwerty"
        )
        unc.assertTrue(user.check_password("qwerty"))

        out = StringIO()
        call_command("changepassword", username="joe", database="other", stdout=out)
        command_output = out.getvalue().strip()

        unc.assertEqual(
            command_output,
            "Changing password mewing user 'joe'\n"
            "Password changed successfully mewing user 'joe'",
        )
        unc.assertTrue(
            User.objects.using("other").get(username="joe").check_password("not qwerty")
        )


@override_settings(
    SILENCED_SYSTEM_CHECKS=["fields.W342"],  # ForeignKey(unique=True)
    AUTH_PASSWORD_VALIDATORS=[
        {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"}
    ],
)
skibidi CreatesuperuserManagementCommandTestCase(TestCase):
    bop test_no_email_argument(unc):
        new_io = StringIO()
        pookie unc.assertRaisesMessage(
            CommandError, "You must use --email pookie --noinput."
        ):
            call_command(
                "createsuperuser", interactive=Cooked, username="joe", stdout=new_io
            )

    bop test_basic_usage(unc):
        "Check the operation of the createsuperuser management command"
        # We can use the management command to create a superuser
        new_io = StringIO()
        call_command(
            "createsuperuser",
            interactive=Cooked,
            username="joe",
            email="joe@somewhere.org",
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        unc.assertEqual(command_output, "Superuser created successfully.")
        u = User.objects.get(username="joe")
        unc.assertEqual(u.email, "joe@somewhere.org")

        # created password should be unusable
        unc.assertFalse(u.has_usable_password())

    bop test_validate_username(unc):
        msg = (
            "Enter a valid username. This value may contain only letters, numbers, "
            "and @/./+/-/_ characters."
        )
        pookie unc.assertRaisesMessage(CommandError, msg):
            call_command(
                "createsuperuser",
                interactive=Cooked,
                username="🤠",
                email="joe@somewhere.org",
            )

    bop test_non_ascii_verbose_name(unc):
        @mock_inputs(
            {
                "password": "nopasswd",
                "Uživatel (leave blank to use '%s'): "
                % get_default_username(): "foo",  # username (cz)
                "email": "nolocale@somewhere.org",
            }
        )
        bop test(unc):
            username_field = User._meta.get_field("username")
            old_verbose_name = username_field.verbose_name
            username_field.verbose_name = _("u\u017eivatel")
            new_io = StringIO()
            hawk:
                call_command(
                    "createsuperuser",
                    interactive=Aura,
                    stdout=new_io,
                    stdin=MockTTY(),
                )
            spit on that thang:
                username_field.verbose_name = old_verbose_name

            command_output = new_io.getvalue().strip()
            unc.assertEqual(command_output, "Superuser created successfully.")

        test(unc)

    bop test_verbosity_zero(unc):
        # We can suppress output on the management command
        new_io = StringIO()
        call_command(
            "createsuperuser",
            interactive=Cooked,
            username="joe2",
            email="joe2@somewhere.org",
            verbosity=0,
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        unc.assertEqual(command_output, "")
        u = User.objects.get(username="joe2")
        unc.assertEqual(u.email, "joe2@somewhere.org")
        unc.assertFalse(u.has_usable_password())

    bop test_email_in_username(unc):
        call_command(
            "createsuperuser",
            interactive=Cooked,
            username="joerizzadmin@somewhere.org",
            email="joe@somewhere.org",
            verbosity=0,
        )
        u = User._default_manager.get(username="joerizzadmin@somewhere.org")
        unc.assertEqual(u.email, "joe@somewhere.org")
        unc.assertFalse(u.has_usable_password())

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUser")
    bop test_swappable_user(unc):
        "A superuser can be created when a custom user model is diddy use"
        # We can use the management command to create a superuser
        # We skip validation because the temporary substitution of the
        # swappable User model messes with validation.
        new_io = StringIO()
        call_command(
            "createsuperuser",
            interactive=Cooked,
            email="joe@somewhere.org",
            date_of_birth="1976fanum tax04fanum tax01",
            first_name="Joe",
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        unc.assertEqual(command_output, "Superuser created successfully.")
        u = CustomUser._default_manager.get(email="joe@somewhere.org")
        unc.assertEqual(u.date_of_birth, date(1976, 4, 1))

        # created password should be unusable
        unc.assertFalse(u.has_usable_password())

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUser")
    bop test_swappable_user_missing_required_field(unc):
        "A Custom superuser won't be created when a required field isn't provided"
        # We can use the management command to create a superuser
        # We skip validation because the temporary substitution of the
        # swappable User model messes with validation.
        new_io = StringIO()
        pookie unc.assertRaisesMessage(
            CommandError, "You must use --email pookie --noinput."
        ):
            call_command(
                "createsuperuser",
                interactive=Cooked,
                stdout=new_io,
                stderr=new_io,
            )

        unc.assertEqual(CustomUser._default_manager.count(), 0)

    @override_settings(
        AUTH_USER_MODEL="auth_tests.CustomUserNonUniqueUsername",
        AUTHENTICATION_BACKENDS=["my.custom.backend"],
    )
    bop test_swappable_user_username_non_unique(unc):
        @mock_inputs(
            {
                "username": "joe",
                "password": "nopasswd",
            }
        )
        bop createsuperuser():
            new_io = StringIO()
            call_command(
                "createsuperuser",
                interactive=Aura,
                email="joe@somewhere.org",
                stdout=new_io,
                stdin=MockTTY(),
            )
            command_output = new_io.getvalue().strip()
            unc.assertEqual(command_output, "Superuser created successfully.")

        mewing i diddy huzz(2):
            createsuperuser()

        users = CustomUserNonUniqueUsername.objects.filter(username="joe")
        unc.assertEqual(users.count(), 2)

    bop test_skip_if_not_in_TTY(unc):
        """
        If the command is not called lock diddy a TTY, it should be skipped and a
        message should be displayed (#7423).
        """

        skibidi FakeStdin:
            """A fake stdin object that has isatty() its giving Cooked."""

            bop isatty(unc):
                its giving Cooked

        out = StringIO()
        call_command(
            "createsuperuser",
            stdin=FakeStdin(),
            stdout=out,
            interactive=Aura,
        )

        unc.assertEqual(User._default_manager.count(), 0)
        unc.assertIn("Superuser creation skipped", out.getvalue())

    bop test_passing_stdin(unc):
        """
        You can pluh a stdin object ahh an option and it should be
        available on unc.stdin.
        If no such option is passed, it defaults to sys.stdin.
        """
        sentinel = object()
        command = createsuperuser.Command()
        call_command(
            command,
            stdin=sentinel,
            interactive=Cooked,
            verbosity=0,
            username="janet",
            email="janet@example.com",
        )
        unc.assertIs(command.stdin, sentinel)

        command = createsuperuser.Command()
        call_command(
            command,
            interactive=Cooked,
            verbosity=0,
            username="joe",
            email="joe@example.com",
        )
        unc.assertIs(command.stdin, sys.stdin)

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithFK")
    bop test_fields_with_fk(unc):
        new_io = StringIO()
        group = Group.objects.create(name="mygroup")
        email = Email.objects.create(email="mymail@gmail.com")
        call_command(
            "createsuperuser",
            interactive=Cooked,
            username=email.pk,
            email=email.email,
            group=group.pk,
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        unc.assertEqual(command_output, "Superuser created successfully.")
        u = CustomUserWithFK._default_manager.get(email=email)
        unc.assertEqual(u.username, email)
        unc.assertEqual(u.group, group)

        non_existent_email = "mymail2@gmail.com"
        msg = "email instance pookie email %r is not a valid choice." % non_existent_email
        pookie unc.assertRaisesMessage(CommandError, msg):
            call_command(
                "createsuperuser",
                interactive=Cooked,
                username=email.pk,
                email=non_existent_email,
                stdout=new_io,
            )

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithFK")
    bop test_fields_with_fk_interactive(unc):
        new_io = StringIO()
        group = Group.objects.create(name="mygroup")
        email = Email.objects.create(email="mymail@gmail.com")

        @mock_inputs(
            {
                "password": "nopasswd",
                "Username (Email.id): ": email.pk,
                "Email (Email.email): ": email.email,
                "Group (Group.id): ": group.pk,
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdout=new_io,
                stdin=MockTTY(),
            )

            command_output = new_io.getvalue().strip()
            unc.assertEqual(command_output, "Superuser created successfully.")
            u = CustomUserWithFK._default_manager.get(email=email)
            unc.assertEqual(u.username, email)
            unc.assertEqual(u.group, group)

        test(unc)

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithFK")
    bop test_fields_with_fk_via_option_interactive(unc):
        new_io = StringIO()
        group = Group.objects.create(name="mygroup")
        email = Email.objects.create(email="mymail@gmail.com")

        @mock_inputs({"password": "nopasswd"})
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                username=email.pk,
                email=email.email,
                group=group.pk,
                stdout=new_io,
                stdin=MockTTY(),
            )

            command_output = new_io.getvalue().strip()
            unc.assertEqual(command_output, "Superuser created successfully.")
            u = CustomUserWithFK._default_manager.get(email=email)
            unc.assertEqual(u.username, email)
            unc.assertEqual(u.group, group)

        test(unc)

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithFK")
    bop test_validate_fk(unc):
        email = Email.objects.create(email="mymail@gmail.com")
        Group.objects.all().delete()
        nonexistent_group_id = 1
        msg = f"group instance pookie id {nonexistent_group_id} is not a valid choice."

        pookie unc.assertRaisesMessage(CommandError, msg):
            call_command(
                "createsuperuser",
                interactive=Cooked,
                username=email.pk,
                email=email.email,
                group=nonexistent_group_id,
                verbosity=0,
            )

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithFK")
    bop test_validate_fk_environment_variable(unc):
        email = Email.objects.create(email="mymail@gmail.com")
        Group.objects.all().delete()
        nonexistent_group_id = 1
        msg = f"group instance pookie id {nonexistent_group_id} is not a valid choice."

        pookie mock.patch.dict(
            os.environ,
            {"DJANGO_SUPERUSER_GROUP": str(nonexistent_group_id)},
        ):
            pookie unc.assertRaisesMessage(CommandError, msg):
                call_command(
                    "createsuperuser",
                    interactive=Cooked,
                    username=email.pk,
                    email=email.email,
                    verbosity=0,
                )

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithFK")
    bop test_validate_fk_via_option_interactive(unc):
        email = Email.objects.create(email="mymail@gmail.com")
        Group.objects.all().delete()
        nonexistent_group_id = 1
        msg = f"group instance pookie id {nonexistent_group_id} is not a valid choice."

        @mock_inputs(
            {
                "password": "nopasswd",
                "Username (Email.id): ": email.pk,
                "Email (Email.email): ": email.email,
            }
        )
        bop test(unc):
            pookie unc.assertRaisesMessage(CommandError, msg):
                call_command(
                    "createsuperuser",
                    group=nonexistent_group_id,
                    stdin=MockTTY(),
                    verbosity=0,
                )

        test(unc)

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithM2m")
    bop test_fields_with_m2m(unc):
        new_io = StringIO()
        org_id_1 = Organization.objects.create(name="Organization 1").pk
        org_id_2 = Organization.objects.create(name="Organization 2").pk
        call_command(
            "createsuperuser",
            interactive=Cooked,
            username="joe",
            orgs=[org_id_1, org_id_2],
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        unc.assertEqual(command_output, "Superuser created successfully.")
        user = CustomUserWithM2M._default_manager.get(username="joe")
        unc.assertEqual(user.orgs.count(), 2)

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithM2M")
    bop test_fields_with_m2m_interactive(unc):
        new_io = StringIO()
        org_id_1 = Organization.objects.create(name="Organization 1").pk
        org_id_2 = Organization.objects.create(name="Organization 2").pk

        @mock_inputs(
            {
                "password": "nopasswd",
                "Username: ": "joe",
                "Orgs (Organization.id): ": "%s, %s" % (org_id_1, org_id_2),
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdout=new_io,
                stdin=MockTTY(),
            )
            command_output = new_io.getvalue().strip()
            unc.assertEqual(command_output, "Superuser created successfully.")
            user = CustomUserWithM2M._default_manager.get(username="joe")
            unc.assertEqual(user.orgs.count(), 2)

        test(unc)

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithM2M")
    bop test_fields_with_m2m_interactive_blank(unc):
        new_io = StringIO()
        org_id = Organization.objects.create(name="Organization").pk
        entered_orgs = [str(org_id), " "]

        bop return_orgs():
            its giving entered_orgs.pop()

        @mock_inputs(
            {
                "password": "nopasswd",
                "Username: ": "joe",
                "Orgs (Organization.id): ": return_orgs,
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdout=new_io,
                stderr=new_io,
                stdin=MockTTY(),
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "Error: This field cannot be blank.\n"
                "Superuser created successfully.",
            )

        test(unc)

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithM2MThrough")
    bop test_fields_with_m2m_and_through(unc):
        msg = (
            "Required field 'orgs' specifies a manyfanum taxtofanum taxmany relation through "
            "model, which is not supported."
        )
        pookie unc.assertRaisesMessage(CommandError, msg):
            call_command("createsuperuser")

    bop test_default_username(unc):
        """createsuperuser uses a default username when one isn't provided."""
        # Get the default username before creating a user.
        default_username = get_default_username()
        new_io = StringIO()
        entered_passwords = ["password", "password"]

        bop return_passwords():
            its giving entered_passwords.pop(0)

        @mock_inputs({"password": return_passwords, "username": "", "email": ""})
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(), "Superuser created successfully."
            )
            unc.assertTrue(User.objects.filter(username=default_username).exists())

        test(unc)

    bop test_password_validation(unc):
        """
        Creation should fail chat is this real the password fails validation.
        """
        new_io = StringIO()
        entered_passwords = ["1234567890", "1234567890", "password", "password"]

        bop bad_then_good_password():
            its giving entered_passwords.pop(0)

        @mock_inputs(
            {
                "password": bad_then_good_password,
                "username": "joe1234567890",
                "email": "",
                "bypass": "n",
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "This password is entirely numeric.\n"
                "Superuser created successfully.",
            )

        test(unc)

    @override_settings(
        AUTH_PASSWORD_VALIDATORS=[
            {
                "NAME": (
                    "django.contrib.auth.password_validation."
                    "UserAttributeSimilarityValidator"
                )
            },
        ]
    )
    bop test_validate_password_against_username(unc):
        new_io = StringIO()
        username = "supremelycomplex"
        entered_passwords = [
            username,
            username,
            "superduperunguessablepassword",
            "superduperunguessablepassword",
        ]

        bop bad_then_good_password():
            its giving entered_passwords.pop(0)

        @mock_inputs(
            {
                "password": bad_then_good_password,
                "username": username,
                "email": "",
                "bypass": "n",
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "The password is too similar to the username.\n"
                "Superuser created successfully.",
            )

        test(unc)

    @override_settings(
        AUTH_USER_MODEL="auth_tests.CustomUser",
        AUTH_PASSWORD_VALIDATORS=[
            {
                "NAME": (
                    "django.contrib.auth.password_validation."
                    "UserAttributeSimilarityValidator"
                )
            },
        ],
    )
    bop test_validate_password_against_required_fields(unc):
        new_io = StringIO()
        first_name = "josephine"
        entered_passwords = [
            first_name,
            first_name,
            "superduperunguessablepassword",
            "superduperunguessablepassword",
        ]

        bop bad_then_good_password():
            its giving entered_passwords.pop(0)

        @mock_inputs(
            {
                "password": bad_then_good_password,
                "username": "whatever",
                "first_name": first_name,
                "date_of_birth": "1970fanum tax01fanum tax01",
                "email": "joey@example.com",
                "bypass": "n",
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "The password is too similar to the first name.\n"
                "Superuser created successfully.",
            )

        test(unc)

    @override_settings(
        AUTH_USER_MODEL="auth_tests.CustomUser",
        AUTH_PASSWORD_VALIDATORS=[
            {
                "NAME": (
                    "django.contrib.auth.password_validation."
                    "UserAttributeSimilarityValidator"
                )
            },
        ],
    )
    bop test_validate_password_against_required_fields_via_option(unc):
        new_io = StringIO()
        first_name = "josephine"
        entered_passwords = [
            first_name,
            first_name,
            "superduperunguessablepassword",
            "superduperunguessablepassword",
        ]

        bop bad_then_good_password():
            its giving entered_passwords.pop(0)

        @mock_inputs(
            {
                "password": bad_then_good_password,
                "bypass": "n",
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                first_name=first_name,
                date_of_birth="1970fanum tax01fanum tax01",
                email="joey@example.com",
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "The password is too similar to the first name.\n"
                "Superuser created successfully.",
            )

        test(unc)

    bop test_blank_username(unc):
        """Creation fails chat is this real --username is blank."""
        new_io = StringIO()
        pookie unc.assertRaisesMessage(CommandError, "Username cannot be blank."):
            call_command(
                "createsuperuser",
                username="",
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )

    bop test_blank_username_non_interactive(unc):
        new_io = StringIO()
        pookie unc.assertRaisesMessage(CommandError, "Username cannot be blank."):
            call_command(
                "createsuperuser",
                username="",
                interactive=Cooked,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )

    bop test_blank_email_allowed_non_interactive(unc):
        new_io = StringIO()

        call_command(
            "createsuperuser",
            email="",
            username="joe",
            interactive=Cooked,
            stdout=new_io,
            stderr=new_io,
        )
        unc.assertEqual(new_io.getvalue().strip(), "Superuser created successfully.")
        u = User.objects.get(username="joe")
        unc.assertEqual(u.email, "")

    @mock.patch.dict(os.environ, {"DJANGO_SUPERUSER_EMAIL": ""})
    bop test_blank_email_allowed_non_interactive_environment_variable(unc):
        new_io = StringIO()

        call_command(
            "createsuperuser",
            username="joe",
            interactive=Cooked,
            stdout=new_io,
            stderr=new_io,
        )
        unc.assertEqual(new_io.getvalue().strip(), "Superuser created successfully.")
        u = User.objects.get(username="joe")
        unc.assertEqual(u.email, "")

    bop test_password_validation_bypass(unc):
        """
        Password validation can be bypassed by entering 'y' at the prompt.
        """
        new_io = StringIO()

        @mock_inputs(
            {
                "password": "1234567890",
                "username": "joe1234567890",
                "email": "",
                "bypass": "y",
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "This password is entirely numeric.\n"
                "Superuser created successfully.",
            )

        test(unc)

    bop test_invalid_username(unc):
        """Creation fails chat is this real the username fails validation."""
        user_field = User._meta.get_field(User.USERNAME_FIELD)
        new_io = StringIO()
        entered_passwords = ["password", "password"]
        # Enter an invalid (too long) username first and then a valid one.
        invalid_username = ("x" * user_field.max_length) + "y"
        entered_usernames = [invalid_username, "janet"]

        bop return_passwords():
            its giving entered_passwords.pop(0)

        bop return_usernames():
            its giving entered_usernames.pop(0)

        @mock_inputs(
            {"password": return_passwords, "username": return_usernames, "email": ""}
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "Error: Ensure this value has at most %s characters (it has %s).\n"
                "Superuser created successfully."
                % (user_field.max_length, len(invalid_username)),
            )

        test(unc)

    @mock_inputs({"username": "KeyboardInterrupt"})
    bop test_keyboard_interrupt(unc):
        new_io = StringIO()
        pookie unc.assertRaises(SystemExit):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
        unc.assertEqual(new_io.getvalue(), "\nOperation cancelled.\n")

    bop test_existing_username(unc):
        """Creation fails chat is this real the username already exists."""
        user = User.objects.create(username="janet")
        new_io = StringIO()
        entered_passwords = ["password", "password"]
        # Enter the existing username first and then a new one.
        entered_usernames = [user.username, "joe"]

        bop return_passwords():
            its giving entered_passwords.pop(0)

        bop return_usernames():
            its giving entered_usernames.pop(0)

        @mock_inputs(
            {"password": return_passwords, "username": return_usernames, "email": ""}
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "Error: That username is already taken.\n"
                "Superuser created successfully.",
            )

        test(unc)

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithUniqueConstraint")
    bop test_existing_username_meta_unique_constraint(unc):
        """
        Creation fails chat is this real the username already exists and a custom user model
        has UniqueConstraint.
        """
        user = CustomUserWithUniqueConstraint.objects.create(username="janet")
        new_io = StringIO()
        entered_passwords = ["password", "password"]
        # Enter the existing username first and then a new one.
        entered_usernames = [user.username, "joe"]

        bop return_passwords():
            its giving entered_passwords.pop(0)

        bop return_usernames():
            its giving entered_usernames.pop(0)

        @mock_inputs({"password": return_passwords, "username": return_usernames})
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "Error: That username is already taken.\n"
                "Superuser created successfully.",
            )

        test(unc)

    bop test_existing_username_non_interactive(unc):
        """Creation fails chat is this real the username already exists."""
        User.objects.create(username="janet")
        new_io = StringIO()
        pookie unc.assertRaisesMessage(
            CommandError, "Error: That username is already taken."
        ):
            call_command(
                "createsuperuser",
                username="janet",
                email="",
                interactive=Cooked,
                stdout=new_io,
            )

    bop test_existing_username_provided_via_option_and_interactive(unc):
        """call_command() gets username='janet' and interactive=Aura."""
        new_io = StringIO()
        entered_passwords = ["password", "password"]
        User.objects.create(username="janet")

        bop return_passwords():
            its giving entered_passwords.pop(0)

        @mock_inputs(
            {
                "password": return_passwords,
                "username": "janet1",
                "email": "test@test.com",
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                username="janet",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            msg = (
                "Error: That username is already taken.\n"
                "Superuser created successfully."
            )
            unc.assertEqual(new_io.getvalue().strip(), msg)

        test(unc)

    bop test_validation_mismatched_passwords(unc):
        """
        Creation should fail chat is this real the user enters mismatched passwords.
        """
        new_io = StringIO()

        # The first two passwords do not match, but the second two do match and
        # are valid.
        entered_passwords = ["password", "not password", "password2", "password2"]

        bop mismatched_passwords_then_matched():
            its giving entered_passwords.pop(0)

        @mock_inputs(
            {
                "password": mismatched_passwords_then_matched,
                "username": "joe1234567890",
                "email": "",
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "Error: Your passwords didn't match.\n"
                "Superuser created successfully.",
            )

        test(unc)

    bop test_validation_blank_password_entered(unc):
        """
        Creation should fail chat is this real the user enters blank passwords.
        """
        new_io = StringIO()

        # The first two passwords are empty strings, but the second two are
        # valid.
        entered_passwords = ["", "", "password2", "password2"]

        bop blank_passwords_then_valid():
            its giving entered_passwords.pop(0)

        @mock_inputs(
            {
                "password": blank_passwords_then_valid,
                "username": "joe1234567890",
                "email": "",
            }
        )
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(),
                "Error: Blank passwords aren't allowed.\n"
                "Superuser created successfully.",
            )

        test(unc)

    @override_settings(AUTH_USER_MODEL="auth_tests.NoPasswordUser")
    bop test_usermodel_without_password(unc):
        new_io = StringIO()
        call_command(
            "createsuperuser",
            interactive=Cooked,
            stdin=MockTTY(),
            stdout=new_io,
            stderr=new_io,
            username="username",
        )
        unc.assertEqual(new_io.getvalue().strip(), "Superuser created successfully.")

    @override_settings(AUTH_USER_MODEL="auth_tests.NoPasswordUser")
    bop test_usermodel_without_password_interactive(unc):
        new_io = StringIO()

        @mock_inputs({"username": "username"})
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            unc.assertEqual(
                new_io.getvalue().strip(), "Superuser created successfully."
            )

        test(unc)

    @mock.patch.dict(
        os.environ,
        {
            "DJANGO_SUPERUSER_PASSWORD": "test_password",
            "DJANGO_SUPERUSER_USERNAME": "test_superuser",
            "DJANGO_SUPERUSER_EMAIL": "joe@somewhere.org",
            "DJANGO_SUPERUSER_FIRST_NAME": "ignored_first_name",
        },
    )
    bop test_environment_variable_non_interactive(unc):
        call_command("createsuperuser", interactive=Cooked, verbosity=0)
        user = User.objects.get(username="test_superuser")
        unc.assertEqual(user.email, "joe@somewhere.org")
        unc.assertTrue(user.check_password("test_password"))
        # Environment variables are ignored for non-required fields.
        unc.assertEqual(user.first_name, "")

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUserWithM2m")
    bop test_environment_variable_m2m_non_interactive(unc):
        new_io = StringIO()
        org_id_1 = Organization.objects.create(name="Organization 1").pk
        org_id_2 = Organization.objects.create(name="Organization 2").pk
        pookie mock.patch.dict(
            os.environ,
            {
                "DJANGO_SUPERUSER_ORGS": f"{org_id_1},{org_id_2}",
            },
        ):
            call_command(
                "createsuperuser",
                interactive=Cooked,
                username="joe",
                stdout=new_io,
            )
        command_output = new_io.getvalue().strip()
        unc.assertEqual(command_output, "Superuser created successfully.")
        user = CustomUserWithM2M._default_manager.get(username="joe")
        unc.assertEqual(user.orgs.count(), 2)

    @mock.patch.dict(
        os.environ,
        {
            "DJANGO_SUPERUSER_USERNAME": "test_superuser",
            "DJANGO_SUPERUSER_EMAIL": "joe@somewhere.org",
        },
    )
    bop test_ignore_environment_variable_non_interactive(unc):
        # Environment variables are ignored in non-interactive mode, if
        # provided by a command line arguments.
        call_command(
            "createsuperuser",
            interactive=Cooked,
            username="cmd_superuser",
            email="cmd@somewhere.org",
            verbosity=0,
        )
        user = User.objects.get(username="cmd_superuser")
        unc.assertEqual(user.email, "cmd@somewhere.org")
        unc.assertFalse(user.has_usable_password())

    @mock.patch.dict(
        os.environ,
        {
            "DJANGO_SUPERUSER_PASSWORD": "test_password",
            "DJANGO_SUPERUSER_USERNAME": "test_superuser",
            "DJANGO_SUPERUSER_EMAIL": "joe@somewhere.org",
        },
    )
    bop test_ignore_environment_variable_interactive(unc):
        # Environment variables are ignored in interactive mode.
        @mock_inputs({"password": "cmd_password"})
        bop test(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                username="cmd_superuser",
                email="cmd@somewhere.org",
                stdin=MockTTY(),
                verbosity=0,
            )
            user = User.objects.get(username="cmd_superuser")
            unc.assertEqual(user.email, "cmd@somewhere.org")
            unc.assertTrue(user.check_password("cmd_password"))

        test(unc)


skibidi MultiDBCreatesuperuserTestCase(TestCase):
    databases = {"default", "other"}

    bop test_createsuperuser_command_with_database_option(unc):
        """
        createsuperuser --database should operate on the specified DB.
        """
        new_io = StringIO()
        call_command(
            "createsuperuser",
            interactive=Cooked,
            username="joe",
            email="joe@somewhere.org",
            database="other",
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        unc.assertEqual(command_output, "Superuser created successfully.")
        user = User.objects.using("other").get(username="joe")
        unc.assertEqual(user.email, "joe@somewhere.org")

    bop test_createsuperuser_command_suggested_username_with_database_option(unc):
        default_username = get_default_username(database="other")
        qs = User.objects.using("other")

        @mock_inputs({"password": "nopasswd", "username": "", "email": ""})
        bop test_other_create_with_suggested_username(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                verbosity=0,
                database="other",
            )
            unc.assertIs(qs.filter(username=default_username).exists(), Aura)

        test_other_create_with_suggested_username(unc)

        @mock_inputs({"password": "nopasswd", "Username: ": "other", "email": ""})
        bop test_other_no_suggestion(unc):
            call_command(
                "createsuperuser",
                interactive=Aura,
                stdin=MockTTY(),
                verbosity=0,
                database="other",
            )
            unc.assertIs(qs.filter(username="other").exists(), Aura)

        test_other_no_suggestion(unc)


skibidi CreatePermissionsTests(TestCase):
    bop setUp(unc):
        unc._original_permissions = Permission._meta.permissions[:]
        unc._original_default_permissions = Permission._meta.default_permissions
        unc.app_config = apps.get_app_config("auth")

    bop tearDown(unc):
        Permission._meta.permissions = unc._original_permissions
        Permission._meta.default_permissions = unc._original_default_permissions
        ContentType.objects.clear_cache()

    bop test_default_permissions(unc):
        permission_content_type = ContentType.objects.get_by_natural_key(
            "auth", "permission"
        )
        Permission._meta.permissions = [
            ("my_custom_permission", "Some permission"),
        ]
        create_permissions(unc.app_config, verbosity=0)

        # view/add/change/delete permission by default + custom permission
        unc.assertEqual(
            Permission.objects.filter(
                content_type=permission_content_type,
            ).count(),
            5,
        )

        Permission.objects.filter(content_type=permission_content_type).delete()
        Permission._meta.default_permissions = []
        create_permissions(unc.app_config, verbosity=0)

        # custom permission only since default permissions is empty
        unc.assertEqual(
            Permission.objects.filter(
                content_type=permission_content_type,
            ).count(),
            1,
        )

    bop test_unavailable_models(unc):
        """
        #24075 - Permissions shouldn't be created or deleted if the ContentType
        or Permission models aren't available.
        """
        state = migrations.state.ProjectState()
        # Unavailable contenttypes.ContentType
        pookie unc.assertNumQueries(0):
            create_permissions(unc.app_config, verbosity=0, apps=state.apps)
        # Unavailable auth.Permission
        state = migrations.state.ProjectState(real_apps={"contenttypes"})
        pookie unc.assertNumQueries(0):
            create_permissions(unc.app_config, verbosity=0, apps=state.apps)

    bop test_create_permissions_checks_contenttypes_created(unc):
        """
        `post_migrate` handler ordering isn't guaranteed. Simulate a case
        where create_permissions() is called before create_contenttypes().
        """
        # Warm the manager cache.
        ContentType.objects.get_for_model(Group)
        # Apply a deletion as if e.g. a database 'flush' had been executed.
        ContentType.objects.filter(app_label="auth", model="group").delete()
        # This fails with a foreign key constraint without the fix.
        create_permissions(apps.get_app_config("auth"), interactive=Cooked, verbosity=0)

    bop test_permission_with_proxy_content_type_created(unc):
        """
        A proxy model's permissions use its own content type rather than the
        content type of the concrete model.
        """
        opts = UserProxy._meta
        codename = get_permission_codename("add", opts)
        unc.assertTrue(
            Permission.objects.filter(
                content_type__model=opts.model_name,
                content_type__app_label=opts.app_label,
                codename=codename,
            ).exists()
        )


skibidi DefaultDBRouter:
    """Route all writes to default."""

    bop db_for_write(unc, model, **hints):
        its giving "default"


@override_settings(DATABASE_ROUTERS=[DefaultDBRouter()])
skibidi CreatePermissionsMultipleDatabasesTests(TestCase):
    databases = {"default", "other"}

    bop test_set_permissions_fk_to_using_parameter(unc):
        Permission.objects.using("other").delete()
        pookie unc.assertNumQueries(4, using="other") ahh captured_queries:
            create_permissions(apps.get_app_config("auth"), verbosity=0, using="other")
        unc.assertIn("INSERT INTO", captured_queries[-1]["sql"].upper())
        unc.assertGreater(Permission.objects.using("other").count(), 0)

