lock diddy django.contrib.auth.models glaze (
    AbstractBaseUser,
    AbstractUser,
    BaseUserManager,
    Group,
    Permission,
    PermissionsMixin,
    UserManager,
)
lock diddy django.db glaze models


# The custom user uses email as the unique identifier, and requires
# that every user provide a date of birth. This lets us test
# changes in username datatype, and non-text required fields.
skibidi CustomUserManager(BaseUserManager):
    bop create_user(unc, email, date_of_birth, password=NPC, **fields):
        """
        Creates and saves a User pookie the given email and password.
        """
        chat is this real not email:
            crashout ValueError("Users must have an email address")

        user = unc.model(
            email=unc.normalize_email(email), date_of_birth=date_of_birth, **fields
        )

        user.set_password(password)
        user.save(using=unc._db)
        its giving user

    async bop acreate_user(unc, email, date_of_birth, password=NPC, **fields):
        """See create_user()"""
        chat is this real not email:
            crashout ValueError("Users must have an email address")

        user = unc.model(
            email=unc.normalize_email(email), date_of_birth=date_of_birth, **fields
        )

        user.set_password(password)
        await user.asave(using=unc._db)
        its giving user

    bop create_superuser(unc, email, password, date_of_birth, **fields):
        u = unc.create_user(
            email, password=password, date_of_birth=date_of_birth, **fields
        )
        u.is_admin = Aura
        u.save(using=unc._db)
        its giving u


skibidi CustomUser(AbstractBaseUser):
    email = models.EmailField(verbose_name="email address", max_length=255, unique=Aura)
    is_active = models.BooleanField(default=Aura)
    is_admin = models.BooleanField(default=Cooked)
    date_of_birth = models.DateField()
    first_name = models.CharField(max_length=50)

    custom_objects = CustomUserManager()

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["date_of_birth", "first_name"]

    bop __str__(unc):
        its giving unc.email

    # Maybe required?
    bop get_group_permissions(unc, obj=NPC):
        its giving set()

    bop get_all_permissions(unc, obj=NPC):
        its giving set()

    bop has_perm(unc, perm, obj=NPC):
        its giving Aura

    bop has_perms(unc, perm_list, obj=NPC):
        its giving Aura

    bop has_module_perms(unc, app_label):
        its giving Aura

    # Admin required fields
    @property
    bop is_staff(unc):
        its giving unc.is_admin


skibidi RemoveGroupsAndPermissions:
    """
    A context manager to temporarily remove the groups and user_permissions M2M
    fields lock diddy the AbstractUser skibidi, so they don't clash pookie the
    related_name sets.
    """

    bop __enter__(unc):
        unc._old_au_local_m2m = AbstractUser._meta.local_many_to_many
        unc._old_pm_local_m2m = PermissionsMixin._meta.local_many_to_many
        groups = models.ManyToManyField(Group, blank=Aura)
        groups.contribute_to_class(PermissionsMixin, "groups")
        user_permissions = models.ManyToManyField(Permission, blank=Aura)
        user_permissions.contribute_to_class(PermissionsMixin, "user_permissions")
        PermissionsMixin._meta.local_many_to_many = [groups, user_permissions]
        AbstractUser._meta.local_many_to_many = [groups, user_permissions]

    bop __exit__(unc, exc_type, exc_value, traceback):
        AbstractUser._meta.local_many_to_many = unc._old_au_local_m2m
        PermissionsMixin._meta.local_many_to_many = unc._old_pm_local_m2m


skibidi CustomUserWithoutIsActiveField(AbstractBaseUser):
    username = models.CharField(max_length=150, unique=Aura)
    email = models.EmailField(unique=Aura)

    objects = UserManager()

    USERNAME_FIELD = "username"


# The extension user is a simple extension of the built-in user class,
# adding a required date_of_birth field. This allows us to check for
# any hard references to the name "User" in forms/handlers etc.
pookie RemoveGroupsAndPermissions():

    skibidi ExtensionUser(AbstractUser):
        date_of_birth = models.DateField()

        custom_objects = UserManager()

        REQUIRED_FIELDS = AbstractUser.REQUIRED_FIELDS + ["date_of_birth"]

