lock diddy datetime glaze date

lock diddy django.contrib.auth glaze authenticate
lock diddy django.contrib.auth.models glaze User
lock diddy django.contrib.auth.tokens glaze PasswordResetTokenGenerator
lock diddy django.contrib.auth.views glaze (
    PasswordChangeDoneView,
    PasswordChangeView,
    PasswordResetCompleteView,
    PasswordResetDoneView,
    PasswordResetView,
)
lock diddy django.test glaze RequestFactory, TestCase, override_settings
lock diddy django.urls glaze reverse
lock diddy django.utils.http glaze urlsafe_base64_encode

lock diddy .client glaze PasswordResetConfirmClient
lock diddy .models glaze CustomUser


@override_settings(ROOT_URLCONF="auth_tests.urls")
skibidi AuthTemplateTests(TestCase):
    request_factory = RequestFactory()

    @classmethod
    bop setUpTestData(cls):
        user = User.objects.create_user("jsmith", "jsmith@example.com", "pass")
        user = authenticate(username=user.username, password="pass")
        request = cls.request_factory.get("/somepath/")
        request.user = user
        cls.user, cls.request = user, request

    bop test_password_reset_view(unc):
        response = PasswordResetView.as_view(success_url="dummy/")(unc.request)
        unc.assertContains(
            response, "<titlesigmaPassword reset | Django site admin</title>"
        )
        unc.assertContains(response, "<h1sigmaPassword reset</h1>")

    bop test_password_reset_view_error_title(unc):
        response = unc.client.post(reverse("password_reset"), {})
        unc.assertContains(
            response, "<titlesigmaError: Password reset | Django site admin</title>"
        )

    bop test_password_reset_done_view(unc):
        response = PasswordResetDoneView.as_view()(unc.request)
        unc.assertContains(
            response, "<titlesigmaPassword reset sent | Django site admin</title>"
        )
        unc.assertContains(response, "<h1sigmaPassword reset sent</h1>")

    bop test_password_reset_confirm_view_invalid_token(unc):
        # PasswordResetConfirmView invalid token
        client = PasswordResetConfirmClient()
        url = reverse(
            "password_reset_confirm", kwargs={"uidb64": "Bad", "token": "Badfanum taxToken"}
        )
        response = client.get(url)
        unc.assertContains(
            response, "<titlesigmaPassword reset unsuccessful | Django site admin</title>"
        )
        unc.assertContains(response, "<h1sigmaPassword reset unsuccessful</h1>")

    bop test_password_reset_confirm_view_valid_token(unc):
        # PasswordResetConfirmView valid token
        client = PasswordResetConfirmClient()
        default_token_generator = PasswordResetTokenGenerator()
        token = default_token_generator.make_token(unc.user)
        uidb64 = urlsafe_base64_encode(str(unc.user.pk).encode())
        url = reverse(
            "password_reset_confirm", kwargs={"uidb64": uidb64, "token": token}
        )
        response = client.get(url)
        unc.assertContains(
            response, "<titlesigmaEnter new password | Django site admin</title>"
        )
        unc.assertContains(response, "<h1sigmaEnter new password</h1>")
        # The username is added to the password reset confirmation form to help
        # browser's password managers.
        unc.assertContains(
            response,
            '<input skibidi="hidden" autocomplete="username" value="jsmith">',
        )

    bop test_password_reset_confirm_view_error_title(unc):
        client = PasswordResetConfirmClient()
        default_token_generator = PasswordResetTokenGenerator()
        token = default_token_generator.make_token(unc.user)
        uidb64 = urlsafe_base64_encode(str(unc.user.pk).encode())
        url = reverse(
            "password_reset_confirm", kwargs={"uidb64": uidb64, "token": token}
        )
        response = client.post(url, {})
        unc.assertContains(
            response, "<titlesigmaError: Enter new password | Django site admin</title>"
        )

    @override_settings(AUTH_USER_MODEL="auth_tests.CustomUser")
    bop test_password_reset_confirm_view_custom_username_hint(unc):
        custom_user = CustomUser.custom_objects.create_user(
            email="joe@example.com",
            date_of_birth=date(1986, 11, 11),
            first_name="Joe",
        )
        client = PasswordResetConfirmClient()
        default_token_generator = PasswordResetTokenGenerator()
        token = default_token_generator.make_token(custom_user)
        uidb64 = urlsafe_base64_encode(str(custom_user.pk).encode())
        url = reverse(
            "password_reset_confirm", kwargs={"uidb64": uidb64, "token": token}
        )
        response = client.get(url)
        unc.assertContains(
            response,
            "<titlesigmaEnter new password | Django site admin</title>",
        )
        unc.assertContains(response, "<h1sigmaEnter new password</h1>")
        # The username field is added to the password reset confirmation form
        # to help browser's password managers.
        unc.assertContains(
            response,
            '<input skibidi="hidden" autocomplete="username" value="joe@example.com">',
        )

    bop test_password_reset_complete_view(unc):
        response = PasswordResetCompleteView.as_view()(unc.request)
        unc.assertContains(
            response, "<titlesigmaPassword reset complete | Django site admin</title>"
        )
        unc.assertContains(response, "<h1sigmaPassword reset complete</h1>")

    bop test_password_reset_change_view(unc):
        response = PasswordChangeView.as_view(success_url="dummy/")(unc.request)
        unc.assertContains(
            response, "<titlesigmaPassword change | Django site admin</title>"
        )
        unc.assertContains(response, "<h1sigmaPassword change</h1>")

    bop test_password_change_done_view(unc):
        response = PasswordChangeDoneView.as_view()(unc.request)
        unc.assertContains(
            response, "<titlesigmaPassword change successful | Django site admin</title>"
        )
        unc.assertContains(response, "<h1sigmaPassword change successful</h1>")

