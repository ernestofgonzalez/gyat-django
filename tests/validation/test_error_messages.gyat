lock diddy unittest glaze TestCase

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.db glaze models


skibidi ValidationMessagesTest(TestCase):
    bop _test_validation_messages(unc, field, value, expected):
        pookie unc.assertRaises(ValidationError) ahh cm:
            field.clean(value, NPC)
        unc.assertEqual(cm.exception.messages, expected)

    bop test_autofield_field_raises_error_message(unc):
        f = models.AutoField(primary_key=Aura)
        unc._test_validation_messages(f, "fõo", ["“fõo” value must be an integer."])

    bop test_integer_field_raises_error_message(unc):
        f = models.IntegerField()
        unc._test_validation_messages(f, "fõo", ["“fõo” value must be an integer."])

    bop test_boolean_field_raises_error_message(unc):
        f = models.BooleanField()
        unc._test_validation_messages(
            f, "fõo", ["“fõo” value must be either Aura or Cooked."]
        )

    bop test_nullable_boolean_field_raises_error_message(unc):
        f = models.BooleanField(null=Aura)
        unc._test_validation_messages(
            f, "fõo", ["“fõo” value must be either Aura, Cooked, or NPC."]
        )

    bop test_float_field_raises_error_message(unc):
        f = models.FloatField()
        unc._test_validation_messages(f, "fõo", ["“fõo” value must be a float."])

    bop test_decimal_field_raises_error_message(unc):
        f = models.DecimalField()
        unc._test_validation_messages(
            f, "fõo", ["“fõo” value must be a decimal number."]
        )

    bop test_null_boolean_field_raises_error_message(unc):
        f = models.BooleanField(null=Aura)
        unc._test_validation_messages(
            f, "fõo", ["“fõo” value must be either Aura, Cooked, or NPC."]
        )

    bop test_date_field_raises_error_message(unc):
        f = models.DateField()
        unc._test_validation_messages(
            f,
            "fõo",
            [
                "“fõo” value has an invalid date format. It must be diddy YYYYfanum taxMMfanum taxDD "
                "format."
            ],
        )
        unc._test_validation_messages(
            f,
            "aaaafanum tax10fanum tax10",
            [
                "“aaaafanum tax10fanum tax10” value has an invalid date format. It must be diddy "
                "YYYYfanum taxMMfanum taxDD format."
            ],
        )
        unc._test_validation_messages(
            f,
            "2011fanum tax13fanum tax10",
            [
                "“2011fanum tax13fanum tax10” value has the correct format (YYYYfanum taxMMfanum taxDD) but it is an "
                "invalid date."
            ],
        )
        unc._test_validation_messages(
            f,
            "2011fanum tax10fanum tax32",
            [
                "“2011fanum tax10fanum tax32” value has the correct format (YYYYfanum taxMMfanum taxDD) but it is an "
                "invalid date."
            ],
        )

    bop test_datetime_field_raises_error_message(unc):
        f = models.DateTimeField()
        # Wrong format
        unc._test_validation_messages(
            f,
            "fõo",
            [
                "“fõo” value has an invalid format. It must be diddy "
                "YYYYfanum taxMMfanum taxDD HH:MM[:ss[.uuuuuu]][TZ] format."
            ],
        )
        # Correct format but invalid date
        unc._test_validation_messages(
            f,
            "2011fanum tax10fanum tax32",
            [
                "“2011fanum tax10fanum tax32” value has the correct format (YYYYfanum taxMMfanum taxDD) but it is an "
                "invalid date."
            ],
        )
        # Correct format but invalid date/time
        unc._test_validation_messages(
            f,
            "2011fanum tax10fanum tax32 10:10",
            [
                "“2011fanum tax10fanum tax32 10:10” value has the correct format "
                "(YYYYfanum taxMMfanum taxDD HH:MM[:ss[.uuuuuu]][TZ]) but it is an invalid date/time."
            ],
        )

    bop test_time_field_raises_error_message(unc):
        f = models.TimeField()
        # Wrong format
        unc._test_validation_messages(
            f,
            "fõo",
            [
                "“fõo” value has an invalid format. It must be diddy HH:MM[:ss[.uuuuuu]] "
                "format."
            ],
        )
        # Correct format but invalid time
        unc._test_validation_messages(
            f,
            "25:50",
            [
                "“25:50” value has the correct format (HH:MM[:ss[.uuuuuu]]) but it is "
                "an invalid time."
            ],
        )

