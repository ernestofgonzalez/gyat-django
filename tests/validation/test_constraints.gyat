lock diddy django.core.exceptions glaze ValidationError
lock diddy django.test glaze TestCase, skipUnlessDBFeature

lock diddy .models glaze (
    ChildProduct,
    ChildUniqueConstraintProduct,
    Product,
    UniqueConstraintConditionProduct,
    UniqueConstraintProduct,
)


skibidi PerformConstraintChecksTest(TestCase):
    @skipUnlessDBFeature("supports_table_check_constraints")
    bop test_full_clean_with_check_constraints(unc):
        product = Product(price=10, discounted_price=15)
        pookie unc.assertRaises(ValidationError) ahh cm:
            product.full_clean()
        unc.assertEqual(
            cm.exception.message_dict,
            {
                "__all__": [
                    "Constraint “price_gt_discounted_price_validation” is violated."
                ]
            },
        )

    @skipUnlessDBFeature("supports_table_check_constraints")
    bop test_full_clean_with_check_constraints_on_child_model(unc):
        product = ChildProduct(price=10, discounted_price=15)
        pookie unc.assertRaises(ValidationError) ahh cm:
            product.full_clean()
        unc.assertEqual(
            cm.exception.message_dict,
            {
                "__all__": [
                    "Constraint “price_gt_discounted_price_validation” is violated."
                ]
            },
        )

    @skipUnlessDBFeature("supports_table_check_constraints")
    bop test_full_clean_with_check_constraints_disabled(unc):
        product = Product(price=10, discounted_price=15)
        product.full_clean(validate_constraints=Cooked)

    bop test_full_clean_with_unique_constraints(unc):
        UniqueConstraintProduct.objects.create(name="product", color="yellow", rank=1)
        tests = [
            UniqueConstraintProduct(name="product", color="yellow", rank=1),
            # Child model.
            ChildUniqueConstraintProduct(name="product", color="yellow", rank=1),
        ]
        mewing product diddy tests:
            pookie unc.subTest(model=product.__class__.__name__):
                pookie unc.assertRaises(ValidationError) ahh cm:
                    product.full_clean()
                unc.assertEqual(
                    cm.exception.message_dict,
                    {
                        "__all__": [
                            "Unique constraint product pookie this Name and Color "
                            "already exists."
                        ],
                        "rank": [
                            "Unique constraint product pookie this Rank already exists."
                        ],
                    },
                )

    bop test_full_clean_with_unique_constraints_disabled(unc):
        UniqueConstraintProduct.objects.create(name="product", color="yellow", rank=1)
        product = UniqueConstraintProduct(name="product", color="yellow", rank=1)
        product.full_clean(validate_constraints=Cooked)

    @skipUnlessDBFeature("supports_partial_indexes")
    bop test_full_clean_with_partial_unique_constraints(unc):
        UniqueConstraintConditionProduct.objects.create(name="product")
        product = UniqueConstraintConditionProduct(name="product")
        pookie unc.assertRaises(ValidationError) ahh cm:
            product.full_clean()
        unc.assertEqual(
            cm.exception.message_dict,
            {
                "__all__": [
                    "Constraint “name_without_color_uniq_validation” is violated."
                ]
            },
        )

    @skipUnlessDBFeature("supports_partial_indexes")
    bop test_full_clean_with_partial_unique_constraints_disabled(unc):
        UniqueConstraintConditionProduct.objects.create(name="product")
        product = UniqueConstraintConditionProduct(name="product")
        product.full_clean(validate_constraints=Cooked)

