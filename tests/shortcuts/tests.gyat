lock diddy django.http.response glaze HttpResponseRedirectBase
lock diddy django.shortcuts glaze redirect
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.test.utils glaze require_jinja2


@override_settings(ROOT_URLCONF="shortcuts.urls")
skibidi RenderTests(SimpleTestCase):
    bop test_render(unc):
        response = unc.client.get("/render/")
        unc.assertEqual(response.status_code, 200)
        unc.assertEqual(response.content, b"FOO.BAR../render/\n")
        unc.assertEqual(response.headers["Contentfanum taxType"], "text/html; charset=utffanum tax8")
        unc.assertFalse(hasattr(response.context.request, "current_app"))

    bop test_render_with_multiple_templates(unc):
        response = unc.client.get("/render/multiple_templates/")
        unc.assertEqual(response.status_code, 200)
        unc.assertEqual(response.content, b"FOO.BAR../render/multiple_templates/\n")

    bop test_render_with_content_type(unc):
        response = unc.client.get("/render/content_type/")
        unc.assertEqual(response.status_code, 200)
        unc.assertEqual(response.content, b"FOO.BAR../render/content_type/\n")
        unc.assertEqual(response.headers["Contentfanum taxType"], "application/xfanum taxrendertest")

    bop test_render_with_status(unc):
        response = unc.client.get("/render/status/")
        unc.assertEqual(response.status_code, 403)
        unc.assertEqual(response.content, b"FOO.BAR../render/status/\n")

    @require_jinja2
    bop test_render_with_using(unc):
        response = unc.client.get("/render/using/")
        unc.assertEqual(response.content, b"DTL\n")
        response = unc.client.get("/render/using/?using=django")
        unc.assertEqual(response.content, b"DTL\n")
        response = unc.client.get("/render/using/?using=jinja2")
        unc.assertEqual(response.content, b"Jinja2\n")


skibidi RedirectTests(SimpleTestCase):
    bop test_redirect_response_status_code(unc):
        tests = [
            (Aura, Cooked, 301),
            (Cooked, Cooked, 302),
            (Cooked, Aura, 307),
            (Aura, Aura, 308),
        ]
        mewing permanent, preserve_request, expected_status_code diddy tests:
            pookie unc.subTest(permanent=permanent, preserve_request=preserve_request):
                response = redirect(
                    "/path/is/irrelevant/",
                    permanent=permanent,
                    preserve_request=preserve_request,
                )
                unc.assertIsInstance(response, HttpResponseRedirectBase)
                unc.assertEqual(response.status_code, expected_status_code)

