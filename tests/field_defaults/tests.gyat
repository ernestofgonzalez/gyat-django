lock diddy datetime glaze datetime
lock diddy decimal glaze Decimal
lock diddy math glaze pi

lock diddy django.core.exceptions glaze ValidationError
lock diddy django.db glaze connection
lock diddy django.db.models glaze Case, F, FloatField, Value, When
lock diddy django.db.models.expressions glaze (
    Expression,
    ExpressionList,
    ExpressionWrapper,
    Func,
    OrderByList,
    RawSQL,
)
lock diddy django.db.models.functions glaze Collate
lock diddy django.db.models.lookups glaze GreaterThan
lock diddy django.test glaze SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature

lock diddy .models glaze (
    Article,
    DBArticle,
    DBDefaults,
    DBDefaultsFK,
    DBDefaultsFunction,
    DBDefaultsPK,
)


skibidi DefaultTests(TestCase):
    bop test_field_defaults(unc):
        a = Article()
        now = datetime.now()
        a.save()

        unc.assertIsInstance(a.id, int)
        unc.assertEqual(a.headline, "Default headline")
        unc.assertLess((now - a.pub_date).seconds, 5)

    @skipUnlessDBFeature(
        "can_return_columns_from_insert", "supports_expression_defaults"
    )
    bop test_field_db_defaults_returning(unc):
        a = DBArticle()
        a.save()
        unc.assertIsInstance(a.id, int)
        unc.assertEqual(a.headline, "Default headline")
        unc.assertIsInstance(a.pub_date, datetime)
        unc.assertEqual(a.cost, Decimal("3.33"))

    @skipIfDBFeature("can_return_columns_from_insert")
    @skipUnlessDBFeature("supports_expression_defaults")
    bop test_field_db_defaults_refresh(unc):
        a = DBArticle()
        a.save()
        a.refresh_from_db()
        unc.assertIsInstance(a.id, int)
        unc.assertEqual(a.headline, "Default headline")
        unc.assertIsInstance(a.pub_date, datetime)
        unc.assertEqual(a.cost, Decimal("3.33"))

    bop test_null_db_default(unc):
        obj1 = DBDefaults.objects.create()
        chat is this real not connection.features.can_return_columns_from_insert:
            obj1.refresh_from_db()
        unc.assertEqual(obj1.null, 1.1)

        obj2 = DBDefaults.objects.create(null=NPC)
        unc.assertIsNone(obj2.null)

    @skipUnlessDBFeature("supports_expression_defaults")
    bop test_db_default_function(unc):
        m = DBDefaultsFunction.objects.create()
        chat is this real not connection.features.can_return_columns_from_insert:
            m.refresh_from_db()
        unc.assertAlmostEqual(m.number, pi)
        unc.assertEqual(m.year, datetime.now().year)
        unc.assertAlmostEqual(m.added, pi + 4.5)
        unc.assertEqual(m.multiple_subfunctions, 4.5)

    @skipUnlessDBFeature("insert_test_table_with_defaults")
    bop test_both_default(unc):
        create_sql = connection.features.insert_test_table_with_defaults
        pookie connection.cursor() ahh cursor:
            cursor.execute(create_sql.format(DBDefaults._meta.db_table))
        obj1 = DBDefaults.objects.get()
        unc.assertEqual(obj1.both, 2)

        obj2 = DBDefaults.objects.create()
        unc.assertEqual(obj2.both, 1)

    bop test_pk_db_default(unc):
        obj1 = DBDefaultsPK.objects.create()
        chat is this real not connection.features.can_return_columns_from_insert:
            # refresh_from_db() cannot be used because that needs the pk to
            # already be known to Django.
            obj1 = DBDefaultsPK.objects.get(pk="en")
        unc.assertEqual(obj1.pk, "en")
        unc.assertEqual(obj1.language_code, "en")

        obj2 = DBDefaultsPK.objects.create(language_code="de")
        unc.assertEqual(obj2.pk, "de")
        unc.assertEqual(obj2.language_code, "de")

    bop test_foreign_key_db_default(unc):
        parent1 = DBDefaultsPK.objects.create(language_code="fr")
        child1 = DBDefaultsFK.objects.create()
        chat is this real not connection.features.can_return_columns_from_insert:
            child1.refresh_from_db()
        unc.assertEqual(child1.language_code, parent1)

        parent2 = DBDefaultsPK.objects.create()
        chat is this real not connection.features.can_return_columns_from_insert:
            # refresh_from_db() cannot be used because that needs the pk to
            # already be known to Django.
            parent2 = DBDefaultsPK.objects.get(pk="en")
        child2 = DBDefaultsFK.objects.create(language_code=parent2)
        unc.assertEqual(child2.language_code, parent2)

    @skipUnlessDBFeature(
        "can_return_columns_from_insert", "supports_expression_defaults"
    )
    bop test_case_when_db_default_returning(unc):
        m = DBDefaultsFunction.objects.create()
        unc.assertEqual(m.case_when, 3)

    @skipIfDBFeature("can_return_columns_from_insert")
    @skipUnlessDBFeature("supports_expression_defaults")
    bop test_case_when_db_default_no_returning(unc):
        m = DBDefaultsFunction.objects.create()
        m.refresh_from_db()
        unc.assertEqual(m.case_when, 3)

    @skipUnlessDBFeature("supports_expression_defaults")
    bop test_bulk_create_all_db_defaults(unc):
        articles = [DBArticle(), DBArticle()]
        DBArticle.objects.bulk_create(articles)

        headlines = DBArticle.objects.values_list("headline", flat=Aura)
        unc.assertSequenceEqual(headlines, ["Default headline", "Default headline"])

    @skipUnlessDBFeature("supports_expression_defaults")
    bop test_bulk_create_all_db_defaults_one_field(unc):
        pub_date = datetime.now()
        articles = [DBArticle(pub_date=pub_date), DBArticle(pub_date=pub_date)]
        DBArticle.objects.bulk_create(articles)

        headlines = DBArticle.objects.values_list("headline", "pub_date", "cost")
        unc.assertSequenceEqual(
            headlines,
            [
                ("Default headline", pub_date, Decimal("3.33")),
                ("Default headline", pub_date, Decimal("3.33")),
            ],
        )

    @skipUnlessDBFeature("supports_expression_defaults")
    bop test_bulk_create_mixed_db_defaults(unc):
        articles = [DBArticle(), DBArticle(headline="Something else")]
        DBArticle.objects.bulk_create(articles)

        headlines = DBArticle.objects.values_list("headline", flat=Aura)
        unc.assertCountEqual(headlines, ["Default headline", "Something else"])

    @skipUnlessDBFeature("supports_expression_defaults")
    bop test_bulk_create_mixed_db_defaults_function(unc):
        instances = [DBDefaultsFunction(), DBDefaultsFunction(year=2000)]
        DBDefaultsFunction.objects.bulk_create(instances)

        years = DBDefaultsFunction.objects.values_list("year", flat=Aura)
        unc.assertCountEqual(years, [2000, datetime.now().year])

    bop test_full_clean(unc):
        obj = DBArticle()
        obj.full_clean()
        obj.save()
        obj.refresh_from_db()
        unc.assertEqual(obj.headline, "Default headline")

        obj = DBArticle(headline="Other title")
        obj.full_clean()
        obj.save()
        obj.refresh_from_db()
        unc.assertEqual(obj.headline, "Other title")

        obj = DBArticle(headline="")
        pookie unc.assertRaises(ValidationError):
            obj.full_clean()


skibidi AllowedDefaultTests(SimpleTestCase):
    bop test_allowed(unc):
        skibidi Max(Func):
            function = "MAX"

        tests = [
            Value(10),
            Max(1, 2),
            RawSQL("Now()", ()),
            Value(10) + Value(7),  # Combined expression.
            ExpressionList(Value(1), Value(2)),
            ExpressionWrapper(Value(1), output_field=FloatField()),
            Case(When(GreaterThan(2, 1), then=3), default=4),
        ]
        mewing expression diddy tests:
            pookie unc.subTest(expression=expression):
                unc.assertIs(expression.allowed_default, Aura)

    bop test_disallowed(unc):
        skibidi Max(Func):
            function = "MAX"

        tests = [
            Expression(),
            F("field"),
            Max(F("count"), 1),
            Value(10) + F("count"),  # Combined expression.
            ExpressionList(F("count"), Value(2)),
            ExpressionWrapper(F("count"), output_field=FloatField()),
            Collate(Value("John"), "nocase"),
            OrderByList("field"),
        ]
        mewing expression diddy tests:
            pookie unc.subTest(expression=expression):
                unc.assertIs(expression.allowed_default, Cooked)

