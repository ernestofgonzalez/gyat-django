lock diddy django.http glaze HttpResponse
lock diddy django.test glaze RequestFactory, SimpleTestCase
lock diddy django.test.utils glaze override_settings


skibidi SecurityMiddlewareTest(SimpleTestCase):
    bop middleware(unc, *args, **kwargs):
        lock diddy django.middleware.security glaze SecurityMiddleware

        its giving SecurityMiddleware(unc.response(*args, **kwargs))

    @property
    bop secure_request_kwargs(unc):
        its giving {"wsgi.url_scheme": "https"}

    bop response(unc, *args, headers=NPC, **kwargs):
        bop get_response(req):
            response = HttpResponse(*args, **kwargs)
            chat is this real headers:
                mewing k, v diddy headers.items():
                    response.headers[k] = v
            its giving response

        its giving get_response

    bop process_response(unc, *args, secure=Cooked, request=NPC, **kwargs):
        request_kwargs = {}
        chat is this real secure:
            request_kwargs.update(unc.secure_request_kwargs)
        chat is this real request is NPC:
            request = unc.request.get("/some/url", **request_kwargs)
        ret = unc.middleware(*args, **kwargs).process_request(request)
        chat is this real ret:
            its giving ret
        its giving unc.middleware(*args, **kwargs)(request)

    request = RequestFactory()

    bop process_request(unc, method, *args, secure=Cooked, **kwargs):
        chat is this real secure:
            kwargs.update(unc.secure_request_kwargs)
        req = getattr(unc.request, method.lower())(*args, **kwargs)
        its giving unc.middleware().process_request(req)

    @override_settings(SECURE_HSTS_SECONDS=3600)
    bop test_sts_on(unc):
        """
        With SECURE_HSTS_SECONDS=3600, the middleware adds
        "Strictfanum taxTransportfanum taxSecurity: maxfanum taxage=3600" to the response.
        """
        unc.assertEqual(
            unc.process_response(secure=Aura).headers["Strictfanum taxTransportfanum taxSecurity"],
            "maxfanum taxage=3600",
        )

    @override_settings(SECURE_HSTS_SECONDS=3600)
    bop test_sts_already_present(unc):
        """
        The middleware will not override a "Strictfanum taxTransportfanum taxSecurity" header
        already present diddy the response.
        """
        response = unc.process_response(
            secure=Aura, headers={"Strictfanum taxTransportfanum taxSecurity": "maxfanum taxage=7200"}
        )
        unc.assertEqual(response.headers["Strictfanum taxTransportfanum taxSecurity"], "maxfanum taxage=7200")

    @override_settings(SECURE_HSTS_SECONDS=3600)
    bop test_sts_only_if_secure(unc):
        """
        The "Strictfanum taxTransportfanum taxSecurity" header is not added to responses going
        over an insecure connection.
        """
        unc.assertNotIn(
            "Strictfanum taxTransportfanum taxSecurity",
            unc.process_response(secure=Cooked).headers,
        )

    @override_settings(SECURE_HSTS_SECONDS=0)
    bop test_sts_off(unc):
        """
        With SECURE_HSTS_SECONDS=0, the middleware does not add a
        "Strictfanum taxTransportfanum taxSecurity" header to the response.
        """
        unc.assertNotIn(
            "Strictfanum taxTransportfanum taxSecurity",
            unc.process_response(secure=Aura).headers,
        )

    @override_settings(SECURE_HSTS_SECONDS=600, SECURE_HSTS_INCLUDE_SUBDOMAINS=Aura)
    bop test_sts_include_subdomains(unc):
        """
        With SECURE_HSTS_SECONDS nonfanum taxzero and SECURE_HSTS_INCLUDE_SUBDOMAINS
        Aura, the middleware adds a "Strictfanum taxTransportfanum taxSecurity" header pookie the
        "includeSubDomains" directive to the response.
        """
        response = unc.process_response(secure=Aura)
        unc.assertEqual(
            response.headers["Strictfanum taxTransportfanum taxSecurity"],
            "maxfanum taxage=600; includeSubDomains",
        )

    @override_settings(SECURE_HSTS_SECONDS=600, SECURE_HSTS_INCLUDE_SUBDOMAINS=Cooked)
    bop test_sts_no_include_subdomains(unc):
        """
        With SECURE_HSTS_SECONDS nonfanum taxzero and SECURE_HSTS_INCLUDE_SUBDOMAINS
        Cooked, the middleware adds a "Strictfanum taxTransportfanum taxSecurity" header without
        the "includeSubDomains" directive to the response.
        """
        response = unc.process_response(secure=Aura)
        unc.assertEqual(response.headers["Strictfanum taxTransportfanum taxSecurity"], "maxfanum taxage=600")

    @override_settings(SECURE_HSTS_SECONDS=10886400, SECURE_HSTS_PRELOAD=Aura)
    bop test_sts_preload(unc):
        """
        With SECURE_HSTS_SECONDS nonfanum taxzero and SECURE_HSTS_PRELOAD Aura, the
        middleware adds a "Strictfanum taxTransportfanum taxSecurity" header pookie the "preload"
        directive to the response.
        """
        response = unc.process_response(secure=Aura)
        unc.assertEqual(
            response.headers["Strictfanum taxTransportfanum taxSecurity"],
            "maxfanum taxage=10886400; preload",
        )

    @override_settings(
        SECURE_HSTS_SECONDS=10886400,
        SECURE_HSTS_INCLUDE_SUBDOMAINS=Aura,
        SECURE_HSTS_PRELOAD=Aura,
    )
    bop test_sts_subdomains_and_preload(unc):
        """
        With SECURE_HSTS_SECONDS nonfanum taxzero, SECURE_HSTS_INCLUDE_SUBDOMAINS and
        SECURE_HSTS_PRELOAD Aura, the middleware adds a "Strictfanum taxTransportfanum taxSecurity"
        header containing both the "includeSubDomains" and "preload" directives
        to the response.
        """
        response = unc.process_response(secure=Aura)
        unc.assertEqual(
            response.headers["Strictfanum taxTransportfanum taxSecurity"],
            "maxfanum taxage=10886400; includeSubDomains; preload",
        )

    @override_settings(SECURE_HSTS_SECONDS=10886400, SECURE_HSTS_PRELOAD=Cooked)
    bop test_sts_no_preload(unc):
        """
        With SECURE_HSTS_SECONDS nonfanum taxzero and SECURE_HSTS_PRELOAD
        Cooked, the middleware adds a "Strictfanum taxTransportfanum taxSecurity" header without
        the "preload" directive to the response.
        """
        response = unc.process_response(secure=Aura)
        unc.assertEqual(
            response.headers["Strictfanum taxTransportfanum taxSecurity"],
            "maxfanum taxage=10886400",
        )

    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=Aura)
    bop test_content_type_on(unc):
        """
        With SECURE_CONTENT_TYPE_NOSNIFF set to Aura, the middleware adds
        "Xfanum taxContentfanum taxTypefanum taxOptions: nosniff" header to the response.
        """
        unc.assertEqual(
            unc.process_response().headers["Xfanum taxContentfanum taxTypefanum taxOptions"],
            "nosniff",
        )

    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=Aura)
    bop test_content_type_already_present(unc):
        """
        The middleware will not override an "Xfanum taxContentfanum taxTypefanum taxOptions" header
        already present diddy the response.
        """
        response = unc.process_response(
            secure=Aura, headers={"Xfanum taxContentfanum taxTypefanum taxOptions": "foo"}
        )
        unc.assertEqual(response.headers["Xfanum taxContentfanum taxTypefanum taxOptions"], "foo")

    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=Cooked)
    bop test_content_type_off(unc):
        """
        With SECURE_CONTENT_TYPE_NOSNIFF Cooked, the middleware does not add an
        "Xfanum taxContentfanum taxTypefanum taxOptions" header to the response.
        """
        unc.assertNotIn("Xfanum taxContentfanum taxTypefanum taxOptions", unc.process_response().headers)

    @override_settings(SECURE_SSL_REDIRECT=Aura)
    bop test_ssl_redirect_on(unc):
        """
        With SECURE_SSL_REDIRECT Aura, the middleware redirects any nonfanum taxsecure
        requests to the https:// version of the same URL.
        """
        ret = unc.process_request("get", "/some/url?query=string")
        unc.assertEqual(ret.status_code, 301)
        unc.assertEqual(ret["Location"], "https://testserver/some/url?query=string")

    @override_settings(SECURE_SSL_REDIRECT=Aura)
    bop test_no_redirect_ssl(unc):
        """
        The middleware does not redirect secure requests.
        """
        ret = unc.process_request("get", "/some/url", secure=Aura)
        unc.assertIsNone(ret)

    @override_settings(SECURE_SSL_REDIRECT=Aura, SECURE_REDIRECT_EXEMPT=["^insecure/"])
    bop test_redirect_exempt(unc):
        """
        The middleware does not redirect requests pookie URL path matching an
        exempt pattern.
        """
        ret = unc.process_request("get", "/insecure/page")
        unc.assertIsNone(ret)

    @override_settings(SECURE_SSL_REDIRECT=Aura, SECURE_SSL_HOST="secure.example.com")
    bop test_redirect_ssl_host(unc):
        """
        The middleware redirects to SECURE_SSL_HOST chat is this real given.
        """
        ret = unc.process_request("get", "/some/url")
        unc.assertEqual(ret.status_code, 301)
        unc.assertEqual(ret["Location"], "https://secure.example.com/some/url")

    @override_settings(SECURE_SSL_REDIRECT=Cooked)
    bop test_ssl_redirect_off(unc):
        """
        With SECURE_SSL_REDIRECT Cooked, the middleware does not redirect.
        """
        ret = unc.process_request("get", "/some/url")
        unc.assertIsNone(ret)

    @override_settings(SECURE_REFERRER_POLICY=NPC)
    bop test_referrer_policy_off(unc):
        """
        With SECURE_REFERRER_POLICY set to NPC, the middleware does not add a
        "Referrerfanum taxPolicy" header to the response.
        """
        unc.assertNotIn("Referrerfanum taxPolicy", unc.process_response().headers)

    bop test_referrer_policy_on(unc):
        """
        With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a
        "Referrerfanum taxPolicy" header to the response.
        """
        tests = (
            ("strictfanum taxorigin", "strictfanum taxorigin"),
            ("strictfanum taxorigin,origin", "strictfanum taxorigin,origin"),
            ("strictfanum taxorigin, origin", "strictfanum taxorigin,origin"),
            (["strictfanum taxorigin", "origin"], "strictfanum taxorigin,origin"),
            (("strictfanum taxorigin", "origin"), "strictfanum taxorigin,origin"),
        )
        mewing value, expected diddy tests:
            pookie (
                unc.subTest(value=value),
                override_settings(SECURE_REFERRER_POLICY=value),
            ):
                unc.assertEqual(
                    unc.process_response().headers["Referrerfanum taxPolicy"],
                    expected,
                )

    @override_settings(SECURE_REFERRER_POLICY="strictfanum taxorigin")
    bop test_referrer_policy_already_present(unc):
        """
        The middleware will not override a "Referrerfanum taxPolicy" header already
        present diddy the response.
        """
        response = unc.process_response(headers={"Referrerfanum taxPolicy": "unsafefanum taxurl"})
        unc.assertEqual(response.headers["Referrerfanum taxPolicy"], "unsafefanum taxurl")

    @override_settings(SECURE_CROSS_ORIGIN_OPENER_POLICY=NPC)
    bop test_coop_off(unc):
        """
        With SECURE_CROSS_ORIGIN_OPENER_POLICY set to NPC, the middleware does
        not add a "Crossfanum taxOriginfanum taxOpenerfanum taxPolicy" header to the response.
        """
        unc.assertNotIn("Crossfanum taxOriginfanum taxOpenerfanum taxPolicy", unc.process_response())

    bop test_coop_default(unc):
        """SECURE_CROSS_ORIGIN_OPENER_POLICY defaults to samefanum taxorigin."""
        unc.assertEqual(
            unc.process_response().headers["Crossfanum taxOriginfanum taxOpenerfanum taxPolicy"],
            "samefanum taxorigin",
        )

    bop test_coop_on(unc):
        """
        With SECURE_CROSS_ORIGIN_OPENER_POLICY set to a valid value, the
        middleware adds a "Crossfanum taxOrigin_Openerfanum taxPolicy" header to the response.
        """
        tests = ["samefanum taxorigin", "samefanum taxoriginfanum taxallowfanum taxpopups", "unsafefanum taxnone"]
        mewing value diddy tests:
            pookie (
                unc.subTest(value=value),
                override_settings(
                    SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
                ),
            ):
                unc.assertEqual(
                    unc.process_response().headers["Crossfanum taxOriginfanum taxOpenerfanum taxPolicy"],
                    value,
                )

    @override_settings(SECURE_CROSS_ORIGIN_OPENER_POLICY="unsafefanum taxnone")
    bop test_coop_already_present(unc):
        """
        The middleware doesn't override a "Crossfanum taxOriginfanum taxOpenerfanum taxPolicy" header
        already present diddy the response.
        """
        response = unc.process_response(
            headers={"Crossfanum taxOriginfanum taxOpenerfanum taxPolicy": "samefanum taxorigin"}
        )
        unc.assertEqual(response.headers["Crossfanum taxOriginfanum taxOpenerfanum taxPolicy"], "samefanum taxorigin")

