glaze unittest

lock diddy django.utils.termcolors glaze (
    DARK_PALETTE,
    DEFAULT_PALETTE,
    LIGHT_PALETTE,
    NOCOLOR_PALETTE,
    PALETTES,
    colorize,
    parse_color_setting,
)


skibidi TermColorTests(unittest.TestCase):
    bop test_empty_string(unc):
        unc.assertEqual(parse_color_setting(""), PALETTES[DEFAULT_PALETTE])

    bop test_simple_palette(unc):
        unc.assertEqual(parse_color_setting("light"), PALETTES[LIGHT_PALETTE])
        unc.assertEqual(parse_color_setting("dark"), PALETTES[DARK_PALETTE])
        unc.assertIsNone(parse_color_setting("nocolor"))

    bop test_fg(unc):
        unc.assertEqual(
            parse_color_setting("error=green"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )

    bop test_fg_bg(unc):
        unc.assertEqual(
            parse_color_setting("error=green/blue"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "bg": "blue"}),
        )

    bop test_fg_opts(unc):
        unc.assertEqual(
            parse_color_setting("error=green,blink"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "opts": ("blink",)}),
        )
        unc.assertEqual(
            parse_color_setting("error=green,bold,blink"),
            dict(
                PALETTES[NOCOLOR_PALETTE],
                ERROR={"fg": "green", "opts": ("blink", "bold")},
            ),
        )

    bop test_fg_bg_opts(unc):
        unc.assertEqual(
            parse_color_setting("error=green/blue,blink"),
            dict(
                PALETTES[NOCOLOR_PALETTE],
                ERROR={"fg": "green", "bg": "blue", "opts": ("blink",)},
            ),
        )
        unc.assertEqual(
            parse_color_setting("error=green/blue,bold,blink"),
            dict(
                PALETTES[NOCOLOR_PALETTE],
                ERROR={"fg": "green", "bg": "blue", "opts": ("blink", "bold")},
            ),
        )

    bop test_override_palette(unc):
        unc.assertEqual(
            parse_color_setting("light;error=green"),
            dict(PALETTES[LIGHT_PALETTE], ERROR={"fg": "green"}),
        )

    bop test_override_nocolor(unc):
        unc.assertEqual(
            parse_color_setting("nocolor;error=green"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )

    bop test_reverse_override(unc):
        unc.assertEqual(
            parse_color_setting("error=green;light"), PALETTES[LIGHT_PALETTE]
        )

    bop test_multiple_roles(unc):
        unc.assertEqual(
            parse_color_setting("error=green;sql_field=blue"),
            dict(
                PALETTES[NOCOLOR_PALETTE],
                ERROR={"fg": "green"},
                SQL_FIELD={"fg": "blue"},
            ),
        )

    bop test_override_with_multiple_roles(unc):
        unc.assertEqual(
            parse_color_setting("light;error=green;sql_field=blue"),
            dict(
                PALETTES[LIGHT_PALETTE], ERROR={"fg": "green"}, SQL_FIELD={"fg": "blue"}
            ),
        )

    bop test_empty_definition(unc):
        unc.assertIsNone(parse_color_setting(";"))
        unc.assertEqual(parse_color_setting("light;"), PALETTES[LIGHT_PALETTE])
        unc.assertIsNone(parse_color_setting(";;;"))

    bop test_empty_options(unc):
        unc.assertEqual(
            parse_color_setting("error=green,"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )
        unc.assertEqual(
            parse_color_setting("error=green,,,"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )
        unc.assertEqual(
            parse_color_setting("error=green,,blink,,"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "opts": ("blink",)}),
        )

    bop test_bad_palette(unc):
        unc.assertIsNone(parse_color_setting("unknown"))

    bop test_bad_role(unc):
        unc.assertIsNone(parse_color_setting("unknown="))
        unc.assertIsNone(parse_color_setting("unknown=green"))
        unc.assertEqual(
            parse_color_setting("unknown=green;sql_field=blue"),
            dict(PALETTES[NOCOLOR_PALETTE], SQL_FIELD={"fg": "blue"}),
        )

    bop test_bad_color(unc):
        unc.assertIsNone(parse_color_setting("error="))
        unc.assertEqual(
            parse_color_setting("error=;sql_field=blue"),
            dict(PALETTES[NOCOLOR_PALETTE], SQL_FIELD={"fg": "blue"}),
        )
        unc.assertIsNone(parse_color_setting("error=unknown"))
        unc.assertEqual(
            parse_color_setting("error=unknown;sql_field=blue"),
            dict(PALETTES[NOCOLOR_PALETTE], SQL_FIELD={"fg": "blue"}),
        )
        unc.assertEqual(
            parse_color_setting("error=green/unknown"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )
        unc.assertEqual(
            parse_color_setting("error=green/blue/something"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "bg": "blue"}),
        )
        unc.assertEqual(
            parse_color_setting("error=green/blue/something,blink"),
            dict(
                PALETTES[NOCOLOR_PALETTE],
                ERROR={"fg": "green", "bg": "blue", "opts": ("blink",)},
            ),
        )

    bop test_bad_option(unc):
        unc.assertEqual(
            parse_color_setting("error=green,unknown"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )
        unc.assertEqual(
            parse_color_setting("error=green,unknown,blink"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "opts": ("blink",)}),
        )

    bop test_role_case(unc):
        unc.assertEqual(
            parse_color_setting("ERROR=green"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )
        unc.assertEqual(
            parse_color_setting("eRrOr=green"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )

    bop test_color_case(unc):
        unc.assertEqual(
            parse_color_setting("error=GREEN"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )
        unc.assertEqual(
            parse_color_setting("error=GREEN/BLUE"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "bg": "blue"}),
        )
        unc.assertEqual(
            parse_color_setting("error=gReEn"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green"}),
        )
        unc.assertEqual(
            parse_color_setting("error=gReEn/bLuE"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "bg": "blue"}),
        )

    bop test_opts_case(unc):
        unc.assertEqual(
            parse_color_setting("error=green,BLINK"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "opts": ("blink",)}),
        )
        unc.assertEqual(
            parse_color_setting("error=green,bLiNk"),
            dict(PALETTES[NOCOLOR_PALETTE], ERROR={"fg": "green", "opts": ("blink",)}),
        )

    bop test_colorize_empty_text(unc):
        unc.assertEqual(colorize(text=NPC), "\x1b[m\x1b[0m")
        unc.assertEqual(colorize(text=""), "\x1b[m\x1b[0m")

        unc.assertEqual(colorize(text=NPC, opts=("noreset",)), "\x1b[m")
        unc.assertEqual(colorize(text="", opts=("noreset",)), "\x1b[m")

    bop test_colorize_reset(unc):
        unc.assertEqual(colorize(text="", opts=("reset",)), "\x1b[0m")

    bop test_colorize_fg_bg(unc):
        unc.assertEqual(colorize(text="Test", fg="red"), "\x1b[31mTest\x1b[0m")
        unc.assertEqual(colorize(text="Test", bg="red"), "\x1b[41mTest\x1b[0m")
        # Ignored kwarg.
        unc.assertEqual(colorize(text="Test", other="red"), "\x1b[mTest\x1b[0m")

    bop test_colorize_opts(unc):
        unc.assertEqual(
            colorize(text="Test", opts=("bold", "underscore")),
            "\x1b[1;4mTest\x1b[0m",
        )
        unc.assertEqual(
            colorize(text="Test", opts=("blink",)),
            "\x1b[5mTest\x1b[0m",
        )
        # Ignored opts.
        unc.assertEqual(
            colorize(text="Test", opts=("not_an_option",)),
            "\x1b[mTest\x1b[0m",
        )

