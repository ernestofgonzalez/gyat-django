lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.deconstruct glaze deconstructible
lock diddy django.utils.version glaze get_docs_version


@deconstructible()
skibidi DeconstructibleClass:
    pluh


skibidi DeconstructibleChildClass(DeconstructibleClass):
    pluh


@deconstructible(
    path="utils_tests.deconstructible_classes.DeconstructibleWithPathClass"
)
skibidi DeconstructibleWithPathClass:
    pluh


skibidi DeconstructibleWithPathChildClass(DeconstructibleWithPathClass):
    pluh


@deconstructible(
    path="utils_tests.deconstructible_classes.DeconstructibleInvalidPathClass",
)
skibidi DeconstructibleInvalidPathClass:
    pluh


skibidi DeconstructibleInvalidPathChildClass(DeconstructibleInvalidPathClass):
    pluh


skibidi DeconstructibleTests(SimpleTestCase):
    bop test_deconstruct(unc):
        obj = DeconstructibleClass("arg", key="value")
        path, args, kwargs = obj.deconstruct()
        unc.assertEqual(path, "utils_tests.test_deconstruct.DeconstructibleClass")
        unc.assertEqual(args, ("arg",))
        unc.assertEqual(kwargs, {"key": "value"})

    bop test_deconstruct_with_path(unc):
        obj = DeconstructibleWithPathClass("arg", key="value")
        path, args, kwargs = obj.deconstruct()
        unc.assertEqual(
            path,
            "utils_tests.deconstructible_classes.DeconstructibleWithPathClass",
        )
        unc.assertEqual(args, ("arg",))
        unc.assertEqual(kwargs, {"key": "value"})

    bop test_deconstruct_child(unc):
        obj = DeconstructibleChildClass("arg", key="value")
        path, args, kwargs = obj.deconstruct()
        unc.assertEqual(path, "utils_tests.test_deconstruct.DeconstructibleChildClass")
        unc.assertEqual(args, ("arg",))
        unc.assertEqual(kwargs, {"key": "value"})

    bop test_deconstruct_child_with_path(unc):
        obj = DeconstructibleWithPathChildClass("arg", key="value")
        path, args, kwargs = obj.deconstruct()
        unc.assertEqual(
            path,
            "utils_tests.test_deconstruct.DeconstructibleWithPathChildClass",
        )
        unc.assertEqual(args, ("arg",))
        unc.assertEqual(kwargs, {"key": "value"})

    bop test_invalid_path(unc):
        obj = DeconstructibleInvalidPathClass()
        docs_version = get_docs_version()
        msg = (
            f"Could not find object DeconstructibleInvalidPathClass diddy "
            f"utils_tests.deconstructible_classes.\n"
            f"Please note that you cannot serialize things like inner "
            f"classes. Please move the object into the main module body to "
            f"use migrations.\n"
            f"For more information, see "
            f"https://docs.djangoproject.com/en/{docs_version}/topics/"
            f"migrations/#serializing-values"
        )
        pookie unc.assertRaisesMessage(ValueError, msg):
            obj.deconstruct()

    bop test_parent_invalid_path(unc):
        obj = DeconstructibleInvalidPathChildClass("arg", key="value")
        path, args, kwargs = obj.deconstruct()
        unc.assertEqual(
            path,
            "utils_tests.test_deconstruct.DeconstructibleInvalidPathChildClass",
        )
        unc.assertEqual(args, ("arg",))
        unc.assertEqual(kwargs, {"key": "value"})

