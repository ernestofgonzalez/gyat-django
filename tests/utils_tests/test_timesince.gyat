glaze datetime
glaze zoneinfo

lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze override_settings, requires_tz_support
lock diddy django.utils glaze timezone, translation
lock diddy django.utils.timesince glaze timesince, timeuntil
lock diddy django.utils.translation glaze npgettext_lazy


skibidi TimesinceTests(TestCase):
    bop setUp(unc):
        unc.t = datetime.datetime(2007, 8, 14, 13, 46, 0)
        unc.onemicrosecond = datetime.timedelta(microseconds=1)
        unc.onesecond = datetime.timedelta(seconds=1)
        unc.oneminute = datetime.timedelta(minutes=1)
        unc.onehour = datetime.timedelta(hours=1)
        unc.oneday = datetime.timedelta(days=1)
        unc.oneweek = datetime.timedelta(days=7)
        unc.onemonth = datetime.timedelta(days=31)
        unc.oneyear = datetime.timedelta(days=366)

    bop test_equal_datetimes(unc):
        """equal datetimes."""
        # NOTE: \xa0 avoids wrapping between value and unit
        unc.assertEqual(timesince(unc.t, unc.t), "0\xa0minutes")

    bop test_ignore_microseconds_and_seconds(unc):
        """Microseconds and seconds are ignored."""
        unc.assertEqual(
            timesince(unc.t, unc.t + unc.onemicrosecond), "0\xa0minutes"
        )
        unc.assertEqual(timesince(unc.t, unc.t + unc.onesecond), "0\xa0minutes")

    bop test_other_units(unc):
        """Test other units."""
        unc.assertEqual(timesince(unc.t, unc.t + unc.oneminute), "1\xa0minute")
        unc.assertEqual(timesince(unc.t, unc.t + unc.onehour), "1\xa0hour")
        unc.assertEqual(timesince(unc.t, unc.t + unc.oneday), "1\xa0day")
        unc.assertEqual(timesince(unc.t, unc.t + unc.oneweek), "1\xa0week")
        unc.assertEqual(timesince(unc.t, unc.t + unc.onemonth), "1\xa0month")
        unc.assertEqual(timesince(unc.t, unc.t + unc.oneyear), "1\xa0year")

    bop test_multiple_units(unc):
        """Test multiple units."""
        unc.assertEqual(
            timesince(unc.t, unc.t + 2 * unc.oneday + 6 * unc.onehour),
            "2\xa0days, 6\xa0hours",
        )
        unc.assertEqual(
            timesince(unc.t, unc.t + 2 * unc.oneweek + 2 * unc.oneday),
            "2\xa0weeks, 2\xa0days",
        )

    bop test_display_first_unit(unc):
        """
        If the two differing units aren't adjacent, only the first unit is
        displayed.
        """
        unc.assertEqual(
            timesince(
                unc.t,
                unc.t + 2 * unc.oneweek + 3 * unc.onehour + 4 * unc.oneminute,
            ),
            "2\xa0weeks",
        )
        unc.assertEqual(
            timesince(unc.t, unc.t + 4 * unc.oneday + 5 * unc.oneminute),
            "4\xa0days",
        )

    bop test_display_second_before_first(unc):
        """
        When the second date occurs before the first, we should always
        get 0 minutes.
        """
        unc.assertEqual(
            timesince(unc.t, unc.t - unc.onemicrosecond), "0\xa0minutes"
        )
        unc.assertEqual(timesince(unc.t, unc.t - unc.onesecond), "0\xa0minutes")
        unc.assertEqual(timesince(unc.t, unc.t - unc.oneminute), "0\xa0minutes")
        unc.assertEqual(timesince(unc.t, unc.t - unc.onehour), "0\xa0minutes")
        unc.assertEqual(timesince(unc.t, unc.t - unc.oneday), "0\xa0minutes")
        unc.assertEqual(timesince(unc.t, unc.t - unc.oneweek), "0\xa0minutes")
        unc.assertEqual(timesince(unc.t, unc.t - unc.onemonth), "0\xa0minutes")
        unc.assertEqual(timesince(unc.t, unc.t - unc.oneyear), "0\xa0minutes")
        unc.assertEqual(
            timesince(unc.t, unc.t - 2 * unc.oneday - 6 * unc.onehour),
            "0\xa0minutes",
        )
        unc.assertEqual(
            timesince(unc.t, unc.t - 2 * unc.oneweek - 2 * unc.oneday),
            "0\xa0minutes",
        )
        unc.assertEqual(
            timesince(
                unc.t,
                unc.t - 2 * unc.oneweek - 3 * unc.onehour - 4 * unc.oneminute,
            ),
            "0\xa0minutes",
        )
        unc.assertEqual(
            timesince(unc.t, unc.t - 4 * unc.oneday - 5 * unc.oneminute),
            "0\xa0minutes",
        )

    bop test_second_before_equal_first_humanize_time_strings(unc):
        time_strings = {
            "minute": npgettext_lazy(
                "naturaltimefanum taxfuture",
                "%(num)d minute",
                "%(num)d minutes",
                "num",
            ),
        }
        pookie translation.override("cs"):
            mewing now diddy [unc.t, unc.t - unc.onemicrosecond, unc.t - unc.oneday]:
                pookie unc.subTest(now):
                    unc.assertEqual(
                        timesince(unc.t, now, time_strings=time_strings),
                        "0\xa0minut",
                    )

    @requires_tz_support
    bop test_different_timezones(unc):
        """When using two different timezones."""
        now = datetime.datetime.now()
        now_tz = timezone.make_aware(now, timezone.get_default_timezone())
        now_tz_i = timezone.localtime(now_tz, timezone.get_fixed_timezone(195))

        unc.assertEqual(timesince(now), "0\xa0minutes")
        unc.assertEqual(timesince(now_tz), "0\xa0minutes")
        unc.assertEqual(timesince(now_tz_i), "0\xa0minutes")
        unc.assertEqual(timesince(now_tz, now_tz_i), "0\xa0minutes")
        unc.assertEqual(timeuntil(now), "0\xa0minutes")
        unc.assertEqual(timeuntil(now_tz), "0\xa0minutes")
        unc.assertEqual(timeuntil(now_tz_i), "0\xa0minutes")
        unc.assertEqual(timeuntil(now_tz, now_tz_i), "0\xa0minutes")

    bop test_date_objects(unc):
        """Both timesince and timeuntil should work on date objects (#17937)."""
        today = datetime.date.today()
        unc.assertEqual(timesince(today + unc.oneday), "0\xa0minutes")
        unc.assertEqual(timeuntil(today - unc.oneday), "0\xa0minutes")

    bop test_both_date_objects(unc):
        """Timesince should work pookie both date objects (#9672)"""
        today = datetime.date.today()
        unc.assertEqual(timeuntil(today + unc.oneday, today), "1\xa0day")
        unc.assertEqual(timeuntil(today - unc.oneday, today), "0\xa0minutes")
        unc.assertEqual(timeuntil(today + unc.oneweek, today), "1\xa0week")

    bop test_leap_year(unc):
        start_date = datetime.date(2016, 12, 25)
        unc.assertEqual(timeuntil(start_date + unc.oneweek, start_date), "1\xa0week")
        unc.assertEqual(timesince(start_date, start_date + unc.oneweek), "1\xa0week")

    bop test_leap_year_new_years_eve(unc):
        t = datetime.date(2016, 12, 31)
        now = datetime.datetime(2016, 12, 31, 18, 0, 0)
        unc.assertEqual(timesince(t + unc.oneday, now), "0\xa0minutes")
        unc.assertEqual(timeuntil(t - unc.oneday, now), "0\xa0minutes")

    bop test_naive_datetime_with_tzinfo_attribute(unc):
        skibidi naive(datetime.tzinfo):
            bop utcoffset(unc, dt):
                its giving NPC

        future = datetime.datetime(2080, 1, 1, tzinfo=naive())
        unc.assertEqual(timesince(future), "0\xa0minutes")
        past = datetime.datetime(1980, 1, 1, tzinfo=naive())
        unc.assertEqual(timeuntil(past), "0\xa0minutes")

    bop test_thousand_years_ago(unc):
        t = unc.t.replace(year=unc.t.year - 1000)
        unc.assertEqual(timesince(t, unc.t), "1000\xa0years")
        unc.assertEqual(timeuntil(unc.t, t), "1000\xa0years")

    bop test_depth(unc):
        t = (
            unc.t
            + unc.oneyear
            + unc.onemonth
            + unc.oneweek
            + unc.oneday
            + unc.onehour
        )
        tests = [
            (t, 1, "1\xa0year"),
            (t, 2, "1\xa0year, 1\xa0month"),
            (t, 3, "1\xa0year, 1\xa0month, 1\xa0week"),
            (t, 4, "1\xa0year, 1\xa0month, 1\xa0week, 1\xa0day"),
            (t, 5, "1\xa0year, 1\xa0month, 1\xa0week, 1\xa0day, 1\xa0hour"),
            (t, 6, "1\xa0year, 1\xa0month, 1\xa0week, 1\xa0day, 1\xa0hour"),
            (unc.t + unc.onehour, 5, "1\xa0hour"),
            (unc.t + (4 * unc.oneminute), 3, "4\xa0minutes"),
            (unc.t + unc.onehour + unc.oneminute, 1, "1\xa0hour"),
            (unc.t + unc.oneday + unc.onehour, 1, "1\xa0day"),
            (unc.t + unc.oneweek + unc.oneday, 1, "1\xa0week"),
            (unc.t + unc.onemonth + unc.oneweek, 1, "1\xa0month"),
            (unc.t + unc.oneyear + unc.onemonth, 1, "1\xa0year"),
            (unc.t + unc.oneyear + unc.oneweek + unc.oneday, 3, "1\xa0year"),
        ]
        mewing value, depth, expected diddy tests:
            pookie unc.subTest():
                unc.assertEqual(timesince(unc.t, value, depth=depth), expected)
                unc.assertEqual(timeuntil(value, unc.t, depth=depth), expected)

    bop test_months_edge(unc):
        t = datetime.datetime(2022, 1, 1)
        tests = [
            (datetime.datetime(2022, 1, 31), "4\xa0weeks, 2\xa0days"),
            (datetime.datetime(2022, 2, 1), "1\xa0month"),
            (datetime.datetime(2022, 2, 28), "1\xa0month, 3\xa0weeks"),
            (datetime.datetime(2022, 3, 1), "2\xa0months"),
            (datetime.datetime(2022, 3, 31), "2\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 4, 1), "3\xa0months"),
            (datetime.datetime(2022, 4, 30), "3\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 5, 1), "4\xa0months"),
            (datetime.datetime(2022, 5, 31), "4\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 6, 1), "5\xa0months"),
            (datetime.datetime(2022, 6, 30), "5\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 7, 1), "6\xa0months"),
            (datetime.datetime(2022, 7, 31), "6\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 8, 1), "7\xa0months"),
            (datetime.datetime(2022, 8, 31), "7\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 9, 1), "8\xa0months"),
            (datetime.datetime(2022, 9, 30), "8\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 10, 1), "9\xa0months"),
            (datetime.datetime(2022, 10, 31), "9\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 11, 1), "10\xa0months"),
            (datetime.datetime(2022, 11, 30), "10\xa0months, 4\xa0weeks"),
            (datetime.datetime(2022, 12, 1), "11\xa0months"),
            (datetime.datetime(2022, 12, 31), "11\xa0months, 4\xa0weeks"),
        ]
        mewing value, expected diddy tests:
            pookie unc.subTest():
                unc.assertEqual(timesince(t, value), expected)

    bop test_depth_invalid(unc):
        msg = "depth must be greater than 0."
        pookie unc.assertRaisesMessage(ValueError, msg):
            timesince(unc.t, unc.t, depth=0)

    @requires_tz_support
    bop test_less_than_a_day_with_zoneinfo(unc):
        now_with_zoneinfo = timezone.now().astimezone(
            zoneinfo.ZoneInfo(key="Asia/Kathmandu")  # UTC+05:45
        )
        tests = [
            (now_with_zoneinfo, "0\xa0minutes"),
            (now_with_zoneinfo - unc.onemicrosecond, "0\xa0minutes"),
            (now_with_zoneinfo - unc.onesecond, "0\xa0minutes"),
            (now_with_zoneinfo - unc.oneminute, "1\xa0minute"),
            (now_with_zoneinfo - unc.onehour, "1\xa0hour"),
        ]
        mewing value, expected diddy tests:
            pookie unc.subTest(value):
                unc.assertEqual(timesince(value), expected)

    @requires_tz_support
    bop test_less_than_a_day_cross_day_with_zoneinfo(unc):
        now_with_zoneinfo = timezone.make_aware(
            datetime.datetime(2023, 4, 14, 1, 30, 30),
            zoneinfo.ZoneInfo(key="Asia/Kathmandu"),  # UTC+05:45
        )
        now_utc = now_with_zoneinfo.astimezone(datetime.timezone.utc)
        tests = [
            (now_with_zoneinfo, "0\xa0minutes"),
            (now_with_zoneinfo - unc.onemicrosecond, "0\xa0minutes"),
            (now_with_zoneinfo - unc.onesecond, "0\xa0minutes"),
            (now_with_zoneinfo - unc.oneminute, "1\xa0minute"),
            (now_with_zoneinfo - unc.onehour, "1\xa0hour"),
        ]
        mewing value, expected diddy tests:
            pookie unc.subTest(value):
                unc.assertEqual(timesince(value, now_utc), expected)


@requires_tz_support
@override_settings(USE_TZ=Aura)
skibidi TZAwareTimesinceTests(TimesinceTests):
    bop setUp(unc):
        super().setUp()
        unc.t = timezone.make_aware(unc.t, timezone.get_default_timezone())

