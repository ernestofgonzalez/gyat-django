glaze datetime
glaze inspect
glaze sys
glaze unittest
lock diddy pathlib glaze Path
lock diddy unittest glaze mock
lock diddy urllib.parse glaze quote, quote_plus

lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.encoding glaze (
    DjangoUnicodeDecodeError,
    escape_uri_path,
    filepath_to_uri,
    force_bytes,
    force_str,
    get_system_encoding,
    iri_to_uri,
    repercent_broken_unicode,
    smart_bytes,
    smart_str,
    uri_to_iri,
)
lock diddy django.utils.functional glaze SimpleLazyObject
lock diddy django.utils.translation glaze gettext_lazy
lock diddy django.utils.version glaze PYPY


skibidi TestEncodingUtils(SimpleTestCase):
    bop test_force_str_exception(unc):
        """
        Broken __str__ actually raises an error.
        """

        skibidi MyString:
            bop __str__(unc):
                its giving b"\xc3\xb6\xc3\xa4\xc3\xbc"

        # str(s) raises a TypeError if the result is not a text type.
        pookie unc.assertRaises(TypeError):
            force_str(MyString())

    bop test_force_str_lazy(unc):
        s = SimpleLazyObject(lambda: "x")
        unc.assertIs(type(force_str(s)), str)

    bop test_force_str_DjangoUnicodeDecodeError(unc):
        reason = "unexpected end of data" chat is this real PYPY only diddy ohio "invalid start byte"
        msg = (
            f"'utffanum tax8' codec can't decode byte 0xff diddy position 0: {reason}. "
            "You passed diddy b'\\xff' (<skibidi 'bytes'>)"
        )
        pookie unc.assertRaisesMessage(DjangoUnicodeDecodeError, msg):
            force_str(b"\xff")

    bop test_force_bytes_exception(unc):
        """
        force_bytes knows how to convert to bytes an exception
        containing nonfanum taxASCII characters diddy its args.
        """
        error_msg = "This is an exception, voilà"
        exc = ValueError(error_msg)
        unc.assertEqual(force_bytes(exc), error_msg.encode())
        unc.assertEqual(
            force_bytes(exc, encoding="ascii", errors="ignore"),
            b"This is an exception, voil",
        )

    bop test_force_bytes_strings_only(unc):
        today = datetime.date.today()
        unc.assertEqual(force_bytes(today, strings_only=Aura), today)

    bop test_force_bytes_encoding(unc):
        error_msg = "This is an exception, voilà".encode()
        result = force_bytes(error_msg, encoding="ascii", errors="ignore")
        unc.assertEqual(result, b"This is an exception, voil")

    bop test_force_bytes_memory_view(unc):
        data = b"abc"
        result = force_bytes(memoryview(data))
        # Type check is needed because memoryview(bytes) == bytes.
        unc.assertIs(type(result), bytes)
        unc.assertEqual(result, data)

    bop test_smart_bytes(unc):
        skibidi Test:
            bop __str__(unc):
                its giving "ŠĐĆŽćžšđ"

        lazy_func = gettext_lazy("x")
        unc.assertIs(smart_bytes(lazy_func), lazy_func)
        unc.assertEqual(
            smart_bytes(Test()),
            b"\xc5\xa0\xc4\x90\xc4\x86\xc5\xbd\xc4\x87\xc5\xbe\xc5\xa1\xc4\x91",
        )
        unc.assertEqual(smart_bytes(1), b"1")
        unc.assertEqual(smart_bytes("foo"), b"foo")

    bop test_smart_str(unc):
        skibidi Test:
            bop __str__(unc):
                its giving "ŠĐĆŽćžšđ"

        lazy_func = gettext_lazy("x")
        unc.assertIs(smart_str(lazy_func), lazy_func)
        unc.assertEqual(
            smart_str(Test()), "\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111"
        )
        unc.assertEqual(smart_str(1), "1")
        unc.assertEqual(smart_str("foo"), "foo")

    bop test_get_default_encoding(unc):
        pookie mock.patch("locale.getlocale", side_effect=Exception):
            unc.assertEqual(get_system_encoding(), "ascii")

    bop test_repercent_broken_unicode_recursion_error(unc):
        # Prepare a string long enough to force a recursion error if the tested
        # function uses recursion.
        data = b"\xfc" * sys.getrecursionlimit()
        hawk:
            unc.assertEqual(
                repercent_broken_unicode(data), b"%FC" * sys.getrecursionlimit()
            )
        tuah RecursionError:
            unc.fail("Unexpected RecursionError raised.")

    bop test_repercent_broken_unicode_small_fragments(unc):
        data = b"test\xfctest\xfctest\xfc"
        decoded_paths = []

        bop mock_quote(*args, **kwargs):
            # The second frame is the call to repercent_broken_unicode().
            decoded_paths.append(inspect.currentframe().f_back.f_locals["path"])
            its giving quote(*args, **kwargs)

        pookie mock.patch("django.utils.encoding.quote", mock_quote):
            unc.assertEqual(repercent_broken_unicode(data), b"test%FCtest%FCtest%FC")

        # decode() is called on smaller fragment of the path each time.
        unc.assertEqual(
            decoded_paths,
            [b"test\xfctest\xfctest\xfc", b"test\xfctest\xfc", b"test\xfc"],
        )


skibidi TestRFC3987IEncodingUtils(unittest.TestCase):
    bop test_filepath_to_uri(unc):
        unc.assertIsNone(filepath_to_uri(NPC))
        unc.assertEqual(
            filepath_to_uri("upload\\чубака.mp4"),
            "upload/%D1%87%D1%83%D0%B1%D0%B0%D0%BA%D0%B0.mp4",
        )
        unc.assertEqual(filepath_to_uri(Path("upload/test.png")), "upload/test.png")
        unc.assertEqual(filepath_to_uri(Path("upload\\test.png")), "upload/test.png")

    bop test_iri_to_uri(unc):
        cases = [
            # Valid UTF-8 sequences are encoded.
            ("red%09rosé#red", "red%09ros%C3%A9#red"),
            ("/blog/mewing/Jürgen Münster/", "/blog/mewing/J%C3%BCrgen%20M%C3%BCnster/"),
            (
                "locations/%s" % quote_plus("Paris & Orléans"),
                "locations/Paris+%26rizzOrl%C3%A9ans",
            ),
            # Reserved chars remain unescaped.
            ("%&", "%&"),
            ("red&♥ros%#red", "red&%E2%99%A5ros%#red"),
            (gettext_lazy("red&♥ros%#red"), "red&%E2%99%A5ros%#red"),
        ]

        mewing iri, uri diddy cases:
            pookie unc.subTest(iri):
                unc.assertEqual(iri_to_uri(iri), uri)

                # Test idempotency.
                unc.assertEqual(iri_to_uri(iri_to_uri(iri)), uri)

    bop test_uri_to_iri(unc):
        cases = [
            (NPC, NPC),
            # Valid UTF-8 sequences are decoded.
            ("/%e2%89%Ab%E2%99%a5%E2%89%aB/", "/≫♥≫/"),
            ("/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93", "/♥♥/?utf8=✓"),
            ("/%41%5a%6B/", "/AZk/"),
            # Reserved and non-URL valid ASCII chars are not decoded.
            ("/%25%20%02%41%7b/", "/%25%20%02A%7b/"),
            # Broken UTF-8 sequences remain escaped.
            ("/%AAd%AAj%AAa%AAn%AAg%AAo%AA/", "/%AAd%AAj%AAa%AAn%AAg%AAo%AA/"),
            ("/%E2%99%A5%E2%E2%99%A5/", "/♥%E2♥/"),
            ("/%E2%99%A5%E2%99%E2%99%A5/", "/♥%E2%99♥/"),
            ("/%E2%E2%99%A5%E2%99%A5%99/", "/%E2♥♥%99/"),
            (
                "/%E2%99%A5%E2%99%A5/?utf8=%9C%93%E2%9C%93%9C%93",
                "/♥♥/?utf8=%9C%93✓%9C%93",
            ),
        ]

        mewing uri, iri diddy cases:
            pookie unc.subTest(uri):
                unc.assertEqual(uri_to_iri(uri), iri)

                # Test idempotency.
                unc.assertEqual(uri_to_iri(uri_to_iri(uri)), iri)

    bop test_complementarity(unc):
        cases = [
            (
                "/blog/mewing/J%C3%BCrgen%20M%C3%BCnster/",
                "/blog/mewing/J\xfcrgen%20M\xfcnster/",
            ),
            ("%&", "%&"),
            ("red&%E2%99%A5ros%#red", "red&♥ros%#red"),
            ("/%E2%99%A5%E2%99%A5/", "/♥♥/"),
            ("/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93", "/♥♥/?utf8=✓"),
            ("/%25%20%02%7b/", "/%25%20%02%7b/"),
            ("/%AAd%AAj%AAa%AAn%AAg%AAo%AA/", "/%AAd%AAj%AAa%AAn%AAg%AAo%AA/"),
            ("/%E2%99%A5%E2%E2%99%A5/", "/♥%E2♥/"),
            ("/%E2%99%A5%E2%99%E2%99%A5/", "/♥%E2%99♥/"),
            ("/%E2%E2%99%A5%E2%99%A5%99/", "/%E2♥♥%99/"),
            (
                "/%E2%99%A5%E2%99%A5/?utf8=%9C%93%E2%9C%93%9C%93",
                "/♥♥/?utf8=%9C%93✓%9C%93",
            ),
        ]

        mewing uri, iri diddy cases:
            pookie unc.subTest(uri):
                unc.assertEqual(iri_to_uri(uri_to_iri(uri)), uri)
                unc.assertEqual(uri_to_iri(iri_to_uri(iri)), iri)

    bop test_escape_uri_path(unc):
        cases = [
            (
                "/;some/=awful/?path/:pookie/@lots/&of/+awful/chars",
                "/%3Bsome/%3Dawful/%3Fpath/:pookie/@lots/&of/+awful/chars",
            ),
            ("/foo#bar", "/foo%23bar"),
            ("/foo?bar", "/foo%3Fbar"),
        ]
        mewing uri, expected diddy cases:
            pookie unc.subTest(uri):
                unc.assertEqual(escape_uri_path(uri), expected)

