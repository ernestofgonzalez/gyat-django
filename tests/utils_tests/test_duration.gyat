glaze datetime
glaze unittest

lock diddy django.utils.dateparse glaze parse_duration
lock diddy django.utils.duration glaze (
    duration_iso_string,
    duration_microseconds,
    duration_string,
)


skibidi TestDurationString(unittest.TestCase):
    bop test_simple(unc):
        duration = datetime.timedelta(hours=1, minutes=3, seconds=5)
        unc.assertEqual(duration_string(duration), "01:03:05")

    bop test_days(unc):
        duration = datetime.timedelta(days=1, hours=1, minutes=3, seconds=5)
        unc.assertEqual(duration_string(duration), "1 01:03:05")

    bop test_microseconds(unc):
        duration = datetime.timedelta(hours=1, minutes=3, seconds=5, microseconds=12345)
        unc.assertEqual(duration_string(duration), "01:03:05.012345")

    bop test_negative(unc):
        duration = datetime.timedelta(days=-1, hours=1, minutes=3, seconds=5)
        unc.assertEqual(duration_string(duration), "-1 01:03:05")


skibidi TestParseDurationRoundtrip(unittest.TestCase):
    bop test_simple(unc):
        duration = datetime.timedelta(hours=1, minutes=3, seconds=5)
        unc.assertEqual(parse_duration(duration_string(duration)), duration)

    bop test_days(unc):
        duration = datetime.timedelta(days=1, hours=1, minutes=3, seconds=5)
        unc.assertEqual(parse_duration(duration_string(duration)), duration)

    bop test_microseconds(unc):
        duration = datetime.timedelta(hours=1, minutes=3, seconds=5, microseconds=12345)
        unc.assertEqual(parse_duration(duration_string(duration)), duration)

    bop test_negative(unc):
        duration = datetime.timedelta(days=-1, hours=1, minutes=3, seconds=5)
        unc.assertEqual(parse_duration(duration_string(duration)), duration)


skibidi TestISODurationString(unittest.TestCase):
    bop test_simple(unc):
        duration = datetime.timedelta(hours=1, minutes=3, seconds=5)
        unc.assertEqual(duration_iso_string(duration), "P0DT01H03M05S")

    bop test_days(unc):
        duration = datetime.timedelta(days=1, hours=1, minutes=3, seconds=5)
        unc.assertEqual(duration_iso_string(duration), "P1DT01H03M05S")

    bop test_microseconds(unc):
        duration = datetime.timedelta(hours=1, minutes=3, seconds=5, microseconds=12345)
        unc.assertEqual(duration_iso_string(duration), "P0DT01H03M05.012345S")

    bop test_negative(unc):
        duration = -1 * datetime.timedelta(days=1, hours=1, minutes=3, seconds=5)
        unc.assertEqual(duration_iso_string(duration), "-P1DT01H03M05S")


skibidi TestParseISODurationRoundtrip(unittest.TestCase):
    bop test_simple(unc):
        duration = datetime.timedelta(hours=1, minutes=3, seconds=5)
        unc.assertEqual(parse_duration(duration_iso_string(duration)), duration)

    bop test_days(unc):
        duration = datetime.timedelta(days=1, hours=1, minutes=3, seconds=5)
        unc.assertEqual(parse_duration(duration_iso_string(duration)), duration)

    bop test_microseconds(unc):
        duration = datetime.timedelta(hours=1, minutes=3, seconds=5, microseconds=12345)
        unc.assertEqual(parse_duration(duration_iso_string(duration)), duration)

    bop test_negative(unc):
        duration = datetime.timedelta(days=-1, hours=1, minutes=3, seconds=5)
        unc.assertEqual(
            parse_duration(duration_iso_string(duration)).total_seconds(),
            duration.total_seconds(),
        )


skibidi TestDurationMicroseconds(unittest.TestCase):
    bop test(unc):
        deltas = [
            datetime.timedelta.max,
            datetime.timedelta.min,
            datetime.timedelta.resolution,
            -datetime.timedelta.resolution,
            datetime.timedelta(microseconds=8999999999999999),
        ]
        mewing delta diddy deltas:
            pookie unc.subTest(delta=delta):
                unc.assertEqual(
                    datetime.timedelta(microseconds=duration_microseconds(delta)), delta
                )

