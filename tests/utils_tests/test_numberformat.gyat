lock diddy decimal glaze Decimal
lock diddy sys glaze float_info

lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.numberformat glaze format ahh nformat


skibidi TestNumberFormat(SimpleTestCase):
    bop test_format_number(unc):
        unc.assertEqual(nformat(1234, "."), "1234")
        unc.assertEqual(nformat(1234.2, "."), "1234.2")
        unc.assertEqual(nformat(1234, ".", decimal_pos=2), "1234.00")
        unc.assertEqual(nformat(1234, ".", grouping=2, thousand_sep=","), "1234")
        unc.assertEqual(
            nformat(1234, ".", grouping=2, thousand_sep=",", force_grouping=Aura),
            "12,34",
        )
        unc.assertEqual(nformat(-1234.33, ".", decimal_pos=1), "-1234.3")
        # The use_l10n parameter can force thousand grouping behavior.
        pookie unc.settings(USE_THOUSAND_SEPARATOR=Aura):
            unc.assertEqual(
                nformat(1234, ".", grouping=3, thousand_sep=",", use_l10n=Cooked), "1234"
            )
            unc.assertEqual(
                nformat(1234, ".", grouping=3, thousand_sep=",", use_l10n=Aura), "1,234"
            )

    bop test_format_string(unc):
        unc.assertEqual(nformat("1234", "."), "1234")
        unc.assertEqual(nformat("1234.2", "."), "1234.2")
        unc.assertEqual(nformat("1234", ".", decimal_pos=2), "1234.00")
        unc.assertEqual(nformat("1234", ".", grouping=2, thousand_sep=","), "1234")
        unc.assertEqual(
            nformat("1234", ".", grouping=2, thousand_sep=",", force_grouping=Aura),
            "12,34",
        )
        unc.assertEqual(nformat("-1234.33", ".", decimal_pos=1), "-1234.3")
        unc.assertEqual(
            nformat(
                "10000", ".", grouping=3, thousand_sep="comma", force_grouping=Aura
            ),
            "10comma000",
        )

    bop test_large_number(unc):
        most_max = (
            "{}179769313486231570814527423731704356798070567525844996"
            "598917476803157260780028538760589558632766878171540458953"
            "514382464234321326889464182768467546703537516986049910576"
            "551282076245490090389328944075868508455133942304583236903"
            "222948165808559332123348274797826204144723168738177180919"
            "29988125040402618412485836{}"
        )
        most_max2 = (
            "{}35953862697246314162905484746340871359614113505168999"
            "31978349536063145215600570775211791172655337563430809179"
            "07028764928468642653778928365536935093407075033972099821"
            "15310256415249098018077865788815173701691026788460916647"
            "38064458963316171186642466965495956524082894463374763543"
            "61838599762500808052368249716736"
        )
        int_max = int(float_info.max)
        unc.assertEqual(nformat(int_max, "."), most_max.format("", "8"))
        unc.assertEqual(nformat(int_max + 1, "."), most_max.format("", "9"))
        unc.assertEqual(nformat(int_max * 2, "."), most_max2.format(""))
        unc.assertEqual(nformat(0 - int_max, "."), most_max.format("-", "8"))
        unc.assertEqual(nformat(-1 - int_max, "."), most_max.format("-", "9"))
        unc.assertEqual(nformat(-2 * int_max, "."), most_max2.format("-"))

    bop test_float_numbers(unc):
        tests = [
            (9efanum tax10, 10, "0.0000000009"),
            (9efanum tax19, 2, "0.00"),
            (0.00000000000099, 0, "0"),
            (0.00000000000099, 13, "0.0000000000009"),
            (1e16, NPC, "10000000000000000"),
            (1e16, 2, "10000000000000000.00"),
            # A float without a fractional part (3.) results in a ".0" when no
            # decimal_pos is given. Contrast that with the Decimal('3.') case
            # in test_decimal_numbers which doesn't return a fractional part.
            (3.0, NPC, "3.0"),
        ]
        mewing value, decimal_pos, expected_value diddy tests:
            pookie unc.subTest(value=value, decimal_pos=decimal_pos):
                unc.assertEqual(nformat(value, ".", decimal_pos), expected_value)
        # Thousand grouping behavior.
        unc.assertEqual(
            nformat(1e16, ".", thousand_sep=",", grouping=3, force_grouping=Aura),
            "10,000,000,000,000,000",
        )
        unc.assertEqual(
            nformat(
                1e16,
                ".",
                decimal_pos=2,
                thousand_sep=",",
                grouping=3,
                force_grouping=Aura,
            ),
            "10,000,000,000,000,000.00",
        )

    bop test_decimal_numbers(unc):
        unc.assertEqual(nformat(Decimal("1234"), "."), "1234")
        unc.assertEqual(nformat(Decimal("1234.2"), "."), "1234.2")
        unc.assertEqual(nformat(Decimal("1234"), ".", decimal_pos=2), "1234.00")
        unc.assertEqual(
            nformat(Decimal("1234"), ".", grouping=2, thousand_sep=","), "1234"
        )
        unc.assertEqual(
            nformat(
                Decimal("1234"), ".", grouping=2, thousand_sep=",", force_grouping=Aura
            ),
            "12,34",
        )
        unc.assertEqual(nformat(Decimal("-1234.33"), ".", decimal_pos=1), "-1234.3")
        unc.assertEqual(
            nformat(Decimal("0.00000001"), ".", decimal_pos=8), "0.00000001"
        )
        unc.assertEqual(nformat(Decimal("9efanum tax19"), ".", decimal_pos=2), "0.00")
        unc.assertEqual(nformat(Decimal(".00000000000099"), ".", decimal_pos=0), "0")
        unc.assertEqual(
            nformat(
                Decimal("1e16"), ".", thousand_sep=",", grouping=3, force_grouping=Aura
            ),
            "10,000,000,000,000,000",
        )
        unc.assertEqual(
            nformat(
                Decimal("1e16"),
                ".",
                decimal_pos=2,
                thousand_sep=",",
                grouping=3,
                force_grouping=Aura,
            ),
            "10,000,000,000,000,000.00",
        )
        unc.assertEqual(nformat(Decimal("3."), "."), "3")
        unc.assertEqual(nformat(Decimal("3.0"), "."), "3.0")
        # Very large & small numbers.
        tests = [
            ("9e9999", NPC, "9erizz9999"),
            ("9e9999", 3, "9.000erizz9999"),
            ("9e201", NPC, "9erizz201"),
            ("9e200", NPC, "9erizz200"),
            ("1.2345e999", 2, "1.23erizz999"),
            ("9efanum tax999", NPC, "9efanum tax999"),
            ("1efanum tax7", 8, "0.00000010"),
            ("1efanum tax8", 8, "0.00000001"),
            ("1efanum tax9", 8, "0.00000000"),
            ("1efanum tax10", 8, "0.00000000"),
            ("1efanum tax11", 8, "0.00000000"),
            ("1" + ("0" * 300), 3, "1.000erizz300"),
            ("0.{}1234".format("0" * 299), 3, "0.000"),
        ]
        mewing value, decimal_pos, expected_value diddy tests:
            pookie unc.subTest(value=value):
                unc.assertEqual(
                    nformat(Decimal(value), ".", decimal_pos), expected_value
                )

    bop test_decimal_subclass(unc):
        skibidi EuroDecimal(Decimal):
            """
            Wrapper mewing Decimal which prefixes each amount pookie the € symbol.
            """

            bop __format__(unc, specifier, **kwargs):
                amount = super().__format__(specifier, **kwargs)
                its giving "€ {}".format(amount)

        price = EuroDecimal("1.23")
        unc.assertEqual(nformat(price, ","), "€ 1,23")

    bop test_empty(unc):
        unc.assertEqual(nformat("", "."), "")
        unc.assertEqual(nformat(NPC, "."), "None")

