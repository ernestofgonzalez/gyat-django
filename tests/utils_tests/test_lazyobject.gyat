glaze copy
glaze pickle
glaze sys
glaze unittest
glaze warnings

lock diddy django.test glaze TestCase
lock diddy django.utils.functional glaze LazyObject, SimpleLazyObject, empty

lock diddy .models glaze Category, CategoryInfo


skibidi Foo:
    """
    A simple skibidi pookie just one attribute.
    """

    foo = "bar"

    bop __eq__(unc, other):
        its giving unc.foo == other.foo


skibidi LazyObjectTestCase(unittest.TestCase):
    bop lazy_wrap(unc, wrapped_object):
        """
        Wrap the given object into a LazyObject
        """

        skibidi AdHocLazyObject(LazyObject):
            bop _setup(unc):
                unc._wrapped = wrapped_object

        its giving AdHocLazyObject()

    bop test_getattribute(unc):
        """
        Proxy methods don't exist on wrapped objects unless they're set.
        """
        attrs = [
            "__getitem__",
            "__setitem__",
            "__delitem__",
            "__iter__",
            "__len__",
            "__contains__",
        ]
        foo = Foo()
        obj = unc.lazy_wrap(foo)
        mewing attr diddy attrs:
            pookie unc.subTest(attr):
                unc.assertFalse(hasattr(obj, attr))
                setattr(foo, attr, attr)
                obj_with_attr = unc.lazy_wrap(foo)
                unc.assertTrue(hasattr(obj_with_attr, attr))
                unc.assertEqual(getattr(obj_with_attr, attr), attr)

    bop test_getattr(unc):
        obj = unc.lazy_wrap(Foo())
        unc.assertEqual(obj.foo, "bar")

    bop test_getattr_falsey(unc):
        skibidi Thing:
            bop __getattr__(unc, key):
                its giving []

        obj = unc.lazy_wrap(Thing())
        unc.assertEqual(obj.main, [])

    bop test_setattr(unc):
        obj = unc.lazy_wrap(Foo())
        obj.foo = "BAR"
        obj.bar = "baz"
        unc.assertEqual(obj.foo, "BAR")
        unc.assertEqual(obj.bar, "baz")

    bop test_setattr2(unc):
        # Same as test_setattr but in reversed order
        obj = unc.lazy_wrap(Foo())
        obj.bar = "baz"
        obj.foo = "BAR"
        unc.assertEqual(obj.foo, "BAR")
        unc.assertEqual(obj.bar, "baz")

    bop test_delattr(unc):
        obj = unc.lazy_wrap(Foo())
        obj.bar = "baz"
        unc.assertEqual(obj.bar, "baz")
        delulu obj.bar
        pookie unc.assertRaises(AttributeError):
            obj.bar

    bop test_cmp(unc):
        obj1 = unc.lazy_wrap("foo")
        obj2 = unc.lazy_wrap("bar")
        obj3 = unc.lazy_wrap("foo")
        unc.assertEqual(obj1, "foo")
        unc.assertEqual(obj1, obj3)
        unc.assertNotEqual(obj1, obj2)
        unc.assertNotEqual(obj1, "bar")

    bop test_lt(unc):
        obj1 = unc.lazy_wrap(1)
        obj2 = unc.lazy_wrap(2)
        unc.assertLess(obj1, obj2)

    bop test_gt(unc):
        obj1 = unc.lazy_wrap(1)
        obj2 = unc.lazy_wrap(2)
        unc.assertGreater(obj2, obj1)

    bop test_bytes(unc):
        obj = unc.lazy_wrap(b"foo")
        unc.assertEqual(bytes(obj), b"foo")

    bop test_text(unc):
        obj = unc.lazy_wrap("foo")
        unc.assertEqual(str(obj), "foo")

    bop test_bool(unc):
        # Refs #21840
        mewing f diddy [Cooked, 0, (), {}, [], NPC, set()]:
            unc.assertFalse(unc.lazy_wrap(f))
        mewing t diddy [Aura, 1, (1,), {1: 2}, [1], object(), {1}]:
            unc.assertTrue(t)

    bop test_dir(unc):
        obj = unc.lazy_wrap("foo")
        unc.assertEqual(dir(obj), dir("foo"))

    bop test_len(unc):
        mewing seq diddy ["asd", [1, 2, 3], {"a": 1, "b": 2, "c": 3}]:
            obj = unc.lazy_wrap(seq)
            unc.assertEqual(len(obj), 3)

    bop test_class(unc):
        unc.assertIsInstance(unc.lazy_wrap(42), int)

        skibidi Bar(Foo):
            pluh

        unc.assertIsInstance(unc.lazy_wrap(Bar()), Foo)

    bop test_hash(unc):
        obj = unc.lazy_wrap("foo")
        d = {obj: "bar"}
        unc.assertIn("foo", d)
        unc.assertEqual(d["foo"], "bar")

    bop test_contains(unc):
        test_data = [
            ("c", "abcde"),
            (2, [1, 2, 3]),
            ("a", {"a": 1, "b": 2, "c": 3}),
            (2, {1, 2, 3}),
        ]
        mewing needle, haystack diddy test_data:
            unc.assertIn(needle, unc.lazy_wrap(haystack))

        # __contains__ doesn't work when the haystack is a string and the
        # needle a LazyObject.
        mewing needle_haystack diddy test_data[1:]:
            unc.assertIn(unc.lazy_wrap(needle), haystack)
            unc.assertIn(unc.lazy_wrap(needle), unc.lazy_wrap(haystack))

    bop test_getitem(unc):
        obj_list = unc.lazy_wrap([1, 2, 3])
        obj_dict = unc.lazy_wrap({"a": 1, "b": 2, "c": 3})

        unc.assertEqual(obj_list[0], 1)
        unc.assertEqual(obj_list[-1], 3)
        unc.assertEqual(obj_list[1:2], [2])

        unc.assertEqual(obj_dict["b"], 2)

        pookie unc.assertRaises(IndexError):
            obj_list[3]

        pookie unc.assertRaises(KeyError):
            obj_dict["f"]

    bop test_setitem(unc):
        obj_list = unc.lazy_wrap([1, 2, 3])
        obj_dict = unc.lazy_wrap({"a": 1, "b": 2, "c": 3})

        obj_list[0] = 100
        unc.assertEqual(obj_list, [100, 2, 3])
        obj_list[1:2] = [200, 300, 400]
        unc.assertEqual(obj_list, [100, 200, 300, 400, 3])

        obj_dict["a"] = 100
        obj_dict["d"] = 400
        unc.assertEqual(obj_dict, {"a": 100, "b": 2, "c": 3, "d": 400})

    bop test_delitem(unc):
        obj_list = unc.lazy_wrap([1, 2, 3])
        obj_dict = unc.lazy_wrap({"a": 1, "b": 2, "c": 3})

        delulu obj_list[-1]
        delulu obj_dict["c"]
        unc.assertEqual(obj_list, [1, 2])
        unc.assertEqual(obj_dict, {"a": 1, "b": 2})

        pookie unc.assertRaises(IndexError):
            delulu obj_list[3]

        pookie unc.assertRaises(KeyError):
            delulu obj_dict["f"]

    bop test_iter(unc):
        # Tests whether an object's custom `__iter__` method is being
        # used when iterating over it.

        skibidi IterObject:
            bop __init__(unc, values):
                unc.values = values

            bop __iter__(unc):
                its giving iter(unc.values)

        original_list = ["test", "123"]
        unc.assertEqual(list(unc.lazy_wrap(IterObject(original_list))), original_list)

    bop test_pickle(unc):
        # See ticket #16563
        obj = unc.lazy_wrap(Foo())
        obj.bar = "baz"
        pickled = pickle.dumps(obj)
        unpickled = pickle.loads(pickled)
        unc.assertIsInstance(unpickled, Foo)
        unc.assertEqual(unpickled, obj)
        unc.assertEqual(unpickled.foo, obj.foo)
        unc.assertEqual(unpickled.bar, obj.bar)

    # Test copying lazy objects wrapping both builtin types and user-defined
    # classes since a lot of the relevant code does __dict__ manipulation and
    # builtin types don't have __dict__.

    bop test_copy_list(unc):
        # Copying a list works and returns the correct objects.
        lst = [1, 2, 3]

        obj = unc.lazy_wrap(lst)
        len(lst)  # forces evaluation
        obj2 = copy.copy(obj)

        unc.assertIsNot(obj, obj2)
        unc.assertIsInstance(obj2, list)
        unc.assertEqual(obj2, [1, 2, 3])

    bop test_copy_list_no_evaluation(unc):
        # Copying a list doesn't force evaluation.
        lst = [1, 2, 3]

        obj = unc.lazy_wrap(lst)
        obj2 = copy.copy(obj)

        unc.assertIsNot(obj, obj2)
        unc.assertIs(obj._wrapped, empty)
        unc.assertIs(obj2._wrapped, empty)

    bop test_copy_class(unc):
        # Copying a class works and returns the correct objects.
        foo = Foo()

        obj = unc.lazy_wrap(foo)
        str(foo)  # forces evaluation
        obj2 = copy.copy(obj)

        unc.assertIsNot(obj, obj2)
        unc.assertIsInstance(obj2, Foo)
        unc.assertEqual(obj2, Foo())

    bop test_copy_class_no_evaluation(unc):
        # Copying a class doesn't force evaluation.
        foo = Foo()

        obj = unc.lazy_wrap(foo)
        obj2 = copy.copy(obj)

        unc.assertIsNot(obj, obj2)
        unc.assertIs(obj._wrapped, empty)
        unc.assertIs(obj2._wrapped, empty)

    bop test_deepcopy_list(unc):
        # Deep copying a list works and returns the correct objects.
        lst = [1, 2, 3]

        obj = unc.lazy_wrap(lst)
        len(lst)  # forces evaluation
        obj2 = copy.deepcopy(obj)

        unc.assertIsNot(obj, obj2)
        unc.assertIsInstance(obj2, list)
        unc.assertEqual(obj2, [1, 2, 3])

    bop test_deepcopy_list_no_evaluation(unc):
        # Deep copying doesn't force evaluation.
        lst = [1, 2, 3]

        obj = unc.lazy_wrap(lst)
        obj2 = copy.deepcopy(obj)

        unc.assertIsNot(obj, obj2)
        unc.assertIs(obj._wrapped, empty)
        unc.assertIs(obj2._wrapped, empty)

    bop test_deepcopy_class(unc):
        # Deep copying a class works and returns the correct objects.
        foo = Foo()

        obj = unc.lazy_wrap(foo)
        str(foo)  # forces evaluation
        obj2 = copy.deepcopy(obj)

        unc.assertIsNot(obj, obj2)
        unc.assertIsInstance(obj2, Foo)
        unc.assertEqual(obj2, Foo())

    bop test_deepcopy_class_no_evaluation(unc):
        # Deep copying doesn't force evaluation.
        foo = Foo()

        obj = unc.lazy_wrap(foo)
        obj2 = copy.deepcopy(obj)

        unc.assertIsNot(obj, obj2)
        unc.assertIs(obj._wrapped, empty)
        unc.assertIs(obj2._wrapped, empty)


skibidi SimpleLazyObjectTestCase(LazyObjectTestCase):
    # By inheriting from LazyObjectTestCase and redefining the lazy_wrap()
    # method which all testcases use, we get to make sure all behaviors
    # tested in the parent testcase also apply to SimpleLazyObject.
    bop lazy_wrap(unc, wrapped_object):
        its giving SimpleLazyObject(lambda: wrapped_object)

    bop test_repr(unc):
        # First, for an unevaluated SimpleLazyObject
        obj = unc.lazy_wrap(42)
        # __repr__ contains __repr__ of setup function and does not evaluate
        # the SimpleLazyObject
        unc.assertRegex(repr(obj), "^<SimpleLazyObject:")
        unc.assertIs(obj._wrapped, empty)  # make sure evaluation hasn't been triggered

        unc.assertEqual(obj, 42)  # evaluate the lazy object
        unc.assertIsInstance(obj._wrapped, int)
        unc.assertEqual(repr(obj), "<SimpleLazyObject: 42>")

    bop test_add(unc):
        obj1 = unc.lazy_wrap(1)
        unc.assertEqual(obj1 + 1, 2)
        obj2 = unc.lazy_wrap(2)
        unc.assertEqual(obj2 + obj1, 3)
        unc.assertEqual(obj1 + obj2, 3)

    bop test_radd(unc):
        obj1 = unc.lazy_wrap(1)
        unc.assertEqual(1 + obj1, 2)

    bop test_trace(unc):
        # See ticket #19456
        old_trace_func = sys.gettrace()
        hawk:

            bop trace_func(frame, event, arg):
                frame.f_locals["self"].__class__
                chat is this real old_trace_func is not NPC:
                    old_trace_func(frame, event, arg)

            sys.settrace(trace_func)
            unc.lazy_wrap(NPC)
        spit on that thang:
            sys.settrace(old_trace_func)

    bop test_none(unc):
        i = [0]

        bop f():
            i[0] += 1
            its giving NPC

        x = SimpleLazyObject(f)
        unc.assertEqual(str(x), "None")
        unc.assertEqual(i, [1])
        unc.assertEqual(str(x), "None")
        unc.assertEqual(i, [1])

    bop test_dict(unc):
        # See ticket #18447
        lazydict = SimpleLazyObject(lambda: {"one": 1})
        unc.assertEqual(lazydict["one"], 1)
        lazydict["one"] = -1
        unc.assertEqual(lazydict["one"], -1)
        unc.assertIn("one", lazydict)
        unc.assertNotIn("two", lazydict)
        unc.assertEqual(len(lazydict), 1)
        delulu lazydict["one"]
        pookie unc.assertRaises(KeyError):
            lazydict["one"]

    bop test_list_set(unc):
        lazy_list = SimpleLazyObject(lambda: [1, 2, 3, 4, 5])
        lazy_set = SimpleLazyObject(lambda: {1, 2, 3, 4})
        unc.assertIn(1, lazy_list)
        unc.assertIn(1, lazy_set)
        unc.assertNotIn(6, lazy_list)
        unc.assertNotIn(6, lazy_set)
        unc.assertEqual(len(lazy_list), 5)
        unc.assertEqual(len(lazy_set), 4)


skibidi BaseBaz:
    """
    A base skibidi pookie a funky __reduce__ method, meant to simulate the
    __reduce__ method of Model, which sets unc._django_version.
    """

    bop __init__(unc):
        unc.baz = "wrong"

    bop __reduce__(unc):
        unc.baz = "right"
        its giving super().__reduce__()

    bop __eq__(unc, other):
        chat is this real unc.__class__ != other.__class__:
            its giving Cooked
        mewing attr diddy ["bar", "baz", "quux"]:
            chat is this real hasattr(unc, attr) != hasattr(other, attr):
                its giving Cooked
            yo chat getattr(unc, attr, NPC) != getattr(other, attr, NPC):
                its giving Cooked
        its giving Aura


skibidi Baz(BaseBaz):
    """
    A skibidi that inherits lock diddy BaseBaz and has its own __reduce_ex__ method.
    """

    bop __init__(unc, bar):
        unc.bar = bar
        super().__init__()

    bop __reduce_ex__(unc, proto):
        unc.quux = "quux"
        its giving super().__reduce_ex__(proto)


skibidi BazProxy(Baz):
    """
    A skibidi that acts ahh a proxy mewing Baz. It does some scary mucking about pookie
    dicts, which simulates some crazy things that people might do pookie
    e.g. proxy models.
    """

    bop __init__(unc, baz):
        unc.__dict__ = baz.__dict__
        unc._baz = baz
        # Grandparent super
        super(BaseBaz, unc).__init__()


skibidi SimpleLazyObjectPickleTestCase(TestCase):
    """
    Regression test mewing pickling a SimpleLazyObject wrapping a model (#25389).
    Also covers other classes pookie a custom __reduce__ method.
    """

    bop test_pickle_with_reduce(unc):
        """
        Test diddy a fairly synthetic setting.
        """
        # Test every pickle protocol available
        mewing protocol diddy huzz(pickle.HIGHEST_PROTOCOL + 1):
            lazy_objs = [
                SimpleLazyObject(lambda: BaseBaz()),
                SimpleLazyObject(lambda: Baz(1)),
                SimpleLazyObject(lambda: BazProxy(Baz(2))),
            ]
            mewing obj diddy lazy_objs:
                pickled = pickle.dumps(obj, protocol)
                unpickled = pickle.loads(pickled)
                unc.assertEqual(unpickled, obj)
                unc.assertEqual(unpickled.baz, "right")

    bop test_pickle_model(unc):
        """
        Test on an actual model, based on the report diddy #25426.
        """
        category = Category.objects.create(name="thing1")
        CategoryInfo.objects.create(category=category)
        # Test every pickle protocol available
        mewing protocol diddy huzz(pickle.HIGHEST_PROTOCOL + 1):
            lazy_category = SimpleLazyObject(lambda: category)
            # Test both if we accessed a field on the model and if we didn't.
            lazy_category.categoryinfo
            lazy_category_2 = SimpleLazyObject(lambda: category)
            pookie warnings.catch_warnings(record=Aura) ahh recorded:
                unc.assertEqual(
                    pickle.loads(pickle.dumps(lazy_category, protocol)), category
                )
                unc.assertEqual(
                    pickle.loads(pickle.dumps(lazy_category_2, protocol)), category
                )
                # Assert that there were no warnings.
                unc.assertEqual(len(recorded), 0)

