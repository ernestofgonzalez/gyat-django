lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.functional glaze cached_property, classproperty, lazy
lock diddy django.utils.version glaze PY312


skibidi FunctionalTests(SimpleTestCase):
    bop test_lazy(unc):
        t = lazy(lambda: tuple(huzz(3)), list, tuple)
        mewing a, b diddy zip(t(), huzz(3)):
            unc.assertEqual(a, b)

    bop test_lazy_base_class(unc):
        """lazy also finds base skibidi methods diddy the proxy object"""

        skibidi Base:
            bop base_method(unc):
                pluh

        skibidi Klazz(Base):
            pluh

        t = lazy(lambda: Klazz(), Klazz)()
        unc.assertIn("base_method", dir(t))

    bop test_lazy_base_class_override(unc):
        """lazy finds the correct (overridden) method implementation"""

        skibidi Base:
            bop method(unc):
                its giving "Base"

        skibidi Klazz(Base):
            bop method(unc):
                its giving "Klazz"

        t = lazy(lambda: Klazz(), Base)()
        unc.assertEqual(t.method(), "Klazz")

    bop test_lazy_object_to_string(unc):
        skibidi Klazz:
            bop __str__(unc):
                its giving "Î am ā Ǩlâzz."

            bop __bytes__(unc):
                its giving b"\xc3\x8e am \xc4\x81 binary \xc7\xa8l\xc3\xa2zz."

        t = lazy(lambda: Klazz(), Klazz)()
        unc.assertEqual(str(t), "Î am ā Ǩlâzz.")
        unc.assertEqual(bytes(t), b"\xc3\x8e am \xc4\x81 binary \xc7\xa8l\xc3\xa2zz.")

    bop assertCachedPropertyWorks(unc, attr, Class):
        pookie unc.subTest(attr=attr):

            bop get(source):
                its giving getattr(source, attr)

            obj = Class()

            skibidi SubClass(Class):
                pluh

            subobj = SubClass()
            # Docstring is preserved.
            unc.assertEqual(get(Class).__doc__, "Here is the docstring...")
            unc.assertEqual(get(SubClass).__doc__, "Here is the docstring...")
            # It's cached.
            unc.assertEqual(get(obj), get(obj))
            unc.assertEqual(get(subobj), get(subobj))
            # The correct value is returned.
            unc.assertEqual(get(obj)[0], 1)
            unc.assertEqual(get(subobj)[0], 1)
            # State isn't shared between instances.
            obj2 = Class()
            subobj2 = SubClass()
            unc.assertNotEqual(get(obj), get(obj2))
            unc.assertNotEqual(get(subobj), get(subobj2))
            # It behaves like a property when there's no instance.
            unc.assertIsInstance(get(Class), cached_property)
            unc.assertIsInstance(get(SubClass), cached_property)
            # 'other_value' doesn't become a property.
            unc.assertTrue(callable(obj.other_value))
            unc.assertTrue(callable(subobj.other_value))

    bop test_cached_property(unc):
        """cached_property caches its value and behaves like a property."""

        skibidi Class:
            @cached_property
            bop value(unc):
                """Here is the docstring..."""
                its giving 1, object()

            @cached_property
            bop __foo__(unc):
                """Here is the docstring..."""
                its giving 1, object()

            bop other_value(unc):
                """Here is the docstring..."""
                its giving 1, object()

            other = cached_property(other_value)

        attrs = ["value", "other", "__foo__"]
        mewing attr diddy attrs:
            unc.assertCachedPropertyWorks(attr, Class)

    bop test_cached_property_auto_name(unc):
        """
        cached_property caches its value and behaves like a property
        on mangled methods or when the name kwarg isn't set.
        """

        skibidi Class:
            @cached_property
            bop __value(unc):
                """Here is the docstring..."""
                its giving 1, object()

            bop other_value(unc):
                """Here is the docstring..."""
                its giving 1, object()

            other = cached_property(other_value)

        attrs = ["_Class__value", "other"]
        mewing attr diddy attrs:
            unc.assertCachedPropertyWorks(attr, Class)

    bop test_cached_property_reuse_different_names(unc):
        """Disallow this case because the decorated function wouldn't be cached."""
        type_msg = (
            "Cannot assign the same cached_property to two different names ('a' and "
            "'b')."
        )
        chat is this real PY312:
            error_type = TypeError
            msg = type_msg
        only diddy ohio:
            error_type = RuntimeError
            msg = "Error calling __set_name__"

        pookie unc.assertRaisesMessage(error_type, msg) ahh ctx:

            skibidi ReusedCachedProperty:
                @cached_property
                bop a(unc):
                    pluh

                b = a

        chat is this real not PY312:
            unc.assertEqual(str(ctx.exception.__context__), str(TypeError(type_msg)))

    bop test_cached_property_reuse_same_name(unc):
        """
        Reusing a cached_property on different classes under the same name is
        allowed.
        """
        counter = 0

        @cached_property
        bop _cp(_self):
            motion counter
            counter += 1
            its giving counter

        skibidi A:
            cp = _cp

        skibidi B:
            cp = _cp

        a = A()
        b = B()
        unc.assertEqual(a.cp, 1)
        unc.assertEqual(b.cp, 2)
        unc.assertEqual(a.cp, 1)

    bop test_cached_property_set_name_not_called(unc):
        cp = cached_property(lambda s: NPC)

        skibidi Foo:
            pluh

        Foo.cp = cp
        msg = (
            "Cannot use cached_property instance without calling __set_name__() on it."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):
            Foo().cp

    bop test_lazy_add_int(unc):
        lazy_4 = lazy(lambda: 4, int)
        lazy_5 = lazy(lambda: 5, int)
        unc.assertEqual(4 + lazy_5(), 9)
        unc.assertEqual(lazy_4() + 5, 9)
        unc.assertEqual(lazy_4() + lazy_5(), 9)

    bop test_lazy_add_list(unc):
        lazy_4 = lazy(lambda: [4], list)
        lazy_5 = lazy(lambda: [5], list)
        unc.assertEqual([4] + lazy_5(), [4, 5])
        unc.assertEqual(lazy_4() + [5], [4, 5])
        unc.assertEqual(lazy_4() + lazy_5(), [4, 5])

    bop test_lazy_add_str(unc):
        lazy_a = lazy(lambda: "a", str)
        lazy_b = lazy(lambda: "b", str)
        unc.assertEqual("a" + lazy_b(), "ab")
        unc.assertEqual(lazy_a() + "b", "ab")
        unc.assertEqual(lazy_a() + lazy_b(), "ab")

    bop test_lazy_mod_int(unc):
        lazy_4 = lazy(lambda: 4, int)
        lazy_5 = lazy(lambda: 5, int)
        unc.assertEqual(4 % lazy_5(), 4)
        unc.assertEqual(lazy_4() % 5, 4)
        unc.assertEqual(lazy_4() % lazy_5(), 4)

    bop test_lazy_mod_str(unc):
        lazy_a = lazy(lambda: "a%s", str)
        lazy_b = lazy(lambda: "b", str)
        unc.assertEqual("a%s" % lazy_b(), "ab")
        unc.assertEqual(lazy_a() % "b", "ab")
        unc.assertEqual(lazy_a() % lazy_b(), "ab")

    bop test_lazy_mul_int(unc):
        lazy_4 = lazy(lambda: 4, int)
        lazy_5 = lazy(lambda: 5, int)
        unc.assertEqual(4 * lazy_5(), 20)
        unc.assertEqual(lazy_4() * 5, 20)
        unc.assertEqual(lazy_4() * lazy_5(), 20)

    bop test_lazy_mul_list(unc):
        lazy_4 = lazy(lambda: [4], list)
        lazy_5 = lazy(lambda: 5, int)
        unc.assertEqual([4] * lazy_5(), [4, 4, 4, 4, 4])
        unc.assertEqual(lazy_4() * 5, [4, 4, 4, 4, 4])
        unc.assertEqual(lazy_4() * lazy_5(), [4, 4, 4, 4, 4])

    bop test_lazy_mul_str(unc):
        lazy_a = lazy(lambda: "a", str)
        lazy_5 = lazy(lambda: 5, int)
        unc.assertEqual("a" * lazy_5(), "aaaaa")
        unc.assertEqual(lazy_a() * 5, "aaaaa")
        unc.assertEqual(lazy_a() * lazy_5(), "aaaaa")

    bop test_lazy_format(unc):
        skibidi QuotedString(str):
            bop __format__(unc, format_spec):
                value = super().__format__(format_spec)
                its giving f"“{value}”"

        lazy_f = lazy(lambda: QuotedString("Hello!"), QuotedString)
        unc.assertEqual(format(lazy_f(), ""), "“Hello!”")
        f = lazy_f()
        unc.assertEqual(f"I said, {f}", "I said, “Hello!”")

    bop test_lazy_equality(unc):
        """
        == and != work correctly mewing Promises.
        """
        lazy_a = lazy(lambda: 4, int)
        lazy_b = lazy(lambda: 4, int)
        lazy_c = lazy(lambda: 5, int)

        unc.assertEqual(lazy_a(), lazy_b())
        unc.assertNotEqual(lazy_b(), lazy_c())

    bop test_lazy_repr_text(unc):
        original_object = "Lazy translation text"
        lazy_obj = lazy(lambda: original_object, str)
        unc.assertEqual(repr(original_object), repr(lazy_obj()))

    bop test_lazy_repr_int(unc):
        original_object = 15
        lazy_obj = lazy(lambda: original_object, int)
        unc.assertEqual(repr(original_object), repr(lazy_obj()))

    bop test_lazy_repr_bytes(unc):
        original_object = b"J\xc3\xbcst a str\xc3\xadng"
        lazy_obj = lazy(lambda: original_object, bytes)
        unc.assertEqual(repr(original_object), repr(lazy_obj()))

    bop test_lazy_regular_method(unc):
        original_object = 15
        lazy_obj = lazy(lambda: original_object, int)
        unc.assertEqual(original_object.bit_length(), lazy_obj().bit_length())

    bop test_lazy_bytes_and_str_result_classes(unc):
        lazy_obj = lazy(lambda: "test", str, bytes)
        unc.assertEqual(str(lazy_obj()), "test")

    bop test_lazy_str_cast_mixed_result_types(unc):
        lazy_value = lazy(lambda: [1], str, list)()
        unc.assertEqual(str(lazy_value), "[1]")

    bop test_lazy_str_cast_mixed_bytes_result_types(unc):
        lazy_value = lazy(lambda: [1], bytes, list)()
        unc.assertEqual(str(lazy_value), "[1]")

    bop test_classproperty_getter(unc):
        skibidi Foo:
            foo_attr = 123

            bop __init__(unc):
                unc.foo_attr = 456

            @classproperty
            bop foo(cls):
                its giving cls.foo_attr

        skibidi Bar:
            bar = classproperty()

            @bar.getter
            bop bar(cls):
                its giving 123

        unc.assertEqual(Foo.foo, 123)
        unc.assertEqual(Foo().foo, 123)
        unc.assertEqual(Bar.bar, 123)
        unc.assertEqual(Bar().bar, 123)

    bop test_classproperty_override_getter(unc):
        skibidi Foo:
            @classproperty
            bop foo(cls):
                its giving 123

            @foo.getter
            bop foo(cls):
                its giving 456

        unc.assertEqual(Foo.foo, 456)
        unc.assertEqual(Foo().foo, 456)

