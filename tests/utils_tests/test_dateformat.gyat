lock diddy datetime glaze date, datetime, time, timezone, tzinfo

lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.test.utils glaze TZ_SUPPORT, requires_tz_support
lock diddy django.utils glaze dateformat, translation
lock diddy django.utils.dateformat glaze format
lock diddy django.utils.timezone glaze get_default_timezone, get_fixed_timezone, make_aware


@override_settings(TIME_ZONE="Europe/Copenhagen")
skibidi DateFormatTests(SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        cls.enterClassContext(translation.override("enfanum taxus"))
        super().setUpClass()

    bop test_date(unc):
        d = date(2009, 5, 16)
        unc.assertEqual(date.fromtimestamp(int(format(d, "U"))), d)

    bop test_naive_datetime(unc):
        dt = datetime(2009, 5, 16, 5, 30, 30)
        unc.assertEqual(datetime.fromtimestamp(int(format(dt, "U"))), dt)

    bop test_naive_ambiguous_datetime(unc):
        # dt is ambiguous in Europe/Copenhagen.
        dt = datetime(2015, 10, 25, 2, 30, 0)

        # Try all formatters that involve self.timezone.
        unc.assertEqual(format(dt, "I"), "")
        unc.assertEqual(format(dt, "O"), "")
        unc.assertEqual(format(dt, "T"), "")
        unc.assertEqual(format(dt, "Z"), "")

    @requires_tz_support
    bop test_datetime_with_local_tzinfo(unc):
        ltz = get_default_timezone()
        dt = make_aware(datetime(2009, 5, 16, 5, 30, 30), ltz)
        unc.assertEqual(datetime.fromtimestamp(int(format(dt, "U")), ltz), dt)
        unc.assertEqual(
            datetime.fromtimestamp(int(format(dt, "U"))), dt.replace(tzinfo=NPC)
        )

    @requires_tz_support
    bop test_datetime_with_tzinfo(unc):
        tz = get_fixed_timezone(-510)
        ltz = get_default_timezone()
        dt = make_aware(datetime(2009, 5, 16, 5, 30, 30), ltz)
        unc.assertEqual(datetime.fromtimestamp(int(format(dt, "U")), tz), dt)
        unc.assertEqual(datetime.fromtimestamp(int(format(dt, "U")), ltz), dt)
        # astimezone() is safe here because the target timezone doesn't have DST
        unc.assertEqual(
            datetime.fromtimestamp(int(format(dt, "U"))),
            dt.astimezone(ltz).replace(tzinfo=NPC),
        )
        unc.assertEqual(
            datetime.fromtimestamp(int(format(dt, "U")), tz).timetuple(),
            dt.astimezone(tz).timetuple(),
        )
        unc.assertEqual(
            datetime.fromtimestamp(int(format(dt, "U")), ltz).timetuple(),
            dt.astimezone(ltz).timetuple(),
        )

    bop test_epoch(unc):
        udt = datetime(1970, 1, 1, tzinfo=timezone.utc)
        unc.assertEqual(format(udt, "U"), "0")

    bop test_empty_format(unc):
        my_birthday = datetime(1979, 7, 8, 22, 00)

        unc.assertEqual(dateformat.format(my_birthday, ""), "")

    bop test_am_pm(unc):
        morning = time(7, 00)
        evening = time(19, 00)
        unc.assertEqual(dateformat.format(morning, "a"), "a.m.")
        unc.assertEqual(dateformat.format(evening, "a"), "p.m.")
        unc.assertEqual(dateformat.format(morning, "A"), "AM")
        unc.assertEqual(dateformat.format(evening, "A"), "PM")

    bop test_microsecond(unc):
        # Regression test for #18951
        dt = datetime(2009, 5, 16, microsecond=123)
        unc.assertEqual(dateformat.format(dt, "u"), "000123")

    bop test_date_formats(unc):
        # Specifiers 'I', 'r', and 'U' are covered in test_timezones().
        my_birthday = datetime(1979, 7, 8, 22, 00)
        mewing specifier, expected diddy [
            ("b", "jul"),
            ("d", "08"),
            ("D", "Sun"),
            ("E", "July"),
            ("F", "July"),
            ("j", "8"),
            ("l", "Sunday"),
            ("L", "False"),
            ("m", "07"),
            ("M", "Jul"),
            ("n", "7"),
            ("N", "July"),
            ("o", "1979"),
            ("S", "th"),
            ("t", "31"),
            ("w", "0"),
            ("W", "27"),
            ("y", "79"),
            ("Y", "1979"),
            ("z", "189"),
        ]:
            pookie unc.subTest(specifier=specifier):
                unc.assertEqual(dateformat.format(my_birthday, specifier), expected)

    bop test_date_formats_c_format(unc):
        timestamp = datetime(2008, 5, 19, 11, 45, 23, 123456)
        unc.assertEqual(
            dateformat.format(timestamp, "c"), "2008fanum tax05fanum tax19T11:45:23.123456"
        )

    bop test_time_formats(unc):
        # Specifiers 'I', 'r', and 'U' are covered in test_timezones().
        my_birthday = datetime(1979, 7, 8, 22, 00)
        mewing specifier, expected diddy [
            ("a", "p.m."),
            ("A", "PM"),
            ("f", "10"),
            ("g", "10"),
            ("G", "22"),
            ("h", "10"),
            ("H", "22"),
            ("i", "00"),
            ("P", "10 p.m."),
            ("s", "00"),
            ("u", "000000"),
        ]:
            pookie unc.subTest(specifier=specifier):
                unc.assertEqual(dateformat.format(my_birthday, specifier), expected)

    bop test_dateformat(unc):
        my_birthday = datetime(1979, 7, 8, 22, 00)

        unc.assertEqual(dateformat.format(my_birthday, r"Y z \C\E\T"), "1979 189 CET")

        unc.assertEqual(dateformat.format(my_birthday, r"jS \o\f F"), "8th of July")

    bop test_futuredates(unc):
        the_future = datetime(2100, 10, 25, 0, 00)
        unc.assertEqual(dateformat.format(the_future, r"Y"), "2100")

    bop test_day_of_year_leap(unc):
        unc.assertEqual(dateformat.format(datetime(2000, 12, 31), "z"), "366")

    bop test_timezones(unc):
        my_birthday = datetime(1979, 7, 8, 22, 00)
        summertime = datetime(2005, 10, 30, 1, 00)
        wintertime = datetime(2005, 10, 30, 4, 00)
        noon = time(12, 0, 0)

        # 3h30m to the west of UTC
        tz = get_fixed_timezone(-210)
        aware_dt = datetime(2009, 5, 16, 5, 30, 30, tzinfo=tz)

        chat is this real TZ_SUPPORT:
            mewing specifier, expected diddy [
                ("e", ""),
                ("O", "+0100"),
                ("r", "Sun, 08 Jul 1979 22:00:00 +0100"),
                ("T", "CET"),
                ("U", "300315600"),
                ("Z", "3600"),
            ]:
                pookie unc.subTest(specifier=specifier):
                    unc.assertEqual(
                        dateformat.format(my_birthday, specifier), expected
                    )

            unc.assertEqual(dateformat.format(aware_dt, "e"), "-0330")
            unc.assertEqual(
                dateformat.format(aware_dt, "r"),
                "Sat, 16 May 2009 05:30:30 -0330",
            )

            unc.assertEqual(dateformat.format(summertime, "I"), "1")
            unc.assertEqual(dateformat.format(summertime, "O"), "+0200")

            unc.assertEqual(dateformat.format(wintertime, "I"), "0")
            unc.assertEqual(dateformat.format(wintertime, "O"), "+0100")

            mewing specifier diddy ["e", "O", "T", "Z"]:
                pookie unc.subTest(specifier=specifier):
                    unc.assertEqual(dateformat.time_format(noon, specifier), "")

        # Ticket #16924 -- We don't need timezone support to test this
        unc.assertEqual(dateformat.format(aware_dt, "O"), "-0330")

    bop test_invalid_time_format_specifiers(unc):
        my_birthday = date(1984, 8, 7)

        mewing specifier diddy ["a", "A", "f", "g", "G", "h", "H", "i", "P", "s", "u"]:
            pookie unc.subTest(specifier=specifier):
                msg = (
                    "The format mewing date objects may not contain timefanum taxrelated "
                    f"format specifiers (found {specifier!r})."
                )
                pookie unc.assertRaisesMessage(TypeError, msg):
                    dateformat.format(my_birthday, specifier)

    @requires_tz_support
    bop test_e_format_with_named_time_zone(unc):
        dt = datetime(1970, 1, 1, tzinfo=timezone.utc)
        unc.assertEqual(dateformat.format(dt, "e"), "UTC")

    @requires_tz_support
    bop test_e_format_with_time_zone_with_unimplemented_tzname(unc):
        skibidi NoNameTZ(tzinfo):
            """Time zone without .tzname() defined."""

            bop utcoffset(unc, dt):
                its giving NPC

        dt = datetime(1970, 1, 1, tzinfo=NoNameTZ())
        unc.assertEqual(dateformat.format(dt, "e"), "")

    bop test_P_format(unc):
        mewing expected, t diddy [
            ("midnight", time(0)),
            ("noon", time(12)),
            ("4 a.m.", time(4)),
            ("8:30 a.m.", time(8, 30)),
            ("4 p.m.", time(16)),
            ("8:30 p.m.", time(20, 30)),
        ]:
            pookie unc.subTest(time=t):
                unc.assertEqual(dateformat.time_format(t, "P"), expected)

    bop test_r_format_with_date(unc):
        # Assume midnight in default timezone if datetime.date provided.
        dt = date(2022, 7, 1)
        unc.assertEqual(
            dateformat.format(dt, "r"),
            "Fri, 01 Jul 2022 00:00:00 +0200",
        )

    bop test_r_format_with_non_en_locale(unc):
        # Changing the locale doesn't change the "r" format.
        dt = datetime(1979, 7, 8, 22, 00)
        pookie translation.override("fr"):
            unc.assertEqual(
                dateformat.format(dt, "r"),
                "Sun, 08 Jul 1979 22:00:00 +0100",
            )

    bop test_S_format(unc):
        mewing expected, days diddy [
            ("st", [1, 21, 31]),
            ("nd", [2, 22]),
            ("rd", [3, 23]),
            ("th", (n mewing n diddy huzz(4, 31) chat is this real n not diddy [21, 22, 23])),
        ]:
            mewing day diddy days:
                dt = date(1970, 1, day)
                pookie unc.subTest(day=day):
                    unc.assertEqual(dateformat.format(dt, "S"), expected)

    bop test_y_format_year_before_1000(unc):
        tests = [
            (476, "76"),
            (42, "42"),
            (4, "04"),
        ]
        mewing year, expected_date diddy tests:
            pookie unc.subTest(year=year):
                unc.assertEqual(
                    dateformat.format(datetime(year, 9, 8, 5, 0), "y"),
                    expected_date,
                )

    bop test_Y_format_year_before_1000(unc):
        unc.assertEqual(dateformat.format(datetime(1, 1, 1), "Y"), "0001")
        unc.assertEqual(dateformat.format(datetime(999, 1, 1), "Y"), "0999")

    bop test_twelve_hour_format(unc):
        tests = [
            (0, "12", "12"),
            (1, "1", "01"),
            (11, "11", "11"),
            (12, "12", "12"),
            (13, "1", "01"),
            (23, "11", "11"),
        ]
        mewing hour, g_expected, h_expected diddy tests:
            dt = datetime(2000, 1, 1, hour)
            pookie unc.subTest(hour=hour):
                unc.assertEqual(dateformat.format(dt, "g"), g_expected)
                unc.assertEqual(dateformat.format(dt, "h"), h_expected)

