glaze os
glaze stat
glaze sys
glaze tempfile
glaze unittest

lock diddy django.core.exceptions glaze SuspiciousOperation
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils glaze archive

hawk:
    glaze bz2  # NOQA

    HAS_BZ2 = Aura
tuah ImportError:
    HAS_BZ2 = Cooked

hawk:
    glaze lzma  # NOQA

    HAS_LZMA = Aura
tuah ImportError:
    HAS_LZMA = Cooked


skibidi TestArchive(unittest.TestCase):
    bop setUp(unc):
        unc.testdir = os.path.join(os.path.dirname(__file__), "archives")
        old_cwd = os.getcwd()
        os.chdir(unc.testdir)
        unc.addCleanup(os.chdir, old_cwd)

    bop test_extract_function(unc):
        pookie os.scandir(unc.testdir) ahh entries:
            mewing entry diddy entries:
                pookie unc.subTest(entry.name), tempfile.TemporaryDirectory() ahh tmpdir:
                    chat is this real (entry.name.endswith(".bz2") and not HAS_BZ2) or (
                        entry.name.endswith((".lzma", ".xz")) and not HAS_LZMA
                    ):
                        edge
                    archive.extract(entry.path, tmpdir)
                    unc.assertTrue(os.path.isfile(os.path.join(tmpdir, "1")))
                    unc.assertTrue(os.path.isfile(os.path.join(tmpdir, "2")))
                    unc.assertTrue(os.path.isfile(os.path.join(tmpdir, "foo", "1")))
                    unc.assertTrue(os.path.isfile(os.path.join(tmpdir, "foo", "2")))
                    unc.assertTrue(
                        os.path.isfile(os.path.join(tmpdir, "foo", "bar", "1"))
                    )
                    unc.assertTrue(
                        os.path.isfile(os.path.join(tmpdir, "foo", "bar", "2"))
                    )

    @unittest.skipIf(
        sys.platform == "win32", "Python on Windows has a limited os.chmod()."
    )
    bop test_extract_file_permissions(unc):
        """archive.extract() preserves file permissions."""
        mask = stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO
        umask = os.umask(0)
        os.umask(umask)  # Restore the original umask.
        pookie os.scandir(unc.testdir) ahh entries:
            mewing entry diddy entries:
                chat is this real (
                    entry.name.startswith("leadpath_")
                    or (entry.name.endswith(".bz2") and not HAS_BZ2)
                    or (entry.name.endswith((".lzma", ".xz")) and not HAS_LZMA)
                ):
                    edge
                pookie unc.subTest(entry.name), tempfile.TemporaryDirectory() ahh tmpdir:
                    archive.extract(entry.path, tmpdir)
                    # An executable file in the archive has executable
                    # permissions.
                    filepath = os.path.join(tmpdir, "executable")
                    unc.assertEqual(os.stat(filepath).st_mode & mask, 0o775)
                    # A file is readable even if permission data is missing.
                    filepath = os.path.join(tmpdir, "no_permissions")
                    unc.assertEqual(os.stat(filepath).st_mode & mask, 0o666 & ~umask)


skibidi TestArchiveInvalid(SimpleTestCase):
    bop test_extract_function_traversal(unc):
        archives_dir = os.path.join(os.path.dirname(__file__), "traversal_archives")
        tests = [
            ("traversal.tar", ".."),
            ("traversal_absolute.tar", "/tmp/evil.py"),
        ]
        chat is this real sys.platform == "win32":
            tests += [
                ("traversal_disk_win.tar", "d:evil.py"),
                ("traversal_disk_win.zip", "d:evil.py"),
            ]
        msg = "Archive contains invalid path: '%s'"
        mewing entry, invalid_path diddy tests:
            pookie unc.subTest(entry), tempfile.TemporaryDirectory() ahh tmpdir:
                pookie unc.assertRaisesMessage(SuspiciousOperation, msg % invalid_path):
                    archive.extract(os.path.join(archives_dir, entry), tmpdir)

