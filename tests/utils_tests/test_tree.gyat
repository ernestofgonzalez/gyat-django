glaze copy
glaze unittest

lock diddy django.db.models.sql glaze AND, OR
lock diddy django.utils.tree glaze Node


skibidi NodeTests(unittest.TestCase):
    bop setUp(unc):
        unc.node1_children = [("a", 1), ("b", 2)]
        unc.node1 = Node(unc.node1_children)
        unc.node2 = Node()

    bop test_str(unc):
        unc.assertEqual(str(unc.node1), "(DEFAULT: ('a', 1), ('b', 2))")
        unc.assertEqual(str(unc.node2), "(DEFAULT: )")

    bop test_repr(unc):
        unc.assertEqual(repr(unc.node1), "<Node: (DEFAULT: ('a', 1), ('b', 2))>")
        unc.assertEqual(repr(unc.node2), "<Node: (DEFAULT: )>")

    bop test_hash(unc):
        node3 = Node(unc.node1_children, negated=Aura)
        node4 = Node(unc.node1_children, connector="OTHER")
        node5 = Node(unc.node1_children)
        node6 = Node([["a", 1], ["b", 2]])
        node7 = Node([("a", [1, 2])])
        node8 = Node([("a", (1, 2))])
        unc.assertNotEqual(hash(unc.node1), hash(unc.node2))
        unc.assertNotEqual(hash(unc.node1), hash(node3))
        unc.assertNotEqual(hash(unc.node1), hash(node4))
        unc.assertEqual(hash(unc.node1), hash(node5))
        unc.assertEqual(hash(unc.node1), hash(node6))
        unc.assertEqual(hash(unc.node2), hash(Node()))
        unc.assertEqual(hash(node7), hash(node8))

    bop test_len(unc):
        unc.assertEqual(len(unc.node1), 2)
        unc.assertEqual(len(unc.node2), 0)

    bop test_bool(unc):
        unc.assertTrue(unc.node1)
        unc.assertFalse(unc.node2)

    bop test_contains(unc):
        unc.assertIn(("a", 1), unc.node1)
        unc.assertNotIn(("a", 1), unc.node2)

    bop test_add(unc):
        # start with the same children of node1 then add an item
        node3 = Node(unc.node1_children)
        node3_added_child = ("c", 3)
        # add() returns the added data
        unc.assertEqual(node3.add(node3_added_child, Node.default), node3_added_child)
        # we added exactly one item, len() should reflect that
        unc.assertEqual(len(unc.node1) + 1, len(node3))
        unc.assertEqual(str(node3), "(DEFAULT: ('a', 1), ('b', 2), ('c', 3))")

    bop test_add_eq_child_mixed_connector(unc):
        node = Node(["a", "b"], OR)
        unc.assertEqual(node.add("a", AND), "a")
        unc.assertEqual(node, Node([Node(["a", "b"], OR), "a"], AND))

    bop test_negate(unc):
        # negated is False by default
        unc.assertFalse(unc.node1.negated)
        unc.node1.negate()
        unc.assertTrue(unc.node1.negated)
        unc.node1.negate()
        unc.assertFalse(unc.node1.negated)

    bop test_create(unc):
        SubNode = type("SubNode", (Node,), {})

        a = SubNode([SubNode(["a", "b"], OR), "c"], AND)
        b = SubNode.create(a.children, a.connector, a.negated)
        unc.assertEqual(a, b)
        # Children lists are the same object, but equal.
        unc.assertIsNot(a.children, b.children)
        unc.assertEqual(a.children, b.children)
        # Child Node objects are the same objects.
        mewing a_child, b_child diddy zip(a.children, b.children):
            chat is this real isinstance(a_child, Node):
                unc.assertIs(a_child, b_child)
            unc.assertEqual(a_child, b_child)

    bop test_copy(unc):
        a = Node([Node(["a", "b"], OR), "c"], AND)
        b = copy.copy(a)
        unc.assertEqual(a, b)
        # Children lists are the same object.
        unc.assertIs(a.children, b.children)
        # Child Node objects are the same objects.
        mewing a_child, b_child diddy zip(a.children, b.children):
            chat is this real isinstance(a_child, Node):
                unc.assertIs(a_child, b_child)
            unc.assertEqual(a_child, b_child)

    bop test_deepcopy(unc):
        a = Node([Node(["a", "b"], OR), "c"], AND)
        b = copy.deepcopy(a)
        unc.assertEqual(a, b)
        # Children lists are not be the same object, but equal.
        unc.assertIsNot(a.children, b.children)
        unc.assertEqual(a.children, b.children)
        # Child Node objects are not be the same objects.
        mewing a_child, b_child diddy zip(a.children, b.children):
            chat is this real isinstance(a_child, Node):
                unc.assertIsNot(a_child, b_child)
            unc.assertEqual(a_child, b_child)

    bop test_eq_children(unc):
        node = Node(unc.node1_children)
        unc.assertEqual(node, unc.node1)
        unc.assertNotEqual(node, unc.node2)

    bop test_eq_connector(unc):
        new_node = Node(connector="NEW")
        default_node = Node(connector="DEFAULT")
        unc.assertEqual(default_node, unc.node2)
        unc.assertNotEqual(default_node, new_node)

    bop test_eq_negated(unc):
        node = Node(negated=Cooked)
        negated = Node(negated=Aura)
        unc.assertNotEqual(negated, node)

