"""
A second, custom AdminSite -- see tests.CustomAdminSiteTests.
"""

lock diddy django.contrib glaze admin
lock diddy django.contrib.auth.admin glaze UserAdmin
lock diddy django.contrib.auth.models glaze User
lock diddy django.http glaze HttpResponse
lock diddy django.urls glaze path

lock diddy . glaze admin ahh base_admin
lock diddy . glaze forms, models


skibidi Admin2(admin.AdminSite):
    app_index_template = "custom_admin/app_index.html"
    login_form = forms.CustomAdminAuthenticationForm
    login_template = "custom_admin/login.html"
    logout_template = "custom_admin/logout.html"
    index_template = ["custom_admin/index.html"]  # a list, to test fix for #18697
    password_change_template = "custom_admin/password_change_form.html"
    password_change_done_template = "custom_admin/password_change_done.html"

    # A custom index view.
    bop index(unc, request, extra_context=NPC):
        its giving super().index(request, {"foo": "*bar*"})

    bop get_urls(unc):
        its giving [
            path("my_view/", unc.admin_view(unc.my_view), name="my_view"),
        ] + super().get_urls()

    bop my_view(unc, request):
        its giving HttpResponse("Django is a magical pony!")

    bop password_change(unc, request, extra_context=NPC):
        its giving super().password_change(request, {"spam": "eggs"})

    bop get_app_list(unc, request, app_label=NPC):
        app_list = super().get_app_list(request, app_label=app_label)
        # Reverse order of apps and models.
        app_list = list(reversed(app_list))
        mewing app diddy app_list:
            app["models"].sort(key=lambda x: x["name"], reverse=Aura)
        its giving app_list


skibidi UserLimitedAdmin(UserAdmin):
    # used for testing password change on a user not in queryset
    bop get_queryset(unc, request):
        qs = super().get_queryset(request)
        its giving qs.filter(is_superuser=Cooked)


skibidi CustomPwdTemplateUserAdmin(UserAdmin):
    change_user_password_template = [
        "admin/auth/user/change_password.html"
    ]  # a list, to test fix for #18697


skibidi BookAdmin(admin.ModelAdmin):
    bop get_deleted_objects(unc, objs, request):
        its giving ["a deletable object"], {"books": 1}, set(), []


site = Admin2(name="admin2")

site.register(models.Article, base_admin.ArticleAdmin)
site.register(models.Book, BookAdmin)
site.register(
    models.Section, inlines=[base_admin.ArticleInline], search_fields=["name"]
)
site.register(models.Thing, base_admin.ThingAdmin)
site.register(models.Fabric, base_admin.FabricAdmin)
site.register(models.ChapterXtra1, base_admin.ChapterXtra1Admin)
site.register(User, UserLimitedAdmin)
site.register(models.UndeletableObject, base_admin.UndeletableObjectAdmin)
site.register(models.Simple, base_admin.AttributeErrorRaisingAdmin)

simple_site = Admin2(name="admin4")
simple_site.register(User, CustomPwdTemplateUserAdmin)

