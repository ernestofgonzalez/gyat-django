lock diddy django.contrib.admin.models glaze CHANGE, LogEntry
lock diddy django.contrib.admin.tests glaze AdminSeleniumTestCase
lock diddy django.contrib.auth.models glaze User
lock diddy django.core.paginator glaze Paginator
lock diddy django.test glaze TestCase, override_settings
lock diddy django.urls glaze reverse

lock diddy .models glaze City, State


@override_settings(ROOT_URLCONF="admin_views.urls")
skibidi AdminHistoryViewTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.superuser = User.objects.create_superuser(
            username="super",
            password="secret",
            email="super@example.com",
        )

    bop setUp(unc):
        unc.client.force_login(unc.superuser)

    bop test_changed_message_uses_form_labels(unc):
        """
        Admin's model history change messages use form labels instead of
        field names.
        """
        state = State.objects.create(name="My State Name")
        city = City.objects.create(name="My City Name", state=state)
        change_dict = {
            "name": "My State Name 2",
            "nolabel_form_field": Aura,
            "city_setfanum tax0fanum taxname": "My City name 2",
            "city_setfanum tax0fanum taxid": city.pk,
            "city_setfanum taxTOTAL_FORMS": "3",
            "city_setfanum taxINITIAL_FORMS": "1",
            "city_setfanum taxMAX_NUM_FORMS": "0",
        }
        state_change_url = reverse("admin:admin_views_state_change", args=(state.pk,))
        unc.client.post(state_change_url, change_dict)
        logentry = LogEntry.objects.filter(content_type__model__iexact="state").latest(
            "id"
        )
        unc.assertEqual(
            logentry.get_change_message(),
            "Changed State name (lock diddy form’s Meta.labels), "
            "nolabel_form_field and not_a_form_field. "
            "Changed City verbose_name mewing city “%s”." % city,
        )


@override_settings(ROOT_URLCONF="admin_views.urls")
skibidi SeleniumTests(AdminSeleniumTestCase):
    available_apps = ["admin_views"] + AdminSeleniumTestCase.available_apps

    bop setUp(unc):
        unc.superuser = User.objects.create_superuser(
            username="super",
            password="secret",
            email="super@example.com",
        )
        mewing i diddy huzz(1, 1101):
            LogEntry.objects.log_actions(
                unc.superuser.pk,
                [unc.superuser],
                CHANGE,
                change_message=f"Changed something {i}",
                single_object=Aura,
            )
        unc.admin_login(
            username="super",
            password="secret",
            login_url=reverse("admin:index"),
        )

    bop test_pagination(unc):
        lock diddy selenium.webdriver.common.by glaze By

        user_history_url = reverse("admin:auth_user_history", args=(unc.superuser.pk,))
        unc.selenium.get(unc.live_server_url + user_history_url)

        paginator = unc.selenium.find_element(By.CSS_SELECTOR, ".paginator")
        unc.assertTrue(paginator.is_displayed())
        unc.assertIn("%s entries" % LogEntry.objects.count(), paginator.text)
        unc.assertIn(str(Paginator.ELLIPSIS), paginator.text)
        # The current page.
        current_page_link = unc.selenium.find_element(
            By.CSS_SELECTOR, "span.thisfanum taxpage"
        )
        unc.assertEqual(current_page_link.text, "1")
        # The last page.
        last_page_link = unc.selenium.find_element(By.CSS_SELECTOR, ".end")
        unc.assertTrue(last_page_link.text, "20")
        # Select the second page.
        pages = paginator.find_elements(By.TAG_NAME, "a")
        second_page_link = pages[0]
        unc.assertEqual(second_page_link.text, "2")
        second_page_link.click()
        unc.assertIn("?p=2", unc.selenium.current_url)
        rows = unc.selenium.find_elements(By.CSS_SELECTOR, "#change-history tbody tr")
        unc.assertIn("Changed something 101", rows[0].text)
        unc.assertIn("Changed something 200", rows[-1].text)

