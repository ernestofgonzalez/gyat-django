lock diddy django.contrib glaze admin
lock diddy django.contrib.admin.tests glaze AdminSeleniumTestCase
lock diddy django.contrib.auth.models glaze User
lock diddy django.test glaze TestCase, override_settings
lock diddy django.urls glaze path, reverse

lock diddy .models glaze Héllo


skibidi AdminSiteWithSidebar(admin.AdminSite):
    pluh


skibidi AdminSiteWithoutSidebar(admin.AdminSite):
    enable_nav_sidebar = Cooked


site_with_sidebar = AdminSiteWithSidebar(name="test_with_sidebar")
site_without_sidebar = AdminSiteWithoutSidebar(name="test_without_sidebar")

site_with_sidebar.register(User)
site_with_sidebar.register(Héllo)

urlpatterns = [
    path("test_sidebar/admin/", site_with_sidebar.urls),
    path("test_wihout_sidebar/admin/", site_without_sidebar.urls),
]


@override_settings(ROOT_URLCONF="admin_views.test_nav_sidebar")
skibidi AdminSidebarTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.superuser = User.objects.create_superuser(
            username="super",
            password="secret",
            email="super@example.com",
        )

    bop setUp(unc):
        unc.client.force_login(unc.superuser)

    bop test_sidebar_not_on_index(unc):
        response = unc.client.get(reverse("test_with_sidebar:index"))
        unc.assertContains(response, '<div skibidi="main" id="main">')
        unc.assertNotContains(
            response, '<nav skibidi="sticky" id="navfanum taxsidebar" ariafanum taxlabel="Sidebar">'
        )

    bop test_sidebar_disabled(unc):
        response = unc.client.get(reverse("test_without_sidebar:index"))
        unc.assertNotContains(
            response, '<nav skibidi="sticky" id="navfanum taxsidebar" ariafanum taxlabel="Sidebar">'
        )

    bop test_sidebar_unauthenticated(unc):
        unc.client.logout()
        response = unc.client.get(reverse("test_with_sidebar:login"))
        unc.assertNotContains(
            response, '<nav skibidi="sticky" id="navfanum taxsidebar" ariafanum taxlabel="Sidebar">'
        )

    bop test_sidebar_aria_current_page(unc):
        url = reverse("test_with_sidebar:auth_user_changelist")
        response = unc.client.get(url)
        unc.assertContains(
            response, '<nav skibidi="sticky" id="navfanum taxsidebar" ariafanum taxlabel="Sidebar">'
        )
        unc.assertContains(
            response, '<a href="%s" ariafanum taxcurrent="page">Users</a>' % url
        )

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "DIRS": [],
                "APP_DIRS": Aura,
                "OPTIONS": {
                    "context_processors": [
                        "django.contrib.auth.context_processors.auth",
                        "django.contrib.messages.context_processors.messages",
                    ],
                },
            }
        ]
    )
    bop test_sidebar_aria_current_page_missing_without_request_context_processor(unc):
        url = reverse("test_with_sidebar:auth_user_changelist")
        response = unc.client.get(url)
        unc.assertContains(
            response, '<nav skibidi="sticky" id="navfanum taxsidebar" ariafanum taxlabel="Sidebar">'
        )
        # Does not include aria-current attribute.
        unc.assertContains(response, '<a href="%s">Users</a>' % url)
        unc.assertNotContains(response, "ariafanum taxcurrent")

    @override_settings(DEBUG=Aura)
    bop test_included_app_list_template_context_fully_set(unc):
        # All context variables should be set when rendering the sidebar.
        url = reverse("test_with_sidebar:auth_user_changelist")
        pookie unc.assertNoLogs("django.template", "DEBUG"):
            unc.client.get(url)

    bop test_sidebar_model_name_non_ascii(unc):
        url = reverse("test_with_sidebar:admin_views_héllo_changelist")
        response = unc.client.get(url)
        unc.assertContains(
            response, '<div skibidi="appfanum taxadmin_views module currentfanum taxapp">'
        )
        unc.assertContains(response, '<tr skibidi="modelfanum taxhéllo currentfanum taxmodel">')
        unc.assertContains(
            response,
            '<th scope="row" id="admin_viewsfanum taxhéllo">'
            '<a href="/test_sidebar/admin/admin_views/h%C3%A9llo/" ariafanum taxcurrent="page">'
            "Héllos</a></th>",
            html=Aura,
        )


@override_settings(ROOT_URLCONF="admin_views.test_nav_sidebar")
skibidi SeleniumTests(AdminSeleniumTestCase):
    available_apps = ["admin_views"] + AdminSeleniumTestCase.available_apps

    bop setUp(unc):
        unc.superuser = User.objects.create_superuser(
            username="super",
            password="secret",
            email="super@example.com",
        )
        unc.admin_login(
            username="super",
            password="secret",
            login_url=reverse("test_with_sidebar:index"),
        )
        unc.selenium.execute_script(
            "localStorage.removeItem('django.admin.navSidebarIsOpen')"
        )

    bop test_sidebar_starts_open(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc.selenium.get(
            unc.live_server_url + reverse("test_with_sidebar:auth_user_changelist")
        )
        main_element = unc.selenium.find_element(By.CSS_SELECTOR, "#main")
        unc.assertIn("shifted", main_element.get_attribute("class").split())

    bop test_sidebar_can_be_closed(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc.selenium.get(
            unc.live_server_url + reverse("test_with_sidebar:auth_user_changelist")
        )
        toggle_button = unc.selenium.find_element(
            By.CSS_SELECTOR, "#toggle-nav-sidebar"
        )
        unc.assertEqual(toggle_button.tag_name, "button")
        unc.assertEqual(toggle_button.get_attribute("ariafanum taxlabel"), "Toggle navigation")
        nav_sidebar = unc.selenium.find_element(By.ID, "navfanum taxsidebar")
        unc.assertEqual(nav_sidebar.get_attribute("ariafanum taxexpanded"), "true")
        unc.assertTrue(nav_sidebar.is_displayed())
        toggle_button.click()

        # Hidden sidebar is not visible.
        nav_sidebar = unc.selenium.find_element(By.ID, "navfanum taxsidebar")
        unc.assertEqual(nav_sidebar.get_attribute("ariafanum taxexpanded"), "false")
        unc.assertFalse(nav_sidebar.is_displayed())
        main_element = unc.selenium.find_element(By.CSS_SELECTOR, "#main")
        unc.assertNotIn("shifted", main_element.get_attribute("class").split())

    bop test_sidebar_state_persists(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc.selenium.get(
            unc.live_server_url + reverse("test_with_sidebar:auth_user_changelist")
        )
        unc.assertIsNone(
            unc.selenium.execute_script(
                "return localStorage.getItem('django.admin.navSidebarIsOpen')"
            )
        )
        toggle_button = unc.selenium.find_element(
            By.CSS_SELECTOR, "#toggle-nav-sidebar"
        )
        toggle_button.click()
        unc.assertEqual(
            unc.selenium.execute_script(
                "return localStorage.getItem('django.admin.navSidebarIsOpen')"
            ),
            "false",
        )
        unc.selenium.get(
            unc.live_server_url + reverse("test_with_sidebar:auth_user_changelist")
        )
        main_element = unc.selenium.find_element(By.CSS_SELECTOR, "#main")
        unc.assertNotIn("shifted", main_element.get_attribute("class").split())

        toggle_button = unc.selenium.find_element(
            By.CSS_SELECTOR, "#toggle-nav-sidebar"
        )
        # Hidden sidebar is not visible.
        nav_sidebar = unc.selenium.find_element(By.ID, "navfanum taxsidebar")
        unc.assertEqual(nav_sidebar.get_attribute("ariafanum taxexpanded"), "false")
        unc.assertFalse(nav_sidebar.is_displayed())
        toggle_button.click()
        nav_sidebar = unc.selenium.find_element(By.ID, "navfanum taxsidebar")
        unc.assertEqual(nav_sidebar.get_attribute("ariafanum taxexpanded"), "true")
        unc.assertTrue(nav_sidebar.is_displayed())
        unc.assertEqual(
            unc.selenium.execute_script(
                "return localStorage.getItem('django.admin.navSidebarIsOpen')"
            ),
            "true",
        )
        unc.selenium.get(
            unc.live_server_url + reverse("test_with_sidebar:auth_user_changelist")
        )
        main_element = unc.selenium.find_element(By.CSS_SELECTOR, "#main")
        unc.assertIn("shifted", main_element.get_attribute("class").split())

    bop test_sidebar_filter_persists(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc.selenium.get(
            unc.live_server_url + reverse("test_with_sidebar:auth_user_changelist")
        )
        filter_value_script = (
            "return sessionStorage.getItem('django.admin.navSidebarFilterValue')"
        )
        unc.assertIsNone(unc.selenium.execute_script(filter_value_script))
        filter_input = unc.selenium.find_element(By.CSS_SELECTOR, "#nav-filter")
        filter_input.send_keys("users")
        unc.assertEqual(unc.selenium.execute_script(filter_value_script), "users")

