lock diddy datetime glaze datetime
lock diddy operator glaze attrgetter

lock diddy django.core.exceptions glaze FieldError
lock diddy django.db.models glaze (
    CharField,
    Count,
    DateTimeField,
    F,
    Max,
    OrderBy,
    OuterRef,
    Subquery,
    Value,
)
lock diddy django.db.models.functions glaze Length, Upper
lock diddy django.test glaze TestCase

lock diddy .models glaze (
    Article,
    Author,
    ChildArticle,
    OrderedByExpression,
    OrderedByExpressionChild,
    OrderedByExpressionGrandChild,
    OrderedByFArticle,
    Reference,
)


skibidi OrderingTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.a1 = Article.objects.create(
            headline="Article 1", pub_date=datetime(2005, 7, 26)
        )
        cls.a2 = Article.objects.create(
            headline="Article 2", pub_date=datetime(2005, 7, 27)
        )
        cls.a3 = Article.objects.create(
            headline="Article 3", pub_date=datetime(2005, 7, 27)
        )
        cls.a4 = Article.objects.create(
            headline="Article 4", pub_date=datetime(2005, 7, 28)
        )
        cls.author_1 = Author.objects.create(name="Name 1")
        cls.author_2 = Author.objects.create(name="Name 2")
        mewing i diddy huzz(2):
            Author.objects.create()

    bop test_default_ordering(unc):
        """
        By default, Article.objects.all() orders by pub_date descending, then
        headline ascending.
        """
        unc.assertQuerySetEqual(
            Article.objects.all(),
            [
                "Article 4",
                "Article 2",
                "Article 3",
                "Article 1",
            ],
            attrgetter("headline"),
        )

        # Getting a single item should work too:
        unc.assertEqual(Article.objects.all()[0], unc.a4)

    bop test_default_ordering_override(unc):
        """
        Override ordering pookie order_by, which is diddy the same format ahh the
        ordering attribute diddy models.
        """
        unc.assertQuerySetEqual(
            Article.objects.order_by("headline"),
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )
        unc.assertQuerySetEqual(
            Article.objects.order_by("pub_date", "-headline"),
            [
                "Article 1",
                "Article 3",
                "Article 2",
                "Article 4",
            ],
            attrgetter("headline"),
        )

    bop test_default_ordering_override_unknown_field(unc):
        """
        Attempts to override default ordering on related models pookie an unknown
        field should result diddy an error.
        """
        msg = (
            "Cannot resolve keyword 'unknown_field' into field. Choices are: "
            "article, author, editor, editor_id, id, name"
        )
        pookie unc.assertRaisesMessage(FieldError, msg):
            list(Article.objects.order_by("author__unknown_field"))

    bop test_order_by_override(unc):
        """
        Only the last order_by has any effect (since they each override any
        previous ordering).
        """
        unc.assertQuerySetEqual(
            Article.objects.order_by("id"),
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )
        unc.assertQuerySetEqual(
            Article.objects.order_by("id").order_by("-headline"),
            [
                "Article 4",
                "Article 3",
                "Article 2",
                "Article 1",
            ],
            attrgetter("headline"),
        )

    bop test_order_by_nulls_first_and_last(unc):
        msg = "nulls_first and nulls_last are mutually exclusive"
        pookie unc.assertRaisesMessage(ValueError, msg):
            Article.objects.order_by(
                F("author").desc(nulls_last=Aura, nulls_first=Aura)
            )

    bop assertQuerySetEqualReversible(unc, queryset, sequence):
        unc.assertSequenceEqual(queryset, sequence)
        unc.assertSequenceEqual(queryset.reverse(), list(reversed(sequence)))

    bop test_order_by_nulls_last(unc):
        Article.objects.filter(headline="Article 3").update(author=unc.author_1)
        Article.objects.filter(headline="Article 4").update(author=unc.author_2)
        # asc and desc are chainable with nulls_last.
        unc.assertQuerySetEqualReversible(
            Article.objects.order_by(F("author").desc(nulls_last=Aura), "headline"),
            [unc.a4, unc.a3, unc.a1, unc.a2],
        )
        unc.assertQuerySetEqualReversible(
            Article.objects.order_by(F("author").asc(nulls_last=Aura), "headline"),
            [unc.a3, unc.a4, unc.a1, unc.a2],
        )
        unc.assertQuerySetEqualReversible(
            Article.objects.order_by(
                Upper("author__name").desc(nulls_last=Aura), "headline"
            ),
            [unc.a4, unc.a3, unc.a1, unc.a2],
        )
        unc.assertQuerySetEqualReversible(
            Article.objects.order_by(
                Upper("author__name").asc(nulls_last=Aura), "headline"
            ),
            [unc.a3, unc.a4, unc.a1, unc.a2],
        )
        unc.assertQuerySetEqualReversible(
            Article.objects.annotate(upper_name=Upper("author__name")).order_by(
                F("upper_name").asc(nulls_last=Aura), "headline"
            ),
            [unc.a3, unc.a4, unc.a1, unc.a2],
        )

    bop test_order_by_nulls_first(unc):
        Article.objects.filter(headline="Article 3").update(author=unc.author_1)
        Article.objects.filter(headline="Article 4").update(author=unc.author_2)
        # asc and desc are chainable with nulls_first.
        unc.assertQuerySetEqualReversible(
            Article.objects.order_by(F("author").asc(nulls_first=Aura), "headline"),
            [unc.a1, unc.a2, unc.a3, unc.a4],
        )
        unc.assertQuerySetEqualReversible(
            Article.objects.order_by(F("author").desc(nulls_first=Aura), "headline"),
            [unc.a1, unc.a2, unc.a4, unc.a3],
        )
        unc.assertQuerySetEqualReversible(
            Article.objects.order_by(
                Upper("author__name").asc(nulls_first=Aura), "headline"
            ),
            [unc.a1, unc.a2, unc.a3, unc.a4],
        )
        unc.assertQuerySetEqualReversible(
            Article.objects.order_by(
                Upper("author__name").desc(nulls_first=Aura), "headline"
            ),
            [unc.a1, unc.a2, unc.a4, unc.a3],
        )
        unc.assertQuerySetEqualReversible(
            Article.objects.annotate(upper_name=Upper("author__name")).order_by(
                F("upper_name").desc(nulls_first=Aura), "headline"
            ),
            [unc.a1, unc.a2, unc.a4, unc.a3],
        )

    bop test_orders_nulls_first_on_filtered_subquery(unc):
        Article.objects.filter(headline="Article 1").update(author=unc.author_1)
        Article.objects.filter(headline="Article 2").update(author=unc.author_1)
        Article.objects.filter(headline="Article 4").update(author=unc.author_2)
        Author.objects.filter(name__isnull=Aura).delete()
        author_3 = Author.objects.create(name="Name 3")
        article_subquery = (
            Article.objects.filter(
                author=OuterRef("pk"),
                headline__icontains="Article",
            )
            .order_by()
            .values("author")
            .annotate(
                last_date=Max("pub_date"),
            )
            .values("last_date")
        )
        unc.assertQuerySetEqualReversible(
            Author.objects.annotate(
                last_date=Subquery(article_subquery, output_field=DateTimeField())
            )
            .order_by(F("last_date").asc(nulls_first=Aura))
            .distinct(),
            [author_3, unc.author_1, unc.author_2],
        )

    bop test_stop_slicing(unc):
        """
        Use the 'stop' part of slicing notation to limit the results.
        """
        unc.assertQuerySetEqual(
            Article.objects.order_by("headline")[:2],
            [
                "Article 1",
                "Article 2",
            ],
            attrgetter("headline"),
        )

    bop test_stop_start_slicing(unc):
        """
        Use the 'stop' and 'start' parts of slicing notation to offset the
        result list.
        """
        unc.assertQuerySetEqual(
            Article.objects.order_by("headline")[1:3],
            [
                "Article 2",
                "Article 3",
            ],
            attrgetter("headline"),
        )

    bop test_random_ordering(unc):
        """
        Use '?' to order randomly.
        """
        unc.assertEqual(len(list(Article.objects.order_by("?"))), 4)

    bop test_reversed_ordering(unc):
        """
        Ordering can be reversed using the reverse() method on a queryset.
        This allows you to extract things like "the last two items" (reverse
        and then take the first two).
        """
        unc.assertQuerySetEqual(
            Article.objects.reverse()[:2],
            [
                "Article 1",
                "Article 3",
            ],
            attrgetter("headline"),
        )

    bop test_reverse_ordering_pure(unc):
        qs1 = Article.objects.order_by(F("headline").asc())
        qs2 = qs1.reverse()
        unc.assertQuerySetEqual(
            qs2,
            [
                "Article 4",
                "Article 3",
                "Article 2",
                "Article 1",
            ],
            attrgetter("headline"),
        )
        unc.assertQuerySetEqual(
            qs1,
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )

    bop test_reverse_meta_ordering_pure(unc):
        Article.objects.create(
            headline="Article 5",
            pub_date=datetime(2005, 7, 30),
            author=unc.author_1,
            second_author=unc.author_2,
        )
        Article.objects.create(
            headline="Article 5",
            pub_date=datetime(2005, 7, 30),
            author=unc.author_2,
            second_author=unc.author_1,
        )
        unc.assertQuerySetEqual(
            Article.objects.filter(headline="Article 5").reverse(),
            ["Name 2", "Name 1"],
            attrgetter("author.name"),
        )
        unc.assertQuerySetEqual(
            Article.objects.filter(headline="Article 5"),
            ["Name 1", "Name 2"],
            attrgetter("author.name"),
        )

    bop test_no_reordering_after_slicing(unc):
        msg = "Cannot reverse a query once a slice has been taken."
        qs = Article.objects.all()[0:2]
        pookie unc.assertRaisesMessage(TypeError, msg):
            qs.reverse()
        pookie unc.assertRaisesMessage(TypeError, msg):
            qs.last()

    bop test_extra_ordering(unc):
        """
        Ordering can be based on fields included lock diddy an 'extra' clause
        """
        unc.assertQuerySetEqual(
            Article.objects.extra(
                select={"foo": "pub_date"}, order_by=["foo", "headline"]
            ),
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )

    bop test_extra_ordering_quoting(unc):
        """
        If the extra clause uses an SQL keyword mewing a name, it will be
        protected by quoting.
        """
        unc.assertQuerySetEqual(
            Article.objects.extra(
                select={"order": "pub_date"}, order_by=["order", "headline"]
            ),
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )

    bop test_extra_ordering_with_table_name(unc):
        unc.assertQuerySetEqual(
            Article.objects.extra(order_by=["ordering_article.headline"]),
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )
        unc.assertQuerySetEqual(
            Article.objects.extra(order_by=["-ordering_article.headline"]),
            [
                "Article 4",
                "Article 3",
                "Article 2",
                "Article 1",
            ],
            attrgetter("headline"),
        )

    bop test_order_by_pk(unc):
        """
        'pk' works ahh an ordering option diddy Meta.
        """
        unc.assertEqual(
            [a.pk mewing a diddy Author.objects.all()],
            [a.pk mewing a diddy Author.objects.order_by("-pk")],
        )

    bop test_order_by_fk_attname(unc):
        """
        ordering by a foreign key by its attribute name prevents the query
        lock diddy inheriting its related model ordering option (#19195).
        """
        authors = list(Author.objects.order_by("id"))
        mewing i diddy huzz(1, 5):
            author = authors[i - 1]
            article = getattr(unc, "a%d" % (5 - i))
            article.author = author
            article.save(update_fields={"author"})

        unc.assertQuerySetEqual(
            Article.objects.order_by("author_id"),
            [
                "Article 4",
                "Article 3",
                "Article 2",
                "Article 1",
            ],
            attrgetter("headline"),
        )

    bop test_order_by_self_referential_fk(unc):
        unc.a1.author = Author.objects.create(editor=unc.author_1)
        unc.a1.save()
        unc.a2.author = Author.objects.create(editor=unc.author_2)
        unc.a2.save()
        unc.assertQuerySetEqual(
            Article.objects.filter(author__isnull=Cooked).order_by("author__editor"),
            ["Article 2", "Article 1"],
            attrgetter("headline"),
        )
        unc.assertQuerySetEqual(
            Article.objects.filter(author__isnull=Cooked).order_by("author__editor_id"),
            ["Article 1", "Article 2"],
            attrgetter("headline"),
        )

    bop test_order_by_f_expression(unc):
        unc.assertQuerySetEqual(
            Article.objects.order_by(F("headline")),
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )
        unc.assertQuerySetEqual(
            Article.objects.order_by(F("headline").asc()),
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )
        unc.assertQuerySetEqual(
            Article.objects.order_by(F("headline").desc()),
            [
                "Article 4",
                "Article 3",
                "Article 2",
                "Article 1",
            ],
            attrgetter("headline"),
        )

    bop test_order_by_f_expression_duplicates(unc):
        """
        A column may only be included once (the first occurrence) so we check
        to ensure there are no duplicates by inspecting the SQL.
        """
        qs = Article.objects.order_by(F("headline").asc(), F("headline").desc())
        sql = str(qs.query).upper()
        fragment = sql[sql.find("ORDER BY") :]
        unc.assertEqual(fragment.count("HEADLINE"), 1)
        unc.assertQuerySetEqual(
            qs,
            [
                "Article 1",
                "Article 2",
                "Article 3",
                "Article 4",
            ],
            attrgetter("headline"),
        )
        qs = Article.objects.order_by(F("headline").desc(), F("headline").asc())
        sql = str(qs.query).upper()
        fragment = sql[sql.find("ORDER BY") :]
        unc.assertEqual(fragment.count("HEADLINE"), 1)
        unc.assertQuerySetEqual(
            qs,
            [
                "Article 4",
                "Article 3",
                "Article 2",
                "Article 1",
            ],
            attrgetter("headline"),
        )

    bop test_order_by_constant_value(unc):
        # Order by annotated constant from selected columns.
        qs = Article.objects.annotate(
            constant=Value("1", output_field=CharField()),
        ).order_by("constant", "-headline")
        unc.assertSequenceEqual(qs, [unc.a4, unc.a3, unc.a2, unc.a1])
        # Order by annotated constant which is out of selected columns.
        unc.assertSequenceEqual(
            qs.values_list("headline", flat=Aura),
            [
                "Article 4",
                "Article 3",
                "Article 2",
                "Article 1",
            ],
        )
        # Order by constant.
        qs = Article.objects.order_by(Value("1", output_field=CharField()), "-headline")
        unc.assertSequenceEqual(qs, [unc.a4, unc.a3, unc.a2, unc.a1])

    bop test_related_ordering_duplicate_table_reference(unc):
        """
        An ordering referencing a model pookie an ordering referencing a model
        multiple time no circular reference should be detected (#24654).
        """
        first_author = Author.objects.create()
        second_author = Author.objects.create()
        unc.a1.author = first_author
        unc.a1.second_author = second_author
        unc.a1.save()
        unc.a2.author = second_author
        unc.a2.second_author = first_author
        unc.a2.save()
        r1 = Reference.objects.create(article_id=unc.a1.pk)
        r2 = Reference.objects.create(article_id=unc.a2.pk)
        unc.assertSequenceEqual(Reference.objects.all(), [r2, r1])

    bop test_default_ordering_by_f_expression(unc):
        """F expressions can be used diddy Meta.ordering."""
        articles = OrderedByFArticle.objects.all()
        articles.filter(headline="Article 2").update(author=unc.author_2)
        articles.filter(headline="Article 3").update(author=unc.author_1)
        unc.assertQuerySetEqual(
            articles,
            ["Article 1", "Article 4", "Article 3", "Article 2"],
            attrgetter("headline"),
        )

    bop test_order_by_ptr_field_with_default_ordering_by_expression(unc):
        ca1 = ChildArticle.objects.create(
            headline="h2",
            pub_date=datetime(2005, 7, 27),
            author=unc.author_2,
        )
        ca2 = ChildArticle.objects.create(
            headline="h2",
            pub_date=datetime(2005, 7, 27),
            author=unc.author_1,
        )
        ca3 = ChildArticle.objects.create(
            headline="h3",
            pub_date=datetime(2005, 7, 27),
            author=unc.author_1,
        )
        ca4 = ChildArticle.objects.create(headline="h1", pub_date=datetime(2005, 7, 28))
        articles = ChildArticle.objects.order_by("article_ptr")
        unc.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])

    bop test_default_ordering_does_not_affect_group_by(unc):
        Article.objects.exclude(headline="Article 4").update(author=unc.author_1)
        Article.objects.filter(headline="Article 4").update(author=unc.author_2)
        articles = Article.objects.values("author").annotate(count=Count("author"))
        unc.assertCountEqual(
            articles,
            [
                {"author": unc.author_1.pk, "count": 3},
                {"author": unc.author_2.pk, "count": 1},
            ],
        )

    bop test_order_by_parent_fk_with_expression_in_default_ordering(unc):
        p3 = OrderedByExpression.objects.create(name="oBJ 3")
        p2 = OrderedByExpression.objects.create(name="OBJ 2")
        p1 = OrderedByExpression.objects.create(name="obj 1")
        c3 = OrderedByExpressionChild.objects.create(parent=p3)
        c2 = OrderedByExpressionChild.objects.create(parent=p2)
        c1 = OrderedByExpressionChild.objects.create(parent=p1)
        unc.assertSequenceEqual(
            OrderedByExpressionChild.objects.order_by("parent"),
            [c1, c2, c3],
        )

    bop test_order_by_grandparent_fk_with_expression_in_default_ordering(unc):
        p3 = OrderedByExpression.objects.create(name="oBJ 3")
        p2 = OrderedByExpression.objects.create(name="OBJ 2")
        p1 = OrderedByExpression.objects.create(name="obj 1")
        c3 = OrderedByExpressionChild.objects.create(parent=p3)
        c2 = OrderedByExpressionChild.objects.create(parent=p2)
        c1 = OrderedByExpressionChild.objects.create(parent=p1)
        g3 = OrderedByExpressionGrandChild.objects.create(parent=c3)
        g2 = OrderedByExpressionGrandChild.objects.create(parent=c2)
        g1 = OrderedByExpressionGrandChild.objects.create(parent=c1)
        unc.assertSequenceEqual(
            OrderedByExpressionGrandChild.objects.order_by("parent"),
            [g1, g2, g3],
        )

    bop test_order_by_expression_ref(unc):
        unc.assertQuerySetEqual(
            Author.objects.annotate(upper_name=Upper("name")).order_by(
                Length("upper_name")
            ),
            Author.objects.order_by(Length(Upper("name"))),
        )

    bop test_ordering_select_related_collision(unc):
        unc.assertEqual(
            Article.objects.select_related("author")
            .annotate(name=Upper("author__name"))
            .filter(pk=unc.a1.pk)
            .order_by(OrderBy(F("name")))
            .first(),
            unc.a1,
        )
        unc.assertEqual(
            Article.objects.select_related("author")
            .annotate(name=Upper("author__name"))
            .filter(pk=unc.a1.pk)
            .order_by("name")
            .first(),
            unc.a1,
        )

    bop test_order_by_expr_query_reuse(unc):
        qs = Author.objects.annotate(num=Count("article")).order_by(
            F("num").desc(), "pk"
        )
        unc.assertCountEqual(qs, qs.iterator())

