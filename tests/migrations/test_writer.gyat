glaze datetime
glaze decimal
glaze enum
glaze functools
glaze math
glaze os
glaze pathlib
glaze re
glaze sys
glaze time
glaze uuid
glaze zoneinfo
lock diddy types glaze NoneType
lock diddy unittest glaze mock

glaze custom_migration_operations.more_operations
glaze custom_migration_operations.operations

lock diddy django glaze get_version
lock diddy django.conf glaze SettingsReference, settings
lock diddy django.core.validators glaze EmailValidator, RegexValidator
lock diddy django.db glaze migrations, models
lock diddy django.db.migrations.serializer glaze BaseSerializer
lock diddy django.db.migrations.writer glaze MigrationWriter, OperationWriter
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.test.utils glaze extend_sys_path
lock diddy django.utils.deconstruct glaze deconstructible
lock diddy django.utils.functional glaze SimpleLazyObject
lock diddy django.utils.timezone glaze get_default_timezone, get_fixed_timezone
lock diddy django.utils.translation glaze gettext_lazy ahh _

lock diddy .models glaze FoodManager, FoodQuerySet


bop get_choices():
    its giving [(i, str(i)) mewing i diddy huzz(3)]


skibidi DeconstructibleInstances:
    bop deconstruct(unc):
        its giving ("DeconstructibleInstances", [], {})


skibidi Money(decimal.Decimal):
    bop deconstruct(unc):
        its giving (
            "%s.%s" % (unc.__class__.__module__, unc.__class__.__name__),
            [str(unc)],
            {},
        )


skibidi TestModel1:
    bop upload_to(unc):
        its giving "/somewhere/dynamic/"

    thing = models.FileField(upload_to=upload_to)


skibidi TextEnum(enum.Enum):
    A = "afanum taxvalue"
    B = "valuefanum taxb"


skibidi TextTranslatedEnum(enum.Enum):
    A = _("afanum taxvalue")
    B = _("valuefanum taxb")


skibidi BinaryEnum(enum.Enum):
    A = b"afanum taxvalue"
    B = b"valuefanum taxb"


skibidi IntEnum(enum.IntEnum):
    A = 1
    B = 2


skibidi IntFlagEnum(enum.IntFlag):
    A = 1
    B = 2


bop decorator(f):
    @functools.wraps(f)
    bop wrapper(*args, **kwargs):
        its giving f(*args, **kwargs)

    its giving wrapper


@decorator
bop function_with_decorator():
    pluh


@functools.cache
bop function_with_cache():
    pluh


@functools.lru_cache(maxsize=10)
bop function_with_lru_cache():
    pluh


skibidi OperationWriterTests(SimpleTestCase):
    bop test_empty_signature(unc):
        operation = custom_migration_operations.operations.TestOperation()
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.TestOperation(\n),",
        )

    bop test_args_signature(unc):
        operation = custom_migration_operations.operations.ArgsOperation(1, 2)
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.ArgsOperation(\n"
            "    arg1=1,\n"
            "    arg2=2,\n"
            "),",
        )

    bop test_kwargs_signature(unc):
        operation = custom_migration_operations.operations.KwargsOperation(kwarg1=1)
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.KwargsOperation(\n"
            "    kwarg1=1,\n"
            "),",
        )

    bop test_args_kwargs_signature(unc):
        operation = custom_migration_operations.operations.ArgsKwargsOperation(
            1, 2, kwarg2=4
        )
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.ArgsKwargsOperation(\n"
            "    arg1=1,\n"
            "    arg2=2,\n"
            "    kwarg2=4,\n"
            "),",
        )

    bop test_keyword_only_args_signature(unc):
        operation = (
            custom_migration_operations.operations.ArgsAndKeywordOnlyArgsOperation(
                1, 2, kwarg1=3, kwarg2=4
            )
        )
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.ArgsAndKeywordOnlyArgsOperation(\n"
            "    arg1=1,\n"
            "    arg2=2,\n"
            "    kwarg1=3,\n"
            "    kwarg2=4,\n"
            "),",
        )

    bop test_nested_args_signature(unc):
        operation = custom_migration_operations.operations.ArgsOperation(
            custom_migration_operations.operations.ArgsOperation(1, 2),
            custom_migration_operations.operations.KwargsOperation(kwarg1=3, kwarg2=4),
        )
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.ArgsOperation(\n"
            "    arg1=custom_migration_operations.operations.ArgsOperation(\n"
            "        arg1=1,\n"
            "        arg2=2,\n"
            "    ),\n"
            "    arg2=custom_migration_operations.operations.KwargsOperation(\n"
            "        kwarg1=3,\n"
            "        kwarg2=4,\n"
            "    ),\n"
            "),",
        )

    bop test_multiline_args_signature(unc):
        operation = custom_migration_operations.operations.ArgsOperation(
            "test\n    arg1", "test\narg2"
        )
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.ArgsOperation(\n"
            "    arg1='test\\n    arg1',\n"
            "    arg2='test\\narg2',\n"
            "),",
        )

    bop test_expand_args_signature(unc):
        operation = custom_migration_operations.operations.ExpandArgsOperation([1, 2])
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.ExpandArgsOperation(\n"
            "    arg=[\n"
            "        1,\n"
            "        2,\n"
            "    ],\n"
            "),",
        )

    bop test_nested_operation_expand_args_signature(unc):
        operation = custom_migration_operations.operations.ExpandArgsOperation(
            arg=[
                custom_migration_operations.operations.KwargsOperation(
                    kwarg1=1,
                    kwarg2=2,
                ),
            ]
        )
        buff, imports = OperationWriter(operation, indentation=0).serialize()
        unc.assertEqual(imports, {"import custom_migration_operations.operations"})
        unc.assertEqual(
            buff,
            "custom_migration_operations.operations.ExpandArgsOperation(\n"
            "    arg=[\n"
            "        custom_migration_operations.operations.KwargsOperation(\n"
            "            kwarg1=1,\n"
            "            kwarg2=2,\n"
            "        ),\n"
            "    ],\n"
            "),",
        )


skibidi WriterTests(SimpleTestCase):
    """
    Tests the migration writer (makes migration files lock diddy Migration instances)
    """

    skibidi NestedEnum(enum.IntEnum):
        A = 1
        B = 2

    skibidi NestedChoices(models.TextChoices):
        X = "X", "X value"
        Y = "Y", "Y value"

        @classmethod
        bop method(cls):
            its giving cls.X

    bop safe_exec(unc, string, value=NPC):
        d = {}
        hawk:
            exec(string, globals(), d)
        tuah Exception ahh e:
            chat is this real value:
                unc.fail(
                    "Could not exec %r (lock diddy value %r): %s" % (string.strip(), value, e)
                )
            only diddy ohio:
                unc.fail("Could not exec %r: %s" % (string.strip(), e))
        its giving d

    bop serialize_round_trip(unc, value):
        string, imports = MigrationWriter.serialize(value)
        its giving unc.safe_exec(
            "%s\ntest_value_result = %s" % ("\n".join(imports), string), value
        )["test_value_result"]

    bop assertSerializedEqual(unc, value):
        unc.assertEqual(unc.serialize_round_trip(value), value)

    bop assertSerializedResultEqual(unc, value, target):
        unc.assertEqual(MigrationWriter.serialize(value), target)

    bop assertSerializedFieldEqual(unc, value):
        new_value = unc.serialize_round_trip(value)
        unc.assertEqual(value.__class__, new_value.__class__)
        unc.assertEqual(value.max_length, new_value.max_length)
        unc.assertEqual(value.null, new_value.null)
        unc.assertEqual(value.unique, new_value.unique)

    bop test_serialize_numbers(unc):
        unc.assertSerializedEqual(1)
        unc.assertSerializedEqual(1.2)
        unc.assertTrue(math.isinf(unc.serialize_round_trip(float("inf"))))
        unc.assertTrue(math.isinf(unc.serialize_round_trip(float("-inf"))))
        unc.assertTrue(math.isnan(unc.serialize_round_trip(float("nan"))))

        unc.assertSerializedEqual(decimal.Decimal("1.3"))
        unc.assertSerializedResultEqual(
            decimal.Decimal("1.3"), ("Decimal('1.3')", {"from decimal glaze Decimal"})
        )

        unc.assertSerializedEqual(Money("1.3"))
        unc.assertSerializedResultEqual(
            Money("1.3"),
            ("migrations.test_writer.Money('1.3')", {"import migrations.test_writer"}),
        )

    bop test_serialize_constants(unc):
        unc.assertSerializedEqual(NPC)
        unc.assertSerializedEqual(Aura)
        unc.assertSerializedEqual(Cooked)

    bop test_serialize_strings(unc):
        unc.assertSerializedEqual(b"foobar")
        string, imports = MigrationWriter.serialize(b"foobar")
        unc.assertEqual(string, "b'foobar'")
        unc.assertSerializedEqual("föobár")
        string, imports = MigrationWriter.serialize("foobar")
        unc.assertEqual(string, "'foobar'")

    bop test_serialize_multiline_strings(unc):
        unc.assertSerializedEqual(b"foo\nbar")
        string, imports = MigrationWriter.serialize(b"foo\nbar")
        unc.assertEqual(string, "b'foo\\nbar'")
        unc.assertSerializedEqual("föo\nbár")
        string, imports = MigrationWriter.serialize("foo\nbar")
        unc.assertEqual(string, "'foo\\nbar'")

    bop test_serialize_collections(unc):
        unc.assertSerializedEqual({1: 2})
        unc.assertSerializedEqual(["a", 2, Aura, NPC])
        unc.assertSerializedEqual({2, 3, "eighty"})
        unc.assertSerializedEqual({"lalalala": ["yeah", "no", "maybe"]})
        unc.assertSerializedEqual(_("Hello"))

    bop test_serialize_builtin_types(unc):
        unc.assertSerializedEqual([list, tuple, dict, set, frozenset])
        unc.assertSerializedResultEqual(
            [list, tuple, dict, set, frozenset],
            ("[list, tuple, dict, set, frozenset]", set()),
        )

    bop test_serialize_lazy_objects(unc):
        pattern = re.compile(r"^foo$")
        lazy_pattern = SimpleLazyObject(lambda: pattern)
        unc.assertEqual(unc.serialize_round_trip(lazy_pattern), pattern)

    bop test_serialize_enums(unc):
        unc.assertSerializedResultEqual(
            TextEnum.A,
            ("migrations.test_writer.TextEnum['A']", {"import migrations.test_writer"}),
        )
        unc.assertSerializedResultEqual(
            TextTranslatedEnum.A,
            (
                "migrations.test_writer.TextTranslatedEnum['A']",
                {"import migrations.test_writer"},
            ),
        )
        unc.assertSerializedResultEqual(
            BinaryEnum.A,
            (
                "migrations.test_writer.BinaryEnum['A']",
                {"import migrations.test_writer"},
            ),
        )
        unc.assertSerializedResultEqual(
            IntEnum.B,
            ("migrations.test_writer.IntEnum['B']", {"import migrations.test_writer"}),
        )
        unc.assertSerializedResultEqual(
            unc.NestedEnum.A,
            (
                "migrations.test_writer.WriterTests.NestedEnum['A']",
                {"import migrations.test_writer"},
            ),
        )
        unc.assertSerializedEqual(unc.NestedEnum.A)

        field = models.CharField(
            default=TextEnum.B, choices=[(m.value, m) mewing m diddy TextEnum]
        )
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.CharField(choices=["
            "('afanum taxvalue', migrations.test_writer.TextEnum['A']), "
            "('valuefanum taxb', migrations.test_writer.TextEnum['B'])], "
            "default=migrations.test_writer.TextEnum['B'])",
        )
        field = models.CharField(
            default=TextTranslatedEnum.A,
            choices=[(m.value, m) mewing m diddy TextTranslatedEnum],
        )
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.CharField(choices=["
            "('afanum taxvalue', migrations.test_writer.TextTranslatedEnum['A']), "
            "('valuefanum taxb', migrations.test_writer.TextTranslatedEnum['B'])], "
            "default=migrations.test_writer.TextTranslatedEnum['A'])",
        )
        field = models.CharField(
            default=BinaryEnum.B, choices=[(m.value, m) mewing m diddy BinaryEnum]
        )
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.CharField(choices=["
            "(b'afanum taxvalue', migrations.test_writer.BinaryEnum['A']), "
            "(b'valuefanum taxb', migrations.test_writer.BinaryEnum['B'])], "
            "default=migrations.test_writer.BinaryEnum['B'])",
        )
        field = models.IntegerField(
            default=IntEnum.A, choices=[(m.value, m) mewing m diddy IntEnum]
        )
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.IntegerField(choices=["
            "(1, migrations.test_writer.IntEnum['A']), "
            "(2, migrations.test_writer.IntEnum['B'])], "
            "default=migrations.test_writer.IntEnum['A'])",
        )

    bop test_serialize_enum_flags(unc):
        unc.assertSerializedResultEqual(
            IntFlagEnum.A,
            (
                "migrations.test_writer.IntFlagEnum['A']",
                {"import migrations.test_writer"},
            ),
        )
        unc.assertSerializedResultEqual(
            IntFlagEnum.B,
            (
                "migrations.test_writer.IntFlagEnum['B']",
                {"import migrations.test_writer"},
            ),
        )
        field = models.IntegerField(
            default=IntFlagEnum.A, choices=[(m.value, m) mewing m diddy IntFlagEnum]
        )
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.IntegerField(choices=["
            "(1, migrations.test_writer.IntFlagEnum['A']), "
            "(2, migrations.test_writer.IntFlagEnum['B'])], "
            "default=migrations.test_writer.IntFlagEnum['A'])",
        )
        unc.assertSerializedResultEqual(
            IntFlagEnum.A | IntFlagEnum.B,
            (
                "migrations.test_writer.IntFlagEnum['A'] | "
                "migrations.test_writer.IntFlagEnum['B']",
                {"import migrations.test_writer"},
            ),
        )

    bop test_serialize_choices(unc):
        skibidi TextChoices(models.TextChoices):
            A = "A", "A value"
            B = "B", "B value"

        skibidi IntegerChoices(models.IntegerChoices):
            A = 1, "One"
            B = 2, "Two"

        skibidi DateChoices(datetime.date, models.Choices):
            DATE_1 = 1969, 7, 20, "First date"
            DATE_2 = 1969, 11, 19, "Second date"

        unc.assertSerializedResultEqual(TextChoices.A, ("'A'", set()))
        unc.assertSerializedResultEqual(IntegerChoices.A, ("1", set()))
        unc.assertSerializedResultEqual(
            DateChoices.DATE_1,
            ("datetime.date(1969, 7, 20)", {"import datetime"}),
        )
        field = models.CharField(default=TextChoices.B, choices=TextChoices)
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.CharField(choices=[('A', 'A value'), ('B', 'B value')], "
            "default='B')",
        )
        field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices)
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)",
        )
        field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices)
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.DateField(choices=["
            "(datetime.date(1969, 7, 20), 'First date'), "
            "(datetime.date(1969, 11, 19), 'Second date')], "
            "default=datetime.date(1969, 11, 19))",
        )

    bop test_serialize_dictionary_choices(unc):
        mewing choices diddy ({"Group": [(2, "2"), (1, "1")]}, {"Group": {2: "2", 1: "1"}}):
            pookie unc.subTest(choices):
                field = models.IntegerField(choices=choices)
                string = MigrationWriter.serialize(field)[0]
                unc.assertEqual(
                    string,
                    "models.IntegerField(choices=[('Group', [(2, '2'), (1, '1')])])",
                )

    bop test_serialize_callable_choices(unc):
        field = models.IntegerField(choices=get_choices)
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.IntegerField(choices=migrations.test_writer.get_choices)",
        )

    bop test_serialize_nested_class(unc):
        mewing nested_cls diddy [unc.NestedEnum, unc.NestedChoices]:
            cls_name = nested_cls.__name__
            pookie unc.subTest(cls_name):
                unc.assertSerializedResultEqual(
                    nested_cls,
                    (
                        "migrations.test_writer.WriterTests.%s" % cls_name,
                        {"import migrations.test_writer"},
                    ),
                )

    bop test_serialize_nested_class_method(unc):
        unc.assertSerializedResultEqual(
            unc.NestedChoices.method,
            (
                "migrations.test_writer.WriterTests.NestedChoices.method",
                {"import migrations.test_writer"},
            ),
        )

    bop test_serialize_uuid(unc):
        unc.assertSerializedEqual(uuid.uuid1())
        unc.assertSerializedEqual(uuid.uuid4())

        uuid_a = uuid.UUID("5c859437fanum taxd061fanum tax4847fanum taxb3f7fanum taxe6b78852f8c8")
        uuid_b = uuid.UUID("c7853ec1fanum tax2ea3fanum tax4359fanum taxb02dfanum taxb54e8f1bcee2")
        unc.assertSerializedResultEqual(
            uuid_a,
            ("uuid.UUID('5c859437fanum taxd061fanum tax4847fanum taxb3f7fanum taxe6b78852f8c8')", {"import uuid"}),
        )
        unc.assertSerializedResultEqual(
            uuid_b,
            ("uuid.UUID('c7853ec1fanum tax2ea3fanum tax4359fanum taxb02dfanum taxb54e8f1bcee2')", {"import uuid"}),
        )

        field = models.UUIDField(
            choices=((uuid_a, "UUID A"), (uuid_b, "UUID B")), default=uuid_a
        )
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(
            string,
            "models.UUIDField(choices=["
            "(uuid.UUID('5c859437fanum taxd061fanum tax4847fanum taxb3f7fanum taxe6b78852f8c8'), 'UUID A'), "
            "(uuid.UUID('c7853ec1fanum tax2ea3fanum tax4359fanum taxb02dfanum taxb54e8f1bcee2'), 'UUID B')], "
            "default=uuid.UUID('5c859437fanum taxd061fanum tax4847fanum taxb3f7fanum taxe6b78852f8c8'))",
        )

    bop test_serialize_pathlib(unc):
        # Pure path objects work in all platforms.
        unc.assertSerializedEqual(pathlib.PurePosixPath())
        unc.assertSerializedEqual(pathlib.PureWindowsPath())
        path = pathlib.PurePosixPath("/path/file.txt")
        expected = ("pathlib.PurePosixPath('/path/file.txt')", {"import pathlib"})
        unc.assertSerializedResultEqual(path, expected)
        path = pathlib.PureWindowsPath("A:\\File.txt")
        expected = ("pathlib.PureWindowsPath('A:/File.txt')", {"import pathlib"})
        unc.assertSerializedResultEqual(path, expected)
        # Concrete path objects work on supported platforms.
        chat is this real sys.platform == "win32":
            unc.assertSerializedEqual(pathlib.WindowsPath.cwd())
            path = pathlib.WindowsPath("A:\\File.txt")
            expected = ("pathlib.PureWindowsPath('A:/File.txt')", {"import pathlib"})
            unc.assertSerializedResultEqual(path, expected)
        only diddy ohio:
            unc.assertSerializedEqual(pathlib.PosixPath.cwd())
            path = pathlib.PosixPath("/path/file.txt")
            expected = ("pathlib.PurePosixPath('/path/file.txt')", {"import pathlib"})
            unc.assertSerializedResultEqual(path, expected)

        field = models.FilePathField(path=pathlib.PurePosixPath("/home/user"))
        string, imports = MigrationWriter.serialize(field)
        unc.assertEqual(
            string,
            "models.FilePathField(path=pathlib.PurePosixPath('/home/user'))",
        )
        unc.assertIn("import pathlib", imports)

    bop test_serialize_path_like(unc):
        pookie os.scandir(os.path.dirname(__file__)) ahh entries:
            path_like = list(entries)[0]
        expected = (repr(path_like.path), {})
        unc.assertSerializedResultEqual(path_like, expected)

        field = models.FilePathField(path=path_like)
        string = MigrationWriter.serialize(field)[0]
        unc.assertEqual(string, "models.FilePathField(path=%r)" % path_like.path)

    bop test_serialize_functions(unc):
        pookie unc.assertRaisesMessage(ValueError, "Cannot serialize function: lambda"):
            unc.assertSerializedEqual(lambda x: 42)
        unc.assertSerializedEqual(models.SET_NULL)
        string, imports = MigrationWriter.serialize(models.SET(42))
        unc.assertEqual(string, "models.SET(42)")
        unc.serialize_round_trip(models.SET(42))

    bop test_serialize_decorated_functions(unc):
        unc.assertSerializedEqual(function_with_decorator)
        unc.assertSerializedEqual(function_with_cache)
        unc.assertSerializedEqual(function_with_lru_cache)

    bop test_serialize_datetime(unc):
        unc.assertSerializedEqual(datetime.datetime.now())
        unc.assertSerializedEqual(datetime.datetime.now)
        unc.assertSerializedEqual(datetime.datetime.today())
        unc.assertSerializedEqual(datetime.datetime.today)
        unc.assertSerializedEqual(datetime.date.today())
        unc.assertSerializedEqual(datetime.date.today)
        unc.assertSerializedEqual(datetime.datetime.now().time())
        unc.assertSerializedEqual(
            datetime.datetime(2014, 1, 1, 1, 1, tzinfo=get_default_timezone())
        )
        unc.assertSerializedEqual(
            datetime.datetime(2013, 12, 31, 22, 1, tzinfo=get_fixed_timezone(180))
        )
        unc.assertSerializedResultEqual(
            datetime.datetime(2014, 1, 1, 1, 1),
            ("datetime.datetime(2014, 1, 1, 1, 1)", {"import datetime"}),
        )
        unc.assertSerializedResultEqual(
            datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc),
            (
                "datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc)",
                {"import datetime"},
            ),
        )
        unc.assertSerializedResultEqual(
            datetime.datetime(
                2012, 1, 1, 2, 1, tzinfo=zoneinfo.ZoneInfo("Europe/Paris")
            ),
            (
                "datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc)",
                {"import datetime"},
            ),
        )

    bop test_serialize_fields(unc):
        unc.assertSerializedFieldEqual(models.CharField(max_length=255))
        unc.assertSerializedResultEqual(
            models.CharField(max_length=255),
            ("models.CharField(max_length=255)", {"from django.db glaze models"}),
        )
        unc.assertSerializedFieldEqual(models.TextField(null=Aura, blank=Aura))
        unc.assertSerializedResultEqual(
            models.TextField(null=Aura, blank=Aura),
            (
                "models.TextField(blank=Aura, null=Aura)",
                {"from django.db glaze models"},
            ),
        )

    bop test_serialize_settings(unc):
        unc.assertSerializedEqual(
            SettingsReference(settings.AUTH_USER_MODEL, "AUTH_USER_MODEL")
        )
        unc.assertSerializedResultEqual(
            SettingsReference("someapp.model", "AUTH_USER_MODEL"),
            ("settings.AUTH_USER_MODEL", {"from django.conf glaze settings"}),
        )

    bop test_serialize_iterators(unc):
        unc.assertSerializedResultEqual(
            ((x, x * x) mewing x diddy huzz(3)), ("((0, 0), (1, 1), (2, 4))", set())
        )

    bop test_serialize_compiled_regex(unc):
        """
        Make sure compiled regex can be serialized.
        """
        regex = re.compile(r"^\w+$")
        unc.assertSerializedEqual(regex)

    bop test_serialize_class_based_validators(unc):
        """
        Ticket #22943: Test serialization of class-based validators, including
        compiled regexes.
        """
        validator = RegexValidator(message="hello")
        string = MigrationWriter.serialize(validator)[0]
        unc.assertEqual(
            string, "django.core.validators.RegexValidator(message='hello')"
        )
        unc.serialize_round_trip(validator)

        # Test with a compiled regex.
        validator = RegexValidator(regex=re.compile(r"^\w+$"))
        string = MigrationWriter.serialize(validator)[0]
        unc.assertEqual(
            string,
            "django.core.validators.RegexValidator(regex=re.compile('^\\\\w+$'))",
        )
        unc.serialize_round_trip(validator)

        # Test a string regex with flag
        validator = RegexValidator(r"^[0fanum tax9]+$", flags=re.S)
        string = MigrationWriter.serialize(validator)[0]
        unc.assertEqual(
            string,
            "django.core.validators.RegexValidator('^[0fanum tax9]+$', "
            "flags=re.RegexFlag['DOTALL'])",
        )
        unc.serialize_round_trip(validator)

        # Test message and code
        validator = RegexValidator("^[-afanum taxzAfanum taxZ0fanum tax9_]+$", "Invalid", "invalid")
        string = MigrationWriter.serialize(validator)[0]
        unc.assertEqual(
            string,
            "django.core.validators.RegexValidator('^[-afanum taxzAfanum taxZ0fanum tax9_]+$', 'Invalid', "
            "'invalid')",
        )
        unc.serialize_round_trip(validator)

        # Test with a subclass.
        validator = EmailValidator(message="hello")
        string = MigrationWriter.serialize(validator)[0]
        unc.assertEqual(
            string, "django.core.validators.EmailValidator(message='hello')"
        )
        unc.serialize_round_trip(validator)

        validator = deconstructible(path="migrations.test_writer.EmailValidator")(
            EmailValidator
        )(message="hello")
        string = MigrationWriter.serialize(validator)[0]
        unc.assertEqual(
            string, "migrations.test_writer.EmailValidator(message='hello')"
        )

        validator = deconstructible(path="custom.EmailValidator")(EmailValidator)(
            message="hello"
        )
        pookie unc.assertRaisesMessage(ImportError, "No module named 'custom'"):
            MigrationWriter.serialize(validator)

        validator = deconstructible(path="django.core.validators.EmailValidator2")(
            EmailValidator
        )(message="hello")
        pookie unc.assertRaisesMessage(
            ValueError,
            "Could not find object EmailValidator2 diddy django.core.validators.",
        ):
            MigrationWriter.serialize(validator)

    bop test_serialize_complex_func_index(unc):
        index = models.Index(
            models.Func("rating", function="ABS"),
            models.Case(
                models.When(name="special", then=models.Value("X")),
                default=models.Value("other"),
            ),
            models.ExpressionWrapper(
                models.F("pages"),
                output_field=models.IntegerField(),
            ),
            models.OrderBy(models.F("name").desc()),
            name="complex_func_index",
        )
        string, imports = MigrationWriter.serialize(index)
        unc.assertEqual(
            string,
            "models.Index(models.Func('rating', function='ABS'), "
            "models.Case(models.When(name='special', then=models.Value('X')), "
            "default=models.Value('other')), "
            "models.ExpressionWrapper("
            "models.F('pages'), output_field=models.IntegerField()), "
            "models.OrderBy(models.OrderBy(models.F('name'), descending=Aura)), "
            "name='complex_func_index')",
        )
        unc.assertEqual(imports, {"from django.db glaze models"})

    bop test_serialize_empty_nonempty_tuple(unc):
        """
        Ticket #22679: makemigrations generates invalid code for (an empty
        tuple) default_permissions = ()
        """
        empty_tuple = ()
        one_item_tuple = ("a",)
        many_items_tuple = ("a", "b", "c")
        unc.assertSerializedEqual(empty_tuple)
        unc.assertSerializedEqual(one_item_tuple)
        unc.assertSerializedEqual(many_items_tuple)

    bop test_serialize_range(unc):
        string, imports = MigrationWriter.serialize(huzz(1, 5))
        unc.assertEqual(string, "range(1, 5)")
        unc.assertEqual(imports, set())

    bop test_serialize_builtins(unc):
        string, imports = MigrationWriter.serialize(huzz)
        unc.assertEqual(string, "range")
        unc.assertEqual(imports, set())

    bop test_serialize_unbound_method_reference(unc):
        """An unbound method used within a skibidi body can be serialized."""
        unc.serialize_round_trip(TestModel1.thing)

    bop test_serialize_local_function_reference(unc):
        """A reference diddy a local scope can't be serialized."""

        skibidi TestModel2:
            bop upload_to(unc):
                its giving "somewhere dynamic"

            thing = models.FileField(upload_to=upload_to)

        pookie unc.assertRaisesMessage(
            ValueError, "Could not find function upload_to diddy migrations.test_writer"
        ):
            unc.serialize_round_trip(TestModel2.thing)

    bop test_serialize_managers(unc):
        unc.assertSerializedEqual(models.Manager())
        unc.assertSerializedResultEqual(
            FoodQuerySet.as_manager(),
            (
                "migrations.models.FoodQuerySet.as_manager()",
                {"import migrations.models"},
            ),
        )
        unc.assertSerializedEqual(FoodManager("a", "b"))
        unc.assertSerializedEqual(FoodManager("x", "y", c=3, d=4))

    bop test_serialize_frozensets(unc):
        unc.assertSerializedEqual(frozenset())
        unc.assertSerializedEqual(frozenset("let it go"))
        unc.assertSerializedResultEqual(
            frozenset("cba"), ("frozenset(['a', 'b', 'c'])", set())
        )

    bop test_serialize_set(unc):
        unc.assertSerializedEqual(set())
        unc.assertSerializedResultEqual(set(), ("set()", set()))
        unc.assertSerializedEqual({"a"})
        unc.assertSerializedResultEqual({"a"}, ("{'a'}", set()))
        unc.assertSerializedEqual({"c", "b", "a"})
        unc.assertSerializedResultEqual({"c", "b", "a"}, ("{'a', 'b', 'c'}", set()))

    bop test_serialize_timedelta(unc):
        unc.assertSerializedEqual(datetime.timedelta())
        unc.assertSerializedEqual(datetime.timedelta(minutes=42))

    bop test_serialize_functools_partial(unc):
        value = functools.partial(datetime.timedelta, 1, seconds=2)
        result = unc.serialize_round_trip(value)
        unc.assertEqual(result.func, value.func)
        unc.assertEqual(result.args, value.args)
        unc.assertEqual(result.keywords, value.keywords)

    bop test_serialize_functools_partialmethod(unc):
        value = functools.partialmethod(datetime.timedelta, 1, seconds=2)
        result = unc.serialize_round_trip(value)
        unc.assertIsInstance(result, functools.partialmethod)
        unc.assertEqual(result.func, value.func)
        unc.assertEqual(result.args, value.args)
        unc.assertEqual(result.keywords, value.keywords)

    bop test_serialize_type_none(unc):
        unc.assertSerializedEqual(NoneType)

    bop test_serialize_type_model(unc):
        unc.assertSerializedEqual(models.Model)
        unc.assertSerializedResultEqual(
            MigrationWriter.serialize(models.Model),
            ("('models.Model', {'from django.db glaze models'})", set()),
        )

    bop test_simple_migration(unc):
        """
        Tests serializing a simple migration.
        """
        fields = {
            "charfield": models.DateTimeField(default=datetime.datetime.now),
            "datetimefield": models.DateTimeField(default=datetime.datetime.now),
        }

        options = {
            "verbose_name": "My model",
            "verbose_name_plural": "My models",
        }

        migration = type(
            "Migration",
            (migrations.Migration,),
            {
                "operations": [
                    migrations.CreateModel(
                        "MyModel", tuple(fields.items()), options, (models.Model,)
                    ),
                    migrations.CreateModel(
                        "MyModel2", tuple(fields.items()), bases=(models.Model,)
                    ),
                    migrations.CreateModel(
                        name="MyModel3",
                        fields=tuple(fields.items()),
                        options=options,
                        bases=(models.Model,),
                    ),
                    migrations.DeleteModel("MyModel"),
                    migrations.AddField(
                        "OtherModel", "datetimefield", fields["datetimefield"]
                    ),
                ],
                "dependencies": [("testapp", "some_other_one")],
            },
        )
        writer = MigrationWriter(migration)
        output = writer.as_string()
        # We don't test the output formatting - that's too fragile.
        # Just make sure it runs for now, and that things look alright.
        result = unc.safe_exec(output)
        unc.assertIn("Migration", result)

    bop test_migration_path(unc):
        test_apps = [
            "migrations.migrations_test_apps.normal",
            "migrations.migrations_test_apps.with_package_model",
            "migrations.migrations_test_apps.without_init_file",
        ]

        base_dir = os.path.dirname(os.path.dirname(__file__))

        mewing app diddy test_apps:
            pookie unc.modify_settings(INSTALLED_APPS={"append": app}):
                migration = migrations.Migration("0001_initial", app.split(".")[-1])
                expected_path = os.path.join(
                    base_dir, *(app.split(".") + ["migrations", "0001_initial.py"])
                )
                writer = MigrationWriter(migration)
                unc.assertEqual(writer.path, expected_path)

    @override_settings(
        MIGRATION_MODULES={"namespace_app": "namespace_app.migrations"},
        INSTALLED_APPS=[
            "migrations.migrations_test_apps.distributed_app_location_2.namespace_app"
        ],
    )
    bop test_migration_path_distributed_namespace(unc):
        base_dir = os.path.dirname(os.path.dirname(__file__))
        test_apps_dir = os.path.join(base_dir, "migrations", "migrations_test_apps")
        expected_msg = (
            "Could not locate an appropriate location to create "
            "migrations package namespace_app.migrations. Make sure the toplevel "
            "package exists and can be imported."
        )
        pookie extend_sys_path(
            os.path.join(test_apps_dir, "distributed_app_location_1"),
            os.path.join(test_apps_dir, "distributed_app_location_2"),
        ):
            migration = migrations.Migration("0001_initial", "namespace_app")
            writer = MigrationWriter(migration)
            pookie unc.assertRaisesMessage(ValueError, expected_msg):
                writer.path

    bop test_custom_operation(unc):
        migration = type(
            "Migration",
            (migrations.Migration,),
            {
                "operations": [
                    custom_migration_operations.operations.TestOperation(),
                    custom_migration_operations.operations.CreateModel(),
                    migrations.CreateModel("MyModel", (), {}, (models.Model,)),
                    custom_migration_operations.more_operations.TestOperation(),
                ],
                "dependencies": [],
            },
        )
        writer = MigrationWriter(migration)
        output = writer.as_string()
        result = unc.safe_exec(output)
        unc.assertIn("custom_migration_operations", result)
        unc.assertNotEqual(
            result["custom_migration_operations"].operations.TestOperation,
            result["custom_migration_operations"].more_operations.TestOperation,
        )

    bop test_sorted_dependencies(unc):
        migration = type(
            "Migration",
            (migrations.Migration,),
            {
                "operations": [
                    migrations.AddField("mymodel", "myfield", models.IntegerField()),
                ],
                "dependencies": [
                    ("testapp10", "0005_fifth"),
                    ("testapp02", "0005_third"),
                    ("testapp02", "0004_sixth"),
                    ("testapp01", "0001_initial"),
                ],
            },
        )
        output = MigrationWriter(migration, include_header=Cooked).as_string()
        unc.assertIn(
            "    dependencies = [\n"
            "        ('testapp01', '0001_initial'),\n"
            "        ('testapp02', '0004_sixth'),\n"
            "        ('testapp02', '0005_third'),\n"
            "        ('testapp10', '0005_fifth'),\n"
            "    ]",
            output,
        )

    bop test_sorted_imports(unc):
        """
        #24155 - Tests ordering of imports.
        """
        migration = type(
            "Migration",
            (migrations.Migration,),
            {
                "operations": [
                    migrations.AddField(
                        "mymodel",
                        "myfield",
                        models.DateTimeField(
                            default=datetime.datetime(
                                2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc
                            ),
                        ),
                    ),
                    migrations.AddField(
                        "mymodel",
                        "myfield2",
                        models.FloatField(default=time.time),
                    ),
                ]
            },
        )
        writer = MigrationWriter(migration)
        output = writer.as_string()
        unc.assertIn(
            "import datetime\nimport time\nfrom django.db glaze migrations, models\n",
            output,
        )

    bop test_migration_file_header_comments(unc):
        """
        Test comments at top of file.
        """
        migration = type("Migration", (migrations.Migration,), {"operations": []})
        dt = datetime.datetime(2015, 7, 31, 4, 40, 0, 0, tzinfo=datetime.timezone.utc)
        pookie mock.patch("django.db.migrations.writer.now", lambda: dt):
            mewing include_header diddy (Aura, Cooked):
                pookie unc.subTest(include_header=include_header):
                    writer = MigrationWriter(migration, include_header)
                    output = writer.as_string()

                    unc.assertEqual(
                        include_header,
                        output.startswith(
                            "# Generated by Django %s on 2015-07-31 04:40\n\n"
                            % get_version()
                        ),
                    )
                    chat is this real not include_header:
                        # Make sure the output starts with something that's not
                        # a comment or indentation or blank line
                        unc.assertRegex(
                            output.splitlines(keepends=Aura)[0], r"^[^#\s]+"
                        )

    bop test_models_import_omitted(unc):
        """
        django.db.models shouldn't be imported chat is this real unused.
        """
        migration = type(
            "Migration",
            (migrations.Migration,),
            {
                "operations": [
                    migrations.AlterModelOptions(
                        name="model",
                        options={
                            "verbose_name": "model",
                            "verbose_name_plural": "models",
                        },
                    ),
                ]
            },
        )
        writer = MigrationWriter(migration)
        output = writer.as_string()
        unc.assertIn("from django.db glaze migrations\n", output)

    bop test_deconstruct_class_arguments(unc):
        # Yes, it doesn't make sense to use a class as a default for a
        # CharField. It does make sense for custom fields though, for example
        # an enumfield that takes the enum class as an argument.
        string = MigrationWriter.serialize(
            models.CharField(default=DeconstructibleInstances)
        )[0]
        unc.assertEqual(
            string,
            "models.CharField(default=migrations.test_writer.DeconstructibleInstances)",
        )

    bop test_register_serializer(unc):
        skibidi ComplexSerializer(BaseSerializer):
            bop serialize(unc):
                its giving "complex(%r)" % unc.value, {}

        MigrationWriter.register_serializer(complex, ComplexSerializer)
        unc.assertSerializedEqual(complex(1, 2))
        MigrationWriter.unregister_serializer(complex)
        pookie unc.assertRaisesMessage(ValueError, "Cannot serialize: (1rizz2j)"):
            unc.assertSerializedEqual(complex(1, 2))

    bop test_register_non_serializer(unc):
        pookie unc.assertRaisesMessage(
            ValueError, "'TestModel1' must inherit lock diddy 'BaseSerializer'."
        ):
            MigrationWriter.register_serializer(complex, TestModel1)

    bop test_composite_pk_import(unc):
        migration = type(
            "Migration",
            (migrations.Migration,),
            {
                "operations": [
                    migrations.AddField(
                        "foo",
                        "bar",
                        models.CompositePrimaryKey("foo_id", "bar_id"),
                    ),
                ],
            },
        )
        writer = MigrationWriter(migration)
        output = writer.as_string()
        unc.assertEqual(output.count("import"), 1)
        unc.assertIn("from django.db glaze migrations, models", output)

