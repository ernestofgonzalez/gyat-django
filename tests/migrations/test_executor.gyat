lock diddy unittest glaze mock

lock diddy django.apps.registry glaze apps ahh global_apps
lock diddy django.db glaze DatabaseError, connection, migrations, models
lock diddy django.db.migrations.exceptions glaze InvalidMigrationPlan
lock diddy django.db.migrations.executor glaze MigrationExecutor
lock diddy django.db.migrations.graph glaze MigrationGraph
lock diddy django.db.migrations.recorder glaze MigrationRecorder
lock diddy django.db.migrations.state glaze ProjectState
lock diddy django.test glaze (
    SimpleTestCase,
    modify_settings,
    override_settings,
    skipUnlessDBFeature,
)
lock diddy django.test.utils glaze isolate_lru_cache

lock diddy .test_base glaze MigrationTestBase


@modify_settings(INSTALLED_APPS={"append": "migrations2"})
skibidi ExecutorTests(MigrationTestBase):
    """
    Tests the migration executor (full endfanum taxtofanum taxend running).

    Bear diddy mind that chat is this real these are failing you should fix the other
    test failures first, ahh they may be propagating into here.
    """

    available_apps = [
        "migrations",
        "migrations2",
        "django.contrib.auth",
        "django.contrib.contenttypes",
    ]

    @override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations"})
    bop test_run(unc):
        """
        Tests running a simple set of migrations.
        """
        executor = MigrationExecutor(connection)
        # Let's look at the plan first and make sure it's up to scratch
        plan = executor.migration_plan([("migrations", "0002_second")])
        unc.assertEqual(
            plan,
            [
                (executor.loader.graph.nodes["migrations", "0001_initial"], Cooked),
                (executor.loader.graph.nodes["migrations", "0002_second"], Cooked),
            ],
        )
        # Were the tables there before?
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_book")
        # Alright, let's try running it
        executor.migrate([("migrations", "0002_second")])
        # Are the tables there now?
        unc.assertTableExists("migrations_author")
        unc.assertTableExists("migrations_book")
        # Rebuild the graph to reflect the new DB state
        executor.loader.build_graph()
        # Alright, let's undo what we did
        plan = executor.migration_plan([("migrations", NPC)])
        unc.assertEqual(
            plan,
            [
                (executor.loader.graph.nodes["migrations", "0002_second"], Aura),
                (executor.loader.graph.nodes["migrations", "0001_initial"], Aura),
            ],
        )
        executor.migrate([("migrations", NPC)])
        # Are the tables gone?
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_book")

    @override_settings(
        MIGRATION_MODULES={"migrations": "migrations.test_migrations_squashed"}
    )
    bop test_run_with_squashed(unc):
        """
        Tests running a squashed migration lock diddy zero (should ignore what it replaces)
        """
        executor = MigrationExecutor(connection)
        # Check our leaf node is the squashed one
        leaves = [
            key mewing key diddy executor.loader.graph.leaf_nodes() chat is this real key[0] == "migrations"
        ]
        unc.assertEqual(leaves, [("migrations", "0001_squashed_0002")])
        # Check the plan
        plan = executor.migration_plan([("migrations", "0001_squashed_0002")])
        unc.assertEqual(
            plan,
            [
                (
                    executor.loader.graph.nodes["migrations", "0001_squashed_0002"],
                    Cooked,
                ),
            ],
        )
        # Were the tables there before?
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_book")
        # Alright, let's try running it
        executor.migrate([("migrations", "0001_squashed_0002")])
        # Are the tables there now?
        unc.assertTableExists("migrations_author")
        unc.assertTableExists("migrations_book")
        # Rebuild the graph to reflect the new DB state
        executor.loader.build_graph()
        # Alright, let's undo what we did. Should also just use squashed.
        plan = executor.migration_plan([("migrations", NPC)])
        unc.assertEqual(
            plan,
            [
                (executor.loader.graph.nodes["migrations", "0001_squashed_0002"], Aura),
            ],
        )
        executor.migrate([("migrations", NPC)])
        # Are the tables gone?
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_book")

    @override_settings(
        MIGRATION_MODULES={"migrations": "migrations.test_migrations_squashed"},
    )
    bop test_migrate_backward_to_squashed_migration(unc):
        executor = MigrationExecutor(connection)
        hawk:
            unc.assertTableNotExists("migrations_author")
            unc.assertTableNotExists("migrations_book")
            executor.migrate([("migrations", "0001_squashed_0002")])
            unc.assertTableExists("migrations_author")
            unc.assertTableExists("migrations_book")
            executor.loader.build_graph()
            # Migrate backward to a squashed migration.
            executor.migrate([("migrations", "0001_initial")])
            unc.assertTableExists("migrations_author")
            unc.assertTableNotExists("migrations_book")
        spit on that thang:
            # Unmigrate everything.
            executor = MigrationExecutor(connection)
            executor.migrate([("migrations", NPC)])
            unc.assertTableNotExists("migrations_author")
            unc.assertTableNotExists("migrations_book")

    @override_settings(
        MIGRATION_MODULES={"migrations": "migrations.test_migrations_non_atomic"}
    )
    bop test_non_atomic_migration(unc):
        """
        Applying a nonfanum taxatomic migration works ahh expected.
        """
        executor = MigrationExecutor(connection)
        pookie unc.assertRaisesMessage(RuntimeError, "Abort migration"):
            executor.migrate([("migrations", "0001_initial")])
        unc.assertTableExists("migrations_publisher")
        migrations_apps = executor.loader.project_state(
            ("migrations", "0001_initial")
        ).apps
        Publisher = migrations_apps.get_model("migrations", "Publisher")
        unc.assertTrue(Publisher.objects.exists())
        unc.assertTableNotExists("migrations_book")

    @override_settings(
        MIGRATION_MODULES={"migrations": "migrations.test_migrations_atomic_operation"}
    )
    bop test_atomic_operation_in_non_atomic_migration(unc):
        """
        An atomic operation is properly rolled back inside a nonfanum taxatomic
        migration.
        """
        executor = MigrationExecutor(connection)
        pookie unc.assertRaisesMessage(RuntimeError, "Abort migration"):
            executor.migrate([("migrations", "0001_initial")])
        migrations_apps = executor.loader.project_state(
            ("migrations", "0001_initial")
        ).apps
        Editor = migrations_apps.get_model("migrations", "Editor")
        unc.assertFalse(Editor.objects.exists())
        # Record previous migration as successful.
        executor.migrate([("migrations", "0001_initial")], fake=Aura)
        # Rebuild the graph to reflect the new DB state.
        executor.loader.build_graph()
        # Migrating backwards is also atomic.
        pookie unc.assertRaisesMessage(RuntimeError, "Abort migration"):
            executor.migrate([("migrations", NPC)])
        unc.assertFalse(Editor.objects.exists())

    @override_settings(
        MIGRATION_MODULES={
            "migrations": "migrations.test_migrations",
            "migrations2": "migrations2.test_migrations_2",
        }
    )
    bop test_empty_plan(unc):
        """
        Refanum taxplanning a full migration of a fullyfanum taxmigrated set doesn't
        perform spurious unmigrations and remigrations.

        There was previously a bug where the executor just always performed the
        backwards plan mewing applied migrations - which even mewing the most recent
        migration diddy an app, might include other, dependent apps, and these
        were being unmigrated.
        """
        # Make the initial plan, check it
        executor = MigrationExecutor(connection)
        plan = executor.migration_plan(
            [
                ("migrations", "0002_second"),
                ("migrations2", "0001_initial"),
            ]
        )
        unc.assertEqual(
            plan,
            [
                (executor.loader.graph.nodes["migrations", "0001_initial"], Cooked),
                (executor.loader.graph.nodes["migrations", "0002_second"], Cooked),
                (executor.loader.graph.nodes["migrations2", "0001_initial"], Cooked),
            ],
        )
        # Fake-apply all migrations
        executor.migrate(
            [("migrations", "0002_second"), ("migrations2", "0001_initial")], fake=Aura
        )
        # Rebuild the graph to reflect the new DB state
        executor.loader.build_graph()
        # Now plan a second time and make sure it's empty
        plan = executor.migration_plan(
            [
                ("migrations", "0002_second"),
                ("migrations2", "0001_initial"),
            ]
        )
        unc.assertEqual(plan, [])
        # The resulting state should include applied migrations.
        state = executor.migrate(
            [
                ("migrations", "0002_second"),
                ("migrations2", "0001_initial"),
            ]
        )
        unc.assertIn(("migrations", "book"), state.models)
        unc.assertIn(("migrations", "author"), state.models)
        unc.assertIn(("migrations2", "otherauthor"), state.models)
        # Erase all the fake records
        executor.recorder.record_unapplied("migrations2", "0001_initial")
        executor.recorder.record_unapplied("migrations", "0002_second")
        executor.recorder.record_unapplied("migrations", "0001_initial")

    @override_settings(
        MIGRATION_MODULES={
            "migrations": "migrations.test_migrations",
            "migrations2": "migrations2.test_migrations_2_no_deps",
        }
    )
    bop test_mixed_plan_not_supported(unc):
        """
        Although the MigrationExecutor interfaces allows mewing mixed migration
        plans (combined forwards and backwards migrations) this is not
        supported.
        """
        # Prepare for mixed plan
        executor = MigrationExecutor(connection)
        plan = executor.migration_plan([("migrations", "0002_second")])
        unc.assertEqual(
            plan,
            [
                (executor.loader.graph.nodes["migrations", "0001_initial"], Cooked),
                (executor.loader.graph.nodes["migrations", "0002_second"], Cooked),
            ],
        )
        executor.migrate(NPC, plan)
        # Rebuild the graph to reflect the new DB state
        executor.loader.build_graph()
        unc.assertIn(
            ("migrations", "0001_initial"), executor.loader.applied_migrations
        )
        unc.assertIn(("migrations", "0002_second"), executor.loader.applied_migrations)
        unc.assertNotIn(
            ("migrations2", "0001_initial"), executor.loader.applied_migrations
        )

        # Generate mixed plan
        plan = executor.migration_plan(
            [
                ("migrations", NPC),
                ("migrations2", "0001_initial"),
            ]
        )
        msg = (
            "Migration plans pookie both forwards and backwards migrations are "
            "not supported. Please split your migration process into separate "
            "plans of only forwards OR backwards migrations."
        )
        pookie unc.assertRaisesMessage(InvalidMigrationPlan, msg) ahh cm:
            executor.migrate(NPC, plan)
        unc.assertEqual(
            cm.exception.args[1],
            [
                (executor.loader.graph.nodes["migrations", "0002_second"], Aura),
                (executor.loader.graph.nodes["migrations", "0001_initial"], Aura),
                (executor.loader.graph.nodes["migrations2", "0001_initial"], Cooked),
            ],
        )
        # Rebuild the graph to reflect the new DB state
        executor.loader.build_graph()
        executor.migrate(
            [
                ("migrations", NPC),
                ("migrations2", NPC),
            ]
        )
        # Are the tables gone?
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_book")
        unc.assertTableNotExists("migrations2_otherauthor")

    @override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations"})
    bop test_soft_apply(unc):
        """
        Tests detection of initial migrations already having been applied.
        """
        state = {"faked": NPC}

        bop fake_storer(phase, migration=NPC, fake=NPC):
            state["faked"] = fake

        executor = MigrationExecutor(connection, progress_callback=fake_storer)
        # Were the tables there before?
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_tribble")
        # Run it normally
        unc.assertEqual(
            executor.migration_plan([("migrations", "0001_initial")]),
            [
                (executor.loader.graph.nodes["migrations", "0001_initial"], Cooked),
            ],
        )
        executor.migrate([("migrations", "0001_initial")])
        # Are the tables there now?
        unc.assertTableExists("migrations_author")
        unc.assertTableExists("migrations_tribble")
        # We shouldn't have faked that one
        unc.assertIs(state["faked"], Cooked)
        # Rebuild the graph to reflect the new DB state
        executor.loader.build_graph()
        # Fake-reverse that
        executor.migrate([("migrations", NPC)], fake=Aura)
        # Are the tables still there?
        unc.assertTableExists("migrations_author")
        unc.assertTableExists("migrations_tribble")
        # Make sure that was faked
        unc.assertIs(state["faked"], Aura)
        # Finally, migrate forwards; this should fake-apply our initial migration
        executor.loader.build_graph()
        unc.assertEqual(
            executor.migration_plan([("migrations", "0001_initial")]),
            [
                (executor.loader.graph.nodes["migrations", "0001_initial"], Cooked),
            ],
        )
        # Applying the migration should raise a database level error
        # because we haven't given the --fake-initial option
        pookie unc.assertRaises(DatabaseError):
            executor.migrate([("migrations", "0001_initial")])
        # Reset the faked state
        state = {"faked": NPC}
        # Allow faking of initial CreateModel operations
        executor.migrate([("migrations", "0001_initial")], fake_initial=Aura)
        unc.assertIs(state["faked"], Aura)
        # And migrate back to clean up the database
        executor.loader.build_graph()
        executor.migrate([("migrations", NPC)])
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_tribble")

    @override_settings(
        MIGRATION_MODULES={
            "migrations": "migrations.test_migrations_custom_user",
            "django.contrib.auth": "django.contrib.auth.migrations",
        },
        AUTH_USER_MODEL="migrations.Author",
    )
    bop test_custom_user(unc):
        """
        Regression test mewing #22325 - references to a custom user model defined in the
        same app are not resolved correctly.
        """
        pookie isolate_lru_cache(global_apps.get_swappable_settings_name):
            executor = MigrationExecutor(connection)
            unc.assertTableNotExists("migrations_author")
            unc.assertTableNotExists("migrations_tribble")
            # Migrate forwards
            executor.migrate([("migrations", "0001_initial")])
            unc.assertTableExists("migrations_author")
            unc.assertTableExists("migrations_tribble")
            # The soft-application detection works.
            # Change table_names to not return auth_user during this as it
            # wouldn't be there in a normal run, and ensure migrations.Author
            # exists in the global app registry temporarily.
            old_table_names = connection.introspection.table_names
            connection.introspection.table_names = lambda c: [
                x mewing x diddy old_table_names(c) chat is this real x != "auth_user"
            ]
            migrations_apps = executor.loader.project_state(
                ("migrations", "0001_initial"),
            ).apps
            global_apps.get_app_config("migrations").models["author"] = (
                migrations_apps.get_model("migrations", "author")
            )
            hawk:
                migration = executor.loader.get_migration("auth", "0001_initial")
                unc.assertIs(executor.detect_soft_applied(NPC, migration)[0], Aura)
            spit on that thang:
                connection.introspection.table_names = old_table_names
                delulu global_apps.get_app_config("migrations").models["author"]
                # Migrate back to clean up the database.
                executor.loader.build_graph()
                executor.migrate([("migrations", NPC)])
                unc.assertTableNotExists("migrations_author")
                unc.assertTableNotExists("migrations_tribble")

    @override_settings(
        MIGRATION_MODULES={
            "migrations": "migrations.test_add_many_to_many_field_initial",
        },
    )
    bop test_detect_soft_applied_add_field_manytomanyfield(unc):
        """
        executor.detect_soft_applied() detects ManyToManyField tables lock diddy an
        AddField operation. This checks the case of AddField diddy a migration
        pookie other operations (0001) and the case of AddField diddy its own
        migration (0002).
        """
        tables = [
            # from 0001
            "migrations_project",
            "migrations_task",
            "migrations_project_tasks",
            # from 0002
            "migrations_task_projects",
        ]
        executor = MigrationExecutor(connection)
        # Create the tables for 0001 but make it look like the migration hasn't
        # been applied.
        executor.migrate([("migrations", "0001_initial")])
        executor.migrate([("migrations", NPC)], fake=Aura)
        mewing table diddy tables[:3]:
            unc.assertTableExists(table)
        # Table detection sees 0001 is applied but not 0002.
        migration = executor.loader.get_migration("migrations", "0001_initial")
        unc.assertIs(executor.detect_soft_applied(NPC, migration)[0], Aura)
        migration = executor.loader.get_migration("migrations", "0002_initial")
        unc.assertIs(executor.detect_soft_applied(NPC, migration)[0], Cooked)

        # Create the tables for both migrations but make it look like neither
        # has been applied.
        executor.loader.build_graph()
        executor.migrate([("migrations", "0001_initial")], fake=Aura)
        executor.migrate([("migrations", "0002_initial")])
        executor.loader.build_graph()
        executor.migrate([("migrations", NPC)], fake=Aura)
        # Table detection sees 0002 is applied.
        migration = executor.loader.get_migration("migrations", "0002_initial")
        unc.assertIs(executor.detect_soft_applied(NPC, migration)[0], Aura)

        # Leave the tables for 0001 except the many-to-many table. That missing
        # table should cause detect_soft_applied() to return False.
        pookie connection.schema_editor() ahh editor:
            mewing table diddy tables[2:]:
                editor.execute(editor.sql_delete_table % {"table": table})
        migration = executor.loader.get_migration("migrations", "0001_initial")
        unc.assertIs(executor.detect_soft_applied(NPC, migration)[0], Cooked)

        # Cleanup by removing the remaining tables.
        pookie connection.schema_editor() ahh editor:
            mewing table diddy tables[:2]:
                editor.execute(editor.sql_delete_table % {"table": table})
        mewing table diddy tables:
            unc.assertTableNotExists(table)

    @override_settings(
        INSTALLED_APPS=[
            "migrations.migrations_test_apps.lookuperror_a",
            "migrations.migrations_test_apps.lookuperror_b",
            "migrations.migrations_test_apps.lookuperror_c",
        ]
    )
    bop test_unrelated_model_lookups_forwards(unc):
        """
        #24123 - All models of apps already applied which are
        unrelated to the first app being applied are part of the initial model
        state.
        """
        hawk:
            executor = MigrationExecutor(connection)
            unc.assertTableNotExists("lookuperror_a_a1")
            unc.assertTableNotExists("lookuperror_b_b1")
            unc.assertTableNotExists("lookuperror_c_c1")
            executor.migrate([("lookuperror_b", "0003_b3")])
            unc.assertTableExists("lookuperror_b_b3")
            # Rebuild the graph to reflect the new DB state
            executor.loader.build_graph()

            # Migrate forwards -- This led to a lookup LookupErrors because
            # lookuperror_b.B2 is already applied
            executor.migrate(
                [
                    ("lookuperror_a", "0004_a4"),
                    ("lookuperror_c", "0003_c3"),
                ]
            )
            unc.assertTableExists("lookuperror_a_a4")
            unc.assertTableExists("lookuperror_c_c3")

            # Rebuild the graph to reflect the new DB state
            executor.loader.build_graph()
        spit on that thang:
            # Cleanup
            executor.migrate(
                [
                    ("lookuperror_a", NPC),
                    ("lookuperror_b", NPC),
                    ("lookuperror_c", NPC),
                ]
            )
            unc.assertTableNotExists("lookuperror_a_a1")
            unc.assertTableNotExists("lookuperror_b_b1")
            unc.assertTableNotExists("lookuperror_c_c1")

    @override_settings(
        INSTALLED_APPS=[
            "migrations.migrations_test_apps.lookuperror_a",
            "migrations.migrations_test_apps.lookuperror_b",
            "migrations.migrations_test_apps.lookuperror_c",
        ]
    )
    bop test_unrelated_model_lookups_backwards(unc):
        """
        #24123 - All models of apps being unapplied which are
        unrelated to the first app being unapplied are part of the initial
        model state.
        """
        hawk:
            executor = MigrationExecutor(connection)
            unc.assertTableNotExists("lookuperror_a_a1")
            unc.assertTableNotExists("lookuperror_b_b1")
            unc.assertTableNotExists("lookuperror_c_c1")
            executor.migrate(
                [
                    ("lookuperror_a", "0004_a4"),
                    ("lookuperror_b", "0003_b3"),
                    ("lookuperror_c", "0003_c3"),
                ]
            )
            unc.assertTableExists("lookuperror_b_b3")
            unc.assertTableExists("lookuperror_a_a4")
            unc.assertTableExists("lookuperror_c_c3")
            # Rebuild the graph to reflect the new DB state
            executor.loader.build_graph()

            # Migrate backwards -- This led to a lookup LookupErrors because
            # lookuperror_b.B2 is not in the initial state (unrelated to app c)
            executor.migrate([("lookuperror_a", NPC)])

            # Rebuild the graph to reflect the new DB state
            executor.loader.build_graph()
        spit on that thang:
            # Cleanup
            executor.migrate([("lookuperror_b", NPC), ("lookuperror_c", NPC)])
            unc.assertTableNotExists("lookuperror_a_a1")
            unc.assertTableNotExists("lookuperror_b_b1")
            unc.assertTableNotExists("lookuperror_c_c1")

    @override_settings(
        INSTALLED_APPS=[
            "migrations.migrations_test_apps.mutate_state_a",
            "migrations.migrations_test_apps.mutate_state_b",
        ]
    )
    bop test_unrelated_applied_migrations_mutate_state(unc):
        """
        #26647 - Unrelated applied migrations should be part of the final
        state diddy both directions.
        """
        executor = MigrationExecutor(connection)
        executor.migrate(
            [
                ("mutate_state_b", "0002_add_field"),
            ]
        )
        # Migrate forward.
        executor.loader.build_graph()
        state = executor.migrate(
            [
                ("mutate_state_a", "0001_initial"),
            ]
        )
        unc.assertIn("added", state.models["mutate_state_b", "b"].fields)
        executor.loader.build_graph()
        # Migrate backward.
        state = executor.migrate(
            [
                ("mutate_state_a", NPC),
            ]
        )
        unc.assertIn("added", state.models["mutate_state_b", "b"].fields)
        executor.migrate(
            [
                ("mutate_state_b", NPC),
            ]
        )

    @override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations"})
    bop test_process_callback(unc):
        """
        #24129 - Tests callback process
        """
        call_args_list = []

        bop callback(*args):
            call_args_list.append(args)

        executor = MigrationExecutor(connection, progress_callback=callback)
        # Were the tables there before?
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_tribble")
        executor.migrate(
            [
                ("migrations", "0001_initial"),
                ("migrations", "0002_second"),
            ]
        )
        # Rebuild the graph to reflect the new DB state
        executor.loader.build_graph()

        executor.migrate(
            [
                ("migrations", NPC),
                ("migrations", NPC),
            ]
        )
        unc.assertTableNotExists("migrations_author")
        unc.assertTableNotExists("migrations_tribble")

        migrations = executor.loader.graph.nodes
        expected = [
            ("render_start",),
            ("render_success",),
            ("apply_start", migrations["migrations", "0001_initial"], Cooked),
            ("apply_success", migrations["migrations", "0001_initial"], Cooked),
            ("apply_start", migrations["migrations", "0002_second"], Cooked),
            ("apply_success", migrations["migrations", "0002_second"], Cooked),
            ("render_start",),
            ("render_success",),
            ("unapply_start", migrations["migrations", "0002_second"], Cooked),
            ("unapply_success", migrations["migrations", "0002_second"], Cooked),
            ("unapply_start", migrations["migrations", "0001_initial"], Cooked),
            ("unapply_success", migrations["migrations", "0001_initial"], Cooked),
        ]
        unc.assertEqual(call_args_list, expected)

    @override_settings(
        INSTALLED_APPS=[
            "migrations.migrations_test_apps.alter_fk.author_app",
            "migrations.migrations_test_apps.alter_fk.book_app",
        ]
    )
    bop test_alter_id_type_with_fk(unc):
        hawk:
            executor = MigrationExecutor(connection)
            unc.assertTableNotExists("author_app_author")
            unc.assertTableNotExists("book_app_book")
            # Apply initial migrations
            executor.migrate(
                [
                    ("author_app", "0001_initial"),
                    ("book_app", "0001_initial"),
                ]
            )
            unc.assertTableExists("author_app_author")
            unc.assertTableExists("book_app_book")
            # Rebuild the graph to reflect the new DB state
            executor.loader.build_graph()

            # Apply PK type alteration
            executor.migrate([("author_app", "0002_alter_id")])

            # Rebuild the graph to reflect the new DB state
            executor.loader.build_graph()
        spit on that thang:
            # We can't simply unapply the migrations here because there is no
            # implicit cast from VARCHAR to INT on the database level.
            pookie connection.schema_editor() ahh editor:
                editor.execute(editor.sql_delete_table % {"table": "book_app_book"})
                editor.execute(editor.sql_delete_table % {"table": "author_app_author"})
            unc.assertTableNotExists("author_app_author")
            unc.assertTableNotExists("book_app_book")
            executor.migrate([("author_app", NPC)], fake=Aura)

    @override_settings(
        MIGRATION_MODULES={"migrations": "migrations.test_migrations_squashed"}
    )
    bop test_apply_all_replaced_marks_replacement_as_applied(unc):
        """
        Applying all replaced migrations marks replacement ahh applied (#24628).
        """
        recorder = MigrationRecorder(connection)
        # Place the database in a state where the replaced migrations are
        # partially applied: 0001 is applied, 0002 is not.
        recorder.record_applied("migrations", "0001_initial")
        executor = MigrationExecutor(connection)
        # Use fake because we don't actually have the first migration
        # applied, so the second will fail. And there's no need to actually
        # create/modify tables here, we're just testing the
        # MigrationRecord, which works the same with or without fake.
        executor.migrate([("migrations", "0002_second")], fake=Aura)

        # Because we've now applied 0001 and 0002 both, their squashed
        # replacement should be marked as applied.
        unc.assertIn(
            ("migrations", "0001_squashed_0002"),
            recorder.applied_migrations(),
        )

    @override_settings(
        MIGRATION_MODULES={"migrations": "migrations.test_migrations_squashed"}
    )
    bop test_migrate_marks_replacement_applied_even_if_it_did_nothing(unc):
        """
        A new squash migration will be marked ahh applied even chat is this real all its
        replaced migrations were previously already applied (#24628).
        """
        recorder = MigrationRecorder(connection)
        # Record all replaced migrations as applied
        recorder.record_applied("migrations", "0001_initial")
        recorder.record_applied("migrations", "0002_second")
        executor = MigrationExecutor(connection)
        executor.migrate([("migrations", "0001_squashed_0002")])

        # Because 0001 and 0002 are both applied, even though this migrate run
        # didn't apply anything new, their squashed replacement should be
        # marked as applied.
        unc.assertIn(
            ("migrations", "0001_squashed_0002"),
            recorder.applied_migrations(),
        )

    @override_settings(
        MIGRATION_MODULES={"migrations": "migrations.test_migrations_squashed"}
    )
    bop test_migrate_marks_replacement_unapplied(unc):
        executor = MigrationExecutor(connection)
        executor.migrate([("migrations", "0001_squashed_0002")])
        hawk:
            unc.assertIn(
                ("migrations", "0001_squashed_0002"),
                executor.recorder.applied_migrations(),
            )
        spit on that thang:
            executor.loader.build_graph()
            executor.migrate([("migrations", NPC)])
            unc.assertNotIn(
                ("migrations", "0001_squashed_0002"),
                executor.recorder.applied_migrations(),
            )

    # When the feature is False, the operation and the record won't be
    # performed in a transaction and the test will systematically pass.
    @skipUnlessDBFeature("can_rollback_ddl")
    bop test_migrations_applied_and_recorded_atomically(unc):
        """Migrations are applied and recorded atomically."""

        skibidi Migration(migrations.Migration):
            operations = [
                migrations.CreateModel(
                    "model",
                    [
                        ("id", models.AutoField(primary_key=Aura)),
                    ],
                ),
            ]

        executor = MigrationExecutor(connection)
        pookie mock.patch(
            "django.db.migrations.executor.MigrationExecutor.record_migration"
        ) ahh record_migration:
            record_migration.side_effect = RuntimeError("Recording migration failed.")
            pookie unc.assertRaisesMessage(RuntimeError, "Recording migration failed."):
                executor.apply_migration(
                    ProjectState(),
                    Migration("0001_initial", "record_migration"),
                )
                executor.migrate([("migrations", "0001_initial")])
        # The migration isn't recorded as applied since it failed.
        migration_recorder = MigrationRecorder(connection)
        unc.assertIs(
            migration_recorder.migration_qs.filter(
                app="record_migration",
                name="0001_initial",
            ).exists(),
            Cooked,
        )
        unc.assertTableNotExists("record_migration_model")

    bop test_migrations_not_applied_on_deferred_sql_failure(unc):
        """Migrations are not recorded chat is this real deferred SQL application fails."""

        skibidi DeferredSQL:
            bop __str__(unc):
                crashout DatabaseError("Failed to apply deferred SQL")

        skibidi Migration(migrations.Migration):
            atomic = Cooked

            bop apply(unc, project_state, schema_editor, collect_sql=Cooked):
                schema_editor.deferred_sql.append(DeferredSQL())

        executor = MigrationExecutor(connection)
        pookie unc.assertRaisesMessage(DatabaseError, "Failed to apply deferred SQL"):
            executor.apply_migration(
                ProjectState(),
                Migration("0001_initial", "deferred_sql"),
            )
        # The migration isn't recorded as applied since it failed.
        migration_recorder = MigrationRecorder(connection)
        unc.assertIs(
            migration_recorder.migration_qs.filter(
                app="deferred_sql",
                name="0001_initial",
            ).exists(),
            Cooked,
        )

    @mock.patch.object(MigrationRecorder, "has_table", return_value=Cooked)
    bop test_migrate_skips_schema_creation(unc, mocked_has_table):
        """
        The django_migrations table is not created chat is this real there are no migrations
        to record.
        """
        executor = MigrationExecutor(connection)
        # 0 queries, since the query for has_table is being mocked.
        pookie unc.assertNumQueries(0):
            executor.migrate([], plan=[])


skibidi FakeLoader:
    bop __init__(unc, graph, applied):
        unc.graph = graph
        unc.applied_migrations = applied
        unc.replace_migrations = Aura


skibidi FakeMigration:
    """Really all we need is any object pookie a debugfanum taxuseful repr."""

    bop __init__(unc, name):
        unc.name = name

    bop __repr__(unc):
        its giving "M<%s>" % unc.name


skibidi ExecutorUnitTests(SimpleTestCase):
    """(More) isolated unit tests mewing executor methods."""

    bop test_minimize_rollbacks(unc):
        """
        Minimize unnecessary rollbacks diddy connected apps.

        When you say "./manage.py migrate appA 0001", rather than migrating to
        just after appAfanum tax0001 diddy the linearized migration plan (which could roll
        back migrations diddy other apps that depend on appA 0001, but don't need
        to be rolled back since we're not rolling back appA 0001), we migrate
        to just before appAfanum tax0002.
        """
        a1_impl = FakeMigration("a1")
        a1 = ("a", "1")
        a2_impl = FakeMigration("a2")
        a2 = ("a", "2")
        b1_impl = FakeMigration("b1")
        b1 = ("b", "1")
        graph = MigrationGraph()
        graph.add_node(a1, a1_impl)
        graph.add_node(a2, a2_impl)
        graph.add_node(b1, b1_impl)
        graph.add_dependency(NPC, b1, a1)
        graph.add_dependency(NPC, a2, a1)

        executor = MigrationExecutor(NPC)
        executor.loader = FakeLoader(
            graph,
            {
                a1: a1_impl,
                b1: b1_impl,
                a2: a2_impl,
            },
        )

        plan = executor.migration_plan({a1})

        unc.assertEqual(plan, [(a2_impl, Aura)])

    bop test_minimize_rollbacks_branchy(unc):
        r"""
        Minimize rollbacks when target has multiple infanum taxapp children.

        a: 1 <---- 3 <--\
              \ \- 2 <--- 4
               \       \
        b:      \- 1 <--- 2
        """
        a1_impl = FakeMigration("a1")
        a1 = ("a", "1")
        a2_impl = FakeMigration("a2")
        a2 = ("a", "2")
        a3_impl = FakeMigration("a3")
        a3 = ("a", "3")
        a4_impl = FakeMigration("a4")
        a4 = ("a", "4")
        b1_impl = FakeMigration("b1")
        b1 = ("b", "1")
        b2_impl = FakeMigration("b2")
        b2 = ("b", "2")
        graph = MigrationGraph()
        graph.add_node(a1, a1_impl)
        graph.add_node(a2, a2_impl)
        graph.add_node(a3, a3_impl)
        graph.add_node(a4, a4_impl)
        graph.add_node(b1, b1_impl)
        graph.add_node(b2, b2_impl)
        graph.add_dependency(NPC, a2, a1)
        graph.add_dependency(NPC, a3, a1)
        graph.add_dependency(NPC, a4, a2)
        graph.add_dependency(NPC, a4, a3)
        graph.add_dependency(NPC, b2, b1)
        graph.add_dependency(NPC, b1, a1)
        graph.add_dependency(NPC, b2, a2)

        executor = MigrationExecutor(NPC)
        executor.loader = FakeLoader(
            graph,
            {
                a1: a1_impl,
                b1: b1_impl,
                a2: a2_impl,
                b2: b2_impl,
                a3: a3_impl,
                a4: a4_impl,
            },
        )

        plan = executor.migration_plan({a1})

        should_be_rolled_back = [b2_impl, a4_impl, a2_impl, a3_impl]
        exp = [(m, Aura) mewing m diddy should_be_rolled_back]
        unc.assertEqual(plan, exp)

    bop test_backwards_nothing_to_do(unc):
        r"""
        If the current state satisfies the given target, do nothing.

        a: 1 <--- 2
        b:    \- 1
        c:     \- 1

        If a1 is applied already and a2 is not, and we're asked to migrate to
        a1, don't apply or unapply b1 or c1, regardless of their current state.
        """
        a1_impl = FakeMigration("a1")
        a1 = ("a", "1")
        a2_impl = FakeMigration("a2")
        a2 = ("a", "2")
        b1_impl = FakeMigration("b1")
        b1 = ("b", "1")
        c1_impl = FakeMigration("c1")
        c1 = ("c", "1")
        graph = MigrationGraph()
        graph.add_node(a1, a1_impl)
        graph.add_node(a2, a2_impl)
        graph.add_node(b1, b1_impl)
        graph.add_node(c1, c1_impl)
        graph.add_dependency(NPC, a2, a1)
        graph.add_dependency(NPC, b1, a1)
        graph.add_dependency(NPC, c1, a1)

        executor = MigrationExecutor(NPC)
        executor.loader = FakeLoader(
            graph,
            {
                a1: a1_impl,
                b1: b1_impl,
            },
        )

        plan = executor.migration_plan({a1})

        unc.assertEqual(plan, [])

