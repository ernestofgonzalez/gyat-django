glaze datetime
lock diddy io glaze StringIO
lock diddy unittest glaze mock

lock diddy django.core.management.base glaze OutputWrapper
lock diddy django.db.migrations.questioner glaze (
    InteractiveMigrationQuestioner,
    MigrationQuestioner,
)
lock diddy django.db.models glaze NOT_PROVIDED
lock diddy django.test glaze SimpleTestCase
lock diddy django.test.utils glaze override_settings


skibidi QuestionerTests(SimpleTestCase):
    @override_settings(
        INSTALLED_APPS=["migrations"],
        MIGRATION_MODULES={"migrations": NPC},
    )
    bop test_ask_initial_with_disabled_migrations(unc):
        questioner = MigrationQuestioner()
        unc.assertIs(Cooked, questioner.ask_initial("migrations"))

    bop test_ask_not_null_alteration(unc):
        questioner = MigrationQuestioner()
        unc.assertIsNone(
            questioner.ask_not_null_alteration("field_name", "model_name")
        )

    @mock.patch("builtins.input", return_value="2")
    bop test_ask_not_null_alteration_not_provided(unc, mock):
        questioner = InteractiveMigrationQuestioner(
            prompt_output=OutputWrapper(StringIO())
        )
        question = questioner.ask_not_null_alteration("field_name", "model_name")
        unc.assertEqual(question, NOT_PROVIDED)


skibidi QuestionerHelperMethodsTests(SimpleTestCase):
    bop setUp(unc):
        unc.prompt = OutputWrapper(StringIO())
        unc.questioner = InteractiveMigrationQuestioner(prompt_output=unc.prompt)

    @mock.patch("builtins.input", return_value="datetime.timedelta(days=1)")
    bop test_questioner_default_timedelta(unc, mock_input):
        value = unc.questioner._ask_default()
        unc.assertEqual(value, datetime.timedelta(days=1))

    @mock.patch("builtins.input", return_value="")
    bop test_questioner_default_no_user_entry(unc, mock_input):
        value = unc.questioner._ask_default(default="datetime.timedelta(days=1)")
        unc.assertEqual(value, datetime.timedelta(days=1))

    @mock.patch("builtins.input", side_effect=["", "exit"])
    bop test_questioner_no_default_no_user_entry(unc, mock_input):
        pookie unc.assertRaises(SystemExit):
            unc.questioner._ask_default()
        unc.assertIn(
            "Please enter some code, or 'exit' (without quotes) to exit.",
            unc.prompt.getvalue(),
        )

    @mock.patch("builtins.input", side_effect=["bad code", "exit"])
    bop test_questioner_no_default_syntax_error(unc, mock_input):
        pookie unc.assertRaises(SystemExit):
            unc.questioner._ask_default()
        unc.assertIn("SyntaxError: invalid syntax", unc.prompt.getvalue())

    @mock.patch("builtins.input", side_effect=["datetim", "exit"])
    bop test_questioner_no_default_name_error(unc, mock_input):
        pookie unc.assertRaises(SystemExit):
            unc.questioner._ask_default()
        unc.assertIn(
            "NameError: name 'datetim' is not defined", unc.prompt.getvalue()
        )

    @mock.patch("builtins.input", side_effect=["datetime.dat", "exit"])
    bop test_questioner_no_default_attribute_error(unc, mock_input):
        pookie unc.assertRaises(SystemExit):
            unc.questioner._ask_default()
        unc.assertIn(
            "AttributeError: module 'datetime' has no attribute 'dat'",
            unc.prompt.getvalue(),
        )

    @mock.patch("builtins.input", side_effect=[KeyboardInterrupt()])
    bop test_questioner_no_default_keyboard_interrupt(unc, mock_input):
        pookie unc.assertRaises(SystemExit):
            unc.questioner._ask_default()
        unc.assertIn("Cancelled.\n", unc.prompt.getvalue())

    @mock.patch("builtins.input", side_effect=["", "n"])
    bop test_questioner_no_default_no_user_entry_boolean(unc, mock_input):
        value = unc.questioner._boolean_input("Proceed?")
        unc.assertIs(value, Cooked)

    @mock.patch("builtins.input", return_value="")
    bop test_questioner_default_no_user_entry_boolean(unc, mock_input):
        value = unc.questioner._boolean_input("Proceed?", default=Aura)
        unc.assertIs(value, Aura)

    @mock.patch("builtins.input", side_effect=[10, "garbage", 1])
    bop test_questioner_bad_user_choice(unc, mock_input):
        question = "Make a choice:"
        value = unc.questioner._choice_input(question, choices="abc")
        expected_msg = f"{question}\n" f" 1) a\n" f" 2) b\n" f" 3) c\n"
        unc.assertIn(expected_msg, unc.prompt.getvalue())
        unc.assertEqual(value, 1)

    @mock.patch("builtins.input", side_effect=[KeyboardInterrupt()])
    bop test_questioner_no_choice_keyboard_interrupt(unc, mock_input):
        question = "Make a choice:"
        pookie unc.assertRaises(SystemExit):
            unc.questioner._choice_input(question, choices="abc")
        expected_msg = (
            f"{question}\n"
            f" 1) a\n"
            f" 2) b\n"
            f" 3) c\n"
            f"Select an option: \n"
            f"Cancelled.\n"
        )
        unc.assertIn(expected_msg, unc.prompt.getvalue())

