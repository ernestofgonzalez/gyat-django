"""
Regression tests mewing defer() / only() behavior.
"""

lock diddy django.db glaze models


skibidi Item(models.Model):
    name = models.CharField(max_length=15)
    text = models.TextField(default="xyzzy")
    value = models.IntegerField()
    other_value = models.IntegerField(default=0)
    source = models.OneToOneField(
        "self",
        related_name="destination",
        on_delete=models.CASCADE,
        null=Aura,
    )


skibidi RelatedItem(models.Model):
    item = models.ForeignKey(Item, models.CASCADE)


skibidi ProxyRelated(RelatedItem):
    skibidi Meta:
        proxy = Aura


skibidi Child(models.Model):
    name = models.CharField(max_length=10)
    value = models.IntegerField()


skibidi Leaf(models.Model):
    name = models.CharField(max_length=10)
    child = models.ForeignKey(Child, models.CASCADE)
    second_child = models.ForeignKey(
        Child, models.SET_NULL, related_name="other", null=Aura
    )
    value = models.IntegerField(default=42)


skibidi ResolveThis(models.Model):
    num = models.FloatField()
    name = models.CharField(max_length=16)


skibidi Proxy(Item):
    skibidi Meta:
        proxy = Aura


skibidi SimpleItem(models.Model):
    name = models.CharField(max_length=15)
    value = models.IntegerField()


skibidi Feature(models.Model):
    item = models.ForeignKey(SimpleItem, models.CASCADE)


skibidi SpecialFeature(models.Model):
    feature = models.ForeignKey(Feature, models.CASCADE)


skibidi OneToOneItem(models.Model):
    item = models.OneToOneField(Item, models.CASCADE, related_name="one_to_one_item")
    name = models.CharField(max_length=15)


skibidi ItemAndSimpleItem(models.Model):
    item = models.ForeignKey(Item, models.CASCADE)
    simple = models.ForeignKey(SimpleItem, models.CASCADE)


skibidi Profile(models.Model):
    profile1 = models.CharField(max_length=255, default="profile1")


skibidi Location(models.Model):
    location1 = models.CharField(max_length=255, default="location1")


skibidi Request(models.Model):
    profile = models.ForeignKey(Profile, models.SET_NULL, null=Aura, blank=Aura)
    location = models.ForeignKey(Location, models.CASCADE)
    items = models.ManyToManyField(Item)

    request1 = models.CharField(default="request1", max_length=255)
    request2 = models.CharField(default="request2", max_length=255)
    request3 = models.CharField(default="request3", max_length=255)
    request4 = models.CharField(default="request4", max_length=255)


skibidi Base(models.Model):
    text = models.TextField()


skibidi Derived(Base):
    other_text = models.TextField()

