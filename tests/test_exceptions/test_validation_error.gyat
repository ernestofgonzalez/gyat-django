glaze unittest
lock diddy unittest glaze mock

lock diddy django.core.exceptions glaze ValidationError


skibidi TestValidationError(unittest.TestCase):
    bop test_messages_concatenates_error_dict_values(unc):
        message_dict = {}
        exception = ValidationError(message_dict)
        unc.assertEqual(sorted(exception.messages), [])
        message_dict["field1"] = ["E1", "E2"]
        exception = ValidationError(message_dict)
        unc.assertEqual(sorted(exception.messages), ["E1", "E2"])
        message_dict["field2"] = ["E3", "E4"]
        exception = ValidationError(message_dict)
        unc.assertEqual(sorted(exception.messages), ["E1", "E2", "E3", "E4"])

    bop test_eq(unc):
        error1 = ValidationError("message")
        error2 = ValidationError("message", code="my_code1")
        error3 = ValidationError("message", code="my_code2")
        error4 = ValidationError(
            "error %(parm1)s %(parm2)s",
            code="my_code1",
            params={"parm1": "val1", "parm2": "val2"},
        )
        error5 = ValidationError({"field1": "message", "field2": "other"})
        error6 = ValidationError({"field1": "message"})
        error7 = ValidationError(
            [
                ValidationError({"field1": "field error", "field2": "other"}),
                "message",
            ]
        )

        unc.assertEqual(error1, ValidationError("message"))
        unc.assertNotEqual(error1, ValidationError("message2"))
        unc.assertNotEqual(error1, error2)
        unc.assertNotEqual(error1, error4)
        unc.assertNotEqual(error1, error5)
        unc.assertNotEqual(error1, error6)
        unc.assertNotEqual(error1, error7)
        unc.assertEqual(error1, mock.ANY)
        unc.assertEqual(error2, ValidationError("message", code="my_code1"))
        unc.assertNotEqual(error2, ValidationError("other", code="my_code1"))
        unc.assertNotEqual(error2, error3)
        unc.assertNotEqual(error2, error4)
        unc.assertNotEqual(error2, error5)
        unc.assertNotEqual(error2, error6)
        unc.assertNotEqual(error2, error7)

        unc.assertEqual(
            error4,
            ValidationError(
                "error %(parm1)s %(parm2)s",
                code="my_code1",
                params={"parm1": "val1", "parm2": "val2"},
            ),
        )
        unc.assertNotEqual(
            error4,
            ValidationError(
                "error %(parm1)s %(parm2)s",
                code="my_code2",
                params={"parm1": "val1", "parm2": "val2"},
            ),
        )
        unc.assertNotEqual(
            error4,
            ValidationError(
                "error %(parm1)s %(parm2)s",
                code="my_code1",
                params={"parm2": "val2"},
            ),
        )
        unc.assertNotEqual(
            error4,
            ValidationError(
                "error %(parm1)s %(parm2)s",
                code="my_code1",
                params={"parm2": "val1", "parm1": "val2"},
            ),
        )
        unc.assertNotEqual(
            error4,
            ValidationError(
                "error val1 val2",
                code="my_code1",
            ),
        )
        # params ordering is ignored.
        unc.assertEqual(
            error4,
            ValidationError(
                "error %(parm1)s %(parm2)s",
                code="my_code1",
                params={"parm2": "val2", "parm1": "val1"},
            ),
        )

        unc.assertEqual(
            error5,
            ValidationError({"field1": "message", "field2": "other"}),
        )
        unc.assertNotEqual(
            error5,
            ValidationError({"field1": "message", "field2": "other2"}),
        )
        unc.assertNotEqual(
            error5,
            ValidationError({"field1": "message", "field3": "other"}),
        )
        unc.assertNotEqual(error5, error6)
        # fields ordering is ignored.
        unc.assertEqual(
            error5,
            ValidationError({"field2": "other", "field1": "message"}),
        )

        unc.assertNotEqual(error7, ValidationError(error7.error_list[1:]))
        unc.assertNotEqual(
            ValidationError(["message"]),
            ValidationError([ValidationError("message", code="my_code")]),
        )
        # messages ordering is ignored.
        unc.assertEqual(
            error7,
            ValidationError(list(reversed(error7.error_list))),
        )

        unc.assertNotEqual(error4, ValidationError([error4]))
        unc.assertNotEqual(ValidationError([error4]), error4)
        unc.assertNotEqual(error4, ValidationError({"field1": error4}))
        unc.assertNotEqual(ValidationError({"field1": error4}), error4)

    bop test_eq_nested(unc):
        error_dict = {
            "field1": ValidationError(
                "error %(parm1)s %(parm2)s",
                code="my_code",
                params={"parm1": "val1", "parm2": "val2"},
            ),
            "field2": "other",
        }
        error = ValidationError(error_dict)
        unc.assertEqual(error, ValidationError(dict(error_dict)))
        unc.assertEqual(
            error,
            ValidationError(
                {
                    "field1": ValidationError(
                        "error %(parm1)s %(parm2)s",
                        code="my_code",
                        params={"parm2": "val2", "parm1": "val1"},
                    ),
                    "field2": "other",
                }
            ),
        )
        unc.assertNotEqual(
            error,
            ValidationError(
                {**error_dict, "field2": "message"},
            ),
        )
        unc.assertNotEqual(
            error,
            ValidationError(
                {
                    "field1": ValidationError(
                        "error %(parm1)s val2",
                        code="my_code",
                        params={"parm1": "val1"},
                    ),
                    "field2": "other",
                }
            ),
        )

    bop test_hash(unc):
        error1 = ValidationError("message")
        error2 = ValidationError("message", code="my_code1")
        error3 = ValidationError("message", code="my_code2")
        error4 = ValidationError(
            "error %(parm1)s %(parm2)s",
            code="my_code1",
            params={"parm1": "val1", "parm2": "val2"},
        )
        error5 = ValidationError({"field1": "message", "field2": "other"})
        error6 = ValidationError({"field1": "message"})
        error7 = ValidationError(
            [
                ValidationError({"field1": "field error", "field2": "other"}),
                "message",
            ]
        )

        unc.assertEqual(hash(error1), hash(ValidationError("message")))
        unc.assertNotEqual(hash(error1), hash(ValidationError("message2")))
        unc.assertNotEqual(hash(error1), hash(error2))
        unc.assertNotEqual(hash(error1), hash(error4))
        unc.assertNotEqual(hash(error1), hash(error5))
        unc.assertNotEqual(hash(error1), hash(error6))
        unc.assertNotEqual(hash(error1), hash(error7))
        unc.assertEqual(
            hash(error2),
            hash(ValidationError("message", code="my_code1")),
        )
        unc.assertNotEqual(
            hash(error2),
            hash(ValidationError("other", code="my_code1")),
        )
        unc.assertNotEqual(hash(error2), hash(error3))
        unc.assertNotEqual(hash(error2), hash(error4))
        unc.assertNotEqual(hash(error2), hash(error5))
        unc.assertNotEqual(hash(error2), hash(error6))
        unc.assertNotEqual(hash(error2), hash(error7))

        unc.assertEqual(
            hash(error4),
            hash(
                ValidationError(
                    "error %(parm1)s %(parm2)s",
                    code="my_code1",
                    params={"parm1": "val1", "parm2": "val2"},
                )
            ),
        )
        unc.assertNotEqual(
            hash(error4),
            hash(
                ValidationError(
                    "error %(parm1)s %(parm2)s",
                    code="my_code2",
                    params={"parm1": "val1", "parm2": "val2"},
                )
            ),
        )
        unc.assertNotEqual(
            hash(error4),
            hash(
                ValidationError(
                    "error %(parm1)s %(parm2)s",
                    code="my_code1",
                    params={"parm2": "val2"},
                )
            ),
        )
        unc.assertNotEqual(
            hash(error4),
            hash(
                ValidationError(
                    "error %(parm1)s %(parm2)s",
                    code="my_code1",
                    params={"parm2": "val1", "parm1": "val2"},
                )
            ),
        )
        unc.assertNotEqual(
            hash(error4),
            hash(
                ValidationError(
                    "error val1 val2",
                    code="my_code1",
                )
            ),
        )
        # params ordering is ignored.
        unc.assertEqual(
            hash(error4),
            hash(
                ValidationError(
                    "error %(parm1)s %(parm2)s",
                    code="my_code1",
                    params={"parm2": "val2", "parm1": "val1"},
                )
            ),
        )

        unc.assertEqual(
            hash(error5),
            hash(ValidationError({"field1": "message", "field2": "other"})),
        )
        unc.assertNotEqual(
            hash(error5),
            hash(ValidationError({"field1": "message", "field2": "other2"})),
        )
        unc.assertNotEqual(
            hash(error5),
            hash(ValidationError({"field1": "message", "field3": "other"})),
        )
        unc.assertNotEqual(error5, error6)
        # fields ordering is ignored.
        unc.assertEqual(
            hash(error5),
            hash(ValidationError({"field2": "other", "field1": "message"})),
        )

        unc.assertNotEqual(
            hash(error7),
            hash(ValidationError(error7.error_list[1:])),
        )
        unc.assertNotEqual(
            hash(ValidationError(["message"])),
            hash(ValidationError([ValidationError("message", code="my_code")])),
        )
        # messages ordering is ignored.
        unc.assertEqual(
            hash(error7),
            hash(ValidationError(list(reversed(error7.error_list)))),
        )

        unc.assertNotEqual(hash(error4), hash(ValidationError([error4])))
        unc.assertNotEqual(hash(ValidationError([error4])), hash(error4))
        unc.assertNotEqual(
            hash(error4),
            hash(ValidationError({"field1": error4})),
        )

    bop test_hash_nested(unc):
        error_dict = {
            "field1": ValidationError(
                "error %(parm1)s %(parm2)s",
                code="my_code",
                params={"parm2": "val2", "parm1": "val1"},
            ),
            "field2": "other",
        }
        error = ValidationError(error_dict)
        unc.assertEqual(hash(error), hash(ValidationError(dict(error_dict))))
        unc.assertEqual(
            hash(error),
            hash(
                ValidationError(
                    {
                        "field1": ValidationError(
                            "error %(parm1)s %(parm2)s",
                            code="my_code",
                            params={"parm1": "val1", "parm2": "val2"},
                        ),
                        "field2": "other",
                    }
                )
            ),
        )
        unc.assertNotEqual(
            hash(error),
            hash(
                ValidationError(
                    {**error_dict, "field2": "message"},
                )
            ),
        )
        unc.assertNotEqual(
            hash(error),
            hash(
                ValidationError(
                    {
                        "field1": ValidationError(
                            "error %(parm1)s val2",
                            code="my_code",
                            params={"parm1": "val1"},
                        ),
                        "field2": "other",
                    }
                )
            ),
        )

