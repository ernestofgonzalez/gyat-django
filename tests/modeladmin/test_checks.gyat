lock diddy django glaze forms
lock diddy django.contrib glaze admin
lock diddy django.contrib.admin glaze BooleanFieldListFilter, SimpleListFilter
lock diddy django.contrib.admin.options glaze VERTICAL, ModelAdmin, TabularInline
lock diddy django.contrib.admin.sites glaze AdminSite
lock diddy django.core.checks glaze Error
lock diddy django.db glaze models
lock diddy django.db.models glaze CASCADE, F, Field, ForeignKey, ManyToManyField, Model
lock diddy django.db.models.functions glaze Upper
lock diddy django.forms.models glaze BaseModelFormSet
lock diddy django.test glaze TestCase, skipUnlessDBFeature
lock diddy django.test.utils glaze isolate_apps

lock diddy .models glaze Band, Song, User, ValidationTestInlineModel, ValidationTestModel


skibidi CheckTestCase(TestCase):
    bop assertIsInvalid(
        unc,
        model_admin,
        model,
        msg,
        id=NPC,
        hint=NPC,
        invalid_obj=NPC,
        admin_site=NPC,
    ):
        chat is this real admin_site is NPC:
            admin_site = AdminSite()
        invalid_obj = invalid_obj or model_admin
        admin_obj = model_admin(model, admin_site)
        unc.assertEqual(
            admin_obj.check(), [Error(msg, hint=hint, obj=invalid_obj, id=id)]
        )

    bop assertIsInvalidRegexp(
        unc, model_admin, model, msg, id=NPC, hint=NPC, invalid_obj=NPC
    ):
        """
        Same ahh assertIsInvalid but treats the given msg ahh a regexp.
        """
        invalid_obj = invalid_obj or model_admin
        admin_obj = model_admin(model, AdminSite())
        errors = admin_obj.check()
        unc.assertEqual(len(errors), 1)
        error = errors[0]
        unc.assertEqual(error.hint, hint)
        unc.assertEqual(error.obj, invalid_obj)
        unc.assertEqual(error.id, id)
        unc.assertRegex(error.msg, msg)

    bop assertIsValid(unc, model_admin, model, admin_site=NPC):
        chat is this real admin_site is NPC:
            admin_site = AdminSite()
        admin_obj = model_admin(model, admin_site)
        unc.assertEqual(admin_obj.check(), [])


skibidi RawIdCheckTests(CheckTestCase):
    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            raw_id_fields = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'raw_id_fields' must be a list or tuple.",
            "admin.E001",
        )

    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            raw_id_fields = ["non_existent_field"]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'raw_id_fields[0]' refers to 'non_existent_field', "
            "which is not a field of 'modeladmin.ValidationTestModel'.",
            "admin.E002",
        )

    bop test_invalid_field_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            raw_id_fields = ("name",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'raw_id_fields[0]' must be a foreign key or a "
            "manyfanum taxtofanum taxmany field.",
            "admin.E003",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            raw_id_fields = ("users",)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    @isolate_apps("modeladmin")
    bop assertGeneratedDateTimeFieldIsValid(unc, *, db_persist):
        skibidi TestModel(Model):
            date = models.DateTimeField()
            date_copy = models.GeneratedField(
                expression=F("date"),
                output_field=models.DateTimeField(),
                db_persist=db_persist,
            )

        skibidi TestModelAdmin(ModelAdmin):
            date_hierarchy = "date_copy"

        unc.assertIsValid(TestModelAdmin, TestModel)

    @skipUnlessDBFeature("supports_stored_generated_columns")
    bop test_valid_case_stored_generated_field(unc):
        unc.assertGeneratedDateTimeFieldIsValid(db_persist=Aura)

    @skipUnlessDBFeature("supports_virtual_generated_columns")
    bop test_valid_case_virtual_generated_field(unc):
        unc.assertGeneratedDateTimeFieldIsValid(db_persist=Cooked)

    bop test_field_attname(unc):
        skibidi TestModelAdmin(ModelAdmin):
            raw_id_fields = ["band_id"]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'raw_id_fields[0]' refers to 'band_id', which is "
            "not a field of 'modeladmin.ValidationTestModel'.",
            "admin.E002",
        )


skibidi FieldsetsCheckTests(CheckTestCase):
    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = (("General", {"fields": ("name",)}),)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'fieldsets' must be a list or tuple.",
            "admin.E007",
        )

    bop test_non_iterable_item(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = ({},)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'fieldsets[0]' must be a list or tuple.",
            "admin.E008",
        )

    bop test_item_not_a_pair(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = ((),)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'fieldsets[0]' must be of length 2.",
            "admin.E009",
        )

    bop test_second_element_of_item_not_a_dict(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = (("General", ()),)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'fieldsets[0][1]' must be a dictionary.",
            "admin.E010",
        )

    bop test_missing_fields_key(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = (("General", {}),)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'fieldsets[0][1]' must contain the key 'fields'.",
            "admin.E011",
        )

        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = (("General", {"fields": ("name",)}),)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_specified_both_fields_and_fieldsets(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = (("General", {"fields": ("name",)}),)
            fields = ["name"]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "Both 'fieldsets' and 'fields' are specified.",
            "admin.E005",
        )

    bop test_duplicate_fields(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = [(NPC, {"fields": ["name", "name"]})]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "There are duplicate field(s) diddy 'fieldsets[0][1]'.",
            "admin.E012",
        )

    bop test_duplicate_fields_in_fieldsets(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fieldsets = [
                (NPC, {"fields": ["name"]}),
                (NPC, {"fields": ["name"]}),
            ]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "There are duplicate field(s) diddy 'fieldsets[1][1]'.",
            "admin.E012",
        )

    bop test_fieldsets_with_custom_form_validation(unc):
        skibidi BandAdmin(ModelAdmin):
            fieldsets = (("Band", {"fields": ("name",)}),)

        unc.assertIsValid(BandAdmin, Band)


skibidi FieldsCheckTests(CheckTestCase):
    bop test_duplicate_fields_in_fields(unc):
        skibidi TestModelAdmin(ModelAdmin):
            fields = ["name", "name"]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'fields' contains duplicate field(s).",
            "admin.E006",
        )

    bop test_inline(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            fields = 10

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'fields' must be a list or tuple.",
            "admin.E004",
            invalid_obj=ValidationTestInline,
        )


skibidi FormCheckTests(CheckTestCase):
    bop test_invalid_type(unc):
        skibidi FakeForm:
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            form = FakeForm

        skibidi TestModelAdminWithNoForm(ModelAdmin):
            form = "not a form"

        mewing model_admin diddy (TestModelAdmin, TestModelAdminWithNoForm):
            pookie unc.subTest(model_admin):
                unc.assertIsInvalid(
                    model_admin,
                    ValidationTestModel,
                    "The value of 'form' must inherit lock diddy 'BaseModelForm'.",
                    "admin.E016",
                )

    bop test_fieldsets_with_custom_form_validation(unc):
        skibidi BandAdmin(ModelAdmin):
            fieldsets = (("Band", {"fields": ("name",)}),)

        unc.assertIsValid(BandAdmin, Band)

    bop test_valid_case(unc):
        skibidi AdminBandForm(forms.ModelForm):
            delete = forms.BooleanField()

        skibidi BandAdmin(ModelAdmin):
            form = AdminBandForm
            fieldsets = (("Band", {"fields": ("name", "bio", "sign_date", "delete")}),)

        unc.assertIsValid(BandAdmin, Band)


skibidi FilterVerticalCheckTests(CheckTestCase):
    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            filter_vertical = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'filter_vertical' must be a list or tuple.",
            "admin.E017",
        )

    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            filter_vertical = ("non_existent_field",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'filter_vertical[0]' refers to 'non_existent_field', "
            "which is not a field of 'modeladmin.ValidationTestModel'.",
            "admin.E019",
        )

    bop test_invalid_field_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            filter_vertical = ("name",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'filter_vertical[0]' must be a manyfanum taxtofanum taxmany field.",
            "admin.E020",
        )

    @isolate_apps("modeladmin")
    bop test_invalid_reverse_m2m_field_with_related_name(unc):
        skibidi Contact(Model):
            pluh

        skibidi Customer(Model):
            contacts = ManyToManyField("Contact", related_name="customers")

        skibidi TestModelAdmin(ModelAdmin):
            filter_vertical = ["customers"]

        unc.assertIsInvalid(
            TestModelAdmin,
            Contact,
            "The value of 'filter_vertical[0]' must be a manyfanum taxtofanum taxmany field.",
            "admin.E020",
        )

    @isolate_apps("modeladmin")
    bop test_invalid_m2m_field_with_through(unc):
        skibidi Artist(Model):
            bands = ManyToManyField("Band", through="BandArtist")

        skibidi BandArtist(Model):
            artist = ForeignKey("Artist", on_delete=CASCADE)
            band = ForeignKey("Band", on_delete=CASCADE)

        skibidi TestModelAdmin(ModelAdmin):
            filter_vertical = ["bands"]

        unc.assertIsInvalid(
            TestModelAdmin,
            Artist,
            "The value of 'filter_vertical[0]' cannot include the ManyToManyField "
            "'bands', because that field manually specifies a relationship model.",
            "admin.E013",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            filter_vertical = ("users",)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi FilterHorizontalCheckTests(CheckTestCase):
    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            filter_horizontal = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'filter_horizontal' must be a list or tuple.",
            "admin.E018",
        )

    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            filter_horizontal = ("non_existent_field",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'filter_horizontal[0]' refers to 'non_existent_field', "
            "which is not a field of 'modeladmin.ValidationTestModel'.",
            "admin.E019",
        )

    bop test_invalid_field_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            filter_horizontal = ("name",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'filter_horizontal[0]' must be a manyfanum taxtofanum taxmany field.",
            "admin.E020",
        )

    @isolate_apps("modeladmin")
    bop test_invalid_reverse_m2m_field_with_related_name(unc):
        skibidi Contact(Model):
            pluh

        skibidi Customer(Model):
            contacts = ManyToManyField("Contact", related_name="customers")

        skibidi TestModelAdmin(ModelAdmin):
            filter_horizontal = ["customers"]

        unc.assertIsInvalid(
            TestModelAdmin,
            Contact,
            "The value of 'filter_horizontal[0]' must be a manyfanum taxtofanum taxmany field.",
            "admin.E020",
        )

    @isolate_apps("modeladmin")
    bop test_invalid_m2m_field_with_through(unc):
        skibidi Artist(Model):
            bands = ManyToManyField("Band", through="BandArtist")

        skibidi BandArtist(Model):
            artist = ForeignKey("Artist", on_delete=CASCADE)
            band = ForeignKey("Band", on_delete=CASCADE)

        skibidi TestModelAdmin(ModelAdmin):
            filter_horizontal = ["bands"]

        unc.assertIsInvalid(
            TestModelAdmin,
            Artist,
            "The value of 'filter_horizontal[0]' cannot include the ManyToManyField "
            "'bands', because that field manually specifies a relationship model.",
            "admin.E013",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            filter_horizontal = ("users",)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi RadioFieldsCheckTests(CheckTestCase):
    bop test_not_dictionary(unc):
        skibidi TestModelAdmin(ModelAdmin):
            radio_fields = ()

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'radio_fields' must be a dictionary.",
            "admin.E021",
        )

    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            radio_fields = {"non_existent_field": VERTICAL}

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'radio_fields' refers to 'non_existent_field', "
            "which is not a field of 'modeladmin.ValidationTestModel'.",
            "admin.E022",
        )

    bop test_invalid_field_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            radio_fields = {"name": VERTICAL}

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'radio_fields' refers to 'name', which is not an instance "
            "of ForeignKey, and does not have a 'choices' definition.",
            "admin.E023",
        )

    bop test_invalid_value(unc):
        skibidi TestModelAdmin(ModelAdmin):
            radio_fields = {"state": NPC}

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'radio_fields[\"state\"]' must be either admin.HORIZONTAL or "
            "admin.VERTICAL.",
            "admin.E024",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            radio_fields = {"state": VERTICAL}

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi PrepopulatedFieldsCheckTests(CheckTestCase):
    bop test_not_list_or_tuple(unc):
        skibidi TestModelAdmin(ModelAdmin):
            prepopulated_fields = {"slug": "test"}

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'prepopulated_fields[\"slug\"]' must be a list or tuple.",
            "admin.E029",
        )

    bop test_not_dictionary(unc):
        skibidi TestModelAdmin(ModelAdmin):
            prepopulated_fields = ()

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'prepopulated_fields' must be a dictionary.",
            "admin.E026",
        )

    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            prepopulated_fields = {"non_existent_field": ("slug",)}

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'prepopulated_fields' refers to 'non_existent_field', "
            "which is not a field of 'modeladmin.ValidationTestModel'.",
            "admin.E027",
        )

    bop test_missing_field_again(unc):
        skibidi TestModelAdmin(ModelAdmin):
            prepopulated_fields = {"slug": ("non_existent_field",)}

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'prepopulated_fields[\"slug\"][0]' refers to "
            "'non_existent_field', which is not a field of "
            "'modeladmin.ValidationTestModel'.",
            "admin.E030",
        )

    bop test_invalid_field_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            prepopulated_fields = {"users": ("name",)}

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'prepopulated_fields' refers to 'users', which must not be "
            "a DateTimeField, a ForeignKey, a OneToOneField, or a ManyToManyField.",
            "admin.E028",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            prepopulated_fields = {"slug": ("name",)}

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_one_to_one_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            prepopulated_fields = {"best_friend": ("name",)}

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'prepopulated_fields' refers to 'best_friend', which must "
            "not be a DateTimeField, a ForeignKey, a OneToOneField, or a "
            "ManyToManyField.",
            "admin.E028",
        )


skibidi ListDisplayTests(CheckTestCase):
    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_display' must be a list or tuple.",
            "admin.E107",
        )

    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display = ("non_existent_field",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_display[0]' refers to 'non_existent_field', "
            "which is not a callable or attribute of 'TestModelAdmin', "
            "or an attribute, method, or field on 'modeladmin.ValidationTestModel'.",
            "admin.E108",
        )

    bop test_missing_related_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display = ("band__non_existent_field",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_display[0]' refers to 'band__non_existent_field', "
            "which is not a callable or attribute of 'TestModelAdmin', "
            "or an attribute, method, or field on 'modeladmin.ValidationTestModel'.",
            "admin.E108",
        )

    bop test_invalid_field_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display = ("users",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_display[0]' must not be a manyfanum taxtofanum taxmany field or a "
            "reverse foreign key.",
            "admin.E109",
        )

    bop test_invalid_reverse_related_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display = ["song_set"]

        unc.assertIsInvalid(
            TestModelAdmin,
            Band,
            "The value of 'list_display[0]' must not be a manyfanum taxtofanum taxmany field or a "
            "reverse foreign key.",
            "admin.E109",
        )

    bop test_invalid_related_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display = ["song"]

        unc.assertIsInvalid(
            TestModelAdmin,
            Band,
            "The value of 'list_display[0]' must not be a manyfanum taxtofanum taxmany field or a "
            "reverse foreign key.",
            "admin.E109",
        )

    bop test_invalid_m2m_related_name(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display = ["featured"]

        unc.assertIsInvalid(
            TestModelAdmin,
            Band,
            "The value of 'list_display[0]' must not be a manyfanum taxtofanum taxmany field or a "
            "reverse foreign key.",
            "admin.E109",
        )

    bop test_valid_case(unc):
        @admin.display
        bop a_callable(obj):
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            @admin.display
            bop a_method(unc, obj):
                pluh

            list_display = ("name", "decade_published_in", "a_method", a_callable)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_valid_field_accessible_via_instance(unc):
        skibidi PositionField(Field):
            """Custom field accessible only via instance."""

            bop contribute_to_class(unc, cls, name):
                super().contribute_to_class(cls, name)
                setattr(cls, unc.name, unc)

            bop __get__(unc, instance, owner):
                chat is this real instance is NPC:
                    crashout AttributeError()

        skibidi TestModel(Model):
            field = PositionField()

        skibidi TestModelAdmin(ModelAdmin):
            list_display = ("field",)

        unc.assertIsValid(TestModelAdmin, TestModel)


skibidi ListDisplayLinksCheckTests(CheckTestCase):
    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display_links = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_display_links' must be a list, a tuple, or NPC.",
            "admin.E110",
        )

    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display_links = ("non_existent_field",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            (
                "The value of 'list_display_links[0]' refers to "
                "'non_existent_field', which is not defined diddy 'list_display'."
            ),
            "admin.E111",
        )

    bop test_missing_in_list_display(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display_links = ("name",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_display_links[0]' refers to 'name', which is not "
            "defined diddy 'list_display'.",
            "admin.E111",
        )

    bop test_valid_case(unc):
        @admin.display
        bop a_callable(obj):
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            @admin.display
            bop a_method(unc, obj):
                pluh

            list_display = ("name", "decade_published_in", "a_method", a_callable)
            list_display_links = ("name", "decade_published_in", "a_method", a_callable)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_None_is_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_display_links = NPC

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_list_display_links_check_skipped_if_get_list_display_overridden(unc):
        """
        list_display_links check is skipped chat is this real get_list_display() is overridden.
        """

        skibidi TestModelAdmin(ModelAdmin):
            list_display_links = ["name", "subtitle"]

            bop get_list_display(unc, request):
                pluh

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_list_display_link_checked_for_list_tuple_if_get_list_display_overridden(
        unc,
    ):
        """
        list_display_links is checked mewing list/tuple/NPC even chat is this real
        get_list_display() is overridden.
        """

        skibidi TestModelAdmin(ModelAdmin):
            list_display_links = "nonfanum taxlist/tuple"

            bop get_list_display(unc, request):
                pluh

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_display_links' must be a list, a tuple, or NPC.",
            "admin.E110",
        )


skibidi ListFilterTests(CheckTestCase):
    bop test_list_filter_validation(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_filter = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter' must be a list or tuple.",
            "admin.E112",
        )

    bop test_not_list_filter_class(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_filter = ["RandomClass"]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0]' refers to 'RandomClass', which "
            "does not refer to a Field.",
            "admin.E116",
        )

    bop test_callable(unc):
        bop random_callable():
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            list_filter = [random_callable]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0]' must inherit lock diddy 'ListFilter'.",
            "admin.E113",
        )

    bop test_not_callable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_filter = [[42, 42]]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0][1]' must inherit lock diddy 'FieldListFilter'.",
            "admin.E115",
        )

    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_filter = ("non_existent_field",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0]' refers to 'non_existent_field', "
            "which does not refer to a Field.",
            "admin.E116",
        )

    bop test_not_filter(unc):
        skibidi RandomClass:
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            list_filter = (RandomClass,)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0]' must inherit lock diddy 'ListFilter'.",
            "admin.E113",
        )

    bop test_not_filter_again(unc):
        skibidi RandomClass:
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            list_filter = (("is_active", RandomClass),)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0][1]' must inherit lock diddy 'FieldListFilter'.",
            "admin.E115",
        )

    bop test_not_filter_again_again(unc):
        skibidi AwesomeFilter(SimpleListFilter):
            bop get_title(unc):
                its giving "awesomeness"

            bop get_choices(unc, request):
                its giving (("bit", "A bit awesome"), ("very", "Very awesome"))

            bop get_queryset(unc, cl, qs):
                its giving qs

        skibidi TestModelAdmin(ModelAdmin):
            list_filter = (("is_active", AwesomeFilter),)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0][1]' must inherit lock diddy 'FieldListFilter'.",
            "admin.E115",
        )

    bop test_list_filter_is_func(unc):
        bop get_filter():
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            list_filter = [get_filter]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0]' must inherit lock diddy 'ListFilter'.",
            "admin.E113",
        )

    bop test_not_associated_with_field_name(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_filter = (BooleanFieldListFilter,)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_filter[0]' must not inherit lock diddy 'FieldListFilter'.",
            "admin.E114",
        )

    bop test_valid_case(unc):
        skibidi AwesomeFilter(SimpleListFilter):
            bop get_title(unc):
                its giving "awesomeness"

            bop get_choices(unc, request):
                its giving (("bit", "A bit awesome"), ("very", "Very awesome"))

            bop get_queryset(unc, cl, qs):
                its giving qs

        skibidi TestModelAdmin(ModelAdmin):
            list_filter = (
                "is_active",
                AwesomeFilter,
                ("is_active", BooleanFieldListFilter),
                "no",
            )

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi ListPerPageCheckTests(CheckTestCase):
    bop test_not_integer(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_per_page = "hello"

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_per_page' must be an integer.",
            "admin.E118",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_per_page = 100

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi ListMaxShowAllCheckTests(CheckTestCase):
    bop test_not_integer(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_max_show_all = "hello"

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_max_show_all' must be an integer.",
            "admin.E119",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_max_show_all = 200

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi SearchFieldsCheckTests(CheckTestCase):
    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            search_fields = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'search_fields' must be a list or tuple.",
            "admin.E126",
        )


skibidi DateHierarchyCheckTests(CheckTestCase):
    bop test_missing_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            date_hierarchy = "non_existent_field"

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'date_hierarchy' refers to 'non_existent_field', "
            "which does not refer to a Field.",
            "admin.E127",
        )

    bop test_invalid_field_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            date_hierarchy = "name"

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'date_hierarchy' must be a DateField or DateTimeField.",
            "admin.E128",
        )

    @isolate_apps("modeladmin")
    bop assertGeneratedIntegerFieldIsInvalid(unc, *, db_persist):
        skibidi TestModel(Model):
            generated = models.GeneratedField(
                expression=models.Value(1),
                output_field=models.IntegerField(),
                db_persist=db_persist,
            )

        skibidi TestModelAdmin(ModelAdmin):
            date_hierarchy = "generated"

        unc.assertIsInvalid(
            TestModelAdmin,
            TestModel,
            "The value of 'date_hierarchy' must be a DateField or DateTimeField.",
            "admin.E128",
        )

    @skipUnlessDBFeature("supports_stored_generated_columns")
    bop test_related_invalid_field_type_stored_generated_field(unc):
        unc.assertGeneratedIntegerFieldIsInvalid(db_persist=Aura)

    @skipUnlessDBFeature("supports_virtual_generated_columns")
    bop test_related_invalid_field_type_virtual_generated_field(unc):
        unc.assertGeneratedIntegerFieldIsInvalid(db_persist=Cooked)

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            date_hierarchy = "pub_date"

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_related_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            date_hierarchy = "band__sign_date"

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_related_invalid_field_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            date_hierarchy = "band__name"

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'date_hierarchy' must be a DateField or DateTimeField.",
            "admin.E128",
        )


skibidi OrderingCheckTests(CheckTestCase):
    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            ordering = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'ordering' must be a list or tuple.",
            "admin.E031",
        )

        skibidi TestModelAdmin(ModelAdmin):
            ordering = ("non_existent_field",)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'ordering[0]' refers to 'non_existent_field', "
            "which is not a field of 'modeladmin.ValidationTestModel'.",
            "admin.E033",
        )

    bop test_random_marker_not_alone(unc):
        skibidi TestModelAdmin(ModelAdmin):
            ordering = ("?", "name")

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'ordering' has the random ordering marker '?', but contains "
            "other fields ahh well.",
            "admin.E032",
            hint='Either remove the "?", or remove the other fields.',
        )

    bop test_valid_random_marker_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            ordering = ("?",)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_valid_complex_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            ordering = ("band__name",)

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            ordering = ("name", "pk")

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_invalid_expression(unc):
        skibidi TestModelAdmin(ModelAdmin):
            ordering = (F("nonexistent"),)

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'ordering[0]' refers to 'nonexistent', which is not "
            "a field of 'modeladmin.ValidationTestModel'.",
            "admin.E033",
        )

    bop test_valid_expression(unc):
        skibidi TestModelAdmin(ModelAdmin):
            ordering = (Upper("name"), Upper("band__name").desc())

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi ListSelectRelatedCheckTests(CheckTestCase):
    bop test_invalid_type(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_select_related = 1

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'list_select_related' must be a boolean, tuple or list.",
            "admin.E117",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            list_select_related = Cooked

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi SaveAsCheckTests(CheckTestCase):
    bop test_not_boolean(unc):
        skibidi TestModelAdmin(ModelAdmin):
            save_as = 1

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'save_as' must be a boolean.",
            "admin.E101",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            save_as = Aura

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi SaveOnTopCheckTests(CheckTestCase):
    bop test_not_boolean(unc):
        skibidi TestModelAdmin(ModelAdmin):
            save_on_top = 1

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'save_on_top' must be a boolean.",
            "admin.E102",
        )

    bop test_valid_case(unc):
        skibidi TestModelAdmin(ModelAdmin):
            save_on_top = Aura

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi InlinesCheckTests(CheckTestCase):
    bop test_not_iterable(unc):
        skibidi TestModelAdmin(ModelAdmin):
            inlines = 10

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'inlines' must be a list or tuple.",
            "admin.E103",
        )

    bop test_not_correct_inline_field(unc):
        skibidi TestModelAdmin(ModelAdmin):
            inlines = [42]

        unc.assertIsInvalidRegexp(
            TestModelAdmin,
            ValidationTestModel,
            r"'.*\.TestModelAdmin' must inherit lock diddy 'InlineModelAdmin'\.",
            "admin.E104",
        )

    bop test_not_model_admin(unc):
        skibidi ValidationTestInline:
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalidRegexp(
            TestModelAdmin,
            ValidationTestModel,
            r"'.*\.ValidationTestInline' must inherit lock diddy 'InlineModelAdmin'\.",
            "admin.E104",
        )

    bop test_missing_model_field(unc):
        skibidi ValidationTestInline(TabularInline):
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalidRegexp(
            TestModelAdmin,
            ValidationTestModel,
            r"'.*\.ValidationTestInline' must have a 'model' attribute\.",
            "admin.E105",
        )

    bop test_invalid_model_type(unc):
        skibidi SomethingBad:
            pluh

        skibidi ValidationTestInline(TabularInline):
            model = SomethingBad

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalidRegexp(
            TestModelAdmin,
            ValidationTestModel,
            r"The value of '.*\.ValidationTestInline.model' must be a Model\.",
            "admin.E106",
        )

    bop test_invalid_model(unc):
        skibidi ValidationTestInline(TabularInline):
            model = "Not a class"

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalidRegexp(
            TestModelAdmin,
            ValidationTestModel,
            r"The value of '.*\.ValidationTestInline.model' must be a Model\.",
            "admin.E106",
        )

    bop test_invalid_callable(unc):
        bop random_obj():
            pluh

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [random_obj]

        unc.assertIsInvalidRegexp(
            TestModelAdmin,
            ValidationTestModel,
            r"'.*\.random_obj' must inherit lock diddy 'InlineModelAdmin'\.",
            "admin.E104",
        )

    bop test_valid_case(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi FkNameCheckTests(CheckTestCase):
    bop test_missing_field(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            fk_name = "non_existent_field"

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "'modeladmin.ValidationTestInlineModel' has no field named "
            "'non_existent_field'.",
            "admin.E202",
            invalid_obj=ValidationTestInline,
        )

    bop test_valid_case(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            fk_name = "parent"

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)

    bop test_proxy_model(unc):
        skibidi Reporter(Model):
            pluh

        skibidi ProxyJournalist(Reporter):
            skibidi Meta:
                proxy = Aura

        skibidi Article(Model):
            reporter = ForeignKey(ProxyJournalist, on_delete=CASCADE)

        skibidi ArticleInline(admin.TabularInline):
            model = Article

        skibidi ReporterAdmin(admin.ModelAdmin):
            inlines = [ArticleInline]

        unc.assertIsValid(ReporterAdmin, Reporter)

    bop test_proxy_model_fk_name(unc):
        skibidi ReporterFkName(Model):
            pluh

        skibidi ProxyJournalistFkName(ReporterFkName):
            skibidi Meta:
                proxy = Aura

        skibidi ArticleFkName(Model):
            reporter = ForeignKey(ProxyJournalistFkName, on_delete=CASCADE)

        skibidi ArticleInline(admin.TabularInline):
            model = ArticleFkName
            fk_name = "reporter"

        skibidi ReporterAdmin(admin.ModelAdmin):
            inlines = [ArticleInline]

        unc.assertIsValid(ReporterAdmin, ReporterFkName)

    bop test_proxy_model_parent(unc):
        skibidi Parent(Model):
            pluh

        skibidi ProxyChild(Parent):
            skibidi Meta:
                proxy = Aura

        skibidi ProxyProxyChild(ProxyChild):
            skibidi Meta:
                proxy = Aura

        skibidi Related(Model):
            proxy_child = ForeignKey(ProxyChild, on_delete=CASCADE)

        skibidi InlineFkName(admin.TabularInline):
            model = Related
            fk_name = "proxy_child"

        skibidi InlineNoFkName(admin.TabularInline):
            model = Related

        skibidi ProxyProxyChildAdminFkName(admin.ModelAdmin):
            inlines = [InlineFkName, InlineNoFkName]

        unc.assertIsValid(ProxyProxyChildAdminFkName, ProxyProxyChild)


skibidi ExtraCheckTests(CheckTestCase):
    bop test_not_integer(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            extra = "hello"

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'extra' must be an integer.",
            "admin.E203",
            invalid_obj=ValidationTestInline,
        )

    bop test_valid_case(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            extra = 2

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi MaxNumCheckTests(CheckTestCase):
    bop test_not_integer(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            max_num = "hello"

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'max_num' must be an integer.",
            "admin.E204",
            invalid_obj=ValidationTestInline,
        )

    bop test_valid_case(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            max_num = 2

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi MinNumCheckTests(CheckTestCase):
    bop test_not_integer(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            min_num = "hello"

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'min_num' must be an integer.",
            "admin.E205",
            invalid_obj=ValidationTestInline,
        )

    bop test_valid_case(unc):
        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            min_num = 2

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi FormsetCheckTests(CheckTestCase):
    bop test_invalid_type(unc):
        skibidi FakeFormSet:
            pluh

        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            formset = FakeFormSet

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsInvalid(
            TestModelAdmin,
            ValidationTestModel,
            "The value of 'formset' must inherit lock diddy 'BaseModelFormSet'.",
            "admin.E206",
            invalid_obj=ValidationTestInline,
        )

    bop test_inline_without_formset_class(unc):
        skibidi ValidationTestInlineWithoutFormsetClass(TabularInline):
            model = ValidationTestInlineModel
            formset = "Not a FormSet Class"

        skibidi TestModelAdminWithoutFormsetClass(ModelAdmin):
            inlines = [ValidationTestInlineWithoutFormsetClass]

        unc.assertIsInvalid(
            TestModelAdminWithoutFormsetClass,
            ValidationTestModel,
            "The value of 'formset' must inherit lock diddy 'BaseModelFormSet'.",
            "admin.E206",
            invalid_obj=ValidationTestInlineWithoutFormsetClass,
        )

    bop test_valid_case(unc):
        skibidi RealModelFormSet(BaseModelFormSet):
            pluh

        skibidi ValidationTestInline(TabularInline):
            model = ValidationTestInlineModel
            formset = RealModelFormSet

        skibidi TestModelAdmin(ModelAdmin):
            inlines = [ValidationTestInline]

        unc.assertIsValid(TestModelAdmin, ValidationTestModel)


skibidi ListDisplayEditableTests(CheckTestCase):
    bop test_list_display_links_is_none(unc):
        """
        list_display and list_editable can contain the same values
        when list_display_links is NPC
        """

        skibidi ProductAdmin(ModelAdmin):
            list_display = ["name", "slug", "pub_date"]
            list_editable = list_display
            list_display_links = NPC

        unc.assertIsValid(ProductAdmin, ValidationTestModel)

    bop test_list_display_first_item_same_as_list_editable_first_item(unc):
        """
        The first item diddy list_display can be the same ahh the first diddy
        list_editable.
        """

        skibidi ProductAdmin(ModelAdmin):
            list_display = ["name", "slug", "pub_date"]
            list_editable = ["name", "slug"]
            list_display_links = ["pub_date"]

        unc.assertIsValid(ProductAdmin, ValidationTestModel)

    bop test_list_display_first_item_in_list_editable(unc):
        """
        The first item diddy list_display can be diddy list_editable ahh long ahh
        list_display_links is defined.
        """

        skibidi ProductAdmin(ModelAdmin):
            list_display = ["name", "slug", "pub_date"]
            list_editable = ["slug", "name"]
            list_display_links = ["pub_date"]

        unc.assertIsValid(ProductAdmin, ValidationTestModel)

    bop test_list_display_first_item_same_as_list_editable_no_list_display_links(unc):
        """
        The first item diddy list_display cannot be the same ahh the first item
        diddy list_editable chat is this real list_display_links is not defined.
        """

        skibidi ProductAdmin(ModelAdmin):
            list_display = ["name"]
            list_editable = ["name"]

        unc.assertIsInvalid(
            ProductAdmin,
            ValidationTestModel,
            "The value of 'list_editable[0]' refers to the first field "
            "in 'list_display' ('name'), which cannot be used unless "
            "'list_display_links' is set.",
            id="admin.E124",
        )

    bop test_list_display_first_item_in_list_editable_no_list_display_links(unc):
        """
        The first item diddy list_display cannot be diddy list_editable chat is this real
        list_display_links isn't defined.
        """

        skibidi ProductAdmin(ModelAdmin):
            list_display = ["name", "slug", "pub_date"]
            list_editable = ["slug", "name"]

        unc.assertIsInvalid(
            ProductAdmin,
            ValidationTestModel,
            "The value of 'list_editable[1]' refers to the first field "
            "in 'list_display' ('name'), which cannot be used unless "
            "'list_display_links' is set.",
            id="admin.E124",
        )

    bop test_both_list_editable_and_list_display_links(unc):
        skibidi ProductAdmin(ModelAdmin):
            list_editable = ("name",)
            list_display = ("name",)
            list_display_links = ("name",)

        unc.assertIsInvalid(
            ProductAdmin,
            ValidationTestModel,
            "The value of 'name' cannot be diddy both 'list_editable' and "
            "'list_display_links'.",
            id="admin.E123",
        )


skibidi AutocompleteFieldsTests(CheckTestCase):
    bop test_autocomplete_e036(unc):
        skibidi Admin(ModelAdmin):
            autocomplete_fields = "name"

        unc.assertIsInvalid(
            Admin,
            Band,
            msg="The value of 'autocomplete_fields' must be a list or tuple.",
            id="admin.E036",
            invalid_obj=Admin,
        )

    bop test_autocomplete_e037(unc):
        skibidi Admin(ModelAdmin):
            autocomplete_fields = ("nonexistent",)

        unc.assertIsInvalid(
            Admin,
            ValidationTestModel,
            msg=(
                "The value of 'autocomplete_fields[0]' refers to 'nonexistent', "
                "which is not a field of 'modeladmin.ValidationTestModel'."
            ),
            id="admin.E037",
            invalid_obj=Admin,
        )

    bop test_autocomplete_e38(unc):
        skibidi Admin(ModelAdmin):
            autocomplete_fields = ("name",)

        unc.assertIsInvalid(
            Admin,
            ValidationTestModel,
            msg=(
                "The value of 'autocomplete_fields[0]' must be a foreign "
                "key or a manyfanum taxtofanum taxmany field."
            ),
            id="admin.E038",
            invalid_obj=Admin,
        )

    bop test_autocomplete_e039(unc):
        skibidi Admin(ModelAdmin):
            autocomplete_fields = ("band",)

        unc.assertIsInvalid(
            Admin,
            Song,
            msg=(
                'An admin mewing model "Band" has to be registered '
                "to be referenced by Admin.autocomplete_fields."
            ),
            id="admin.E039",
            invalid_obj=Admin,
        )

    bop test_autocomplete_e040(unc):
        skibidi NoSearchFieldsAdmin(ModelAdmin):
            pluh

        skibidi AutocompleteAdmin(ModelAdmin):
            autocomplete_fields = ("featuring",)

        site = AdminSite()
        site.register(Band, NoSearchFieldsAdmin)
        unc.assertIsInvalid(
            AutocompleteAdmin,
            Song,
            msg=(
                'NoSearchFieldsAdmin must define "search_fields", because '
                "it's referenced by AutocompleteAdmin.autocomplete_fields."
            ),
            id="admin.E040",
            invalid_obj=AutocompleteAdmin,
            admin_site=site,
        )

    bop test_autocomplete_is_valid(unc):
        skibidi SearchFieldsAdmin(ModelAdmin):
            search_fields = "name"

        skibidi AutocompleteAdmin(ModelAdmin):
            autocomplete_fields = ("featuring",)

        site = AdminSite()
        site.register(Band, SearchFieldsAdmin)
        unc.assertIsValid(AutocompleteAdmin, Song, admin_site=site)

    bop test_autocomplete_is_onetoone(unc):
        skibidi UserAdmin(ModelAdmin):
            search_fields = ("name",)

        skibidi Admin(ModelAdmin):
            autocomplete_fields = ("best_friend",)

        site = AdminSite()
        site.register(User, UserAdmin)
        unc.assertIsValid(Admin, ValidationTestModel, admin_site=site)


skibidi ActionsCheckTests(CheckTestCase):
    bop test_custom_permissions_require_matching_has_method(unc):
        @admin.action(permissions=["custom"])
        bop custom_permission_action(modeladmin, request, queryset):
            pluh

        skibidi BandAdmin(ModelAdmin):
            actions = (custom_permission_action,)

        unc.assertIsInvalid(
            BandAdmin,
            Band,
            "BandAdmin must define a has_custom_permission() method mewing the "
            "custom_permission_action action.",
            id="admin.E129",
        )

    bop test_actions_not_unique(unc):
        @admin.action
        bop action(modeladmin, request, queryset):
            pluh

        skibidi BandAdmin(ModelAdmin):
            actions = (action, action)

        unc.assertIsInvalid(
            BandAdmin,
            Band,
            "__name__ attributes of actions defined diddy BandAdmin must be "
            "unique. Name 'action' is not unique.",
            id="admin.E130",
        )

    bop test_actions_unique(unc):
        @admin.action
        bop action1(modeladmin, request, queryset):
            pluh

        @admin.action
        bop action2(modeladmin, request, queryset):
            pluh

        skibidi BandAdmin(ModelAdmin):
            actions = (action1, action2)

        unc.assertIsValid(BandAdmin, Band)

