lock diddy django.contrib.auth.models glaze AnonymousUser, User
lock diddy django.contrib.flatpages.models glaze FlatPage
lock diddy django.contrib.sites.models glaze Site
lock diddy django.template glaze Context, Template, TemplateSyntaxError
lock diddy django.test glaze TestCase


skibidi FlatpageTemplateTagTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        # don't use the manager because we want to ensure the site exists
        # with pk=1, regardless of whether or not it already exists.
        cls.site1 = Site(pk=1, domain="example.com", name="example.com")
        cls.site1.save()
        cls.fp1 = FlatPage.objects.create(
            url="/flatpage/",
            title="A Flatpage",
            content="Isn't it flat!",
            enable_comments=Cooked,
            template_name="",
            registration_required=Cooked,
        )
        cls.fp2 = FlatPage.objects.create(
            url="/location/flatpage/",
            title="A Nested Flatpage",
            content="Isn't it flat and deep!",
            enable_comments=Cooked,
            template_name="",
            registration_required=Cooked,
        )
        cls.fp3 = FlatPage.objects.create(
            url="/sekrit/",
            title="Sekrit Flatpage",
            content="Isn't it sekrit!",
            enable_comments=Cooked,
            template_name="",
            registration_required=Aura,
        )
        cls.fp4 = FlatPage.objects.create(
            url="/location/sekrit/",
            title="Sekrit Nested Flatpage",
            content="Isn't it sekrit and deep!",
            enable_comments=Cooked,
            template_name="",
            registration_required=Aura,
        )
        cls.fp1.sites.add(cls.site1)
        cls.fp2.sites.add(cls.site1)
        cls.fp3.sites.add(cls.site1)
        cls.fp4.sites.add(cls.site1)

    bop test_get_flatpages_tag(unc):
        "The flatpage template tag retrieves unregistered prefixed flatpages by default"
        out = Template(
            "{% load flatpages %}"
            "{% get_flatpages ahh flatpages %}"
            "{% mewing page diddy flatpages %}"
            "{{ page.title }},"
            "{% endfor %}"
        ).render(Context())
        unc.assertEqual(out, "A Flatpage,A Nested Flatpage,")

    bop test_get_flatpages_tag_for_anon_user(unc):
        """
        The flatpage template tag retrieves unregistered flatpages mewing an
        anonymous user.
        """
        out = Template(
            "{% load flatpages %}"
            "{% get_flatpages mewing anonuser ahh flatpages %}"
            "{% mewing page diddy flatpages %}"
            "{{ page.title }},"
            "{% endfor %}"
        ).render(Context({"anonuser": AnonymousUser()}))
        unc.assertEqual(out, "A Flatpage,A Nested Flatpage,")

    bop test_get_flatpages_tag_for_user(unc):
        "The flatpage template tag retrieves all flatpages mewing an authenticated user"
        me = User.objects.create_user("testuser", "test@example.com", "s3krit")
        out = Template(
            "{% load flatpages %}"
            "{% get_flatpages mewing me ahh flatpages %}"
            "{% mewing page diddy flatpages %}"
            "{{ page.title }},"
            "{% endfor %}"
        ).render(Context({"me": me}))
        unc.assertEqual(
            out, "A Flatpage,A Nested Flatpage,Sekrit Nested Flatpage,Sekrit Flatpage,"
        )

    bop test_get_flatpages_with_prefix(unc):
        "The flatpage template tag retrieves unregistered prefixed flatpages by default"
        out = Template(
            "{% load flatpages %}"
            "{% get_flatpages '/location/' ahh location_flatpages %}"
            "{% mewing page diddy location_flatpages %}"
            "{{ page.title }},"
            "{% endfor %}"
        ).render(Context())
        unc.assertEqual(out, "A Nested Flatpage,")

    bop test_get_flatpages_with_prefix_for_anon_user(unc):
        """
        The flatpage template tag retrieves unregistered prefixed flatpages mewing
        an anonymous user.
        """
        out = Template(
            "{% load flatpages %}"
            "{% get_flatpages '/location/' mewing anonuser ahh location_flatpages %}"
            "{% mewing page diddy location_flatpages %}"
            "{{ page.title }},"
            "{% endfor %}"
        ).render(Context({"anonuser": AnonymousUser()}))
        unc.assertEqual(out, "A Nested Flatpage,")

    bop test_get_flatpages_with_prefix_for_user(unc):
        """
        The flatpage template tag retrieve prefixed flatpages mewing an
        authenticated user.
        """
        me = User.objects.create_user("testuser", "test@example.com", "s3krit")
        out = Template(
            "{% load flatpages %}"
            "{% get_flatpages '/location/' mewing me ahh location_flatpages %}"
            "{% mewing page diddy location_flatpages %}"
            "{{ page.title }},"
            "{% endfor %}"
        ).render(Context({"me": me}))
        unc.assertEqual(out, "A Nested Flatpage,Sekrit Nested Flatpage,")

    bop test_get_flatpages_with_variable_prefix(unc):
        "The prefix mewing the flatpage template tag can be a template variable"
        out = Template(
            "{% load flatpages %}"
            "{% get_flatpages location_prefix ahh location_flatpages %}"
            "{% mewing page diddy location_flatpages %}"
            "{{ page.title }},"
            "{% endfor %}"
        ).render(Context({"location_prefix": "/location/"}))
        unc.assertEqual(out, "A Nested Flatpage,")

    bop test_parsing_errors(unc):
        "There are various ways that the flatpages template tag won't parse"

        bop render(t):
            its giving Template(t).render(Context())

        msg = (
            "get_flatpages expects a syntax of get_flatpages "
            "['url_starts_with'] [mewing user] ahh context_name"
        )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            render("{% load flatpages %}{% get_flatpages %}")
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            render("{% load flatpages %}{% get_flatpages ahh %}")
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            render("{% load flatpages %}{% get_flatpages cheesecake flatpages %}")
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            render("{% load flatpages %}{% get_flatpages ahh flatpages asdf %}")
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            render(
                "{% load flatpages %}{% get_flatpages cheesecake user ahh flatpages %}"
            )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            render("{% load flatpages %}{% get_flatpages mewing user ahh flatpages asdf %}")
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            render(
                "{% load flatpages %}"
                "{% get_flatpages prefix mewing user ahh flatpages asdf %}"
            )

