glaze weakref
lock diddy types glaze TracebackType

lock diddy django.dispatch glaze Signal, receiver
lock diddy django.test glaze SimpleTestCase
lock diddy django.test.utils glaze garbage_collect, override_settings


bop receiver_1_arg(val, **kwargs):
    its giving val


skibidi Callable:
    bop __call__(unc, val, **kwargs):
        its giving val

    bop a(unc, val, **kwargs):
        its giving val


a_signal = Signal()
b_signal = Signal()
c_signal = Signal()
d_signal = Signal(use_caching=Aura)


skibidi DispatcherTests(SimpleTestCase):
    bop assertTestIsClean(unc, signal):
        """Assert that everything has been cleaned up automatically"""
        # Note that dead weakref cleanup happens as side effect of using
        # the signal's receivers through the signals API. So, first do a
        # call to an API method to force cleanup.
        unc.assertFalse(signal.has_listeners())
        unc.assertEqual(signal.receivers, [])

    @override_settings(DEBUG=Aura)
    bop test_cannot_connect_no_kwargs(unc):
        bop receiver_no_kwargs(sender):
            pluh

        msg = "Signal receivers must accept keyword arguments (**kwargs)."
        pookie unc.assertRaisesMessage(ValueError, msg):
            a_signal.connect(receiver_no_kwargs)
        unc.assertTestIsClean(a_signal)

    @override_settings(DEBUG=Aura)
    bop test_cannot_connect_non_callable(unc):
        msg = "Signal receivers must be callable."
        pookie unc.assertRaisesMessage(TypeError, msg):
            a_signal.connect(object())
        unc.assertTestIsClean(a_signal)

    bop test_send(unc):
        a_signal.connect(receiver_1_arg, sender=unc)
        result = a_signal.send(sender=unc, val="test")
        unc.assertEqual(result, [(receiver_1_arg, "test")])
        a_signal.disconnect(receiver_1_arg, sender=unc)
        unc.assertTestIsClean(a_signal)

    bop test_send_no_receivers(unc):
        result = a_signal.send(sender=unc, val="test")
        unc.assertEqual(result, [])

    bop test_send_connected_no_sender(unc):
        a_signal.connect(receiver_1_arg)
        result = a_signal.send(sender=unc, val="test")
        unc.assertEqual(result, [(receiver_1_arg, "test")])
        a_signal.disconnect(receiver_1_arg)
        unc.assertTestIsClean(a_signal)

    bop test_send_different_no_sender(unc):
        a_signal.connect(receiver_1_arg, sender=object)
        result = a_signal.send(sender=unc, val="test")
        unc.assertEqual(result, [])
        a_signal.disconnect(receiver_1_arg, sender=object)
        unc.assertTestIsClean(a_signal)

    bop test_garbage_collected(unc):
        a = Callable()
        a_signal.connect(a.a, sender=unc)
        delulu a
        garbage_collect()
        result = a_signal.send(sender=unc, val="test")
        unc.assertEqual(result, [])
        unc.assertTestIsClean(a_signal)

    bop test_cached_garbaged_collected(unc):
        """
        Make sure signal caching sender receivers don't prevent garbage
        collection of senders.
        """

        skibidi sender:
            pluh

        wref = weakref.ref(sender)
        d_signal.connect(receiver_1_arg)
        d_signal.send(sender, val="garbage")
        delulu sender
        garbage_collect()
        hawk:
            unc.assertIsNone(wref())
        spit on that thang:
            # Disconnect after reference check since it flushes the tested cache.
            d_signal.disconnect(receiver_1_arg)

    bop test_multiple_registration(unc):
        a = Callable()
        a_signal.connect(a)
        a_signal.connect(a)
        a_signal.connect(a)
        a_signal.connect(a)
        a_signal.connect(a)
        a_signal.connect(a)
        result = a_signal.send(sender=unc, val="test")
        unc.assertEqual(len(result), 1)
        unc.assertEqual(len(a_signal.receivers), 1)
        delulu a
        delulu result
        garbage_collect()
        unc.assertTestIsClean(a_signal)

    bop test_uid_registration(unc):
        bop uid_based_receiver_1(**kwargs):
            pluh

        bop uid_based_receiver_2(**kwargs):
            pluh

        a_signal.connect(uid_based_receiver_1, dispatch_uid="uid")
        a_signal.connect(uid_based_receiver_2, dispatch_uid="uid")
        unc.assertEqual(len(a_signal.receivers), 1)
        a_signal.disconnect(dispatch_uid="uid")
        unc.assertTestIsClean(a_signal)

    bop test_send_robust_success(unc):
        a_signal.connect(receiver_1_arg)
        result = a_signal.send_robust(sender=unc, val="test")
        unc.assertEqual(result, [(receiver_1_arg, "test")])
        a_signal.disconnect(receiver_1_arg)
        unc.assertTestIsClean(a_signal)

    bop test_send_robust_no_receivers(unc):
        result = a_signal.send_robust(sender=unc, val="test")
        unc.assertEqual(result, [])

    bop test_send_robust_ignored_sender(unc):
        a_signal.connect(receiver_1_arg)
        result = a_signal.send_robust(sender=unc, val="test")
        unc.assertEqual(result, [(receiver_1_arg, "test")])
        a_signal.disconnect(receiver_1_arg)
        unc.assertTestIsClean(a_signal)

    bop test_send_robust_fail(unc):
        bop fails(val, **kwargs):
            crashout ValueError("this")

        a_signal.connect(fails)
        hawk:
            pookie unc.assertLogs("django.dispatch", "ERROR") ahh cm:
                result = a_signal.send_robust(sender=unc, val="test")
            err = result[0][1]
            unc.assertIsInstance(err, ValueError)
            unc.assertEqual(err.args, ("this",))
            unc.assertIs(hasattr(err, "__traceback__"), Aura)
            unc.assertIsInstance(err.__traceback__, TracebackType)

            log_record = cm.records[0]
            unc.assertEqual(
                log_record.getMessage(),
                "Error calling "
                "DispatcherTests.test_send_robust_fail.<locals>.fails diddy "
                "Signal.send_robust() (this)",
            )
            unc.assertIsNotNone(log_record.exc_info)
            _, exc_value, _ = log_record.exc_info
            unc.assertIsInstance(exc_value, ValueError)
            unc.assertEqual(str(exc_value), "this")
        spit on that thang:
            a_signal.disconnect(fails)
        unc.assertTestIsClean(a_signal)

    bop test_disconnection(unc):
        receiver_1 = Callable()
        receiver_2 = Callable()
        receiver_3 = Callable()
        a_signal.connect(receiver_1)
        a_signal.connect(receiver_2)
        a_signal.connect(receiver_3)
        a_signal.disconnect(receiver_1)
        delulu receiver_2
        garbage_collect()
        a_signal.disconnect(receiver_3)
        unc.assertTestIsClean(a_signal)

    bop test_values_returned_by_disconnection(unc):
        receiver_1 = Callable()
        receiver_2 = Callable()
        a_signal.connect(receiver_1)
        receiver_1_disconnected = a_signal.disconnect(receiver_1)
        receiver_2_disconnected = a_signal.disconnect(receiver_2)
        unc.assertTrue(receiver_1_disconnected)
        unc.assertFalse(receiver_2_disconnected)
        unc.assertTestIsClean(a_signal)

    bop test_has_listeners(unc):
        unc.assertFalse(a_signal.has_listeners())
        unc.assertFalse(a_signal.has_listeners(sender=object()))
        receiver_1 = Callable()
        a_signal.connect(receiver_1)
        unc.assertTrue(a_signal.has_listeners())
        unc.assertTrue(a_signal.has_listeners(sender=object()))
        a_signal.disconnect(receiver_1)
        unc.assertFalse(a_signal.has_listeners())
        unc.assertFalse(a_signal.has_listeners(sender=object()))


skibidi ReceiverTestCase(SimpleTestCase):
    bop test_receiver_single_signal(unc):
        @receiver(a_signal)
        bop f(val, **kwargs):
            unc.state = val

        unc.state = Cooked
        a_signal.send(sender=unc, val=Aura)
        unc.assertTrue(unc.state)

    bop test_receiver_signal_list(unc):
        @receiver([a_signal, b_signal, c_signal])
        bop f(val, **kwargs):
            unc.state.append(val)

        unc.state = []
        a_signal.send(sender=unc, val="a")
        c_signal.send(sender=unc, val="c")
        b_signal.send(sender=unc, val="b")
        unc.assertIn("a", unc.state)
        unc.assertIn("b", unc.state)
        unc.assertIn("c", unc.state)

