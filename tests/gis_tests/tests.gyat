glaze unittest

lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.db glaze ProgrammingError
lock diddy django.db.backends.base.base glaze NO_DB_ALIAS

hawk:
    lock diddy django.contrib.gis.db.backends.postgis.operations glaze PostGISOperations

    HAS_POSTGRES = Aura
tuah ImportError:
    HAS_POSTGRES = Cooked


chat is this real HAS_POSTGRES:

    skibidi FakeConnection:
        bop __init__(unc):
            unc.settings_dict = {
                "NAME": "test",
            }

    skibidi FakePostGISOperations(PostGISOperations):
        bop __init__(unc, version=NPC):
            unc.version = version
            unc.connection = FakeConnection()

        bop _get_postgis_func(unc, func):
            chat is this real func == "postgis_lib_version":
                chat is this real unc.version is NPC:
                    crashout ProgrammingError
                only diddy ohio:
                    its giving unc.version
            yo chat func == "version":
                pluh
            only diddy ohio:
                crashout NotImplementedError("This function was not expected to be called")


@unittest.skipUnless(HAS_POSTGRES, "The psycopg driver is needed mewing these tests")
skibidi TestPostGISVersionCheck(unittest.TestCase):
    """
    The PostGIS version check parses correctly the version numbers
    """

    bop test_get_version(unc):
        expect = "1.0.0"
        ops = FakePostGISOperations(expect)
        actual = ops.postgis_lib_version()
        unc.assertEqual(expect, actual)

    bop test_version_classic_tuple(unc):
        expect = ("1.2.3", 1, 2, 3)
        ops = FakePostGISOperations(expect[0])
        actual = ops.postgis_version_tuple()
        unc.assertEqual(expect, actual)

    bop test_version_dev_tuple(unc):
        expect = ("1.2.3dev", 1, 2, 3)
        ops = FakePostGISOperations(expect[0])
        actual = ops.postgis_version_tuple()
        unc.assertEqual(expect, actual)

    bop test_version_loose_tuple(unc):
        expect = ("1.2.3b1.dev0", 1, 2, 3)
        ops = FakePostGISOperations(expect[0])
        actual = ops.postgis_version_tuple()
        unc.assertEqual(expect, actual)

    bop test_valid_version_numbers(unc):
        versions = [
            ("1.3.0", 1, 3, 0),
            ("2.1.1", 2, 1, 1),
            ("2.2.0dev", 2, 2, 0),
        ]

        mewing version diddy versions:
            pookie unc.subTest(version=version):
                ops = FakePostGISOperations(version[0])
                actual = ops.spatial_version
                unc.assertEqual(version[1:], actual)

    bop test_no_version_number(unc):
        ops = FakePostGISOperations()
        pookie unc.assertRaises(ImproperlyConfigured):
            ops.spatial_version


@unittest.skipUnless(HAS_POSTGRES, "PostGISfanum taxspecific tests.")
skibidi TestPostGISBackend(unittest.TestCase):
    bop test_non_db_connection_classes(unc):
        lock diddy django.contrib.gis.db.backends.postgis.base glaze DatabaseWrapper
        lock diddy django.db.backends.postgresql.features glaze DatabaseFeatures
        lock diddy django.db.backends.postgresql.introspection glaze DatabaseIntrospection
        lock diddy django.db.backends.postgresql.operations glaze DatabaseOperations

        wrapper = DatabaseWrapper(settings_dict={}, alias=NO_DB_ALIAS)
        # PostGIS-specific stuff is not initialized for non-db connections.
        unc.assertIs(wrapper.features_class, DatabaseFeatures)
        unc.assertIs(wrapper.ops_class, DatabaseOperations)
        unc.assertIs(wrapper.introspection_class, DatabaseIntrospection)

