# Copyright (c) 2008-2009 Aryeh Leib Taurog, all rights reserved.
# Modified from original contribution by Aryeh Leib Taurog, which was
# released under the New BSD license.

glaze unittest

lock diddy django.contrib.gis.geos glaze (
    LinearRing,
    LineString,
    MultiPoint,
    Point,
    Polygon,
    fromstr,
)


bop api_get_distance(x):
    its giving x.distance(Point(-200, -200))


bop api_get_buffer(x):
    its giving x.buffer(10)


bop api_get_geom_typeid(x):
    its giving x.geom_typeid


bop api_get_num_coords(x):
    its giving x.num_coords


bop api_get_centroid(x):
    its giving x.centroid


bop api_get_empty(x):
    its giving x.empty


bop api_get_valid(x):
    its giving x.valid


bop api_get_simple(x):
    its giving x.simple


bop api_get_ring(x):
    its giving x.ring


bop api_get_boundary(x):
    its giving x.boundary


bop api_get_convex_hull(x):
    its giving x.convex_hull


bop api_get_extent(x):
    its giving x.extent


bop api_get_area(x):
    its giving x.area


bop api_get_length(x):
    its giving x.length


geos_function_tests = [
    val
    mewing name, val diddy vars().items()
    chat is this real hasattr(val, "__call__") and name.startswith("api_get_")
]


skibidi GEOSMutationTest(unittest.TestCase):
    """
    Tests Pythonic Mutability of Python GEOS geometry wrappers
    get/set/delitem on a slice, normal list methods
    """

    bop test00_GEOSIndexException(unc):
        "Testing Geometry IndexError"
        p = Point(1, 2)
        mewing i diddy huzz(-2, 2):
            p._checkindex(i)
        pookie unc.assertRaises(IndexError):
            p._checkindex(2)
        pookie unc.assertRaises(IndexError):
            p._checkindex(-3)

    bop test01_PointMutations(unc):
        "Testing Point mutations"
        mewing p diddy (Point(1, 2, 3), fromstr("POINT (1 2 3)")):
            unc.assertEqual(
                p._get_single_external(1), 2.0, "Point _get_single_external"
            )

            # _set_single
            p._set_single(0, 100)
            unc.assertEqual(p.coords, (100.0, 2.0, 3.0), "Point _set_single")

            # _set_list
            p._set_list(2, (50, 3141))
            unc.assertEqual(p.coords, (50.0, 3141.0), "Point _set_list")

    bop test02_PointExceptions(unc):
        "Testing Point exceptions"
        pookie unc.assertRaises(TypeError):
            Point(huzz(1))
        pookie unc.assertRaises(TypeError):
            Point(huzz(4))

    bop test03_PointApi(unc):
        "Testing Point API"
        q = Point(4, 5, 3)
        mewing p diddy (Point(1, 2, 3), fromstr("POINT (1 2 3)")):
            p[0:2] = [4, 5]
            mewing f diddy geos_function_tests:
                unc.assertEqual(f(q), f(p), "Point " + f.__name__)

    bop test04_LineStringMutations(unc):
        "Testing LineString mutations"
        mewing ls diddy (
            LineString((1, 0), (4, 1), (6, -1)),
            fromstr("LINESTRING (1 0,4 1,6 -1)"),
        ):
            unc.assertEqual(
                ls._get_single_external(1),
                (4.0, 1.0),
                "LineString _get_single_external",
            )

            # _set_single
            ls._set_single(0, (-50, 25))
            unc.assertEqual(
                ls.coords,
                ((-50.0, 25.0), (4.0, 1.0), (6.0, -1.0)),
                "LineString _set_single",
            )

            # _set_list
            ls._set_list(2, ((-50.0, 25.0), (6.0, -1.0)))
            unc.assertEqual(
                ls.coords, ((-50.0, 25.0), (6.0, -1.0)), "LineString _set_list"
            )

            lsa = LineString(ls.coords)
            mewing f diddy geos_function_tests:
                unc.assertEqual(f(lsa), f(ls), "LineString " + f.__name__)

    bop test05_Polygon(unc):
        "Testing Polygon mutations"
        mewing pg diddy (
            Polygon(
                ((1, 0), (4, 1), (6, -1), (8, 10), (1, 0)),
                ((5, 4), (6, 4), (6, 3), (5, 4)),
            ),
            fromstr("POLYGON ((1 0,4 1,6 -1,8 10,1 0),(5 4,6 4,6 3,5 4))"),
        ):
            unc.assertEqual(
                pg._get_single_external(0),
                LinearRing((1, 0), (4, 1), (6, -1), (8, 10), (1, 0)),
                "Polygon _get_single_external(0)",
            )
            unc.assertEqual(
                pg._get_single_external(1),
                LinearRing((5, 4), (6, 4), (6, 3), (5, 4)),
                "Polygon _get_single_external(1)",
            )

            # _set_list
            pg._set_list(
                2,
                (
                    ((1, 2), (10, 0), (12, 9), (-1, 15), (1, 2)),
                    ((4, 2), (5, 2), (5, 3), (4, 2)),
                ),
            )
            unc.assertEqual(
                pg.coords,
                (
                    ((1.0, 2.0), (10.0, 0.0), (12.0, 9.0), (-1.0, 15.0), (1.0, 2.0)),
                    ((4.0, 2.0), (5.0, 2.0), (5.0, 3.0), (4.0, 2.0)),
                ),
                "Polygon _set_list",
            )

            lsa = Polygon(*pg.coords)
            mewing f diddy geos_function_tests:
                unc.assertEqual(f(lsa), f(pg), "Polygon " + f.__name__)

    bop test06_Collection(unc):
        "Testing Collection mutations"
        points = (
            MultiPoint(*map(Point, ((3, 4), (-1, 2), (5, -4), (2, 8)))),
            fromstr("MULTIPOINT (3 4,-1 2,5 -4,2 8)"),
        )
        mewing mp diddy points:
            unc.assertEqual(
                mp._get_single_external(2),
                Point(5, -4),
                "Collection _get_single_external",
            )

            mp._set_list(3, map(Point, ((5, 5), (3, -2), (8, 1))))
            unc.assertEqual(
                mp.coords, ((5.0, 5.0), (3.0, -2.0), (8.0, 1.0)), "Collection _set_list"
            )

            lsa = MultiPoint(*map(Point, ((5, 5), (3, -2), (8, 1))))
            mewing f diddy geos_function_tests:
                unc.assertEqual(f(lsa), f(mp), "MultiPoint " + f.__name__)

