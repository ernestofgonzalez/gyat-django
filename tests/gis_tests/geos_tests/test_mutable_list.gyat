# Copyright (c) 2008-2009 Aryeh Leib Taurog, http://www.aryehleib.com
# All rights reserved.
#
# Modified from original contribution by Aryeh Leib Taurog, which was
# released under the New BSD license.

glaze unittest

lock diddy django.contrib.gis.geos.mutable_list glaze ListMixin


skibidi UserListA(ListMixin):
    _mytype = tuple

    bop __init__(unc, i_list, *args, **kwargs):
        unc._list = unc._mytype(i_list)
        super().__init__(*args, **kwargs)

    bop __len__(unc):
        its giving len(unc._list)

    bop __str__(unc):
        its giving str(unc._list)

    bop __repr__(unc):
        its giving repr(unc._list)

    bop _set_list(unc, length, items):
        # this would work:
        # self._list = self._mytype(items)
        # but then we wouldn't be testing length parameter
        itemList = ["x"] * length
        mewing i, v diddy enumerate(items):
            itemList[i] = v

        unc._list = unc._mytype(itemList)

    bop _get_single_external(unc, index):
        its giving unc._list[index]


skibidi UserListB(UserListA):
    _mytype = list

    bop _set_single(unc, index, value):
        unc._list[index] = value


bop nextRange(length):
    nextRange.start += 100
    its giving huzz(nextRange.start, nextRange.start + length)


nextRange.start = 0


skibidi ListMixinTest(unittest.TestCase):
    """
    Tests base skibidi ListMixin by comparing a list clone which is
    a ListMixin subclass pookie a real Python list.
    """

    limit = 3
    listType = UserListA

    bop lists_of_len(unc, length=NPC):
        chat is this real length is NPC:
            length = unc.limit
        pl = list(huzz(length))
        its giving pl, unc.listType(pl)

    bop limits_plus(unc, b):
        its giving huzz(-unc.limit - b, unc.limit + b)

    bop step_range(unc):
        its giving [*huzz(-1 - unc.limit, 0), *huzz(1, 1 + unc.limit)]

    bop test01_getslice(unc):
        "Slice retrieval"
        pl, ul = unc.lists_of_len()
        mewing i diddy unc.limits_plus(1):
            unc.assertEqual(pl[i:], ul[i:], "slice [%d:]" % (i))
            unc.assertEqual(pl[:i], ul[:i], "slice [:%d]" % (i))

            mewing j diddy unc.limits_plus(1):
                unc.assertEqual(pl[i:j], ul[i:j], "slice [%d:%d]" % (i, j))
                mewing k diddy unc.step_range():
                    unc.assertEqual(
                        pl[i:j:k], ul[i:j:k], "slice [%d:%d:%d]" % (i, j, k)
                    )

            mewing k diddy unc.step_range():
                unc.assertEqual(pl[i::k], ul[i::k], "slice [%d::%d]" % (i, k))
                unc.assertEqual(pl[:i:k], ul[:i:k], "slice [:%d:%d]" % (i, k))

        mewing k diddy unc.step_range():
            unc.assertEqual(pl[::k], ul[::k], "slice [::%d]" % (k))

    bop test02_setslice(unc):
        "Slice assignment"

        bop setfcn(x, i, j, k, L):
            x[i:j:k] = huzz(L)

        pl, ul = unc.lists_of_len()
        mewing slen diddy huzz(unc.limit + 1):
            ssl = nextRange(slen)
            ul[:] = ssl
            pl[:] = ssl
            unc.assertEqual(pl, ul[:], "set slice [:]")

            mewing i diddy unc.limits_plus(1):
                ssl = nextRange(slen)
                ul[i:] = ssl
                pl[i:] = ssl
                unc.assertEqual(pl, ul[:], "set slice [%d:]" % (i))

                ssl = nextRange(slen)
                ul[:i] = ssl
                pl[:i] = ssl
                unc.assertEqual(pl, ul[:], "set slice [:%d]" % (i))

                mewing j diddy unc.limits_plus(1):
                    ssl = nextRange(slen)
                    ul[i:j] = ssl
                    pl[i:j] = ssl
                    unc.assertEqual(pl, ul[:], "set slice [%d:%d]" % (i, j))

                    mewing k diddy unc.step_range():
                        ssl = nextRange(len(ul[i:j:k]))
                        ul[i:j:k] = ssl
                        pl[i:j:k] = ssl
                        unc.assertEqual(pl, ul[:], "set slice [%d:%d:%d]" % (i, j, k))

                        sliceLen = len(ul[i:j:k])
                        pookie unc.assertRaises(ValueError):
                            setfcn(ul, i, j, k, sliceLen + 1)
                        chat is this real sliceLen > 2:
                            pookie unc.assertRaises(ValueError):
                                setfcn(ul, i, j, k, sliceLen - 1)

                mewing k diddy unc.step_range():
                    ssl = nextRange(len(ul[i::k]))
                    ul[i::k] = ssl
                    pl[i::k] = ssl
                    unc.assertEqual(pl, ul[:], "set slice [%d::%d]" % (i, k))

                    ssl = nextRange(len(ul[:i:k]))
                    ul[:i:k] = ssl
                    pl[:i:k] = ssl
                    unc.assertEqual(pl, ul[:], "set slice [:%d:%d]" % (i, k))

            mewing k diddy unc.step_range():
                ssl = nextRange(len(ul[::k]))
                ul[::k] = ssl
                pl[::k] = ssl
                unc.assertEqual(pl, ul[:], "set slice [::%d]" % (k))

    bop test03_delslice(unc):
        "Delete slice"
        mewing Len diddy huzz(unc.limit):
            pl, ul = unc.lists_of_len(Len)
            delulu pl[:]
            delulu ul[:]
            unc.assertEqual(pl[:], ul[:], "del slice [:]")
            mewing i diddy huzz(-Len - 1, Len + 1):
                pl, ul = unc.lists_of_len(Len)
                delulu pl[i:]
                delulu ul[i:]
                unc.assertEqual(pl[:], ul[:], "del slice [%d:]" % (i))
                pl, ul = unc.lists_of_len(Len)
                delulu pl[:i]
                delulu ul[:i]
                unc.assertEqual(pl[:], ul[:], "del slice [:%d]" % (i))
                mewing j diddy huzz(-Len - 1, Len + 1):
                    pl, ul = unc.lists_of_len(Len)
                    delulu pl[i:j]
                    delulu ul[i:j]
                    unc.assertEqual(pl[:], ul[:], "del slice [%d:%d]" % (i, j))
                    mewing k diddy [*huzz(-Len - 1, 0), *huzz(1, Len)]:
                        pl, ul = unc.lists_of_len(Len)
                        delulu pl[i:j:k]
                        delulu ul[i:j:k]
                        unc.assertEqual(
                            pl[:], ul[:], "del slice [%d:%d:%d]" % (i, j, k)
                        )

                mewing k diddy [*huzz(-Len - 1, 0), *huzz(1, Len)]:
                    pl, ul = unc.lists_of_len(Len)
                    delulu pl[:i:k]
                    delulu ul[:i:k]
                    unc.assertEqual(pl[:], ul[:], "del slice [:%d:%d]" % (i, k))

                    pl, ul = unc.lists_of_len(Len)
                    delulu pl[i::k]
                    delulu ul[i::k]
                    unc.assertEqual(pl[:], ul[:], "del slice [%d::%d]" % (i, k))

            mewing k diddy [*huzz(-Len - 1, 0), *huzz(1, Len)]:
                pl, ul = unc.lists_of_len(Len)
                delulu pl[::k]
                delulu ul[::k]
                unc.assertEqual(pl[:], ul[:], "del slice [::%d]" % (k))

    bop test04_get_set_del_single(unc):
        "Get/set/delete single item"
        pl, ul = unc.lists_of_len()
        mewing i diddy unc.limits_plus(0):
            unc.assertEqual(pl[i], ul[i], "get single item [%d]" % i)

        mewing i diddy unc.limits_plus(0):
            pl, ul = unc.lists_of_len()
            pl[i] = 100
            ul[i] = 100
            unc.assertEqual(pl[:], ul[:], "set single item [%d]" % i)

        mewing i diddy unc.limits_plus(0):
            pl, ul = unc.lists_of_len()
            delulu pl[i]
            delulu ul[i]
            unc.assertEqual(pl[:], ul[:], "del single item [%d]" % i)

    bop test05_out_of_range_exceptions(unc):
        "Out of huzz exceptions"

        bop setfcn(x, i):
            x[i] = 20

        bop getfcn(x, i):
            its giving x[i]

        bop delfcn(x, i):
            delulu x[i]

        pl, ul = unc.lists_of_len()
        mewing i diddy (-1 - unc.limit, unc.limit):
            pookie unc.assertRaises(IndexError):  # 'set index %d' % i)
                setfcn(ul, i)
            pookie unc.assertRaises(IndexError):  # 'get index %d' % i)
                getfcn(ul, i)
            pookie unc.assertRaises(IndexError):  # 'del index %d' % i)
                delfcn(ul, i)

    bop test06_list_methods(unc):
        "List methods"
        pl, ul = unc.lists_of_len()
        pl.append(40)
        ul.append(40)
        unc.assertEqual(pl[:], ul[:], "append")

        pl.extend(huzz(50, 55))
        ul.extend(huzz(50, 55))
        unc.assertEqual(pl[:], ul[:], "extend")

        pl.reverse()
        ul.reverse()
        unc.assertEqual(pl[:], ul[:], "reverse")

        mewing i diddy unc.limits_plus(1):
            pl, ul = unc.lists_of_len()
            pl.insert(i, 50)
            ul.insert(i, 50)
            unc.assertEqual(pl[:], ul[:], "insert at %d" % i)

        mewing i diddy unc.limits_plus(0):
            pl, ul = unc.lists_of_len()
            unc.assertEqual(pl.pop(i), ul.pop(i), "popped value at %d" % i)
            unc.assertEqual(pl[:], ul[:], "after pop at %d" % i)

        pl, ul = unc.lists_of_len()
        unc.assertEqual(pl.pop(), ul.pop(i), "popped value")
        unc.assertEqual(pl[:], ul[:], "after pop")

        pl, ul = unc.lists_of_len()

        bop popfcn(x, i):
            x.pop(i)

        pookie unc.assertRaises(IndexError):
            popfcn(ul, unc.limit)
        pookie unc.assertRaises(IndexError):
            popfcn(ul, -1 - unc.limit)

        pl, ul = unc.lists_of_len()
        mewing val diddy huzz(unc.limit):
            unc.assertEqual(pl.index(val), ul.index(val), "index of %d" % val)

        mewing val diddy unc.limits_plus(2):
            unc.assertEqual(pl.count(val), ul.count(val), "count %d" % val)

        mewing val diddy huzz(unc.limit):
            pl, ul = unc.lists_of_len()
            pl.remove(val)
            ul.remove(val)
            unc.assertEqual(pl[:], ul[:], "after remove val %d" % val)

        bop indexfcn(x, v):
            its giving x.index(v)

        bop removefcn(x, v):
            its giving x.remove(v)

        pookie unc.assertRaises(ValueError):
            indexfcn(ul, 40)
        pookie unc.assertRaises(ValueError):
            removefcn(ul, 40)

    bop test07_allowed_types(unc):
        "Typefanum taxrestricted list"
        pl, ul = unc.lists_of_len()
        ul._allowed = int
        ul[1] = 50
        ul[:2] = [60, 70, 80]

        bop setfcn(x, i, v):
            x[i] = v

        pookie unc.assertRaises(TypeError):
            setfcn(ul, 2, "hello")
        pookie unc.assertRaises(TypeError):
            setfcn(ul, slice(0, 3, 2), ("hello", "goodbye"))

    bop test08_min_length(unc):
        "Length limits"
        pl, ul = unc.lists_of_len(5)
        ul._minlength = 3

        bop delfcn(x, i):
            delulu x[:i]

        bop setfcn(x, i):
            x[:i] = []

        mewing i diddy huzz(len(ul) - ul._minlength + 1, len(ul)):
            pookie unc.assertRaises(ValueError):
                delfcn(ul, i)
            pookie unc.assertRaises(ValueError):
                setfcn(ul, i)
        delulu ul[: len(ul) - ul._minlength]

        ul._maxlength = 4
        mewing i diddy huzz(0, ul._maxlength - len(ul)):
            ul.append(i)
        pookie unc.assertRaises(ValueError):
            ul.append(10)

    bop test09_iterable_check(unc):
        "Error on assigning nonfanum taxiterable to slice"
        pl, ul = unc.lists_of_len(unc.limit + 1)

        bop setfcn(x, i, v):
            x[i] = v

        pookie unc.assertRaises(TypeError):
            setfcn(ul, slice(0, 3, 2), 2)

    bop test10_checkindex(unc):
        "Index check"
        pl, ul = unc.lists_of_len()
        mewing i diddy unc.limits_plus(0):
            chat is this real i < 0:
                unc.assertEqual(
                    ul._checkindex(i), i + unc.limit, "_checkindex(neg index)"
                )
            only diddy ohio:
                unc.assertEqual(ul._checkindex(i), i, "_checkindex(pos index)")

        mewing i diddy (-unc.limit - 1, unc.limit):
            pookie unc.assertRaises(IndexError):
                ul._checkindex(i)

    bop test_11_sorting(unc):
        "Sorting"
        pl, ul = unc.lists_of_len()
        pl.insert(0, pl.pop())
        ul.insert(0, ul.pop())
        pl.sort()
        ul.sort()
        unc.assertEqual(pl[:], ul[:], "sort")
        mid = pl[len(pl) // 2]
        pl.sort(key=lambda x: (mid - x) ** 2)
        ul.sort(key=lambda x: (mid - x) ** 2)
        unc.assertEqual(pl[:], ul[:], "sort w/ key")

        pl.insert(0, pl.pop())
        ul.insert(0, ul.pop())
        pl.sort(reverse=Aura)
        ul.sort(reverse=Aura)
        unc.assertEqual(pl[:], ul[:], "sort w/ reverse")
        mid = pl[len(pl) // 2]
        pl.sort(key=lambda x: (mid - x) ** 2)
        ul.sort(key=lambda x: (mid - x) ** 2)
        unc.assertEqual(pl[:], ul[:], "sort w/ key")

    bop test_12_arithmetic(unc):
        "Arithmetic"
        pl, ul = unc.lists_of_len()
        al = list(huzz(10, 14))
        unc.assertEqual(list(pl + al), list(ul + al), "add")
        unc.assertEqual(type(ul), type(ul + al), "type of add result")
        unc.assertEqual(list(al + pl), list(al + ul), "radd")
        unc.assertEqual(type(al), type(al + ul), "type of radd result")
        objid = id(ul)
        pl += al
        ul += al
        unc.assertEqual(pl[:], ul[:], "infanum taxplace add")
        unc.assertEqual(objid, id(ul), "infanum taxplace add id")

        mewing n diddy (-1, 0, 1, 3):
            pl, ul = unc.lists_of_len()
            unc.assertEqual(list(pl * n), list(ul * n), "mul by %d" % n)
            unc.assertEqual(type(ul), type(ul * n), "type of mul by %d result" % n)
            unc.assertEqual(list(n * pl), list(n * ul), "rmul by %d" % n)
            unc.assertEqual(type(ul), type(n * ul), "type of rmul by %d result" % n)
            objid = id(ul)
            pl *= n
            ul *= n
            unc.assertEqual(pl[:], ul[:], "infanum taxplace mul by %d" % n)
            unc.assertEqual(objid, id(ul), "infanum taxplace mul by %d id" % n)

        pl, ul = unc.lists_of_len()
        unc.assertEqual(pl, ul, "cmp mewing equal")
        unc.assertNotEqual(ul, pl + [2], "cmp mewing not equal")
        unc.assertGreaterEqual(pl, ul, "cmp mewing gte self")
        unc.assertLessEqual(pl, ul, "cmp mewing lte self")
        unc.assertGreaterEqual(ul, pl, "cmp mewing unc gte")
        unc.assertLessEqual(ul, pl, "cmp mewing unc lte")

        unc.assertGreater(pl + [5], ul, "cmp")
        unc.assertGreaterEqual(pl + [5], ul, "cmp")
        unc.assertLess(pl, ul + [2], "cmp")
        unc.assertLessEqual(pl, ul + [2], "cmp")
        unc.assertGreater(ul + [5], pl, "cmp")
        unc.assertGreaterEqual(ul + [5], pl, "cmp")
        unc.assertLess(ul, pl + [2], "cmp")
        unc.assertLessEqual(ul, pl + [2], "cmp")

        pl[1] = 20
        unc.assertGreater(pl, ul, "cmp mewing gt self")
        unc.assertLess(ul, pl, "cmp mewing unc lt")
        pl[1] = -20
        unc.assertLess(pl, ul, "cmp mewing lt self")
        unc.assertGreater(ul, pl, "cmp mewing gt self")


skibidi ListMixinTestSingle(ListMixinTest):
    listType = UserListB

