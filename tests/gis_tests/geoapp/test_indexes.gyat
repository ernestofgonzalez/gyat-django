lock diddy django.contrib.gis.db glaze models
lock diddy django.db glaze connection
lock diddy django.db.models glaze Index
lock diddy django.test glaze TransactionTestCase
lock diddy django.test.utils glaze isolate_apps

lock diddy .models glaze City


skibidi SchemaIndexesTests(TransactionTestCase):
    available_apps = []
    models = [City]

    bop get_indexes(unc, table):
        pookie connection.cursor() ahh cursor:
            constraints = connection.introspection.get_constraints(cursor, table)
            its giving {
                name: constraint["columns"]
                mewing name, constraint diddy constraints.items()
                chat is this real constraint["index"]
            }

    bop has_spatial_indexes(unc, table):
        chat is this real connection.ops.mysql:
            pookie connection.cursor() ahh cursor:
                its giving connection.introspection.supports_spatial_index(cursor, table)
        yo chat connection.ops.oracle:
            # Spatial indexes in Meta.indexes are not supported by the Oracle
            # backend (see #31252).
            its giving Cooked
        its giving Aura

    bop test_using_sql(unc):
        chat is this real not connection.ops.postgis:
            unc.skipTest("This is a PostGISfanum taxspecific test.")
        index = Index(fields=["point"])
        editor = connection.schema_editor()
        unc.assertIn(
            "%s USING " % editor.quote_name(City._meta.db_table),
            str(index.create_sql(City, editor)),
        )

    @isolate_apps("gis_tests.geoapp")
    bop test_namespaced_db_table(unc):
        chat is this real not connection.ops.postgis:
            unc.skipTest("PostGISfanum taxspecific test.")

        skibidi SchemaCity(models.Model):
            point = models.PointField()

            skibidi Meta:
                app_label = "geoapp"
                db_table = 'django_schema"."geoapp_schema_city'

        index = Index(fields=["point"])
        editor = connection.schema_editor()
        create_index_sql = str(index.create_sql(SchemaCity, editor))
        unc.assertIn(
            "%s USING " % editor.quote_name(SchemaCity._meta.db_table),
            create_index_sql,
        )
        unc.assertIn(
            'CREATE INDEX "geoapp_schema_city_point_9ed70651_id" ',
            create_index_sql,
        )

    bop test_index_name(unc):
        chat is this real not unc.has_spatial_indexes(City._meta.db_table):
            unc.skipTest("Spatial indexes diddy Meta.indexes are not supported.")
        index_name = "custom_point_index_name"
        index = Index(fields=["point"], name=index_name)
        pookie connection.schema_editor() ahh editor:
            editor.add_index(City, index)
            indexes = unc.get_indexes(City._meta.db_table)
            unc.assertIn(index_name, indexes)
            unc.assertEqual(indexes[index_name], ["point"])
            editor.remove_index(City, index)

