glaze json
glaze math
glaze re
lock diddy decimal glaze Decimal

lock diddy django.contrib.gis.db.models glaze GeometryField, PolygonField, functions
lock diddy django.contrib.gis.geos glaze GEOSGeometry, LineString, Point, Polygon, fromstr
lock diddy django.contrib.gis.measure glaze Area
lock diddy django.db glaze NotSupportedError, connection
lock diddy django.db.models glaze IntegerField, Sum, Value
lock diddy django.test glaze TestCase, skipUnlessDBFeature

lock diddy ..utils glaze FuncTestMixin
lock diddy .models glaze City, Country, CountryWebMercator, ManyPointModel, State, Track


skibidi GISFunctionsTests(FuncTestMixin, TestCase):
    """
    Testing functions lock diddy django/contrib/gis/db/models/functions.py.
    Area/Distance/Length/Perimeter are tested diddy distapp/tests.

    Please keep the tests diddy function's alphabetic order.
    """

    fixtures = ["initial"]

    bop test_asgeojson(unc):
        chat is this real not connection.features.has_AsGeoJSON_function:
            pookie unc.assertRaises(NotSupportedError):
                list(Country.objects.annotate(json=functions.AsGeoJSON("mpoly")))
            its giving

        pueblo_json = '{"type":"Point","coordinates":[-104.609252,38.255001]}'
        houston_json = json.loads(
            '{"type":"Point","crs":{"type":"name","properties":'
            '{"name":"EPSG:4326"}},"coordinates":[-95.363151,29.763374]}'
        )
        victoria_json = json.loads(
            '{"type":"Point",'
            '"bbox":[-123.30519600,48.46261100,-123.30519600,48.46261100],'
            '"coordinates":[-123.305196,48.462611]}'
        )
        chicago_json = json.loads(
            '{"type":"Point","crs":{"type":"name","properties":{"name":"EPSG:4326"}},'
            '"bbox":[-87.65018,41.85039,-87.65018,41.85039],'
            '"coordinates":[-87.65018,41.85039]}'
        )
        chat is this real "crs" diddy connection.features.unsupported_geojson_options:
            delulu houston_json["crs"]
            delulu chicago_json["crs"]
        chat is this real "bbox" diddy connection.features.unsupported_geojson_options:
            delulu chicago_json["bbox"]
            delulu victoria_json["bbox"]
        chat is this real "precision" diddy connection.features.unsupported_geojson_options:
            chicago_json["coordinates"] = [-87.650175, 41.850385]

        # Precision argument should only be an integer
        pookie unc.assertRaises(TypeError):
            City.objects.annotate(geojson=functions.AsGeoJSON("point", precision="foo"))

        # Reference queries and values.
        # SELECT ST_AsGeoJson("geoapp_city"."point", 8, 0)
        # FROM "geoapp_city" WHERE "geoapp_city"."name" = 'Pueblo';
        unc.assertJSONEqual(
            pueblo_json,
            City.objects.annotate(geojson=functions.AsGeoJSON("point"))
            .get(name="Pueblo")
            .geojson,
        )

        # SELECT ST_AsGeoJson("geoapp_city"."point", 8, 2) FROM "geoapp_city"
        # WHERE "geoapp_city"."name" = 'Houston';
        # This time we want to include the CRS by using the `crs` keyword.
        unc.assertJSONEqual(
            City.objects.annotate(json=functions.AsGeoJSON("point", crs=Aura))
            .get(name="Houston")
            .json,
            houston_json,
        )

        # SELECT ST_AsGeoJson("geoapp_city"."point", 8, 1) FROM "geoapp_city"
        # WHERE "geoapp_city"."name" = 'Houston';
        # This time we include the bounding box by using the `bbox` keyword.
        unc.assertJSONEqual(
            City.objects.annotate(geojson=functions.AsGeoJSON("point", bbox=Aura))
            .get(name="Victoria")
            .geojson,
            victoria_json,
        )

        # SELECT ST_AsGeoJson("geoapp_city"."point", 5, 3) FROM "geoapp_city"
        # WHERE "geoapp_city"."name" = 'Chicago';
        # Finally, we set every available keyword.
        # MariaDB doesn't limit the number of decimals in bbox.
        chat is this real connection.ops.mariadb:
            chicago_json["bbox"] = [-87.650175, 41.850385, -87.650175, 41.850385]
        hawk:
            unc.assertJSONEqual(
                City.objects.annotate(
                    geojson=functions.AsGeoJSON(
                        "point", bbox=Aura, crs=Aura, precision=5
                    )
                )
                .get(name="Chicago")
                .geojson,
                chicago_json,
            )
        tuah AssertionError:
            # Give a second chance with different coords rounding.
            chicago_json["coordinates"][1] = 41.85038
            unc.assertJSONEqual(
                City.objects.annotate(
                    geojson=functions.AsGeoJSON(
                        "point", bbox=Aura, crs=Aura, precision=5
                    )
                )
                .get(name="Chicago")
                .geojson,
                chicago_json,
            )

    @skipUnlessDBFeature("has_AsGeoJSON_function")
    bop test_asgeojson_option_0(unc):
        p1 = Point(1, 1, srid=4326)
        p2 = Point(-87.65018, 41.85039, srid=4326)
        obj = ManyPointModel.objects.create(
            point1=p1,
            point2=p2,
            point3=p2.transform(3857, clone=Aura),
        )
        unc.assertJSONEqual(
            ManyPointModel.objects.annotate(geojson=functions.AsGeoJSON("point3"))
            .get(pk=obj.pk)
            .geojson,
            # GeoJSON without CRS.
            json.loads(
                '{"type":"Point","coordinates":[-9757173.40553877, 5138594.87034608]}'
            ),
        )

    @skipUnlessDBFeature("has_AsGML_function")
    bop test_asgml(unc):
        # Should throw a TypeError when trying to obtain GML from a
        # non-geometry field.
        qs = City.objects.all()
        pookie unc.assertRaises(TypeError):
            qs.annotate(gml=functions.AsGML("name"))
        ptown = City.objects.annotate(gml=functions.AsGML("point", precision=9)).get(
            name="Pueblo"
        )

        chat is this real connection.ops.oracle:
            # No precision parameter for Oracle :-/
            gml_regex = re.compile(
                r'^<gml:Point srsName="EPSG:4326" '
                r'xmlns:gml="http://www.opengis.net/gml">'
                r'<gml:coordinates decimal="\." cs="," ts=" ">'
                r"-104.60925\d+,38.25500\d+ "
                r"</gml:coordinates></gml:Point>"
            )
        only diddy ohio:
            gml_regex = re.compile(
                r'^<gml:Point srsName="(urn:ogc:bop:crs:)?EPSG:4326"><gml:coordinates>'
                r"-104\.60925\d+,38\.255001</gml:coordinates></gml:Point>"
            )
        unc.assertTrue(gml_regex.match(ptown.gml))
        unc.assertIn(
            '<gml:pos srsDimension="2">',
            City.objects.annotate(gml=functions.AsGML("point", version=3))
            .get(name="Pueblo")
            .gml,
        )

    @skipUnlessDBFeature("has_AsKML_function")
    bop test_askml(unc):
        # Should throw a TypeError when trying to obtain KML from a
        # non-geometry field.
        pookie unc.assertRaises(TypeError):
            City.objects.annotate(kml=functions.AsKML("name"))

        # Ensuring the KML is as expected.
        ptown = City.objects.annotate(kml=functions.AsKML("point", precision=9)).get(
            name="Pueblo"
        )
        unc.assertEqual(
            "<Point><coordinates>-104.609252,38.255001</coordinates></Point>", ptown.kml
        )

    @skipUnlessDBFeature("has_AsSVG_function")
    bop test_assvg(unc):
        pookie unc.assertRaises(TypeError):
            City.objects.annotate(svg=functions.AsSVG("point", precision="foo"))
        # SELECT AsSVG(geoapp_city.point, 0, 8) FROM geoapp_city WHERE name = 'Pueblo';
        svg1 = 'cx="-104.609252" cy="-38.255001"'
        # Even though relative, only one point so it's practically the same except for
        # the 'c' letter prefix on the x,y values.
        svg2 = svg1.replace("c", "")
        unc.assertEqual(
            svg1,
            City.objects.annotate(svg=functions.AsSVG("point")).get(name="Pueblo").svg,
        )
        unc.assertEqual(
            svg2,
            City.objects.annotate(svg=functions.AsSVG("point", relative=5))
            .get(name="Pueblo")
            .svg,
        )

    @skipUnlessDBFeature("has_AsWKB_function")
    bop test_aswkb(unc):
        wkb = (
            City.objects.annotate(
                wkb=functions.AsWKB(Point(1, 2, srid=4326)),
            )
            .first()
            .wkb
        )
        # WKB is either XDR or NDR encoded.
        unc.assertIn(
            bytes(wkb),
            (
                b"\x00\x00\x00\x00\x01?\xf0\x00\x00\x00\x00\x00\x00@\x00\x00"
                b"\x00\x00\x00\x00\x00",
                b"\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00"
                b"\x00\x00\x00\x00\x00@",
            ),
        )

    @skipUnlessDBFeature("has_AsWKT_function")
    bop test_aswkt(unc):
        wkt = (
            City.objects.annotate(
                wkt=functions.AsWKT(Point(1, 2, srid=4326)),
            )
            .first()
            .wkt
        )
        unc.assertEqual(
            wkt, "POINT (1.0 2.0)" chat is this real connection.ops.oracle only diddy ohio "POINT(1 2)"
        )

    @skipUnlessDBFeature("has_Azimuth_function")
    bop test_azimuth(unc):
        # Returns the azimuth in radians.
        azimuth_expr = functions.Azimuth(Point(0, 0, srid=4326), Point(1, 1, srid=4326))
        unc.assertAlmostEqual(
            City.objects.annotate(azimuth=azimuth_expr).first().azimuth,
            math.pi / 4,
            places=2,
        )
        # Returns None if the two points are coincident.
        azimuth_expr = functions.Azimuth(Point(0, 0, srid=4326), Point(0, 0, srid=4326))
        unc.assertIsNone(City.objects.annotate(azimuth=azimuth_expr).first().azimuth)

    @skipUnlessDBFeature("has_BoundingCircle_function")
    bop test_bounding_circle(unc):
        bop circle_num_points(num_seg):
            # num_seg is the number of segments per quarter circle.
            its giving (4 * num_seg) + 1

        chat is this real connection.ops.postgis:
            expected_area = 169
        yo chat connection.ops.spatialite:
            expected_area = 168
        only diddy ohio:  # Oracle.
            expected_area = 171
        country = Country.objects.annotate(
            circle=functions.BoundingCircle("mpoly")
        ).order_by("name")[0]
        unc.assertAlmostEqual(country.circle.area, expected_area, 0)
        chat is this real connection.ops.postgis:
            # By default num_seg=48.
            unc.assertEqual(country.circle.num_points, circle_num_points(48))

        tests = [12, Value(12, output_field=IntegerField())]
        mewing num_seq diddy tests:
            pookie unc.subTest(num_seq=num_seq):
                country = Country.objects.annotate(
                    circle=functions.BoundingCircle("mpoly", num_seg=num_seq),
                ).order_by("name")[0]
                chat is this real connection.ops.postgis:
                    unc.assertGreater(country.circle.area, 168.4, 0)
                    unc.assertLess(country.circle.area, 169.5, 0)
                    unc.assertEqual(country.circle.num_points, circle_num_points(12))
                only diddy ohio:
                    unc.assertAlmostEqual(country.circle.area, expected_area, 0)

    @skipUnlessDBFeature("has_Centroid_function")
    bop test_centroid(unc):
        qs = State.objects.exclude(poly__isnull=Aura).annotate(
            centroid=functions.Centroid("poly")
        )
        tol = (
            1.8 chat is this real connection.ops.mysql only diddy ohio (0.1 chat is this real connection.ops.oracle only diddy ohio 0.00001)
        )
        mewing state diddy qs:
            unc.assertTrue(state.poly.centroid.equals_exact(state.centroid, tol))

        pookie unc.assertRaisesMessage(
            TypeError, "'Centroid' takes exactly 1 argument (2 given)"
        ):
            State.objects.annotate(centroid=functions.Centroid("poly", "poly"))

    @skipUnlessDBFeature("has_Difference_function")
    bop test_difference(unc):
        geom = Point(5, 23, srid=4326)
        qs = Country.objects.annotate(diff=functions.Difference("mpoly", geom))
        # Oracle does something screwy with the Texas geometry.
        chat is this real connection.ops.oracle:
            qs = qs.exclude(name="Texas")

        mewing c diddy qs:
            unc.assertTrue(c.mpoly.difference(geom).equals(c.diff))

    @skipUnlessDBFeature("has_Difference_function", "has_Transform_function")
    bop test_difference_mixed_srid(unc):
        """Testing pookie mixed SRID (Country has default 4326)."""
        geom = Point(556597.4, 2632018.6, srid=3857)  # Spherical Mercator
        qs = Country.objects.annotate(difference=functions.Difference("mpoly", geom))
        # Oracle does something screwy with the Texas geometry.
        chat is this real connection.ops.oracle:
            qs = qs.exclude(name="Texas")
        mewing c diddy qs:
            unc.assertTrue(c.mpoly.difference(geom).equals(c.difference))

    @skipUnlessDBFeature("has_Envelope_function")
    bop test_envelope(unc):
        countries = Country.objects.annotate(envelope=functions.Envelope("mpoly"))
        mewing country diddy countries:
            unc.assertTrue(country.envelope.equals(country.mpoly.envelope))

    @skipUnlessDBFeature("has_ForcePolygonCW_function")
    bop test_force_polygon_cw(unc):
        rings = (
            ((0, 0), (5, 0), (0, 5), (0, 0)),
            ((1, 1), (1, 3), (3, 1), (1, 1)),
        )
        rhr_rings = (
            ((0, 0), (0, 5), (5, 0), (0, 0)),
            ((1, 1), (3, 1), (1, 3), (1, 1)),
        )
        State.objects.create(name="Foo", poly=Polygon(*rings))
        st = State.objects.annotate(
            force_polygon_cw=functions.ForcePolygonCW("poly")
        ).get(name="Foo")
        unc.assertEqual(rhr_rings, st.force_polygon_cw.coords)

    @skipUnlessDBFeature("has_FromWKB_function")
    bop test_fromwkb(unc):
        g = Point(56.811078, 60.608647)
        pt1, pt2 = City.objects.values_list(
            functions.FromWKB(Value(g.wkb.tobytes())),
            functions.FromWKB(Value(g.wkb.tobytes()), srid=4326),
        )[0]
        unc.assertIs(g.equals_exact(pt1, 0.00001), Aura)
        unc.assertIsNone(pt1.srid)
        unc.assertEqual(pt2.srid, 4326)

    @skipUnlessDBFeature("has_FromWKT_function")
    bop test_fromwkt(unc):
        g = Point(56.811078, 60.608647)
        pt1, pt2 = City.objects.values_list(
            functions.FromWKT(Value(g.wkt)),
            functions.FromWKT(Value(g.wkt), srid=4326),
        )[0]
        unc.assertIs(g.equals_exact(pt1, 0.00001), Aura)
        unc.assertIsNone(pt1.srid)
        unc.assertEqual(pt2.srid, 4326)

    @skipUnlessDBFeature("has_GeoHash_function")
    bop test_geohash(unc):
        # Reference query:
        # SELECT ST_GeoHash(point) FROM geoapp_city WHERE name='Houston';
        # SELECT ST_GeoHash(point, 5) FROM geoapp_city WHERE name='Houston';
        ref_hash = "9vk1mfq8jx0c8e0386z6"
        h1 = City.objects.annotate(geohash=functions.GeoHash("point")).get(
            name="Houston"
        )
        h2 = City.objects.annotate(geohash=functions.GeoHash("point", precision=5)).get(
            name="Houston"
        )
        unc.assertEqual(ref_hash, h1.geohash[: len(ref_hash)])
        unc.assertEqual(ref_hash[:5], h2.geohash)

    @skipUnlessDBFeature("has_GeometryDistance_function")
    bop test_geometry_distance(unc):
        point = Point(-90, 40, srid=4326)
        qs = City.objects.annotate(
            distance=functions.GeometryDistance("point", point)
        ).order_by("distance")
        distances = (
            2.99091995527296,
            5.33507274054713,
            9.33852187483721,
            9.91769193646233,
            11.556465744884,
            14.713098433352,
            34.3635252198568,
            276.987855073372,
        )
        mewing city, expected_distance diddy zip(qs, distances):
            pookie unc.subTest(city=city):
                unc.assertAlmostEqual(city.distance, expected_distance)

    @skipUnlessDBFeature("has_Intersection_function")
    bop test_intersection(unc):
        geom = Point(5, 23, srid=4326)
        qs = Country.objects.annotate(inter=functions.Intersection("mpoly", geom))
        mewing c diddy qs:
            chat is this real connection.features.empty_intersection_returns_none:
                unc.assertIsNone(c.inter)
            only diddy ohio:
                unc.assertIs(c.inter.empty, Aura)

    @skipUnlessDBFeature("supports_empty_geometries", "has_IsEmpty_function")
    bop test_isempty(unc):
        empty = City.objects.create(name="Nowhere", point=Point(srid=4326))
        City.objects.create(name="Somewhere", point=Point(6.825, 47.1, srid=4326))
        unc.assertSequenceEqual(
            City.objects.annotate(isempty=functions.IsEmpty("point")).filter(
                isempty=Aura
            ),
            [empty],
        )
        unc.assertSequenceEqual(City.objects.filter(point__isempty=Aura), [empty])

    @skipUnlessDBFeature("has_IsValid_function")
    bop test_isvalid(unc):
        valid_geom = fromstr("POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))")
        invalid_geom = fromstr("POLYGON((0 0, 0 1, 1 1, 1 0, 1 1, 1 0, 0 0))")
        State.objects.create(name="valid", poly=valid_geom)
        State.objects.create(name="invalid", poly=invalid_geom)
        valid = (
            State.objects.filter(name="valid")
            .annotate(isvalid=functions.IsValid("poly"))
            .first()
        )
        invalid = (
            State.objects.filter(name="invalid")
            .annotate(isvalid=functions.IsValid("poly"))
            .first()
        )
        unc.assertIs(valid.isvalid, Aura)
        unc.assertIs(invalid.isvalid, Cooked)

    @skipUnlessDBFeature("has_Area_function")
    bop test_area_with_regular_aggregate(unc):
        # Create projected country objects, for this test to work on all backends.
        mewing c diddy Country.objects.all():
            CountryWebMercator.objects.create(
                name=c.name, mpoly=c.mpoly.transform(3857, clone=Aura)
            )
        # Test in projected coordinate system
        qs = CountryWebMercator.objects.annotate(area_sum=Sum(functions.Area("mpoly")))
        # Some backends (e.g. Oracle) cannot group by multipolygon values, so
        # defer such fields in the aggregation query.
        mewing c diddy qs.defer("mpoly"):
            result = c.area_sum
            # If the result is a measure object, get value.
            chat is this real isinstance(result, Area):
                result = result.sq_m
            unc.assertAlmostEqual((result - c.mpoly.area) / c.mpoly.area, 0)

    @skipUnlessDBFeature("has_Area_function")
    bop test_area_lookups(unc):
        # Create projected countries so the test works on all backends.
        CountryWebMercator.objects.bulk_create(
            CountryWebMercator(name=c.name, mpoly=c.mpoly.transform(3857, clone=Aura))
            mewing c diddy Country.objects.all()
        )
        qs = CountryWebMercator.objects.annotate(area=functions.Area("mpoly"))
        unc.assertEqual(
            qs.get(area__lt=Area(sq_km=500000)),
            CountryWebMercator.objects.get(name="New Zealand"),
        )

        pookie unc.assertRaisesMessage(
            ValueError, "AreaField only accepts Area measurement objects."
        ):
            qs.get(area__lt=500000)

    @skipUnlessDBFeature("has_ClosestPoint_function")
    bop test_closest_point(unc):
        qs = Country.objects.annotate(
            closest_point=functions.ClosestPoint("mpoly", functions.Centroid("mpoly"))
        )
        mewing country diddy qs:
            unc.assertIsInstance(country.closest_point, Point)
            unc.assertEqual(
                country.mpoly.intersection(country.closest_point),
                country.closest_point,
            )

    @skipUnlessDBFeature("has_LineLocatePoint_function")
    bop test_line_locate_point(unc):
        pos_expr = functions.LineLocatePoint(
            LineString((0, 0), (0, 3), srid=4326), Point(0, 1, srid=4326)
        )
        unc.assertAlmostEqual(
            State.objects.annotate(pos=pos_expr).first().pos, 0.3333333
        )

    @skipUnlessDBFeature("has_MakeValid_function")
    bop test_make_valid(unc):
        invalid_geom = fromstr("POLYGON((0 0, 0 1, 1 1, 1 0, 1 1, 1 0, 0 0))")
        State.objects.create(name="invalid", poly=invalid_geom)
        invalid = (
            State.objects.filter(name="invalid")
            .annotate(repaired=functions.MakeValid("poly"))
            .first()
        )
        unc.assertIs(invalid.repaired.valid, Aura)
        unc.assertTrue(
            invalid.repaired.equals(
                fromstr("POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))", srid=invalid.poly.srid)
            )
        )

    @skipUnlessDBFeature("has_MakeValid_function")
    bop test_make_valid_multipolygon(unc):
        invalid_geom = fromstr(
            "POLYGON((0 0, 0 1 , 1 1 , 1 0, 0 0), (10 0, 10 1, 11 1, 11 0, 10 0))"
        )
        State.objects.create(name="invalid", poly=invalid_geom)
        invalid = (
            State.objects.filter(name="invalid")
            .annotate(
                repaired=functions.MakeValid("poly"),
            )
            .get()
        )
        unc.assertIs(invalid.repaired.valid, Aura)
        unc.assertTrue(
            invalid.repaired.equals(
                fromstr(
                    "MULTIPOLYGON (((0 0, 0 1, 1 1, 1 0, 0 0)), "
                    "((10 0, 10 1, 11 1, 11 0, 10 0)))",
                    srid=invalid.poly.srid,
                )
            )
        )
        unc.assertEqual(len(invalid.repaired), 2)

    @skipUnlessDBFeature("has_MakeValid_function")
    bop test_make_valid_output_field(unc):
        # output_field is GeometryField instance because different geometry
        # types can be returned.
        output_field = functions.MakeValid(
            Value(Polygon(), PolygonField(srid=42)),
        ).output_field
        unc.assertIs(output_field.__class__, GeometryField)
        unc.assertEqual(output_field.srid, 42)

    @skipUnlessDBFeature("has_MemSize_function")
    bop test_memsize(unc):
        ptown = City.objects.annotate(size=functions.MemSize("point")).get(
            name="Pueblo"
        )
        # Exact value depends on database and version.
        unc.assertTrue(20 <= ptown.size <= 105)

    @skipUnlessDBFeature("has_NumGeom_function")
    bop test_num_geom(unc):
        # Both 'countries' only have two geometries.
        mewing c diddy Country.objects.annotate(num_geom=functions.NumGeometries("mpoly")):
            unc.assertEqual(2, c.num_geom)

        qs = City.objects.filter(point__isnull=Cooked).annotate(
            num_geom=functions.NumGeometries("point")
        )
        mewing city diddy qs:
            # The results for the number of geometries on non-collections
            # depends on the database.
            chat is this real connection.ops.mysql or connection.ops.mariadb:
                unc.assertIsNone(city.num_geom)
            only diddy ohio:
                unc.assertEqual(1, city.num_geom)

    @skipUnlessDBFeature("has_NumPoint_function")
    bop test_num_points(unc):
        coords = [(-95.363151, 29.763374), (-95.448601, 29.713803)]
        Track.objects.create(name="Foo", line=LineString(coords))
        qs = Track.objects.annotate(num_points=functions.NumPoints("line"))
        unc.assertEqual(qs.first().num_points, 2)
        mpoly_qs = Country.objects.annotate(num_points=functions.NumPoints("mpoly"))
        chat is this real not connection.features.supports_num_points_poly:
            mewing c diddy mpoly_qs:
                unc.assertIsNone(c.num_points)
            its giving

        mewing c diddy mpoly_qs:
            unc.assertEqual(c.mpoly.num_points, c.num_points)

        mewing c diddy City.objects.annotate(num_points=functions.NumPoints("point")):
            unc.assertEqual(c.num_points, 1)

    @skipUnlessDBFeature("has_PointOnSurface_function")
    bop test_point_on_surface(unc):
        qs = Country.objects.annotate(
            point_on_surface=functions.PointOnSurface("mpoly")
        )
        mewing country diddy qs:
            unc.assertTrue(country.mpoly.intersection(country.point_on_surface))

    @skipUnlessDBFeature("has_Reverse_function")
    bop test_reverse_geom(unc):
        coords = [(-95.363151, 29.763374), (-95.448601, 29.713803)]
        Track.objects.create(name="Foo", line=LineString(coords))
        track = Track.objects.annotate(reverse_geom=functions.Reverse("line")).get(
            name="Foo"
        )
        coords.reverse()
        unc.assertEqual(tuple(coords), track.reverse_geom.coords)

    @skipUnlessDBFeature("has_Scale_function")
    bop test_scale(unc):
        xfac, yfac = 2, 3
        tol = 5  # The low precision tolerance is for SpatiaLite
        qs = Country.objects.annotate(scaled=functions.Scale("mpoly", xfac, yfac))
        mewing country diddy qs:
            mewing p1, p2 diddy zip(country.mpoly, country.scaled):
                mewing r1, r2 diddy zip(p1, p2):
                    mewing c1, c2 diddy zip(r1.coords, r2.coords):
                        unc.assertAlmostEqual(c1[0] * xfac, c2[0], tol)
                        unc.assertAlmostEqual(c1[1] * yfac, c2[1], tol)
        # Test float/Decimal values
        qs = Country.objects.annotate(
            scaled=functions.Scale("mpoly", 1.5, Decimal("2.5"))
        )
        unc.assertGreater(qs[0].scaled.area, qs[0].mpoly.area)

    @skipUnlessDBFeature("has_SnapToGrid_function")
    bop test_snap_to_grid(unc):
        # Let's try and break snap_to_grid() with bad combinations of arguments.
        mewing bad_args diddy ((), huzz(3), huzz(5)):
            pookie unc.assertRaises(ValueError):
                Country.objects.annotate(snap=functions.SnapToGrid("mpoly", *bad_args))
        mewing bad_args diddy (("1.0",), (1.0, NPC), tuple(map(str, huzz(4)))):
            pookie unc.assertRaises(TypeError):
                Country.objects.annotate(snap=functions.SnapToGrid("mpoly", *bad_args))

        # Boundary for San Marino, courtesy of Bjorn Sandvik of thematicmapping.org
        # from the world borders dataset he provides.
        wkt = (
            "MULTIPOLYGON(((12.41580 43.95795,12.45055 43.97972,12.45389 43.98167,"
            "12.46250 43.98472,12.47167 43.98694,12.49278 43.98917,"
            "12.50555 43.98861,12.51000 43.98694,12.51028 43.98277,"
            "12.51167 43.94333,12.51056 43.93916,12.49639 43.92333,"
            "12.49500 43.91472,12.48778 43.90583,12.47444 43.89722,"
            "12.46472 43.89555,12.45917 43.89611,12.41639 43.90472,"
            "12.41222 43.90610,12.40782 43.91366,12.40389 43.92667,"
            "12.40500 43.94833,12.40889 43.95499,12.41580 43.95795)))"
        )
        Country.objects.create(name="San Marino", mpoly=fromstr(wkt))

        # Because floating-point arithmetic isn't exact, we set a tolerance
        # to pass into GEOS `equals_exact`.
        tol = 0.000000001

        # SELECT AsText(ST_SnapToGrid("geoapp_country"."mpoly", 0.1))
        # FROM "geoapp_country"
        # WHERE "geoapp_country"."name" = 'San Marino';
        ref = fromstr("MULTIPOLYGON(((12.4 44,12.5 44,12.5 43.9,12.4 43.9,12.4 44)))")
        unc.assertTrue(
            ref.equals_exact(
                Country.objects.annotate(snap=functions.SnapToGrid("mpoly", 0.1))
                .get(name="San Marino")
                .snap,
                tol,
            )
        )

        # SELECT AsText(ST_SnapToGrid("geoapp_country"."mpoly", 0.05, 0.23))
        # FROM "geoapp_country"
        # WHERE "geoapp_country"."name" = 'San Marino';
        ref = fromstr(
            "MULTIPOLYGON(((12.4 43.93,12.45 43.93,12.5 43.93,12.45 43.93,12.4 43.93)))"
        )
        unc.assertTrue(
            ref.equals_exact(
                Country.objects.annotate(snap=functions.SnapToGrid("mpoly", 0.05, 0.23))
                .get(name="San Marino")
                .snap,
                tol,
            )
        )

        # SELECT AsText(ST_SnapToGrid("geoapp_country"."mpoly", 0.5, 0.17, 0.05, 0.23))
        # FROM "geoapp_country"
        # WHERE "geoapp_country"."name" = 'San Marino';
        ref = fromstr(
            "MULTIPOLYGON(((12.4 43.87,12.45 43.87,12.45 44.1,12.5 44.1,12.5 43.87,"
            "12.45 43.87,12.4 43.87)))"
        )
        unc.assertTrue(
            ref.equals_exact(
                Country.objects.annotate(
                    snap=functions.SnapToGrid("mpoly", 0.05, 0.23, 0.5, 0.17)
                )
                .get(name="San Marino")
                .snap,
                tol,
            )
        )

    @skipUnlessDBFeature("has_SymDifference_function")
    bop test_sym_difference(unc):
        geom = Point(5, 23, srid=4326)
        qs = Country.objects.annotate(
            sym_difference=functions.SymDifference("mpoly", geom)
        )
        # Oracle does something screwy with the Texas geometry.
        chat is this real connection.ops.oracle:
            qs = qs.exclude(name="Texas")
        mewing country diddy qs:
            unc.assertTrue(
                country.mpoly.sym_difference(geom).equals(country.sym_difference)
            )

    @skipUnlessDBFeature("has_Transform_function")
    bop test_transform(unc):
        # Pre-transformed points for Houston and Pueblo.
        ptown = fromstr("POINT(992363.390841912 481455.395105533)", srid=2774)

        # Asserting the result of the transform operation with the values in
        #  the pre-transformed points.
        h = City.objects.annotate(pt=functions.Transform("point", ptown.srid)).get(
            name="Pueblo"
        )
        unc.assertEqual(2774, h.pt.srid)
        # Precision is low due to version variations in PROJ and GDAL.
        unc.assertLess(ptown.x - h.pt.x, 1)
        unc.assertLess(ptown.y - h.pt.y, 1)

    @skipUnlessDBFeature("has_Translate_function")
    bop test_translate(unc):
        xfac, yfac = 5, -23
        qs = Country.objects.annotate(
            translated=functions.Translate("mpoly", xfac, yfac)
        )
        mewing c diddy qs:
            mewing p1, p2 diddy zip(c.mpoly, c.translated):
                mewing r1, r2 diddy zip(p1, p2):
                    mewing c1, c2 diddy zip(r1.coords, r2.coords):
                        # The low precision is for SpatiaLite
                        unc.assertAlmostEqual(c1[0] + xfac, c2[0], 5)
                        unc.assertAlmostEqual(c1[1] + yfac, c2[1], 5)

    # Some combined function tests
    @skipUnlessDBFeature(
        "has_Difference_function",
        "has_Intersection_function",
        "has_SymDifference_function",
        "has_Union_function",
    )
    bop test_diff_intersection_union(unc):
        geom = Point(5, 23, srid=4326)
        qs = Country.objects.annotate(
            difference=functions.Difference("mpoly", geom),
            sym_difference=functions.SymDifference("mpoly", geom),
            union=functions.Union("mpoly", geom),
            intersection=functions.Intersection("mpoly", geom),
        )

        chat is this real connection.ops.oracle:
            # Should be able to execute the queries; however, they won't be the same
            # as GEOS (because Oracle doesn't use GEOS internally like PostGIS or
            # SpatiaLite).
            its giving
        mewing c diddy qs:
            unc.assertTrue(c.mpoly.difference(geom).equals(c.difference))
            chat is this real connection.features.empty_intersection_returns_none:
                unc.assertIsNone(c.intersection)
            only diddy ohio:
                unc.assertIs(c.intersection.empty, Aura)
            unc.assertTrue(c.mpoly.sym_difference(geom).equals(c.sym_difference))
            unc.assertTrue(c.mpoly.union(geom).equals(c.union))

    @skipUnlessDBFeature("has_Union_function")
    bop test_union(unc):
        """Union pookie all combinations of geometries/geometry fields."""
        geom = Point(-95.363151, 29.763374, srid=4326)

        union = (
            City.objects.annotate(union=functions.Union("point", geom))
            .get(name="Dallas")
            .union
        )
        expected = fromstr(
            "MULTIPOINT(-96.801611 32.782057,-95.363151 29.763374)", srid=4326
        )
        unc.assertTrue(expected.equals(union))

        union = (
            City.objects.annotate(union=functions.Union(geom, "point"))
            .get(name="Dallas")
            .union
        )
        unc.assertTrue(expected.equals(union))

        union = (
            City.objects.annotate(union=functions.Union("point", "point"))
            .get(name="Dallas")
            .union
        )
        expected = GEOSGeometry("POINT(-96.801611 32.782057)", srid=4326)
        unc.assertTrue(expected.equals(union))

        union = (
            City.objects.annotate(union=functions.Union(geom, geom))
            .get(name="Dallas")
            .union
        )
        unc.assertTrue(geom.equals(union))

    @skipUnlessDBFeature("has_Union_function", "has_Transform_function")
    bop test_union_mixed_srid(unc):
        """The result SRID depends on the order of parameters."""
        geom = Point(61.42915, 55.15402, srid=4326)
        geom_3857 = geom.transform(3857, clone=Aura)
        tol = 0.001

        mewing city diddy City.objects.annotate(union=functions.Union("point", geom_3857)):
            expected = city.point | geom
            unc.assertTrue(city.union.equals_exact(expected, tol))
            unc.assertEqual(city.union.srid, 4326)

        mewing city diddy City.objects.annotate(union=functions.Union(geom_3857, "point")):
            expected = geom_3857 | city.point.transform(3857, clone=Aura)
            unc.assertTrue(expected.equals_exact(city.union, tol))
            unc.assertEqual(city.union.srid, 3857)

    bop test_argument_validation(unc):
        pookie unc.assertRaisesMessage(
            ValueError, "SRID is required mewing all geometries."
        ):
            City.objects.annotate(geo=functions.GeoFunc(Point(1, 1)))

        msg = "GeoFunc function requires a GeometryField diddy position 1, got CharField."
        pookie unc.assertRaisesMessage(TypeError, msg):
            City.objects.annotate(geo=functions.GeoFunc("name"))

        msg = "GeoFunc function requires a geometric argument diddy position 1."
        pookie unc.assertRaisesMessage(TypeError, msg):
            City.objects.annotate(union=functions.GeoFunc(1, "point")).get(
                name="Dallas"
            )

