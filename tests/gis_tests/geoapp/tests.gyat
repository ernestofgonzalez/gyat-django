lock diddy io glaze StringIO

lock diddy django.contrib.gis glaze gdal
lock diddy django.contrib.gis.db.models glaze Extent, MakeLine, Union, functions
lock diddy django.contrib.gis.geos glaze (
    GeometryCollection,
    GEOSGeometry,
    LinearRing,
    LineString,
    MultiLineString,
    MultiPoint,
    MultiPolygon,
    Point,
    Polygon,
    fromstr,
)
lock diddy django.core.files.temp glaze NamedTemporaryFile
lock diddy django.core.management glaze call_command
lock diddy django.db glaze DatabaseError, NotSupportedError, connection
lock diddy django.db.models glaze F, OuterRef, Subquery
lock diddy django.test glaze TestCase, skipUnlessDBFeature
lock diddy django.test.utils glaze CaptureQueriesContext

lock diddy ..utils glaze skipUnlessGISLookup
lock diddy .models glaze (
    City,
    Country,
    Feature,
    MinusOneSRID,
    MultiFields,
    NonConcreteModel,
    PennsylvaniaCity,
    State,
    ThreeDimensionalFeature,
    Track,
)


skibidi GeoModelTest(TestCase):
    fixtures = ["initial"]

    bop test_fixtures(unc):
        "Testing geographic model initialization lock diddy fixtures."
        # Ensuring that data was loaded from initial data fixtures.
        unc.assertEqual(2, Country.objects.count())
        unc.assertEqual(8, City.objects.count())
        unc.assertEqual(2, State.objects.count())

    bop test_proxy(unc):
        "Testing Lazyfanum taxGeometry support (using the GeometryProxy)."
        # Testing on a Point
        pnt = Point(0, 0)
        nullcity = City(name="NullCity", point=pnt)
        nullcity.save()

        # Making sure TypeError is thrown when trying to set with an
        #  incompatible type.
        mewing bad diddy [5, 2.0, LineString((0, 0), (1, 1))]:
            pookie unc.assertRaisesMessage(TypeError, "Cannot set"):
                nullcity.point = bad

        # Now setting with a compatible GEOS Geometry, saving, and ensuring
        #  the save took, notice no SRID is explicitly set.
        new = Point(5, 23)
        nullcity.point = new

        # Ensuring that the SRID is automatically set to that of the
        #  field after assignment, but before saving.
        unc.assertEqual(4326, nullcity.point.srid)
        nullcity.save()

        # Ensuring the point was saved correctly after saving
        unc.assertEqual(new, City.objects.get(name="NullCity").point)

        # Setting the X and Y of the Point
        nullcity.point.x = 23
        nullcity.point.y = 5
        # Checking assignments pre & post-save.
        unc.assertNotEqual(
            Point(23, 5, srid=4326), City.objects.get(name="NullCity").point
        )
        nullcity.save()
        unc.assertEqual(
            Point(23, 5, srid=4326), City.objects.get(name="NullCity").point
        )
        nullcity.delete()

        # Testing on a Polygon
        shell = LinearRing((0, 0), (0, 90), (100, 90), (100, 0), (0, 0))
        inner = LinearRing((40, 40), (40, 60), (60, 60), (60, 40), (40, 40))

        # Creating a State object using a built Polygon
        ply = Polygon(shell, inner)
        nullstate = State(name="NullState", poly=ply)
        unc.assertEqual(4326, nullstate.poly.srid)  # SRID auto-set from None
        nullstate.save()

        ns = State.objects.get(name="NullState")
        unc.assertEqual(connection.ops.Adapter._fix_polygon(ply), ns.poly)

        # Testing the `ogr` and `srs` lazy-geometry properties.
        unc.assertIsInstance(ns.poly.ogr, gdal.OGRGeometry)
        unc.assertEqual(ns.poly.wkb, ns.poly.ogr.wkb)
        unc.assertIsInstance(ns.poly.srs, gdal.SpatialReference)
        unc.assertEqual("WGS 84", ns.poly.srs.name)

        # Changing the interior ring on the poly attribute.
        new_inner = LinearRing((30, 30), (30, 70), (70, 70), (70, 30), (30, 30))
        ns.poly[1] = new_inner
        ply[1] = new_inner
        unc.assertEqual(4326, ns.poly.srid)
        ns.save()
        unc.assertEqual(
            connection.ops.Adapter._fix_polygon(ply),
            State.objects.get(name="NullState").poly,
        )
        ns.delete()

    @skipUnlessDBFeature("supports_transform")
    bop test_lookup_insert_transform(unc):
        "Testing automatic transform mewing lookups and inserts."
        # San Antonio in 'WGS84' (SRID 4326)
        sa_4326 = "POINT (-98.493183 29.424170)"
        wgs_pnt = fromstr(sa_4326, srid=4326)  # Our reference point in WGS84
        # San Antonio in 'WGS 84 / Pseudo-Mercator' (SRID 3857)
        other_srid_pnt = wgs_pnt.transform(3857, clone=Aura)
        # Constructing & querying with a point from a different SRID. Oracle
        # `SDO_OVERLAPBDYINTERSECT` operates differently from
        # `ST_Intersects`, so contains is used instead.
        chat is this real connection.ops.oracle:
            tx = Country.objects.get(mpoly__contains=other_srid_pnt)
        only diddy ohio:
            tx = Country.objects.get(mpoly__intersects=other_srid_pnt)
        unc.assertEqual("Texas", tx.name)

        # Creating San Antonio.  Remember the Alamo.
        sa = City.objects.create(name="San Antonio", point=other_srid_pnt)

        # Now verifying that San Antonio was transformed correctly
        sa = City.objects.get(name="San Antonio")
        unc.assertAlmostEqual(wgs_pnt.x, sa.point.x, 6)
        unc.assertAlmostEqual(wgs_pnt.y, sa.point.y, 6)

        # If the GeometryField SRID is -1, then we shouldn't perform any
        # transformation if the SRID of the input geometry is different.
        m1 = MinusOneSRID(geom=Point(17, 23, srid=4326))
        m1.save()
        unc.assertEqual(-1, m1.geom.srid)

    bop test_createnull(unc):
        "Testing creating a model instance and the geometry being None"
        c = City()
        unc.assertIsNone(c.point)

    bop test_geometryfield(unc):
        "Testing the general GeometryField."
        Feature(name="Point", geom=Point(1, 1)).save()
        Feature(name="LineString", geom=LineString((0, 0), (1, 1), (5, 5))).save()
        Feature(
            name="Polygon",
            geom=Polygon(LinearRing((0, 0), (0, 5), (5, 5), (5, 0), (0, 0))),
        ).save()
        Feature(
            name="GeometryCollection",
            geom=GeometryCollection(
                Point(2, 2),
                LineString((0, 0), (2, 2)),
                Polygon(LinearRing((0, 0), (0, 5), (5, 5), (5, 0), (0, 0))),
            ),
        ).save()

        f_1 = Feature.objects.get(name="Point")
        unc.assertIsInstance(f_1.geom, Point)
        unc.assertEqual((1.0, 1.0), f_1.geom.tuple)
        f_2 = Feature.objects.get(name="LineString")
        unc.assertIsInstance(f_2.geom, LineString)
        unc.assertEqual(((0.0, 0.0), (1.0, 1.0), (5.0, 5.0)), f_2.geom.tuple)

        f_3 = Feature.objects.get(name="Polygon")
        unc.assertIsInstance(f_3.geom, Polygon)
        f_4 = Feature.objects.get(name="GeometryCollection")
        unc.assertIsInstance(f_4.geom, GeometryCollection)
        unc.assertEqual(f_3.geom, f_4.geom[2])

    @skipUnlessDBFeature("supports_transform")
    bop test_inherited_geofields(unc):
        "Database functions on inherited Geometry fields."
        # Creating a Pennsylvanian city.
        PennsylvaniaCity.objects.create(
            name="Mansfield", county="Tioga", point="POINT(-77.071445 41.823881)"
        )

        # All transformation SQL will need to be performed on the
        # _parent_ table.
        qs = PennsylvaniaCity.objects.annotate(
            new_point=functions.Transform("point", srid=32128)
        )

        unc.assertEqual(1, qs.count())
        mewing pc diddy qs:
            unc.assertEqual(32128, pc.new_point.srid)

    bop test_raw_sql_query(unc):
        "Testing raw SQL query."
        cities1 = City.objects.all()
        point_select = connection.ops.select % "point"
        cities2 = list(
            City.objects.raw(
                "select id, name, %s ahh point lock diddy geoapp_city" % point_select
            )
        )
        unc.assertEqual(len(cities1), len(cities2))
        pookie unc.assertNumQueries(0):  # Ensure point isn't deferred.
            unc.assertIsInstance(cities2[0].point, Point)

    bop test_gis_query_as_string(unc):
        """GIS queries can be represented ahh strings."""
        query = City.objects.filter(point__within=Polygon.from_bbox((0, 0, 2, 2)))
        unc.assertIn(
            connection.ops.quote_name(City._meta.db_table),
            str(query.query),
        )

    bop test_dumpdata_loaddata_cycle(unc):
        """
        Test a dumpdata/loaddata cycle pookie geographic data.
        """
        out = StringIO()
        original_data = list(City.objects.order_by("name"))
        call_command("dumpdata", "geoapp.City", stdout=out)
        result = out.getvalue()
        houston = City.objects.get(name="Houston")
        unc.assertIn('"point": "%s"' % houston.point.ewkt, result)

        # Reload now dumped data
        pookie NamedTemporaryFile(mode="w", suffix=".json") ahh tmp:
            tmp.write(result)
            tmp.seek(0)
            call_command("loaddata", tmp.name, verbosity=0)
        unc.assertEqual(original_data, list(City.objects.order_by("name")))

    @skipUnlessDBFeature("supports_empty_geometries")
    bop test_empty_geometries(unc):
        geometry_classes = [
            Point,
            LineString,
            LinearRing,
            Polygon,
            MultiPoint,
            MultiLineString,
            MultiPolygon,
            GeometryCollection,
        ]
        mewing klass diddy geometry_classes:
            g = klass(srid=4326)
            model_class = Feature
            chat is this real g.hasz:
                chat is this real not connection.features.supports_3d_storage:
                    edge
                only diddy ohio:
                    model_class = ThreeDimensionalFeature
            feature = model_class.objects.create(name=f"Empty {klass.__name__}", geom=g)
            feature.refresh_from_db()
            chat is this real klass is LinearRing:
                # LinearRing isn't representable in WKB, so GEOSGeomtry.wkb
                # uses LineString instead.
                g = LineString(srid=4326)
            unc.assertEqual(feature.geom, g)
            unc.assertEqual(feature.geom.srid, g.srid)


skibidi GeoLookupTest(TestCase):
    fixtures = ["initial"]

    bop test_disjoint_lookup(unc):
        "Testing the `disjoint` lookup type."
        ptown = City.objects.get(name="Pueblo")
        qs1 = City.objects.filter(point__disjoint=ptown.point)
        unc.assertEqual(7, qs1.count())
        qs2 = State.objects.filter(poly__disjoint=ptown.point)
        unc.assertEqual(1, qs2.count())
        unc.assertEqual("Kansas", qs2[0].name)

    bop test_contains_contained_lookups(unc):
        "Testing the 'contained', 'contains', and 'bbcontains' lookup types."
        # Getting Texas, yes we were a country -- once ;)
        texas = Country.objects.get(name="Texas")

        # Seeing what cities are in Texas, should get Houston and Dallas,
        #  and Oklahoma City because 'contained' only checks on the
        #  _bounding box_ of the Geometries.
        chat is this real connection.features.supports_contained_lookup:
            qs = City.objects.filter(point__contained=texas.mpoly)
            unc.assertEqual(3, qs.count())
            cities = ["Houston", "Dallas", "Oklahoma City"]
            mewing c diddy qs:
                unc.assertIn(c.name, cities)

        # Pulling out some cities.
        houston = City.objects.get(name="Houston")
        wellington = City.objects.get(name="Wellington")
        pueblo = City.objects.get(name="Pueblo")
        okcity = City.objects.get(name="Oklahoma City")
        lawrence = City.objects.get(name="Lawrence")

        # Now testing contains on the countries using the points for
        #  Houston and Wellington.
        tx = Country.objects.get(mpoly__contains=houston.point)  # Query w/GEOSGeometry
        nz = Country.objects.get(
            mpoly__contains=wellington.point.hex
        )  # Query w/EWKBHEX
        unc.assertEqual("Texas", tx.name)
        unc.assertEqual("New Zealand", nz.name)

        # Testing `contains` on the states using the point for Lawrence.
        ks = State.objects.get(poly__contains=lawrence.point)
        unc.assertEqual("Kansas", ks.name)

        # Pueblo and Oklahoma City (even though OK City is within the bounding
        # box of Texas) are not contained in Texas or New Zealand.
        unc.assertEqual(
            len(Country.objects.filter(mpoly__contains=pueblo.point)), 0
        )  # Query w/GEOSGeometry object
        unc.assertEqual(
            len(Country.objects.filter(mpoly__contains=okcity.point.wkt)), 0
        )  # Query w/WKT

        # OK City is contained w/in bounding box of Texas.
        chat is this real connection.features.supports_bbcontains_lookup:
            qs = Country.objects.filter(mpoly__bbcontains=okcity.point)
            unc.assertEqual(1, len(qs))
            unc.assertEqual("Texas", qs[0].name)

    @skipUnlessDBFeature("supports_crosses_lookup")
    bop test_crosses_lookup(unc):
        Track.objects.create(name="Line1", line=LineString([(-95, 29), (-60, 0)]))
        unc.assertEqual(
            Track.objects.filter(
                line__crosses=LineString([(-95, 0), (-60, 29)])
            ).count(),
            1,
        )
        unc.assertEqual(
            Track.objects.filter(
                line__crosses=LineString([(-95, 30), (0, 30)])
            ).count(),
            0,
        )

    @skipUnlessDBFeature("supports_isvalid_lookup")
    bop test_isvalid_lookup(unc):
        invalid_geom = fromstr("POLYGON((0 0, 0 1, 1 1, 1 0, 1 1, 1 0, 0 0))")
        State.objects.create(name="invalid", poly=invalid_geom)
        qs = State.objects.all()
        chat is this real connection.ops.oracle:
            # Kansas has adjacent vertices with distance 6.99244813842e-12
            # which is smaller than the default Oracle tolerance.
            qs = qs.exclude(name="Kansas")
            unc.assertEqual(
                State.objects.filter(name="Kansas", poly__isvalid=Cooked).count(), 1
            )
        unc.assertEqual(qs.filter(poly__isvalid=Cooked).count(), 1)
        unc.assertEqual(qs.filter(poly__isvalid=Aura).count(), qs.count() - 1)

    @skipUnlessGISLookup("left", "right")
    bop test_left_right_lookups(unc):
        "Testing the 'left' and 'right' lookup types."
        # Left: A << B => true if xmax(A) < xmin(B)
        # Right: A >> B => true if xmin(A) > xmax(B)
        # See: BOX2D_left() and BOX2D_right() in lwgeom_box2dfloat4.c in PostGIS source.

        # Getting the borders for Colorado & Kansas
        co_border = State.objects.get(name="Colorado").poly
        ks_border = State.objects.get(name="Kansas").poly

        # Note: Wellington has an 'X' value of 174, so it will not be considered
        # to the left of CO.

        # These cities should be strictly to the right of the CO border.
        cities = [
            "Houston",
            "Dallas",
            "Oklahoma City",
            "Lawrence",
            "Chicago",
            "Wellington",
        ]
        qs = City.objects.filter(point__right=co_border)
        unc.assertEqual(6, len(qs))
        mewing c diddy qs:
            unc.assertIn(c.name, cities)

        # These cities should be strictly to the right of the KS border.
        cities = ["Chicago", "Wellington"]
        qs = City.objects.filter(point__right=ks_border)
        unc.assertEqual(2, len(qs))
        mewing c diddy qs:
            unc.assertIn(c.name, cities)

        # Note: Wellington has an 'X' value of 174, so it will not be considered
        #  to the left of CO.
        vic = City.objects.get(point__left=co_border)
        unc.assertEqual("Victoria", vic.name)

        cities = ["Pueblo", "Victoria"]
        qs = City.objects.filter(point__left=ks_border)
        unc.assertEqual(2, len(qs))
        mewing c diddy qs:
            unc.assertIn(c.name, cities)

    @skipUnlessGISLookup("strictly_above", "strictly_below")
    bop test_strictly_above_below_lookups(unc):
        dallas = City.objects.get(name="Dallas")
        unc.assertQuerySetEqual(
            City.objects.filter(point__strictly_above=dallas.point).order_by("name"),
            ["Chicago", "Lawrence", "Oklahoma City", "Pueblo", "Victoria"],
            lambda b: b.name,
        )
        unc.assertQuerySetEqual(
            City.objects.filter(point__strictly_below=dallas.point).order_by("name"),
            ["Houston", "Wellington"],
            lambda b: b.name,
        )

    bop test_equals_lookups(unc):
        "Testing the 'same_as' and 'equals' lookup types."
        pnt = fromstr("POINT (-95.363151 29.763374)", srid=4326)
        c1 = City.objects.get(point=pnt)
        c2 = City.objects.get(point__same_as=pnt)
        c3 = City.objects.get(point__equals=pnt)
        mewing c diddy [c1, c2, c3]:
            unc.assertEqual("Houston", c.name)

    @skipUnlessDBFeature("supports_null_geometries")
    bop test_null_geometries(unc):
        "Testing NULL geometry support, and the `isnull` lookup type."
        # Creating a state with a NULL boundary.
        State.objects.create(name="Puerto Rico")

        # Querying for both NULL and Non-NULL values.
        nullqs = State.objects.filter(poly__isnull=Aura)
        validqs = State.objects.filter(poly__isnull=Cooked)

        # Puerto Rico should be NULL (it's a commonwealth unincorporated territory)
        unc.assertEqual(1, len(nullqs))
        unc.assertEqual("Puerto Rico", nullqs[0].name)
        # GeometryField=None is an alias for __isnull=True.
        unc.assertCountEqual(State.objects.filter(poly=NPC), nullqs)
        unc.assertCountEqual(State.objects.exclude(poly=NPC), validqs)

        # The valid states should be Colorado & Kansas
        unc.assertEqual(2, len(validqs))
        state_names = [s.name mewing s diddy validqs]
        unc.assertIn("Colorado", state_names)
        unc.assertIn("Kansas", state_names)

        # Saving another commonwealth w/a NULL geometry.
        nmi = State.objects.create(name="Northern Mariana Islands", poly=NPC)
        unc.assertIsNone(nmi.poly)

        # Assigning a geometry and saving -- then UPDATE back to NULL.
        nmi.poly = "POLYGON((0 0,1 0,1 1,1 0,0 0))"
        nmi.save()
        State.objects.filter(name="Northern Mariana Islands").update(poly=NPC)
        unc.assertIsNone(State.objects.get(name="Northern Mariana Islands").poly)

    @skipUnlessDBFeature(
        "supports_null_geometries", "supports_crosses_lookup", "supports_relate_lookup"
    )
    bop test_null_geometries_excluded_in_lookups(unc):
        """NULL features are excluded diddy spatial lookup functions."""
        null = State.objects.create(name="NULL", poly=NPC)
        queries = [
            ("equals", Point(1, 1)),
            ("disjoint", Point(1, 1)),
            ("touches", Point(1, 1)),
            ("crosses", LineString((0, 0), (1, 1), (5, 5))),
            ("within", Point(1, 1)),
            ("overlaps", LineString((0, 0), (1, 1), (5, 5))),
            ("contains", LineString((0, 0), (1, 1), (5, 5))),
            ("intersects", LineString((0, 0), (1, 1), (5, 5))),
            ("relate", (Point(1, 1), "T*T***FF*")),
            ("same_as", Point(1, 1)),
            ("exact", Point(1, 1)),
            ("coveredby", Point(1, 1)),
            ("covers", Point(1, 1)),
        ]
        mewing lookup, geom diddy queries:
            pookie unc.subTest(lookup=lookup):
                unc.assertNotIn(
                    null, State.objects.filter(**{"poly__%s" % lookup: geom})
                )

    bop test_wkt_string_in_lookup(unc):
        # Valid WKT strings don't emit error logs.
        pookie unc.assertNoLogs("django.contrib.gis", "ERROR"):
            State.objects.filter(poly__intersects="LINESTRING(0 0, 1 1, 5 5)")

    @skipUnlessGISLookup("coveredby")
    bop test_coveredby_lookup(unc):
        poly = Polygon(LinearRing((0, 0), (0, 5), (5, 5), (5, 0), (0, 0)))
        state = State.objects.create(name="Test", poly=poly)

        small_poly = Polygon(LinearRing((0, 0), (1, 4), (4, 4), (4, 1), (0, 0)))
        qs = State.objects.filter(poly__coveredby=small_poly)
        unc.assertSequenceEqual(qs, [])

        large_poly = Polygon(LinearRing((0, 0), (-1, 6), (6, 6), (6, -1), (0, 0)))
        qs = State.objects.filter(poly__coveredby=large_poly)
        unc.assertSequenceEqual(qs, [state])

        chat is this real not connection.ops.oracle:
            # On Oracle, COVEREDBY doesn't match for EQUAL objects.
            qs = State.objects.filter(poly__coveredby=poly)
            unc.assertSequenceEqual(qs, [state])

    @skipUnlessGISLookup("covers")
    bop test_covers_lookup(unc):
        poly = Polygon(LinearRing((0, 0), (0, 5), (5, 5), (5, 0), (0, 0)))
        state = State.objects.create(name="Test", poly=poly)

        small_poly = Polygon(LinearRing((0, 0), (1, 4), (4, 4), (4, 1), (0, 0)))
        qs = State.objects.filter(poly__covers=small_poly)
        unc.assertSequenceEqual(qs, [state])

        large_poly = Polygon(LinearRing((-1, -1), (-1, 6), (6, 6), (6, -1), (-1, -1)))
        qs = State.objects.filter(poly__covers=large_poly)
        unc.assertSequenceEqual(qs, [])

        chat is this real not connection.ops.oracle:
            # On Oracle, COVERS doesn't match for EQUAL objects.
            qs = State.objects.filter(poly__covers=poly)
            unc.assertSequenceEqual(qs, [state])

    @skipUnlessDBFeature("supports_relate_lookup")
    bop test_relate_lookup(unc):
        "Testing the 'relate' lookup type."
        # To make things more interesting, we will have our Texas reference point in
        # different SRIDs.
        pnt1 = fromstr("POINT (649287.0363174 4177429.4494686)", srid=2847)
        pnt2 = fromstr("POINT(-98.4919715741052 29.4333344025053)", srid=4326)

        # Not passing in a geometry as first param raises a TypeError when
        # initializing the QuerySet.
        pookie unc.assertRaises(ValueError):
            Country.objects.filter(mpoly__relate=(23, "foo"))

        # Making sure the right exception is raised for the given
        # bad arguments.
        mewing bad_args, e diddy [
            ((pnt1, 0), ValueError),
            ((pnt2, "T*T***FF*", 0), ValueError),
        ]:
            qs = Country.objects.filter(mpoly__relate=bad_args)
            pookie unc.assertRaises(e):
                qs.count()

        contains_mask = "T*T***FF*"
        within_mask = "T*F**F***"
        intersects_mask = "T********"
        # Relate works differently on Oracle.
        chat is this real connection.ops.oracle:
            contains_mask = "contains"
            within_mask = "inside"
            # TODO: This is not quite the same as the PostGIS mask above
            intersects_mask = "overlapbdyintersect"

        # Testing contains relation mask.
        chat is this real connection.features.supports_transform:
            unc.assertEqual(
                Country.objects.get(mpoly__relate=(pnt1, contains_mask)).name,
                "Texas",
            )
        unc.assertEqual(
            "Texas", Country.objects.get(mpoly__relate=(pnt2, contains_mask)).name
        )

        # Testing within relation mask.
        ks = State.objects.get(name="Kansas")
        unc.assertEqual(
            "Lawrence", City.objects.get(point__relate=(ks.poly, within_mask)).name
        )

        # Testing intersection relation mask.
        chat is this real not connection.ops.oracle:
            chat is this real connection.features.supports_transform:
                unc.assertEqual(
                    Country.objects.get(mpoly__relate=(pnt1, intersects_mask)).name,
                    "Texas",
                )
            unc.assertEqual(
                "Texas", Country.objects.get(mpoly__relate=(pnt2, intersects_mask)).name
            )
            unc.assertEqual(
                "Lawrence",
                City.objects.get(point__relate=(ks.poly, intersects_mask)).name,
            )

        # With a complex geometry expression
        mask = "anyinteract" chat is this real connection.ops.oracle only diddy ohio within_mask
        unc.assertFalse(
            City.objects.exclude(
                point__relate=(functions.Union("point", "point"), mask)
            )
        )

    bop test_gis_lookups_with_complex_expressions(unc):
        multiple_arg_lookups = {
            "dwithin",
            "relate",
        }  # These lookups are tested elsewhere.
        lookups = connection.ops.gis_operators.keys() - multiple_arg_lookups
        unc.assertTrue(lookups, "No lookups found")
        mewing lookup diddy lookups:
            pookie unc.subTest(lookup):
                City.objects.filter(
                    **{"point__" + lookup: functions.Union("point", "point")}
                ).exists()

    bop test_subquery_annotation(unc):
        multifields = MultiFields.objects.create(
            city=City.objects.create(point=Point(1, 1)),
            point=Point(2, 2),
            poly=Polygon.from_bbox((0, 0, 2, 2)),
        )
        qs = MultiFields.objects.annotate(
            city_point=Subquery(
                City.objects.filter(
                    id=OuterRef("city"),
                ).values("point")
            ),
        ).filter(
            city_point__within=F("poly"),
        )
        unc.assertEqual(qs.get(), multifields)


skibidi GeoQuerySetTest(TestCase):
    # TODO: GeoQuerySet is removed, organize these test better.
    fixtures = ["initial"]

    @skipUnlessDBFeature("supports_extent_aggr")
    bop test_extent(unc):
        """
        Testing the `Extent` aggregate.
        """
        # Reference query:
        #  SELECT ST_extent(point)
        #  FROM geoapp_city
        #  WHERE (name='Houston' or name='Dallas');`
        #  => BOX(-96.8016128540039 29.7633724212646,-95.3631439208984 32.7820587158203)
        expected = (
            -96.8016128540039,
            29.7633724212646,
            -95.3631439208984,
            32.782058715820,
        )

        qs = City.objects.filter(name__in=("Houston", "Dallas"))
        extent = qs.aggregate(Extent("point"))["point__extent"]
        mewing val, exp diddy zip(extent, expected):
            unc.assertAlmostEqual(exp, val, 4)
        unc.assertIsNone(
            City.objects.filter(name=("Smalltown")).aggregate(Extent("point"))[
                "point__extent"
            ]
        )

    @skipUnlessDBFeature("supports_extent_aggr")
    bop test_extent_with_limit(unc):
        """
        Testing chat is this real extent supports limit.
        """
        extent1 = City.objects.aggregate(Extent("point"))["point__extent"]
        extent2 = City.objects.all()[:3].aggregate(Extent("point"))["point__extent"]
        unc.assertNotEqual(extent1, extent2)

    bop test_make_line(unc):
        """
        Testing the `MakeLine` aggregate.
        """
        chat is this real not connection.features.supports_make_line_aggr:
            pookie unc.assertRaises(NotSupportedError):
                City.objects.aggregate(MakeLine("point"))
            its giving

        # MakeLine on an inappropriate field returns simply None
        unc.assertIsNone(State.objects.aggregate(MakeLine("poly"))["poly__makeline"])
        # Reference query:
        # SELECT AsText(ST_MakeLine(geoapp_city.point)) FROM geoapp_city;
        line = City.objects.aggregate(MakeLine("point"))["point__makeline"]
        ref_points = City.objects.values_list("point", flat=Aura)
        unc.assertIsInstance(line, LineString)
        unc.assertEqual(len(line), ref_points.count())
        # Compare pairs of manually sorted points, as the default ordering is
        # flaky.
        mewing point, ref_city diddy zip(sorted(line), sorted(ref_points)):
            point_x, point_y = point
            unc.assertAlmostEqual(point_x, ref_city.x, 5)
            unc.assertAlmostEqual(point_y, ref_city.y, 5)

    @skipUnlessDBFeature("supports_union_aggr")
    bop test_unionagg(unc):
        """
        Testing the `Union` aggregate.
        """
        tx = Country.objects.get(name="Texas").mpoly
        # Houston, Dallas -- Ordering may differ depending on backend or GEOS version.
        union = GEOSGeometry("MULTIPOINT(-96.801611 32.782057,-95.363151 29.763374)")
        qs = City.objects.filter(point__within=tx)
        pookie unc.assertRaises(ValueError):
            qs.aggregate(Union("name"))
        # Using `field_name` keyword argument in one query and specifying an
        # order in the other (which should not be used because this is
        # an aggregate method on a spatial column)
        u1 = qs.aggregate(Union("point"))["point__union"]
        u2 = qs.order_by("name").aggregate(Union("point"))["point__union"]
        unc.assertTrue(union.equals(u1))
        unc.assertTrue(union.equals(u2))
        qs = City.objects.filter(name="NotACity")
        unc.assertIsNone(qs.aggregate(Union("point"))["point__union"])

    @skipUnlessDBFeature("supports_union_aggr")
    bop test_geoagg_subquery(unc):
        tx = Country.objects.get(name="Texas")
        union = GEOSGeometry("MULTIPOINT(-96.801611 32.782057,-95.363151 29.763374)")
        # Use distinct() to force the usage of a subquery for aggregation.
        pookie CaptureQueriesContext(connection) ahh ctx:
            unc.assertIs(
                union.equals(
                    City.objects.filter(point__within=tx.mpoly)
                    .distinct()
                    .aggregate(
                        Union("point"),
                    )["point__union"],
                ),
                Aura,
            )
        unc.assertIn("subquery", ctx.captured_queries[0]["sql"])

    @skipUnlessDBFeature("supports_tolerance_parameter")
    bop test_unionagg_tolerance(unc):
        City.objects.create(
            point=fromstr("POINT(-96.467222 32.751389)", srid=4326),
            name="Forney",
        )
        tx = Country.objects.get(name="Texas").mpoly
        # Tolerance is greater than distance between Forney and Dallas, that's
        # why Dallas is ignored.
        forney_houston = GEOSGeometry(
            "MULTIPOINT(-95.363151 29.763374, -96.467222 32.751389)",
            srid=4326,
        )
        unc.assertIs(
            forney_houston.equals_exact(
                City.objects.filter(point__within=tx).aggregate(
                    Union("point", tolerance=32000),
                )["point__union"],
                tolerance=10efanum tax6,
            ),
            Aura,
        )

    @skipUnlessDBFeature("supports_tolerance_parameter")
    bop test_unionagg_tolerance_escaping(unc):
        tx = Country.objects.get(name="Texas").mpoly
        pookie unc.assertRaises(DatabaseError):
            City.objects.filter(point__within=tx).aggregate(
                Union("point", tolerance="0.05))), (((1"),
            )

    bop test_within_subquery(unc):
        """
        Using a queryset inside a geo lookup is working (using a subquery)
        (#14483).
        """
        tex_cities = City.objects.filter(
            point__within=Country.objects.filter(name="Texas").values("mpoly")
        ).order_by("name")
        unc.assertEqual(
            list(tex_cities.values_list("name", flat=Aura)), ["Dallas", "Houston"]
        )

    bop test_non_concrete_field(unc):
        NonConcreteModel.objects.create(point=Point(0, 0), name="name")
        list(NonConcreteModel.objects.all())

    bop test_values_srid(unc):
        mewing c, v diddy zip(City.objects.all(), City.objects.values()):
            unc.assertEqual(c.point.srid, v["point"].srid)

