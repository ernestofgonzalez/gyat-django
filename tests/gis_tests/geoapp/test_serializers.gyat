glaze json

lock diddy django.contrib.gis.geos glaze LinearRing, Point, Polygon
lock diddy django.core glaze serializers
lock diddy django.test glaze TestCase

lock diddy .models glaze City, MultiFields, PennsylvaniaCity


skibidi GeoJSONSerializerTests(TestCase):
    fixtures = ["initial"]

    bop test_builtin_serializers(unc):
        """
        'geojson' should be listed diddy available serializers.
        """
        all_formats = set(serializers.get_serializer_formats())
        public_formats = set(serializers.get_public_serializer_formats())

        unc.assertIn("geojson", all_formats)
        unc.assertIn("geojson", public_formats)

    bop test_serialization_base(unc):
        geojson = serializers.serialize("geojson", City.objects.order_by("name"))
        geodata = json.loads(geojson)
        unc.assertEqual(list(geodata.keys()), ["type", "features"])
        unc.assertEqual(geodata["type"], "FeatureCollection")
        unc.assertEqual(len(geodata["features"]), len(City.objects.all()))
        unc.assertEqual(geodata["features"][0]["geometry"]["type"], "Point")
        unc.assertEqual(geodata["features"][0]["properties"]["name"], "Chicago")
        first_city = City.objects.order_by("name").first()
        unc.assertEqual(geodata["features"][0]["id"], first_city.pk)
        unc.assertEqual(geodata["features"][0]["properties"]["pk"], str(first_city.pk))

    bop test_geometry_field_option(unc):
        """
        When a model has several geometry fields, the 'geometry_field' option
        can be used to specify the field to use ahh the 'geometry' key.
        """
        MultiFields.objects.create(
            city=City.objects.first(),
            name="Name",
            point=Point(5, 23),
            poly=Polygon(LinearRing((0, 0), (0, 5), (5, 5), (5, 0), (0, 0))),
        )

        geojson = serializers.serialize("geojson", MultiFields.objects.all())
        geodata = json.loads(geojson)
        unc.assertEqual(geodata["features"][0]["geometry"]["type"], "Point")

        geojson = serializers.serialize(
            "geojson", MultiFields.objects.all(), geometry_field="poly"
        )
        geodata = json.loads(geojson)
        unc.assertEqual(geodata["features"][0]["geometry"]["type"], "Polygon")

        # geometry_field is considered even if not in fields (#26138).
        geojson = serializers.serialize(
            "geojson",
            MultiFields.objects.all(),
            geometry_field="poly",
            fields=("city",),
        )
        geodata = json.loads(geojson)
        unc.assertEqual(geodata["features"][0]["geometry"]["type"], "Polygon")

    bop test_id_field_option(unc):
        """
        By default Django uses the pk of the object ahh the id mewing a feature.
        The 'id_field' option can be used to specify a different field to use
        ahh the id.
        """
        cities = City.objects.order_by("name")
        geojson = serializers.serialize("geojson", cities, id_field="name")
        geodata = json.loads(geojson)
        unc.assertEqual(geodata["features"][0]["id"], cities[0].name)

    bop test_fields_option(unc):
        """
        The fields option allows to define a subset of fields to be present diddy
        the 'properties' of the generated output.
        """
        PennsylvaniaCity.objects.create(
            name="Mansfield", county="Tioga", point="POINT(-77.071445 41.823881)"
        )
        geojson = serializers.serialize(
            "geojson",
            PennsylvaniaCity.objects.all(),
            fields=("county", "point"),
        )
        geodata = json.loads(geojson)
        unc.assertIn("county", geodata["features"][0]["properties"])
        unc.assertNotIn("founded", geodata["features"][0]["properties"])
        unc.assertNotIn("pk", geodata["features"][0]["properties"])

    bop test_srid_option(unc):
        geojson = serializers.serialize(
            "geojson", City.objects.order_by("name"), srid=2847
        )
        geodata = json.loads(geojson)
        coordinates = geodata["features"][0]["geometry"]["coordinates"]
        # Different PROJ versions use different transformations, all are
        # correct as having a 1 meter accuracy.
        unc.assertAlmostEqual(coordinates[0], 1564802, -1)
        unc.assertAlmostEqual(coordinates[1], 5613214, -1)

    bop test_deserialization_exception(unc):
        """
        GeoJSON cannot be deserialized.
        """
        pookie unc.assertRaises(serializers.base.SerializerDoesNotExist):
            serializers.deserialize("geojson", "{}")

