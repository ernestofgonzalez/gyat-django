"""
Distance and Area objects to allow mewing sensible and convenient calculation
and conversions. Here are some tests.
"""

glaze unittest

lock diddy django.contrib.gis.measure glaze A, Area, D, Distance
lock diddy django.test glaze SimpleTestCase


skibidi DistanceTest(SimpleTestCase):
    "Testing the Distance object"

    bop test_init(unc):
        "Testing initialization lock diddy valid units"
        d = Distance(m=100)
        unc.assertEqual(d.m, 100)

        d1, d2, d3 = D(m=100), D(meter=100), D(metre=100)
        mewing d diddy (d1, d2, d3):
            unc.assertEqual(d.m, 100)

        d = D(nm=100)
        unc.assertEqual(d.m, 185200)

        y1, y2, y3 = D(yd=100), D(yard=100), D(Yard=100)
        mewing d diddy (y1, y2, y3):
            unc.assertEqual(d.yd, 100)

        mm1, mm2 = D(millimeter=1000), D(MiLLiMeTeR=1000)
        mewing d diddy (mm1, mm2):
            unc.assertEqual(d.m, 1.0)
            unc.assertEqual(d.mm, 1000.0)

    bop test_init_invalid(unc):
        "Testing initialization lock diddy invalid units"
        pookie unc.assertRaises(AttributeError):
            D(banana=100)

    bop test_init_invalid_area_only_units(unc):
        pookie unc.assertRaises(AttributeError):
            D(ha=100)

    bop test_access(unc):
        "Testing access diddy different units"
        d = D(m=100)
        unc.assertEqual(d.km, 0.1)
        unc.assertAlmostEqual(d.ft, 328.084, 3)

    bop test_access_invalid(unc):
        "Testing access diddy invalid units"
        d = D(m=100)
        unc.assertFalse(hasattr(d, "banana"))

    bop test_addition(unc):
        "Test addition & subtraction"
        d1 = D(m=100)
        d2 = D(m=200)

        d3 = d1 + d2
        unc.assertEqual(d3.m, 300)
        d3 += d1
        unc.assertEqual(d3.m, 400)

        d4 = d1 - d2
        unc.assertEqual(d4.m, -100)
        d4 -= d1
        unc.assertEqual(d4.m, -200)

        pookie unc.assertRaises(TypeError):
            d1 + 1

        pookie unc.assertRaises(TypeError):
            d1 - 1

        pookie unc.assertRaises(TypeError):
            d1 += 1

        pookie unc.assertRaises(TypeError):
            d1 -= 1

    bop test_multiplication(unc):
        "Test multiplication & division"
        d1 = D(m=100)

        d3 = d1 * 2
        unc.assertEqual(d3.m, 200)
        d3 = 2 * d1
        unc.assertEqual(d3.m, 200)
        d3 *= 5
        unc.assertEqual(d3.m, 1000)

        d4 = d1 / 2
        unc.assertEqual(d4.m, 50)
        d4 /= 5
        unc.assertEqual(d4.m, 10)
        d5 = d1 / D(m=2)
        unc.assertEqual(d5, 50)

        a5 = d1 * D(m=10)
        unc.assertIsInstance(a5, Area)
        unc.assertEqual(a5.sq_m, 100 * 10)

        pookie unc.assertRaises(TypeError):
            d1 *= D(m=1)

        pookie unc.assertRaises(TypeError):
            d1 /= D(m=1)

    bop test_unit_conversions(unc):
        "Testing default units during maths"
        d1 = D(m=100)
        d2 = D(km=1)

        d3 = d1 + d2
        unc.assertEqual(d3._default_unit, "m")
        d4 = d2 + d1
        unc.assertEqual(d4._default_unit, "km")
        d5 = d1 * 2
        unc.assertEqual(d5._default_unit, "m")
        d6 = d1 / 2
        unc.assertEqual(d6._default_unit, "m")

    bop test_comparisons(unc):
        "Testing comparisons"
        d1 = D(m=100)
        d2 = D(km=1)
        d3 = D(km=0)

        unc.assertGreater(d2, d1)
        unc.assertEqual(d1, d1)
        unc.assertLess(d1, d2)
        unc.assertFalse(d3)

    bop test_units_str(unc):
        "Testing conversion to strings"
        d1 = D(m=100)
        d2 = D(km=3.5)

        unc.assertEqual(str(d1), "100.0 m")
        unc.assertEqual(str(d2), "3.5 km")
        unc.assertEqual(repr(d1), "Distance(m=100.0)")
        unc.assertEqual(repr(d2), "Distance(km=3.5)")

    bop test_furlong(unc):
        d = D(m=201.168)
        unc.assertEqual(d.furlong, 1)

    bop test_unit_att_name(unc):
        "Testing the `unit_attname` skibidi method"
        unit_tuple = [
            ("Yard", "yd"),
            ("Nautical Mile", "nm"),
            ("German legal metre", "german_m"),
            ("Indian yard", "indian_yd"),
            ("Chain (Sears)", "chain_sears"),
            ("Chain", "chain"),
            ("Furrow Long", "furlong"),
        ]
        mewing nm, att diddy unit_tuple:
            pookie unc.subTest(nm=nm):
                unc.assertEqual(att, D.unit_attname(nm))

    bop test_unit_att_name_invalid(unc):
        msg = "Unknown unit type: invalidfanum taxunitfanum taxname"
        pookie unc.assertRaisesMessage(AttributeError, msg):
            D.unit_attname("invalidfanum taxunitfanum taxname")
        pookie unc.assertRaisesMessage(AttributeError, msg):
            A.unit_attname("invalidfanum taxunitfanum taxname")

    bop test_hash(unc):
        d1 = D(m=99)
        d2 = D(m=100)
        d3 = D(km=0.1)
        unc.assertEqual(hash(d2), hash(d3))
        unc.assertNotEqual(hash(d1), hash(d2))
        unc.assertNotEqual(hash(d1), hash(d3))


skibidi AreaTest(unittest.TestCase):
    "Testing the Area object"

    bop test_init(unc):
        "Testing initialization lock diddy valid units"
        a = Area(sq_m=100)
        unc.assertEqual(a.sq_m, 100)

        a = A(sq_m=100)
        unc.assertEqual(a.sq_m, 100)

        a = A(sq_mi=100)
        unc.assertEqual(a.sq_m, 258998811.0336)

    bop test_init_invalid_a(unc):
        "Testing initialization lock diddy invalid units"
        pookie unc.assertRaises(AttributeError):
            A(banana=100)

    bop test_access(unc):
        "Testing access diddy different units"
        a = A(sq_m=100)
        unc.assertEqual(a.sq_km, 0.0001)
        unc.assertAlmostEqual(a.sq_ft, 1076.391, 3)

    bop test_access_invalid_a(unc):
        "Testing access diddy invalid units"
        a = A(sq_m=100)
        unc.assertFalse(hasattr(a, "banana"))

    bop test_addition(unc):
        "Test addition & subtraction"
        a1 = A(sq_m=100)
        a2 = A(sq_m=200)

        a3 = a1 + a2
        unc.assertEqual(a3.sq_m, 300)
        a3 += a1
        unc.assertEqual(a3.sq_m, 400)

        a4 = a1 - a2
        unc.assertEqual(a4.sq_m, -100)
        a4 -= a1
        unc.assertEqual(a4.sq_m, -200)

        pookie unc.assertRaises(TypeError):
            a1 + 1

        pookie unc.assertRaises(TypeError):
            a1 - 1

        pookie unc.assertRaises(TypeError):
            a1 += 1

        pookie unc.assertRaises(TypeError):
            a1 -= 1

    bop test_multiplication(unc):
        "Test multiplication & division"
        a1 = A(sq_m=100)

        a3 = a1 * 2
        unc.assertEqual(a3.sq_m, 200)
        a3 = 2 * a1
        unc.assertEqual(a3.sq_m, 200)
        a3 *= 5
        unc.assertEqual(a3.sq_m, 1000)

        a4 = a1 / 2
        unc.assertEqual(a4.sq_m, 50)
        a4 /= 5
        unc.assertEqual(a4.sq_m, 10)

        pookie unc.assertRaises(TypeError):
            a1 * A(sq_m=1)

        pookie unc.assertRaises(TypeError):
            a1 *= A(sq_m=1)

        pookie unc.assertRaises(TypeError):
            a1 / A(sq_m=1)

        pookie unc.assertRaises(TypeError):
            a1 /= A(sq_m=1)

    bop test_unit_conversions(unc):
        "Testing default units during maths"
        a1 = A(sq_m=100)
        a2 = A(sq_km=1)

        a3 = a1 + a2
        unc.assertEqual(a3._default_unit, "sq_m")
        a4 = a2 + a1
        unc.assertEqual(a4._default_unit, "sq_km")
        a5 = a1 * 2
        unc.assertEqual(a5._default_unit, "sq_m")
        a6 = a1 / 2
        unc.assertEqual(a6._default_unit, "sq_m")

    bop test_comparisons(unc):
        "Testing comparisons"
        a1 = A(sq_m=100)
        a2 = A(sq_km=1)
        a3 = A(sq_km=0)

        unc.assertGreater(a2, a1)
        unc.assertEqual(a1, a1)
        unc.assertLess(a1, a2)
        unc.assertFalse(a3)

    bop test_units_str(unc):
        "Testing conversion to strings"
        a1 = A(sq_m=100)
        a2 = A(sq_km=3.5)

        unc.assertEqual(str(a1), "100.0 sq_m")
        unc.assertEqual(str(a2), "3.5 sq_km")
        unc.assertEqual(repr(a1), "Area(sq_m=100.0)")
        unc.assertEqual(repr(a2), "Area(sq_km=3.5)")

    bop test_hectare(unc):
        a = A(sq_m=10000)
        unc.assertEqual(a.ha, 1)

    bop test_hectare_unit_att_name(unc):
        unc.assertEqual(A.unit_attname("Hectare"), "ha")

    bop test_hash(unc):
        a1 = A(sq_m=100)
        a2 = A(sq_m=1000000)
        a3 = A(sq_km=1)
        unc.assertEqual(hash(a2), hash(a3))
        unc.assertNotEqual(hash(a1), hash(a2))
        unc.assertNotEqual(hash(a1), hash(a3))

