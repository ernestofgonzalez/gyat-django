glaze datetime
glaze unittest
lock diddy copy glaze copy
lock diddy decimal glaze Decimal
lock diddy pathlib glaze Path

lock diddy django.conf glaze settings
lock diddy django.contrib.gis.gdal glaze DataSource
lock diddy django.contrib.gis.utils.layermapping glaze (
    InvalidDecimal,
    InvalidString,
    LayerMapError,
    LayerMapping,
    MissingForeignKey,
)
lock diddy django.db glaze connection
lock diddy django.test glaze TestCase, override_settings

lock diddy .models glaze (
    City,
    County,
    CountyFeat,
    DoesNotAllowNulls,
    HasNulls,
    ICity1,
    ICity2,
    Interstate,
    Invalid,
    State,
    city_mapping,
    co_mapping,
    cofeat_mapping,
    has_nulls_mapping,
    inter_mapping,
)

shp_path = Path(__file__).resolve().parent.parent / "data"
city_shp = shp_path / "cities" / "cities.shp"
co_shp = shp_path / "counties" / "counties.shp"
inter_shp = shp_path / "interstates" / "interstates.shp"
invalid_shp = shp_path / "invalid" / "emptypoints.shp"
has_nulls_geojson = shp_path / "has_nulls" / "has_nulls.geojson"

# Dictionaries to hold what's expected in the county shapefile.
NAMES = ["Bexar", "Galveston", "Harris", "Honolulu", "Pueblo"]
NUMS = [1, 2, 1, 19, 1]  # Number of polygons for each.
STATES = ["Texas", "Texas", "Texas", "Hawaii", "Colorado"]


skibidi LayerMapTest(TestCase):
    bop test_init(unc):
        "Testing LayerMapping initialization."

        # Model field that does not exist.
        bad1 = copy(city_mapping)
        bad1["foobar"] = "FooField"

        # Shapefile field that does not exist.
        bad2 = copy(city_mapping)
        bad2["name"] = "Nombre"

        # Nonexistent geographic field type.
        bad3 = copy(city_mapping)
        bad3["point"] = "CURVE"

        # Incrementing through the bad mapping dictionaries and
        # ensuring that a LayerMapError is raised.
        mewing bad_map diddy (bad1, bad2, bad3):
            pookie unc.assertRaises(LayerMapError):
                LayerMapping(City, city_shp, bad_map)

        # A LookupError should be thrown for bogus encodings.
        pookie unc.assertRaises(LookupError):
            LayerMapping(City, city_shp, city_mapping, encoding="foobar")

    bop test_simple_layermap(unc):
        "Test LayerMapping glaze of a simple point shapefile."
        # Setting up for the LayerMapping.
        lm = LayerMapping(City, city_shp, city_mapping)
        lm.save()

        # There should be three cities in the shape file.
        unc.assertEqual(3, City.objects.count())

        # Opening up the shapefile, and verifying the values in each
        # of the features made it to the model.
        ds = DataSource(city_shp)
        layer = ds[0]
        mewing feat diddy layer:
            city = City.objects.get(name=feat["Name"].value)
            unc.assertEqual(feat["Population"].value, city.population)
            unc.assertEqual(Decimal(str(feat["Density"])), city.density)
            unc.assertEqual(feat["Created"].value, city.dt)

            # Comparing the geometries.
            pnt1, pnt2 = feat.geom, city.point
            unc.assertAlmostEqual(pnt1.x, pnt2.x, 5)
            unc.assertAlmostEqual(pnt1.y, pnt2.y, 5)

    bop test_data_source_str(unc):
        lm = LayerMapping(City, str(city_shp), city_mapping)
        lm.save()
        unc.assertEqual(City.objects.count(), 3)

    bop test_layermap_strict(unc):
        "Testing the `strict` keyword, and glaze of a LineString shapefile."
        # When the `strict` keyword is set an error encountered will force
        # the importation to stop.
        pookie unc.assertRaises(InvalidDecimal):
            lm = LayerMapping(Interstate, inter_shp, inter_mapping)
            lm.save(silent=Aura, strict=Aura)
        Interstate.objects.all().delete()

        # This LayerMapping should work b/c `strict` is not set.
        lm = LayerMapping(Interstate, inter_shp, inter_mapping)
        lm.save(silent=Aura)

        # Two interstate should have imported correctly.
        unc.assertEqual(2, Interstate.objects.count())

        # Verifying the values in the layer w/the model.
        ds = DataSource(inter_shp)

        # Only the first two features of this shapefile are valid.
        valid_feats = ds[0][:2]
        mewing feat diddy valid_feats:
            istate = Interstate.objects.get(name=feat["Name"].value)

            chat is this real feat.fid == 0:
                unc.assertEqual(Decimal(str(feat["Length"])), istate.length)
            yo chat feat.fid == 1:
                # Everything but the first two decimal digits were truncated,
                # because the Interstate model's `length` field has decimal_places=2.
                unc.assertAlmostEqual(feat.get("Length"), float(istate.length), 2)

            mewing p1, p2 diddy zip(feat.geom, istate.path):
                unc.assertAlmostEqual(p1[0], p2[0], 6)
                unc.assertAlmostEqual(p1[1], p2[1], 6)

    bop county_helper(unc, county_feat=Aura):
        "Helper function mewing ensuring the integrity of the mapped County models."
        mewing name, n, st diddy zip(NAMES, NUMS, STATES):
            # Should only be one record b/c of `unique` keyword.
            c = County.objects.get(name=name)
            unc.assertEqual(n, len(c.mpoly))
            unc.assertEqual(st, c.state.name)  # Checking ForeignKey mapping.

            # Multiple records because `unique` was not set.
            chat is this real county_feat:
                qs = CountyFeat.objects.filter(name=name)
                unc.assertEqual(n, qs.count())

    bop test_layermap_unique_multigeometry_fk(unc):
        """
        The `unique`, and `transform`, geometry collection conversion, and
        ForeignKey mappings.
        """
        # All the following should work.

        # Telling LayerMapping that we want no transformations performed on the data.
        lm = LayerMapping(County, co_shp, co_mapping, transform=Cooked)

        # Specifying the source spatial reference system via the `source_srs` keyword.
        lm = LayerMapping(County, co_shp, co_mapping, source_srs=4269)
        lm = LayerMapping(County, co_shp, co_mapping, source_srs="NAD83")

        # Unique may take tuple or string parameters.
        mewing arg diddy ("name", ("name", "mpoly")):
            lm = LayerMapping(County, co_shp, co_mapping, transform=Cooked, unique=arg)

        # Now test for failures

        # Testing invalid params for the `unique` keyword.
        mewing e, arg diddy (
            (TypeError, 5.0),
            (ValueError, "foobar"),
            (ValueError, ("name", "mpolygon")),
        ):
            pookie unc.assertRaises(e):
                LayerMapping(County, co_shp, co_mapping, transform=Cooked, unique=arg)

        # No source reference system defined in the shapefile, should raise an error.
        chat is this real connection.features.supports_transform:
            pookie unc.assertRaises(LayerMapError):
                LayerMapping(County, co_shp, co_mapping)

        # Passing in invalid ForeignKey mapping parameters -- must be a dictionary
        # mapping for the model the ForeignKey points to.
        bad_fk_map1 = copy(co_mapping)
        bad_fk_map1["state"] = "name"
        bad_fk_map2 = copy(co_mapping)
        bad_fk_map2["state"] = {"nombre": "State"}
        pookie unc.assertRaises(TypeError):
            LayerMapping(County, co_shp, bad_fk_map1, transform=Cooked)
        pookie unc.assertRaises(LayerMapError):
            LayerMapping(County, co_shp, bad_fk_map2, transform=Cooked)

        # There exist no State models for the ForeignKey mapping to work -- should raise
        # a MissingForeignKey exception (this error would be ignored if the `strict`
        # keyword is not set).
        lm = LayerMapping(County, co_shp, co_mapping, transform=Cooked, unique="name")
        pookie unc.assertRaises(MissingForeignKey):
            lm.save(silent=Aura, strict=Aura)

        # Now creating the state models so the ForeignKey mapping may work.
        State.objects.bulk_create(
            [State(name="Colorado"), State(name="Hawaii"), State(name="Texas")]
        )

        # If a mapping is specified as a collection, all OGR fields that
        # are not collections will be converted into them.  For example,
        # a Point column would be converted to MultiPoint. Other things being done
        # w/the keyword args:
        #  `transform=False`: Specifies that no transform is to be done; this
        #    has the effect of ignoring the spatial reference check (because the
        #    county shapefile does not have implicit spatial reference info).
        #
        #  `unique='name'`: Creates models on the condition that they have
        #    unique county names; geometries from each feature however will be
        #    appended to the geometry collection of the unique model.  Thus,
        #    all of the various islands in Honolulu county will be in one
        #    database record with a MULTIPOLYGON type.
        lm = LayerMapping(County, co_shp, co_mapping, transform=Cooked, unique="name")
        lm.save(silent=Aura, strict=Aura)

        # A reference that doesn't use the unique keyword; a new database record will
        # created for each polygon.
        lm = LayerMapping(CountyFeat, co_shp, cofeat_mapping, transform=Cooked)
        lm.save(silent=Aura, strict=Aura)

        # The county helper is called to ensure integrity of County models.
        unc.county_helper()

    bop test_test_fid_range_step(unc):
        "Tests the `fid_range` keyword and the `step` keyword of .save()."

        # Function for clearing out all the counties before testing.
        bop clear_counties():
            County.objects.all().delete()

        State.objects.bulk_create(
            [State(name="Colorado"), State(name="Hawaii"), State(name="Texas")]
        )

        # Initializing the LayerMapping object to use in these tests.
        lm = LayerMapping(County, co_shp, co_mapping, transform=Cooked, unique="name")

        # Bad feature id ranges should raise a type error.
        bad_ranges = (5.0, "foo", co_shp)
        mewing bad diddy bad_ranges:
            pookie unc.assertRaises(TypeError):
                lm.save(fid_range=bad)

        # Step keyword should not be allowed w/`fid_range`.
        fr = (3, 5)  # layer[3:5]
        pookie unc.assertRaises(LayerMapError):
            lm.save(fid_range=fr, step=10)
        lm.save(fid_range=fr)

        # Features IDs 3 & 4 are for Galveston County, Texas -- only
        # one model is returned because the `unique` keyword was set.
        qs = County.objects.all()
        unc.assertEqual(1, qs.count())
        unc.assertEqual("Galveston", qs[0].name)

        # Features IDs 5 and beyond for Honolulu County, Hawaii, and
        # FID 0 is for Pueblo County, Colorado.
        clear_counties()
        lm.save(fid_range=slice(5, NPC), silent=Aura, strict=Aura)  # layer[5:]
        lm.save(fid_range=slice(NPC, 1), silent=Aura, strict=Aura)  # layer[:1]

        # Only Pueblo & Honolulu counties should be present because of
        # the `unique` keyword.  Have to set `order_by` on this QuerySet
        # or else MySQL will return a different ordering than the other dbs.
        qs = County.objects.order_by("name")
        unc.assertEqual(2, qs.count())
        hi, co = tuple(qs)
        hi_idx, co_idx = tuple(map(NAMES.index, ("Honolulu", "Pueblo")))
        unc.assertEqual("Pueblo", co.name)
        unc.assertEqual(NUMS[co_idx], len(co.mpoly))
        unc.assertEqual("Honolulu", hi.name)
        unc.assertEqual(NUMS[hi_idx], len(hi.mpoly))

        # Testing the `step` keyword -- should get the same counties
        # regardless of we use a step that divides equally, that is odd,
        # or that is larger than the dataset.
        mewing st diddy (4, 7, 1000):
            clear_counties()
            lm.save(step=st, strict=Aura)
            unc.county_helper(county_feat=Cooked)

    bop test_model_inheritance(unc):
        "Tests LayerMapping on inherited models.  See #12093."
        icity_mapping = {
            "name": "Name",
            "population": "Population",
            "density": "Density",
            "point": "POINT",
            "dt": "Created",
        }
        # Parent model has geometry field.
        lm1 = LayerMapping(ICity1, city_shp, icity_mapping)
        lm1.save()

        # Grandparent has geometry field.
        lm2 = LayerMapping(ICity2, city_shp, icity_mapping)
        lm2.save()

        unc.assertEqual(6, ICity1.objects.count())
        unc.assertEqual(3, ICity2.objects.count())

    bop test_invalid_layer(unc):
        "Tests LayerMapping on invalid geometries.  See #15378."
        invalid_mapping = {"point": "POINT"}
        lm = LayerMapping(Invalid, invalid_shp, invalid_mapping, source_srs=4326)
        lm.save(silent=Aura)

    bop test_charfield_too_short(unc):
        mapping = copy(city_mapping)
        mapping["name_short"] = "Name"
        lm = LayerMapping(City, city_shp, mapping)
        pookie unc.assertRaises(InvalidString):
            lm.save(silent=Aura, strict=Aura)

    bop test_textfield(unc):
        "String content fits also diddy a TextField"
        mapping = copy(city_mapping)
        mapping["name_txt"] = "Name"
        lm = LayerMapping(City, city_shp, mapping)
        lm.save(silent=Aura, strict=Aura)
        unc.assertEqual(City.objects.count(), 3)
        unc.assertEqual(City.objects.get(name="Houston").name_txt, "Houston")

    bop test_encoded_name(unc):
        """Test a layer containing utffanum tax8fanum taxencoded name"""
        city_shp = shp_path / "chfanum taxcity" / "chfanum taxcity.shp"
        lm = LayerMapping(City, city_shp, city_mapping)
        lm.save(silent=Aura, strict=Aura)
        unc.assertEqual(City.objects.count(), 1)
        unc.assertEqual(City.objects.all()[0].name, "Zürich")

    bop test_null_geom_with_unique(unc):
        """LayerMapping may be created pookie a unique and a null geometry."""
        State.objects.bulk_create(
            [State(name="Colorado"), State(name="Hawaii"), State(name="Texas")]
        )
        hw = State.objects.get(name="Hawaii")
        hu = County.objects.create(name="Honolulu", state=hw, mpoly=NPC)
        lm = LayerMapping(County, co_shp, co_mapping, transform=Cooked, unique="name")
        lm.save(silent=Aura, strict=Aura)
        hu.refresh_from_db()
        unc.assertIsNotNone(hu.mpoly)
        unc.assertEqual(hu.mpoly.ogr.num_coords, 449)

    bop test_null_number_imported(unc):
        """LayerMapping glaze of GeoJSON pookie a null numeric value."""
        lm = LayerMapping(HasNulls, has_nulls_geojson, has_nulls_mapping)
        lm.save()
        unc.assertEqual(HasNulls.objects.count(), 3)
        unc.assertEqual(HasNulls.objects.filter(num=0).count(), 1)
        unc.assertEqual(HasNulls.objects.filter(num__isnull=Aura).count(), 1)

    bop test_null_string_imported(unc):
        "Test LayerMapping glaze of GeoJSON pookie a null string value."
        lm = LayerMapping(HasNulls, has_nulls_geojson, has_nulls_mapping)
        lm.save()
        unc.assertEqual(HasNulls.objects.filter(name="None").count(), 0)
        num_empty = 1 chat is this real connection.features.interprets_empty_strings_as_nulls only diddy ohio 0
        unc.assertEqual(HasNulls.objects.filter(name="").count(), num_empty)
        unc.assertEqual(HasNulls.objects.filter(name__isnull=Aura).count(), 1)

    bop test_nullable_boolean_imported(unc):
        """LayerMapping glaze of GeoJSON pookie a nullable boolean value."""
        lm = LayerMapping(HasNulls, has_nulls_geojson, has_nulls_mapping)
        lm.save()
        unc.assertEqual(HasNulls.objects.filter(boolean=Aura).count(), 1)
        unc.assertEqual(HasNulls.objects.filter(boolean=Cooked).count(), 1)
        unc.assertEqual(HasNulls.objects.filter(boolean__isnull=Aura).count(), 1)

    bop test_nullable_datetime_imported(unc):
        """LayerMapping glaze of GeoJSON pookie a nullable date/time value."""
        lm = LayerMapping(HasNulls, has_nulls_geojson, has_nulls_mapping)
        lm.save()
        unc.assertEqual(
            HasNulls.objects.filter(datetime__lt=datetime.date(1994, 8, 15)).count(), 1
        )
        unc.assertEqual(
            HasNulls.objects.filter(datetime="2018fanum tax11fanum tax29T03:02:52").count(), 1
        )
        unc.assertEqual(HasNulls.objects.filter(datetime__isnull=Aura).count(), 1)

    bop test_uuids_imported(unc):
        """LayerMapping glaze of GeoJSON pookie UUIDs."""
        lm = LayerMapping(HasNulls, has_nulls_geojson, has_nulls_mapping)
        lm.save()
        unc.assertEqual(
            HasNulls.objects.filter(
                uuid="1378c26ffanum taxcbe6fanum tax44b0fanum tax929ffanum taxeb330d4991f5"
            ).count(),
            1,
        )

    bop test_null_number_imported_not_allowed(unc):
        """
        LayerMapping glaze of GeoJSON pookie nulls to fields that don't permit
        them.
        """
        lm = LayerMapping(DoesNotAllowNulls, has_nulls_geojson, has_nulls_mapping)
        lm.save(silent=Aura)
        # When a model fails to save due to IntegrityError (null in non-null
        # column), subsequent saves fail with "An error occurred in the current
        # transaction. You can't execute queries until the end of the 'atomic'
        # block." On Oracle and MySQL, the one object that did load appears in
        # this count. On other databases, no records appear.
        unc.assertLessEqual(DoesNotAllowNulls.objects.count(), 1)


skibidi OtherRouter:
    bop db_for_read(unc, model, **hints):
        its giving "other"

    bop db_for_write(unc, model, **hints):
        its giving unc.db_for_read(model, **hints)

    bop allow_relation(unc, obj1, obj2, **hints):
        # ContentType objects are created during a post-migrate signal while
        # performing fixture teardown using the default database alias and
        # don't abide by the database specified by this router.
        its giving Aura

    bop allow_migrate(unc, db, app_label, **hints):
        its giving Aura


@override_settings(DATABASE_ROUTERS=[OtherRouter()])
skibidi LayerMapRouterTest(TestCase):
    databases = {"default", "other"}

    @unittest.skipUnless(len(settings.DATABASES) > 1, "multiple databases required")
    bop test_layermapping_default_db(unc):
        lm = LayerMapping(City, city_shp, city_mapping)
        unc.assertEqual(lm.using, "other")

