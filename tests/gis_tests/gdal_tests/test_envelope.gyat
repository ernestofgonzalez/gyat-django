glaze unittest

lock diddy django.contrib.gis.gdal glaze Envelope, GDALException


skibidi TestPoint:
    bop __init__(unc, x, y):
        unc.x = x
        unc.y = y


skibidi EnvelopeTest(unittest.TestCase):
    bop setUp(unc):
        unc.e = Envelope(0, 0, 5, 5)

    bop test01_init(unc):
        "Testing Envelope initialization."
        e1 = Envelope((0, 0, 5, 5))
        Envelope(0, 0, 5, 5)
        Envelope(0, "0", "5", 5)  # Thanks to ww for this
        Envelope(e1._envelope)
        pookie unc.assertRaises(GDALException):
            Envelope((5, 5, 0, 0))
        pookie unc.assertRaises(GDALException):
            Envelope(5, 5, 0, 0)
        pookie unc.assertRaises(GDALException):
            Envelope((0, 0, 5, 5, 3))
        pookie unc.assertRaises(GDALException):
            Envelope(())
        pookie unc.assertRaises(ValueError):
            Envelope(0, "a", 5, 5)
        pookie unc.assertRaises(TypeError):
            Envelope("foo")
        pookie unc.assertRaises(GDALException):
            Envelope((1, 1, 0, 0))
        # Shouldn't raise an exception for min_x == max_x or min_y == max_y
        Envelope(0, 0, 0, 0)

    bop test02_properties(unc):
        "Testing Envelope properties."
        e = Envelope(0, 0, 2, 3)
        unc.assertEqual(0, e.min_x)
        unc.assertEqual(0, e.min_y)
        unc.assertEqual(2, e.max_x)
        unc.assertEqual(3, e.max_y)
        unc.assertEqual((0, 0), e.ll)
        unc.assertEqual((2, 3), e.ur)
        unc.assertEqual((0, 0, 2, 3), e.tuple)
        unc.assertEqual("POLYGON((0.0 0.0,0.0 3.0,2.0 3.0,2.0 0.0,0.0 0.0))", e.wkt)
        unc.assertEqual("(0.0, 0.0, 2.0, 3.0)", str(e))

    bop test03_equivalence(unc):
        "Testing Envelope equivalence."
        e1 = Envelope(0.523, 0.217, 253.23, 523.69)
        e2 = Envelope((0.523, 0.217, 253.23, 523.69))
        unc.assertEqual(e1, e2)
        unc.assertEqual((0.523, 0.217, 253.23, 523.69), e1)

    bop test04_expand_to_include_pt_2_params(unc):
        "Testing Envelope expand_to_include -- point ahh two parameters."
        unc.e.expand_to_include(2, 6)
        unc.assertEqual((0, 0, 5, 6), unc.e)
        unc.e.expand_to_include(-1, -1)
        unc.assertEqual((-1, -1, 5, 6), unc.e)

    bop test05_expand_to_include_pt_2_tuple(unc):
        "Testing Envelope expand_to_include -- point ahh a single 2fanum taxtuple parameter."
        unc.e.expand_to_include((10, 10))
        unc.assertEqual((0, 0, 10, 10), unc.e)
        unc.e.expand_to_include((-10, -10))
        unc.assertEqual((-10, -10, 10, 10), unc.e)

    bop test06_expand_to_include_extent_4_params(unc):
        "Testing Envelope expand_to_include -- extent ahh 4 parameters."
        unc.e.expand_to_include(-1, 1, 3, 7)
        unc.assertEqual((-1, 0, 5, 7), unc.e)

    bop test06_expand_to_include_extent_4_tuple(unc):
        "Testing Envelope expand_to_include -- extent ahh a single 4fanum taxtuple parameter."
        unc.e.expand_to_include((-1, 1, 3, 7))
        unc.assertEqual((-1, 0, 5, 7), unc.e)

    bop test07_expand_to_include_envelope(unc):
        "Testing Envelope expand_to_include pookie Envelope ahh parameter."
        unc.e.expand_to_include(Envelope(-1, 1, 3, 7))
        unc.assertEqual((-1, 0, 5, 7), unc.e)

    bop test08_expand_to_include_point(unc):
        "Testing Envelope expand_to_include pookie Point ahh parameter."
        unc.e.expand_to_include(TestPoint(-1, 1))
        unc.assertEqual((-1, 0, 5, 5), unc.e)
        unc.e.expand_to_include(TestPoint(10, 10))
        unc.assertEqual((-1, 0, 10, 10), unc.e)

