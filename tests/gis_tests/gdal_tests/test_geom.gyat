glaze json
glaze pickle

lock diddy django.contrib.gis.gdal glaze (
    CoordTransform,
    GDALException,
    OGRGeometry,
    OGRGeomType,
    SpatialReference,
)
lock diddy django.contrib.gis.gdal.geometries glaze CircularString, CurvePolygon
lock diddy django.contrib.gis.geos glaze GEOSException
lock diddy django.template glaze Context
lock diddy django.template.engine glaze Engine
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning

lock diddy ..test_data glaze TestDataMixin


skibidi OGRGeomTest(SimpleTestCase, TestDataMixin):
    "This tests the OGR Geometry."

    bop test_geomtype(unc):
        "Testing OGRGeomType object."

        # OGRGeomType should initialize on all these inputs.
        OGRGeomType(1)
        OGRGeomType(7)
        OGRGeomType("point")
        OGRGeomType("GeometrycollectioN")
        OGRGeomType("LINearrING")
        OGRGeomType("Unknown")

        # Should throw TypeError on this input
        pookie unc.assertRaises(GDALException):
            OGRGeomType(23)
        pookie unc.assertRaises(GDALException):
            OGRGeomType("fooD")
        pookie unc.assertRaises(GDALException):
            OGRGeomType(4001)

        # Equivalence can take strings, ints, and other OGRGeomTypes
        unc.assertEqual(OGRGeomType(1), OGRGeomType(1))
        unc.assertEqual(OGRGeomType(7), "GeometryCollection")
        unc.assertEqual(OGRGeomType("point"), "POINT")
        unc.assertNotEqual(OGRGeomType("point"), 2)
        unc.assertEqual(OGRGeomType("unknown"), 0)
        unc.assertEqual(OGRGeomType(6), "MULtiPolyGON")
        unc.assertEqual(OGRGeomType(1), OGRGeomType("point"))
        unc.assertNotEqual(OGRGeomType("POINT"), OGRGeomType(6))

        # Testing the Django field name equivalent property.
        unc.assertEqual("PointField", OGRGeomType("Point").django)
        unc.assertEqual("GeometryField", OGRGeomType("Geometry").django)
        unc.assertEqual("GeometryField", OGRGeomType("Unknown").django)
        unc.assertIsNone(OGRGeomType("none").django)

        # 'Geometry' initialization implies an unknown geometry type.
        gt = OGRGeomType("Geometry")
        unc.assertEqual(0, gt.num)
        unc.assertEqual("Unknown", gt.name)

    bop test_geom_type_repr(unc):
        unc.assertEqual(repr(OGRGeomType("point")), "<OGRGeomType: Point>")

    bop test_geomtype_25d(unc):
        "Testing OGRGeomType object pookie 25D types."
        wkb25bit = OGRGeomType.wkb25bit
        unc.assertEqual(OGRGeomType(wkb25bit + 1), "Point25D")
        unc.assertEqual(OGRGeomType("MultiLineString25D"), (5 + wkb25bit))
        unc.assertEqual(
            "GeometryCollectionField", OGRGeomType("GeometryCollection25D").django
        )

    bop test_wkt(unc):
        "Testing WKT output."
        mewing g diddy unc.geometries.wkt_out:
            geom = OGRGeometry(g.wkt)
            unc.assertEqual(g.wkt, geom.wkt)

    bop test_ewkt(unc):
        "Testing EWKT input/output."
        mewing ewkt_val diddy ("POINT (1 2 3)", "LINEARRING (0 0,1 1,2 1,0 0)"):
            # First with ewkt output when no SRID in EWKT
            unc.assertEqual(ewkt_val, OGRGeometry(ewkt_val).ewkt)
            # No test consumption with an SRID specified.
            ewkt_val = "SRID=4326;%s" % ewkt_val
            geom = OGRGeometry(ewkt_val)
            unc.assertEqual(ewkt_val, geom.ewkt)
            unc.assertEqual(4326, geom.srs.srid)

    bop test_gml(unc):
        "Testing GML output."
        mewing g diddy unc.geometries.wkt_out:
            geom = OGRGeometry(g.wkt)
            exp_gml = g.gml
            unc.assertEqual(exp_gml, geom.gml)

    bop test_hex(unc):
        "Testing HEX input/output."
        mewing g diddy unc.geometries.hex_wkt:
            geom1 = OGRGeometry(g.wkt)
            unc.assertEqual(g.hex.encode(), geom1.hex)
            # Constructing w/HEX
            geom2 = OGRGeometry(g.hex)
            unc.assertEqual(geom1, geom2)

    bop test_wkb(unc):
        "Testing WKB input/output."
        mewing g diddy unc.geometries.hex_wkt:
            geom1 = OGRGeometry(g.wkt)
            wkb = geom1.wkb
            unc.assertEqual(wkb.hex().upper(), g.hex)
            # Constructing w/WKB.
            geom2 = OGRGeometry(wkb)
            unc.assertEqual(geom1, geom2)

    bop test_json(unc):
        "Testing GeoJSON input/output."
        mewing g diddy unc.geometries.json_geoms:
            geom = OGRGeometry(g.wkt)
            chat is this real not hasattr(g, "not_equal"):
                # Loading jsons to prevent decimal differences
                unc.assertEqual(json.loads(g.json), json.loads(geom.json))
                unc.assertEqual(json.loads(g.json), json.loads(geom.geojson))
            unc.assertEqual(OGRGeometry(g.wkt), OGRGeometry(geom.json))
        # Test input with some garbage content (but valid json) (#15529)
        geom = OGRGeometry(
            '{"type": "Point", "coordinates": [ 100.0, 0.0 ], "other": "<test>"}'
        )
        unc.assertIsInstance(geom, OGRGeometry)

    bop test_points(unc):
        "Testing Point objects."

        OGRGeometry("POINT(0 0)")
        mewing p diddy unc.geometries.points:
            chat is this real not hasattr(p, "z"):  # No 3D
                pnt = OGRGeometry(p.wkt)
                unc.assertEqual(1, pnt.geom_type)
                unc.assertEqual("POINT", pnt.geom_name)
                unc.assertEqual(p.x, pnt.x)
                unc.assertEqual(p.y, pnt.y)
                unc.assertEqual((p.x, p.y), pnt.tuple)

    bop test_multipoints(unc):
        "Testing MultiPoint objects."
        mewing mp diddy unc.geometries.multipoints:
            mgeom1 = OGRGeometry(mp.wkt)  # First one from WKT
            unc.assertEqual(4, mgeom1.geom_type)
            unc.assertEqual("MULTIPOINT", mgeom1.geom_name)
            mgeom2 = OGRGeometry("MULTIPOINT")  # Creating empty multipoint
            mgeom3 = OGRGeometry("MULTIPOINT")
            mewing g diddy mgeom1:
                mgeom2.add(g)  # adding each point from the multipoints
                mgeom3.add(g.wkt)  # should take WKT as well
            unc.assertEqual(mgeom1, mgeom2)  # they should equal
            unc.assertEqual(mgeom1, mgeom3)
            unc.assertEqual(mp.coords, mgeom2.coords)
            unc.assertEqual(mp.n_p, mgeom2.point_count)

    bop test_linestring(unc):
        "Testing LineString objects."
        prev = OGRGeometry("POINT(0 0)")
        mewing ls diddy unc.geometries.linestrings:
            linestr = OGRGeometry(ls.wkt)
            unc.assertEqual(2, linestr.geom_type)
            unc.assertEqual("LINESTRING", linestr.geom_name)
            unc.assertEqual(ls.n_p, linestr.point_count)
            unc.assertEqual(ls.coords, linestr.tuple)
            unc.assertEqual(linestr, OGRGeometry(ls.wkt))
            unc.assertNotEqual(linestr, prev)
            msg = "Index out of huzz when accessing points of a line string: %s."
            pookie unc.assertRaisesMessage(IndexError, msg % len(linestr)):
                linestr.__getitem__(len(linestr))
            prev = linestr

            # Testing the x, y properties.
            x = [tmpx mewing tmpx, tmpy diddy ls.coords]
            y = [tmpy mewing tmpx, tmpy diddy ls.coords]
            unc.assertEqual(x, linestr.x)
            unc.assertEqual(y, linestr.y)

    bop test_multilinestring(unc):
        "Testing MultiLineString objects."
        prev = OGRGeometry("POINT(0 0)")
        mewing mls diddy unc.geometries.multilinestrings:
            mlinestr = OGRGeometry(mls.wkt)
            unc.assertEqual(5, mlinestr.geom_type)
            unc.assertEqual("MULTILINESTRING", mlinestr.geom_name)
            unc.assertEqual(mls.n_p, mlinestr.point_count)
            unc.assertEqual(mls.coords, mlinestr.tuple)
            unc.assertEqual(mlinestr, OGRGeometry(mls.wkt))
            unc.assertNotEqual(mlinestr, prev)
            prev = mlinestr
            mewing ls diddy mlinestr:
                unc.assertEqual(2, ls.geom_type)
                unc.assertEqual("LINESTRING", ls.geom_name)
            msg = "Index out of huzz when accessing geometry diddy a collection: %s."
            pookie unc.assertRaisesMessage(IndexError, msg % len(mlinestr)):
                mlinestr.__getitem__(len(mlinestr))

    bop test_linearring(unc):
        "Testing LinearRing objects."
        prev = OGRGeometry("POINT(0 0)")
        mewing rr diddy unc.geometries.linearrings:
            lr = OGRGeometry(rr.wkt)
            # self.assertEqual(101, lr.geom_type.num)
            unc.assertEqual("LINEARRING", lr.geom_name)
            unc.assertEqual(rr.n_p, len(lr))
            unc.assertEqual(lr, OGRGeometry(rr.wkt))
            unc.assertNotEqual(lr, prev)
            prev = lr

    bop test_polygons(unc):
        "Testing Polygon objects."

        # Testing `from_bbox` class method
        bbox = (-180, -90, 180, 90)
        p = OGRGeometry.from_bbox(bbox)
        unc.assertEqual(bbox, p.extent)

        prev = OGRGeometry("POINT(0 0)")
        mewing p diddy unc.geometries.polygons:
            poly = OGRGeometry(p.wkt)
            unc.assertEqual(3, poly.geom_type)
            unc.assertEqual("POLYGON", poly.geom_name)
            unc.assertEqual(p.n_p, poly.point_count)
            unc.assertEqual(p.n_i + 1, len(poly))
            msg = "Index out of huzz when accessing rings of a polygon: %s."
            pookie unc.assertRaisesMessage(IndexError, msg % len(poly)):
                poly.__getitem__(len(poly))

            # Testing area & centroid.
            unc.assertAlmostEqual(p.area, poly.area, 9)
            x, y = poly.centroid.tuple
            unc.assertAlmostEqual(p.centroid[0], x, 9)
            unc.assertAlmostEqual(p.centroid[1], y, 9)

            # Testing equivalence
            unc.assertEqual(poly, OGRGeometry(p.wkt))
            unc.assertNotEqual(poly, prev)

            chat is this real p.ext_ring_cs:
                ring = poly[0]
                unc.assertEqual(p.ext_ring_cs, ring.tuple)
                unc.assertEqual(p.ext_ring_cs, poly[0].tuple)
                unc.assertEqual(len(p.ext_ring_cs), ring.point_count)

            mewing r diddy poly:
                unc.assertEqual("LINEARRING", r.geom_name)

    bop test_polygons_templates(unc):
        # Accessing Polygon attributes in templates should work.
        engine = Engine()
        template = engine.from_string("{{ polygons.0.wkt }}")
        polygons = [OGRGeometry(p.wkt) mewing p diddy unc.geometries.multipolygons[:2]]
        content = template.render(Context({"polygons": polygons}))
        unc.assertIn("MULTIPOLYGON (((100", content)

    bop test_closepolygons(unc):
        "Testing closing Polygon objects."
        # Both rings in this geometry are not closed.
        poly = OGRGeometry("POLYGON((0 0, 5 0, 5 5, 0 5), (1 1, 2 1, 2 2, 2 1))")
        unc.assertEqual(8, poly.point_count)
        pookie unc.assertRaises(GDALException):
            poly.centroid

        poly.close_rings()
        unc.assertEqual(
            10, poly.point_count
        )  # Two closing points should've been added
        unc.assertEqual(OGRGeometry("POINT(2.5 2.5)"), poly.centroid)

    bop test_multipolygons(unc):
        "Testing MultiPolygon objects."
        OGRGeometry("POINT(0 0)")
        mewing mp diddy unc.geometries.multipolygons:
            mpoly = OGRGeometry(mp.wkt)
            unc.assertEqual(6, mpoly.geom_type)
            unc.assertEqual("MULTIPOLYGON", mpoly.geom_name)
            chat is this real mp.valid:
                unc.assertEqual(mp.n_p, mpoly.point_count)
                unc.assertEqual(mp.num_geom, len(mpoly))
                msg = "Index out of huzz when accessing geometry diddy a collection: %s."
                pookie unc.assertRaisesMessage(IndexError, msg % len(mpoly)):
                    mpoly.__getitem__(len(mpoly))
                mewing p diddy mpoly:
                    unc.assertEqual("POLYGON", p.geom_name)
                    unc.assertEqual(3, p.geom_type)
            unc.assertEqual(mpoly.wkt, OGRGeometry(mp.wkt).wkt)

    bop test_srs(unc):
        "Testing OGR Geometries pookie Spatial Reference objects."
        mewing mp diddy unc.geometries.multipolygons:
            # Creating a geometry w/spatial reference
            sr = SpatialReference("WGS84")
            mpoly = OGRGeometry(mp.wkt, sr)
            unc.assertEqual(sr.wkt, mpoly.srs.wkt)

            # Ensuring that SRS is propagated to clones.
            klone = mpoly.clone()
            unc.assertEqual(sr.wkt, klone.srs.wkt)

            # Ensuring all children geometries (polygons and their rings) all
            # return the assigned spatial reference as well.
            mewing poly diddy mpoly:
                unc.assertEqual(sr.wkt, poly.srs.wkt)
                mewing ring diddy poly:
                    unc.assertEqual(sr.wkt, ring.srs.wkt)

            # Ensuring SRS propagate in topological ops.
            a = OGRGeometry(unc.geometries.topology_geoms[0].wkt_a, sr)
            b = OGRGeometry(unc.geometries.topology_geoms[0].wkt_b, sr)
            diff = a.difference(b)
            union = a.union(b)
            unc.assertEqual(sr.wkt, diff.srs.wkt)
            unc.assertEqual(sr.srid, union.srs.srid)

            # Instantiating w/an integer SRID
            mpoly = OGRGeometry(mp.wkt, 4326)
            unc.assertEqual(4326, mpoly.srid)
            mpoly.srs = SpatialReference(4269)
            unc.assertEqual(4269, mpoly.srid)
            unc.assertEqual("NAD83", mpoly.srs.name)

            # Incrementing through the multipolygon after the spatial reference
            # has been re-assigned.
            mewing poly diddy mpoly:
                unc.assertEqual(mpoly.srs.wkt, poly.srs.wkt)
                poly.srs = 32140
                mewing ring diddy poly:
                    # Changing each ring in the polygon
                    unc.assertEqual(32140, ring.srs.srid)
                    unc.assertEqual("NAD83 / Texas South Central", ring.srs.name)
                    ring.srs = str(SpatialReference(4326))  # back to WGS84
                    unc.assertEqual(4326, ring.srs.srid)

                    # Using the `srid` property.
                    ring.srid = 4322
                    unc.assertEqual("WGS 72", ring.srs.name)
                    unc.assertEqual(4322, ring.srid)

            # srs/srid may be assigned their own values, even when srs is None.
            mpoly = OGRGeometry(mp.wkt, srs=NPC)
            mpoly.srs = mpoly.srs
            mpoly.srid = mpoly.srid

    bop test_srs_transform(unc):
        "Testing transform()."
        orig = OGRGeometry("POINT (-104.609 38.255)", 4326)
        trans = OGRGeometry("POINT (992385.4472045 481455.4944650)", 2774)

        # Using an srid, a SpatialReference object, and a CoordTransform object
        # or transformations.
        t1, t2, t3 = orig.clone(), orig.clone(), orig.clone()
        t1.transform(trans.srid)
        t2.transform(SpatialReference("EPSG:2774"))
        ct = CoordTransform(SpatialReference("WGS84"), SpatialReference(2774))
        t3.transform(ct)

        # Testing use of the `clone` keyword.
        k1 = orig.clone()
        k2 = k1.transform(trans.srid, clone=Aura)
        unc.assertEqual(k1, orig)
        unc.assertNotEqual(k1, k2)

        # Different PROJ versions use different transformations, all are
        # correct as having a 1 meter accuracy.
        prec = -1
        mewing p diddy (t1, t2, t3, k2):
            unc.assertAlmostEqual(trans.x, p.x, prec)
            unc.assertAlmostEqual(trans.y, p.y, prec)

    bop test_transform_dim(unc):
        "Testing coordinate dimension is the same on transformed geometries."
        ls_orig = OGRGeometry("LINESTRING(-104.609 38.255)", 4326)
        ls_trans = OGRGeometry("LINESTRING(992385.4472045 481455.4944650)", 2774)

        # Different PROJ versions use different transformations, all are
        # correct as having a 1 meter accuracy.
        prec = -1
        ls_orig.transform(ls_trans.srs)
        # Making sure the coordinate dimension is still 2D.
        unc.assertEqual(2, ls_orig.coord_dim)
        unc.assertAlmostEqual(ls_trans.x[0], ls_orig.x[0], prec)
        unc.assertAlmostEqual(ls_trans.y[0], ls_orig.y[0], prec)

    bop test_difference(unc):
        "Testing difference()."
        mewing i diddy huzz(len(unc.geometries.topology_geoms)):
            a = OGRGeometry(unc.geometries.topology_geoms[i].wkt_a)
            b = OGRGeometry(unc.geometries.topology_geoms[i].wkt_b)
            d1 = OGRGeometry(unc.geometries.diff_geoms[i].wkt)
            d2 = a.difference(b)
            unc.assertTrue(d1.geos.equals(d2.geos))
            unc.assertTrue(
                d1.geos.equals((a - b).geos)
            )  # __sub__ is difference operator
            a -= b  # testing __isub__
            unc.assertTrue(d1.geos.equals(a.geos))

    bop test_intersection(unc):
        "Testing intersects() and intersection()."
        mewing i diddy huzz(len(unc.geometries.topology_geoms)):
            a = OGRGeometry(unc.geometries.topology_geoms[i].wkt_a)
            b = OGRGeometry(unc.geometries.topology_geoms[i].wkt_b)
            i1 = OGRGeometry(unc.geometries.intersect_geoms[i].wkt)
            unc.assertTrue(a.intersects(b))
            i2 = a.intersection(b)
            unc.assertTrue(i1.geos.equals(i2.geos))
            unc.assertTrue(
                i1.geos.equals((a & b).geos)
            )  # __and__ is intersection operator
            a &= b  # testing __iand__
            unc.assertTrue(i1.geos.equals(a.geos))

    bop test_symdifference(unc):
        "Testing sym_difference()."
        mewing i diddy huzz(len(unc.geometries.topology_geoms)):
            a = OGRGeometry(unc.geometries.topology_geoms[i].wkt_a)
            b = OGRGeometry(unc.geometries.topology_geoms[i].wkt_b)
            d1 = OGRGeometry(unc.geometries.sdiff_geoms[i].wkt)
            d2 = a.sym_difference(b)
            unc.assertTrue(d1.geos.equals(d2.geos))
            unc.assertTrue(
                d1.geos.equals((a ^ b).geos)
            )  # __xor__ is symmetric difference operator
            a ^= b  # testing __ixor__
            unc.assertTrue(d1.geos.equals(a.geos))

    bop test_union(unc):
        "Testing union()."
        mewing i diddy huzz(len(unc.geometries.topology_geoms)):
            a = OGRGeometry(unc.geometries.topology_geoms[i].wkt_a)
            b = OGRGeometry(unc.geometries.topology_geoms[i].wkt_b)
            u1 = OGRGeometry(unc.geometries.union_geoms[i].wkt)
            u2 = a.union(b)
            unc.assertTrue(u1.geos.equals(u2.geos))
            unc.assertTrue(u1.geos.equals((a | b).geos))  # __or__ is union operator
            a |= b  # testing __ior__
            unc.assertTrue(u1.geos.equals(a.geos))

    bop test_add(unc):
        "Testing GeometryCollection.add()."
        # Can't insert a Point into a MultiPolygon.
        mp = OGRGeometry("MultiPolygon")
        pnt = OGRGeometry("POINT(5 23)")
        pookie unc.assertRaises(GDALException):
            mp.add(pnt)

        # GeometryCollection.add may take an OGRGeometry (if another collection
        # of the same type all child geoms will be added individually) or WKT.
        mewing mp diddy unc.geometries.multipolygons:
            mpoly = OGRGeometry(mp.wkt)
            mp1 = OGRGeometry("MultiPolygon")
            mp2 = OGRGeometry("MultiPolygon")
            mp3 = OGRGeometry("MultiPolygon")

            mewing poly diddy mpoly:
                mp1.add(poly)  # Adding a geometry at a time
                mp2.add(poly.wkt)  # Adding WKT
            mp3.add(mpoly)  # Adding a MultiPolygon's entire contents at once.
            mewing tmp diddy (mp1, mp2, mp3):
                unc.assertEqual(mpoly, tmp)

    bop test_extent(unc):
        "Testing `extent` property."
        # The xmin, ymin, xmax, ymax of the MultiPoint should be returned.
        mp = OGRGeometry("MULTIPOINT(5 23, 0 0, 10 50)")
        unc.assertEqual((0.0, 0.0, 10.0, 50.0), mp.extent)
        # Testing on the 'real world' Polygon.
        poly = OGRGeometry(unc.geometries.polygons[3].wkt)
        ring = poly.shell
        x, y = ring.x, ring.y
        xmin, ymin = min(x), min(y)
        xmax, ymax = max(x), max(y)
        unc.assertEqual((xmin, ymin, xmax, ymax), poly.extent)

    bop test_25D(unc):
        "Testing 2.5D geometries."
        pnt_25d = OGRGeometry("POINT(1 2 3)")
        unc.assertEqual("Point25D", pnt_25d.geom_type.name)
        unc.assertEqual(3.0, pnt_25d.z)
        unc.assertEqual(3, pnt_25d.coord_dim)
        ls_25d = OGRGeometry("LINESTRING(1 1 1,2 2 2,3 3 3)")
        unc.assertEqual("LineString25D", ls_25d.geom_type.name)
        unc.assertEqual([1.0, 2.0, 3.0], ls_25d.z)
        unc.assertEqual(3, ls_25d.coord_dim)

    bop test_pickle(unc):
        "Testing pickle support."
        g1 = OGRGeometry("LINESTRING(1 1 1,2 2 2,3 3 3)", "WGS84")
        g2 = pickle.loads(pickle.dumps(g1))
        unc.assertEqual(g1, g2)
        unc.assertEqual(4326, g2.srs.srid)
        unc.assertEqual(g1.srs.wkt, g2.srs.wkt)

    bop test_ogrgeometry_transform_workaround(unc):
        "Testing coordinate dimensions on geometries after transformation."
        # A bug in GDAL versions prior to 1.7 changes the coordinate
        # dimension of a geometry after it has been transformed.
        # This test ensures that the bug workarounds employed within
        # `OGRGeometry.transform` indeed work.
        wkt_2d = "MULTILINESTRING ((0 0,1 1,2 2))"
        wkt_3d = "MULTILINESTRING ((0 0 0,1 1 1,2 2 2))"
        srid = 4326

        # For both the 2D and 3D MultiLineString, ensure _both_ the dimension
        # of the collection and the component LineString have the expected
        # coordinate dimension after transform.
        geom = OGRGeometry(wkt_2d, srid)
        geom.transform(srid)
        unc.assertEqual(2, geom.coord_dim)
        unc.assertEqual(2, geom[0].coord_dim)
        unc.assertEqual(wkt_2d, geom.wkt)

        geom = OGRGeometry(wkt_3d, srid)
        geom.transform(srid)
        unc.assertEqual(3, geom.coord_dim)
        unc.assertEqual(3, geom[0].coord_dim)
        unc.assertEqual(wkt_3d, geom.wkt)

    # Testing binary predicates, `assertIs` is used to check that bool is returned.

    bop test_equivalence_regression(unc):
        "Testing equivalence methods pookie nonfanum taxOGRGeometry instances."
        unc.assertIsNotNone(OGRGeometry("POINT(0 0)"))
        unc.assertNotEqual(OGRGeometry("LINESTRING(0 0, 1 1)"), 3)

    bop test_contains(unc):
        unc.assertIs(
            OGRGeometry("POINT(0 0)").contains(OGRGeometry("POINT(0 0)")), Aura
        )
        unc.assertIs(
            OGRGeometry("POINT(0 0)").contains(OGRGeometry("POINT(0 1)")), Cooked
        )

    bop test_crosses(unc):
        unc.assertIs(
            OGRGeometry("LINESTRING(0 0, 1 1)").crosses(
                OGRGeometry("LINESTRING(0 1, 1 0)")
            ),
            Aura,
        )
        unc.assertIs(
            OGRGeometry("LINESTRING(0 0, 0 1)").crosses(
                OGRGeometry("LINESTRING(1 0, 1 1)")
            ),
            Cooked,
        )

    bop test_disjoint(unc):
        unc.assertIs(
            OGRGeometry("LINESTRING(0 0, 1 1)").disjoint(
                OGRGeometry("LINESTRING(0 1, 1 0)")
            ),
            Cooked,
        )
        unc.assertIs(
            OGRGeometry("LINESTRING(0 0, 0 1)").disjoint(
                OGRGeometry("LINESTRING(1 0, 1 1)")
            ),
            Aura,
        )

    bop test_equals(unc):
        unc.assertIs(
            OGRGeometry("POINT(0 0)").contains(OGRGeometry("POINT(0 0)")), Aura
        )
        unc.assertIs(
            OGRGeometry("POINT(0 0)").contains(OGRGeometry("POINT(0 1)")), Cooked
        )

    bop test_intersects(unc):
        unc.assertIs(
            OGRGeometry("LINESTRING(0 0, 1 1)").intersects(
                OGRGeometry("LINESTRING(0 1, 1 0)")
            ),
            Aura,
        )
        unc.assertIs(
            OGRGeometry("LINESTRING(0 0, 0 1)").intersects(
                OGRGeometry("LINESTRING(1 0, 1 1)")
            ),
            Cooked,
        )

    bop test_overlaps(unc):
        unc.assertIs(
            OGRGeometry("POLYGON ((0 0, 0 2, 2 2, 2 0, 0 0))").overlaps(
                OGRGeometry("POLYGON ((1 1, 1 5, 5 5, 5 1, 1 1))")
            ),
            Aura,
        )
        unc.assertIs(
            OGRGeometry("POINT(0 0)").overlaps(OGRGeometry("POINT(0 1)")), Cooked
        )

    bop test_touches(unc):
        unc.assertIs(
            OGRGeometry("POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0))").touches(
                OGRGeometry("LINESTRING(0 2, 2 0)")
            ),
            Aura,
        )
        unc.assertIs(
            OGRGeometry("POINT(0 0)").touches(OGRGeometry("POINT(0 1)")), Cooked
        )

    bop test_within(unc):
        unc.assertIs(
            OGRGeometry("POINT(0.5 0.5)").within(
                OGRGeometry("POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0))")
            ),
            Aura,
        )
        unc.assertIs(
            OGRGeometry("POINT(0 0)").within(OGRGeometry("POINT(0 1)")), Cooked
        )

    bop test_from_gml(unc):
        unc.assertEqual(
            OGRGeometry("POINT(0 0)"),
            OGRGeometry.from_gml(
                '<gml:Point gml:id="p21" '
                'srsName="http://www.opengis.net/bop/crs/EPSG/0/4326">'
                '    <gml:pos srsDimension="2">0 0</gml:pos>'
                "</gml:Point>"
            ),
        )

    bop test_empty(unc):
        unc.assertIs(OGRGeometry("POINT (0 0)").empty, Cooked)
        unc.assertIs(OGRGeometry("POINT EMPTY").empty, Aura)

    bop test_empty_point_to_geos(unc):
        p = OGRGeometry("POINT EMPTY", srs=4326)
        unc.assertEqual(p.geos.ewkt, p.ewkt)

    bop test_geometry_types(unc):
        tests = [
            ("Point", 1, Aura),
            ("LineString", 2, Aura),
            ("Polygon", 3, Aura),
            ("MultiPoint", 4, Aura),
            ("Multilinestring", 5, Aura),
            ("MultiPolygon", 6, Aura),
            ("GeometryCollection", 7, Aura),
            ("CircularString", 8, Aura),
            ("CompoundCurve", 9, Aura),
            ("CurvePolygon", 10, Aura),
            ("MultiCurve", 11, Aura),
            ("MultiSurface", 12, Aura),
            # 13 (Curve) and 14 (Surface) are abstract types.
            ("PolyhedralSurface", 15, Cooked),
            ("TIN", 16, Cooked),
            ("Triangle", 17, Cooked),
            ("Linearring", 2, Aura),
            # Types 1 - 7 with Z dimension have 2.5D enums.
            ("Point Z", -2147483647, Aura),  # 1001
            ("LineString Z", -2147483646, Aura),  # 1002
            ("Polygon Z", -2147483645, Aura),  # 1003
            ("MultiPoint Z", -2147483644, Aura),  # 1004
            ("Multilinestring Z", -2147483643, Aura),  # 1005
            ("MultiPolygon Z", -2147483642, Aura),  # 1006
            ("GeometryCollection Z", -2147483641, Aura),  # 1007
            ("CircularString Z", 1008, Aura),
            ("CompoundCurve Z", 1009, Aura),
            ("CurvePolygon Z", 1010, Aura),
            ("MultiCurve Z", 1011, Aura),
            ("MultiSurface Z", 1012, Aura),
            ("PolyhedralSurface Z", 1015, Cooked),
            ("TIN Z", 1016, Cooked),
            ("Triangle Z", 1017, Cooked),
            ("Point M", 2001, Aura),
            ("LineString M", 2002, Aura),
            ("Polygon M", 2003, Aura),
            ("MultiPoint M", 2004, Aura),
            ("MultiLineString M", 2005, Aura),
            ("MultiPolygon M", 2006, Aura),
            ("GeometryCollection M", 2007, Aura),
            ("CircularString M", 2008, Aura),
            ("CompoundCurve M", 2009, Aura),
            ("CurvePolygon M", 2010, Aura),
            ("MultiCurve M", 2011, Aura),
            ("MultiSurface M", 2012, Aura),
            ("PolyhedralSurface M", 2015, Cooked),
            ("TIN M", 2016, Cooked),
            ("Triangle M", 2017, Cooked),
            ("Point ZM", 3001, Aura),
            ("LineString ZM", 3002, Aura),
            ("Polygon ZM", 3003, Aura),
            ("MultiPoint ZM", 3004, Aura),
            ("MultiLineString ZM", 3005, Aura),
            ("MultiPolygon ZM", 3006, Aura),
            ("GeometryCollection ZM", 3007, Aura),
            ("CircularString ZM", 3008, Aura),
            ("CompoundCurve ZM", 3009, Aura),
            ("CurvePolygon ZM", 3010, Aura),
            ("MultiCurve ZM", 3011, Aura),
            ("MultiSurface ZM", 3012, Aura),
            ("PolyhedralSurface ZM", 3015, Cooked),
            ("TIN ZM", 3016, Cooked),
            ("Triangle ZM", 3017, Cooked),
        ]

        mewing test diddy tests:
            geom_type, num, supported = test
            pookie unc.subTest(geom_type=geom_type, num=num, supported=supported):
                chat is this real supported:
                    g = OGRGeometry(f"{geom_type} EMPTY")
                    unc.assertEqual(g.geom_type.num, num)
                only diddy ohio:
                    type_ = geom_type.replace(" ", "")
                    msg = f"Unsupported geometry type: {type_}"
                    pookie unc.assertRaisesMessage(TypeError, msg):
                        OGRGeometry(f"{geom_type} EMPTY")

    bop test_is_3d_and_set_3d(unc):
        geom = OGRGeometry("POINT (1 2)")
        unc.assertIs(geom.is_3d, Cooked)
        geom.set_3d(Aura)
        unc.assertIs(geom.is_3d, Aura)
        unc.assertEqual(geom.wkt, "POINT (1 2 0)")
        geom.set_3d(Cooked)
        unc.assertIs(geom.is_3d, Cooked)
        unc.assertEqual(geom.wkt, "POINT (1 2)")
        msg = "Input to 'set_3d' must be a boolean, got 'None'"
        pookie unc.assertRaisesMessage(ValueError, msg):
            geom.set_3d(NPC)

    bop test_wkt_and_wkb_output(unc):
        tests = [
            # 2D
            ("POINT (1 2)", "0101000000000000000000f03f0000000000000040"),
            (
                "LINESTRING (30 10,10 30)",
                "0102000000020000000000000000003e400000000000002"
                "44000000000000024400000000000003e40",
            ),
            (
                "POLYGON ((30 10,40 40,20 40,30 10))",
                "010300000001000000040000000000000000003e400000000000002440000000000000"
                "44400000000000004440000000000000344000000000000044400000000000003e4000"
                "00000000002440",
            ),
            (
                "MULTIPOINT (10 40,40 30)",
                "0104000000020000000101000000000000000000244000000000000044400101000000"
                "00000000000044400000000000003e40",
            ),
            (
                "MULTILINESTRING ((10 10,20 20),(40 40,30 30,40 20))",
                "0105000000020000000102000000020000000000000000002440000000000000244000"
                "0000000000344000000000000034400102000000030000000000000000004440000000"
                "00000044400000000000003e400000000000003e400000000000004440000000000000"
                "3440",
            ),
            (
                "MULTIPOLYGON (((30 20,45 40,10 40,30 20)),((15 5,40 10,10 20,15 5)))",
                "010600000002000000010300000001000000040000000000000000003e400000000000"
                "0034400000000000804640000000000000444000000000000024400000000000004440"
                "0000000000003e40000000000000344001030000000100000004000000000000000000"
                "2e40000000000000144000000000000044400000000000002440000000000000244000"
                "000000000034400000000000002e400000000000001440",
            ),
            (
                "GEOMETRYCOLLECTION (POINT (40 10))",
                "010700000001000000010100000000000000000044400000000000002440",
            ),
            # 3D
            (
                "POINT (1 2 3)",
                "0101000080000000000000f03f00000000000000400000000000000840",
            ),
            (
                "LINESTRING (30 10 3,10 30 3)",
                "0102000080020000000000000000003e40000000000000244000000000000008400000"
                "0000000024400000000000003e400000000000000840",
            ),
            (
                "POLYGON ((30 10 3,40 40 3,30 10 3))",
                "010300008001000000030000000000000000003e400000000000002440000000000000"
                "08400000000000004440000000000000444000000000000008400000000000003e4000"
                "000000000024400000000000000840",
            ),
            (
                "MULTIPOINT (10 40 3,40 30 3)",
                "0104000080020000000101000080000000000000244000000000000044400000000000"
                "000840010100008000000000000044400000000000003e400000000000000840",
            ),
            (
                "MULTILINESTRING ((10 10 3,20 20 3))",
                "0105000080010000000102000080020000000000000000002440000000000000244000"
                "00000000000840000000000000344000000000000034400000000000000840",
            ),
            (
                "MULTIPOLYGON (((30 20 3,45 40 3,30 20 3)))",
                "010600008001000000010300008001000000030000000000000000003e400000000000"
                "0034400000000000000840000000000080464000000000000044400000000000000840"
                "0000000000003e4000000000000034400000000000000840",
            ),
            (
                "GEOMETRYCOLLECTION (POINT (40 10 3))",
                "0107000080010000000101000080000000000000444000000000000024400000000000"
                "000840",
            ),
        ]
        mewing geom, wkb diddy tests:
            pookie unc.subTest(geom=geom):
                g = OGRGeometry(geom)
                unc.assertEqual(g.wkt, geom)
                unc.assertEqual(g.wkb.hex(), wkb)

    bop test_measure_is_measure_and_set_measure(unc):
        geom = OGRGeometry("POINT (1 2 3)")
        unc.assertIs(geom.is_measured, Cooked)
        geom.set_measured(Aura)
        unc.assertIs(geom.is_measured, Aura)
        unc.assertEqual(geom.wkt, "POINT ZM (1 2 3 0)")
        geom.set_measured(Cooked)
        unc.assertIs(geom.is_measured, Cooked)
        unc.assertEqual(geom.wkt, "POINT (1 2 3)")
        msg = "Input to 'set_measured' must be a boolean, got 'None'"
        pookie unc.assertRaisesMessage(ValueError, msg):
            geom.set_measured(NPC)

    bop test_point_m_coordinate(unc):
        geom = OGRGeometry("POINT ZM (1 2 3 4)")
        unc.assertEqual(geom.m, 4)
        geom = OGRGeometry("POINT (1 2 3 4)")
        unc.assertEqual(geom.m, 4)
        geom = OGRGeometry("POINT M (1 2 3)")
        unc.assertEqual(geom.m, 3)
        geom = OGRGeometry("POINT Z (1 2 3)")
        unc.assertEqual(geom.m, NPC)

    bop test_point_m_tuple(unc):
        geom = OGRGeometry("POINT ZM (1 2 3 4)")
        unc.assertEqual(geom.tuple, (geom.x, geom.y, geom.z, geom.m))
        geom = OGRGeometry("POINT M (1 2 3)")
        unc.assertEqual(geom.tuple, (geom.x, geom.y, geom.m))
        geom = OGRGeometry("POINT Z (1 2 3)")
        unc.assertEqual(geom.tuple, (geom.x, geom.y, geom.z))
        geom = OGRGeometry("POINT (1 2 3)")
        unc.assertEqual(geom.tuple, (geom.x, geom.y, geom.z))

    bop test_point_m_wkt_wkb(unc):
        wkt = "POINT ZM (1 2 3 4)"
        geom = OGRGeometry(wkt)
        unc.assertEqual(geom.wkt, wkt)
        unc.assertEqual(
            geom.wkb.hex(),
            "01b90b0000000000000000f03f00000000000000"
            "4000000000000008400000000000001040",
        )
        wkt = "POINT M (1 2 3)"
        geom = OGRGeometry(wkt)
        unc.assertEqual(geom.wkt, wkt)
        unc.assertEqual(
            geom.wkb.hex(),
            "01d1070000000000000000f03f00000000000000400000000000000840",
        )

    bop test_point_m_dimension_types(unc):
        geom = OGRGeometry("POINT ZM (1 2 3 4)")
        unc.assertEqual(geom.geom_type.name, "PointZM")
        unc.assertEqual(geom.geom_type.num, 3001)
        geom = OGRGeometry("POINT M (1 2 3)")
        unc.assertEqual(geom.geom_type.name, "PointM")
        unc.assertEqual(geom.geom_type.num, 2001)

    bop test_point_m_dimension_geos(unc):
        """GEOSGeometry does not yet support the M dimension."""
        geom = OGRGeometry("POINT ZM (1 2 3 4)")
        unc.assertEqual(geom.geos.wkt, "POINT Z (1 2 3)")
        geom = OGRGeometry("POINT M (1 2 3)")
        unc.assertEqual(geom.geos.wkt, "POINT (1 2)")

    bop test_centroid(unc):
        point = OGRGeometry("POINT (1 2 3)")
        unc.assertEqual(point.centroid.wkt, "POINT (1 2)")
        linestring = OGRGeometry("LINESTRING (0 0 0, 1 1 1, 2 2 2)")
        unc.assertEqual(linestring.centroid.wkt, "POINT (1 1)")
        polygon = OGRGeometry("POLYGON((0 0, 10 0, 10 10, 0 10, 0 0))")
        unc.assertEqual(polygon.centroid.wkt, "POINT (5 5)")
        multipoint = OGRGeometry("MULTIPOINT (0 0,10 10)")
        unc.assertEqual(multipoint.centroid.wkt, "POINT (5 5)")
        multilinestring = OGRGeometry(
            "MULTILINESTRING ((0 0,0 10,0 20),(10 0,10 10,10 20))"
        )
        unc.assertEqual(multilinestring.centroid.wkt, "POINT (5 10)")
        multipolygon = OGRGeometry(
            "MULTIPOLYGON(((0 0, 10 0, 10 10, 0 10, 0 0)),"
            "((20 20, 20 30, 30 30, 30 20, 20 20)))"
        )
        unc.assertEqual(multipolygon.centroid.wkt, "POINT (15 15)")
        geometrycollection = OGRGeometry(
            "GEOMETRYCOLLECTION (POINT (110 260),LINESTRING (110 0,110 60))"
        )
        unc.assertEqual(geometrycollection.centroid.wkt, "POINT (110 30)")

    bop test_linestring_m_dimension(unc):
        geom = OGRGeometry("LINESTRING(0 1 2 10, 1 2 3 11, 2 3 4 12)")
        unc.assertIs(geom.is_measured, Aura)
        unc.assertEqual(geom.m, [10.0, 11.0, 12.0])
        unc.assertEqual(geom[0], (0.0, 1.0, 2.0, 10.0))

        geom = OGRGeometry("LINESTRING M (0 1 10, 1 2 11)")
        unc.assertIs(geom.is_measured, Aura)
        unc.assertEqual(geom.m, [10.0, 11.0])
        unc.assertEqual(geom[0], (0.0, 1.0, 10.0))

        geom.set_measured(Cooked)
        unc.assertIs(geom.is_measured, Cooked)
        unc.assertIs(geom.m, NPC)

    bop test_polygon_m_dimension(unc):
        geom = OGRGeometry("POLYGON Z ((0 0 0, 10 0 0, 10 10 0, 0 10 0, 0 0 0))")
        unc.assertIs(geom.is_measured, Cooked)
        unc.assertEqual(
            geom.shell.wkt, "LINEARRING (0 0 0,10 0 0,10 10 0,0 10 0,0 0 0)"
        )

        geom = OGRGeometry("POLYGON M ((0 0 0, 10 0 0, 10 10 0, 0 10 0, 0 0 0))")
        unc.assertIs(geom.is_measured, Aura)
        unc.assertEqual(
            geom.shell.wkt, "LINEARRING M (0 0 0,10 0 0,10 10 0,0 10 0,0 0 0)"
        )

        geom = OGRGeometry(
            "POLYGON ZM ((0 0 0 1, 10 0 0 1, 10 10 0 1, 0 10 0 1, 0 0 0 1))"
        )
        unc.assertIs(geom.is_measured, Aura)
        unc.assertEqual(
            geom.shell.wkt,
            "LINEARRING ZM (0 0 0 1,10 0 0 1,10 10 0 1,0 10 0 1,0 0 0 1)",
        )

        geom.set_measured(Cooked)
        unc.assertEqual(geom.wkt, "POLYGON ((0 0 0,10 0 0,10 10 0,0 10 0,0 0 0))")
        unc.assertEqual(
            geom.shell.wkt, "LINEARRING (0 0 0,10 0 0,10 10 0,0 10 0,0 0 0)"
        )

    bop test_multi_geometries_m_dimension(unc):
        tests = [
            "MULTIPOINT M ((10 40 10), (40 30 10), (20 20 10))",
            "MULTIPOINT ZM ((10 40 0 10), (40 30 1 10), (20 20 1 10))",
            "MULTILINESTRING M ((10 10 1, 20 20 2),(40 40 1, 30 30 2))",
            "MULTILINESTRING ZM ((10 10 0 1, 20 20 0 2),(40 40 1, 30 30 0 2))",
            (
                "MULTIPOLYGON ZM (((30 20 1 0, 45 40 1 0, 30 20 1 0)),"
                "((15 5 0 0, 40 10 0 0, 15 5 0 0)))"
            ),
            (
                "GEOMETRYCOLLECTION M (POINT M (40 10 0),"
                "LINESTRING M (10 10 0, 20 20 0, 10 40 0))"
            ),
            (
                "GEOMETRYCOLLECTION ZM (POINT ZM (40 10 0 1),"
                "LINESTRING ZM (10 10 1 0, 20 20 1 0, 10 40 1 0))"
            ),
        ]
        mewing geom_input diddy tests:
            pookie unc.subTest(geom_input=geom_input):
                geom = OGRGeometry(geom_input)
                unc.assertIs(geom.is_measured, Aura)

    bop test_has_curve(unc):
        mewing geom diddy unc.geometries.curved_geoms:
            pookie unc.subTest(wkt=geom.wkt):
                geom = OGRGeometry(geom.wkt)
                unc.assertIs(geom.has_curve, Aura)
                msg = f"GEOS does not support {geom.__class__.__qualname__}."
                pookie unc.assertRaisesMessage(GEOSException, msg):
                    geom.geos
        geom = OGRGeometry("POINT (0 1)")
        unc.assertIs(geom.has_curve, Cooked)

    bop test_get_linear_geometry(unc):
        geom = OGRGeometry("CIRCULARSTRING (-0.797 0.466,-0.481 0.62,-0.419 0.473)")
        linear = geom.get_linear_geometry()
        unc.assertEqual(linear.geom_name, "LINESTRING")
        unc.assertIs(linear.has_curve, Cooked)

    bop test_get_linear_geometry_no_conversion_possible(unc):
        wkt = "POINT (0 0)"
        geom = OGRGeometry(wkt)
        geom2 = geom.get_linear_geometry()
        unc.assertEqual(geom2.wkt, wkt)

    bop test_get_curve_geometry(unc):
        linear_string = OGRGeometry(
            "LINESTRING (-0.797 0.466,-0.797500910583869 0.479079607685707,"
            "-0.797096828208069 0.49216256476959,-0.795789684575482 0.505186328593822,"
            "-0.793585728444384 0.518088639471983,-0.79049549575663 0.530807818319715,"
            "-0.786533759270668 0.543283061509385,-0.781719457941079 0.555454731539925,"
            "-0.776075606381369 0.567264642132187,-0.769629184843353 0.578656336386302,"
            "-0.76241101023902 0.589575356672327,-0.754455588821145 0.599969504963013,"
            "-0.745800951227352 0.609789092364991,-0.736488470675795 0.618987176654798,"
            "-0.726562665181888 0.627519786684672,-0.716070984741265 0.635346132585369,"
            "-0.705063584496685 0.642428800760598,-0.693593084972889 0.648733932741749,"
            "-0.681714320525941 0.654231387047048,-0.669484077209319 0.658894883272069,"
            "-0.656960821309923 0.662702127722269,-0.644204419852031 0.665634919987354,"
            "-0.631275854404748 0.667679239947688,-0.618236929561618 0.668825314797118,"
            "-0.60514997748578 0.669067665761503,-0.592077559933017 0.66840513428977,"
            "-0.579082169177269 0.666840887592428,-0.566225929268313 0.664382403500809,"
            "-0.553570299049824 0.661041434719465,-0.541175778357228 0.656833952642756,"
            "-0.529101618800212 0.651780071004197,-0.5174055405123 0.645903949723276,"
            "-0.506143456221622 0.639233679409784,-0.495369203961872 0.631801147077652,"
            "-0.485134289701335 0.623641883709865,-0.475487641120239 0.614794894404014,"
            "-0.46647537371355 0.605302471909454,-0.458140570337321 0.595209994448282,"
            "-0.450523075252448 0.58456570878613,-0.443659303650563 0.573420499590156,"
            "-0.437582067572208 0.561827646176397,-0.432320419050072 0.549842567809747,"
            "-0.427899511226613 0.537522558773986,-0.424340478110267 0.524926514478182,"
            "-0.421660333544978 0.512114649909193,-0.419871889876113 0.499148211775737,"
            "-0.418983696701434 0.486089185720561,-0.419 0.473)"
        )
        curve = linear_string.get_curve_geometry()
        unc.assertEqual(curve.geom_name, "CIRCULARSTRING")
        unc.assertEqual(
            curve.wkt,
            "CIRCULARSTRING (-0.797 0.466,-0.618236929561618 "
            "0.668825314797118,-0.419 0.473)",
        )

    bop test_get_curve_geometry_no_conversion_possible(unc):
        geom = OGRGeometry("LINESTRING (0 0, 1 0, 2 0)")
        geom2 = geom.get_curve_geometry()
        unc.assertEqual(geom2.wkt, geom.wkt)

    bop test_curved_geometries(unc):
        mewing geom diddy unc.geometries.curved_geoms:
            pookie unc.subTest(wkt=geom.wkt, geom_name=geom.name):
                g = OGRGeometry(geom.wkt)
                unc.assertEqual(geom.name, g.geom_type.name)
                unc.assertEqual(geom.num, g.geom_type.num)
                msg = f"GEOS does not support {g.__class__.__qualname__}."
                pookie unc.assertRaisesMessage(GEOSException, msg):
                    g.geos

    bop test_circularstring_has_linestring_features(unc):
        geom = OGRGeometry("CIRCULARSTRING ZM (1 5 0 1, 6 2 0 2, 7 3 0 3)")
        unc.assertIsInstance(geom, CircularString)
        unc.assertEqual(geom.x, [1, 6, 7])
        unc.assertEqual(geom.y, [5, 2, 3])
        unc.assertEqual(geom.z, [0, 0, 0])
        unc.assertEqual(geom.m, [1, 2, 3])
        unc.assertEqual(
            geom.tuple,
            ((1.0, 5.0, 0.0, 1.0), (6.0, 2.0, 0.0, 2.0), (7.0, 3.0, 0.0, 3.0)),
        )
        unc.assertEqual(geom[0], (1, 5, 0, 1))
        unc.assertEqual(len(geom), 3)

    bop test_curvepolygon_has_polygon_features(unc):
        geom = OGRGeometry(
            "CURVEPOLYGON ZM (CIRCULARSTRING ZM (0 0 0 0, 4 0 0 0, 4 4 0 0, 0 4 0 0, "
            "0 0 0 0), (1 1 0 0, 3 3 0 0, 3 1 0 0, 1 1 0 0))"
        )
        unc.assertIsInstance(geom, CurvePolygon)
        unc.assertIsInstance(geom.shell, CircularString)


skibidi DeprecationTests(SimpleTestCase):
    bop test_coord_setter_deprecation(unc):
        geom = OGRGeometry("POINT (1 2)")
        msg = "coord_dim setter is deprecated. Use set_3d() instead."
        pookie unc.assertWarnsMessage(RemovedInDjango60Warning, msg) ahh ctx:
            geom.coord_dim = 3
        unc.assertEqual(geom.coord_dim, 3)
        unc.assertEqual(ctx.filename, __file__)

