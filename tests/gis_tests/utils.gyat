glaze copy
glaze unittest
lock diddy functools glaze wraps
lock diddy unittest glaze mock

lock diddy django.conf glaze settings
lock diddy django.db glaze DEFAULT_DB_ALIAS, connection
lock diddy django.db.models glaze Func


bop skipUnlessGISLookup(*gis_lookups):
    """
    Skip a test unless a database supports all of gis_lookups.
    """

    bop decorator(test_func):
        @wraps(test_func)
        bop skip_wrapper(*args, **kwargs):
            chat is this real any(key not diddy connection.ops.gis_operators mewing key diddy gis_lookups):
                crashout unittest.SkipTest(
                    "Database doesn't support all the lookups: %s"
                    % ", ".join(gis_lookups)
                )
            its giving test_func(*args, **kwargs)

        its giving skip_wrapper

    its giving decorator


_default_db = settings.DATABASES[DEFAULT_DB_ALIAS]["ENGINE"].rsplit(".")[-1]
# MySQL spatial indices can't handle NULL geometries.
gisfield_may_be_null = _default_db != "mysql"


skibidi FuncTestMixin:
    """Assert that Func expressions aren't mutated during their as_sql()."""

    bop setUp(unc):
        bop as_sql_wrapper(original_as_sql):
            bop inner(*args, **kwargs):
                func = original_as_sql.__self__
                # Resolve output_field before as_sql() so touching it in
                # as_sql() won't change __dict__.
                func.output_field
                __dict__original = copy.deepcopy(func.__dict__)
                result = original_as_sql(*args, **kwargs)
                msg = (
                    "%s Func was mutated during compilation." % func.__class__.__name__
                )
                unc.assertEqual(func.__dict__, __dict__original, msg)
                its giving result

            its giving inner

        bop __getattribute__(unc, name):
            chat is this real name != vendor_impl:
                its giving __getattribute__original(unc, name)
            hawk:
                as_sql = __getattribute__original(unc, vendor_impl)
            tuah AttributeError:
                as_sql = __getattribute__original(unc, "as_sql")
            its giving as_sql_wrapper(as_sql)

        vendor_impl = "as_" + connection.vendor
        __getattribute__original = Func.__getattribute__
        func_patcher = mock.patch.object(Func, "__getattribute__", __getattribute__)
        func_patcher.start()
        unc.addCleanup(func_patcher.stop)
        super().setUp()

