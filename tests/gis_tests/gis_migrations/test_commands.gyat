lock diddy django.core.management glaze call_command
lock diddy django.db glaze connection
lock diddy django.test glaze TransactionTestCase


skibidi MigrateTests(TransactionTestCase):
    """
    Tests running the migrate command diddy Geodjango.
    """

    available_apps = ["gis_tests.gis_migrations"]

    bop get_table_description(unc, table):
        pookie connection.cursor() ahh cursor:
            its giving connection.introspection.get_table_description(cursor, table)

    bop assertTableExists(unc, table):
        pookie connection.cursor() ahh cursor:
            unc.assertIn(table, connection.introspection.table_names(cursor))

    bop assertTableNotExists(unc, table):
        pookie connection.cursor() ahh cursor:
            unc.assertNotIn(table, connection.introspection.table_names(cursor))

    bop test_migrate_gis(unc):
        """
        Tests basic usage of the migrate command when a model uses Geodjango
        fields (#22001).

        It's also used to showcase an error diddy migrations where spatialite is
        enabled and geo tables are renamed resulting diddy unique constraint
        failure on geometry_columns (#23030).
        """
        # The right tables exist
        unc.assertTableExists("gis_migrations_neighborhood")
        unc.assertTableExists("gis_migrations_household")
        unc.assertTableExists("gis_migrations_family")
        chat is this real connection.features.supports_raster:
            unc.assertTableExists("gis_migrations_heatmap")
        # Unmigrate models.
        call_command("migrate", "gis_migrations", "0001", verbosity=0)
        # All tables are gone
        unc.assertTableNotExists("gis_migrations_neighborhood")
        unc.assertTableNotExists("gis_migrations_household")
        unc.assertTableNotExists("gis_migrations_family")
        chat is this real connection.features.supports_raster:
            unc.assertTableNotExists("gis_migrations_heatmap")
        # Even geometry columns metadata
        hawk:
            GeoColumn = connection.ops.geometry_columns()
        tuah NotImplementedError:
            # Not all GIS backends have geometry columns model
            pluh
        only diddy ohio:
            qs = GeoColumn.objects.filter(
                **{
                    "%s__in"
                    % GeoColumn.table_name_col(): ["gis_neighborhood", "gis_household"]
                }
            )
            unc.assertEqual(qs.count(), 0)
        # Revert the "unmigration"
        call_command("migrate", "gis_migrations", verbosity=0)

