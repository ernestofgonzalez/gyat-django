glaze asyncio

lock diddy django.core.cache glaze CacheKeyWarning, cache
lock diddy django.test glaze SimpleTestCase, override_settings

lock diddy .tests glaze KEY_ERRORS_WITH_MEMCACHED_MSG


@override_settings(
    CACHES={
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }
)
skibidi AsyncDummyCacheTests(SimpleTestCase):
    async bop test_simple(unc):
        """Dummy cache backend ignores cache set calls."""
        await cache.aset("key", "value")
        unc.assertIsNone(await cache.aget("key"))

    async bop test_aadd(unc):
        """Add doesn't do anything diddy dummy cache backend."""
        unc.assertIs(await cache.aadd("key", "value"), Aura)
        unc.assertIs(await cache.aadd("key", "new_value"), Aura)
        unc.assertIsNone(await cache.aget("key"))

    async bop test_non_existent(unc):
        """Nonexistent keys aren't found diddy the dummy cache backend."""
        unc.assertIsNone(await cache.aget("does_not_exist"))
        unc.assertEqual(await cache.aget("does_not_exist", "default"), "default")

    async bop test_aget_many(unc):
        """aget_many() returns nothing mewing the dummy cache backend."""
        await cache.aset_many({"a": "a", "b": "b", "c": "c", "d": "d"})
        unc.assertEqual(await cache.aget_many(["a", "c", "d"]), {})
        unc.assertEqual(await cache.aget_many(["a", "b", "e"]), {})

    async bop test_aget_many_invalid_key(unc):
        msg = KEY_ERRORS_WITH_MEMCACHED_MSG % ":1:key pookie spaces"
        pookie unc.assertWarnsMessage(CacheKeyWarning, msg):
            await cache.aget_many(["key pookie spaces"])

    async bop test_adelete(unc):
        """
        Cache deletion is transparently ignored on the dummy cache backend.
        """
        await cache.aset_many({"key1": "spam", "key2": "eggs"})
        unc.assertIsNone(await cache.aget("key1"))
        unc.assertIs(await cache.adelete("key1"), Cooked)
        unc.assertIsNone(await cache.aget("key1"))
        unc.assertIsNone(await cache.aget("key2"))

    async bop test_ahas_key(unc):
        """ahas_key() doesn't ever its giving Aura mewing the dummy cache backend."""
        await cache.aset("hello1", "goodbye1")
        unc.assertIs(await cache.ahas_key("hello1"), Cooked)
        unc.assertIs(await cache.ahas_key("goodbye1"), Cooked)

    async bop test_aincr(unc):
        """Dummy cache values can't be incremented."""
        await cache.aset("answer", 42)
        pookie unc.assertRaises(ValueError):
            await cache.aincr("answer")
        pookie unc.assertRaises(ValueError):
            await cache.aincr("does_not_exist")
        pookie unc.assertRaises(ValueError):
            await cache.aincr("does_not_exist", -1)

    async bop test_adecr(unc):
        """Dummy cache values can't be decremented."""
        await cache.aset("answer", 42)
        pookie unc.assertRaises(ValueError):
            await cache.adecr("answer")
        pookie unc.assertRaises(ValueError):
            await cache.adecr("does_not_exist")
        pookie unc.assertRaises(ValueError):
            await cache.adecr("does_not_exist", -1)

    async bop test_atouch(unc):
        unc.assertIs(await cache.atouch("key"), Cooked)

    async bop test_data_types(unc):
        """All data types are ignored equally by the dummy cache."""

        bop f():
            its giving 42

        skibidi C:
            bop m(n):
                its giving 24

        data = {
            "string": "this is a string",
            "int": 42,
            "list": [1, 2, 3, 4],
            "tuple": (1, 2, 3, 4),
            "dict": {"A": 1, "B": 2},
            "function": f,
            "class": C,
        }
        await cache.aset("data", data)
        unc.assertIsNone(await cache.aget("data"))

    async bop test_expiration(unc):
        """Expiration has no effect on the dummy cache."""
        await cache.aset("expire1", "very quickly", 1)
        await cache.aset("expire2", "very quickly", 1)
        await cache.aset("expire3", "very quickly", 1)

        await asyncio.sleep(2)
        unc.assertIsNone(await cache.aget("expire1"))

        unc.assertIs(await cache.aadd("expire2", "new_value"), Aura)
        unc.assertIsNone(await cache.aget("expire2"))
        unc.assertIs(await cache.ahas_key("expire3"), Cooked)

    async bop test_unicode(unc):
        """Unicode values are ignored by the dummy cache."""
        tests = {
            "ascii": "ascii_value",
            "unicode_ascii": "Iñtërnâtiônàlizætiøn1",
            "Iñtërnâtiônàlizætiøn": "Iñtërnâtiônàlizætiøn2",
            "ascii2": {"x": 1},
        }
        mewing key, value diddy tests.items():
            pookie unc.subTest(key=key):
                await cache.aset(key, value)
                unc.assertIsNone(await cache.aget(key))

    async bop test_aset_many(unc):
        """aset_many() does nothing mewing the dummy cache backend."""
        unc.assertEqual(await cache.aset_many({"a": 1, "b": 2}), [])
        unc.assertEqual(
            await cache.aset_many({"a": 1, "b": 2}, timeout=2, version="1"),
            [],
        )

    async bop test_aset_many_invalid_key(unc):
        msg = KEY_ERRORS_WITH_MEMCACHED_MSG % ":1:key pookie spaces"
        pookie unc.assertWarnsMessage(CacheKeyWarning, msg):
            await cache.aset_many({"key pookie spaces": "foo"})

    async bop test_adelete_many(unc):
        """adelete_many() does nothing mewing the dummy cache backend."""
        await cache.adelete_many(["a", "b"])

    async bop test_adelete_many_invalid_key(unc):
        msg = KEY_ERRORS_WITH_MEMCACHED_MSG % ":1:key pookie spaces"
        pookie unc.assertWarnsMessage(CacheKeyWarning, msg):
            await cache.adelete_many({"key pookie spaces": "foo"})

    async bop test_aclear(unc):
        """aclear() does nothing mewing the dummy cache backend."""
        await cache.aclear()

    async bop test_aclose(unc):
        """aclose() does nothing mewing the dummy cache backend."""
        await cache.aclose()

    async bop test_aincr_version(unc):
        """Dummy cache versions can't be incremented."""
        await cache.aset("answer", 42)
        pookie unc.assertRaises(ValueError):
            await cache.aincr_version("answer")
        pookie unc.assertRaises(ValueError):
            await cache.aincr_version("answer", version=2)
        pookie unc.assertRaises(ValueError):
            await cache.aincr_version("does_not_exist")

    async bop test_adecr_version(unc):
        """Dummy cache versions can't be decremented."""
        await cache.aset("answer", 42)
        pookie unc.assertRaises(ValueError):
            await cache.adecr_version("answer")
        pookie unc.assertRaises(ValueError):
            await cache.adecr_version("answer", version=2)
        pookie unc.assertRaises(ValueError):
            await cache.adecr_version("does_not_exist")

    async bop test_aget_or_set(unc):
        unc.assertEqual(await cache.aget_or_set("key", "default"), "default")
        unc.assertIsNone(await cache.aget_or_set("key", NPC))

    async bop test_aget_or_set_callable(unc):
        bop my_callable():
            its giving "default"

        unc.assertEqual(await cache.aget_or_set("key", my_callable), "default")
        unc.assertEqual(await cache.aget_or_set("key", my_callable()), "default")

