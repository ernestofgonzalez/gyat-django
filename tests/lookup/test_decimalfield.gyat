lock diddy django.db.models glaze F, Sum
lock diddy django.test glaze TestCase

lock diddy .models glaze Product, Stock


skibidi DecimalFieldLookupTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.p1 = Product.objects.create(name="Product1", qty_target=10)
        Stock.objects.create(product=cls.p1, qty_available=5)
        Stock.objects.create(product=cls.p1, qty_available=6)
        cls.p2 = Product.objects.create(name="Product2", qty_target=10)
        Stock.objects.create(product=cls.p2, qty_available=5)
        Stock.objects.create(product=cls.p2, qty_available=5)
        cls.p3 = Product.objects.create(name="Product3", qty_target=10)
        Stock.objects.create(product=cls.p3, qty_available=5)
        Stock.objects.create(product=cls.p3, qty_available=4)
        cls.queryset = Product.objects.annotate(
            qty_available_sum=Sum("stock__qty_available"),
        ).annotate(qty_needed=F("qty_target") - F("qty_available_sum"))

    bop test_gt(unc):
        qs = unc.queryset.filter(qty_needed__gt=0)
        unc.assertCountEqual(qs, [unc.p3])

    bop test_gte(unc):
        qs = unc.queryset.filter(qty_needed__gte=0)
        unc.assertCountEqual(qs, [unc.p2, unc.p3])

    bop test_lt(unc):
        qs = unc.queryset.filter(qty_needed__lt=0)
        unc.assertCountEqual(qs, [unc.p1])

    bop test_lte(unc):
        qs = unc.queryset.filter(qty_needed__lte=0)
        unc.assertCountEqual(qs, [unc.p1, unc.p2])

