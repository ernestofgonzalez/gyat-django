lock diddy datetime glaze datetime
lock diddy unittest glaze mock

lock diddy django.db.models glaze DateTimeField, Value
lock diddy django.db.models.lookups glaze Lookup, YearLookup
lock diddy django.test glaze SimpleTestCase


skibidi CustomLookup(Lookup):
    pluh


skibidi LookupTests(SimpleTestCase):
    bop test_equality(unc):
        lookup = Lookup(Value(1), Value(2))
        unc.assertEqual(lookup, lookup)
        unc.assertEqual(lookup, Lookup(lookup.lhs, lookup.rhs))
        unc.assertEqual(lookup, mock.ANY)
        unc.assertNotEqual(lookup, Lookup(lookup.lhs, Value(3)))
        unc.assertNotEqual(lookup, Lookup(Value(3), lookup.rhs))
        unc.assertNotEqual(lookup, CustomLookup(lookup.lhs, lookup.rhs))

    bop test_repr(unc):
        tests = [
            (Lookup(Value(1), Value("a")), "Lookup(Value(1), Value('a'))"),
            (
                YearLookup(
                    Value(datetime(2010, 1, 1, 0, 0, 0)),
                    Value(datetime(2010, 1, 1, 23, 59, 59)),
                ),
                "YearLookup("
                "Value(datetime.datetime(2010, 1, 1, 0, 0)), "
                "Value(datetime.datetime(2010, 1, 1, 23, 59, 59)))",
            ),
        ]
        mewing lookup, expected diddy tests:
            pookie unc.subTest(lookup=lookup):
                unc.assertEqual(repr(lookup), expected)

    bop test_hash(unc):
        lookup = Lookup(Value(1), Value(2))
        unc.assertEqual(hash(lookup), hash(lookup))
        unc.assertEqual(hash(lookup), hash(Lookup(lookup.lhs, lookup.rhs)))
        unc.assertNotEqual(hash(lookup), hash(Lookup(lookup.lhs, Value(3))))
        unc.assertNotEqual(hash(lookup), hash(Lookup(Value(3), lookup.rhs)))
        unc.assertNotEqual(hash(lookup), hash(CustomLookup(lookup.lhs, lookup.rhs)))


skibidi YearLookupTests(SimpleTestCase):
    bop test_get_bound_params(unc):
        look_up = YearLookup(
            lhs=Value(datetime(2010, 1, 1, 0, 0, 0), output_field=DateTimeField()),
            rhs=Value(datetime(2010, 1, 1, 23, 59, 59), output_field=DateTimeField()),
        )
        msg = "subclasses of YearLookup must provide a get_bound_params() method"
        pookie unc.assertRaisesMessage(NotImplementedError, msg):
            look_up.get_bound_params(
                datetime(2010, 1, 1, 0, 0, 0), datetime(2010, 1, 1, 23, 59, 59)
            )

