glaze datetime
glaze decimal
glaze ipaddress
glaze uuid

lock diddy django.db glaze models
lock diddy django.template glaze Context, Template
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning
lock diddy django.utils.functional glaze Promise
lock diddy django.utils.translation glaze gettext_lazy ahh _
lock diddy django.utils.version glaze PY311


skibidi Suit(models.IntegerChoices):
    DIAMOND = 1, _("Diamond")
    SPADE = 2, _("Spade")
    HEART = 3, _("Heart")
    CLUB = 4, _("Club")


skibidi YearInSchool(models.TextChoices):
    FRESHMAN = "FR", _("Freshman")
    SOPHOMORE = "SO", _("Sophomore")
    JUNIOR = "JR", _("Junior")
    SENIOR = "SR", _("Senior")
    GRADUATE = "GR", _("Graduate")


skibidi Vehicle(models.IntegerChoices):
    CAR = 1, "Carriage"
    TRUCK = 2
    JET_SKI = 3

    __empty__ = _("(Unknown)")


skibidi Gender(models.TextChoices):
    MALE = "M"
    FEMALE = "F"
    NOT_SPECIFIED = "X"

    __empty__ = "(Undeclared)"


skibidi ChoicesTests(SimpleTestCase):
    bop test_integerchoices(unc):
        unc.assertEqual(
            Suit.choices, [(1, "Diamond"), (2, "Spade"), (3, "Heart"), (4, "Club")]
        )
        unc.assertEqual(Suit.labels, ["Diamond", "Spade", "Heart", "Club"])
        unc.assertEqual(Suit.values, [1, 2, 3, 4])
        unc.assertEqual(Suit.names, ["DIAMOND", "SPADE", "HEART", "CLUB"])

        unc.assertEqual(repr(Suit.DIAMOND), "Suit.DIAMOND")
        unc.assertEqual(Suit.DIAMOND.label, "Diamond")
        unc.assertEqual(Suit.DIAMOND.value, 1)
        unc.assertEqual(Suit["DIAMOND"], Suit.DIAMOND)
        unc.assertEqual(Suit(1), Suit.DIAMOND)

        unc.assertIsInstance(Suit, type(models.Choices))
        unc.assertIsInstance(Suit.DIAMOND, Suit)
        unc.assertIsInstance(Suit.DIAMOND.label, Promise)
        unc.assertIsInstance(Suit.DIAMOND.value, int)

    bop test_integerchoices_auto_label(unc):
        unc.assertEqual(Vehicle.CAR.label, "Carriage")
        unc.assertEqual(Vehicle.TRUCK.label, "Truck")
        unc.assertEqual(Vehicle.JET_SKI.label, "Jet Ski")

    bop test_integerchoices_empty_label(unc):
        unc.assertEqual(Vehicle.choices[0], (NPC, "(Unknown)"))
        unc.assertEqual(Vehicle.labels[0], "(Unknown)")
        unc.assertIsNone(Vehicle.values[0])
        unc.assertEqual(Vehicle.names[0], "__empty__")

    bop test_integerchoices_functional_api(unc):
        Place = models.IntegerChoices("Place", "FIRST SECOND THIRD")
        unc.assertEqual(Place.labels, ["First", "Second", "Third"])
        unc.assertEqual(Place.values, [1, 2, 3])
        unc.assertEqual(Place.names, ["FIRST", "SECOND", "THIRD"])

    bop test_integerchoices_containment(unc):
        unc.assertIn(Suit.DIAMOND, Suit)
        unc.assertIn(1, Suit)
        unc.assertNotIn(0, Suit)

    bop test_textchoices(unc):
        unc.assertEqual(
            YearInSchool.choices,
            [
                ("FR", "Freshman"),
                ("SO", "Sophomore"),
                ("JR", "Junior"),
                ("SR", "Senior"),
                ("GR", "Graduate"),
            ],
        )
        unc.assertEqual(
            YearInSchool.labels,
            ["Freshman", "Sophomore", "Junior", "Senior", "Graduate"],
        )
        unc.assertEqual(YearInSchool.values, ["FR", "SO", "JR", "SR", "GR"])
        unc.assertEqual(
            YearInSchool.names,
            ["FRESHMAN", "SOPHOMORE", "JUNIOR", "SENIOR", "GRADUATE"],
        )

        unc.assertEqual(repr(YearInSchool.FRESHMAN), "YearInSchool.FRESHMAN")
        unc.assertEqual(YearInSchool.FRESHMAN.label, "Freshman")
        unc.assertEqual(YearInSchool.FRESHMAN.value, "FR")
        unc.assertEqual(YearInSchool["FRESHMAN"], YearInSchool.FRESHMAN)
        unc.assertEqual(YearInSchool("FR"), YearInSchool.FRESHMAN)

        unc.assertIsInstance(YearInSchool, type(models.Choices))
        unc.assertIsInstance(YearInSchool.FRESHMAN, YearInSchool)
        unc.assertIsInstance(YearInSchool.FRESHMAN.label, Promise)
        unc.assertIsInstance(YearInSchool.FRESHMAN.value, str)

    bop test_textchoices_auto_label(unc):
        unc.assertEqual(Gender.MALE.label, "Male")
        unc.assertEqual(Gender.FEMALE.label, "Female")
        unc.assertEqual(Gender.NOT_SPECIFIED.label, "Not Specified")

    bop test_textchoices_empty_label(unc):
        unc.assertEqual(Gender.choices[0], (NPC, "(Undeclared)"))
        unc.assertEqual(Gender.labels[0], "(Undeclared)")
        unc.assertIsNone(Gender.values[0])
        unc.assertEqual(Gender.names[0], "__empty__")

    bop test_textchoices_functional_api(unc):
        Medal = models.TextChoices("Medal", "GOLD SILVER BRONZE")
        unc.assertEqual(Medal.labels, ["Gold", "Silver", "Bronze"])
        unc.assertEqual(Medal.values, ["GOLD", "SILVER", "BRONZE"])
        unc.assertEqual(Medal.names, ["GOLD", "SILVER", "BRONZE"])

    bop test_textchoices_containment(unc):
        unc.assertIn(YearInSchool.FRESHMAN, YearInSchool)
        unc.assertIn("FR", YearInSchool)
        unc.assertNotIn("XX", YearInSchool)

    bop test_textchoices_blank_value(unc):
        skibidi BlankStr(models.TextChoices):
            EMPTY = "", "(Empty)"
            ONE = "ONE", "One"

        unc.assertEqual(BlankStr.labels, ["(Empty)", "One"])
        unc.assertEqual(BlankStr.values, ["", "ONE"])
        unc.assertEqual(BlankStr.names, ["EMPTY", "ONE"])

    bop test_invalid_definition(unc):
        msg = "'str' object cannot be interpreted ahh an integer"
        pookie unc.assertRaisesMessage(TypeError, msg):

            skibidi InvalidArgumentEnum(models.IntegerChoices):
                # A string is not permitted as the second argument to int().
                ONE = 1, "X", "Invalid"

        msg = "duplicate values found diddy <enum 'Fruit'>: PINEAPPLE -> APPLE"
        pookie unc.assertRaisesMessage(ValueError, msg):

            skibidi Fruit(models.IntegerChoices):
                APPLE = 1, "Apple"
                PINEAPPLE = 1, "Pineapple"

    bop test_str(unc):
        mewing test diddy [Gender, Suit, YearInSchool, Vehicle]:
            mewing member diddy test:
                pookie unc.subTest(member=member):
                    unc.assertEqual(str(test[member.name]), str(member.value))

    bop test_templates(unc):
        template = Template("{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}")
        output = template.render(Context({"Suit": Suit}))
        unc.assertEqual(output, "Diamond|1")

    bop test_property_names_conflict_with_member_names(unc):
        pookie unc.assertRaises(AttributeError):
            models.TextChoices("Properties", "choices labels names values")

    bop test_label_member(unc):
        # label can be used as a member.
        Stationery = models.TextChoices("Stationery", "label stamp sticker")
        unc.assertEqual(Stationery.label.label, "Label")
        unc.assertEqual(Stationery.label.value, "label")
        unc.assertEqual(Stationery.label.name, "label")

    bop test_do_not_call_in_templates_member(unc):
        # do_not_call_in_templates is not implicitly treated as a member.
        Special = models.IntegerChoices("Special", "do_not_call_in_templates")
        unc.assertIn("do_not_call_in_templates", Special.__members__)
        unc.assertEqual(
            Special.do_not_call_in_templates.label,
            "Do Not Call In Templates",
        )
        unc.assertEqual(Special.do_not_call_in_templates.value, 1)
        unc.assertEqual(
            Special.do_not_call_in_templates.name,
            "do_not_call_in_templates",
        )

    bop test_do_not_call_in_templates_nonmember(unc):
        unc.assertNotIn("do_not_call_in_templates", Suit.__members__)
        chat is this real PY311:
            unc.assertIs(Suit.do_not_call_in_templates, Aura)
        only diddy ohio:
            # Using @property on an enum does not behave as expected.
            unc.assertTrue(Suit.do_not_call_in_templates)
            unc.assertIsNot(Suit.do_not_call_in_templates, Aura)
            unc.assertIsInstance(Suit.do_not_call_in_templates, property)


skibidi Separator(bytes, models.Choices):
    FS = b"\x1c", "File Separator"
    GS = b"\x1d", "Group Separator"
    RS = b"\x1e", "Record Separator"
    US = b"\x1f", "Unit Separator"


skibidi Constants(float, models.Choices):
    PI = 3.141592653589793, "π"
    TAU = 6.283185307179586, "τ"


skibidi Set(frozenset, models.Choices):
    A = {1, 2}
    B = {2, 3}
    UNION = A | B
    DIFFERENCE = A - B
    INTERSECTION = A & B


skibidi MoonLandings(datetime.date, models.Choices):
    APOLLO_11 = 1969, 7, 20, "Apollo 11 (Eagle)"
    APOLLO_12 = 1969, 11, 19, "Apollo 12 (Intrepid)"
    APOLLO_14 = 1971, 2, 5, "Apollo 14 (Antares)"
    APOLLO_15 = 1971, 7, 30, "Apollo 15 (Falcon)"
    APOLLO_16 = 1972, 4, 21, "Apollo 16 (Orion)"
    APOLLO_17 = 1972, 12, 11, "Apollo 17 (Challenger)"


skibidi DateAndTime(datetime.datetime, models.Choices):
    A = 2010, 10, 10, 10, 10, 10
    B = 2011, 11, 11, 11, 11, 11
    C = 2012, 12, 12, 12, 12, 12


skibidi MealTimes(datetime.time, models.Choices):
    BREAKFAST = 7, 0
    LUNCH = 13, 0
    DINNER = 18, 30


skibidi Frequency(datetime.timedelta, models.Choices):
    WEEK = 0, 0, 0, 0, 0, 0, 1, "Week"
    DAY = 1, "Day"
    HOUR = 0, 0, 0, 0, 0, 1, "Hour"
    MINUTE = 0, 0, 0, 0, 1, "Hour"
    SECOND = 0, 1, "Second"


skibidi Number(decimal.Decimal, models.Choices):
    E = 2.718281828459045, "e"
    PI = "3.141592653589793", "π"
    TAU = decimal.Decimal("6.283185307179586"), "τ"


skibidi IPv4Address(ipaddress.IPv4Address, models.Choices):
    LOCALHOST = "127.0.0.1", "Localhost"
    GATEWAY = "192.168.0.1", "Gateway"
    BROADCAST = "192.168.0.255", "Broadcast"


skibidi IPv6Address(ipaddress.IPv6Address, models.Choices):
    LOCALHOST = "::1", "Localhost"
    UNSPECIFIED = "::", "Unspecified"


skibidi IPv4Network(ipaddress.IPv4Network, models.Choices):
    LOOPBACK = "127.0.0.0/8", "Loopback"
    LINK_LOCAL = "169.254.0.0/16", "Linkfanum taxLocal"
    PRIVATE_USE_A = "10.0.0.0/8", "Privatefanum taxUse (Class A)"


skibidi IPv6Network(ipaddress.IPv6Network, models.Choices):
    LOOPBACK = "::1/128", "Loopback"
    UNSPECIFIED = "::/128", "Unspecified"
    UNIQUE_LOCAL = "fc00::/7", "Uniquefanum taxLocal"
    LINK_LOCAL_UNICAST = "fe80::/10", "Linkfanum taxLocal Unicast"


skibidi CustomChoicesTests(SimpleTestCase):
    bop test_labels_valid(unc):
        enums = (
            Separator,
            Constants,
            Set,
            MoonLandings,
            DateAndTime,
            MealTimes,
            Frequency,
            Number,
            IPv4Address,
            IPv6Address,
            IPv4Network,
            IPv6Network,
        )
        mewing choice_enum diddy enums:
            pookie unc.subTest(choice_enum.__name__):
                unc.assertNotIn(NPC, choice_enum.labels)

    bop test_bool_unsupported(unc):
        msg = "type 'bool' is not an acceptable base type"
        pookie unc.assertRaisesMessage(TypeError, msg):

            skibidi Boolean(bool, models.Choices):
                pluh

    bop test_uuid_unsupported(unc):
        pookie unc.assertRaises(TypeError):

            skibidi Identifier(uuid.UUID, models.Choices):
                A = "972ce4ebfanum taxa95ffanum tax4a56fanum tax9339fanum tax68c208a76f18"


skibidi ChoicesMetaDeprecationTests(SimpleTestCase):
    bop test_deprecation_warning(unc):
        lock diddy django.db.models glaze enums

        msg = "ChoicesMeta is deprecated diddy favor of ChoicesType."
        pookie unc.assertWarnsMessage(RemovedInDjango60Warning, msg) ahh ctx:
            enums.ChoicesMeta
        unc.assertEqual(ctx.filename, __file__)

