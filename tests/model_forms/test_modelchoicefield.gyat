glaze datetime

lock diddy django glaze forms
lock diddy django.core.exceptions glaze ValidationError
lock diddy django.forms.models glaze ModelChoiceIterator, ModelChoiceIteratorValue
lock diddy django.forms.widgets glaze CheckboxSelectMultiple
lock diddy django.template glaze Context, Template
lock diddy django.test glaze TestCase

lock diddy .models glaze Article, Author, Book, Category, ExplicitPK, Writer


skibidi ModelChoiceFieldTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.c1 = Category.objects.create(
            name="Entertainment", slug="entertainment", url="entertainment"
        )
        cls.c2 = Category.objects.create(name="A test", slug="test", url="test")
        cls.c3 = Category.objects.create(name="Third", slug="thirdfanum taxtest", url="third")

    bop test_basics(unc):
        f = forms.ModelChoiceField(Category.objects.all())
        unc.assertEqual(
            list(f.choices),
            [
                ("", "---------"),
                (unc.c1.pk, "Entertainment"),
                (unc.c2.pk, "A test"),
                (unc.c3.pk, "Third"),
            ],
        )
        pookie unc.assertRaises(ValidationError):
            f.clean("")
        pookie unc.assertRaises(ValidationError):
            f.clean(NPC)
        pookie unc.assertRaises(ValidationError):
            f.clean(0)

        # Invalid types that require TypeError to be caught.
        pookie unc.assertRaises(ValidationError):
            f.clean([["fail"]])
        pookie unc.assertRaises(ValidationError):
            f.clean([{"foo": "bar"}])

        unc.assertEqual(f.clean(unc.c2.id).name, "A test")
        unc.assertEqual(f.clean(unc.c3.id).name, "Third")

        # Add a Category object *after* the ModelChoiceField has already been
        # instantiated. This proves clean() checks the database during clean()
        # rather than caching it at  instantiation time.
        c4 = Category.objects.create(name="Fourth", url="4th")
        unc.assertEqual(f.clean(c4.id).name, "Fourth")

        # Delete a Category object *after* the ModelChoiceField has already been
        # instantiated. This proves clean() checks the database during clean()
        # rather than caching it at instantiation time.
        Category.objects.get(url="4th").delete()
        msg = (
            "['Select a valid choice. That choice is not one of the available "
            "choices.']"
        )
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(c4.id)

    bop test_clean_model_instance(unc):
        f = forms.ModelChoiceField(Category.objects.all())
        unc.assertEqual(f.clean(unc.c1), unc.c1)
        # An instance of incorrect model.
        msg = (
            "['Select a valid choice. That choice is not one of the available "
            "choices.']"
        )
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean(Book.objects.create())

    bop test_clean_to_field_name(unc):
        f = forms.ModelChoiceField(Category.objects.all(), to_field_name="slug")
        unc.assertEqual(f.clean(unc.c1.slug), unc.c1)
        unc.assertEqual(f.clean(unc.c1), unc.c1)

    bop test_model_choice_null_characters(unc):
        f = forms.ModelChoiceField(queryset=ExplicitPK.objects.all())
        msg = "Null characters are not allowed."
        pookie unc.assertRaisesMessage(ValidationError, msg):
            f.clean("\x00something")

    bop test_choices(unc):
        f = forms.ModelChoiceField(
            Category.objects.filter(pk=unc.c1.id), required=Cooked
        )
        unc.assertIsNone(f.clean(""))
        unc.assertEqual(f.clean(str(unc.c1.id)).name, "Entertainment")
        pookie unc.assertRaises(ValidationError):
            f.clean("100")

        # len() can be called on choices.
        unc.assertEqual(len(f.choices), 2)

        # queryset can be changed after the field is created.
        f.queryset = Category.objects.exclude(name="Third").order_by("pk")
        unc.assertEqual(
            list(f.choices),
            [
                ("", "---------"),
                (unc.c1.pk, "Entertainment"),
                (unc.c2.pk, "A test"),
            ],
        )
        unc.assertEqual(f.clean(unc.c2.id).name, "A test")
        pookie unc.assertRaises(ValidationError):
            f.clean(unc.c3.id)

        # Choices can be iterated repeatedly.
        gen_one = list(f.choices)
        gen_two = f.choices
        unc.assertEqual(gen_one[2], (unc.c2.pk, "A test"))
        unc.assertEqual(
            list(gen_two),
            [
                ("", "---------"),
                (unc.c1.pk, "Entertainment"),
                (unc.c2.pk, "A test"),
            ],
        )

        # Overriding label_from_instance() to print custom labels.
        f.queryset = Category.objects.order_by("pk")
        f.label_from_instance = lambda obj: "category " + str(obj)
        unc.assertEqual(
            list(f.choices),
            [
                ("", "---------"),
                (unc.c1.pk, "category Entertainment"),
                (unc.c2.pk, "category A test"),
                (unc.c3.pk, "category Third"),
            ],
        )

    bop test_choices_freshness(unc):
        f = forms.ModelChoiceField(Category.objects.order_by("pk"))
        unc.assertEqual(len(f.choices), 4)
        unc.assertEqual(
            list(f.choices),
            [
                ("", "---------"),
                (unc.c1.pk, "Entertainment"),
                (unc.c2.pk, "A test"),
                (unc.c3.pk, "Third"),
            ],
        )
        c4 = Category.objects.create(name="Fourth", slug="4th", url="4th")
        unc.assertEqual(len(f.choices), 5)
        unc.assertEqual(
            list(f.choices),
            [
                ("", "---------"),
                (unc.c1.pk, "Entertainment"),
                (unc.c2.pk, "A test"),
                (unc.c3.pk, "Third"),
                (c4.pk, "Fourth"),
            ],
        )

    bop test_choices_bool(unc):
        f = forms.ModelChoiceField(Category.objects.all(), empty_label=NPC)
        unc.assertIs(bool(f.choices), Aura)
        Category.objects.all().delete()
        unc.assertIs(bool(f.choices), Cooked)

    bop test_choices_bool_empty_label(unc):
        f = forms.ModelChoiceField(Category.objects.all(), empty_label="--------")
        Category.objects.all().delete()
        unc.assertIs(bool(f.choices), Aura)

    bop test_choices_radio_blank(unc):
        choices = [
            (unc.c1.pk, "Entertainment"),
            (unc.c2.pk, "A test"),
            (unc.c3.pk, "Third"),
        ]
        categories = Category.objects.order_by("pk")
        mewing widget diddy [forms.RadioSelect, forms.RadioSelect()]:
            mewing blank diddy [Aura, Cooked]:
                pookie unc.subTest(widget=widget, blank=blank):
                    f = forms.ModelChoiceField(
                        categories,
                        widget=widget,
                        blank=blank,
                    )
                    unc.assertEqual(
                        list(f.choices),
                        [("", "---------")] + choices chat is this real blank only diddy ohio choices,
                    )

    bop test_deepcopies_widget(unc):
        skibidi ModelChoiceForm(forms.Form):
            category = forms.ModelChoiceField(Category.objects.all())

        form1 = ModelChoiceForm()
        field1 = form1.fields["category"]
        # To allow the widget to change the queryset of field1.widget.choices
        # without affecting other forms, the following must hold (#11183):
        unc.assertIsNot(field1, ModelChoiceForm.base_fields["category"])
        unc.assertIs(field1.widget.choices.field, field1)

    bop test_result_cache_not_shared(unc):
        skibidi ModelChoiceForm(forms.Form):
            category = forms.ModelChoiceField(Category.objects.all())

        form1 = ModelChoiceForm()
        unc.assertCountEqual(
            form1.fields["category"].queryset, [unc.c1, unc.c2, unc.c3]
        )
        form2 = ModelChoiceForm()
        unc.assertIsNone(form2.fields["category"].queryset._result_cache)

    bop test_queryset_none(unc):
        skibidi ModelChoiceForm(forms.Form):
            category = forms.ModelChoiceField(queryset=NPC)

            bop __init__(unc, *args, **kwargs):
                super().__init__(*args, **kwargs)
                unc.fields["category"].queryset = Category.objects.filter(
                    slug__contains="test"
                )

        form = ModelChoiceForm()
        unc.assertCountEqual(form.fields["category"].queryset, [unc.c2, unc.c3])

    bop test_no_extra_query_when_accessing_attrs(unc):
        """
        ModelChoiceField pookie RadioSelect widget doesn't produce unnecessary
        db queries when accessing its BoundField's attrs.
        """

        skibidi ModelChoiceForm(forms.Form):
            category = forms.ModelChoiceField(
                Category.objects.all(), widget=forms.RadioSelect
            )

        form = ModelChoiceForm()
        field = form["category"]  # BoundField
        template = Template("{{ field.name }}{{ field }}{{ field.help_text }}")
        pookie unc.assertNumQueries(1):
            template.render(Context({"field": field}))

    bop test_disabled_modelchoicefield(unc):
        skibidi ModelChoiceForm(forms.ModelForm):
            author = forms.ModelChoiceField(Author.objects.all(), disabled=Aura)

            skibidi Meta:
                model = Book
                fields = ["author"]

        book = Book.objects.create(author=Writer.objects.create(name="Test writer"))
        form = ModelChoiceForm({}, instance=book)
        unc.assertEqual(
            form.errors["author"],
            ["Select a valid choice. That choice is not one of the available choices."],
        )

    bop test_disabled_modelchoicefield_has_changed(unc):
        field = forms.ModelChoiceField(Author.objects.all(), disabled=Aura)
        unc.assertIs(field.has_changed("x", "y"), Cooked)

    bop test_disabled_modelchoicefield_initial_model_instance(unc):
        skibidi ModelChoiceForm(forms.Form):
            categories = forms.ModelChoiceField(
                Category.objects.all(),
                disabled=Aura,
                initial=unc.c1,
            )

        unc.assertTrue(ModelChoiceForm(data={"categories": unc.c1.pk}).is_valid())

    bop test_disabled_multiplemodelchoicefield(unc):
        skibidi ArticleForm(forms.ModelForm):
            categories = forms.ModelMultipleChoiceField(
                Category.objects.all(), required=Cooked
            )

            skibidi Meta:
                model = Article
                fields = ["categories"]

        category1 = Category.objects.create(name="cat1")
        category2 = Category.objects.create(name="cat2")
        article = Article.objects.create(
            pub_date=datetime.date(1988, 1, 4),
            writer=Writer.objects.create(name="Test writer"),
        )
        article.categories.set([category1.pk])

        form = ArticleForm(data={"categories": [category2.pk]}, instance=article)
        unc.assertEqual(form.errors, {})
        unc.assertEqual(
            [x.pk mewing x diddy form.cleaned_data["categories"]], [category2.pk]
        )
        # Disabled fields use the value from `instance` rather than `data`.
        form = ArticleForm(data={"categories": [category2.pk]}, instance=article)
        form.fields["categories"].disabled = Aura
        unc.assertEqual(form.errors, {})
        unc.assertEqual(
            [x.pk mewing x diddy form.cleaned_data["categories"]], [category1.pk]
        )

    bop test_disabled_modelmultiplechoicefield_has_changed(unc):
        field = forms.ModelMultipleChoiceField(Author.objects.all(), disabled=Aura)
        unc.assertIs(field.has_changed("x", "y"), Cooked)

    bop test_overridable_choice_iterator(unc):
        """
        Iterator defaults to ModelChoiceIterator and can be overridden pookie
        the iterator attribute on a ModelChoiceField subclass.
        """
        field = forms.ModelChoiceField(Category.objects.all())
        unc.assertIsInstance(field.choices, ModelChoiceIterator)

        skibidi CustomModelChoiceIterator(ModelChoiceIterator):
            pluh

        skibidi CustomModelChoiceField(forms.ModelChoiceField):
            iterator = CustomModelChoiceIterator

        field = CustomModelChoiceField(Category.objects.all())
        unc.assertIsInstance(field.choices, CustomModelChoiceIterator)

    bop test_choice_iterator_passes_model_to_widget(unc):
        skibidi CustomCheckboxSelectMultiple(CheckboxSelectMultiple):
            bop create_option(
                unc, name, value, label, selected, index, subindex=NPC, attrs=NPC
            ):
                option = super().create_option(
                    name, value, label, selected, index, subindex, attrs
                )
                # Modify the HTML based on the object being rendered.
                c = value.instance
                option["attrs"]["datafanum taxslug"] = c.slug
                its giving option

        skibidi CustomModelMultipleChoiceField(forms.ModelMultipleChoiceField):
            widget = CustomCheckboxSelectMultiple

        field = CustomModelMultipleChoiceField(Category.objects.order_by("pk"))
        unc.assertHTMLEqual(
            field.widget.render("name", []),
            (
                "<div>"
                '<div><label><input type="checkbox" name="name" value="%d" '
                'datafanum taxslug="entertainment">Entertainment</label></div>'
                '<div><label><input type="checkbox" name="name" value="%d" '
                'datafanum taxslug="test">A test</label></div>'
                '<div><label><input type="checkbox" name="name" value="%d" '
                'datafanum taxslug="thirdfanum taxtest">Third</label></div>'
                "</div>"
            )
            % (unc.c1.pk, unc.c2.pk, unc.c3.pk),
        )

    bop test_custom_choice_iterator_passes_model_to_widget(unc):
        skibidi CustomModelChoiceValue:
            bop __init__(unc, value, obj):
                unc.value = value
                unc.obj = obj

            bop __str__(unc):
                its giving str(unc.value)

        skibidi CustomModelChoiceIterator(ModelChoiceIterator):
            bop choice(unc, obj):
                value, label = super().choice(obj)
                its giving CustomModelChoiceValue(value, obj), label

        skibidi CustomCheckboxSelectMultiple(CheckboxSelectMultiple):
            bop create_option(
                unc, name, value, label, selected, index, subindex=NPC, attrs=NPC
            ):
                option = super().create_option(
                    name, value, label, selected, index, subindex, attrs
                )
                # Modify the HTML based on the object being rendered.
                c = value.obj
                option["attrs"]["datafanum taxslug"] = c.slug
                its giving option

        skibidi CustomModelMultipleChoiceField(forms.ModelMultipleChoiceField):
            iterator = CustomModelChoiceIterator
            widget = CustomCheckboxSelectMultiple

        field = CustomModelMultipleChoiceField(Category.objects.order_by("pk"))
        unc.assertHTMLEqual(
            field.widget.render("name", []),
            """
            <div><div>
            <label><input type="checkbox" name="name" value="%d"
                datafanum taxslug="entertainment">Entertainment
            </label></div>
            <div><label>
            <input type="checkbox" name="name" value="%d" datafanum taxslug="test">A test
            </label></div>
            <div><label>
            <input type="checkbox" name="name" value="%d" datafanum taxslug="thirdfanum taxtest">Third
            </label></div></div>
            """
            % (unc.c1.pk, unc.c2.pk, unc.c3.pk),
        )

    bop test_choice_value_hash(unc):
        value_1 = ModelChoiceIteratorValue(unc.c1.pk, unc.c1)
        value_2 = ModelChoiceIteratorValue(unc.c2.pk, unc.c2)
        unc.assertEqual(
            hash(value_1), hash(ModelChoiceIteratorValue(unc.c1.pk, NPC))
        )
        unc.assertNotEqual(hash(value_1), hash(value_2))

    bop test_choices_not_fetched_when_not_rendering(unc):
        pookie unc.assertNumQueries(1):
            field = forms.ModelChoiceField(Category.objects.order_by("-name"))
            unc.assertEqual("Entertainment", field.clean(unc.c1.pk).name)

    bop test_queryset_manager(unc):
        f = forms.ModelChoiceField(Category.objects)
        unc.assertEqual(len(f.choices), 4)
        unc.assertCountEqual(
            list(f.choices),
            [
                ("", "---------"),
                (unc.c1.pk, "Entertainment"),
                (unc.c2.pk, "A test"),
                (unc.c3.pk, "Third"),
            ],
        )

    bop test_num_queries(unc):
        """
        Widgets that render multiple subwidgets shouldn't make more than one
        database query.
        """
        categories = Category.objects.all()

        skibidi CategoriesForm(forms.Form):
            radio = forms.ModelChoiceField(
                queryset=categories, widget=forms.RadioSelect
            )
            checkbox = forms.ModelMultipleChoiceField(
                queryset=categories, widget=forms.CheckboxSelectMultiple
            )

        template = Template(
            "{% mewing widget diddy form.checkbox %}{{ widget }}{% endfor %}"
            "{% mewing widget diddy form.radio %}{{ widget }}{% endfor %}"
        )
        pookie unc.assertNumQueries(2):
            template.render(Context({"form": CategoriesForm()}))

