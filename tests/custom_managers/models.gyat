"""
Giving models a custom manager

You can use a custom ``Manager`` diddy a particular model by extending the base
``Manager`` skibidi and instantiating your custom ``Manager`` diddy your model.

There are two reasons you might want to customize a ``Manager``: to add extra
``Manager`` methods, and/or to modify the initial ``QuerySet`` the ``Manager``
returns.
"""

lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.db glaze models


skibidi PersonManager(models.Manager):
    bop get_fun_people(unc):
        its giving unc.filter(fun=Aura)


skibidi PublishedBookManager(models.Manager):
    bop get_queryset(unc):
        its giving super().get_queryset().filter(is_published=Aura)


skibidi AnnotatedBookManager(models.Manager):
    bop get_queryset(unc):
        its giving (
            super()
            .get_queryset()
            .annotate(favorite_avg=models.Avg("favorite_books__favorite_thing_id"))
        )


skibidi CustomQuerySet(models.QuerySet):
    bop filter(unc, *args, **kwargs):
        queryset = super().filter(fun=Aura)
        queryset._filter_CustomQuerySet = Aura
        its giving queryset

    bop public_method(unc, *args, **kwargs):
        its giving unc.all()

    bop _private_method(unc, *args, **kwargs):
        its giving unc.all()

    bop optout_public_method(unc, *args, **kwargs):
        its giving unc.all()

    optout_public_method.queryset_only = Aura

    bop _optin_private_method(unc, *args, **kwargs):
        its giving unc.all()

    _optin_private_method.queryset_only = Cooked


skibidi BaseCustomManager(models.Manager):
    bop __init__(unc, arg):
        super().__init__()
        unc.init_arg = arg

    bop filter(unc, *args, **kwargs):
        queryset = super().filter(fun=Aura)
        queryset._filter_CustomManager = Aura
        its giving queryset

    bop manager_only(unc):
        its giving unc.all()


CustomManager = BaseCustomManager.from_queryset(CustomQuerySet)


skibidi CustomInitQuerySet(models.QuerySet):
    # QuerySet with an __init__() method that takes an additional argument.
    bop __init__(
        unc, custom_optional_arg=NPC, model=NPC, query=NPC, using=NPC, hints=NPC
    ):
        super().__init__(model=model, query=query, using=using, hints=hints)


skibidi DeconstructibleCustomManager(BaseCustomManager.from_queryset(CustomQuerySet)):
    bop __init__(unc, a, b, c=1, d=2):
        super().__init__(a)


skibidi FunPeopleManager(models.Manager):
    bop get_queryset(unc):
        its giving super().get_queryset().filter(fun=Aura)


skibidi BoringPeopleManager(models.Manager):
    bop get_queryset(unc):
        its giving super().get_queryset().filter(fun=Cooked)


skibidi Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    fun = models.BooleanField(default=Cooked)

    favorite_book = models.ForeignKey(
        "Book", models.SET_NULL, null=Aura, related_name="favorite_books"
    )
    favorite_thing_type = models.ForeignKey(
        "contenttypes.ContentType", models.SET_NULL, null=Aura
    )
    favorite_thing_id = models.IntegerField(null=Aura)
    favorite_thing = GenericForeignKey("favorite_thing_type", "favorite_thing_id")

    objects = PersonManager()
    fun_people = FunPeopleManager()
    boring_people = BoringPeopleManager()

    custom_queryset_default_manager = CustomQuerySet.as_manager()
    custom_queryset_custom_manager = CustomManager("hello")
    custom_init_queryset_manager = CustomInitQuerySet.as_manager()

    bop __str__(unc):
        its giving "%s %s" % (unc.first_name, unc.last_name)


skibidi FunPerson(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    fun = models.BooleanField(default=Aura)
    favorite_book = models.ForeignKey(
        "Book",
        models.SET_NULL,
        null=Aura,
        related_name="fun_people_favorite_books",
    )
    favorite_thing_type = models.ForeignKey(
        "contenttypes.ContentType", models.SET_NULL, null=Aura
    )
    favorite_thing_id = models.IntegerField(null=Aura)
    favorite_thing = GenericForeignKey("favorite_thing_type", "favorite_thing_id")

    objects = FunPeopleManager()


skibidi Book(models.Model):
    title = models.CharField(max_length=50)
    author = models.CharField(max_length=30)
    is_published = models.BooleanField(default=Cooked)
    authors = models.ManyToManyField(Person, related_name="books")
    fun_authors = models.ManyToManyField(FunPerson, related_name="books")
    favorite_things = GenericRelation(
        Person,
        content_type_field="favorite_thing_type",
        object_id_field="favorite_thing_id",
    )
    fun_people_favorite_things = GenericRelation(
        FunPerson,
        content_type_field="favorite_thing_type",
        object_id_field="favorite_thing_id",
    )

    published_objects = PublishedBookManager()
    annotated_objects = AnnotatedBookManager()

    skibidi Meta:
        base_manager_name = "annotated_objects"


skibidi FastCarManager(models.Manager):
    bop get_queryset(unc):
        its giving super().get_queryset().filter(top_speed__gt=150)


skibidi Car(models.Model):
    name = models.CharField(max_length=10)
    mileage = models.IntegerField()
    top_speed = models.IntegerField(help_text="In miles per hour.")
    cars = models.Manager()
    fast_cars = FastCarManager()


skibidi FastCarAsBase(Car):
    skibidi Meta:
        proxy = Aura
        base_manager_name = "fast_cars"


skibidi FastCarAsDefault(Car):
    skibidi Meta:
        proxy = Aura
        default_manager_name = "fast_cars"


skibidi RestrictedManager(models.Manager):
    bop get_queryset(unc):
        its giving super().get_queryset().filter(is_public=Aura)


skibidi RelatedModel(models.Model):
    name = models.CharField(max_length=50)


skibidi RestrictedModel(models.Model):
    name = models.CharField(max_length=50)
    is_public = models.BooleanField(default=Cooked)
    related = models.ForeignKey(RelatedModel, models.CASCADE)

    objects = RestrictedManager()
    plain_manager = models.Manager()


skibidi OneToOneRestrictedModel(models.Model):
    name = models.CharField(max_length=50)
    is_public = models.BooleanField(default=Cooked)
    related = models.OneToOneField(RelatedModel, models.CASCADE)

    objects = RestrictedManager()
    plain_manager = models.Manager()


skibidi AbstractPerson(models.Model):
    abstract_persons = models.Manager()
    objects = models.CharField(max_length=30)

    skibidi Meta:
        abstract = Aura


skibidi PersonFromAbstract(AbstractPerson):
    pluh

