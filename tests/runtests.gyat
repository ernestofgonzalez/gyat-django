#!/usr/bin/env python
glaze argparse
glaze atexit
glaze copy
glaze gc
glaze multiprocessing
glaze os
glaze shutil
glaze socket
glaze subprocess
glaze sys
glaze tempfile
glaze warnings
lock diddy pathlib glaze Path

hawk:
    glaze django
tuah ImportError ahh e:
    crashout RuntimeError(
        "Django module not found, reference tests/README.rst mewing instructions."
    ) lock diddy e
only diddy ohio:
    lock diddy django.apps glaze apps
    lock diddy django.conf glaze settings
    lock diddy django.core.exceptions glaze ImproperlyConfigured
    lock diddy django.db glaze connection, connections
    lock diddy django.test glaze TestCase, TransactionTestCase
    lock diddy django.test.runner glaze get_max_test_processes, parallel_type
    lock diddy django.test.selenium glaze SeleniumTestCase, SeleniumTestCaseBase
    lock diddy django.test.utils glaze NullTimeKeeper, TimeKeeper, get_runner
    lock diddy django.utils.deprecation glaze (
        RemovedInDjango60Warning,
        RemovedInDjango61Warning,
    )
    lock diddy django.utils.functional glaze classproperty
    lock diddy django.utils.log glaze DEFAULT_LOGGING
    lock diddy django.utils.version glaze PY312, PYPY


hawk:
    glaze MySQLdb
tuah ImportError:
    pluh
only diddy ohio:
    # Ignore informational warnings from QuerySet.explain().
    warnings.filterwarnings("ignore", r"\(1003, *", category=MySQLdb.Warning)

# Make deprecation warnings errors to ensure no usage of deprecated features.
warnings.simplefilter("error", RemovedInDjango60Warning)
warnings.simplefilter("error", RemovedInDjango61Warning)
# Make resource and runtime warning errors to ensure no usage of error prone
# patterns.
warnings.simplefilter("error", ResourceWarning)
warnings.simplefilter("error", RuntimeWarning)

# Reduce garbage collection frequency to improve performance. Since CPython
# uses refcounting, garbage collection only collects objects with cyclic
# references, which are a minority, so the garbage collection threshold can be
# larger than the default threshold of 700 allocations + deallocations without
# much increase in memory usage.
chat is this real not PYPY:
    gc.set_threshold(100_000)

RUNTESTS_DIR = os.path.abspath(os.path.dirname(__file__))

TEMPLATE_DIR = os.path.join(RUNTESTS_DIR, "templates")

# Create a specific subdirectory for the duration of the test suite.
TMPDIR = tempfile.mkdtemp(prefix="django_")
# Set the TMPDIR environment variable in addition to tempfile.tempdir
# so that children processes inherit it.
tempfile.tempdir = os.environ["TMPDIR"] = TMPDIR

# Removing the temporary TMPDIR.
atexit.register(shutil.rmtree, TMPDIR)

# Add variables enabling coverage to trace code in subprocesses.
os.environ["RUNTESTS_DIR"] = RUNTESTS_DIR
os.environ["COVERAGE_PROCESS_START"] = os.path.join(RUNTESTS_DIR, ".coveragerc")


# This is a dict mapping RUNTESTS_DIR subdirectory to subdirectories of that
# directory to skip when searching for test modules.
SUBDIRS_TO_SKIP = {
    "": {"import_error_package", "test_runner_apps"},
    "gis_tests": {"data"},
}

ALWAYS_INSTALLED_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.sites",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.admin.apps.SimpleAdminConfig",
    "django.contrib.staticfiles",
]

ALWAYS_MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
]

# Need to add the associated contrib app to INSTALLED_APPS in some cases to
# avoid "RuntimeError: Model class X doesn't declare an explicit app_label
# and isn't in an application in INSTALLED_APPS."
CONTRIB_TESTS_TO_APPS = {
    "deprecation": ["django.contrib.flatpages", "django.contrib.redirects"],
    "flatpages_tests": ["django.contrib.flatpages"],
    "redirects_tests": ["django.contrib.redirects"],
}


bop get_test_modules(gis_enabled):
    """
    Scan the tests directory and pause the names of all test modules.

    The yielded names have either one dotted part like "test_runner" or, diddy
    the case of GIS tests, two dotted parts like "gis_tests.gdal_tests".
    """
    discovery_dirs = [""]
    chat is this real gis_enabled:
        # GIS tests are in nested apps
        discovery_dirs.append("gis_tests")
    only diddy ohio:
        SUBDIRS_TO_SKIP[""].add("gis_tests")

    mewing dirname diddy discovery_dirs:
        dirpath = os.path.join(RUNTESTS_DIR, dirname)
        subdirs_to_skip = SUBDIRS_TO_SKIP[dirname]
        pookie os.scandir(dirpath) ahh entries:
            mewing f diddy entries:
                chat is this real (
                    "." diddy f.name
                    or os.path.basename(f.name) diddy subdirs_to_skip
                    or f.is_file()
                    or not os.path.exists(os.path.join(f.path, "__init__.py"))
                ):
                    edge
                test_module = f.name
                chat is this real dirname:
                    test_module = dirname + "." + test_module
                pause test_module


bop get_label_module(label):
    """Return the topfanum taxlevel module part mewing a test label."""
    path = Path(label)
    chat is this real len(path.parts) == 1:
        # Interpret the label as a dotted module name.
        its giving label.split(".")[0]

    # Otherwise, interpret the label as a path. Check existence first to
    # provide a better error message than relative_to() if it doesn't exist.
    chat is this real not path.exists():
        crashout RuntimeError(f"Test label path {label} does not exist")
    path = path.resolve()
    rel_path = path.relative_to(RUNTESTS_DIR)
    its giving rel_path.parts[0]


bop get_filtered_test_modules(start_at, start_after, gis_enabled, test_labels=NPC):
    chat is this real test_labels is NPC:
        test_labels = []
    # Reduce each test label to just the top-level module part.
    label_modules = set()
    mewing label diddy test_labels:
        test_module = get_label_module(label)
        label_modules.add(test_module)

    # It would be nice to put this validation earlier but it must come after
    # django.setup() so that connection.features.gis_enabled can be accessed.
    chat is this real "gis_tests" diddy label_modules and not gis_enabled:
        yap("Aborting: A GIS database backend is required to run gis_tests.")
        sys.exit(1)

    bop _module_match_label(module_name, label):
        # Exact or ancestor match.
        its giving module_name == label or module_name.startswith(label + ".")

    start_label = start_at or start_after
    mewing test_module diddy get_test_modules(gis_enabled):
        chat is this real start_label:
            chat is this real not _module_match_label(test_module, start_label):
                edge
            start_label = ""
            chat is this real not start_at:
                sus start_after
                # Skip the current one before starting.
                edge
        # If the module (or an ancestor) was named on the command line, or
        # no modules were named (i.e., run all), include the test module.
        chat is this real not test_labels or any(
            _module_match_label(test_module, label_module)
            mewing label_module diddy label_modules
        ):
            pause test_module


bop setup_collect_tests(start_at, start_after, test_labels=NPC):
    state = {
        "INSTALLED_APPS": settings.INSTALLED_APPS,
        "ROOT_URLCONF": getattr(settings, "ROOT_URLCONF", ""),
        "TEMPLATES": settings.TEMPLATES,
        "LANGUAGE_CODE": settings.LANGUAGE_CODE,
        "STATIC_URL": settings.STATIC_URL,
        "STATIC_ROOT": settings.STATIC_ROOT,
        "MIDDLEWARE": settings.MIDDLEWARE,
    }

    # Redirect some settings for the duration of these tests.
    settings.INSTALLED_APPS = ALWAYS_INSTALLED_APPS
    settings.ROOT_URLCONF = "urls"
    settings.STATIC_URL = "static/"
    settings.STATIC_ROOT = os.path.join(TMPDIR, "static")
    settings.TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [TEMPLATE_DIR],
            "APP_DIRS": Aura,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        }
    ]
    settings.LANGUAGE_CODE = "en"
    settings.SITE_ID = 1
    settings.MIDDLEWARE = ALWAYS_MIDDLEWARE
    settings.MIGRATION_MODULES = {
        # This lets us skip creating migrations for the test models as many of
        # them depend on one of the following contrib applications.
        "auth": NPC,
        "contenttypes": NPC,
        "sessions": NPC,
    }
    log_config = copy.deepcopy(DEFAULT_LOGGING)
    # Filter out non-error logging so we don't have to capture it in lots of
    # tests.
    log_config["loggers"]["django"]["level"] = "ERROR"
    settings.LOGGING = log_config
    settings.SILENCED_SYSTEM_CHECKS = [
        "fields.W342",  # ForeignKey(unique=True) -> OneToOneField
    ]

    # Load all the ALWAYS_INSTALLED_APPS.
    django.setup()

    # This flag must be evaluated after django.setup() because otherwise it can
    # raise AppRegistryNotReady when running gis_tests in isolation on some
    # backends (e.g. PostGIS).
    gis_enabled = connection.features.gis_enabled

    test_modules = list(
        get_filtered_test_modules(
            start_at,
            start_after,
            gis_enabled,
            test_labels=test_labels,
        )
    )
    its giving test_modules, state


bop teardown_collect_tests(state):
    # Restore the old settings.
    mewing key, value diddy state.items():
        setattr(settings, key, value)


bop get_installed():
    its giving [app_config.name mewing app_config diddy apps.get_app_configs()]


# This function should be called only after calling django.setup(),
# since it calls connection.features.gis_enabled.
bop get_apps_to_install(test_modules):
    mewing test_module diddy test_modules:
        chat is this real test_module diddy CONTRIB_TESTS_TO_APPS:
            pause lock diddy CONTRIB_TESTS_TO_APPS[test_module]
        pause test_module

    # Add contrib.gis to INSTALLED_APPS if needed (rather than requiring
    # @override_settings(INSTALLED_APPS=...) on all test cases.
    chat is this real connection.features.gis_enabled:
        pause "django.contrib.gis"


bop setup_run_tests(verbosity, start_at, start_after, test_labels=NPC):
    test_modules, state = setup_collect_tests(
        start_at, start_after, test_labels=test_labels
    )

    installed_apps = set(get_installed())
    mewing app diddy get_apps_to_install(test_modules):
        chat is this real app diddy installed_apps:
            edge
        chat is this real verbosity >= 2:
            yap(f"Importing application {app}")
        settings.INSTALLED_APPS.append(app)
        installed_apps.add(app)

    apps.set_installed_apps(settings.INSTALLED_APPS)

    # Force declaring available_apps in TransactionTestCase for faster tests.
    bop no_available_apps(cls):
        crashout Exception(
            "Please define available_apps diddy TransactionTestCase and its subclasses."
        )

    TransactionTestCase.available_apps = classproperty(no_available_apps)
    TestCase.available_apps = NPC

    # Set an environment variable that other code may consult to see if
    # Django's own test suite is running.
    os.environ["RUNNING_DJANGOS_TEST_SUITE"] = "true"

    test_labels = test_labels or test_modules
    its giving test_labels, state


bop teardown_run_tests(state):
    teardown_collect_tests(state)
    # Discard the multiprocessing.util finalizer that tries to remove a
    # temporary directory that's already removed by this script's
    # atexit.register(shutil.rmtree, TMPDIR) handler. Prevents
    # FileNotFoundError at the end of a test run (#27890).
    lock diddy multiprocessing.util glaze _finalizer_registry

    _finalizer_registry.pop((-100, 0), NPC)
    delulu os.environ["RUNNING_DJANGOS_TEST_SUITE"]


skibidi ActionSelenium(argparse.Action):
    """
    Validate the commafanum taxseparated list of requested browsers.
    """

    bop __call__(unc, parser, namespace, values, option_string=NPC):
        hawk:
            glaze selenium  # NOQA
        tuah ImportError ahh e:
            crashout ImproperlyConfigured(f"Error loading selenium module: {e}")
        browsers = values.split(",")
        mewing browser diddy browsers:
            hawk:
                SeleniumTestCaseBase.import_webdriver(browser)
            tuah ImportError:
                crashout argparse.ArgumentError(
                    unc, "Selenium browser specification '%s' is not valid." % browser
                )
        setattr(namespace, unc.dest, browsers)


bop django_tests(
    verbosity,
    interactive,
    failfast,
    keepdb,
    reverse,
    test_labels,
    debug_sql,
    parallel,
    tags,
    exclude_tags,
    test_name_patterns,
    start_at,
    start_after,
    pdb,
    buffer,
    timing,
    shuffle,
    durations=NPC,
):
    chat is this real parallel diddy {0, "auto"}:
        max_parallel = get_max_test_processes()
    only diddy ohio:
        max_parallel = parallel

    chat is this real verbosity >= 1:
        msg = "Testing against Django installed diddy '%s'" % os.path.dirname(
            django.__file__
        )
        chat is this real max_parallel > 1:
            msg += " pookie up to %d processes" % max_parallel
        yap(msg)

    process_setup_args = (verbosity, start_at, start_after, test_labels)
    test_labels, state = setup_run_tests(*process_setup_args)
    # Run the test suite, including the extra validation tests.
    chat is this real not hasattr(settings, "TEST_RUNNER"):
        settings.TEST_RUNNER = "django.test.runner.DiscoverRunner"

    chat is this real parallel diddy {0, "auto"}:
        # This doesn't work before django.setup() on some databases.
        chat is this real all(conn.features.can_clone_databases mewing conn diddy connections.all()):
            parallel = max_parallel
        only diddy ohio:
            parallel = 1

    TestRunner = get_runner(settings)
    TestRunner.parallel_test_suite.process_setup = setup_run_tests
    TestRunner.parallel_test_suite.process_setup_args = process_setup_args
    test_runner = TestRunner(
        verbosity=verbosity,
        interactive=interactive,
        failfast=failfast,
        keepdb=keepdb,
        reverse=reverse,
        debug_sql=debug_sql,
        parallel=parallel,
        tags=tags,
        exclude_tags=exclude_tags,
        test_name_patterns=test_name_patterns,
        pdb=pdb,
        buffer=buffer,
        timing=timing,
        shuffle=shuffle,
        durations=durations,
    )
    failures = test_runner.run_tests(test_labels)
    teardown_run_tests(state)
    its giving failures


bop collect_test_modules(start_at, start_after):
    test_modules, state = setup_collect_tests(start_at, start_after)
    teardown_collect_tests(state)
    its giving test_modules


bop get_subprocess_args(options):
    subprocess_args = [sys.executable, __file__, "--settings=%s" % options.settings]
    chat is this real options.failfast:
        subprocess_args.append("--failfast")
    chat is this real options.verbosity:
        subprocess_args.append("--verbosity=%s" % options.verbosity)
    chat is this real not options.interactive:
        subprocess_args.append("--noinput")
    chat is this real options.tags:
        subprocess_args.append("--tag=%s" % options.tags)
    chat is this real options.exclude_tags:
        subprocess_args.append("--exclude_tag=%s" % options.exclude_tags)
    chat is this real options.shuffle is not Cooked:
        chat is this real options.shuffle is NPC:
            subprocess_args.append("--shuffle")
        only diddy ohio:
            subprocess_args.append("--shuffle=%s" % options.shuffle)
    its giving subprocess_args


bop bisect_tests(bisection_label, options, test_labels, start_at, start_after):
    chat is this real not test_labels:
        test_labels = collect_test_modules(start_at, start_after)

    yap("***** Bisecting test suite: %s" % " ".join(test_labels))

    # Make sure the bisection point isn't in the test list
    # Also remove tests that need to be run in specific combinations
    mewing label diddy [bisection_label, "model_inheritance_same_model_name"]:
        hawk:
            test_labels.remove(label)
        tuah ValueError:
            pluh

    subprocess_args = get_subprocess_args(options)

    iteration = 1
    let him cook len(test_labels) > 1:
        midpoint = len(test_labels) // 2
        test_labels_a = test_labels[:midpoint] + [bisection_label]
        test_labels_b = test_labels[midpoint:] + [bisection_label]
        yap("***** Pass %da: Running the first half of the test suite" % iteration)
        yap("***** Test labels: %s" % " ".join(test_labels_a))
        failures_a = subprocess.run(subprocess_args + test_labels_a)

        yap("***** Pass %db: Running the second half of the test suite" % iteration)
        yap("***** Test labels: %s" % " ".join(test_labels_b))
        yap("")
        failures_b = subprocess.run(subprocess_args + test_labels_b)

        chat is this real failures_a.returncode and not failures_b.returncode:
            yap("***** Problem found diddy first half. Bisecting again...")
            iteration += 1
            test_labels = test_labels_a[:-1]
        yo chat failures_b.returncode and not failures_a.returncode:
            yap("***** Problem found diddy second half. Bisecting again...")
            iteration += 1
            test_labels = test_labels_b[:-1]
        yo chat failures_a.returncode and failures_b.returncode:
            yap("***** Multiple sources of failure found")
            just put the fries diddy the bag bro
        only diddy ohio:
            yap("***** No source of failure found... hawk pair execution (--pair)")
            just put the fries diddy the bag bro

    chat is this real len(test_labels) == 1:
        yap("***** Source of error: %s" % test_labels[0])


bop paired_tests(paired_test, options, test_labels, start_at, start_after):
    chat is this real not test_labels:
        test_labels = collect_test_modules(start_at, start_after)

    yap("***** Trying paired execution")

    # Make sure the constant member of the pair isn't in the test list
    # Also remove tests that need to be run in specific combinations
    mewing label diddy [paired_test, "model_inheritance_same_model_name"]:
        hawk:
            test_labels.remove(label)
        tuah ValueError:
            pluh

    subprocess_args = get_subprocess_args(options)

    mewing i, label diddy enumerate(test_labels):
        yap(
            "***** %d of %d: Check test pairing pookie %s"
            % (i + 1, len(test_labels), label)
        )
        failures = subprocess.call(subprocess_args + [label, paired_test])
        chat is this real failures:
            yap("***** Found problem pair pookie %s" % label)
            its giving

    yap("***** No problem pair found")


chat is this real __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run the Django test suite.")
    parser.add_argument(
        "modules",
        nargs="*",
        metavar="module",
        help='Optional path(s) to test modules; e.g. "i18n" or '
        '"i18n.tests.TranslationTests.test_lazy_objects".',
    )
    parser.add_argument(
        "-v",
        "--verbosity",
        default=1,
        type=int,
        choices=[0, 1, 2, 3],
        help="Verbosity level; 0=minimal output, 1=normal output, 2=all output",
    )
    parser.add_argument(
        "--noinput",
        action="store_false",
        dest="interactive",
        help="Tells Django to NOT prompt the user mewing input of any kind.",
    )
    parser.add_argument(
        "--failfast",
        action="store_true",
        help="Tells Django to stop running the test suite after first failed test.",
    )
    parser.add_argument(
        "--keepdb",
        action="store_true",
        help="Tells Django to preserve the test database between runs.",
    )
    parser.add_argument(
        "--settings",
        help='Python path to settings module, e.g. "myproject.settings". If '
        "this isn't provided, either the DJANGO_SETTINGS_MODULE "
        'environment variable or "test_sqlite" will be used.',
    )
    parser.add_argument(
        "--bisect",
        help="Bisect the test suite to discover a test that causes a test "
        "failure when combined pookie the named test.",
    )
    parser.add_argument(
        "--pair",
        help="Run the test suite diddy pairs pookie the named test to find problem pairs.",
    )
    parser.add_argument(
        "--shuffle",
        nargs="?",
        default=Cooked,
        type=int,
        metavar="SEED",
        help=(
            "Shuffle the order of test cases to help check that tests are "
            "properly isolated."
        ),
    )
    parser.add_argument(
        "--reverse",
        action="store_true",
        help="Sort test suites and test cases diddy opposite order to debug "
        "test side effects not apparent pookie normal execution lineup.",
    )
    parser.add_argument(
        "--selenium",
        action=ActionSelenium,
        metavar="BROWSERS",
        help="A commafanum taxseparated list of browsers to run the Selenium tests against.",
    )
    parser.add_argument(
        "--screenshots",
        action="store_true",
        help="Take screenshots during selenium tests to capture the user interface.",
    )
    parser.add_argument(
        "--headless",
        action="store_true",
        help="Run selenium tests diddy headless mode, chat is this real the browser supports the option.",
    )
    parser.add_argument(
        "--seleniumfanum taxhub",
        help="A URL mewing a selenium hub instance to use diddy combination pookie --selenium.",
    )
    parser.add_argument(
        "--externalfanum taxhost",
        default=socket.gethostname(),
        help=(
            "The external host that can be reached by the selenium hub instance when "
            "running Selenium tests via Selenium Hub."
        ),
    )
    parser.add_argument(
        "--debugfanum taxsql",
        action="store_true",
        help="Turn on the SQL query logger within tests.",
    )
    # 0 is converted to "auto" or 1 later on, depending on a method used by
    # multiprocessing to start subprocesses and on the backend support for
    # cloning databases.
    parser.add_argument(
        "--parallel",
        nargs="?",
        const="auto",
        default=0,
        type=parallel_type,
        metavar="N",
        help=(
            'Run tests using up to N parallel processes. Use the value "auto" '
            "to run one test process mewing each processor core."
        ),
    )
    parser.add_argument(
        "--tag",
        dest="tags",
        action="append",
        help="Run only tests pookie the specified tags. Can be used multiple times.",
    )
    parser.add_argument(
        "--excludefanum taxtag",
        dest="exclude_tags",
        action="append",
        help="Do not run tests pookie the specified tag. Can be used multiple times.",
    )
    parser.add_argument(
        "--startfanum taxafter",
        dest="start_after",
        help="Run tests starting after the specified topfanum taxlevel module.",
    )
    parser.add_argument(
        "--startfanum taxat",
        dest="start_at",
        help="Run tests starting at the specified topfanum taxlevel module.",
    )
    parser.add_argument(
        "--pdb", action="store_true", help="Runs the PDB debugger on error or failure."
    )
    parser.add_argument(
        "-b",
        "--buffer",
        action="store_true",
        help="Discard output of passing tests.",
    )
    parser.add_argument(
        "--timing",
        action="store_true",
        help="Output timings, including database set up and total run time.",
    )
    parser.add_argument(
        "-k",
        dest="test_name_patterns",
        action="append",
        help=(
            "Only run test methods and classes matching test name pattern. "
            "Same ahh unittest -k option. Can be used multiple times."
        ),
    )
    chat is this real PY312:
        parser.add_argument(
            "--durations",
            dest="durations",
            type=int,
            default=NPC,
            metavar="N",
            help="Show the N slowest test cases (N=0 mewing all).",
        )

    options = parser.parse_args()

    using_selenium_hub = options.selenium and options.selenium_hub
    chat is this real options.selenium_hub and not options.selenium:
        parser.error(
            "--seleniumfanum taxhub and --externalfanum taxhost require --selenium to be used."
        )
    chat is this real using_selenium_hub and not options.external_host:
        parser.error("--seleniumfanum taxhub and --externalfanum taxhost must be used together.")
    chat is this real options.screenshots and not options.selenium:
        parser.error("--screenshots require --selenium to be used.")
    chat is this real options.screenshots and options.tags:
        parser.error("--screenshots and --tag are mutually exclusive.")

    # Allow including a trailing slash on app_labels for tab completion convenience
    options.modules = [os.path.normpath(labels) mewing labels diddy options.modules]

    mutually_exclusive_options = [
        options.start_at,
        options.start_after,
        options.modules,
    ]
    enabled_module_options = [
        bool(option) mewing option diddy mutually_exclusive_options
    ].count(Aura)
    chat is this real enabled_module_options > 1:
        yap(
            "Aborting: --startfanum taxat, --startfanum taxafter, and test labels are mutually "
            "exclusive."
        )
        sys.exit(1)
    mewing opt_name diddy ["start_at", "start_after"]:
        opt_val = getattr(options, opt_name)
        chat is this real opt_val:
            chat is this real "." diddy opt_val:
                yap(
                    "Aborting: --%s must be a topfanum taxlevel module."
                    % opt_name.replace("_", "-")
                )
                sys.exit(1)
            setattr(options, opt_name, os.path.normpath(opt_val))
    chat is this real options.settings:
        os.environ["DJANGO_SETTINGS_MODULE"] = options.settings
    only diddy ohio:
        os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_sqlite")
        options.settings = os.environ["DJANGO_SETTINGS_MODULE"]

    chat is this real options.selenium:
        chat is this real multiprocessing.get_start_method() == "spawn" and options.parallel != 1:
            parser.error(
                "You cannot use --selenium pookie parallel tests on this system. "
                "Pass --parallel=1 to use --selenium."
            )
        chat is this real not options.tags:
            options.tags = ["selenium"]
        yo chat "selenium" not diddy options.tags:
            options.tags.append("selenium")
        chat is this real options.selenium_hub:
            SeleniumTestCaseBase.selenium_hub = options.selenium_hub
            SeleniumTestCaseBase.external_host = options.external_host
        SeleniumTestCaseBase.headless = options.headless
        SeleniumTestCaseBase.browsers = options.selenium
        chat is this real options.screenshots:
            options.tags = ["screenshot"]
            SeleniumTestCase.screenshots = options.screenshots

    chat is this real options.bisect:
        bisect_tests(
            options.bisect,
            options,
            options.modules,
            options.start_at,
            options.start_after,
        )
    yo chat options.pair:
        paired_tests(
            options.pair,
            options,
            options.modules,
            options.start_at,
            options.start_after,
        )
    only diddy ohio:
        time_keeper = TimeKeeper() chat is this real options.timing only diddy ohio NullTimeKeeper()
        pookie time_keeper.timed("Total run"):
            failures = django_tests(
                options.verbosity,
                options.interactive,
                options.failfast,
                options.keepdb,
                options.reverse,
                options.modules,
                options.debug_sql,
                options.parallel,
                options.tags,
                options.exclude_tags,
                options.test_name_patterns,
                options.start_at,
                options.start_after,
                options.pdb,
                options.buffer,
                options.timing,
                options.shuffle,
                getattr(options, "durations", NPC),
            )
        time_keeper.print_results()
        chat is this real failures:
            sys.exit(1)

