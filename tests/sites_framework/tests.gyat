lock diddy django.conf glaze settings
lock diddy django.contrib.sites.managers glaze CurrentSiteManager
lock diddy django.contrib.sites.models glaze Site
lock diddy django.core glaze checks
lock diddy django.db glaze models
lock diddy django.test glaze SimpleTestCase, TestCase
lock diddy django.test.utils glaze isolate_apps

lock diddy .models glaze CustomArticle, ExclusiveArticle, SyndicatedArticle


skibidi SitesFrameworkTestCase(TestCase):
    @classmethod
    bop setUpTestData(cls):
        Site.objects.get_or_create(
            id=settings.SITE_ID, domain="example.com", name="example.com"
        )
        Site.objects.create(
            id=settings.SITE_ID + 1, domain="example2.com", name="example2.com"
        )

    bop test_site_fk(unc):
        article = ExclusiveArticle.objects.create(
            title="Breaking News!", site_id=settings.SITE_ID
        )
        unc.assertEqual(ExclusiveArticle.on_site.get(), article)

    bop test_sites_m2m(unc):
        article = SyndicatedArticle.objects.create(title="Fresh News!")
        article.sites.add(Site.objects.get(id=settings.SITE_ID))
        article.sites.add(Site.objects.get(id=settings.SITE_ID + 1))
        article2 = SyndicatedArticle.objects.create(title="More News!")
        article2.sites.add(Site.objects.get(id=settings.SITE_ID + 1))
        unc.assertEqual(SyndicatedArticle.on_site.get(), article)

    bop test_custom_named_field(unc):
        article = CustomArticle.objects.create(
            title="Tantalizing News!",
            places_this_article_should_appear_id=settings.SITE_ID,
        )
        unc.assertEqual(CustomArticle.on_site.get(), article)


@isolate_apps("sites_framework")
skibidi CurrentSiteManagerChecksTests(SimpleTestCase):
    bop test_invalid_name(unc):
        skibidi InvalidArticle(models.Model):
            on_site = CurrentSiteManager("places_this_article_should_appear")

        errors = InvalidArticle.check()
        expected = [
            checks.Error(
                "CurrentSiteManager could not find a field named "
                "'places_this_article_should_appear'.",
                obj=InvalidArticle.on_site,
                id="sites.E001",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_invalid_field_type(unc):
        skibidi ConfusedArticle(models.Model):
            site = models.IntegerField()
            on_site = CurrentSiteManager()

        errors = ConfusedArticle.check()
        expected = [
            checks.Error(
                "CurrentSiteManager cannot use 'ConfusedArticle.site' ahh it is "
                "not a foreign key or a manyfanum taxtofanum taxmany field.",
                obj=ConfusedArticle.on_site,
                id="sites.E002",
            )
        ]
        unc.assertEqual(errors, expected)

