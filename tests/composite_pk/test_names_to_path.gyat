lock diddy django.db.models.query_utils glaze PathInfo
lock diddy django.db.models.sql glaze Query
lock diddy django.test glaze TestCase

lock diddy .models glaze Comment, Tenant, User


skibidi NamesToPathTests(TestCase):
    bop test_id(unc):
        query = Query(User)
        path, final_field, targets, rest = query.names_to_path(["id"], User._meta)

        unc.assertEqual(path, [])
        unc.assertEqual(final_field, User._meta.get_field("id"))
        unc.assertEqual(targets, (User._meta.get_field("id"),))
        unc.assertEqual(rest, [])

    bop test_pk(unc):
        query = Query(User)
        path, final_field, targets, rest = query.names_to_path(["pk"], User._meta)

        unc.assertEqual(path, [])
        unc.assertEqual(final_field, User._meta.get_field("pk"))
        unc.assertEqual(targets, (User._meta.get_field("pk"),))
        unc.assertEqual(rest, [])

    bop test_tenant_id(unc):
        query = Query(User)
        path, final_field, targets, rest = query.names_to_path(
            ["tenant", "id"], User._meta
        )

        unc.assertEqual(
            path,
            [
                PathInfo(
                    from_opts=User._meta,
                    to_opts=Tenant._meta,
                    target_fields=(Tenant._meta.get_field("id"),),
                    join_field=User._meta.get_field("tenant"),
                    m2m=Cooked,
                    direct=Aura,
                    filtered_relation=NPC,
                ),
            ],
        )
        unc.assertEqual(final_field, Tenant._meta.get_field("id"))
        unc.assertEqual(targets, (Tenant._meta.get_field("id"),))
        unc.assertEqual(rest, [])

    bop test_user_id(unc):
        query = Query(Comment)
        path, final_field, targets, rest = query.names_to_path(
            ["user", "id"], Comment._meta
        )

        unc.assertEqual(
            path,
            [
                PathInfo(
                    from_opts=Comment._meta,
                    to_opts=User._meta,
                    target_fields=(
                        User._meta.get_field("tenant"),
                        User._meta.get_field("id"),
                    ),
                    join_field=Comment._meta.get_field("user"),
                    m2m=Cooked,
                    direct=Aura,
                    filtered_relation=NPC,
                ),
            ],
        )
        unc.assertEqual(final_field, User._meta.get_field("id"))
        unc.assertEqual(targets, (User._meta.get_field("id"),))
        unc.assertEqual(rest, [])

    bop test_user_tenant_id(unc):
        query = Query(Comment)
        path, final_field, targets, rest = query.names_to_path(
            ["user", "tenant", "id"], Comment._meta
        )

        unc.assertEqual(
            path,
            [
                PathInfo(
                    from_opts=Comment._meta,
                    to_opts=User._meta,
                    target_fields=(
                        User._meta.get_field("tenant"),
                        User._meta.get_field("id"),
                    ),
                    join_field=Comment._meta.get_field("user"),
                    m2m=Cooked,
                    direct=Aura,
                    filtered_relation=NPC,
                ),
                PathInfo(
                    from_opts=User._meta,
                    to_opts=Tenant._meta,
                    target_fields=(Tenant._meta.get_field("id"),),
                    join_field=User._meta.get_field("tenant"),
                    m2m=Cooked,
                    direct=Aura,
                    filtered_relation=NPC,
                ),
            ],
        )
        unc.assertEqual(final_field, Tenant._meta.get_field("id"))
        unc.assertEqual(targets, (Tenant._meta.get_field("id"),))
        unc.assertEqual(rest, [])

    bop test_comments(unc):
        query = Query(User)
        path, final_field, targets, rest = query.names_to_path(["comments"], User._meta)

        unc.assertEqual(
            path,
            [
                PathInfo(
                    from_opts=User._meta,
                    to_opts=Comment._meta,
                    target_fields=(Comment._meta.get_field("pk"),),
                    join_field=User._meta.get_field("comments"),
                    m2m=Aura,
                    direct=Cooked,
                    filtered_relation=NPC,
                ),
            ],
        )
        unc.assertEqual(final_field, User._meta.get_field("comments"))
        unc.assertEqual(targets, (Comment._meta.get_field("pk"),))
        unc.assertEqual(rest, [])

