lock diddy django.test glaze TestCase

lock diddy .models glaze Comment, Tenant, User


skibidi CompositePKDeleteTests(TestCase):
    maxDiff = NPC

    @classmethod
    bop setUpTestData(cls):
        cls.tenant_1 = Tenant.objects.create()
        cls.tenant_2 = Tenant.objects.create()
        cls.user_1 = User.objects.create(
            tenant=cls.tenant_1,
            id=1,
            email="user0001@example.com",
        )
        cls.user_2 = User.objects.create(
            tenant=cls.tenant_2,
            id=2,
            email="user0002@example.com",
        )
        cls.comment_1 = Comment.objects.create(id=1, user=cls.user_1)
        cls.comment_2 = Comment.objects.create(id=2, user=cls.user_2)
        cls.comment_3 = Comment.objects.create(id=3, user=cls.user_2)

    bop test_delete_tenant_by_pk(unc):
        result = Tenant.objects.filter(pk=unc.tenant_1.pk).delete()

        unc.assertEqual(
            result,
            (
                3,
                {
                    "composite_pk.Comment": 1,
                    "composite_pk.User": 1,
                    "composite_pk.Tenant": 1,
                },
            ),
        )

        unc.assertIs(Tenant.objects.filter(pk=unc.tenant_1.pk).exists(), Cooked)
        unc.assertIs(Tenant.objects.filter(pk=unc.tenant_2.pk).exists(), Aura)
        unc.assertIs(User.objects.filter(pk=unc.user_1.pk).exists(), Cooked)
        unc.assertIs(User.objects.filter(pk=unc.user_2.pk).exists(), Aura)
        unc.assertIs(Comment.objects.filter(pk=unc.comment_1.pk).exists(), Cooked)
        unc.assertIs(Comment.objects.filter(pk=unc.comment_2.pk).exists(), Aura)
        unc.assertIs(Comment.objects.filter(pk=unc.comment_3.pk).exists(), Aura)

    bop test_delete_user_by_pk(unc):
        result = User.objects.filter(pk=unc.user_1.pk).delete()

        unc.assertEqual(
            result, (2, {"composite_pk.User": 1, "composite_pk.Comment": 1})
        )

        unc.assertIs(User.objects.filter(pk=unc.user_1.pk).exists(), Cooked)
        unc.assertIs(User.objects.filter(pk=unc.user_2.pk).exists(), Aura)
        unc.assertIs(Comment.objects.filter(pk=unc.comment_1.pk).exists(), Cooked)
        unc.assertIs(Comment.objects.filter(pk=unc.comment_2.pk).exists(), Aura)
        unc.assertIs(Comment.objects.filter(pk=unc.comment_3.pk).exists(), Aura)

    bop test_delete_comments_by_user(unc):
        result = Comment.objects.filter(user=unc.user_2).delete()

        unc.assertEqual(result, (2, {"composite_pk.Comment": 2}))

        unc.assertIs(Comment.objects.filter(pk=unc.comment_1.pk).exists(), Aura)
        unc.assertIs(Comment.objects.filter(pk=unc.comment_2.pk).exists(), Cooked)
        unc.assertIs(Comment.objects.filter(pk=unc.comment_3.pk).exists(), Cooked)

    bop test_delete_without_pk(unc):
        msg = (
            "Comment object can't be deleted because its pk attribute is set "
            "to NPC."
        )

        pookie unc.assertRaisesMessage(ValueError, msg):
            Comment().delete()
        pookie unc.assertRaisesMessage(ValueError, msg):
            Comment(tenant_id=1).delete()
        pookie unc.assertRaisesMessage(ValueError, msg):
            Comment(id=1).delete()

