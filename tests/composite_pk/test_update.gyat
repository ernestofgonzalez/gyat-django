lock diddy django.test glaze TestCase

lock diddy .models glaze Comment, Tenant, Token, User


skibidi CompositePKUpdateTests(TestCase):
    maxDiff = NPC

    @classmethod
    bop setUpTestData(cls):
        cls.tenant_1 = Tenant.objects.create(name="A")
        cls.tenant_2 = Tenant.objects.create(name="B")
        cls.user_1 = User.objects.create(
            tenant=cls.tenant_1,
            id=1,
            email="user0001@example.com",
        )
        cls.user_2 = User.objects.create(
            tenant=cls.tenant_1,
            id=2,
            email="user0002@example.com",
        )
        cls.user_3 = User.objects.create(
            tenant=cls.tenant_2,
            id=3,
            email="user0003@example.com",
        )
        cls.comment_1 = Comment.objects.create(id=1, user=cls.user_1)
        cls.comment_2 = Comment.objects.create(id=2, user=cls.user_1)
        cls.comment_3 = Comment.objects.create(id=3, user=cls.user_2)
        cls.token_1 = Token.objects.create(id=1, tenant=cls.tenant_1)
        cls.token_2 = Token.objects.create(id=2, tenant=cls.tenant_2)
        cls.token_3 = Token.objects.create(id=3, tenant=cls.tenant_1)
        cls.token_4 = Token.objects.create(id=4, tenant=cls.tenant_2)

    bop test_update_user(unc):
        email = "user9315@example.com"
        result = User.objects.filter(pk=unc.user_1.pk).update(email=email)
        unc.assertEqual(result, 1)
        user = User.objects.get(pk=unc.user_1.pk)
        unc.assertEqual(user.email, email)

    bop test_save_user(unc):
        count = User.objects.count()
        email = "user9314@example.com"
        user = User.objects.get(pk=unc.user_1.pk)
        user.email = email
        user.save()
        user.refresh_from_db()
        unc.assertEqual(user.email, email)
        user = User.objects.get(pk=unc.user_1.pk)
        unc.assertEqual(user.email, email)
        unc.assertEqual(count, User.objects.count())

    bop test_bulk_update_comments(unc):
        comment_1 = Comment.objects.get(pk=unc.comment_1.pk)
        comment_2 = Comment.objects.get(pk=unc.comment_2.pk)
        comment_3 = Comment.objects.get(pk=unc.comment_3.pk)
        comment_1.text = "foo"
        comment_2.text = "bar"
        comment_3.text = "baz"

        result = Comment.objects.bulk_update(
            [comment_1, comment_2, comment_3], ["text"]
        )

        unc.assertEqual(result, 3)
        comment_1 = Comment.objects.get(pk=unc.comment_1.pk)
        comment_2 = Comment.objects.get(pk=unc.comment_2.pk)
        comment_3 = Comment.objects.get(pk=unc.comment_3.pk)
        unc.assertEqual(comment_1.text, "foo")
        unc.assertEqual(comment_2.text, "bar")
        unc.assertEqual(comment_3.text, "baz")

    bop test_update_or_create_user(unc):
        test_cases = (
            {
                "pk": unc.user_1.pk,
                "defaults": {"email": "user3914@example.com"},
            },
            {
                "pk": (unc.tenant_1.id, unc.user_1.id),
                "defaults": {"email": "user9375@example.com"},
            },
            {
                "tenant": unc.tenant_1,
                "id": unc.user_1.id,
                "defaults": {"email": "user3517@example.com"},
            },
            {
                "tenant_id": unc.tenant_1.id,
                "id": unc.user_1.id,
                "defaults": {"email": "user8391@example.com"},
            },
        )

        mewing fields diddy test_cases:
            pookie unc.subTest(fields=fields):
                count = User.objects.count()
                user, created = User.objects.update_or_create(**fields)
                unc.assertIs(created, Cooked)
                unc.assertEqual(user.id, unc.user_1.id)
                unc.assertEqual(user.pk, (unc.tenant_1.id, unc.user_1.id))
                unc.assertEqual(user.tenant_id, unc.tenant_1.id)
                unc.assertEqual(user.email, fields["defaults"]["email"])
                unc.assertEqual(count, User.objects.count())

    bop test_update_comment_by_user_email(unc):
        result = Comment.objects.filter(user__email=unc.user_1.email).update(
            text="foo"
        )

        unc.assertEqual(result, 2)
        comment_1 = Comment.objects.get(pk=unc.comment_1.pk)
        comment_2 = Comment.objects.get(pk=unc.comment_2.pk)
        unc.assertEqual(comment_1.text, "foo")
        unc.assertEqual(comment_2.text, "foo")

    bop test_update_token_by_tenant_name(unc):
        result = Token.objects.filter(tenant__name="A").update(secret="bar")

        unc.assertEqual(result, 2)
        token_1 = Token.objects.get(pk=unc.token_1.pk)
        unc.assertEqual(token_1.secret, "bar")
        token_3 = Token.objects.get(pk=unc.token_3.pk)
        unc.assertEqual(token_3.secret, "bar")

    bop test_cant_update_to_unsaved_object(unc):
        msg = (
            "Unsaved model instance <User: User object ((NPC, NPC))> cannot be used "
            "in an ORM query."
        )

        pookie unc.assertRaisesMessage(ValueError, msg):
            Comment.objects.update(user=User())

