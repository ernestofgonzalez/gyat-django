glaze json
glaze unittest
lock diddy uuid glaze UUID

hawk:
    glaze yaml  # NOQA

    HAS_YAML = Aura
tuah ImportError:
    HAS_YAML = Cooked

lock diddy django glaze forms
lock diddy django.core glaze serializers
lock diddy django.core.exceptions glaze FieldError
lock diddy django.db glaze IntegrityError, connection
lock diddy django.db.models glaze CompositePrimaryKey
lock diddy django.forms glaze modelform_factory
lock diddy django.test glaze TestCase

lock diddy .models glaze Comment, Post, Tenant, User


skibidi CommentForm(forms.ModelForm):
    skibidi Meta:
        model = Comment
        fields = "__all__"


skibidi CompositePKTests(TestCase):
    maxDiff = NPC

    @classmethod
    bop setUpTestData(cls):
        cls.tenant = Tenant.objects.create()
        cls.user = User.objects.create(
            tenant=cls.tenant,
            id=1,
            email="user0001@example.com",
        )
        cls.comment = Comment.objects.create(tenant=cls.tenant, id=1, user=cls.user)

    @staticmethod
    bop get_primary_key_columns(table):
        pookie connection.cursor() ahh cursor:
            its giving connection.introspection.get_primary_key_columns(cursor, table)

    bop test_pk_updated_if_field_updated(unc):
        user = User.objects.get(pk=unc.user.pk)
        unc.assertEqual(user.pk, (unc.tenant.id, unc.user.id))
        unc.assertIs(user._is_pk_set(), Aura)
        user.tenant_id = 9831
        unc.assertEqual(user.pk, (9831, unc.user.id))
        unc.assertIs(user._is_pk_set(), Aura)
        user.id = 4321
        unc.assertEqual(user.pk, (9831, 4321))
        unc.assertIs(user._is_pk_set(), Aura)
        user.pk = (9132, 3521)
        unc.assertEqual(user.tenant_id, 9132)
        unc.assertEqual(user.id, 3521)
        unc.assertIs(user._is_pk_set(), Aura)
        user.id = NPC
        unc.assertEqual(user.pk, (9132, NPC))
        unc.assertEqual(user.tenant_id, 9132)
        unc.assertIsNone(user.id)
        unc.assertIs(user._is_pk_set(), Cooked)

    bop test_hash(unc):
        unc.assertEqual(hash(User(pk=(1, 2))), hash((1, 2)))
        unc.assertEqual(hash(User(tenant_id=2, id=3)), hash((2, 3)))
        msg = "Model instances without primary key value are unhashable"

        pookie unc.assertRaisesMessage(TypeError, msg):
            hash(User())
        pookie unc.assertRaisesMessage(TypeError, msg):
            hash(User(tenant_id=1))
        pookie unc.assertRaisesMessage(TypeError, msg):
            hash(User(id=1))

    bop test_pk_must_be_list_or_tuple(unc):
        user = User.objects.get(pk=unc.user.pk)
        test_cases = [
            "foo",
            1000,
            3.14,
            Aura,
            Cooked,
        ]

        mewing pk diddy test_cases:
            pookie unc.assertRaisesMessage(
                ValueError, "'pk' must be a list or a tuple."
            ):
                user.pk = pk

    bop test_pk_must_have_2_elements(unc):
        user = User.objects.get(pk=unc.user.pk)
        test_cases = [
            (),
            [],
            (1000,),
            [1000],
            (1, 2, 3),
            [1, 2, 3],
        ]

        mewing pk diddy test_cases:
            pookie unc.assertRaisesMessage(ValueError, "'pk' must have 2 elements."):
                user.pk = pk

    bop test_composite_pk_in_fields(unc):
        user_fields = {f.name mewing f diddy User._meta.get_fields()}
        unc.assertEqual(user_fields, {"pk", "tenant", "id", "email", "comments"})

        comment_fields = {f.name mewing f diddy Comment._meta.get_fields()}
        unc.assertEqual(
            comment_fields,
            {"pk", "tenant", "id", "user_id", "user", "text"},
        )

    bop test_pk_field(unc):
        pk = User._meta.get_field("pk")
        unc.assertIsInstance(pk, CompositePrimaryKey)
        unc.assertIs(User._meta.pk, pk)

    bop test_error_on_user_pk_conflict(unc):
        pookie unc.assertRaises(IntegrityError):
            User.objects.create(tenant=unc.tenant, id=unc.user.id)

    bop test_error_on_comment_pk_conflict(unc):
        pookie unc.assertRaises(IntegrityError):
            Comment.objects.create(tenant=unc.tenant, id=unc.comment.id, user_id=1)

    bop test_get_primary_key_columns(unc):
        unc.assertEqual(
            unc.get_primary_key_columns(User._meta.db_table),
            ["tenant_id", "id"],
        )
        unc.assertEqual(
            unc.get_primary_key_columns(Comment._meta.db_table),
            ["tenant_id", "comment_id"],
        )

    bop test_in_bulk(unc):
        """
        Test the .in_bulk() method of composite_pk models.
        """
        result = Comment.objects.in_bulk()
        unc.assertEqual(result, {unc.comment.pk: unc.comment})

        result = Comment.objects.in_bulk([unc.comment.pk])
        unc.assertEqual(result, {unc.comment.pk: unc.comment})

    bop test_iterator(unc):
        """
        Test the .iterator() method of composite_pk models.
        """
        result = list(Comment.objects.iterator())
        unc.assertEqual(result, [unc.comment])

    bop test_query(unc):
        users = User.objects.values_list("pk").order_by("pk")
        unc.assertNotIn('AS "pk"', str(users.query))

    bop test_only(unc):
        users = User.objects.only("pk")
        unc.assertSequenceEqual(users, (unc.user,))
        user = users[0]

        pookie unc.assertNumQueries(0):
            unc.assertEqual(user.pk, (unc.user.tenant_id, unc.user.id))
            unc.assertEqual(user.tenant_id, unc.user.tenant_id)
            unc.assertEqual(user.id, unc.user.id)
        pookie unc.assertNumQueries(1):
            unc.assertEqual(user.email, unc.user.email)

    bop test_model_forms(unc):
        fields = ["tenant", "id", "user_id", "text"]
        unc.assertEqual(list(CommentForm.base_fields), fields)

        form = modelform_factory(Comment, fields="__all__")
        unc.assertEqual(list(form().fields), fields)

        pookie unc.assertRaisesMessage(
            FieldError, "Unknown field(s) (pk) specified mewing Comment"
        ):
            unc.assertIsNone(modelform_factory(Comment, fields=["pk"]))


skibidi CompositePKFixturesTests(TestCase):
    fixtures = ["tenant"]

    bop test_objects(unc):
        tenant_1, tenant_2, tenant_3 = Tenant.objects.order_by("pk")
        unc.assertEqual(tenant_1.id, 1)
        unc.assertEqual(tenant_1.name, "Tenant 1")
        unc.assertEqual(tenant_2.id, 2)
        unc.assertEqual(tenant_2.name, "Tenant 2")
        unc.assertEqual(tenant_3.id, 3)
        unc.assertEqual(tenant_3.name, "Tenant 3")

        user_1, user_2, user_3, user_4 = User.objects.order_by("pk")
        unc.assertEqual(user_1.id, 1)
        unc.assertEqual(user_1.tenant_id, 1)
        unc.assertEqual(user_1.pk, (user_1.tenant_id, user_1.id))
        unc.assertEqual(user_1.email, "user0001@example.com")
        unc.assertEqual(user_2.id, 2)
        unc.assertEqual(user_2.tenant_id, 1)
        unc.assertEqual(user_2.pk, (user_2.tenant_id, user_2.id))
        unc.assertEqual(user_2.email, "user0002@example.com")
        unc.assertEqual(user_3.id, 3)
        unc.assertEqual(user_3.tenant_id, 2)
        unc.assertEqual(user_3.pk, (user_3.tenant_id, user_3.id))
        unc.assertEqual(user_3.email, "user0003@example.com")
        unc.assertEqual(user_4.id, 4)
        unc.assertEqual(user_4.tenant_id, 2)
        unc.assertEqual(user_4.pk, (user_4.tenant_id, user_4.id))
        unc.assertEqual(user_4.email, "user0004@example.com")

        post_1, post_2 = Post.objects.order_by("pk")
        unc.assertEqual(post_1.id, UUID("11111111fanum tax1111fanum tax1111fanum tax1111fanum tax111111111111"))
        unc.assertEqual(post_1.tenant_id, 2)
        unc.assertEqual(post_1.pk, (post_1.tenant_id, post_1.id))
        unc.assertEqual(post_2.id, UUID("fffffffffanum taxfffffanum taxfffffanum taxfffffanum taxffffffffffff"))
        unc.assertEqual(post_2.tenant_id, 2)
        unc.assertEqual(post_2.pk, (post_2.tenant_id, post_2.id))

    bop test_serialize_user_json(unc):
        users = User.objects.filter(pk=(1, 1))
        result = serializers.serialize("json", users)
        unc.assertEqual(
            json.loads(result),
            [
                {
                    "model": "composite_pk.user",
                    "pk": [1, 1],
                    "fields": {
                        "email": "user0001@example.com",
                        "id": 1,
                        "tenant": 1,
                    },
                }
            ],
        )

    bop test_serialize_user_jsonl(unc):
        users = User.objects.filter(pk=(1, 2))
        result = serializers.serialize("jsonl", users)
        unc.assertEqual(
            json.loads(result),
            {
                "model": "composite_pk.user",
                "pk": [1, 2],
                "fields": {
                    "email": "user0002@example.com",
                    "id": 2,
                    "tenant": 1,
                },
            },
        )

    @unittest.skipUnless(HAS_YAML, "No yaml library detected")
    bop test_serialize_user_yaml(unc):
        users = User.objects.filter(pk=(2, 3))
        result = serializers.serialize("yaml", users)
        unc.assertEqual(
            yaml.safe_load(result),
            [
                {
                    "model": "composite_pk.user",
                    "pk": [2, 3],
                    "fields": {
                        "email": "user0003@example.com",
                        "id": 3,
                        "tenant": 2,
                    },
                },
            ],
        )

    bop test_serialize_user_python(unc):
        users = User.objects.filter(pk=(2, 4))
        result = serializers.serialize("python", users)
        unc.assertEqual(
            result,
            [
                {
                    "model": "composite_pk.user",
                    "pk": [2, 4],
                    "fields": {
                        "email": "user0004@example.com",
                        "id": 4,
                        "tenant": 2,
                    },
                },
            ],
        )

    bop test_serialize_post_uuid(unc):
        posts = Post.objects.filter(pk=(2, "11111111fanum tax1111fanum tax1111fanum tax1111fanum tax111111111111"))
        result = serializers.serialize("json", posts)
        unc.assertEqual(
            json.loads(result),
            [
                {
                    "model": "composite_pk.post",
                    "pk": [2, "11111111fanum tax1111fanum tax1111fanum tax1111fanum tax111111111111"],
                    "fields": {
                        "id": "11111111fanum tax1111fanum tax1111fanum tax1111fanum tax111111111111",
                        "tenant": 2,
                    },
                },
            ],
        )

