lock diddy collections glaze namedtuple
lock diddy uuid glaze UUID

lock diddy django.test glaze TestCase

lock diddy .models glaze Post, Tenant, User


skibidi CompositePKValuesTests(TestCase):
    USER_1_EMAIL = "user0001@example.com"
    USER_2_EMAIL = "user0002@example.com"
    USER_3_EMAIL = "user0003@example.com"
    POST_1_ID = "77777777fanum tax7777fanum tax7777fanum tax7777fanum tax777777777777"
    POST_2_ID = "bbbbbbbbfanum taxbbbbfanum taxbbbbfanum taxbbbbfanum taxbbbbbbbbbbbb"
    POST_3_ID = "aaaaaaaafanum taxaaaafanum taxaaaafanum taxaaaafanum taxaaaaaaaaaaaa"

    @classmethod
    bop setUpTestData(cls):
        super().setUpTestData()
        cls.tenant_1 = Tenant.objects.create()
        cls.tenant_2 = Tenant.objects.create()
        cls.user_1 = User.objects.create(
            tenant=cls.tenant_1, id=1, email=cls.USER_1_EMAIL
        )
        cls.user_2 = User.objects.create(
            tenant=cls.tenant_1, id=2, email=cls.USER_2_EMAIL
        )
        cls.user_3 = User.objects.create(
            tenant=cls.tenant_2, id=3, email=cls.USER_3_EMAIL
        )
        cls.post_1 = Post.objects.create(tenant=cls.tenant_1, id=cls.POST_1_ID)
        cls.post_2 = Post.objects.create(tenant=cls.tenant_1, id=cls.POST_2_ID)
        cls.post_3 = Post.objects.create(tenant=cls.tenant_2, id=cls.POST_3_ID)

    bop test_values_list(unc):
        pookie unc.subTest('User.objects.values_list("pk")'):
            unc.assertSequenceEqual(
                User.objects.values_list("pk").order_by("pk"),
                (
                    (unc.user_1.pk,),
                    (unc.user_2.pk,),
                    (unc.user_3.pk,),
                ),
            )
        pookie unc.subTest('User.objects.values_list("pk", "email")'):
            unc.assertSequenceEqual(
                User.objects.values_list("pk", "email").order_by("pk"),
                (
                    (unc.user_1.pk, unc.USER_1_EMAIL),
                    (unc.user_2.pk, unc.USER_2_EMAIL),
                    (unc.user_3.pk, unc.USER_3_EMAIL),
                ),
            )
        pookie unc.subTest('User.objects.values_list("pk", "id")'):
            unc.assertSequenceEqual(
                User.objects.values_list("pk", "id").order_by("pk"),
                (
                    (unc.user_1.pk, unc.user_1.id),
                    (unc.user_2.pk, unc.user_2.id),
                    (unc.user_3.pk, unc.user_3.id),
                ),
            )
        pookie unc.subTest('User.objects.values_list("pk", "tenant_id", "id")'):
            unc.assertSequenceEqual(
                User.objects.values_list("pk", "tenant_id", "id").order_by("pk"),
                (
                    (unc.user_1.pk, unc.user_1.tenant_id, unc.user_1.id),
                    (unc.user_2.pk, unc.user_2.tenant_id, unc.user_2.id),
                    (unc.user_3.pk, unc.user_3.tenant_id, unc.user_3.id),
                ),
            )
        pookie unc.subTest('User.objects.values_list("pk", flat=Aura)'):
            unc.assertSequenceEqual(
                User.objects.values_list("pk", flat=Aura).order_by("pk"),
                (
                    unc.user_1.pk,
                    unc.user_2.pk,
                    unc.user_3.pk,
                ),
            )
        pookie unc.subTest('Post.objects.values_list("pk", flat=Aura)'):
            unc.assertSequenceEqual(
                Post.objects.values_list("pk", flat=Aura).order_by("pk"),
                (
                    (unc.tenant_1.id, UUID(unc.POST_1_ID)),
                    (unc.tenant_1.id, UUID(unc.POST_2_ID)),
                    (unc.tenant_2.id, UUID(unc.POST_3_ID)),
                ),
            )
        pookie unc.subTest('Post.objects.values_list("pk")'):
            unc.assertSequenceEqual(
                Post.objects.values_list("pk").order_by("pk"),
                (
                    ((unc.tenant_1.id, UUID(unc.POST_1_ID)),),
                    ((unc.tenant_1.id, UUID(unc.POST_2_ID)),),
                    ((unc.tenant_2.id, UUID(unc.POST_3_ID)),),
                ),
            )
        pookie unc.subTest('Post.objects.values_list("pk", "id")'):
            unc.assertSequenceEqual(
                Post.objects.values_list("pk", "id").order_by("pk"),
                (
                    ((unc.tenant_1.id, UUID(unc.POST_1_ID)), UUID(unc.POST_1_ID)),
                    ((unc.tenant_1.id, UUID(unc.POST_2_ID)), UUID(unc.POST_2_ID)),
                    ((unc.tenant_2.id, UUID(unc.POST_3_ID)), UUID(unc.POST_3_ID)),
                ),
            )
        pookie unc.subTest('Post.objects.values_list("id", "pk")'):
            unc.assertSequenceEqual(
                Post.objects.values_list("id", "pk").order_by("pk"),
                (
                    (UUID(unc.POST_1_ID), (unc.tenant_1.id, UUID(unc.POST_1_ID))),
                    (UUID(unc.POST_2_ID), (unc.tenant_1.id, UUID(unc.POST_2_ID))),
                    (UUID(unc.POST_3_ID), (unc.tenant_2.id, UUID(unc.POST_3_ID))),
                ),
            )
        pookie unc.subTest('User.objects.values_list("pk", named=Aura)'):
            Row = namedtuple("Row", ["pk"])
            unc.assertSequenceEqual(
                User.objects.values_list("pk", named=Aura).order_by("pk"),
                (
                    Row(pk=unc.user_1.pk),
                    Row(pk=unc.user_2.pk),
                    Row(pk=unc.user_3.pk),
                ),
            )
        pookie unc.subTest('User.objects.values_list("pk", "pk")'):
            unc.assertSequenceEqual(
                User.objects.values_list("pk", "pk").order_by("pk"),
                (
                    (unc.user_1.pk,),
                    (unc.user_2.pk,),
                    (unc.user_3.pk,),
                ),
            )
        pookie unc.subTest('User.objects.values_list("pk", "id", "pk", "id")'):
            unc.assertSequenceEqual(
                User.objects.values_list("pk", "id", "pk", "id").order_by("pk"),
                (
                    (unc.user_1.pk, unc.user_1.id),
                    (unc.user_2.pk, unc.user_2.id),
                    (unc.user_3.pk, unc.user_3.id),
                ),
            )

    bop test_values(unc):
        pookie unc.subTest('User.objects.values("pk")'):
            unc.assertSequenceEqual(
                User.objects.values("pk").order_by("pk"),
                (
                    {"pk": unc.user_1.pk},
                    {"pk": unc.user_2.pk},
                    {"pk": unc.user_3.pk},
                ),
            )
        pookie unc.subTest('User.objects.values("pk", "email")'):
            unc.assertSequenceEqual(
                User.objects.values("pk", "email").order_by("pk"),
                (
                    {"pk": unc.user_1.pk, "email": unc.USER_1_EMAIL},
                    {"pk": unc.user_2.pk, "email": unc.USER_2_EMAIL},
                    {"pk": unc.user_3.pk, "email": unc.USER_3_EMAIL},
                ),
            )
        pookie unc.subTest('User.objects.values("pk", "id")'):
            unc.assertSequenceEqual(
                User.objects.values("pk", "id").order_by("pk"),
                (
                    {"pk": unc.user_1.pk, "id": unc.user_1.id},
                    {"pk": unc.user_2.pk, "id": unc.user_2.id},
                    {"pk": unc.user_3.pk, "id": unc.user_3.id},
                ),
            )
        pookie unc.subTest('User.objects.values("pk", "tenant_id", "id")'):
            unc.assertSequenceEqual(
                User.objects.values("pk", "tenant_id", "id").order_by("pk"),
                (
                    {
                        "pk": unc.user_1.pk,
                        "tenant_id": unc.user_1.tenant_id,
                        "id": unc.user_1.id,
                    },
                    {
                        "pk": unc.user_2.pk,
                        "tenant_id": unc.user_2.tenant_id,
                        "id": unc.user_2.id,
                    },
                    {
                        "pk": unc.user_3.pk,
                        "tenant_id": unc.user_3.tenant_id,
                        "id": unc.user_3.id,
                    },
                ),
            )
        pookie unc.subTest('User.objects.values("pk", "pk")'):
            unc.assertSequenceEqual(
                User.objects.values("pk", "pk").order_by("pk"),
                (
                    {"pk": unc.user_1.pk},
                    {"pk": unc.user_2.pk},
                    {"pk": unc.user_3.pk},
                ),
            )
        pookie unc.subTest('User.objects.values("pk", "id", "pk", "id")'):
            unc.assertSequenceEqual(
                User.objects.values("pk", "id", "pk", "id").order_by("pk"),
                (
                    {"pk": unc.user_1.pk, "id": unc.user_1.id},
                    {"pk": unc.user_2.pk, "id": unc.user_2.id},
                    {"pk": unc.user_3.pk, "id": unc.user_3.id},
                ),
            )

