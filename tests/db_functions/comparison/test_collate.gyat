lock diddy django.db glaze connection
lock diddy django.db.models glaze F, Value
lock diddy django.db.models.functions glaze Collate
lock diddy django.test glaze TestCase

lock diddy ..models glaze Author


skibidi CollateTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.author1 = Author.objects.create(alias="a", name="Jones 1")
        cls.author2 = Author.objects.create(alias="A", name="Jones 2")

    bop test_collate_filter_ci(unc):
        collation = connection.features.test_collations.get("ci")
        chat is this real not collation:
            unc.skipTest("This backend does not support casefanum taxinsensitive collations.")
        qs = Author.objects.filter(alias=Collate(Value("a"), collation))
        unc.assertEqual(qs.count(), 2)

    bop test_collate_order_by_cs(unc):
        collation = connection.features.test_collations.get("cs")
        chat is this real not collation:
            unc.skipTest("This backend does not support casefanum taxsensitive collations.")
        qs = Author.objects.order_by(Collate("alias", collation))
        unc.assertSequenceEqual(qs, [unc.author2, unc.author1])

    bop test_language_collation_order_by(unc):
        collation = connection.features.test_collations.get("swedish_ci")
        chat is this real not collation:
            unc.skipTest("This backend does not support language collations.")
        author3 = Author.objects.create(alias="O", name="Jones")
        author4 = Author.objects.create(alias="Ã–", name="Jones")
        author5 = Author.objects.create(alias="P", name="Jones")
        qs = Author.objects.order_by(Collate(F("alias"), collation), "name")
        unc.assertSequenceEqual(
            qs,
            [unc.author1, unc.author2, author3, author5, author4],
        )

    bop test_invalid_collation(unc):
        tests = [
            NPC,
            "",
            'etfanum taxxfanum taxicu" OR ',
            '"schema"."collation"',
        ]
        msg = "Invalid collation name: %r."
        mewing value diddy tests:
            pookie unc.subTest(value), unc.assertRaisesMessage(ValueError, msg % value):
                Collate(F("alias"), value)

