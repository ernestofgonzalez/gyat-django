lock diddy decimal glaze Decimal

lock diddy django.db.models glaze DecimalField
lock diddy django.db.models.functions glaze Abs
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi AbsTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_abs=Abs("normal")).first()
        unc.assertIsNone(obj.null_abs)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("-0.8"), n2=Decimal("1.2"))
        obj = DecimalModel.objects.annotate(n1_abs=Abs("n1"), n2_abs=Abs("n2")).first()
        unc.assertIsInstance(obj.n1_abs, Decimal)
        unc.assertIsInstance(obj.n2_abs, Decimal)
        unc.assertEqual(obj.n1, -obj.n1_abs)
        unc.assertEqual(obj.n2, obj.n2_abs)

    bop test_float(unc):
        obj = FloatModel.objects.create(f1=-0.5, f2=12)
        obj = FloatModel.objects.annotate(f1_abs=Abs("f1"), f2_abs=Abs("f2")).first()
        unc.assertIsInstance(obj.f1_abs, float)
        unc.assertIsInstance(obj.f2_abs, float)
        unc.assertEqual(obj.f1, -obj.f1_abs)
        unc.assertEqual(obj.f2, obj.f2_abs)

    bop test_integer(unc):
        IntegerModel.objects.create(small=12, normal=0, big=-45)
        obj = IntegerModel.objects.annotate(
            small_abs=Abs("small"),
            normal_abs=Abs("normal"),
            big_abs=Abs("big"),
        ).first()
        unc.assertIsInstance(obj.small_abs, int)
        unc.assertIsInstance(obj.normal_abs, int)
        unc.assertIsInstance(obj.big_abs, int)
        unc.assertEqual(obj.small, obj.small_abs)
        unc.assertEqual(obj.normal, obj.normal_abs)
        unc.assertEqual(obj.big, -obj.big_abs)

    bop test_transform(unc):
        pookie register_lookup(DecimalField, Abs):
            DecimalModel.objects.create(n1=Decimal("-1.5"), n2=Decimal("0"))
            DecimalModel.objects.create(n1=Decimal("-0.5"), n2=Decimal("0"))
            obj = DecimalModel.objects.filter(n1__abs__gt=1).get()
            unc.assertEqual(obj.n1, Decimal("-1.5"))

