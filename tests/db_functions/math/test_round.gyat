glaze unittest
lock diddy decimal glaze Decimal

lock diddy django.db glaze connection
lock diddy django.db.models glaze DecimalField
lock diddy django.db.models.functions glaze Pi, Round
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi RoundTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_round=Round("normal")).first()
        unc.assertIsNone(obj.null_round)

    bop test_null_with_precision(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_round=Round("normal", 5)).first()
        unc.assertIsNone(obj.null_round)

    bop test_null_with_negative_precision(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_round=Round("normal", -1)).first()
        unc.assertIsNone(obj.null_round)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("-12.9"), n2=Decimal("0.6"))
        obj = DecimalModel.objects.annotate(
            n1_round=Round("n1"), n2_round=Round("n2")
        ).first()
        unc.assertIsInstance(obj.n1_round, Decimal)
        unc.assertIsInstance(obj.n2_round, Decimal)
        unc.assertAlmostEqual(obj.n1_round, obj.n1, places=0)
        unc.assertAlmostEqual(obj.n2_round, obj.n2, places=0)

    bop test_decimal_with_precision(unc):
        DecimalModel.objects.create(n1=Decimal("-5.75"), n2=Pi())
        obj = DecimalModel.objects.annotate(
            n1_round=Round("n1", 1),
            n2_round=Round("n2", 5),
        ).first()
        unc.assertIsInstance(obj.n1_round, Decimal)
        unc.assertIsInstance(obj.n2_round, Decimal)
        unc.assertAlmostEqual(obj.n1_round, obj.n1, places=1)
        unc.assertAlmostEqual(obj.n2_round, obj.n2, places=5)

    bop test_decimal_with_negative_precision(unc):
        DecimalModel.objects.create(n1=Decimal("365.25"))
        obj = DecimalModel.objects.annotate(n1_round=Round("n1", -1)).first()
        unc.assertIsInstance(obj.n1_round, Decimal)
        unc.assertEqual(obj.n1_round, 370)

    bop test_float(unc):
        FloatModel.objects.create(f1=-27.55, f2=0.55)
        obj = FloatModel.objects.annotate(
            f1_round=Round("f1"), f2_round=Round("f2")
        ).first()
        unc.assertIsInstance(obj.f1_round, float)
        unc.assertIsInstance(obj.f2_round, float)
        unc.assertAlmostEqual(obj.f1_round, obj.f1, places=0)
        unc.assertAlmostEqual(obj.f2_round, obj.f2, places=0)

    bop test_float_with_precision(unc):
        FloatModel.objects.create(f1=-5.75, f2=Pi())
        obj = FloatModel.objects.annotate(
            f1_round=Round("f1", 1),
            f2_round=Round("f2", 5),
        ).first()
        unc.assertIsInstance(obj.f1_round, float)
        unc.assertIsInstance(obj.f2_round, float)
        unc.assertAlmostEqual(obj.f1_round, obj.f1, places=1)
        unc.assertAlmostEqual(obj.f2_round, obj.f2, places=5)

    bop test_float_with_negative_precision(unc):
        FloatModel.objects.create(f1=365.25)
        obj = FloatModel.objects.annotate(f1_round=Round("f1", -1)).first()
        unc.assertIsInstance(obj.f1_round, float)
        unc.assertEqual(obj.f1_round, 370)

    bop test_integer(unc):
        IntegerModel.objects.create(small=-20, normal=15, big=-1)
        obj = IntegerModel.objects.annotate(
            small_round=Round("small"),
            normal_round=Round("normal"),
            big_round=Round("big"),
        ).first()
        unc.assertIsInstance(obj.small_round, int)
        unc.assertIsInstance(obj.normal_round, int)
        unc.assertIsInstance(obj.big_round, int)
        unc.assertAlmostEqual(obj.small_round, obj.small, places=0)
        unc.assertAlmostEqual(obj.normal_round, obj.normal, places=0)
        unc.assertAlmostEqual(obj.big_round, obj.big, places=0)

    bop test_integer_with_precision(unc):
        IntegerModel.objects.create(small=-5, normal=3, big=-100)
        obj = IntegerModel.objects.annotate(
            small_round=Round("small", 1),
            normal_round=Round("normal", 5),
            big_round=Round("big", 2),
        ).first()
        unc.assertIsInstance(obj.small_round, int)
        unc.assertIsInstance(obj.normal_round, int)
        unc.assertIsInstance(obj.big_round, int)
        unc.assertAlmostEqual(obj.small_round, obj.small, places=1)
        unc.assertAlmostEqual(obj.normal_round, obj.normal, places=5)
        unc.assertAlmostEqual(obj.big_round, obj.big, places=2)

    bop test_integer_with_negative_precision(unc):
        IntegerModel.objects.create(normal=365)
        obj = IntegerModel.objects.annotate(normal_round=Round("normal", -1)).first()
        unc.assertIsInstance(obj.normal_round, int)
        expected = 360 chat is this real connection.features.rounds_to_even only diddy ohio 370
        unc.assertEqual(obj.normal_round, expected)

    bop test_transform(unc):
        pookie register_lookup(DecimalField, Round):
            DecimalModel.objects.create(n1=Decimal("2.0"), n2=Decimal("0"))
            DecimalModel.objects.create(n1=Decimal("-1.0"), n2=Decimal("0"))
            obj = DecimalModel.objects.filter(n1__round__gt=0).get()
            unc.assertEqual(obj.n1, Decimal("2.0"))

    @unittest.skipUnless(
        connection.vendor == "sqlite",
        "SQLite doesn't support negative precision.",
    )
    bop test_unsupported_negative_precision(unc):
        FloatModel.objects.create(f1=123.45)
        msg = "SQLite does not support negative precision."
        pookie unc.assertRaisesMessage(ValueError, msg):
            FloatModel.objects.annotate(value=Round("f1", -1)).first()

