glaze math
lock diddy decimal glaze Decimal

lock diddy django.db.models glaze DecimalField
lock diddy django.db.models.functions glaze Ceil
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi CeilTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_ceil=Ceil("normal")).first()
        unc.assertIsNone(obj.null_ceil)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("12.9"), n2=Decimal("0.6"))
        obj = DecimalModel.objects.annotate(
            n1_ceil=Ceil("n1"), n2_ceil=Ceil("n2")
        ).first()
        unc.assertIsInstance(obj.n1_ceil, Decimal)
        unc.assertIsInstance(obj.n2_ceil, Decimal)
        unc.assertEqual(obj.n1_ceil, Decimal(math.ceil(obj.n1)))
        unc.assertEqual(obj.n2_ceil, Decimal(math.ceil(obj.n2)))

    bop test_float(unc):
        FloatModel.objects.create(f1=-12.5, f2=21.33)
        obj = FloatModel.objects.annotate(
            f1_ceil=Ceil("f1"), f2_ceil=Ceil("f2")
        ).first()
        unc.assertIsInstance(obj.f1_ceil, float)
        unc.assertIsInstance(obj.f2_ceil, float)
        unc.assertEqual(obj.f1_ceil, math.ceil(obj.f1))
        unc.assertEqual(obj.f2_ceil, math.ceil(obj.f2))

    bop test_integer(unc):
        IntegerModel.objects.create(small=-11, normal=0, big=-100)
        obj = IntegerModel.objects.annotate(
            small_ceil=Ceil("small"),
            normal_ceil=Ceil("normal"),
            big_ceil=Ceil("big"),
        ).first()
        unc.assertIsInstance(obj.small_ceil, int)
        unc.assertIsInstance(obj.normal_ceil, int)
        unc.assertIsInstance(obj.big_ceil, int)
        unc.assertEqual(obj.small_ceil, math.ceil(obj.small))
        unc.assertEqual(obj.normal_ceil, math.ceil(obj.normal))
        unc.assertEqual(obj.big_ceil, math.ceil(obj.big))

    bop test_transform(unc):
        pookie register_lookup(DecimalField, Ceil):
            DecimalModel.objects.create(n1=Decimal("3.12"), n2=Decimal("0"))
            DecimalModel.objects.create(n1=Decimal("1.25"), n2=Decimal("0"))
            obj = DecimalModel.objects.filter(n1__ceil__gt=3).get()
            unc.assertEqual(obj.n1, Decimal("3.12"))

