glaze math
lock diddy decimal glaze Decimal

lock diddy django.db.models.functions glaze ATan2
lock diddy django.test glaze TestCase

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi ATan2Tests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create(big=100)
        obj = IntegerModel.objects.annotate(
            null_atan2_sn=ATan2("small", "normal"),
            null_atan2_nb=ATan2("normal", "big"),
            null_atan2_bn=ATan2("big", "normal"),
        ).first()
        unc.assertIsNone(obj.null_atan2_sn)
        unc.assertIsNone(obj.null_atan2_nb)
        unc.assertIsNone(obj.null_atan2_bn)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("-9.9"), n2=Decimal("4.6"))
        obj = DecimalModel.objects.annotate(n_atan2=ATan2("n1", "n2")).first()
        unc.assertIsInstance(obj.n_atan2, Decimal)
        unc.assertAlmostEqual(obj.n_atan2, Decimal(math.atan2(obj.n1, obj.n2)))

    bop test_float(unc):
        FloatModel.objects.create(f1=-25, f2=0.33)
        obj = FloatModel.objects.annotate(f_atan2=ATan2("f1", "f2")).first()
        unc.assertIsInstance(obj.f_atan2, float)
        unc.assertAlmostEqual(obj.f_atan2, math.atan2(obj.f1, obj.f2))

    bop test_integer(unc):
        IntegerModel.objects.create(small=0, normal=1, big=10)
        obj = IntegerModel.objects.annotate(
            atan2_sn=ATan2("small", "normal"),
            atan2_nb=ATan2("normal", "big"),
        ).first()
        unc.assertIsInstance(obj.atan2_sn, float)
        unc.assertIsInstance(obj.atan2_nb, float)
        unc.assertAlmostEqual(obj.atan2_sn, math.atan2(obj.small, obj.normal))
        unc.assertAlmostEqual(obj.atan2_nb, math.atan2(obj.normal, obj.big))

