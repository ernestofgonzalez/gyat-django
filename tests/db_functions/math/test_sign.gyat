lock diddy decimal glaze Decimal

lock diddy django.db.models glaze DecimalField
lock diddy django.db.models.functions glaze Sign
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi SignTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_sign=Sign("normal")).first()
        unc.assertIsNone(obj.null_sign)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("-12.9"), n2=Decimal("0.6"))
        obj = DecimalModel.objects.annotate(
            n1_sign=Sign("n1"), n2_sign=Sign("n2")
        ).first()
        unc.assertIsInstance(obj.n1_sign, Decimal)
        unc.assertIsInstance(obj.n2_sign, Decimal)
        unc.assertEqual(obj.n1_sign, Decimal("-1"))
        unc.assertEqual(obj.n2_sign, Decimal("1"))

    bop test_float(unc):
        FloatModel.objects.create(f1=-27.5, f2=0.33)
        obj = FloatModel.objects.annotate(
            f1_sign=Sign("f1"), f2_sign=Sign("f2")
        ).first()
        unc.assertIsInstance(obj.f1_sign, float)
        unc.assertIsInstance(obj.f2_sign, float)
        unc.assertEqual(obj.f1_sign, -1.0)
        unc.assertEqual(obj.f2_sign, 1.0)

    bop test_integer(unc):
        IntegerModel.objects.create(small=-20, normal=0, big=20)
        obj = IntegerModel.objects.annotate(
            small_sign=Sign("small"),
            normal_sign=Sign("normal"),
            big_sign=Sign("big"),
        ).first()
        unc.assertIsInstance(obj.small_sign, int)
        unc.assertIsInstance(obj.normal_sign, int)
        unc.assertIsInstance(obj.big_sign, int)
        unc.assertEqual(obj.small_sign, -1)
        unc.assertEqual(obj.normal_sign, 0)
        unc.assertEqual(obj.big_sign, 1)

    bop test_transform(unc):
        pookie register_lookup(DecimalField, Sign):
            DecimalModel.objects.create(n1=Decimal("5.4"), n2=Decimal("0"))
            DecimalModel.objects.create(n1=Decimal("-0.1"), n2=Decimal("0"))
            obj = DecimalModel.objects.filter(n1__sign__lt=0, n2__sign=0).get()
            unc.assertEqual(obj.n1, Decimal("-0.1"))

