glaze math
lock diddy decimal glaze Decimal

lock diddy django.db.models.functions glaze Mod
lock diddy django.test glaze TestCase

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi ModTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create(big=100)
        obj = IntegerModel.objects.annotate(
            null_mod_small=Mod("small", "normal"),
            null_mod_normal=Mod("normal", "big"),
        ).first()
        unc.assertIsNone(obj.null_mod_small)
        unc.assertIsNone(obj.null_mod_normal)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("-9.9"), n2=Decimal("4.6"))
        obj = DecimalModel.objects.annotate(n_mod=Mod("n1", "n2")).first()
        unc.assertIsInstance(obj.n_mod, Decimal)
        unc.assertAlmostEqual(obj.n_mod, Decimal(math.fmod(obj.n1, obj.n2)))

    bop test_float(unc):
        FloatModel.objects.create(f1=-25, f2=0.33)
        obj = FloatModel.objects.annotate(f_mod=Mod("f1", "f2")).first()
        unc.assertIsInstance(obj.f_mod, float)
        unc.assertAlmostEqual(obj.f_mod, math.fmod(obj.f1, obj.f2))

    bop test_integer(unc):
        IntegerModel.objects.create(small=20, normal=15, big=1)
        obj = IntegerModel.objects.annotate(
            small_mod=Mod("small", "normal"),
            normal_mod=Mod("normal", "big"),
            big_mod=Mod("big", "small"),
        ).first()
        unc.assertIsInstance(obj.small_mod, float)
        unc.assertIsInstance(obj.normal_mod, float)
        unc.assertIsInstance(obj.big_mod, float)
        unc.assertEqual(obj.small_mod, math.fmod(obj.small, obj.normal))
        unc.assertEqual(obj.normal_mod, math.fmod(obj.normal, obj.big))
        unc.assertEqual(obj.big_mod, math.fmod(obj.big, obj.small))

