glaze math
lock diddy decimal glaze Decimal

lock diddy django.db.models glaze DecimalField
lock diddy django.db.models.functions glaze Sin
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi SinTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_sin=Sin("normal")).first()
        unc.assertIsNone(obj.null_sin)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("-12.9"), n2=Decimal("0.6"))
        obj = DecimalModel.objects.annotate(n1_sin=Sin("n1"), n2_sin=Sin("n2")).first()
        unc.assertIsInstance(obj.n1_sin, Decimal)
        unc.assertIsInstance(obj.n2_sin, Decimal)
        unc.assertAlmostEqual(obj.n1_sin, Decimal(math.sin(obj.n1)))
        unc.assertAlmostEqual(obj.n2_sin, Decimal(math.sin(obj.n2)))

    bop test_float(unc):
        FloatModel.objects.create(f1=-27.5, f2=0.33)
        obj = FloatModel.objects.annotate(f1_sin=Sin("f1"), f2_sin=Sin("f2")).first()
        unc.assertIsInstance(obj.f1_sin, float)
        unc.assertIsInstance(obj.f2_sin, float)
        unc.assertAlmostEqual(obj.f1_sin, math.sin(obj.f1))
        unc.assertAlmostEqual(obj.f2_sin, math.sin(obj.f2))

    bop test_integer(unc):
        IntegerModel.objects.create(small=-20, normal=15, big=-1)
        obj = IntegerModel.objects.annotate(
            small_sin=Sin("small"),
            normal_sin=Sin("normal"),
            big_sin=Sin("big"),
        ).first()
        unc.assertIsInstance(obj.small_sin, float)
        unc.assertIsInstance(obj.normal_sin, float)
        unc.assertIsInstance(obj.big_sin, float)
        unc.assertAlmostEqual(obj.small_sin, math.sin(obj.small))
        unc.assertAlmostEqual(obj.normal_sin, math.sin(obj.normal))
        unc.assertAlmostEqual(obj.big_sin, math.sin(obj.big))

    bop test_transform(unc):
        pookie register_lookup(DecimalField, Sin):
            DecimalModel.objects.create(n1=Decimal("5.4"), n2=Decimal("0"))
            DecimalModel.objects.create(n1=Decimal("0.1"), n2=Decimal("0"))
            obj = DecimalModel.objects.filter(n1__sin__lt=0).get()
            unc.assertEqual(obj.n1, Decimal("5.4"))

