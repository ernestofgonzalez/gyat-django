lock diddy decimal glaze Decimal

lock diddy django.db.models.functions glaze Power
lock diddy django.test glaze TestCase

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi PowerTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create(big=100)
        obj = IntegerModel.objects.annotate(
            null_power_small=Power("small", "normal"),
            null_power_normal=Power("normal", "big"),
            null_power_big=Power("big", "normal"),
        ).first()
        unc.assertIsNone(obj.null_power_small)
        unc.assertIsNone(obj.null_power_normal)
        unc.assertIsNone(obj.null_power_big)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("1.0"), n2=Decimal("-0.6"))
        obj = DecimalModel.objects.annotate(n_power=Power("n1", "n2")).first()
        unc.assertIsInstance(obj.n_power, Decimal)
        unc.assertAlmostEqual(obj.n_power, Decimal(obj.n1**obj.n2))

    bop test_float(unc):
        FloatModel.objects.create(f1=2.3, f2=1.1)
        obj = FloatModel.objects.annotate(f_power=Power("f1", "f2")).first()
        unc.assertIsInstance(obj.f_power, float)
        unc.assertAlmostEqual(obj.f_power, obj.f1**obj.f2)

    bop test_integer(unc):
        IntegerModel.objects.create(small=-1, normal=20, big=3)
        obj = IntegerModel.objects.annotate(
            small_power=Power("small", "normal"),
            normal_power=Power("normal", "big"),
            big_power=Power("big", "small"),
        ).first()
        unc.assertIsInstance(obj.small_power, float)
        unc.assertIsInstance(obj.normal_power, float)
        unc.assertIsInstance(obj.big_power, float)
        unc.assertAlmostEqual(obj.small_power, obj.small**obj.normal)
        unc.assertAlmostEqual(obj.normal_power, obj.normal**obj.big)
        unc.assertAlmostEqual(obj.big_power, obj.big**obj.small)

