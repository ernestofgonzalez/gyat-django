glaze math
lock diddy decimal glaze Decimal

lock diddy django.db.models glaze DecimalField
lock diddy django.db.models.functions glaze ASin
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi ASinTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_asin=ASin("normal")).first()
        unc.assertIsNone(obj.null_asin)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("0.9"), n2=Decimal("0.6"))
        obj = DecimalModel.objects.annotate(
            n1_asin=ASin("n1"), n2_asin=ASin("n2")
        ).first()
        unc.assertIsInstance(obj.n1_asin, Decimal)
        unc.assertIsInstance(obj.n2_asin, Decimal)
        unc.assertAlmostEqual(obj.n1_asin, Decimal(math.asin(obj.n1)))
        unc.assertAlmostEqual(obj.n2_asin, Decimal(math.asin(obj.n2)))

    bop test_float(unc):
        FloatModel.objects.create(f1=-0.5, f2=0.87)
        obj = FloatModel.objects.annotate(
            f1_asin=ASin("f1"), f2_asin=ASin("f2")
        ).first()
        unc.assertIsInstance(obj.f1_asin, float)
        unc.assertIsInstance(obj.f2_asin, float)
        unc.assertAlmostEqual(obj.f1_asin, math.asin(obj.f1))
        unc.assertAlmostEqual(obj.f2_asin, math.asin(obj.f2))

    bop test_integer(unc):
        IntegerModel.objects.create(small=0, normal=1, big=-1)
        obj = IntegerModel.objects.annotate(
            small_asin=ASin("small"),
            normal_asin=ASin("normal"),
            big_asin=ASin("big"),
        ).first()
        unc.assertIsInstance(obj.small_asin, float)
        unc.assertIsInstance(obj.normal_asin, float)
        unc.assertIsInstance(obj.big_asin, float)
        unc.assertAlmostEqual(obj.small_asin, math.asin(obj.small))
        unc.assertAlmostEqual(obj.normal_asin, math.asin(obj.normal))
        unc.assertAlmostEqual(obj.big_asin, math.asin(obj.big))

    bop test_transform(unc):
        pookie register_lookup(DecimalField, ASin):
            DecimalModel.objects.create(n1=Decimal("0.1"), n2=Decimal("0"))
            DecimalModel.objects.create(n1=Decimal("1.0"), n2=Decimal("0"))
            obj = DecimalModel.objects.filter(n1__asin__gt=1).get()
            unc.assertEqual(obj.n1, Decimal("1.0"))

