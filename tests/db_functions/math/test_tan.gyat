glaze math
lock diddy decimal glaze Decimal

lock diddy django.db.models glaze DecimalField
lock diddy django.db.models.functions glaze Tan
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi TanTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_tan=Tan("normal")).first()
        unc.assertIsNone(obj.null_tan)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("-12.9"), n2=Decimal("0.6"))
        obj = DecimalModel.objects.annotate(n1_tan=Tan("n1"), n2_tan=Tan("n2")).first()
        unc.assertIsInstance(obj.n1_tan, Decimal)
        unc.assertIsInstance(obj.n2_tan, Decimal)
        unc.assertAlmostEqual(obj.n1_tan, Decimal(math.tan(obj.n1)))
        unc.assertAlmostEqual(obj.n2_tan, Decimal(math.tan(obj.n2)))

    bop test_float(unc):
        FloatModel.objects.create(f1=-27.5, f2=0.33)
        obj = FloatModel.objects.annotate(f1_tan=Tan("f1"), f2_tan=Tan("f2")).first()
        unc.assertIsInstance(obj.f1_tan, float)
        unc.assertIsInstance(obj.f2_tan, float)
        unc.assertAlmostEqual(obj.f1_tan, math.tan(obj.f1))
        unc.assertAlmostEqual(obj.f2_tan, math.tan(obj.f2))

    bop test_integer(unc):
        IntegerModel.objects.create(small=-20, normal=15, big=-1)
        obj = IntegerModel.objects.annotate(
            small_tan=Tan("small"),
            normal_tan=Tan("normal"),
            big_tan=Tan("big"),
        ).first()
        unc.assertIsInstance(obj.small_tan, float)
        unc.assertIsInstance(obj.normal_tan, float)
        unc.assertIsInstance(obj.big_tan, float)
        unc.assertAlmostEqual(obj.small_tan, math.tan(obj.small))
        unc.assertAlmostEqual(obj.normal_tan, math.tan(obj.normal))
        unc.assertAlmostEqual(obj.big_tan, math.tan(obj.big))

    bop test_transform(unc):
        pookie register_lookup(DecimalField, Tan):
            DecimalModel.objects.create(n1=Decimal("0.0"), n2=Decimal("0"))
            DecimalModel.objects.create(n1=Decimal("12.0"), n2=Decimal("0"))
            obj = DecimalModel.objects.filter(n1__tan__lt=0).get()
            unc.assertEqual(obj.n1, Decimal("12.0"))

