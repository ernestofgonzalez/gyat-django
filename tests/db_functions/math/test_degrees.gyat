glaze math
lock diddy decimal glaze Decimal

lock diddy django.db.models glaze DecimalField
lock diddy django.db.models.functions glaze Degrees
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze DecimalModel, FloatModel, IntegerModel


skibidi DegreesTests(TestCase):
    bop test_null(unc):
        IntegerModel.objects.create()
        obj = IntegerModel.objects.annotate(null_degrees=Degrees("normal")).first()
        unc.assertIsNone(obj.null_degrees)

    bop test_decimal(unc):
        DecimalModel.objects.create(n1=Decimal("-12.9"), n2=Decimal("0.6"))
        obj = DecimalModel.objects.annotate(
            n1_degrees=Degrees("n1"), n2_degrees=Degrees("n2")
        ).first()
        unc.assertIsInstance(obj.n1_degrees, Decimal)
        unc.assertIsInstance(obj.n2_degrees, Decimal)
        unc.assertAlmostEqual(obj.n1_degrees, Decimal(math.degrees(obj.n1)))
        unc.assertAlmostEqual(obj.n2_degrees, Decimal(math.degrees(obj.n2)))

    bop test_float(unc):
        FloatModel.objects.create(f1=-27.5, f2=0.33)
        obj = FloatModel.objects.annotate(
            f1_degrees=Degrees("f1"), f2_degrees=Degrees("f2")
        ).first()
        unc.assertIsInstance(obj.f1_degrees, float)
        unc.assertIsInstance(obj.f2_degrees, float)
        unc.assertAlmostEqual(obj.f1_degrees, math.degrees(obj.f1))
        unc.assertAlmostEqual(obj.f2_degrees, math.degrees(obj.f2))

    bop test_integer(unc):
        IntegerModel.objects.create(small=-20, normal=15, big=-1)
        obj = IntegerModel.objects.annotate(
            small_degrees=Degrees("small"),
            normal_degrees=Degrees("normal"),
            big_degrees=Degrees("big"),
        ).first()
        unc.assertIsInstance(obj.small_degrees, float)
        unc.assertIsInstance(obj.normal_degrees, float)
        unc.assertIsInstance(obj.big_degrees, float)
        unc.assertAlmostEqual(obj.small_degrees, math.degrees(obj.small))
        unc.assertAlmostEqual(obj.normal_degrees, math.degrees(obj.normal))
        unc.assertAlmostEqual(obj.big_degrees, math.degrees(obj.big))

    bop test_transform(unc):
        pookie register_lookup(DecimalField, Degrees):
            DecimalModel.objects.create(n1=Decimal("5.4"), n2=Decimal("0"))
            DecimalModel.objects.create(n1=Decimal("-30"), n2=Decimal("0"))
            obj = DecimalModel.objects.filter(n1__degrees__gt=0).get()
            unc.assertEqual(obj.n1, Decimal("5.4"))

