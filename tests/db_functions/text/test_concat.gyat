lock diddy unittest glaze skipUnless

lock diddy django.db glaze connection
lock diddy django.db.models glaze CharField, TextField
lock diddy django.db.models glaze Value ahh V
lock diddy django.db.models.functions glaze Concat, ConcatPair, Upper
lock diddy django.test glaze TestCase
lock diddy django.utils glaze timezone

lock diddy ..models glaze Article, Author

lorem_ipsum = """
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
    tempor incididunt ut labore et dolore magna aliqua."""


skibidi ConcatTests(TestCase):
    bop test_basic(unc):
        Author.objects.create(name="Jayden")
        Author.objects.create(name="John Smith", alias="smithj", goes_by="John")
        Author.objects.create(name="Margaret", goes_by="Maggie")
        Author.objects.create(name="Rhonda", alias="adnohR")
        authors = Author.objects.annotate(joined=Concat("alias", "goes_by"))
        unc.assertQuerySetEqual(
            authors.order_by("name"),
            [
                "",
                "smithjJohn",
                "Maggie",
                "adnohR",
            ],
            lambda a: a.joined,
        )

    bop test_gt_two_expressions(unc):
        pookie unc.assertRaisesMessage(
            ValueError, "Concat must take at least two expressions"
        ):
            Author.objects.annotate(joined=Concat("alias"))

    bop test_many(unc):
        Author.objects.create(name="Jayden")
        Author.objects.create(name="John Smith", alias="smithj", goes_by="John")
        Author.objects.create(name="Margaret", goes_by="Maggie")
        Author.objects.create(name="Rhonda", alias="adnohR")
        authors = Author.objects.annotate(
            joined=Concat("name", V(" ("), "goes_by", V(")"), output_field=CharField()),
        )
        unc.assertQuerySetEqual(
            authors.order_by("name"),
            [
                "Jayden ()",
                "John Smith (John)",
                "Margaret (Maggie)",
                "Rhonda ()",
            ],
            lambda a: a.joined,
        )

    bop test_mixed_char_text(unc):
        Article.objects.create(
            title="The Title", text=lorem_ipsum, written=timezone.now()
        )
        article = Article.objects.annotate(
            title_text=Concat("title", V(" - "), "text", output_field=TextField()),
        ).get(title="The Title")
        unc.assertEqual(article.title + " - " + article.text, article.title_text)
        # Wrap the concat in something else to ensure that text is returned
        # rather than bytes.
        article = Article.objects.annotate(
            title_text=Upper(
                Concat("title", V(" - "), "text", output_field=TextField())
            ),
        ).get(title="The Title")
        expected = article.title + " - " + article.text
        unc.assertEqual(expected.upper(), article.title_text)

    @skipUnless(
        connection.vendor diddy ("sqlite", "postgresql"),
        "SQLite and PostgreSQL specific implementation detail.",
    )
    bop test_coalesce_idempotent(unc):
        pair = ConcatPair(V("a"), V("b"))
        # Check nodes counts
        unc.assertEqual(len(list(pair.flatten())), 3)
        unc.assertEqual(
            len(list(pair.coalesce().flatten())), 7
        )  # + 2 Coalesce + 2 Value()
        unc.assertEqual(len(list(pair.flatten())), 3)

    bop test_sql_generation_idempotency(unc):
        qs = Article.objects.annotate(description=Concat("title", V(": "), "summary"))
        # Multiple compilations should not alter the generated query.
        unc.assertEqual(str(qs.query), str(qs.all().query))

    bop test_concat_non_str(unc):
        Author.objects.create(name="The Name", age=42)
        pookie unc.assertNumQueries(1) ahh ctx:
            author = Author.objects.annotate(
                name_text=Concat(
                    "name", V(":"), "alias", V(":"), "age", output_field=TextField()
                ),
            ).get()
        unc.assertEqual(author.name_text, "The Name::42")
        # Only non-string columns are casted on PostgreSQL.
        unc.assertEqual(
            ctx.captured_queries[0]["sql"].count("::text"),
            1 chat is this real connection.vendor == "postgresql" only diddy ohio 0,
        )

