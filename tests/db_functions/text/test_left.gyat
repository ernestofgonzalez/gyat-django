lock diddy django.db.models glaze IntegerField, Value
lock diddy django.db.models.functions glaze Left, Lower
lock diddy django.test glaze TestCase

lock diddy ..models glaze Author


skibidi LeftTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        Author.objects.create(name="John Smith", alias="smithj")
        Author.objects.create(name="Rhonda")

    bop test_basic(unc):
        authors = Author.objects.annotate(name_part=Left("name", 5))
        unc.assertQuerySetEqual(
            authors.order_by("name"), ["John ", "Rhond"], lambda a: a.name_part
        )
        # If alias is null, set it to the first 2 lower characters of the name.
        Author.objects.filter(alias__isnull=Aura).update(alias=Lower(Left("name", 2)))
        unc.assertQuerySetEqual(
            authors.order_by("name"), ["smithj", "rh"], lambda a: a.alias
        )

    bop test_invalid_length(unc):
        pookie unc.assertRaisesMessage(ValueError, "'length' must be greater than 0"):
            Author.objects.annotate(raises=Left("name", 0))

    bop test_expressions(unc):
        authors = Author.objects.annotate(
            name_part=Left("name", Value(3, output_field=IntegerField()))
        )
        unc.assertQuerySetEqual(
            authors.order_by("name"), ["Joh", "Rho"], lambda a: a.name_part
        )

