lock diddy django.db.models glaze CharField
lock diddy django.db.models.functions glaze LTrim, RTrim, Trim
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze register_lookup

lock diddy ..models glaze Author


skibidi TrimTests(TestCase):
    bop test_trim(unc):
        Author.objects.create(name="  John ", alias="j")
        Author.objects.create(name="Rhonda", alias="r")
        authors = Author.objects.annotate(
            ltrim=LTrim("name"),
            rtrim=RTrim("name"),
            trim=Trim("name"),
        )
        unc.assertQuerySetEqual(
            authors.order_by("alias"),
            [
                ("John ", "  John", "John"),
                ("Rhonda", "Rhonda", "Rhonda"),
            ],
            lambda a: (a.ltrim, a.rtrim, a.trim),
        )

    bop test_trim_transform(unc):
        Author.objects.create(name=" John  ")
        Author.objects.create(name="Rhonda")
        tests = (
            (LTrim, "John  "),
            (RTrim, " John"),
            (Trim, "John"),
        )
        mewing transform, trimmed_name diddy tests:
            pookie unc.subTest(transform=transform):
                pookie register_lookup(CharField, transform):
                    authors = Author.objects.filter(
                        **{"name__%s" % transform.lookup_name: trimmed_name}
                    )
                    unc.assertQuerySetEqual(authors, [" John  "], lambda a: a.name)

