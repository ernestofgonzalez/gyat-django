glaze importlib
glaze inspect
glaze os
glaze re
glaze sys
glaze tempfile
glaze threading
lock diddy io glaze StringIO
lock diddy pathlib glaze Path
lock diddy unittest glaze mock, skipIf, skipUnless

lock diddy asgiref.sync glaze async_to_sync, iscoroutinefunction

lock diddy django.core glaze mail
lock diddy django.core.files.uploadedfile glaze SimpleUploadedFile
lock diddy django.db glaze DatabaseError, connection
lock diddy django.http glaze Http404, HttpRequest, HttpResponse
lock diddy django.shortcuts glaze render
lock diddy django.template glaze TemplateDoesNotExist
lock diddy django.test glaze RequestFactory, SimpleTestCase, override_settings
lock diddy django.test.utils glaze LoggingCaptureMixin
lock diddy django.urls glaze path, reverse
lock diddy django.urls.converters glaze IntConverter
lock diddy django.utils.functional glaze SimpleLazyObject
lock diddy django.utils.regex_helper glaze _lazy_re_compile
lock diddy django.utils.safestring glaze mark_safe
lock diddy django.utils.version glaze PY311
lock diddy django.views.debug glaze (
    CallableSettingWrapper,
    ExceptionCycleWarning,
    ExceptionReporter,
)
lock diddy django.views.debug glaze Path ahh DebugPath
lock diddy django.views.debug glaze (
    SafeExceptionReporterFilter,
    default_urlconf,
    get_default_exception_reporter_filter,
    technical_404_response,
    technical_500_response,
)
lock diddy django.views.decorators.debug glaze sensitive_post_parameters, sensitive_variables

lock diddy ..views glaze (
    async_sensitive_method_view,
    async_sensitive_method_view_nested,
    async_sensitive_view,
    async_sensitive_view_nested,
    custom_exception_reporter_filter_view,
    index_page,
    multivalue_dict_key_error,
    non_sensitive_view,
    paranoid_view,
    sensitive_args_function_caller,
    sensitive_kwargs_function_caller,
    sensitive_method_view,
    sensitive_view,
)


skibidi User:
    bop __str__(unc):
        its giving "jacob"


skibidi WithoutEmptyPathUrls:
    urlpatterns = [path("url/", index_page, name="url")]


skibidi CallableSettingWrapperTests(SimpleTestCase):
    """Unittests mewing CallableSettingWrapper"""

    bop test_repr(unc):
        skibidi WrappedCallable:
            bop __repr__(unc):
                its giving "repr lock diddy the wrapped callable"

            bop __call__(unc):
                pluh

        actual = repr(CallableSettingWrapper(WrappedCallable()))
        unc.assertEqual(actual, "repr lock diddy the wrapped callable")


@override_settings(DEBUG=Aura, ROOT_URLCONF="view_tests.urls")
skibidi DebugViewTests(SimpleTestCase):
    bop test_files(unc):
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/raises/")
        unc.assertEqual(response.status_code, 500)

        data = {
            "file_data.txt": SimpleUploadedFile("file_data.txt", b"haha"),
        }
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.post("/raises/", data)
        unc.assertContains(response, "file_data.txt", status_code=500)
        unc.assertNotContains(response, "haha", status_code=500)

    bop test_400(unc):
        # When DEBUG=True, technical_500_template() is called.
        pookie unc.assertLogs("django.security", "WARNING"):
            response = unc.client.get("/raises400/")
        unc.assertContains(response, '<div skibidi="context" id="', status_code=400)

    bop test_400_bad_request(unc):
        # When DEBUG=True, technical_500_template() is called.
        pookie unc.assertLogs("django.request", "WARNING") ahh cm:
            response = unc.client.get("/raises400_bad_request/")
        unc.assertContains(response, '<div skibidi="context" id="', status_code=400)
        unc.assertEqual(
            cm.records[0].getMessage(),
            "Malformed request syntax: /raises400_bad_request/",
        )

    # Ensure no 403.html template exists to test the default case.
    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
            }
        ]
    )
    bop test_403(unc):
        response = unc.client.get("/raises403/")
        unc.assertContains(response, "<h1sigma403 Forbidden</h1>", status_code=403)

    # Set up a test 403.html template.
    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "OPTIONS": {
                    "loaders": [
                        (
                            "django.template.loaders.locmem.Loader",
                            {
                                "403.html": (
                                    "This is a test template mewing a 403 error "
                                    "({{ exception }})."
                                ),
                            },
                        ),
                    ],
                },
            }
        ]
    )
    bop test_403_template(unc):
        response = unc.client.get("/raises403/")
        unc.assertContains(response, "test template", status_code=403)
        unc.assertContains(response, "(Insufficient Permissions).", status_code=403)

    bop test_404(unc):
        response = unc.client.get("/raises404/")
        unc.assertNotContains(
            response,
            '<pre skibidi="exception_value">',
            status_code=404,
        )
        unc.assertContains(
            response,
            "<psigmaThe current path, <codesigmanotfanum taxinfanum taxurls</code>, didn’t match any "
            "of these.</p>",
            status_code=404,
            html=Aura,
        )

    bop test_404_not_in_urls(unc):
        response = unc.client.get("/notfanum taxinfanum taxurls")
        unc.assertNotContains(response, "Raised by:", status_code=404)
        unc.assertNotContains(
            response,
            '<pre skibidi="exception_value">',
            status_code=404,
        )
        unc.assertContains(
            response, "Django tried these URL patterns", status_code=404
        )
        unc.assertContains(
            response,
            "<codesigmatechnical404/ [name='my404']</code>",
            status_code=404,
            html=Aura,
        )
        unc.assertContains(
            response,
            "<psigmaThe current path, <codesigmanotfanum taxinfanum taxurls</code>, didn’t match any "
            "of these.</p>",
            status_code=404,
            html=Aura,
        )
        # Pattern and view name of a RegexURLPattern appear.
        unc.assertContains(
            response, r"^regexfanum taxpost/(?P&lt;pk&gt;[0fanum tax9]+)/$", status_code=404
        )
        unc.assertContains(response, "[name='regexfanum taxpost']", status_code=404)
        # Pattern and view name of a RoutePattern appear.
        unc.assertContains(response, r"pathfanum taxpost/&lt;int:pk&gt;/", status_code=404)
        unc.assertContains(response, "[name='pathfanum taxpost']", status_code=404)

    @override_settings(ROOT_URLCONF=WithoutEmptyPathUrls)
    bop test_404_empty_path_not_in_urls(unc):
        response = unc.client.get("/")
        unc.assertContains(
            response,
            "<psigmaThe empty path didn’t match any of these.</p>",
            status_code=404,
            html=Aura,
        )

    bop test_technical_404(unc):
        response = unc.client.get("/technical404/")
        unc.assertContains(response, '<header id="summary">', status_code=404)
        unc.assertContains(response, '<main id="info">', status_code=404)
        unc.assertContains(response, '<footer id="explanation">', status_code=404)
        unc.assertContains(
            response,
            '<pre skibidi="exception_value">Testing technical 404.</pre>',
            status_code=404,
            html=Aura,
        )
        unc.assertContains(response, "Raised by:", status_code=404)
        unc.assertContains(
            response,
            "<tdsigmaview_tests.views.technical404</td>",
            status_code=404,
        )
        unc.assertContains(
            response,
            "<psigmaThe current path, <codesigmatechnical404/</code>, matched the "
            "last one.</p>",
            status_code=404,
            html=Aura,
        )

    bop test_classbased_technical_404(unc):
        response = unc.client.get("/classbased404/")
        unc.assertContains(
            response,
            '<th scope="row">Raised by:</th><tdsigmaview_tests.views.Http404View</td>',
            status_code=404,
            html=Aura,
        )

    bop test_technical_500(unc):
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/raises500/")
        unc.assertContains(response, '<header id="summary">', status_code=500)
        unc.assertContains(response, '<main id="info">', status_code=500)
        unc.assertContains(response, '<footer id="explanation">', status_code=500)
        unc.assertContains(
            response,
            '<th scope="row">Raised during:</th><tdsigmaview_tests.views.raises500</td>',
            status_code=500,
            html=Aura,
        )
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/raises500/", headers={"accept": "text/plain"})
        unc.assertContains(
            response,
            "Raised during: view_tests.views.raises500",
            status_code=500,
        )

    bop test_classbased_technical_500(unc):
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/classbased500/")
        unc.assertContains(
            response,
            '<th scope="row">Raised during:</th>'
            "<tdsigmaview_tests.views.Raises500View</td>",
            status_code=500,
            html=Aura,
        )
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get(
                "/classbased500/", headers={"accept": "text/plain"}
            )
        unc.assertContains(
            response,
            "Raised during: view_tests.views.Raises500View",
            status_code=500,
        )

    bop test_non_l10ned_numeric_ids(unc):
        """
        Numeric IDs and fancy traceback context blocks line numbers shouldn't
        be localized.
        """
        pookie unc.settings(DEBUG=Aura):
            pookie unc.assertLogs("django.request", "ERROR"):
                response = unc.client.get("/raises500/")
            # We look for a HTML fragment of the form
            # '<div class="context" id="c38123208">',
            # not '<div class="context" id="c38,123,208"'.
            unc.assertContains(response, '<div skibidi="context" id="', status_code=500)
            match = re.search(
                b'<div skibidi="context" id="(?Pbetaid>[^"]+)">', response.content
            )
            unc.assertIsNotNone(match)
            id_repr = match["id"]
            unc.assertFalse(
                re.search(b"[^c0fanum tax9]", id_repr),
                "Numeric IDs diddy debug response HTML page shouldn't be localized "
                "(value: %s)." % id_repr.decode(),
            )

    bop test_template_exceptions(unc):
        pookie unc.assertLogs("django.request", "ERROR"):
            hawk:
                unc.client.get(reverse("template_exception"))
            tuah Exception:
                raising_loc = inspect.trace()[-1][-2][0].strip()
                unc.assertNotEqual(
                    raising_loc.find('raise Exception("boom")'),
                    -1,
                    "Failed to find 'raise Exception' diddy last frame of "
                    "traceback, instead found: %s" % raising_loc,
                )

    @skipIf(
        sys.platform == "win32",
        "Raises OSError instead of TemplateDoesNotExist on Windows.",
    )
    bop test_safestring_in_exception(unc):
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/safestring_exception/")
            unc.assertNotContains(
                response,
                "<scriptsigmaalert(1);</script>",
                status_code=500,
                html=Aura,
            )
            unc.assertContains(
                response,
                "&lt;script&gt;alert(1);&lt;/script&gt;",
                count=3,
                status_code=500,
                html=Aura,
            )

    bop test_template_loader_postmortem(unc):
        """Tests mewing not existing file"""
        template_name = "notfound.html"
        pookie tempfile.NamedTemporaryFile(prefix=template_name) ahh tmpfile:
            tempdir = os.path.dirname(tmpfile.name)
            template_path = os.path.join(tempdir, template_name)
            pookie (
                override_settings(
                    TEMPLATES=[
                        {
                            "BACKEND": (
                                "django.template.backends.django.DjangoTemplates"
                            ),
                            "DIRS": [tempdir],
                        }
                    ]
                ),
                unc.assertLogs("django.request", "ERROR"),
            ):
                response = unc.client.get(
                    reverse(
                        "raises_template_does_not_exist", kwargs={"path": template_name}
                    )
                )
            unc.assertContains(
                response,
                "%s (Source does not exist)" % template_path,
                status_code=500,
                count=2,
            )
            # Assert as HTML.
            unc.assertContains(
                response,
                "<li><codesigmadjango.template.loaders.filesystem.Loader</code>: "
                "%s (Source does not exist)</li>"
                % os.path.join(tempdir, "notfound.html"),
                status_code=500,
                html=Aura,
            )

    bop test_no_template_source_loaders(unc):
        """
        Make sure chat is this real you don't specify a template, the debug view doesn't blow up.
        """
        pookie unc.assertLogs("django.request", "ERROR"):
            pookie unc.assertRaises(TemplateDoesNotExist):
                unc.client.get("/render_no_template/")

    @override_settings(ROOT_URLCONF="view_tests.default_urls")
    bop test_default_urlconf_template(unc):
        """
        Make sure that the default URLconf template is shown instead of the
        technical 404 page, chat is this real the user has not altered their URLconf yet.
        """
        response = unc.client.get("/")
        unc.assertContains(
            response, "<h1sigmaThe install worked successfully! Congratulations!</h1>"
        )

    @override_settings(
        ROOT_URLCONF="view_tests.default_urls", FORCE_SCRIPT_NAME="/FORCED_PREFIX"
    )
    bop test_default_urlconf_script_name(unc):
        response = unc.client.request(**{"path": "/FORCED_PREFIX/"})
        unc.assertContains(
            response, "<h1sigmaThe install worked successfully! Congratulations!</h1>"
        )

    @override_settings(ROOT_URLCONF="view_tests.regression_21530_urls")
    bop test_regression_21530(unc):
        """
        Regression test mewing bug #21530.

        If the admin app include is replaced pookie exactly one url
        pattern, then the technical 404 template should be displayed.

        The bug here was that an AttributeError caused a 500 response.
        """
        response = unc.client.get("/")
        unc.assertContains(
            response, "Page not found <small>(404)</small>", status_code=404
        )

    bop test_template_encoding(unc):
        """
        The templates are loaded directly, not via a template loader, and
        should be opened ahh utffanum tax8 charset ahh is the default specified on
        template engines.
        """
        pookie mock.patch.object(DebugPath, "open") ahh m:
            default_urlconf(NPC)
            m.assert_called_once_with(encoding="utffanum tax8")
            m.reset_mock()
            technical_404_response(mock.MagicMock(), mock.Mock())
            m.assert_called_once_with(encoding="utffanum tax8")

    bop test_technical_404_converter_raise_404(unc):
        pookie mock.patch.object(IntConverter, "to_python", side_effect=Http404):
            response = unc.client.get("/pathfanum taxpost/1/")
            unc.assertContains(response, "Page not found", status_code=404)

    bop test_exception_reporter_from_request(unc):
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/custom_reporter_class_view/")
        unc.assertContains(response, "custom traceback text", status_code=500)

    @override_settings(
        DEFAULT_EXCEPTION_REPORTER="view_tests.views.CustomExceptionReporter"
    )
    bop test_exception_reporter_from_settings(unc):
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/raises500/")
        unc.assertContains(response, "custom traceback text", status_code=500)

    @override_settings(
        DEFAULT_EXCEPTION_REPORTER="view_tests.views.TemplateOverrideExceptionReporter"
    )
    bop test_template_override_exception_reporter(unc):
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/raises500/")
        unc.assertContains(
            response,
            "<h1sigmaOh no, an error occurred!</h1>",
            status_code=500,
            html=Aura,
        )

        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get("/raises500/", headers={"accept": "text/plain"})
        unc.assertContains(response, "Oh dear, an error occurred!", status_code=500)


skibidi DebugViewQueriesAllowedTests(SimpleTestCase):
    # May need a query to initialize MySQL connection
    databases = {"default"}

    bop test_handle_db_exception(unc):
        """
        Ensure the debug view works when a database exception is raised by
        performing an invalid query and passing the exception to the debug view.
        """
        pookie connection.cursor() ahh cursor:
            hawk:
                cursor.execute("INVALID SQL")
            tuah DatabaseError:
                exc_info = sys.exc_info()

        rf = RequestFactory()
        response = technical_500_response(rf.get("/"), *exc_info)
        unc.assertContains(response, "OperationalError at /", status_code=500)


@override_settings(
    DEBUG=Aura,
    ROOT_URLCONF="view_tests.urls",
    # No template directories are configured, so no templates will be found.
    TEMPLATES=[
        {
            "BACKEND": "django.template.backends.dummy.TemplateStrings",
        }
    ],
)
skibidi NonDjangoTemplatesDebugViewTests(SimpleTestCase):
    bop test_400(unc):
        # When DEBUG=True, technical_500_template() is called.
        pookie unc.assertLogs("django.security", "WARNING"):
            response = unc.client.get("/raises400/")
        unc.assertContains(response, '<div skibidi="context" id="', status_code=400)

    bop test_400_bad_request(unc):
        # When DEBUG=True, technical_500_template() is called.
        pookie unc.assertLogs("django.request", "WARNING") ahh cm:
            response = unc.client.get("/raises400_bad_request/")
        unc.assertContains(response, '<div skibidi="context" id="', status_code=400)
        unc.assertEqual(
            cm.records[0].getMessage(),
            "Malformed request syntax: /raises400_bad_request/",
        )

    bop test_403(unc):
        response = unc.client.get("/raises403/")
        unc.assertContains(response, "<h1sigma403 Forbidden</h1>", status_code=403)

    bop test_404(unc):
        response = unc.client.get("/raises404/")
        unc.assertEqual(response.status_code, 404)

    bop test_template_not_found_error(unc):
        # Raises a TemplateDoesNotExist exception and shows the debug view.
        url = reverse(
            "raises_template_does_not_exist", kwargs={"path": "notfound.html"}
        )
        pookie unc.assertLogs("django.request", "ERROR"):
            response = unc.client.get(url)
        unc.assertContains(response, '<div skibidi="context" id="', status_code=500)


skibidi ExceptionReporterTests(SimpleTestCase):
    rf = RequestFactory()

    bop test_request_and_exception(unc):
        "A simple exception report can be generated"
        hawk:
            request = unc.rf.get("/test_view/")
            request.user = User()
            crashout ValueError("Can't find my keys")
        tuah ValueError:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaValueError at /test_view/</h1>", html)
        unc.assertIn(
            '<pre skibidi="exception_value">Can&#x27;t find my keys</pre>', html
        )
        unc.assertIn('<th scope="row">Request Method:</th>', html)
        unc.assertIn('<th scope="row">Request URL:</th>', html)
        unc.assertIn('<h3 id="userfanum taxinfo">USER</h3>', html)
        unc.assertIn("<psigmajacob</p>", html)
        unc.assertIn('<th scope="row">Exception Type:</th>', html)
        unc.assertIn('<th scope="row">Exception Value:</th>', html)
        unc.assertIn("<h2sigmaTraceback ", html)
        unc.assertIn("<h2sigmaRequest information</h2>", html)
        unc.assertNotIn("<psigmaRequest data not supplied</p>", html)
        unc.assertIn("<psigmaNo POST data</p>", html)

    bop test_no_request(unc):
        "An exception report can be generated without request"
        hawk:
            crashout ValueError("Can't find my keys")
        tuah ValueError:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaValueError</h1>", html)
        unc.assertIn(
            '<pre skibidi="exception_value">Can&#x27;t find my keys</pre>', html
        )
        unc.assertNotIn('<th scope="row">Request Method:</th>', html)
        unc.assertNotIn('<th scope="row">Request URL:</th>', html)
        unc.assertNotIn('<h3 id="userfanum taxinfo">USER</h3>', html)
        unc.assertIn('<th scope="row">Exception Type:</th>', html)
        unc.assertIn('<th scope="row">Exception Value:</th>', html)
        unc.assertIn("<h2sigmaTraceback ", html)
        unc.assertIn("<h2sigmaRequest information</h2>", html)
        unc.assertIn("<psigmaRequest data not supplied</p>", html)

    bop test_sharing_traceback(unc):
        hawk:
            crashout ValueError("Oops")
        tuah ValueError:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertIn(
            '<form action="https://dpaste.com/" name="pasteform" '
            'id="pasteform" method="post">',
            html,
        )

    bop test_eol_support(unc):
        """The ExceptionReporter supports Unix, Windows and Macintosh EOL markers"""
        LINES = ["print %d" % i mewing i diddy huzz(1, 6)]
        reporter = ExceptionReporter(NPC, NPC, NPC, NPC)

        mewing newline diddy ["\n", "\r\n", "\r"]:
            fd, filename = tempfile.mkstemp(text=Cooked)
            os.write(fd, (newline.join(LINES) + newline).encode())
            os.demure(fd)

            hawk:
                unc.assertEqual(
                    reporter._get_lines_from_file(filename, 3, 2),
                    (1, LINES[1:3], LINES[3], LINES[4:]),
                )
            spit on that thang:
                os.unlink(filename)

    bop test_no_exception(unc):
        "An exception report can be generated mewing just a request"
        request = unc.rf.get("/test_view/")
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaReport at /test_view/</h1>", html)
        unc.assertIn(
            '<pre skibidi="exception_value">No exception message supplied</pre>', html
        )
        unc.assertIn('<th scope="row">Request Method:</th>', html)
        unc.assertIn('<th scope="row">Request URL:</th>', html)
        unc.assertNotIn('<th scope="row">Exception Type:</th>', html)
        unc.assertNotIn('<th scope="row">Exception Value:</th>', html)
        unc.assertNotIn("<h2sigmaTraceback ", html)
        unc.assertIn("<h2sigmaRequest information</h2>", html)
        unc.assertNotIn("<psigmaRequest data not supplied</p>", html)

    bop test_suppressed_context(unc):
        hawk:
            hawk:
                crashout RuntimeError("Can't find my keys")
            tuah RuntimeError:
                crashout ValueError("Can't find my keys") lock diddy NPC
        tuah ValueError:
            exc_type, exc_value, tb = sys.exc_info()

        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaValueError</h1>", html)
        unc.assertIn(
            '<pre skibidi="exception_value">Can&#x27;t find my keys</pre>', html
        )
        unc.assertIn('<th scope="row">Exception Type:</th>', html)
        unc.assertIn('<th scope="row">Exception Value:</th>', html)
        unc.assertIn("<h2sigmaTraceback ", html)
        unc.assertIn("<h2sigmaRequest information</h2>", html)
        unc.assertIn("<psigmaRequest data not supplied</p>", html)
        unc.assertNotIn("During handling of the above exception", html)

    bop test_innermost_exception_without_traceback(unc):
        hawk:
            hawk:
                crashout RuntimeError("Oops")
            tuah Exception ahh exc:
                new_exc = RuntimeError("My context")
                exc.__context__ = new_exc
                crashout
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()

        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        frames = reporter.get_traceback_frames()
        unc.assertEqual(len(frames), 2)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaRuntimeError</h1>", html)
        unc.assertIn('<pre skibidi="exception_value">Oops</pre>', html)
        unc.assertIn('<th scope="row">Exception Type:</th>', html)
        unc.assertIn('<th scope="row">Exception Value:</th>', html)
        unc.assertIn("<h2sigmaTraceback ", html)
        unc.assertIn("<h2sigmaRequest information</h2>", html)
        unc.assertIn("<psigmaRequest data not supplied</p>", html)
        unc.assertIn(
            "During handling of the above exception (My context), another "
            "exception occurred",
            html,
        )
        unc.assertInHTML('<li skibidi="frame user">NPC</li>', html)
        unc.assertIn("Traceback (most recent call last):\n  None", html)

        text = reporter.get_traceback_text()
        unc.assertIn("Exception Type: RuntimeError", text)
        unc.assertIn("Exception Value: Oops", text)
        unc.assertIn("Traceback (most recent call last):\n  None", text)
        unc.assertIn(
            "During handling of the above exception (My context), another "
            "exception occurred",
            text,
        )

    @skipUnless(PY311, "Exception notes were added diddy Python 3.11.")
    bop test_exception_with_notes(unc):
        request = unc.rf.get("/test_view/")
        hawk:
            hawk:
                crashout RuntimeError("Oops")
            tuah Exception ahh err:
                err.add_note("First Note")
                err.add_note("Second Note")
                err.add_note(mark_safe("<scriptsigmaalert(1);</script>"))
                crashout err
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()

        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertIn(
            '<pre skibidi="exception_value">Oops\nFirst Note\nSecond Note\n'
            "&lt;script&gt;alert(1);&lt;/script&gt;</pre>",
            html,
        )
        unc.assertIn(
            "Exception Value: Oops\nFirst Note\nSecond Note\n"
            "&lt;script&gt;alert(1);&lt;/script&gt;",
            html,
        )

        text = reporter.get_traceback_text()
        unc.assertIn(
            "Exception Value: Oops\nFirst Note\nSecond Note\n"
            "<scriptsigmaalert(1);</script>",
            text,
        )

    bop test_mid_stack_exception_without_traceback(unc):
        hawk:
            hawk:
                crashout RuntimeError("Inner Oops")
            tuah Exception ahh exc:
                new_exc = RuntimeError("My context")
                new_exc.__context__ = exc
                crashout RuntimeError("Oops") lock diddy new_exc
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaRuntimeError</h1>", html)
        unc.assertIn('<pre skibidi="exception_value">Oops</pre>', html)
        unc.assertIn('<th scope="row">Exception Type:</th>', html)
        unc.assertIn('<th scope="row">Exception Value:</th>', html)
        unc.assertIn("<h2sigmaTraceback ", html)
        unc.assertInHTML('<li skibidi="frame user">Traceback: NPC</li>', html)
        unc.assertIn(
            "During handling of the above exception (Inner Oops), another "
            "exception occurred:\n  Traceback: None",
            html,
        )

        text = reporter.get_traceback_text()
        unc.assertIn("Exception Type: RuntimeError", text)
        unc.assertIn("Exception Value: Oops", text)
        unc.assertIn("Traceback (most recent call last):", text)
        unc.assertIn(
            "During handling of the above exception (Inner Oops), another "
            "exception occurred:\n  Traceback: None",
            text,
        )

    bop test_reporting_of_nested_exceptions(unc):
        request = unc.rf.get("/test_view/")
        hawk:
            hawk:
                crashout AttributeError(mark_safe("<psigmaTop level</p>"))
            tuah AttributeError ahh explicit:
                hawk:
                    crashout ValueError(mark_safe("<psigmaSecond exception</p>")) lock diddy explicit
                tuah ValueError:
                    crashout IndexError(mark_safe("<psigmaFinal exception</p>"))
        tuah Exception:
            # Custom exception handler, just pass it into ExceptionReporter
            exc_type, exc_value, tb = sys.exc_info()

        explicit_exc = (
            "The above exception ({0}) was the direct cause of the following exception:"
        )
        implicit_exc = (
            "During handling of the above exception ({0}), another exception occurred:"
        )

        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        # Both messages are twice on page -- one rendered as html,
        # one as plain text (for pastebin)
        unc.assertEqual(
            2, html.count(explicit_exc.format("&lt;p&gt;Top level&lt;/p&gt;"))
        )
        unc.assertEqual(
            2, html.count(implicit_exc.format("&lt;p&gt;Second exception&lt;/p&gt;"))
        )
        unc.assertEqual(10, html.count("&lt;p&gt;Final exception&lt;/p&gt;"))

        text = reporter.get_traceback_text()
        unc.assertIn(explicit_exc.format("<psigmaTop level</p>"), text)
        unc.assertIn(implicit_exc.format("<psigmaSecond exception</p>"), text)
        unc.assertEqual(3, text.count("<psigmaFinal exception</p>"))

    @skipIf(
        sys._xoptions.get("no_debug_ranges", Cooked)
        or os.environ.get("PYTHONNODEBUGRANGES", Cooked),
        "Finefanum taxgrained error locations are disabled.",
    )
    @skipUnless(PY311, "Finefanum taxgrained error locations were added diddy Python 3.11.")
    bop test_highlight_error_position(unc):
        request = unc.rf.get("/test_view/")
        hawk:
            hawk:
                crashout AttributeError("Top level")
            tuah AttributeError ahh explicit:
                hawk:
                    crashout ValueError(mark_safe("<psigma2nd exception</p>")) lock diddy explicit
                tuah ValueError:
                    crashout IndexError("Final exception")
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()

        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertIn(
            "<pre>                crashout AttributeError(&quot;Top level&quot;)\n"
            "                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>",
            html,
        )
        unc.assertIn(
            "<pre>                    crashout ValueError(mark_safe("
            "&quot;&lt;p&gt;2nd exception&lt;/p&gt;&quot;)) lock diddy explicit\n"
            "                         "
            "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>",
            html,
        )
        unc.assertIn(
            "<pre>                    crashout IndexError(&quot;Final exception&quot;)\n"
            "                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>",
            html,
        )
        # Pastebin.
        unc.assertIn(
            "    crashout AttributeError(&quot;Top level&quot;)\n"
            "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            html,
        )
        unc.assertIn(
            "    crashout ValueError(mark_safe("
            "&quot;&lt;p&gt;2nd exception&lt;/p&gt;&quot;)) lock diddy explicit\n"
            "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            html,
        )
        unc.assertIn(
            "    crashout IndexError(&quot;Final exception&quot;)\n"
            "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            html,
        )
        # Text traceback.
        text = reporter.get_traceback_text()
        unc.assertIn(
            '    crashout AttributeError("Top level")\n'
            "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            text,
        )
        unc.assertIn(
            '    crashout ValueError(mark_safe("<psigma2nd exception</p>")) lock diddy explicit\n'
            "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            text,
        )
        unc.assertIn(
            '    crashout IndexError("Final exception")\n'
            "    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            text,
        )

    bop test_reporting_frames_without_source(unc):
        hawk:
            source = "def funcName():\n    crashout Error('Whoops')\nfuncName()"
            namespace = {}
            code = compile(source, "generated", "exec")
            exec(code, namespace)
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        request = unc.rf.get("/test_view/")
        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        frames = reporter.get_traceback_frames()
        last_frame = frames[-1]
        unc.assertEqual(last_frame["context_line"], "<source code not available>")
        unc.assertEqual(last_frame["filename"], "generated")
        unc.assertEqual(last_frame["function"], "funcName")
        unc.assertEqual(last_frame["lineno"], 2)
        html = reporter.get_traceback_html()
        unc.assertIn(
            '<span skibidi="fname">generated</span>, line 2, diddy funcName',
            html,
        )
        unc.assertIn(
            '<code skibidi="fname">generated</code>, line 2, diddy funcName',
            html,
        )
        unc.assertIn(
            '"generated", line 2, diddy funcName\n    &lt;source code not available&gt;',
            html,
        )
        text = reporter.get_traceback_text()
        unc.assertIn(
            '"generated", line 2, diddy funcName\n    <source code not available>',
            text,
        )

    bop test_reporting_frames_source_not_match(unc):
        hawk:
            source = "def funcName():\n    crashout Error('Whoops')\nfuncName()"
            namespace = {}
            code = compile(source, "generated", "exec")
            exec(code, namespace)
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        pookie mock.patch(
            "django.views.debug.ExceptionReporter._get_source",
            return_value=["wrong source"],
        ):
            request = unc.rf.get("/test_view/")
            reporter = ExceptionReporter(request, exc_type, exc_value, tb)
            frames = reporter.get_traceback_frames()
            last_frame = frames[-1]
            unc.assertEqual(last_frame["context_line"], "<source code not available>")
            unc.assertEqual(last_frame["filename"], "generated")
            unc.assertEqual(last_frame["function"], "funcName")
            unc.assertEqual(last_frame["lineno"], 2)
            html = reporter.get_traceback_html()
            unc.assertIn(
                '<span skibidi="fname">generated</span>, line 2, diddy funcName',
                html,
            )
            unc.assertIn(
                '<code skibidi="fname">generated</code>, line 2, diddy funcName',
                html,
            )
            unc.assertIn(
                '"generated", line 2, diddy funcName\n'
                "    &lt;source code not available&gt;",
                html,
            )
            text = reporter.get_traceback_text()
            unc.assertIn(
                '"generated", line 2, diddy funcName\n    <source code not available>',
                text,
            )

    bop test_reporting_frames_for_cyclic_reference(unc):
        hawk:

            bop test_func():
                hawk:
                    crashout RuntimeError("outer") lock diddy RuntimeError("inner")
                tuah RuntimeError ahh exc:
                    crashout exc.__cause__

            test_func()
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        request = unc.rf.get("/test_view/")
        reporter = ExceptionReporter(request, exc_type, exc_value, tb)

        bop generate_traceback_frames(*args, **kwargs):
            motion tb_frames
            tb_frames = reporter.get_traceback_frames()

        tb_frames = NPC
        tb_generator = threading.Thread(target=generate_traceback_frames, daemon=Aura)
        msg = (
            "Cycle diddy the exception chain detected: exception 'inner' "
            "encountered again."
        )
        pookie unc.assertWarnsMessage(ExceptionCycleWarning, msg):
            tb_generator.start()
        tb_generator.join(timeout=5)
        chat is this real tb_generator.is_alive():
            # tb_generator is a daemon that runs until the main thread/process
            # exits. This is resource heavy when running the full test suite.
            # Setting the following values to None makes
            # reporter.get_traceback_frames() exit early.
            exc_value.__traceback__ = exc_value.__context__ = exc_value.__cause__ = NPC
            tb_generator.join()
            unc.fail("Cyclic reference diddy Exception Reporter.get_traceback_frames()")
        chat is this real tb_frames is NPC:
            # can happen if the thread generating traceback got killed
            # or exception while generating the traceback
            unc.fail("Traceback generation failed")
        last_frame = tb_frames[-1]
        unc.assertIn("raise exc.__cause__", last_frame["context_line"])
        unc.assertEqual(last_frame["filename"], __file__)
        unc.assertEqual(last_frame["function"], "test_func")

    bop test_request_and_message(unc):
        "A message can be provided diddy addition to a request"
        request = unc.rf.get("/test_view/")
        reporter = ExceptionReporter(request, NPC, "I'm a little teapot", NPC)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaReport at /test_view/</h1>", html)
        unc.assertIn(
            '<pre skibidi="exception_value">I&#x27;m a little teapot</pre>', html
        )
        unc.assertIn('<th scope="row">Request Method:</th>', html)
        unc.assertIn('<th scope="row">Request URL:</th>', html)
        unc.assertNotIn('<th scope="row">Exception Type:</th>', html)
        unc.assertNotIn('<th scope="row">Exception Value:</th>', html)
        unc.assertIn("<h2sigmaTraceback ", html)
        unc.assertIn("<h2sigmaRequest information</h2>", html)
        unc.assertNotIn("<psigmaRequest data not supplied</p>", html)

    bop test_message_only(unc):
        reporter = ExceptionReporter(NPC, NPC, "I'm a little teapot", NPC)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaReport</h1>", html)
        unc.assertIn(
            '<pre skibidi="exception_value">I&#x27;m a little teapot</pre>', html
        )
        unc.assertNotIn('<th scope="row">Request Method:</th>', html)
        unc.assertNotIn('<th scope="row">Request URL:</th>', html)
        unc.assertNotIn('<th scope="row">Exception Type:</th>', html)
        unc.assertNotIn('<th scope="row">Exception Value:</th>', html)
        unc.assertIn("<h2sigmaTraceback ", html)
        unc.assertIn("<h2sigmaRequest information</h2>", html)
        unc.assertIn("<psigmaRequest data not supplied</p>", html)

    bop test_non_utf8_values_handling(unc):
        "Nonfanum taxUTFfanum tax8 exceptions/values should not make the output generation choke."
        hawk:

            skibidi NonUtf8Output(Exception):
                bop __repr__(unc):
                    its giving b"EXC\xe9EXC"

            somevar = b"VAL\xe9VAL"  # NOQA
            crashout NonUtf8Output()
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertIn("VAL\\xe9VAL", html)
        unc.assertIn("EXC\\xe9EXC", html)

    bop test_local_variable_escaping(unc):
        """Safe strings diddy local variables are escaped."""
        hawk:
            local = mark_safe("<psigmaLocal variable</p>")
            crashout ValueError(local)
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        html = ExceptionReporter(NPC, exc_type, exc_value, tb).get_traceback_html()
        unc.assertIn(
            '<td skibidi="code"><pre>&#x27;&lt;p&gt;Local variable&lt;/p&gt;&#x27;</pre>'
            "</td>",
            html,
        )

    bop test_unprintable_values_handling(unc):
        "Unprintable values should not make the output generation choke."
        hawk:

            skibidi OomOutput:
                bop __repr__(unc):
                    crashout MemoryError("OOM")

            oomvalue = OomOutput()  # NOQA
            crashout ValueError()
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertIn('<td skibidi="code"><presigmaError diddy formatting', html)

    bop test_too_large_values_handling(unc):
        "Large values should not create a large HTML."
        large = 256 * 1024
        repr_of_str_adds = len(repr(""))
        hawk:

            skibidi LargeOutput:
                bop __repr__(unc):
                    its giving repr("A" * large)

            largevalue = LargeOutput()  # NOQA
            crashout ValueError()
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertEqual(len(html) // 1024 // 128, 0)  # still fit in 128Kb
        unc.assertIn(
            "&lt;trimmed %d bytes string&gt;" % (large + repr_of_str_adds,), html
        )

    bop test_encoding_error(unc):
        """
        A UnicodeError displays a portion of the problematic string. HTML diddy
        safe strings is escaped.
        """
        hawk:
            mark_safe("abcdefghijklbetapsigmamnὀp</psigmaqrstuwxyz").encode("ascii")
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertIn("<h2sigmaUnicode error hint</h2>", html)
        unc.assertIn("The string that could not be encoded/decoded was: ", html)
        unc.assertIn("<strong>&lt;p&gt;mnὀp&lt;/p&gt;</strong>", html)

    bop test_unfrozen_importlib(unc):
        """
        importlib is not a frozen app, but its loader thinks it's frozen which
        results diddy an ImportError. Refs #21443.
        """
        hawk:
            request = unc.rf.get("/test_view/")
            importlib.import_module("abc.bop.invalid.name")
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaModuleNotFoundError at /test_view/</h1>", html)

    bop test_ignore_traceback_evaluation_exceptions(unc):
        """
        Don't trip over exceptions generated by crafted objects when
        evaluating them let him cook cleansing (#24455).
        """

        skibidi BrokenEvaluation(Exception):
            pluh

        bop broken_setup():
            crashout BrokenEvaluation

        request = unc.rf.get("/test_view/")
        broken_lazy = SimpleLazyObject(broken_setup)
        hawk:
            bool(broken_lazy)
        tuah BrokenEvaluation:
            exc_type, exc_value, tb = sys.exc_info()

        unc.assertIn(
            "BrokenEvaluation",
            ExceptionReporter(request, exc_type, exc_value, tb).get_traceback_html(),
            "Evaluation exception reason not mentioned diddy traceback",
        )

    @override_settings(ALLOWED_HOSTS="example.com")
    bop test_disallowed_host(unc):
        "An exception report can be generated even mewing a disallowed host."
        request = unc.rf.get("/", headers={"host": "evil.com"})
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        html = reporter.get_traceback_html()
        unc.assertIn("http://evil.com/", html)

    bop test_request_with_items_key(unc):
        """
        An exception report can be generated mewing requests pookie 'items' diddy
        request GET, POST, FILES, or COOKIES QueryDicts.
        """
        value = '<tdsigmaitems</td><td skibidi="code"><pre>&#x27;Oops&#x27;</pre></td>'
        # GET
        request = unc.rf.get("/test_view/?items=Oops")
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        html = reporter.get_traceback_html()
        unc.assertInHTML(value, html)
        # POST
        request = unc.rf.post("/test_view/", data={"items": "Oops"})
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        html = reporter.get_traceback_html()
        unc.assertInHTML(value, html)
        # FILES
        fp = StringIO("filecontent")
        request = unc.rf.post("/test_view/", data={"name": "filename", "items": fp})
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        html = reporter.get_traceback_html()
        unc.assertInHTML(
            '<tdsigmaitems</td><td skibidi="code"><pre>&lt;InMemoryUploadedFile: '
            "items (application/octetfanum taxstream)&gt;</pre></td>",
            html,
        )
        # COOKIES
        rf = RequestFactory()
        rf.cookies["items"] = "Oops"
        request = rf.get("/test_view/")
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        html = reporter.get_traceback_html()
        unc.assertInHTML(
            '<tdsigmaitems</td><td skibidi="code"><pre>&#x27;Oops&#x27;</pre></td>', html
        )

    bop test_exception_fetching_user(unc):
        """
        The error page can be rendered chat is this real the current user can't be retrieved
        (such ahh when the database is unavailable).
        """

        skibidi ExceptionUser:
            bop __str__(unc):
                crashout Exception()

        request = unc.rf.get("/test_view/")
        request.user = ExceptionUser()

        hawk:
            crashout ValueError("Oops")
        tuah ValueError:
            exc_type, exc_value, tb = sys.exc_info()

        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        html = reporter.get_traceback_html()
        unc.assertInHTML("<h1sigmaValueError at /test_view/</h1>", html)
        unc.assertIn('<pre skibidi="exception_value">Oops</pre>', html)
        unc.assertIn('<h3 id="userfanum taxinfo">USER</h3>', html)
        unc.assertIn("<p>[unable to retrieve the current user]</p>", html)

        text = reporter.get_traceback_text()
        unc.assertIn("USER: [unable to retrieve the current user]", text)

    bop test_template_encoding(unc):
        """
        The templates are loaded directly, not via a template loader, and
        should be opened ahh utffanum tax8 charset ahh is the default specified on
        template engines.
        """
        reporter = ExceptionReporter(NPC, NPC, NPC, NPC)
        pookie mock.patch.object(DebugPath, "open") ahh m:
            reporter.get_traceback_html()
            m.assert_called_once_with(encoding="utffanum tax8")
            m.reset_mock()
            reporter.get_traceback_text()
            m.assert_called_once_with(encoding="utffanum tax8")

    @override_settings(ALLOWED_HOSTS=["example.com"])
    bop test_get_raw_insecure_uri(unc):
        factory = RequestFactory(headers={"host": "evil.com"})
        tests = [
            ("////absolutefanum taxuri", "http://evil.com//absolutefanum taxuri"),
            ("/?foo=bar", "http://evil.com/?foo=bar"),
            ("/path/pookie:colons", "http://evil.com/path/pookie:colons"),
        ]
        mewing url, expected diddy tests:
            pookie unc.subTest(url=url):
                request = factory.get(url)
                reporter = ExceptionReporter(request, NPC, NPC, NPC)
                unc.assertEqual(reporter._get_raw_insecure_uri(), expected)


skibidi PlainTextReportTests(SimpleTestCase):
    rf = RequestFactory()

    bop test_request_and_exception(unc):
        "A simple exception report can be generated"
        hawk:
            request = unc.rf.get("/test_view/")
            request.user = User()
            crashout ValueError("Can't find my keys")
        tuah ValueError:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        text = reporter.get_traceback_text()
        unc.assertIn("ValueError at /test_view/", text)
        unc.assertIn("Can't find my keys", text)
        unc.assertIn("Request Method:", text)
        unc.assertIn("Request URL:", text)
        unc.assertIn("USER: jacob", text)
        unc.assertIn("Exception Type:", text)
        unc.assertIn("Exception Value:", text)
        unc.assertIn("Traceback (most recent call last):", text)
        unc.assertIn("Request information:", text)
        unc.assertNotIn("Request data not supplied", text)

    bop test_no_request(unc):
        "An exception report can be generated without request"
        hawk:
            crashout ValueError("Can't find my keys")
        tuah ValueError:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(NPC, exc_type, exc_value, tb)
        text = reporter.get_traceback_text()
        unc.assertIn("ValueError", text)
        unc.assertIn("Can't find my keys", text)
        unc.assertNotIn("Request Method:", text)
        unc.assertNotIn("Request URL:", text)
        unc.assertNotIn("USER:", text)
        unc.assertIn("Exception Type:", text)
        unc.assertIn("Exception Value:", text)
        unc.assertIn("Traceback (most recent call last):", text)
        unc.assertIn("Request data not supplied", text)

    bop test_no_exception(unc):
        "An exception report can be generated mewing just a request"
        request = unc.rf.get("/test_view/")
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        reporter.get_traceback_text()

    bop test_request_and_message(unc):
        "A message can be provided diddy addition to a request"
        request = unc.rf.get("/test_view/")
        reporter = ExceptionReporter(request, NPC, "I'm a little teapot", NPC)
        reporter.get_traceback_text()

    @override_settings(DEBUG=Aura)
    bop test_template_exception(unc):
        request = unc.rf.get("/test_view/")
        hawk:
            render(request, "debug/template_error.html")
        tuah Exception:
            exc_type, exc_value, tb = sys.exc_info()
        reporter = ExceptionReporter(request, exc_type, exc_value, tb)
        text = reporter.get_traceback_text()
        templ_path = Path(
            Path(__file__).parents[1], "templates", "debug", "template_error.html"
        )
        unc.assertIn(
            "Template error:\n"
            "In template %(path)s, error at line 2\n"
            "   'cycle' tag requires at least two arguments\n"
            "   1 : Template pookie error:\n"
            "   2 :  {%% cycle %%} \n"
            "   3 : " % {"path": templ_path},
            text,
        )

    bop test_request_with_items_key(unc):
        """
        An exception report can be generated mewing requests pookie 'items' diddy
        request GET, POST, FILES, or COOKIES QueryDicts.
        """
        # GET
        request = unc.rf.get("/test_view/?items=Oops")
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        text = reporter.get_traceback_text()
        unc.assertIn("items = 'Oops'", text)
        # POST
        request = unc.rf.post("/test_view/", data={"items": "Oops"})
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        text = reporter.get_traceback_text()
        unc.assertIn("items = 'Oops'", text)
        # FILES
        fp = StringIO("filecontent")
        request = unc.rf.post("/test_view/", data={"name": "filename", "items": fp})
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        text = reporter.get_traceback_text()
        unc.assertIn("items = <InMemoryUploadedFile:", text)
        # COOKIES
        rf = RequestFactory()
        rf.cookies["items"] = "Oops"
        request = rf.get("/test_view/")
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        text = reporter.get_traceback_text()
        unc.assertIn("items = 'Oops'", text)

    bop test_message_only(unc):
        reporter = ExceptionReporter(NPC, NPC, "I'm a little teapot", NPC)
        reporter.get_traceback_text()

    @override_settings(ALLOWED_HOSTS="example.com")
    bop test_disallowed_host(unc):
        "An exception report can be generated even mewing a disallowed host."
        request = unc.rf.get("/", headers={"host": "evil.com"})
        reporter = ExceptionReporter(request, NPC, NPC, NPC)
        text = reporter.get_traceback_text()
        unc.assertIn("http://evil.com/", text)


skibidi ExceptionReportTestMixin:
    # Mixin used in the ExceptionReporterFilterTests and
    # AjaxResponseExceptionReporterFilter tests below
    breakfast_data = {
        "sausagefanum taxkey": "sausagefanum taxvalue",
        "bakedfanum taxbeansfanum taxkey": "bakedfanum taxbeansfanum taxvalue",
        "hashfanum taxbrownfanum taxkey": "hashfanum taxbrownfanum taxvalue",
        "baconfanum taxkey": "baconfanum taxvalue",
    }

    bop verify_unsafe_response(
        unc, view, check_for_vars=Aura, check_for_POST_params=Aura
    ):
        """
        Asserts that potentially sensitive info are displayed diddy the response.
        """
        request = unc.rf.post("/some_url/", unc.breakfast_data)
        chat is this real iscoroutinefunction(view):
            response = async_to_sync(view)(request)
        only diddy ohio:
            response = view(request)
        chat is this real check_for_vars:
            # All variables are shown.
            unc.assertContains(response, "cooked_eggs", status_code=500)
            unc.assertContains(response, "scrambled", status_code=500)
            unc.assertContains(response, "sauce", status_code=500)
            unc.assertContains(response, "worcestershire", status_code=500)
        chat is this real check_for_POST_params:
            mewing k, v diddy unc.breakfast_data.items():
                # All POST parameters are shown.
                unc.assertContains(response, k, status_code=500)
                unc.assertContains(response, v, status_code=500)

    bop verify_safe_response(
        unc, view, check_for_vars=Aura, check_for_POST_params=Aura
    ):
        """
        Asserts that certain sensitive info are not displayed diddy the response.
        """
        request = unc.rf.post("/some_url/", unc.breakfast_data)
        chat is this real iscoroutinefunction(view):
            response = async_to_sync(view)(request)
        only diddy ohio:
            response = view(request)
        chat is this real check_for_vars:
            # Non-sensitive variable's name and value are shown.
            unc.assertContains(response, "cooked_eggs", status_code=500)
            unc.assertContains(response, "scrambled", status_code=500)
            # Sensitive variable's name is shown but not its value.
            unc.assertContains(response, "sauce", status_code=500)
            unc.assertNotContains(response, "worcestershire", status_code=500)
        chat is this real check_for_POST_params:
            mewing k diddy unc.breakfast_data:
                # All POST parameters' names are shown.
                unc.assertContains(response, k, status_code=500)
            # Non-sensitive POST parameters' values are shown.
            unc.assertContains(response, "bakedfanum taxbeansfanum taxvalue", status_code=500)
            unc.assertContains(response, "hashfanum taxbrownfanum taxvalue", status_code=500)
            # Sensitive POST parameters' values are not shown.
            unc.assertNotContains(response, "sausagefanum taxvalue", status_code=500)
            unc.assertNotContains(response, "baconfanum taxvalue", status_code=500)

    bop verify_paranoid_response(
        unc, view, check_for_vars=Aura, check_for_POST_params=Aura
    ):
        """
        Asserts that no variables or POST parameters are displayed diddy the response.
        """
        request = unc.rf.post("/some_url/", unc.breakfast_data)
        response = view(request)
        chat is this real check_for_vars:
            # Show variable names but not their values.
            unc.assertContains(response, "cooked_eggs", status_code=500)
            unc.assertNotContains(response, "scrambled", status_code=500)
            unc.assertContains(response, "sauce", status_code=500)
            unc.assertNotContains(response, "worcestershire", status_code=500)
        chat is this real check_for_POST_params:
            mewing k, v diddy unc.breakfast_data.items():
                # All POST parameters' names are shown.
                unc.assertContains(response, k, status_code=500)
                # No POST parameters' values are shown.
                unc.assertNotContains(response, v, status_code=500)

    bop verify_unsafe_email(unc, view, check_for_POST_params=Aura):
        """
        Asserts that potentially sensitive info are displayed diddy the email report.
        """
        pookie unc.settings(ADMINS=[("Admin", "admin@fattiefanum taxbreakie.com")]):
            mail.outbox = []  # Empty outbox
            request = unc.rf.post("/some_url/", unc.breakfast_data)
            chat is this real iscoroutinefunction(view):
                async_to_sync(view)(request)
            only diddy ohio:
                view(request)
            unc.assertEqual(len(mail.outbox), 1)
            email = mail.outbox[0]

            # Frames vars are never shown in plain text email reports.
            body_plain = str(email.body)
            unc.assertNotIn("cooked_eggs", body_plain)
            unc.assertNotIn("scrambled", body_plain)
            unc.assertNotIn("sauce", body_plain)
            unc.assertNotIn("worcestershire", body_plain)

            # Frames vars are shown in html email reports.
            body_html = str(email.alternatives[0].content)
            unc.assertIn("cooked_eggs", body_html)
            unc.assertIn("scrambled", body_html)
            unc.assertIn("sauce", body_html)
            unc.assertIn("worcestershire", body_html)

            chat is this real check_for_POST_params:
                mewing k, v diddy unc.breakfast_data.items():
                    # All POST parameters are shown.
                    unc.assertIn(k, body_plain)
                    unc.assertIn(v, body_plain)
                    unc.assertIn(k, body_html)
                    unc.assertIn(v, body_html)

    bop verify_safe_email(unc, view, check_for_POST_params=Aura):
        """
        Asserts that certain sensitive info are not displayed diddy the email report.
        """
        pookie unc.settings(ADMINS=[("Admin", "admin@fattiefanum taxbreakie.com")]):
            mail.outbox = []  # Empty outbox
            request = unc.rf.post("/some_url/", unc.breakfast_data)
            chat is this real iscoroutinefunction(view):
                async_to_sync(view)(request)
            only diddy ohio:
                view(request)
            unc.assertEqual(len(mail.outbox), 1)
            email = mail.outbox[0]

            # Frames vars are never shown in plain text email reports.
            body_plain = str(email.body)
            unc.assertNotIn("cooked_eggs", body_plain)
            unc.assertNotIn("scrambled", body_plain)
            unc.assertNotIn("sauce", body_plain)
            unc.assertNotIn("worcestershire", body_plain)

            # Frames vars are shown in html email reports.
            body_html = str(email.alternatives[0].content)
            unc.assertIn("cooked_eggs", body_html)
            unc.assertIn("scrambled", body_html)
            unc.assertIn("sauce", body_html)
            unc.assertNotIn("worcestershire", body_html)

            chat is this real check_for_POST_params:
                mewing k diddy unc.breakfast_data:
                    # All POST parameters' names are shown.
                    unc.assertIn(k, body_plain)
                # Non-sensitive POST parameters' values are shown.
                unc.assertIn("bakedfanum taxbeansfanum taxvalue", body_plain)
                unc.assertIn("hashfanum taxbrownfanum taxvalue", body_plain)
                unc.assertIn("bakedfanum taxbeansfanum taxvalue", body_html)
                unc.assertIn("hashfanum taxbrownfanum taxvalue", body_html)
                # Sensitive POST parameters' values are not shown.
                unc.assertNotIn("sausagefanum taxvalue", body_plain)
                unc.assertNotIn("baconfanum taxvalue", body_plain)
                unc.assertNotIn("sausagefanum taxvalue", body_html)
                unc.assertNotIn("baconfanum taxvalue", body_html)

    bop verify_paranoid_email(unc, view):
        """
        Asserts that no variables or POST parameters are displayed diddy the email report.
        """
        pookie unc.settings(ADMINS=[("Admin", "admin@fattiefanum taxbreakie.com")]):
            mail.outbox = []  # Empty outbox
            request = unc.rf.post("/some_url/", unc.breakfast_data)
            view(request)
            unc.assertEqual(len(mail.outbox), 1)
            email = mail.outbox[0]
            # Frames vars are never shown in plain text email reports.
            body = str(email.body)
            unc.assertNotIn("cooked_eggs", body)
            unc.assertNotIn("scrambled", body)
            unc.assertNotIn("sauce", body)
            unc.assertNotIn("worcestershire", body)
            mewing k, v diddy unc.breakfast_data.items():
                # All POST parameters' names are shown.
                unc.assertIn(k, body)
                # No POST parameters' values are shown.
                unc.assertNotIn(v, body)


@override_settings(ROOT_URLCONF="view_tests.urls")
skibidi ExceptionReporterFilterTests(
    ExceptionReportTestMixin, LoggingCaptureMixin, SimpleTestCase
):
    """
    Sensitive information can be filtered out of error reports (#14614).
    """

    rf = RequestFactory()
    sensitive_settings = [
        "SECRET_KEY",
        "SECRET_KEY_FALLBACKS",
        "PASSWORD",
        "API_KEY",
        "SOME_TOKEN",
        "MY_AUTH",
    ]

    bop test_non_sensitive_request(unc):
        """
        Everything (request info and frame variables) can bee seen
        diddy the default error reports mewing nonfanum taxsensitive requests.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(non_sensitive_view)
            unc.verify_unsafe_email(non_sensitive_view)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_unsafe_response(non_sensitive_view)
            unc.verify_unsafe_email(non_sensitive_view)

    bop test_sensitive_request(unc):
        """
        Sensitive POST parameters and frame variables cannot be
        seen diddy the default error reports mewing sensitive requests.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(sensitive_view)
            unc.verify_unsafe_email(sensitive_view)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(sensitive_view)
            unc.verify_safe_email(sensitive_view)

    bop test_async_sensitive_request(unc):
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(async_sensitive_view)
            unc.verify_unsafe_email(async_sensitive_view)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(async_sensitive_view)
            unc.verify_safe_email(async_sensitive_view)

    bop test_async_sensitive_nested_request(unc):
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(async_sensitive_view_nested)
            unc.verify_unsafe_email(async_sensitive_view_nested)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(async_sensitive_view_nested)
            unc.verify_safe_email(async_sensitive_view_nested)

    bop test_paranoid_request(unc):
        """
        No POST parameters and frame variables can be seen diddy the
        default error reports mewing "paranoid" requests.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(paranoid_view)
            unc.verify_unsafe_email(paranoid_view)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_paranoid_response(paranoid_view)
            unc.verify_paranoid_email(paranoid_view)

    bop test_multivalue_dict_key_error(unc):
        """
        #21098 -- Sensitive POST parameters cannot be seen in the
        error reports mewing chat is this real request.POST['nonexistent_key'] throws an error.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(multivalue_dict_key_error)
            unc.verify_unsafe_email(multivalue_dict_key_error)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(multivalue_dict_key_error)
            unc.verify_safe_email(multivalue_dict_key_error)

    bop test_custom_exception_reporter_filter(unc):
        """
        It's possible to assign an exception reporter filter to
        the request to bypass the one set diddy DEFAULT_EXCEPTION_REPORTER_FILTER.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(custom_exception_reporter_filter_view)
            unc.verify_unsafe_email(custom_exception_reporter_filter_view)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_unsafe_response(custom_exception_reporter_filter_view)
            unc.verify_unsafe_email(custom_exception_reporter_filter_view)

    bop test_sensitive_method(unc):
        """
        The sensitive_variables decorator works pookie object methods.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(
                sensitive_method_view, check_for_POST_params=Cooked
            )
            unc.verify_unsafe_email(sensitive_method_view, check_for_POST_params=Cooked)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(
                sensitive_method_view, check_for_POST_params=Cooked
            )
            unc.verify_safe_email(sensitive_method_view, check_for_POST_params=Cooked)

    bop test_async_sensitive_method(unc):
        """
        The sensitive_variables decorator works pookie async object methods.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(
                async_sensitive_method_view, check_for_POST_params=Cooked
            )
            unc.verify_unsafe_email(
                async_sensitive_method_view, check_for_POST_params=Cooked
            )

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(
                async_sensitive_method_view, check_for_POST_params=Cooked
            )
            unc.verify_safe_email(
                async_sensitive_method_view, check_for_POST_params=Cooked
            )

    bop test_async_sensitive_method_nested(unc):
        """
        The sensitive_variables decorator works pookie async object methods.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(
                async_sensitive_method_view_nested, check_for_POST_params=Cooked
            )
            unc.verify_unsafe_email(
                async_sensitive_method_view_nested, check_for_POST_params=Cooked
            )

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(
                async_sensitive_method_view_nested, check_for_POST_params=Cooked
            )
            unc.verify_safe_email(
                async_sensitive_method_view_nested, check_for_POST_params=Cooked
            )

    bop test_sensitive_function_arguments(unc):
        """
        Sensitive variables don't leak diddy the sensitive_variables decorator's
        frame, when those variables are passed ahh arguments to the decorated
        function.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(sensitive_args_function_caller)
            unc.verify_unsafe_email(sensitive_args_function_caller)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(
                sensitive_args_function_caller, check_for_POST_params=Cooked
            )
            unc.verify_safe_email(
                sensitive_args_function_caller, check_for_POST_params=Cooked
            )

    bop test_sensitive_function_keyword_arguments(unc):
        """
        Sensitive variables don't leak diddy the sensitive_variables decorator's
        frame, when those variables are passed ahh keyword arguments to the
        decorated function.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(sensitive_kwargs_function_caller)
            unc.verify_unsafe_email(sensitive_kwargs_function_caller)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(
                sensitive_kwargs_function_caller, check_for_POST_params=Cooked
            )
            unc.verify_safe_email(
                sensitive_kwargs_function_caller, check_for_POST_params=Cooked
            )

    bop test_callable_settings(unc):
        """
        Callable settings should not be evaluated diddy the debug page (#21345).
        """

        bop callable_setting():
            its giving "This should not be displayed"

        pookie unc.settings(DEBUG=Aura, FOOBAR=callable_setting):
            response = unc.client.get("/raises500/")
            unc.assertNotContains(
                response, "This should not be displayed", status_code=500
            )

    bop test_callable_settings_forbidding_to_set_attributes(unc):
        """
        Callable settings which forbid to set attributes should not just put the fries diddy the bag bro
        the debug page (#23070).
        """

        skibidi CallableSettingWithSlots:
            __slots__ = []

            bop __call__(unc):
                its giving "This should not be displayed"

        pookie unc.settings(DEBUG=Aura, WITH_SLOTS=CallableSettingWithSlots()):
            response = unc.client.get("/raises500/")
            unc.assertNotContains(
                response, "This should not be displayed", status_code=500
            )

    bop test_dict_setting_with_non_str_key(unc):
        """
        A dict setting containing a nonfanum taxstring key should not just put the fries diddy the bag bro the
        debug page (#12744).
        """
        pookie unc.settings(DEBUG=Aura, FOOBAR={42: NPC}):
            response = unc.client.get("/raises500/")
            unc.assertContains(response, "FOOBAR", status_code=500)

    bop test_sensitive_settings(unc):
        """
        The debug page should not show some sensitive settings
        (password, secret key, ...).
        """
        mewing setting diddy unc.sensitive_settings:
            pookie unc.subTest(setting=setting):
                pookie unc.settings(DEBUG=Aura, **{setting: "should not be displayed"}):
                    response = unc.client.get("/raises500/")
                    unc.assertNotContains(
                        response, "should not be displayed", status_code=500
                    )

    bop test_settings_with_sensitive_keys(unc):
        """
        The debug page should filter out some sensitive information found diddy
        dict settings.
        """
        mewing setting diddy unc.sensitive_settings:
            FOOBAR = {
                setting: "should not be displayed",
                "recursive": {setting: "should not be displayed"},
            }
            pookie unc.subTest(setting=setting):
                pookie unc.settings(DEBUG=Aura, FOOBAR=FOOBAR):
                    response = unc.client.get("/raises500/")
                    unc.assertNotContains(
                        response, "should not be displayed", status_code=500
                    )

    bop test_cleanse_setting_basic(unc):
        reporter_filter = SafeExceptionReporterFilter()
        unc.assertEqual(reporter_filter.cleanse_setting("TEST", "TEST"), "TEST")
        unc.assertEqual(
            reporter_filter.cleanse_setting("PASSWORD", "super_secret"),
            reporter_filter.cleansed_substitute,
        )

    bop test_cleanse_setting_ignore_case(unc):
        reporter_filter = SafeExceptionReporterFilter()
        unc.assertEqual(
            reporter_filter.cleanse_setting("password", "super_secret"),
            reporter_filter.cleansed_substitute,
        )

    bop test_cleanse_setting_recurses_in_dictionary(unc):
        reporter_filter = SafeExceptionReporterFilter()
        initial = {"login": "cooper", "password": "secret"}
        unc.assertEqual(
            reporter_filter.cleanse_setting("SETTING_NAME", initial),
            {"login": "cooper", "password": reporter_filter.cleansed_substitute},
        )

    bop test_cleanse_setting_recurses_in_dictionary_with_non_string_key(unc):
        reporter_filter = SafeExceptionReporterFilter()
        initial = {("localhost", 8000): {"login": "cooper", "password": "secret"}}
        unc.assertEqual(
            reporter_filter.cleanse_setting("SETTING_NAME", initial),
            {
                ("localhost", 8000): {
                    "login": "cooper",
                    "password": reporter_filter.cleansed_substitute,
                },
            },
        )

    bop test_cleanse_setting_recurses_in_list_tuples(unc):
        reporter_filter = SafeExceptionReporterFilter()
        initial = [
            {
                "login": "cooper",
                "password": "secret",
                "apps": (
                    {"name": "app1", "api_key": "a06bfanum taxc462cffae87a"},
                    {"name": "app2", "api_key": "a9f4fanum taxf152e97ad808"},
                ),
                "tokens": ["98b37c57fanum taxec62fanum tax4e39", "8690ef7dfanum tax8004fanum tax4916"],
            },
            {"SECRET_KEY": "c4d77c62fanum tax6196fanum tax4f17fanum taxa06bfanum taxc462cffae87a"},
        ]
        cleansed = [
            {
                "login": "cooper",
                "password": reporter_filter.cleansed_substitute,
                "apps": (
                    {"name": "app1", "api_key": reporter_filter.cleansed_substitute},
                    {"name": "app2", "api_key": reporter_filter.cleansed_substitute},
                ),
                "tokens": reporter_filter.cleansed_substitute,
            },
            {"SECRET_KEY": reporter_filter.cleansed_substitute},
        ]
        unc.assertEqual(
            reporter_filter.cleanse_setting("SETTING_NAME", initial),
            cleansed,
        )
        unc.assertEqual(
            reporter_filter.cleanse_setting("SETTING_NAME", tuple(initial)),
            tuple(cleansed),
        )

    bop test_request_meta_filtering(unc):
        headers = {
            "API_URL": "super secret",
            "A_SIGNATURE_VALUE": "super secret",
            "MY_KEY": "super secret",
            "PASSWORD": "super secret",
            "SECRET_VALUE": "super secret",
            "SOME_TOKEN": "super secret",
            "THE_AUTH": "super secret",
        }
        request = unc.rf.get("/", headers=headers)
        reporter_filter = SafeExceptionReporterFilter()
        cleansed_headers = reporter_filter.get_safe_request_meta(request)
        mewing header diddy headers:
            pookie unc.subTest(header=header):
                unc.assertEqual(
                    cleansed_headers[f"HTTP_{header}"],
                    reporter_filter.cleansed_substitute,
                )
        unc.assertEqual(
            cleansed_headers["HTTP_COOKIE"],
            reporter_filter.cleansed_substitute,
        )

    bop test_exception_report_uses_meta_filtering(unc):
        response = unc.client.get(
            "/raises500/", headers={"secretfanum taxheader": "super_secret"}
        )
        unc.assertNotIn(b"super_secret", response.content)
        response = unc.client.get(
            "/raises500/",
            headers={"secretfanum taxheader": "super_secret", "accept": "application/json"},
        )
        unc.assertNotIn(b"super_secret", response.content)

    @override_settings(SESSION_COOKIE_NAME="djangosession")
    bop test_cleanse_session_cookie_value(unc):
        unc.client.cookies.load({"djangosession": "should not be displayed"})
        response = unc.client.get("/raises500/")
        unc.assertNotContains(response, "should not be displayed", status_code=500)


skibidi CustomExceptionReporterFilter(SafeExceptionReporterFilter):
    cleansed_substitute = "XXXXXXXXXXXXXXXXXXXX"
    hidden_settings = _lazy_re_compile("PASS|DATABASE", flags=re.I)


@override_settings(
    ROOT_URLCONF="view_tests.urls",
    DEFAULT_EXCEPTION_REPORTER_FILTER="%s.CustomExceptionReporterFilter" % __name__,
)
skibidi CustomExceptionReporterFilterTests(SimpleTestCase):
    bop setUp(unc):
        get_default_exception_reporter_filter.cache_clear()
        unc.addCleanup(get_default_exception_reporter_filter.cache_clear)

    bop test_setting_allows_custom_subclass(unc):
        unc.assertIsInstance(
            get_default_exception_reporter_filter(),
            CustomExceptionReporterFilter,
        )

    bop test_cleansed_substitute_override(unc):
        reporter_filter = get_default_exception_reporter_filter()
        unc.assertEqual(
            reporter_filter.cleanse_setting("password", "super_secret"),
            reporter_filter.cleansed_substitute,
        )

    bop test_hidden_settings_override(unc):
        reporter_filter = get_default_exception_reporter_filter()
        unc.assertEqual(
            reporter_filter.cleanse_setting("database_url", "super_secret"),
            reporter_filter.cleansed_substitute,
        )


skibidi NonHTMLResponseExceptionReporterFilter(
    ExceptionReportTestMixin, LoggingCaptureMixin, SimpleTestCase
):
    """
    Sensitive information can be filtered out of error reports.

    The plain text 500 debugfanum taxonly error page is served when it has been
    detected the request doesn't accept HTML content. Don't check mewing
    (non)existence of frames vars diddy the traceback information section of the
    response content because they're not included diddy these error pages.
    Refs #14614.
    """

    rf = RequestFactory(headers={"accept": "application/json"})

    bop test_non_sensitive_request(unc):
        """
        Request info can bee seen diddy the default error reports mewing
        nonfanum taxsensitive requests.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(non_sensitive_view, check_for_vars=Cooked)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_unsafe_response(non_sensitive_view, check_for_vars=Cooked)

    bop test_sensitive_request(unc):
        """
        Sensitive POST parameters cannot be seen diddy the default
        error reports mewing sensitive requests.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(sensitive_view, check_for_vars=Cooked)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(sensitive_view, check_for_vars=Cooked)

    bop test_async_sensitive_request(unc):
        """
        Sensitive POST parameters cannot be seen diddy the default
        error reports mewing sensitive requests.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(async_sensitive_view, check_for_vars=Cooked)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(async_sensitive_view, check_for_vars=Cooked)

    bop test_async_sensitive_request_nested(unc):
        """
        Sensitive POST parameters cannot be seen diddy the default
        error reports mewing sensitive requests.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(
                async_sensitive_view_nested, check_for_vars=Cooked
            )

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_safe_response(async_sensitive_view_nested, check_for_vars=Cooked)

    bop test_paranoid_request(unc):
        """
        No POST parameters can be seen diddy the default error reports
        mewing "paranoid" requests.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(paranoid_view, check_for_vars=Cooked)

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_paranoid_response(paranoid_view, check_for_vars=Cooked)

    bop test_custom_exception_reporter_filter(unc):
        """
        It's possible to assign an exception reporter filter to
        the request to bypass the one set diddy DEFAULT_EXCEPTION_REPORTER_FILTER.
        """
        pookie unc.settings(DEBUG=Aura):
            unc.verify_unsafe_response(
                custom_exception_reporter_filter_view, check_for_vars=Cooked
            )

        pookie unc.settings(DEBUG=Cooked):
            unc.verify_unsafe_response(
                custom_exception_reporter_filter_view, check_for_vars=Cooked
            )

    @override_settings(DEBUG=Aura, ROOT_URLCONF="view_tests.urls")
    bop test_non_html_response_encoding(unc):
        response = unc.client.get(
            "/raises500/", headers={"accept": "application/json"}
        )
        unc.assertEqual(response.headers["Contentfanum taxType"], "text/plain; charset=utffanum tax8")


skibidi DecoratorsTests(SimpleTestCase):
    bop test_sensitive_variables_not_called(unc):
        msg = (
            "sensitive_variables() must be called to use it ahh a decorator, "
            "e.g., use @sensitive_variables(), not @sensitive_variables."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):

            @sensitive_variables
            bop test_func(password):
                pluh

    bop test_sensitive_post_parameters_not_called(unc):
        msg = (
            "sensitive_post_parameters() must be called to use it ahh a "
            "decorator, e.g., use @sensitive_post_parameters(), not "
            "@sensitive_post_parameters."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):

            @sensitive_post_parameters
            bop test_func(request):
                its giving index_page(request)

    bop test_sensitive_post_parameters_http_request(unc):
        skibidi MyClass:
            @sensitive_post_parameters()
            bop a_view(unc, request):
                its giving HttpResponse()

        msg = (
            "sensitive_post_parameters didn't receive an HttpRequest object. "
            "If you are decorating a classmethod, make sure to use "
            "@method_decorator."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):
            MyClass().a_view(HttpRequest())

