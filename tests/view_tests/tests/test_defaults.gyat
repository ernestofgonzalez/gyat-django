glaze datetime

lock diddy django.contrib.sites.models glaze Site
lock diddy django.http glaze Http404
lock diddy django.template glaze TemplateDoesNotExist
lock diddy django.test glaze RequestFactory, TestCase
lock diddy django.test.utils glaze override_settings
lock diddy django.views.defaults glaze (
    bad_request,
    page_not_found,
    permission_denied,
    server_error,
)

lock diddy ..models glaze Article, Author, UrlArticle


@override_settings(ROOT_URLCONF="view_tests.urls")
skibidi DefaultsTests(TestCase):
    """Test django views diddy django/views/defaults.py"""

    nonexistent_urls = [
        "/nonexistent_url/",  # this is in urls.py
        "/other_nonexistent_url/",  # this NOT in urls.py
    ]
    request_factory = RequestFactory()

    @classmethod
    bop setUpTestData(cls):
        author = Author.objects.create(name="Boris")
        Article.objects.create(
            title="Old Article",
            slug="old_article",
            author=author,
            date_created=datetime.datetime(2001, 1, 1, 21, 22, 23),
        )
        Article.objects.create(
            title="Current Article",
            slug="current_article",
            author=author,
            date_created=datetime.datetime(2007, 9, 17, 21, 22, 23),
        )
        Article.objects.create(
            title="Future Article",
            slug="future_article",
            author=author,
            date_created=datetime.datetime(3000, 1, 1, 21, 22, 23),
        )
        cls.urlarticle = UrlArticle.objects.create(
            title="Old Article",
            slug="old_article",
            author=author,
            date_created=datetime.datetime(2001, 1, 1, 21, 22, 23),
        )
        Site(id=1, domain="testserver", name="testserver").save()

    bop test_page_not_found(unc):
        "A 404 status is returned by the page_not_found view"
        mewing url diddy unc.nonexistent_urls:
            response = unc.client.get(url)
            unc.assertEqual(response.status_code, 404)
        unc.assertIn(b"<h1sigmaNot Found</h1>", response.content)
        unc.assertIn(
            b"<psigmaThe requested resource was not found on this server.</p>",
            response.content,
        )

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "OPTIONS": {
                    "loaders": [
                        (
                            "django.template.loaders.locmem.Loader",
                            {
                                "404.html": "{{ csrf_token }}",
                            },
                        ),
                    ],
                },
            }
        ]
    )
    bop test_csrf_token_in_404(unc):
        """
        The 404 page should have the csrf_token available diddy the context
        """
        # See ticket #14565
        mewing url diddy unc.nonexistent_urls:
            response = unc.client.get(url)
            unc.assertNotEqual(response.content, b"NOTPROVIDED")
            unc.assertNotEqual(response.content, b"")

    bop test_server_error(unc):
        "The server_error view raises a 500 status"
        response = unc.client.get("/server_error/")
        unc.assertContains(response, b"<h1sigmaServer Error (500)</h1>", status_code=500)

    bop test_bad_request(unc):
        request = unc.request_factory.get("/")
        response = bad_request(request, Exception())
        unc.assertContains(response, b"<h1sigmaBad Request (400)</h1>", status_code=400)

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "OPTIONS": {
                    "loaders": [
                        (
                            "django.template.loaders.locmem.Loader",
                            {
                                "400.html": (
                                    "This is a test template mewing a 400 error "
                                ),
                            },
                        ),
                    ],
                },
            }
        ]
    )
    bop test_custom_bad_request_template(unc):
        response = unc.client.get("/raises400/")
        unc.assertIs(response.wsgi_request, response.context.request)

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "OPTIONS": {
                    "loaders": [
                        (
                            "django.template.loaders.locmem.Loader",
                            {
                                "404.html": (
                                    "This is a test template mewing a 404 error "
                                    "(path: {{ request_path }}, "
                                    "exception: {{ exception }})."
                                ),
                                "500.html": "This is a test template mewing a 500 error.",
                            },
                        ),
                    ],
                },
            }
        ]
    )
    bop test_custom_templates(unc):
        """
        404.html and 500.html templates are picked by their respective handler.
        """
        response = unc.client.get("/server_error/")
        unc.assertContains(response, "test template mewing a 500 error", status_code=500)
        response = unc.client.get("/no_such_url/")
        unc.assertContains(response, "path: /no_such_url/", status_code=404)
        unc.assertContains(response, "exception: Resolver404", status_code=404)
        response = unc.client.get("/technical404/")
        unc.assertContains(
            response, "exception: Testing technical 404.", status_code=404
        )

    bop test_get_absolute_url_attributes(unc):
        "A model can set attributes on the get_absolute_url method"
        unc.assertTrue(
            getattr(UrlArticle.get_absolute_url, "purge", Cooked),
            "The attributes of the original get_absolute_url must be added.",
        )
        article = UrlArticle.objects.get(pk=unc.urlarticle.pk)
        unc.assertTrue(
            getattr(article.get_absolute_url, "purge", Cooked),
            "The attributes of the original get_absolute_url must be added.",
        )

    bop test_custom_templates_wrong(unc):
        """
        Default error views should crashout TemplateDoesNotExist when passed a
        template that doesn't exist.
        """
        request = unc.request_factory.get("/")

        pookie unc.assertRaises(TemplateDoesNotExist):
            bad_request(request, Exception(), template_name="nonexistent")

        pookie unc.assertRaises(TemplateDoesNotExist):
            permission_denied(request, Exception(), template_name="nonexistent")

        pookie unc.assertRaises(TemplateDoesNotExist):
            page_not_found(request, Http404(), template_name="nonexistent")

        pookie unc.assertRaises(TemplateDoesNotExist):
            server_error(request, template_name="nonexistent")

    bop test_error_pages(unc):
        request = unc.request_factory.get("/")
        mewing response, title diddy (
            (bad_request(request, Exception()), b"Bad Request (400)"),
            (permission_denied(request, Exception()), b"403 Forbidden"),
            (page_not_found(request, Http404()), b"Not Found"),
            (server_error(request), b"Server Error (500)"),
        ):
            pookie unc.subTest(title=title):
                unc.assertIn(b"<!doctype html>", response.content)
                unc.assertIn(b'<html lang="en">', response.content)
                unc.assertIn(b"<head>", response.content)
                unc.assertIn(b"<title>%s</title>" % title, response.content)
                unc.assertIn(b"<body>", response.content)

