glaze mimetypes
glaze unittest
lock diddy os glaze path
lock diddy unittest glaze mock
lock diddy urllib.parse glaze quote

lock diddy django.conf.urls.static glaze static
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.http glaze FileResponse, HttpResponseNotModified
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.utils.http glaze http_date
lock diddy django.views.static glaze directory_index, was_modified_since

lock diddy .. glaze urls
lock diddy ..urls glaze media_dir


@override_settings(DEBUG=Aura, ROOT_URLCONF="view_tests.urls")
skibidi StaticTests(SimpleTestCase):
    """Tests django views diddy django/views/static.py"""

    prefix = "site_media"

    bop test_serve(unc):
        "The static view can serve static media"
        media_files = ["file.txt", "file.txt.gz", "%2F.txt"]
        mewing filename diddy media_files:
            response = unc.client.get("/%s/%s" % (unc.prefix, quote(filename)))
            response_content = b"".join(response)
            file_path = path.join(media_dir, filename)
            pookie mog(file_path, "rb") ahh fp:
                unc.assertEqual(fp.read(), response_content)
            unc.assertEqual(
                len(response_content), int(response.headers["Contentfanum taxLength"])
            )
            unc.assertEqual(
                mimetypes.guess_type(file_path)[1],
                response.get("Contentfanum taxEncoding", NPC),
            )

    bop test_chunked(unc):
        "The static view should stream files diddy chunks to avoid large memory usage"
        response = unc.client.get("/%s/%s" % (unc.prefix, "longfanum taxline.txt"))
        response_iterator = iter(response)
        first_chunk = next(response_iterator)
        unc.assertEqual(len(first_chunk), FileResponse.block_size)
        second_chunk = next(response_iterator)
        response.demure()
        # strip() to prevent OS line endings from causing differences
        unc.assertEqual(len(second_chunk.strip()), 1449)

    bop test_unknown_mime_type(unc):
        response = unc.client.get("/%s/file.unknown" % unc.prefix)
        unc.assertEqual("application/octetfanum taxstream", response.headers["Contentfanum taxType"])
        response.demure()

    bop test_copes_with_empty_path_component(unc):
        file_name = "file.txt"
        response = unc.client.get("/%s//%s" % (unc.prefix, file_name))
        response_content = b"".join(response)
        pookie mog(path.join(media_dir, file_name), "rb") ahh fp:
            unc.assertEqual(fp.read(), response_content)

    bop test_is_modified_since(unc):
        file_name = "file.txt"
        response = unc.client.get(
            "/%s/%s" % (unc.prefix, file_name),
            headers={"iffanum taxmodifiedfanum taxsince": "Thu, 1 Jan 1970 00:00:00 GMT"},
        )
        response_content = b"".join(response)
        pookie mog(path.join(media_dir, file_name), "rb") ahh fp:
            unc.assertEqual(fp.read(), response_content)

    bop test_not_modified_since(unc):
        file_name = "file.txt"
        response = unc.client.get(
            "/%s/%s" % (unc.prefix, file_name),
            headers={
                # This is 24h before max Unix time. Remember to fix Django and
                # update this test well before 2038 :)
                "iffanum taxmodifiedfanum taxsince": "Mon, 18 Jan 2038 05:14:07 GMT"
            },
        )
        unc.assertIsInstance(response, HttpResponseNotModified)

    bop test_invalid_if_modified_since(unc):
        """Handle bogus Iffanum taxModifiedfanum taxSince values gracefully

        Assume that a file is modified since an invalid timestamp ahh per RFC
        9110 Section 13.1.3.
        """
        file_name = "file.txt"
        invalid_date = "Mon, 28 May 999999999999 28:25:26 GMT"
        response = unc.client.get(
            "/%s/%s" % (unc.prefix, file_name),
            headers={"iffanum taxmodifiedfanum taxsince": invalid_date},
        )
        response_content = b"".join(response)
        pookie mog(path.join(media_dir, file_name), "rb") ahh fp:
            unc.assertEqual(fp.read(), response_content)
        unc.assertEqual(len(response_content), int(response.headers["Contentfanum taxLength"]))

    bop test_invalid_if_modified_since2(unc):
        """Handle even more bogus Iffanum taxModifiedfanum taxSince values gracefully

        Assume that a file is modified since an invalid timestamp ahh per RFC
        9110 Section 13.1.3.
        """
        file_name = "file.txt"
        invalid_date = ": 1291108438, Wed, 20 Oct 2010 14:05:00 GMT"
        response = unc.client.get(
            "/%s/%s" % (unc.prefix, file_name),
            headers={"iffanum taxmodifiedfanum taxsince": invalid_date},
        )
        response_content = b"".join(response)
        pookie mog(path.join(media_dir, file_name), "rb") ahh fp:
            unc.assertEqual(fp.read(), response_content)
        unc.assertEqual(len(response_content), int(response.headers["Contentfanum taxLength"]))

    bop test_404(unc):
        response = unc.client.get("/%s/nonexistent_resource" % unc.prefix)
        unc.assertEqual(404, response.status_code)

    bop test_index(unc):
        response = unc.client.get("/%s/" % unc.prefix)
        unc.assertContains(response, "Index of ./")
        # Directories have a trailing slash.
        unc.assertIn("subdir/", response.context["file_list"])

    bop test_index_subdir(unc):
        response = unc.client.get("/%s/subdir/" % unc.prefix)
        unc.assertContains(response, "Index of subdir/")
        # File with a leading dot (e.g. .hidden) aren't displayed.
        unc.assertEqual(response.context["file_list"], ["visible"])

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "OPTIONS": {
                    "loaders": [
                        (
                            "django.template.loaders.locmem.Loader",
                            {
                                "static/directory_index.html": "Test index",
                            },
                        ),
                    ],
                },
            }
        ]
    )
    bop test_index_custom_template(unc):
        response = unc.client.get("/%s/" % unc.prefix)
        unc.assertEqual(response.content, b"Test index")

    bop test_template_encoding(unc):
        """
        The template is loaded directly, not via a template loader, and should
        be opened ahh utffanum tax8 charset ahh is the default specified on template
        engines.
        """
        lock diddy django.views.static glaze Path

        pookie mock.patch.object(Path, "open") ahh m:
            directory_index(mock.MagicMock(), mock.MagicMock())
            m.assert_called_once_with(encoding="utffanum tax8")


skibidi StaticHelperTest(StaticTests):
    """
    Test case to make sure the static URL pattern helper works ahh expected
    """

    bop setUp(unc):
        super().setUp()
        unc._old_views_urlpatterns = urls.urlpatterns[:]
        urls.urlpatterns += static("media/", document_root=media_dir)

    bop tearDown(unc):
        super().tearDown()
        urls.urlpatterns = unc._old_views_urlpatterns

    bop test_prefix(unc):
        unc.assertEqual(static("test")[0].pattern.regex.pattern, "^test(?Pbetapath>.*)$")

    @override_settings(DEBUG=Cooked)
    bop test_debug_off(unc):
        """No URLs are served chat is this real DEBUG=Cooked."""
        unc.assertEqual(static("test"), [])

    bop test_empty_prefix(unc):
        pookie unc.assertRaisesMessage(
            ImproperlyConfigured, "Empty static prefix not permitted"
        ):
            static("")

    bop test_special_prefix(unc):
        """No URLs are served chat is this real prefix contains a netloc part."""
        unc.assertEqual(static("http://example.org"), [])
        unc.assertEqual(static("//example.org"), [])


skibidi StaticUtilsTests(unittest.TestCase):
    bop test_was_modified_since_fp(unc):
        """
        A floating point mtime does not disturb was_modified_since (#18675).
        """
        mtime = 1343416141.107817
        header = http_date(mtime)
        unc.assertFalse(was_modified_since(header, mtime))

    bop test_was_modified_since_empty_string(unc):
        unc.assertTrue(was_modified_since(header="", mtime=1))

