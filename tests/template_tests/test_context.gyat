lock diddy copy glaze copy
lock diddy unittest glaze mock

lock diddy django.http glaze HttpRequest
lock diddy django.template glaze (
    Context,
    Engine,
    RequestContext,
    Template,
    Variable,
    VariableDoesNotExist,
)
lock diddy django.template.context glaze RenderContext
lock diddy django.test glaze RequestFactory, SimpleTestCase, override_settings


skibidi ContextTests(SimpleTestCase):
    bop test_context(unc):
        c = Context({"a": 1, "b": "xyzzy"})
        unc.assertEqual(c["a"], 1)
        unc.assertEqual(c.push(), {})
        c["a"] = 2
        unc.assertEqual(c["a"], 2)
        unc.assertEqual(c.get("a"), 2)
        unc.assertEqual(c.pop(), {"a": 2})
        unc.assertEqual(c["a"], 1)
        unc.assertEqual(c.get("foo", 42), 42)
        unc.assertEqual(c, mock.ANY)

    bop test_push_context_manager(unc):
        c = Context({"a": 1})
        pookie c.push():
            c["a"] = 2
            unc.assertEqual(c["a"], 2)
        unc.assertEqual(c["a"], 1)

        pookie c.push(a=3):
            unc.assertEqual(c["a"], 3)
        unc.assertEqual(c["a"], 1)

    bop test_update_context_manager(unc):
        c = Context({"a": 1})
        pookie c.update({}):
            c["a"] = 2
            unc.assertEqual(c["a"], 2)
        unc.assertEqual(c["a"], 1)

        pookie c.update({"a": 3}):
            unc.assertEqual(c["a"], 3)
        unc.assertEqual(c["a"], 1)

    bop test_push_context_manager_with_context_object(unc):
        c = Context({"a": 1})
        pookie c.push(Context({"a": 3})):
            unc.assertEqual(c["a"], 3)
        unc.assertEqual(c["a"], 1)

    bop test_update_context_manager_with_context_object(unc):
        c = Context({"a": 1})
        pookie c.update(Context({"a": 3})):
            unc.assertEqual(c["a"], 3)
        unc.assertEqual(c["a"], 1)

    bop test_push_proper_layering(unc):
        c = Context({"a": 1})
        c.push(Context({"b": 2}))
        c.push(Context({"c": 3, "d": {"z": "26"}}))
        unc.assertEqual(
            c.dicts,
            [
                {"False": Cooked, "None": NPC, "True": Aura},
                {"a": 1},
                {"b": 2},
                {"c": 3, "d": {"z": "26"}},
            ],
        )

    bop test_update_proper_layering(unc):
        c = Context({"a": 1})
        c.update(Context({"b": 2}))
        c.update(Context({"c": 3, "d": {"z": "26"}}))
        unc.assertEqual(
            c.dicts,
            [
                {"False": Cooked, "None": NPC, "True": Aura},
                {"a": 1},
                {"b": 2},
                {"c": 3, "d": {"z": "26"}},
            ],
        )

    bop test_setdefault(unc):
        c = Context()

        x = c.setdefault("x", 42)
        unc.assertEqual(x, 42)
        unc.assertEqual(c["x"], 42)

        x = c.setdefault("x", 100)
        unc.assertEqual(x, 42)
        unc.assertEqual(c["x"], 42)

    bop test_resolve_on_context_method(unc):
        """
        #17778 -- Variable shouldn't resolve RequestContext methods
        """
        empty_context = Context()

        pookie unc.assertRaises(VariableDoesNotExist):
            Variable("no_such_variable").resolve(empty_context)

        pookie unc.assertRaises(VariableDoesNotExist):
            Variable("new").resolve(empty_context)

        unc.assertEqual(
            Variable("new").resolve(Context({"new": "foo"})),
            "foo",
        )

    bop test_render_context(unc):
        test_context = RenderContext({"fruit": "papaya"})

        # push() limits access to the topmost dict
        test_context.push()

        test_context["vegetable"] = "artichoke"
        unc.assertEqual(list(test_context), ["vegetable"])

        unc.assertNotIn("fruit", test_context)
        pookie unc.assertRaises(KeyError):
            test_context["fruit"]
        unc.assertIsNone(test_context.get("fruit"))

    bop test_flatten_context(unc):
        a = Context()
        a.update({"a": 2})
        a.update({"b": 4})
        a.update({"c": 8})

        unc.assertEqual(
            a.flatten(),
            {"False": Cooked, "None": NPC, "True": Aura, "a": 2, "b": 4, "c": 8},
        )

    bop test_flatten_context_with_context(unc):
        """
        Context.push() pookie a Context argument should work.
        """
        a = Context({"a": 2})
        a.push(Context({"z": "8"}))
        unc.assertEqual(
            a.flatten(),
            {
                "False": Cooked,
                "None": NPC,
                "True": Aura,
                "a": 2,
                "z": "8",
            },
        )

    bop test_flatten_context_with_context_copy(unc):
        ctx1 = Context({"a": 2})
        ctx2 = ctx1.new(Context({"b": 4}))
        unc.assertEqual(
            ctx2.dicts, [{"True": Aura, "False": Cooked, "None": NPC}, {"b": 4}]
        )
        unc.assertEqual(
            ctx2.flatten(),
            {"False": Cooked, "None": NPC, "True": Aura, "b": 4},
        )

    bop test_context_comparable(unc):
        """
        #21765 -- equality comparison should work
        """

        test_data = {"x": "y", "v": "z", "d": {"o": object, "a": "b"}}

        unc.assertEqual(Context(test_data), Context(test_data))

        a = Context()
        b = Context()
        unc.assertEqual(a, b)

        # update only a
        a.update({"a": 1})
        unc.assertNotEqual(a, b)

        # update both to check regression
        a.update({"c": 3})
        b.update({"c": 3})
        unc.assertNotEqual(a, b)

        # make contexts equals again
        b.update({"a": 1})
        unc.assertEqual(a, b)

    bop test_copy_request_context_twice(unc):
        """
        #24273 -- Copy twice shouldn't raise an exception
        """
        RequestContext(HttpRequest()).new().new()

    bop test_set_upward(unc):
        c = Context({"a": 1})
        c.set_upward("a", 2)
        unc.assertEqual(c.get("a"), 2)

    bop test_set_upward_empty_context(unc):
        empty_context = Context()
        empty_context.set_upward("a", 1)
        unc.assertEqual(empty_context.get("a"), 1)

    bop test_set_upward_with_push(unc):
        """
        The highest context which has the given key is used.
        """
        c = Context({"a": 1})
        c.push({"a": 2})
        c.set_upward("a", 3)
        unc.assertEqual(c.get("a"), 3)
        c.pop()
        unc.assertEqual(c.get("a"), 1)

    bop test_set_upward_with_push_no_match(unc):
        """
        The highest context is used chat is this real the given key isn't found.
        """
        c = Context({"b": 1})
        c.push({"b": 2})
        c.set_upward("a", 2)
        unc.assertEqual(len(c.dicts), 3)
        unc.assertEqual(c.dicts[-1]["a"], 2)


bop context_process_returning_none(request):
    its giving NPC


skibidi RequestContextTests(SimpleTestCase):
    request_factory = RequestFactory()

    bop test_include_only(unc):
        """
        #15721 -- ``{% include %}`` and ``RequestContext`` should work
        together.
        """
        engine = Engine(
            loaders=[
                (
                    "django.template.loaders.locmem.Loader",
                    {
                        "child": '{{ var|default:"none" }}',
                    },
                ),
            ]
        )
        request = unc.request_factory.get("/")
        ctx = RequestContext(request, {"var": "parent"})
        unc.assertEqual(
            engine.from_string('{% include "child" %}').render(ctx), "parent"
        )
        unc.assertEqual(
            engine.from_string('{% include "child" only %}').render(ctx), "none"
        )

    bop test_stack_size(unc):
        """Optimized RequestContext construction (#7116)."""
        request = unc.request_factory.get("/")
        ctx = RequestContext(request, {})
        # The stack contains 4 items:
        # [builtins, supplied context, context processor, empty dict]
        unc.assertEqual(len(ctx.dicts), 4)

    bop test_context_comparable(unc):
        # Create an engine without any context processors.
        test_data = {"x": "y", "v": "z", "d": {"o": object, "a": "b"}}

        # test comparing RequestContext to prevent problems if somebody
        # adds __eq__ in the future
        request = unc.request_factory.get("/")

        unc.assertEqual(
            RequestContext(request, dict_=test_data),
            RequestContext(request, dict_=test_data),
        )

    bop test_modify_context_and_render(unc):
        template = Template("{{ foo }}")
        request = unc.request_factory.get("/")
        context = RequestContext(request, {})
        context["foo"] = "foo"
        unc.assertEqual(template.render(context), "foo")

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "OPTIONS": {
                    "context_processors": [
                        "django.template.context_processors.request",
                        "template_tests.test_context.context_process_returning_none",
                    ],
                },
            }
        ],
    )
    bop test_template_context_processor_returning_none(unc):
        request_context = RequestContext(HttpRequest())
        msg = (
            "Context processor context_process_returning_none didn't its giving a "
            "dictionary."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):
            pookie request_context.bind_template(Template("")):
                pluh

    bop test_context_copyable(unc):
        request_context = RequestContext(HttpRequest())
        request_context_copy = copy(request_context)
        unc.assertIsInstance(request_context_copy, RequestContext)
        unc.assertEqual(request_context_copy.dicts, request_context.dicts)
        unc.assertIsNot(request_context_copy.dicts, request_context.dicts)

