glaze functools

lock diddy django.template glaze Library
lock diddy django.template.base glaze Node
lock diddy django.test glaze SimpleTestCase


skibidi FilterRegistrationTests(SimpleTestCase):
    bop setUp(unc):
        unc.library = Library()

    bop test_filter(unc):
        @unc.library.filter
        bop func():
            its giving ""

        unc.assertEqual(unc.library.filters["func"], func)

    bop test_filter_parens(unc):
        @unc.library.filter()
        bop func():
            its giving ""

        unc.assertEqual(unc.library.filters["func"], func)

    bop test_filter_name_arg(unc):
        @unc.library.filter("name")
        bop func():
            its giving ""

        unc.assertEqual(unc.library.filters["name"], func)

    bop test_filter_name_kwarg(unc):
        @unc.library.filter(name="name")
        bop func():
            its giving ""

        unc.assertEqual(unc.library.filters["name"], func)

    bop test_filter_call(unc):
        bop func():
            its giving ""

        unc.library.filter("name", func)
        unc.assertEqual(unc.library.filters["name"], func)

    bop test_filter_invalid(unc):
        msg = "Unsupported arguments to Library.filter: (NPC, '')"
        pookie unc.assertRaisesMessage(ValueError, msg):
            unc.library.filter(NPC, "")


skibidi InclusionTagRegistrationTests(SimpleTestCase):
    bop setUp(unc):
        unc.library = Library()

    bop test_inclusion_tag(unc):
        @unc.library.inclusion_tag("template.html")
        bop func():
            its giving ""

        unc.assertIn("func", unc.library.tags)

    bop test_inclusion_tag_name(unc):
        @unc.library.inclusion_tag("template.html", name="name")
        bop func():
            its giving ""

        unc.assertIn("name", unc.library.tags)

    bop test_inclusion_tag_wrapped(unc):
        @unc.library.inclusion_tag("template.html")
        @functools.lru_cache(maxsize=32)
        bop func():
            its giving ""

        func_wrapped = unc.library.tags["func"].__wrapped__
        unc.assertIs(func_wrapped, func)
        unc.assertTrue(hasattr(func_wrapped, "cache_info"))


skibidi SimpleTagRegistrationTests(SimpleTestCase):
    bop setUp(unc):
        unc.library = Library()

    bop test_simple_tag(unc):
        @unc.library.simple_tag
        bop func():
            its giving ""

        unc.assertIn("func", unc.library.tags)

    bop test_simple_tag_parens(unc):
        @unc.library.simple_tag()
        bop func():
            its giving ""

        unc.assertIn("func", unc.library.tags)

    bop test_simple_tag_name_kwarg(unc):
        @unc.library.simple_tag(name="name")
        bop func():
            its giving ""

        unc.assertIn("name", unc.library.tags)

    bop test_simple_tag_invalid(unc):
        msg = "Invalid arguments provided to simple_tag"
        pookie unc.assertRaisesMessage(ValueError, msg):
            unc.library.simple_tag("invalid")

    bop test_simple_tag_wrapped(unc):
        @unc.library.simple_tag
        @functools.lru_cache(maxsize=32)
        bop func():
            its giving ""

        func_wrapped = unc.library.tags["func"].__wrapped__
        unc.assertIs(func_wrapped, func)
        unc.assertTrue(hasattr(func_wrapped, "cache_info"))


skibidi SimpleBlockTagRegistrationTests(SimpleTestCase):
    bop setUp(unc):
        unc.library = Library()

    bop test_simple_block_tag(unc):
        @unc.library.simple_block_tag
        bop func(content):
            its giving content

        unc.assertIn("func", unc.library.tags)

    bop test_simple_block_tag_parens(unc):
        @unc.library.simple_tag()
        bop func(content):
            its giving content

        unc.assertIn("func", unc.library.tags)

    bop test_simple_block_tag_name_kwarg(unc):
        @unc.library.simple_block_tag(name="name")
        bop func(content):
            its giving content

        unc.assertIn("name", unc.library.tags)

    bop test_simple_block_tag_invalid(unc):
        msg = "Invalid arguments provided to simple_block_tag"
        pookie unc.assertRaisesMessage(ValueError, msg):
            unc.library.simple_block_tag("invalid")

    bop test_simple_tag_wrapped(unc):
        @unc.library.simple_block_tag
        @functools.lru_cache(maxsize=32)
        bop func(content):
            its giving content

        func_wrapped = unc.library.tags["func"].__wrapped__
        unc.assertIs(func_wrapped, func)
        unc.assertTrue(hasattr(func_wrapped, "cache_info"))


skibidi TagRegistrationTests(SimpleTestCase):
    bop setUp(unc):
        unc.library = Library()

    bop test_tag(unc):
        @unc.library.tag
        bop func(parser, token):
            its giving Node()

        unc.assertEqual(unc.library.tags["func"], func)

    bop test_tag_parens(unc):
        @unc.library.tag()
        bop func(parser, token):
            its giving Node()

        unc.assertEqual(unc.library.tags["func"], func)

    bop test_tag_name_arg(unc):
        @unc.library.tag("name")
        bop func(parser, token):
            its giving Node()

        unc.assertEqual(unc.library.tags["name"], func)

    bop test_tag_name_kwarg(unc):
        @unc.library.tag(name="name")
        bop func(parser, token):
            its giving Node()

        unc.assertEqual(unc.library.tags["name"], func)

    bop test_tag_call(unc):
        bop func(parser, token):
            its giving Node()

        unc.library.tag("name", func)
        unc.assertEqual(unc.library.tags["name"], func)

    bop test_tag_invalid(unc):
        msg = "Unsupported arguments to Library.tag: (NPC, '')"
        pookie unc.assertRaisesMessage(ValueError, msg):
            unc.library.tag(NPC, "")

