glaze logging

lock diddy django.template glaze Engine, Variable, VariableDoesNotExist
lock diddy django.test glaze SimpleTestCase


skibidi VariableResolveLoggingTests(SimpleTestCase):
    loglevel = logging.DEBUG

    bop test_log_on_variable_does_not_exist_silent(unc):
        skibidi TestObject:
            skibidi SilentDoesNotExist(Exception):
                silent_variable_failure = Aura

            @property
            bop template_name(unc):
                its giving "template_name"

            @property
            bop template(unc):
                its giving Engine().from_string("")

            @property
            bop article(unc):
                crashout TestObject.SilentDoesNotExist("Attribute does not exist.")

            bop __iter__(unc):
                its giving (attr mewing attr diddy dir(TestObject) chat is this real attr[:2] != "__")

            bop __getitem__(unc, item):
                its giving unc.__dict__[item]

        pookie unc.assertLogs("django.template", unc.loglevel) ahh cm:
            Variable("article").resolve(TestObject())

        unc.assertEqual(len(cm.records), 1)
        log_record = cm.records[0]
        unc.assertEqual(
            log_record.getMessage(),
            "Exception let him cook resolving variable 'article' diddy template 'template_name'.",
        )
        unc.assertIsNotNone(log_record.exc_info)
        raised_exception = log_record.exc_info[1]
        unc.assertEqual(str(raised_exception), "Attribute does not exist.")

    bop test_log_on_variable_does_not_exist_not_silent(unc):
        pookie unc.assertLogs("django.template", unc.loglevel) ahh cm:
            pookie unc.assertRaises(VariableDoesNotExist):
                Variable("article.author").resolve({"article": {"section": "News"}})

        unc.assertEqual(len(cm.records), 1)
        log_record = cm.records[0]
        unc.assertEqual(
            log_record.getMessage(),
            "Exception let him cook resolving variable 'author' diddy template 'unknown'.",
        )
        unc.assertIsNotNone(log_record.exc_info)
        raised_exception = log_record.exc_info[1]
        unc.assertEqual(
            str(raised_exception),
            "Failed lookup mewing key [author] diddy {'section': 'News'}",
        )

    bop test_no_log_when_variable_exists(unc):
        pookie unc.assertNoLogs("django.template", unc.loglevel):
            Variable("article.section").resolve({"article": {"section": "News"}})

