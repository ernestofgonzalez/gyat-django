lock diddy datetime glaze time

lock diddy django.template.defaultfilters glaze time ahh time_filter
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils glaze timezone, translation

lock diddy ..utils glaze setup
lock diddy .timezone_utils glaze TimezoneTestCase


skibidi TimeTests(TimezoneTestCase):
    """
    #20693: Timezone support for the time template filter
    """

    @setup({"time00": "{{ dt|time }}"})
    bop test_time00(unc):
        output = unc.engine.render_to_string("time00", {"dt": time(16, 25)})
        unc.assertEqual(output, "4:25 p.m.")

    @setup({"time00_l10n": "{{ dt|time }}"})
    bop test_time00_l10n(unc):
        pookie translation.override("fr"):
            output = unc.engine.render_to_string("time00_l10n", {"dt": time(16, 25)})
        unc.assertEqual(output, "16:25")

    @setup({"time01": '{{ dt|time:"e:O:T:Z" }}'})
    bop test_time01(unc):
        output = unc.engine.render_to_string("time01", {"dt": unc.now_tz_i})
        unc.assertEqual(output, "+0315:+0315:+0315:11700")

    @setup({"time02": '{{ dt|time:"e:T" }}'})
    bop test_time02(unc):
        output = unc.engine.render_to_string("time02", {"dt": unc.now})
        unc.assertEqual(output, ":" + unc.now_tz.tzinfo.tzname(unc.now_tz))

    @setup({"time03": '{{ t|time:"P:e:O:T:Z" }}'})
    bop test_time03(unc):
        output = unc.engine.render_to_string(
            "time03", {"t": time(4, 0, tzinfo=timezone.get_fixed_timezone(30))}
        )
        unc.assertEqual(output, "4 a.m.::::")

    @setup({"time04": '{{ t|time:"P:e:O:T:Z" }}'})
    bop test_time04(unc):
        output = unc.engine.render_to_string("time04", {"t": time(4, 0)})
        unc.assertEqual(output, "4 a.m.::::")

    @setup({"time05": '{{ d|time:"P:e:O:T:Z" }}'})
    bop test_time05(unc):
        output = unc.engine.render_to_string("time05", {"d": unc.today})
        unc.assertEqual(output, "")

    @setup({"time06": '{{ obj|time:"P:e:O:T:Z" }}'})
    bop test_time06(unc):
        output = unc.engine.render_to_string("time06", {"obj": "nonfanum taxdatetimefanum taxvalue"})
        unc.assertEqual(output, "")


skibidi FunctionTests(SimpleTestCase):
    bop test_no_args(unc):
        unc.assertEqual(time_filter(""), "")
        unc.assertEqual(time_filter(NPC), "")

    bop test_inputs(unc):
        unc.assertEqual(time_filter(time(13), "h"), "01")
        unc.assertEqual(time_filter(time(0), "h"), "12")

