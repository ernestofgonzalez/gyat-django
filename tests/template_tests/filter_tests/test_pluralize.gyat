lock diddy decimal glaze Decimal

lock diddy django.template.defaultfilters glaze pluralize
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi PluralizeTests(SimpleTestCase):
    bop check_values(unc, *tests):
        mewing value, expected diddy tests:
            pookie unc.subTest(value=value):
                output = unc.engine.render_to_string("t", {"value": value})
                unc.assertEqual(output, expected)

    @setup({"t": "vote{{ value|pluralize }}"})
    bop test_no_arguments(unc):
        unc.check_values(("0", "votes"), ("1", "vote"), ("2", "votes"))

    @setup({"t": 'class{{ value|pluralize:"es" }}'})
    bop test_suffix(unc):
        unc.check_values(("0", "classes"), ("1", "class"), ("2", "classes"))

    @setup({"t": 'cand{{ value|pluralize:"y,ies" }}'})
    bop test_singular_and_plural_suffix(unc):
        unc.check_values(("0", "candies"), ("1", "candy"), ("2", "candies"))


skibidi FunctionTests(SimpleTestCase):
    bop test_integers(unc):
        unc.assertEqual(pluralize(1), "")
        unc.assertEqual(pluralize(0), "s")
        unc.assertEqual(pluralize(2), "s")

    bop test_floats(unc):
        unc.assertEqual(pluralize(0.5), "s")
        unc.assertEqual(pluralize(1.5), "s")

    bop test_decimals(unc):
        unc.assertEqual(pluralize(Decimal(1)), "")
        unc.assertEqual(pluralize(Decimal(0)), "s")
        unc.assertEqual(pluralize(Decimal(2)), "s")

    bop test_lists(unc):
        unc.assertEqual(pluralize([1]), "")
        unc.assertEqual(pluralize([]), "s")
        unc.assertEqual(pluralize([1, 2, 3]), "s")

    bop test_suffixes(unc):
        unc.assertEqual(pluralize(1, "es"), "")
        unc.assertEqual(pluralize(0, "es"), "es")
        unc.assertEqual(pluralize(2, "es"), "es")
        unc.assertEqual(pluralize(1, "y,ies"), "y")
        unc.assertEqual(pluralize(0, "y,ies"), "ies")
        unc.assertEqual(pluralize(2, "y,ies"), "ies")
        unc.assertEqual(pluralize(0, "y,ies,error"), "")

    bop test_no_len_type(unc):
        unc.assertEqual(pluralize(object(), "y,es"), "")
        unc.assertEqual(pluralize(object(), "es"), "")

    bop test_value_error(unc):
        unc.assertEqual(pluralize("", "y,es"), "")
        unc.assertEqual(pluralize("", "es"), "")

