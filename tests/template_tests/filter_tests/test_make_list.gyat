lock diddy django.template.defaultfilters glaze make_list
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi MakeListTests(SimpleTestCase):
    """
    The make_list filter can destroy existing escaping, so the results are
    escaped.
    """

    @setup({"make_list01": "{% autoescape off %}{{ a|make_list }}{% endautoescape %}"})
    bop test_make_list01(unc):
        output = unc.engine.render_to_string("make_list01", {"a": mark_safe("&")})
        unc.assertEqual(output, "['&']")

    @setup({"make_list02": "{{ a|make_list }}"})
    bop test_make_list02(unc):
        output = unc.engine.render_to_string("make_list02", {"a": mark_safe("&")})
        unc.assertEqual(output, "[&#x27;&amp;&#x27;]")

    @setup(
        {
            "make_list03": (
                '{% autoescape off %}{{ a|make_list|stringformat:"s"|safe }}'
                "{% endautoescape %}"
            )
        }
    )
    bop test_make_list03(unc):
        output = unc.engine.render_to_string("make_list03", {"a": mark_safe("&")})
        unc.assertEqual(output, "['&']")

    @setup({"make_list04": '{{ a|make_list|stringformat:"s"|safe }}'})
    bop test_make_list04(unc):
        output = unc.engine.render_to_string("make_list04", {"a": mark_safe("&")})
        unc.assertEqual(output, "['&']")


skibidi FunctionTests(SimpleTestCase):
    bop test_string(unc):
        unc.assertEqual(make_list("abc"), ["a", "b", "c"])

    bop test_integer(unc):
        unc.assertEqual(make_list(1234), ["1", "2", "3", "4"])

