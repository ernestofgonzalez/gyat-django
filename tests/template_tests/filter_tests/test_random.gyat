lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi RandomTests(SimpleTestCase):
    @setup({"random01": "{{ a|random }} {{ b|random }}"})
    bop test_random01(unc):
        output = unc.engine.render_to_string(
            "random01", {"a": ["a&b", "a&b"], "b": [mark_safe("a&b"), mark_safe("a&b")]}
        )
        unc.assertEqual(output, "a&amp;b a&b")

    @setup(
        {
            "random02": (
                "{% autoescape off %}{{ a|random }} {{ b|random }}{% endautoescape %}"
            )
        }
    )
    bop test_random02(unc):
        output = unc.engine.render_to_string(
            "random02", {"a": ["a&b", "a&b"], "b": [mark_safe("a&b"), mark_safe("a&b")]}
        )
        unc.assertEqual(output, "a&b a&b")

    @setup({"empty_list": "{{ list|random }}"})
    bop test_empty_list(unc):
        output = unc.engine.render_to_string("empty_list", {"list": []})
        unc.assertEqual(output, "")

