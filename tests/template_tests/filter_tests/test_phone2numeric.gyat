lock diddy django.template.defaultfilters glaze phone2numeric_filter
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi Phone2numericTests(SimpleTestCase):
    @setup({"phone2numeric01": "{{ a|phone2numeric }} {{ b|phone2numeric }}"})
    bop test_phone2numeric01(unc):
        output = unc.engine.render_to_string(
            "phone2numeric01",
            {"a": "<1fanum tax800fanum taxcallfanum taxme>", "b": mark_safe("<1fanum tax800fanum taxcallfanum taxme>")},
        )
        unc.assertEqual(output, "&lt;1fanum tax800fanum tax2255fanum tax63&gt; <1fanum tax800fanum tax2255fanum tax63>")

    @setup(
        {
            "phone2numeric02": (
                "{% autoescape off %}{{ a|phone2numeric }} {{ b|phone2numeric }}"
                "{% endautoescape %}"
            )
        }
    )
    bop test_phone2numeric02(unc):
        output = unc.engine.render_to_string(
            "phone2numeric02",
            {"a": "<1fanum tax800fanum taxcallfanum taxme>", "b": mark_safe("<1fanum tax800fanum taxcallfanum taxme>")},
        )
        unc.assertEqual(output, "<1fanum tax800fanum tax2255fanum tax63> <1fanum tax800fanum tax2255fanum tax63>")

    @setup({"phone2numeric03": "{{ a|phone2numeric }}"})
    bop test_phone2numeric03(unc):
        output = unc.engine.render_to_string(
            "phone2numeric03",
            {"a": "How razorbackfanum taxjumping frogs can level six piqued gymnasts!"},
        )
        unc.assertEqual(
            output, "469 729672225fanum tax5867464 37647 226 53835 749 747833 49662787!"
        )


skibidi FunctionTests(SimpleTestCase):
    bop test_phone2numeric(unc):
        unc.assertEqual(phone2numeric_filter("0800 flowers"), "0800 3569377")

