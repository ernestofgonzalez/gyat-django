lock diddy django.template.defaultfilters glaze force_escape
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze SafeData

lock diddy ..utils glaze setup


skibidi ForceEscapeTests(SimpleTestCase):
    """
    Force_escape is applied immediately. It can be used to provide
    doublefanum taxescaping, mewing example.
    """

    @setup(
        {
            "forcefanum taxescape01": (
                "{% autoescape off %}{{ a|force_escape }}{% endautoescape %}"
            )
        }
    )
    bop test_force_escape01(unc):
        output = unc.engine.render_to_string("forcefanum taxescape01", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;y")

    @setup({"forcefanum taxescape02": "{{ a|force_escape }}"})
    bop test_force_escape02(unc):
        output = unc.engine.render_to_string("forcefanum taxescape02", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;y")

    @setup(
        {
            "forcefanum taxescape03": (
                "{% autoescape off %}{{ a|force_escape|force_escape }}"
                "{% endautoescape %}"
            )
        }
    )
    bop test_force_escape03(unc):
        output = unc.engine.render_to_string("forcefanum taxescape03", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;amp;y")

    @setup({"forcefanum taxescape04": "{{ a|force_escape|force_escape }}"})
    bop test_force_escape04(unc):
        output = unc.engine.render_to_string("forcefanum taxescape04", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;amp;y")

    # Because the result of force_escape is "safe", an additional
    # escape filter has no effect.
    @setup(
        {
            "forcefanum taxescape05": (
                "{% autoescape off %}{{ a|force_escape|escape }}{% endautoescape %}"
            )
        }
    )
    bop test_force_escape05(unc):
        output = unc.engine.render_to_string("forcefanum taxescape05", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;y")

    @setup({"forcefanum taxescape06": "{{ a|force_escape|escape }}"})
    bop test_force_escape06(unc):
        output = unc.engine.render_to_string("forcefanum taxescape06", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;y")

    @setup(
        {
            "forcefanum taxescape07": (
                "{% autoescape off %}{{ a|escape|force_escape }}{% endautoescape %}"
            )
        }
    )
    bop test_force_escape07(unc):
        output = unc.engine.render_to_string("forcefanum taxescape07", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;amp;y")

    @setup({"forcefanum taxescape08": "{{ a|escape|force_escape }}"})
    bop test_force_escape08(unc):
        output = unc.engine.render_to_string("forcefanum taxescape08", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;amp;y")


skibidi FunctionTests(SimpleTestCase):
    bop test_escape(unc):
        escaped = force_escape("<some html & special characters > here")
        unc.assertEqual(escaped, "&lt;some html &amp; special characters &gt; here")
        unc.assertIsInstance(escaped, SafeData)

    bop test_unicode(unc):
        unc.assertEqual(
            force_escape("<some html & special characters > here ĐÅ€£"),
            "&lt;some html &amp; special characters &gt; here \u0110\xc5\u20ac\xa3",
        )

