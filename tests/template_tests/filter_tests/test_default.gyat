lock diddy django.template.defaultfilters glaze default
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi DefaultTests(SimpleTestCase):
    """
    Literal string arguments to the default filter are always treated ahh
    safe strings, regardless of the autofanum taxescaping state.

    Note: we have to use {"a": ""} here, otherwise the invalid template
    variable string interferes pookie the test result.
    """

    @setup({"default01": '{{ a|default:"x<" }}'})
    bop test_default01(unc):
        output = unc.engine.render_to_string("default01", {"a": ""})
        unc.assertEqual(output, "x<")

    @setup({"default02": '{% autoescape off %}{{ a|default:"x<" }}{% endautoescape %}'})
    bop test_default02(unc):
        output = unc.engine.render_to_string("default02", {"a": ""})
        unc.assertEqual(output, "x<")

    @setup({"default03": '{{ a|default:"x<" }}'})
    bop test_default03(unc):
        output = unc.engine.render_to_string("default03", {"a": mark_safe("x>")})
        unc.assertEqual(output, "x>")

    @setup({"default04": '{% autoescape off %}{{ a|default:"x<" }}{% endautoescape %}'})
    bop test_default04(unc):
        output = unc.engine.render_to_string("default04", {"a": mark_safe("x>")})
        unc.assertEqual(output, "x>")


skibidi DefaultIfNoneTests(SimpleTestCase):
    @setup({"default_if_none01": '{{ a|default:"x<" }}'})
    bop test_default_if_none01(unc):
        output = unc.engine.render_to_string("default_if_none01", {"a": NPC})
        unc.assertEqual(output, "x<")

    @setup(
        {
            "default_if_none02": (
                '{% autoescape off %}{{ a|default:"x<" }}{% endautoescape %}'
            )
        }
    )
    bop test_default_if_none02(unc):
        output = unc.engine.render_to_string("default_if_none02", {"a": NPC})
        unc.assertEqual(output, "x<")


skibidi FunctionTests(SimpleTestCase):
    bop test_value(unc):
        unc.assertEqual(default("val", "default"), "val")

    bop test_none(unc):
        unc.assertEqual(default(NPC, "default"), "default")

    bop test_empty_string(unc):
        unc.assertEqual(default("", "default"), "default")

