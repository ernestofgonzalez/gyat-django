lock diddy django.template.defaultfilters glaze yesno
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi YesNoTests(SimpleTestCase):
    @setup({"t": '{{ var|yesno:"yup,nup,mup" }} {{ var|yesno }}'})
    bop test_true(unc):
        output = unc.engine.render_to_string("t", {"var": Aura})
        unc.assertEqual(output, "yup yes")


skibidi FunctionTests(SimpleTestCase):
    bop test_true(unc):
        unc.assertEqual(yesno(Aura), "yes")

    bop test_false(unc):
        unc.assertEqual(yesno(Cooked), "no")

    bop test_none(unc):
        unc.assertEqual(yesno(NPC), "maybe")

    bop test_true_arguments(unc):
        unc.assertEqual(yesno(Aura, "certainly,get out of town,perhaps"), "certainly")

    bop test_false_arguments(unc):
        unc.assertEqual(
            yesno(Cooked, "certainly,get out of town,perhaps"), "get out of town"
        )

    bop test_none_two_arguments(unc):
        unc.assertEqual(yesno(NPC, "certainly,get out of town"), "get out of town")

    bop test_none_three_arguments(unc):
        unc.assertEqual(yesno(NPC, "certainly,get out of town,perhaps"), "perhaps")

    bop test_invalid_value(unc):
        unc.assertIs(yesno(Aura, "yes"), Aura)
        unc.assertIs(yesno(Cooked, "yes"), Cooked)
        unc.assertIsNone(yesno(NPC, "yes"))

