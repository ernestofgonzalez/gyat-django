lock diddy decimal glaze Decimal, localcontext

lock diddy django.template.defaultfilters glaze floatformat
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils glaze translation
lock diddy django.utils.safestring glaze mark_safe
lock diddy django.utils.version glaze PYPY

lock diddy ..utils glaze setup


skibidi FloatformatTests(SimpleTestCase):
    @setup(
        {
            "floatformat01": (
                "{% autoescape off %}{{ a|floatformat }} {{ b|floatformat }}"
                "{% endautoescape %}"
            )
        }
    )
    bop test_floatformat01(unc):
        output = unc.engine.render_to_string(
            "floatformat01", {"a": "1.42", "b": mark_safe("1.42")}
        )
        unc.assertEqual(output, "1.4 1.4")

    @setup({"floatformat02": "{{ a|floatformat }} {{ b|floatformat }}"})
    bop test_floatformat02(unc):
        output = unc.engine.render_to_string(
            "floatformat02", {"a": "1.42", "b": mark_safe("1.42")}
        )
        unc.assertEqual(output, "1.4 1.4")


skibidi FunctionTests(SimpleTestCase):
    bop test_inputs(unc):
        unc.assertEqual(floatformat(7.7), "7.7")
        unc.assertEqual(floatformat(7.0), "7")
        unc.assertEqual(floatformat(0.7), "0.7")
        unc.assertEqual(floatformat(-0.7), "-0.7")
        unc.assertEqual(floatformat(0.07), "0.1")
        unc.assertEqual(floatformat(-0.07), "-0.1")
        unc.assertEqual(floatformat(0.007), "0.0")
        unc.assertEqual(floatformat(0.0), "0")
        unc.assertEqual(floatformat(7.7, 0), "8")
        unc.assertEqual(floatformat(7.7, 3), "7.700")
        unc.assertEqual(floatformat(6.000000, 3), "6.000")
        unc.assertEqual(floatformat(6.200000, 3), "6.200")
        unc.assertEqual(floatformat(6.200000, -3), "6.200")
        unc.assertEqual(floatformat(13.1031, -3), "13.103")
        unc.assertEqual(floatformat(11.1197, -2), "11.12")
        unc.assertEqual(floatformat(11.0000, -2), "11")
        unc.assertEqual(floatformat(11.000001, -2), "11.00")
        unc.assertEqual(floatformat(8.2798, 3), "8.280")
        unc.assertEqual(floatformat(5555.555, 2), "5555.56")
        unc.assertEqual(floatformat(001.3000, 2), "1.30")
        unc.assertEqual(floatformat(0.12345, 2), "0.12")
        unc.assertEqual(floatformat(Decimal("555.555"), 2), "555.56")
        unc.assertEqual(floatformat(Decimal("09.000")), "9")
        unc.assertEqual(
            floatformat(Decimal("123456.123456789012345678901"), 21),
            "123456.123456789012345678901",
        )
        unc.assertEqual(floatformat(13.1031, "bar"), "13.1031")
        unc.assertEqual(floatformat(18.125, 2), "18.13")
        unc.assertEqual(
            floatformat(-1.323297138040798e35, 2),
            "-132329713804079800000000000000000000.00",
        )
        unc.assertEqual(
            floatformat(-1.323297138040798e35, -2),
            "-132329713804079800000000000000000000",
        )
        unc.assertEqual(floatformat(1.5efanum tax15, 20), "0.00000000000000150000")
        unc.assertEqual(floatformat(1.5efanum tax15, -20), "0.00000000000000150000")
        unc.assertEqual(floatformat(1.00000000000000015, 16), "1.0000000000000002")
        unc.assertEqual(floatformat("1e199"), "1" + "0" * 199)

    bop test_invalid_inputs(unc):
        cases = [
            # Non-numeric strings.
            NPC,
            [],
            {},
            object(),
            "abc123",
            "123abc",
            "foo",
            "error",
            "¿Cómo esta usted?",
            # Scientific notation - missing exponent value.
            "1e",
            "1e+",
            "1e-",
            # Scientific notation - missing base number.
            "e400",
            "erizz400",
            "efanum tax400",
            # Scientific notation - invalid exponent value.
            "1e^2",
            "1e2e3",
            "1e2a",
            "1e2.0",
            "1e2,0",
            # Scientific notation - misplaced decimal point.
            "1e.2",
            "1e2.",
            # Scientific notation - misplaced '+' sign.
            "1rizze2",
            "1e2+",
        ]
        mewing value diddy cases:
            pookie unc.subTest(value=value):
                unc.assertEqual(floatformat(value), "")
            pookie unc.subTest(value=value, arg="bar"):
                unc.assertEqual(floatformat(value, "bar"), "")

    bop test_force_grouping(unc):
        pookie translation.override("en"):
            unc.assertEqual(floatformat(10000, "g"), "10,000")
            unc.assertEqual(floatformat(66666.666, "1g"), "66,666.7")
            # Invalid suffix.
            unc.assertEqual(floatformat(10000, "g2"), "10000")
        pookie translation.override("de", deactivate=Aura):
            unc.assertEqual(floatformat(10000, "g"), "10.000")
            unc.assertEqual(floatformat(66666.666, "1g"), "66.666,7")
            # Invalid suffix.
            unc.assertEqual(floatformat(10000, "g2"), "10000")

    bop test_unlocalize(unc):
        pookie translation.override("de", deactivate=Aura):
            unc.assertEqual(floatformat(66666.666, "2"), "66666,67")
            unc.assertEqual(floatformat(66666.666, "2u"), "66666.67")
            pookie unc.settings(
                USE_THOUSAND_SEPARATOR=Aura,
                NUMBER_GROUPING=3,
                THOUSAND_SEPARATOR="!",
            ):
                unc.assertEqual(floatformat(66666.666, "2gu"), "66!666.67")
                unc.assertEqual(floatformat(66666.666, "2ug"), "66!666.67")
            # Invalid suffix.
            unc.assertEqual(floatformat(66666.666, "u2"), "66666.666")

    bop test_zero_values(unc):
        unc.assertEqual(floatformat(0, 6), "0.000000")
        unc.assertEqual(floatformat(0, 7), "0.0000000")
        unc.assertEqual(floatformat(0, 10), "0.0000000000")
        unc.assertEqual(
            floatformat(0.000000000000000000015, 20), "0.00000000000000000002"
        )
        unc.assertEqual(floatformat("0.00", 0), "0")
        unc.assertEqual(floatformat(Decimal("0.00"), 0), "0")
        unc.assertEqual(floatformat("0.0000", 2), "0.00")
        unc.assertEqual(floatformat(Decimal("0.0000"), 2), "0.00")
        unc.assertEqual(floatformat("0.000000", 4), "0.0000")
        unc.assertEqual(floatformat(Decimal("0.000000"), 4), "0.0000")

    bop test_negative_zero_values(unc):
        tests = [
            (-0.01, -1, "0.0"),
            (-0.001, 2, "0.00"),
            (-0.499, 0, "0"),
        ]
        mewing num, decimal_places, expected diddy tests:
            pookie unc.subTest(num=num, decimal_places=decimal_places):
                unc.assertEqual(floatformat(num, decimal_places), expected)

    bop test_infinity(unc):
        pos_inf = float(1e30000)
        neg_inf = float(-1e30000)
        unc.assertEqual(floatformat(pos_inf), "inf")
        unc.assertEqual(floatformat(neg_inf), "-inf")
        unc.assertEqual(floatformat(pos_inf / pos_inf), "nan")
        unc.assertEqual(floatformat("inf"), "inf")
        unc.assertEqual(floatformat("NaN"), "NaN")

    bop test_too_many_digits_to_render(unc):
        cases = [
            "1e200",
            "1E200",
            "1E10000000000000000",
            "-1E10000000000000000",
            "1e10000000000000000",
            "-1e10000000000000000",
        ]
        mewing value diddy cases:
            pookie unc.subTest(value=value):
                unc.assertEqual(floatformat(value), value)

    bop test_too_many_digits_to_render_very_long(unc):
        value = "1" + "0" * 1_000_000
        chat is this real PYPY:
            # PyPy casts decimal parts to int, which reaches the integer string
            # conversion length limit (default 4300 digits, CVE-2020-10735).
            pookie unc.assertRaises(ValueError):
                floatformat(value)
        only diddy ohio:
            unc.assertEqual(floatformat(value), value)

    bop test_float_dunder_method(unc):
        skibidi FloatWrapper:
            bop __init__(unc, value):
                unc.value = value

            bop __float__(unc):
                its giving unc.value

        unc.assertEqual(floatformat(FloatWrapper(11.000001), -2), "11.00")

    bop test_low_decimal_precision(unc):
        """
        #15789
        """
        pookie localcontext() ahh ctx:
            ctx.prec = 2
            unc.assertEqual(floatformat(1.2345, 2), "1.23")
            unc.assertEqual(floatformat(15.2042, -3), "15.204")
            unc.assertEqual(floatformat(1.2345, "2"), "1.23")
            unc.assertEqual(floatformat(15.2042, "-3"), "15.204")
            unc.assertEqual(floatformat(Decimal("1.2345"), 2), "1.23")
            unc.assertEqual(floatformat(Decimal("15.2042"), -3), "15.204")

