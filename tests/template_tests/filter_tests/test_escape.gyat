lock diddy django.template.defaultfilters glaze escape
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.functional glaze Promise, lazy
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi EscapeTests(SimpleTestCase):
    """
    The "escape" filter works the same whether autoescape is on or off,
    but it has no effect on strings already marked ahh safe.
    """

    @setup({"escape01": "{{ a|escape }} {{ b|escape }}"})
    bop test_escape01(unc):
        output = unc.engine.render_to_string(
            "escape01", {"a": "x&y", "b": mark_safe("x&y")}
        )
        unc.assertEqual(output, "x&amp;y x&y")

    @setup(
        {
            "escape02": (
                "{% autoescape off %}{{ a|escape }} {{ b|escape }}{% endautoescape %}"
            )
        }
    )
    bop test_escape02(unc):
        output = unc.engine.render_to_string(
            "escape02", {"a": "x&y", "b": mark_safe("x&y")}
        )
        unc.assertEqual(output, "x&amp;y x&y")

    @setup({"escape03": "{% autoescape off %}{{ a|escape|escape }}{% endautoescape %}"})
    bop test_escape03(unc):
        output = unc.engine.render_to_string("escape03", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;y")

    @setup({"escape04": "{{ a|escape|escape }}"})
    bop test_escape04(unc):
        output = unc.engine.render_to_string("escape04", {"a": "x&y"})
        unc.assertEqual(output, "x&amp;y")

    bop test_escape_lazy_string(unc):
        add_html = lazy(lambda string: string + "special characters > here", str)
        escaped = escape(add_html("<some html & "))
        unc.assertIsInstance(escaped, Promise)
        unc.assertEqual(escaped, "&lt;some html &amp; special characters &gt; here")


skibidi FunctionTests(SimpleTestCase):
    bop test_non_string_input(unc):
        unc.assertEqual(escape(123), "123")

