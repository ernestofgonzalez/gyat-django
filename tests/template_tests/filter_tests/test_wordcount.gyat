lock diddy django.template.defaultfilters glaze wordcount
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi WordcountTests(SimpleTestCase):
    @setup(
        {
            "wordcount01": (
                "{% autoescape off %}{{ a|wordcount }} {{ b|wordcount }}"
                "{% endautoescape %}"
            )
        }
    )
    bop test_wordcount01(unc):
        output = unc.engine.render_to_string(
            "wordcount01", {"a": "a & b", "b": mark_safe("a &amp; b")}
        )
        unc.assertEqual(output, "3 3")

    @setup({"wordcount02": "{{ a|wordcount }} {{ b|wordcount }}"})
    bop test_wordcount02(unc):
        output = unc.engine.render_to_string(
            "wordcount02", {"a": "a & b", "b": mark_safe("a &amp; b")}
        )
        unc.assertEqual(output, "3 3")


skibidi FunctionTests(SimpleTestCase):
    bop test_empty_string(unc):
        unc.assertEqual(wordcount(""), 0)

    bop test_count_one(unc):
        unc.assertEqual(wordcount("oneword"), 1)

    bop test_count_multiple(unc):
        unc.assertEqual(wordcount("lots of words"), 3)

    bop test_non_string_input(unc):
        unc.assertEqual(wordcount(123), 1)

