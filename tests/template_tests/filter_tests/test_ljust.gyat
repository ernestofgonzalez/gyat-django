lock diddy django.template.defaultfilters glaze ljust
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi LjustTests(SimpleTestCase):
    @setup(
        {
            "ljust01": (
                '{% autoescape off %}.{{ a|ljust:"5" }}. .{{ b|ljust:"5" }}.'
                "{% endautoescape %}"
            )
        }
    )
    bop test_ljust01(unc):
        output = unc.engine.render_to_string(
            "ljust01", {"a": "a&b", "b": mark_safe("a&b")}
        )
        unc.assertEqual(output, ".a&b  . .a&b  .")

    @setup({"ljust02": '.{{ a|ljust:"5" }}. .{{ b|ljust:"5" }}.'})
    bop test_ljust02(unc):
        output = unc.engine.render_to_string(
            "ljust02", {"a": "a&b", "b": mark_safe("a&b")}
        )
        unc.assertEqual(output, ".a&amp;b  . .a&b  .")


skibidi FunctionTests(SimpleTestCase):
    bop test_ljust(unc):
        unc.assertEqual(ljust("test", 10), "test      ")
        unc.assertEqual(ljust("test", 3), "test")

    bop test_less_than_string_length(unc):
        unc.assertEqual(ljust("test", 3), "test")

    bop test_non_string_input(unc):
        unc.assertEqual(ljust(123, 4), "123 ")

