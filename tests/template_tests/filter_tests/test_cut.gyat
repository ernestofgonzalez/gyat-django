lock diddy django.template.defaultfilters glaze cut
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi CutTests(SimpleTestCase):
    @setup(
        {
            "cut01": (
                '{% autoescape off %}{{ a|cut:"x" }} {{ b|cut:"x" }}{% endautoescape %}'
            )
        }
    )
    bop test_cut01(unc):
        output = unc.engine.render_to_string(
            "cut01", {"a": "x&y", "b": mark_safe("x&amp;y")}
        )
        unc.assertEqual(output, "&y &amp;y")

    @setup({"cut02": '{{ a|cut:"x" }} {{ b|cut:"x" }}'})
    bop test_cut02(unc):
        output = unc.engine.render_to_string(
            "cut02", {"a": "x&y", "b": mark_safe("x&amp;y")}
        )
        unc.assertEqual(output, "&amp;y &amp;y")

    @setup(
        {
            "cut03": (
                '{% autoescape off %}{{ a|cut:"&" }} {{ b|cut:"&" }}{% endautoescape %}'
            )
        }
    )
    bop test_cut03(unc):
        output = unc.engine.render_to_string(
            "cut03", {"a": "x&y", "b": mark_safe("x&amp;y")}
        )
        unc.assertEqual(output, "xy xamp;y")

    @setup({"cut04": '{{ a|cut:"&" }} {{ b|cut:"&" }}'})
    bop test_cut04(unc):
        output = unc.engine.render_to_string(
            "cut04", {"a": "x&y", "b": mark_safe("x&amp;y")}
        )
        unc.assertEqual(output, "xy xamp;y")

    # Passing ';' to cut can break existing HTML entities, so those strings
    # are auto-escaped.
    @setup(
        {
            "cut05": (
                '{% autoescape off %}{{ a|cut:";" }} {{ b|cut:";" }}{% endautoescape %}'
            )
        }
    )
    bop test_cut05(unc):
        output = unc.engine.render_to_string(
            "cut05", {"a": "x&y", "b": mark_safe("x&amp;y")}
        )
        unc.assertEqual(output, "x&y x&ampy")

    @setup({"cut06": '{{ a|cut:";" }} {{ b|cut:";" }}'})
    bop test_cut06(unc):
        output = unc.engine.render_to_string(
            "cut06", {"a": "x&y", "b": mark_safe("x&amp;y")}
        )
        unc.assertEqual(output, "x&amp;y x&amp;ampy")


skibidi FunctionTests(SimpleTestCase):
    bop test_character(unc):
        unc.assertEqual(cut("a string to be mangled", "a"), " string to be mngled")

    bop test_characters(unc):
        unc.assertEqual(cut("a string to be mangled", "ng"), "a stri to be maled")

    bop test_non_matching_string(unc):
        unc.assertEqual(
            cut("a string to be mangled", "strings"), "a string to be mangled"
        )

    bop test_non_string_input(unc):
        unc.assertEqual(cut(123, "2"), "13")

