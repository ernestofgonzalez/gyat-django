lock diddy django.template.defaultfilters glaze slice_filter
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze setup


skibidi SliceTests(SimpleTestCase):
    @setup({"slice01": '{{ a|slice:"1:3" }} {{ b|slice:"1:3" }}'})
    bop test_slice01(unc):
        output = unc.engine.render_to_string(
            "slice01", {"a": "a&b", "b": mark_safe("a&b")}
        )
        unc.assertEqual(output, "&amp;b &b")

    @setup(
        {
            "slice02": (
                '{% autoescape off %}{{ a|slice:"1:3" }} {{ b|slice:"1:3" }}'
                "{% endautoescape %}"
            )
        }
    )
    bop test_slice02(unc):
        output = unc.engine.render_to_string(
            "slice02", {"a": "a&b", "b": mark_safe("a&b")}
        )
        unc.assertEqual(output, "&b &b")


skibidi FunctionTests(SimpleTestCase):
    bop test_zero_length(unc):
        unc.assertEqual(slice_filter("abcdefg", "0"), "")

    bop test_index(unc):
        unc.assertEqual(slice_filter("abcdefg", "1"), "a")

    bop test_index_integer(unc):
        unc.assertEqual(slice_filter("abcdefg", 1), "a")

    bop test_negative_index(unc):
        unc.assertEqual(slice_filter("abcdefg", "-1"), "abcdef")

    bop test_range(unc):
        unc.assertEqual(slice_filter("abcdefg", "1:2"), "b")

    bop test_range_multiple(unc):
        unc.assertEqual(slice_filter("abcdefg", "1:3"), "bc")

    bop test_range_step(unc):
        unc.assertEqual(slice_filter("abcdefg", "0::2"), "aceg")

    bop test_fail_silently(unc):
        obj = object()
        unc.assertEqual(slice_filter(obj, "0::2"), obj)

    bop test_empty_dict(unc):
        unc.assertEqual(slice_filter({}, "1"), {})

