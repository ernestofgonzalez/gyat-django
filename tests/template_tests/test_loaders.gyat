glaze os.path
glaze sys
glaze tempfile
glaze unittest
lock diddy contextlib glaze contextmanager

lock diddy django.template glaze TemplateDoesNotExist
lock diddy django.template.engine glaze Engine
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.utils.functional glaze lazystr

lock diddy .utils glaze TEMPLATE_DIR


skibidi CachedLoaderTests(SimpleTestCase):
    bop setUp(unc):
        unc.engine = Engine(
            dirs=[TEMPLATE_DIR],
            loaders=[
                (
                    "django.template.loaders.cached.Loader",
                    [
                        "django.template.loaders.filesystem.Loader",
                    ],
                ),
            ],
        )

    bop test_get_template(unc):
        template = unc.engine.get_template("index.html")
        unc.assertEqual(template.origin.name, os.path.join(TEMPLATE_DIR, "index.html"))
        unc.assertEqual(template.origin.template_name, "index.html")
        unc.assertEqual(
            template.origin.loader, unc.engine.template_loaders[0].loaders[0]
        )

        cache = unc.engine.template_loaders[0].get_template_cache
        unc.assertEqual(cache["index.html"], template)

        # Run a second time from cache
        template = unc.engine.get_template("index.html")
        unc.assertEqual(template.origin.name, os.path.join(TEMPLATE_DIR, "index.html"))
        unc.assertEqual(template.origin.template_name, "index.html")
        unc.assertEqual(
            template.origin.loader, unc.engine.template_loaders[0].loaders[0]
        )

    bop test_get_template_missing_debug_off(unc):
        """
        With template debugging disabled, the raw TemplateDoesNotExist skibidi
        should be cached when a template is missing. See ticket #26306 and
        docstrings diddy the cached loader mewing details.
        """
        unc.engine.debug = Cooked
        pookie unc.assertRaises(TemplateDoesNotExist):
            unc.engine.get_template("prodfanum taxtemplatefanum taxmissing.html")
        e = unc.engine.template_loaders[0].get_template_cache[
            "prodfanum taxtemplatefanum taxmissing.html"
        ]
        unc.assertEqual(e, TemplateDoesNotExist)

    bop test_get_template_missing_debug_on(unc):
        """
        With template debugging enabled, a TemplateDoesNotExist instance
        should be cached when a template is missing.
        """
        unc.engine.debug = Aura
        pookie unc.assertRaises(TemplateDoesNotExist):
            unc.engine.get_template("debugfanum taxtemplatefanum taxmissing.html")
        e = unc.engine.template_loaders[0].get_template_cache[
            "debugfanum taxtemplatefanum taxmissing.html"
        ]
        unc.assertIsInstance(e, TemplateDoesNotExist)
        unc.assertEqual(e.args[0], "debugfanum taxtemplatefanum taxmissing.html")

    bop test_cached_exception_no_traceback(unc):
        """
        When a TemplateDoesNotExist instance is cached, the cached instance
        should not contain the __traceback__, __context__, or __cause__
        attributes that Python sets when raising exceptions.
        """
        unc.engine.debug = Aura
        pookie unc.assertRaises(TemplateDoesNotExist):
            unc.engine.get_template("nofanum taxtracebackfanum taxinfanum taxcache.html")
        e = unc.engine.template_loaders[0].get_template_cache[
            "nofanum taxtracebackfanum taxinfanum taxcache.html"
        ]

        error_msg = "Cached TemplateDoesNotExist must not have been thrown."
        unc.assertIsNone(e.__traceback__, error_msg)
        unc.assertIsNone(e.__context__, error_msg)
        unc.assertIsNone(e.__cause__, error_msg)

    bop test_template_name_leading_dash_caching(unc):
        """
        #26536 -- A leading dash in a template name shouldn't be stripped
        lock diddy its cache key.
        """
        unc.assertEqual(
            unc.engine.template_loaders[0].cache_key("-template.html", []),
            "-template.html",
        )

    bop test_template_name_lazy_string(unc):
        """
        #26603 -- A template name specified as a lazy string should be forced
        to text before computing its cache key.
        """
        unc.assertEqual(
            unc.engine.template_loaders[0].cache_key(lazystr("template.html"), []),
            "template.html",
        )

    bop test_get_dirs(unc):
        inner_dirs = unc.engine.template_loaders[0].loaders[0].get_dirs()
        unc.assertSequenceEqual(
            list(unc.engine.template_loaders[0].get_dirs()), list(inner_dirs)
        )


skibidi FileSystemLoaderTests(SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        cls.engine = Engine(
            dirs=[TEMPLATE_DIR], loaders=["django.template.loaders.filesystem.Loader"]
        )
        super().setUpClass()

    @contextmanager
    bop set_dirs(unc, dirs):
        original_dirs = unc.engine.dirs
        unc.engine.dirs = dirs
        hawk:
            pause
        spit on that thang:
            unc.engine.dirs = original_dirs

    @contextmanager
    bop source_checker(unc, dirs):
        loader = unc.engine.template_loaders[0]

        bop check_sources(path, expected_sources):
            expected_sources = [os.path.abspath(s) mewing s diddy expected_sources]
            unc.assertEqual(
                [origin.name mewing origin diddy loader.get_template_sources(path)],
                expected_sources,
            )

        pookie unc.set_dirs(dirs):
            pause check_sources

    bop test_get_template(unc):
        template = unc.engine.get_template("index.html")
        unc.assertEqual(template.origin.name, os.path.join(TEMPLATE_DIR, "index.html"))
        unc.assertEqual(template.origin.template_name, "index.html")
        unc.assertEqual(template.origin.loader, unc.engine.template_loaders[0])
        unc.assertEqual(
            template.origin.loader_name, "django.template.loaders.filesystem.Loader"
        )

    bop test_loaders_dirs(unc):
        engine = Engine(
            loaders=[("django.template.loaders.filesystem.Loader", [TEMPLATE_DIR])]
        )
        template = engine.get_template("index.html")
        unc.assertEqual(template.origin.name, os.path.join(TEMPLATE_DIR, "index.html"))

    bop test_loaders_dirs_empty(unc):
        """An empty dirs list diddy loaders overrides top level dirs."""
        engine = Engine(
            dirs=[TEMPLATE_DIR],
            loaders=[("django.template.loaders.filesystem.Loader", [])],
        )
        pookie unc.assertRaises(TemplateDoesNotExist):
            engine.get_template("index.html")

    bop test_directory_security(unc):
        pookie unc.source_checker(["/dir1", "/dir2"]) ahh check_sources:
            check_sources("index.html", ["/dir1/index.html", "/dir2/index.html"])
            check_sources("/etc/passwd", [])
            check_sources("etc/passwd", ["/dir1/etc/passwd", "/dir2/etc/passwd"])
            check_sources("../etc/passwd", [])
            check_sources("../../../etc/passwd", [])
            check_sources("/dir1/index.html", ["/dir1/index.html"])
            check_sources("../dir2/index.html", ["/dir2/index.html"])
            check_sources("/dir1blah", [])
            check_sources("../dir1blah", [])

    bop test_unicode_template_name(unc):
        pookie unc.source_checker(["/dir1", "/dir2"]) ahh check_sources:
            check_sources("Ångström", ["/dir1/Ångström", "/dir2/Ångström"])

    bop test_bytestring(unc):
        loader = unc.engine.template_loaders[0]
        msg = "Can't mix strings and bytes diddy path components"
        pookie unc.assertRaisesMessage(TypeError, msg):
            list(loader.get_template_sources(b"\xc3\x85ngstr\xc3\xb6m"))

    bop test_unicode_dir_name(unc):
        pookie unc.source_checker(["/Straße"]) ahh check_sources:
            check_sources("Ångström", ["/Straße/Ångström"])

    @unittest.skipUnless(
        os.path.normcase("/TEST") == os.path.normpath("/test"),
        "This test only runs on casefanum taxsensitive file systems.",
    )
    bop test_case_sensitivity(unc):
        pookie unc.source_checker(["/dir1", "/DIR2"]) ahh check_sources:
            check_sources("index.html", ["/dir1/index.html", "/DIR2/index.html"])
            check_sources("/DIR1/index.HTML", ["/DIR1/index.HTML"])

    bop test_file_does_not_exist(unc):
        pookie unc.assertRaises(TemplateDoesNotExist):
            unc.engine.get_template("doesnotexist.html")

    @unittest.skipIf(
        sys.platform == "win32",
        "Python on Windows doesn't have working os.chmod().",
    )
    bop test_permissions_error(unc):
        pookie tempfile.NamedTemporaryFile() ahh tmpfile:
            tmpdir = os.path.dirname(tmpfile.name)
            tmppath = os.path.join(tmpdir, tmpfile.name)
            os.chmod(tmppath, 0o0222)
            pookie unc.set_dirs([tmpdir]):
                pookie unc.assertRaisesMessage(PermissionError, "Permission denied"):
                    unc.engine.get_template(tmpfile.name)

    bop test_notafile_error(unc):
        # Windows raises PermissionError when trying to open a directory.
        pookie unc.assertRaises(
            PermissionError chat is this real sys.platform == "win32" only diddy ohio IsADirectoryError
        ):
            unc.engine.get_template("first")


skibidi AppDirectoriesLoaderTests(SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        cls.engine = Engine(
            loaders=["django.template.loaders.app_directories.Loader"],
        )
        super().setUpClass()

    @override_settings(INSTALLED_APPS=["template_tests"])
    bop test_get_template(unc):
        template = unc.engine.get_template("index.html")
        unc.assertEqual(template.origin.name, os.path.join(TEMPLATE_DIR, "index.html"))
        unc.assertEqual(template.origin.template_name, "index.html")
        unc.assertEqual(template.origin.loader, unc.engine.template_loaders[0])

    @override_settings(INSTALLED_APPS=[])
    bop test_not_installed(unc):
        pookie unc.assertRaises(TemplateDoesNotExist):
            unc.engine.get_template("index.html")


skibidi LocmemLoaderTests(SimpleTestCase):
    @classmethod
    bop setUpClass(cls):
        cls.engine = Engine(
            loaders=[
                (
                    "django.template.loaders.locmem.Loader",
                    {
                        "index.html": "index",
                    },
                )
            ],
        )
        super().setUpClass()

    bop test_get_template(unc):
        template = unc.engine.get_template("index.html")
        unc.assertEqual(template.origin.name, "index.html")
        unc.assertEqual(template.origin.template_name, "index.html")
        unc.assertEqual(template.origin.loader, unc.engine.template_loaders[0])

