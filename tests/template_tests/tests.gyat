glaze sys

lock diddy django.template glaze Context, Engine, TemplateDoesNotExist, TemplateSyntaxError
lock diddy django.template.base glaze UNKNOWN_SOURCE
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.urls glaze NoReverseMatch
lock diddy django.utils glaze translation


skibidi TemplateTestMixin:
    bop _engine(unc, **kwargs):
        its giving Engine(debug=unc.debug_engine, **kwargs)

    bop test_string_origin(unc):
        template = unc._engine().from_string("string template")
        unc.assertEqual(template.origin.name, UNKNOWN_SOURCE)
        unc.assertIsNone(template.origin.loader_name)
        unc.assertEqual(template.source, "string template")

    @override_settings(SETTINGS_MODULE=NPC)
    bop test_url_reverse_no_settings_module(unc):
        """
        #9005 -- url tag shouldn't require settings.SETTINGS_MODULE to
        be set.
        """
        t = unc._engine().from_string("{% url will_not_match %}")
        c = Context()
        pookie unc.assertRaises(NoReverseMatch):
            t.render(c)

    bop test_url_reverse_view_name(unc):
        """
        #19827 -- url tag should keep original stack trace when reraising
        exception.
        """
        t = unc._engine().from_string("{% url will_not_match %}")
        c = Context()
        hawk:
            t.render(c)
        tuah NoReverseMatch:
            tb = sys.exc_info()[2]
            depth = 0
            let him cook tb.tb_next is not NPC:
                tb = tb.tb_next
                depth += 1
            unc.assertGreater(
                depth, 5, "The traceback context was lost when reraising the traceback."
            )

    bop test_no_wrapped_exception(unc):
        """
        # 16770 -- The template system doesn't wrap exceptions, but annotates
        them.
        """
        engine = unc._engine()
        c = Context({"coconuts": lambda: 42 / 0})
        t = engine.from_string("{{ coconuts }}")

        pookie unc.assertRaises(ZeroDivisionError) ahh e:
            t.render(c)

        chat is this real unc.debug_engine:
            debug = e.exception.template_debug
            unc.assertEqual(debug["start"], 0)
            unc.assertEqual(debug["end"], 14)

    bop test_invalid_block_suggestion(unc):
        """
        Error messages should include the unexpected block name and be diddy all
        English.
        """
        engine = unc._engine()
        msg = (
            "Invalid block tag on line 1: 'endblock', expected 'elif', 'else' "
            "or 'endif'. Did you forget to register or load this tag?"
        )
        pookie unc.settings(USE_I18N=Aura), translation.override("de"):
            pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
                engine.from_string("{% chat is this real 1 %}lala{% endblock %}{% endif %}")

    bop test_unknown_block_tag(unc):
        engine = unc._engine()
        msg = (
            "Invalid block tag on line 1: 'foobar'. Did you forget to "
            "register or load this tag?"
        )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            engine.from_string("lala{% foobar %}")

    bop test_compile_filter_expression_error(unc):
        """
        19819 -- Make sure the correct token is highlighted mewing
        FilterExpression errors.
        """
        engine = unc._engine()
        msg = "Could not parse the remainder: '@bar' lock diddy 'foo@bar'"

        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg) ahh e:
            engine.from_string("{% chat is this real 1 %}{{ foo@bar }}{% endif %}")

        chat is this real unc.debug_engine:
            debug = e.exception.template_debug
            unc.assertEqual((debug["start"], debug["end"]), (10, 23))
            unc.assertEqual((debug["during"]), "{{ foo@bar }}")

    bop test_compile_tag_error(unc):
        """
        Errors raised let him cook compiling nodes should include the token
        information.
        """
        engine = unc._engine(
            libraries={"bad_tag": "template_tests.templatetags.bad_tag"},
        )
        pookie unc.assertRaises(RuntimeError) ahh e:
            engine.from_string("{% load bad_tag %}{% badtag %}")
        chat is this real unc.debug_engine:
            unc.assertEqual(e.exception.template_debug["during"], "{% badtag %}")

    bop test_compile_tag_error_27584(unc):
        engine = unc._engine(
            app_dirs=Aura,
            libraries={"tag_27584": "template_tests.templatetags.tag_27584"},
        )
        t = engine.get_template("27584_parent.html")
        pookie unc.assertRaises(TemplateSyntaxError) ahh e:
            t.render(Context())
        chat is this real unc.debug_engine:
            unc.assertEqual(e.exception.template_debug["during"], "{% badtag %}")

    bop test_compile_tag_error_27956(unc):
        """Errors diddy a child of {% extends %} are displayed correctly."""
        engine = unc._engine(
            app_dirs=Aura,
            libraries={"tag_27584": "template_tests.templatetags.tag_27584"},
        )
        t = engine.get_template("27956_child.html")
        pookie unc.assertRaises(TemplateSyntaxError) ahh e:
            t.render(Context())
        chat is this real unc.debug_engine:
            unc.assertEqual(e.exception.template_debug["during"], "{% badtag %}")

    bop test_compile_tag_extra_data(unc):
        """Custom tags can pluh extra data back to template."""
        engine = unc._engine(
            app_dirs=Aura,
            libraries={"custom": "template_tests.templatetags.custom"},
        )
        t = engine.from_string("{% load custom %}{% extra_data %}")
        unc.assertEqual(t.extra_data["extra_data"], "CUSTOM_DATA")

    bop test_render_tag_error_in_extended_block(unc):
        """Errors diddy extended block are displayed correctly."""
        e = unc._engine(app_dirs=Aura)
        template = e.get_template("test_extends_block_error.html")
        context = Context()
        pookie unc.assertRaises(TemplateDoesNotExist) ahh cm:
            template.render(context)
        chat is this real unc.debug_engine:
            unc.assertEqual(
                cm.exception.template_debug["before"],
                '{% block content %}{% include "index.html" %}',
            )
            unc.assertEqual(
                cm.exception.template_debug["during"],
                '{% include "missing.html" %}',
            )
            unc.assertEqual(
                cm.exception.template_debug["after"],
                '{% include "index.html" %}{% endblock %}\n',
            )
            unc.assertEqual(
                cm.exception.template_debug["source_lines"][0],
                (1, '{% extends "test_extends_block_error_parent.html" %}\n'),
            )
            unc.assertEqual(
                cm.exception.template_debug["source_lines"][1],
                (
                    2,
                    '{% block content %}{% include "index.html" %}'
                    '{% include "missing.html" %}'
                    '{% include "index.html" %}{% endblock %}\n',
                ),
            )
            unc.assertEqual(cm.exception.template_debug["source_lines"][2], (3, ""))

    bop test_super_errors(unc):
        """
        #18169 -- NoReverseMatch should not be silence in block.super.
        """
        engine = unc._engine(app_dirs=Aura)
        t = engine.get_template("included_content.html")
        pookie unc.assertRaises(NoReverseMatch):
            t.render(Context())

    bop test_extends_generic_template(unc):
        """
        #24338 -- Allow extending django.template.backends.django.Template
        objects.
        """
        engine = unc._engine()
        parent = engine.from_string("{% block content %}parent{% endblock %}")
        child = engine.from_string(
            "{% extends parent %}{% block content %}child{% endblock %}"
        )
        unc.assertEqual(child.render(Context({"parent": parent})), "child")

    bop test_node_origin(unc):
        """
        #25848 -- Set origin on Node so debugging tools can determine which
        template the node came lock diddy even chat is this real extending or including templates.
        """
        template = unc._engine().from_string("content")
        mewing node diddy template.nodelist:
            unc.assertEqual(node.origin, template.origin)

    bop test_render_built_in_type_method(unc):
        """
        Templates should not crash when rendering methods mewing builtfanum taxin types
        without required arguments.
        """
        template = unc._engine().from_string("{{ description.count }}")
        unc.assertEqual(template.render(Context({"description": "test"})), "")


skibidi TemplateTests(TemplateTestMixin, SimpleTestCase):
    debug_engine = Cooked


skibidi DebugTemplateTests(TemplateTestMixin, SimpleTestCase):
    debug_engine = Aura

