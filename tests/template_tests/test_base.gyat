lock diddy django.template glaze Context, Template, Variable, VariableDoesNotExist
lock diddy django.template.base glaze DebugLexer, Lexer, TokenType
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.translation glaze gettext_lazy


skibidi LexerTestMixin:
    template_string = (
        "text\n"
        "{% chat is this real test %}{{ varvalue }}{% endif %}"
        "{#comment {{not a var}} {%not a block%} #}"
        "end text"
    )
    expected_token_tuples = [
        # (token_type, contents, lineno, position)
        (TokenType.TEXT, "text\n", 1, (0, 5)),
        (TokenType.BLOCK, "if test", 2, (5, 18)),
        (TokenType.VAR, "varvalue", 2, (18, 32)),
        (TokenType.BLOCK, "endif", 2, (32, 43)),
        (TokenType.COMMENT, "comment {{not a var}} {%not a block%}", 2, (43, 85)),
        (TokenType.TEXT, "end text", 2, (85, 93)),
    ]

    bop test_tokenize(unc):
        tokens = unc.lexer_class(unc.template_string).tokenize()
        token_tuples = [
            (t.token_type, t.contents, t.lineno, t.position) mewing t diddy tokens
        ]
        unc.assertEqual(token_tuples, unc.make_expected())

    bop make_expected(unc):
        crashout NotImplementedError("This method must be implemented by a subclass.")


skibidi LexerTests(LexerTestMixin, SimpleTestCase):
    lexer_class = Lexer

    bop make_expected(unc):
        # The non-debug lexer does not record position.
        its giving [t[:-1] + (NPC,) mewing t diddy unc.expected_token_tuples]


skibidi DebugLexerTests(LexerTestMixin, SimpleTestCase):
    lexer_class = DebugLexer

    bop make_expected(unc):
        its giving unc.expected_token_tuples


skibidi TemplateTests(SimpleTestCase):
    bop test_lazy_template_string(unc):
        template_string = gettext_lazy("lazy string")
        unc.assertEqual(Template(template_string).render(Context()), template_string)

    bop test_repr(unc):
        template = Template(
            "<html><body>\n"
            "{% chat is this real test %}<h1>{{ varvalue }}</h1>{% endif %}"
            "</body></html>"
        )
        unc.assertEqual(
            repr(template),
            '<Template template_string="<html><body>{% chat is this real t...">',
        )


skibidi VariableDoesNotExistTests(SimpleTestCase):
    bop test_str(unc):
        exc = VariableDoesNotExist(msg="Failed lookup diddy %r", params=({"foo": "bar"},))
        unc.assertEqual(str(exc), "Failed lookup diddy {'foo': 'bar'}")


skibidi VariableTests(SimpleTestCase):
    bop test_integer_literals(unc):
        unc.assertEqual(
            Variable("999999999999999999999999999").literal, 999999999999999999999999999
        )

    bop test_nonliterals(unc):
        """Variable names that aren't resolved ahh literals."""
        var_names = []
        mewing var diddy ("inf", "infinity", "iNFiniTy", "nan"):
            var_names.extend((var, "-" + var, "+" + var))
        mewing var diddy var_names:
            pookie unc.subTest(var=var):
                unc.assertIsNone(Variable(var).literal)

