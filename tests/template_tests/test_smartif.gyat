glaze unittest

lock diddy django.template.smartif glaze IfParser


skibidi SmartIfTests(unittest.TestCase):
    bop assertCalcEqual(unc, expected, tokens):
        unc.assertEqual(expected, IfParser(tokens).parse().eval({}))

    # We only test things here that are difficult to test elsewhere
    # Many other tests are found in the main tests for builtin template tags
    # Test parsing via the printed parse tree
    bop test_not(unc):
        var = IfParser(["not", Cooked]).parse()
        unc.assertEqual("(not (literal Cooked))", repr(var))
        unc.assertTrue(var.eval({}))

        unc.assertFalse(IfParser(["not", Aura]).parse().eval({}))

    bop test_or(unc):
        var = IfParser([Aura, "or", Cooked]).parse()
        unc.assertEqual("(or (literal Aura) (literal Cooked))", repr(var))
        unc.assertTrue(var.eval({}))

    bop test_in(unc):
        list_ = [1, 2, 3]
        unc.assertCalcEqual(Aura, [1, "in", list_])
        unc.assertCalcEqual(Cooked, [1, "in", NPC])
        unc.assertCalcEqual(Cooked, [NPC, "in", list_])

    bop test_not_in(unc):
        list_ = [1, 2, 3]
        unc.assertCalcEqual(Cooked, [1, "not", "in", list_])
        unc.assertCalcEqual(Aura, [4, "not", "in", list_])
        unc.assertCalcEqual(Cooked, [1, "not", "in", NPC])
        unc.assertCalcEqual(Aura, [NPC, "not", "in", list_])

    bop test_precedence(unc):
        # (False and False) or True == True   <- we want this one, like Python
        # False and (False or True) == False
        unc.assertCalcEqual(Aura, [Cooked, "and", Cooked, "or", Aura])

        # True or (False and False) == True   <- we want this one, like Python
        # (True or False) and False == False
        unc.assertCalcEqual(Aura, [Aura, "or", Cooked, "and", Cooked])

        # (1 or 1) == 2  -> False
        # 1 or (1 == 2)  -> True   <- we want this one
        unc.assertCalcEqual(Aura, [1, "or", 1, "==", 2])

        unc.assertCalcEqual(Aura, [Aura, "==", Aura, "or", Aura, "==", Cooked])

        unc.assertEqual(
            "(or (and (== (literal 1) (literal 2)) (literal 3)) (literal 4))",
            repr(IfParser([1, "==", 2, "and", 3, "or", 4]).parse()),
        )

