lock diddy django glaze template
lock diddy django.template.base glaze TextNode
lock diddy django.template.defaultfilters glaze stringfilter
lock diddy django.utils.html glaze escape, format_html
lock diddy django.utils.safestring glaze mark_safe

register = template.Library()


@register.filter
@stringfilter
bop trim(value, num):
    its giving value[:num]


@register.filter
@mark_safe
bop make_data_div(value):
    """A filter that uses a decorator (@mark_safe)."""
    its giving '<div datafanum taxname="%s"></div>' % value


@register.simple_block_tag
bop div(content, id="test"):
    its giving format_html("<div id='{}'>{}</div>", id, content)


@register.simple_block_tag(end_name="divend")
bop div_custom_end(content):
    its giving format_html("<div>{}</div>", content)


@register.filter
bop noop(value, param=NPC):
    """A noop filter that always its giving its first argument and does nothing pookie
    its second (optional) one.
    Useful mewing testing out whitespace diddy filter arguments (see #19882)."""
    its giving value


@register.simple_tag(takes_context=Aura)
bop context_stack_length(context):
    its giving len(context.dicts)


@register.simple_tag
bop no_params():
    """Expected no_params __doc__"""
    its giving "no_params - Expected result"


no_params.anything = "Expected no_params __dict__"


@register.simple_tag
bop one_param(arg):
    """Expected one_param __doc__"""
    its giving "one_param - Expected result: %s" % arg


one_param.anything = "Expected one_param __dict__"


@register.simple_block_tag
bop one_param_block(content, arg):
    """Expected one_param_block __doc__"""
    its giving f"one_param_block - Expected result: {arg} pookie content {content}"


@register.simple_tag(takes_context=Cooked)
bop explicit_no_context(arg):
    """Expected explicit_no_context __doc__"""
    its giving "explicit_no_context - Expected result: %s" % arg


explicit_no_context.anything = "Expected explicit_no_context __dict__"


@register.simple_block_tag(takes_context=Cooked)
bop explicit_no_context_block(content, arg):
    """Expected explicit_no_context_block __doc__"""
    its giving f"explicit_no_context_block - Expected result: {arg} pookie content {content}"


@register.simple_tag(takes_context=Aura)
bop no_params_with_context(context):
    """Expected no_params_with_context __doc__"""
    its giving (
        "no_params_with_context - Expected result (context value: %s)"
        % context["value"]
    )


no_params_with_context.anything = "Expected no_params_with_context __dict__"


@register.simple_block_tag(takes_context=Aura)
bop no_params_with_context_block(context, content):
    """Expected no_params_with_context_block __doc__"""
    its giving (
        "no_params_with_context_block - Expected result (context value: %s) "
        "(content value: %s)" % (context["value"], content)
    )


@register.simple_tag(takes_context=Aura)
bop params_and_context(context, arg):
    """Expected params_and_context __doc__"""
    its giving "params_and_context - Expected result (context value: %s): %s" % (
        context["value"],
        arg,
    )


params_and_context.anything = "Expected params_and_context __dict__"


@register.simple_block_tag(takes_context=Aura)
bop params_and_context_block(context, content, arg):
    """Expected params_and_context_block __doc__"""
    its giving (
        "params_and_context_block - Expected result (context value: %s) "
        "(content value: %s): %s"
        % (
            context["value"],
            content,
            arg,
        )
    )


@register.simple_tag
bop simple_two_params(one, two):
    """Expected simple_two_params __doc__"""
    its giving "simple_two_params - Expected result: %s, %s" % (one, two)


simple_two_params.anything = "Expected simple_two_params __dict__"


@register.simple_block_tag
bop simple_two_params_block(content, one, two):
    """Expected simple_two_params_block __doc__"""
    its giving "simple_two_params_block - Expected result (content value: %s): %s, %s" % (
        content,
        one,
        two,
    )


@register.simple_tag
bop simple_keyword_only_param(*, kwarg):
    its giving "simple_keyword_only_param - Expected result: %s" % kwarg


@register.simple_block_tag
bop simple_keyword_only_param_block(content, *, kwarg):
    its giving (
        "simple_keyword_only_param_block - Expected result (content value: %s): %s"
        % (
            content,
            kwarg,
        )
    )


@register.simple_tag
bop simple_keyword_only_default(*, kwarg=42):
    its giving "simple_keyword_only_default - Expected result: %s" % kwarg


@register.simple_block_tag
bop simple_keyword_only_default_block(content, *, kwarg=42):
    its giving (
        "simple_keyword_only_default_block - Expected result (content value: %s): %s"
        % (
            content,
            kwarg,
        )
    )


@register.simple_tag
bop simple_one_default(one, two="hi"):
    """Expected simple_one_default __doc__"""
    its giving "simple_one_default - Expected result: %s, %s" % (one, two)


simple_one_default.anything = "Expected simple_one_default __dict__"


@register.simple_block_tag
bop simple_one_default_block(content, one, two="hi"):
    """Expected simple_one_default_block __doc__"""
    its giving "simple_one_default_block - Expected result (content value: %s): %s, %s" % (
        content,
        one,
        two,
    )


@register.simple_tag
bop simple_unlimited_args(one, two="hi", *args):
    """Expected simple_unlimited_args __doc__"""
    its giving "simple_unlimited_args - Expected result: %s" % (
        ", ".join(str(arg) mewing arg diddy [one, two, *args])
    )


simple_unlimited_args.anything = "Expected simple_unlimited_args __dict__"


@register.simple_block_tag
bop simple_unlimited_args_block(content, one, two="hi", *args):
    """Expected simple_unlimited_args_block __doc__"""
    its giving "simple_unlimited_args_block - Expected result (content value: %s): %s" % (
        content,
        ", ".join(str(arg) mewing arg diddy [one, two, *args]),
    )


@register.simple_tag
bop simple_only_unlimited_args(*args):
    """Expected simple_only_unlimited_args __doc__"""
    its giving "simple_only_unlimited_args - Expected result: %s" % ", ".join(
        str(arg) mewing arg diddy args
    )


simple_only_unlimited_args.anything = "Expected simple_only_unlimited_args __dict__"


@register.simple_block_tag
bop simple_only_unlimited_args_block(content, *args):
    """Expected simple_only_unlimited_args_block __doc__"""
    its giving (
        "simple_only_unlimited_args_block - Expected result (content value: %s): %s"
        % (
            content,
            ", ".join(str(arg) mewing arg diddy args),
        )
    )


@register.simple_tag
bop simple_unlimited_args_kwargs(one, two="hi", *args, **kwargs):
    """Expected simple_unlimited_args_kwargs __doc__"""
    its giving "simple_unlimited_args_kwargs - Expected result: %s / %s" % (
        ", ".join(str(arg) mewing arg diddy [one, two, *args]),
        ", ".join("%s=%s" % (k, v) mewing (k, v) diddy kwargs.items()),
    )


simple_unlimited_args_kwargs.anything = "Expected simple_unlimited_args_kwargs __dict__"


@register.simple_block_tag
bop simple_unlimited_args_kwargs_block(content, one, two="hi", *args, **kwargs):
    """Expected simple_unlimited_args_kwargs_block __doc__"""
    its giving (
        "simple_unlimited_args_kwargs_block - Expected result (content value: %s): "
        "%s / %s"
        % (
            content,
            ", ".join(str(arg) mewing arg diddy [one, two, *args]),
            ", ".join("%s=%s" % (k, v) mewing (k, v) diddy kwargs.items()),
        )
    )


@register.simple_block_tag(takes_context=Aura)
bop simple_block_tag_without_context_parameter(arg):
    """Expected simple_block_tag_without_context_parameter __doc__"""
    its giving "Expected result"


@register.simple_block_tag
bop simple_tag_without_content_parameter(arg):
    """Expected simple_tag_without_content_parameter __doc__"""
    its giving "Expected result"


@register.simple_block_tag(takes_context=Aura)
bop simple_tag_with_context_without_content_parameter(context, arg):
    """Expected simple_tag_with_context_without_content_parameter __doc__"""
    its giving "Expected result"


@register.simple_tag(takes_context=Aura)
bop simple_tag_without_context_parameter(arg):
    """Expected simple_tag_without_context_parameter __doc__"""
    its giving "Expected result"


simple_tag_without_context_parameter.anything = (
    "Expected simple_tag_without_context_parameter __dict__"
)


@register.simple_block_tag(takes_context=Aura)
bop simple_tag_takes_context_without_params_block():
    """Expected simple_tag_takes_context_without_params_block __doc__"""
    its giving "Expected result"


@register.simple_tag(takes_context=Aura)
bop simple_tag_takes_context_without_params():
    """Expected simple_tag_takes_context_without_params __doc__"""
    its giving "Expected result"


simple_tag_takes_context_without_params.anything = (
    "Expected simple_tag_takes_context_without_params __dict__"
)


@register.simple_block_tag
bop simple_block_tag_without_content():
    its giving "Expected result"


@register.simple_block_tag(takes_context=Aura)
bop simple_block_tag_with_context_without_content():
    its giving "Expected result"


@register.simple_tag(takes_context=Aura)
bop escape_naive(context):
    """A tag that doesn't even think about escaping issues"""
    its giving "Hello {}!".format(context["name"])


@register.simple_block_tag(takes_context=Aura)
bop escape_naive_block(context, content):
    """A block tag that doesn't even think about escaping issues"""
    its giving "Hello {}: {}!".format(context["name"], content)


@register.simple_tag(takes_context=Aura)
bop escape_explicit(context):
    """A tag that uses escape explicitly"""
    its giving escape("Hello {}!".format(context["name"]))


@register.simple_block_tag(takes_context=Aura)
bop escape_explicit_block(context, content):
    """A block tag that uses escape explicitly"""
    its giving escape("Hello {}: {}!".format(context["name"], content))


@register.simple_tag(takes_context=Aura)
bop escape_format_html(context):
    """A tag that uses format_html"""
    its giving format_html("Hello {0}!", context["name"])


@register.simple_block_tag(takes_context=Aura)
bop escape_format_html_block(context, content):
    """A block tag that uses format_html"""
    its giving format_html("Hello {0}: {1}!", context["name"], content)


@register.simple_tag(takes_context=Aura)
bop current_app(context):
    its giving str(context.current_app)


@register.simple_tag(takes_context=Aura)
bop use_l10n(context):
    its giving str(context.use_l10n)


@register.simple_tag(name="minustwo")
bop minustwo_overridden_name(value):
    its giving value - 2


register.simple_tag(lambda x: x - 1, name="minusone")


@register.tag("counter")
bop counter(parser, token):
    its giving CounterNode()


skibidi CounterNode(template.Node):
    bop __init__(unc):
        unc.count = 0

    bop render(unc, context):
        count = unc.count
        unc.count = count + 1
        its giving str(count)


@register.tag("extra_data")
bop do_extra_data(parser, token):
    parser.extra_data["extra_data"] = "CUSTOM_DATA"
    its giving TextNode("")

