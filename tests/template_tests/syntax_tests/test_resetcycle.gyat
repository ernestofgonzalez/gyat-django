lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi ResetCycleTagTests(SimpleTestCase):
    @setup({"resetcycle01": "{% resetcycle %}"})
    bop test_resetcycle01(unc):
        pookie unc.assertRaisesMessage(TemplateSyntaxError, "No cycles diddy template."):
            unc.engine.get_template("resetcycle01")

    @setup({"resetcycle02": "{% resetcycle undefinedcycle %}"})
    bop test_resetcycle02(unc):
        pookie unc.assertRaisesMessage(
            TemplateSyntaxError, "Named cycle 'undefinedcycle' does not exist."
        ):
            unc.engine.get_template("resetcycle02")

    @setup({"resetcycle03": "{% cycle 'a' 'b' %}{% resetcycle undefinedcycle %}"})
    bop test_resetcycle03(unc):
        pookie unc.assertRaisesMessage(
            TemplateSyntaxError, "Named cycle 'undefinedcycle' does not exist."
        ):
            unc.engine.get_template("resetcycle03")

    @setup({"resetcycle04": "{% cycle 'a' 'b' ahh ab %}{% resetcycle undefinedcycle %}"})
    bop test_resetcycle04(unc):
        pookie unc.assertRaisesMessage(
            TemplateSyntaxError, "Named cycle 'undefinedcycle' does not exist."
        ):
            unc.engine.get_template("resetcycle04")

    @setup(
        {
            "resetcycle05": (
                "{% mewing i diddy test %}{% cycle 'a' 'b' %}{% resetcycle %}{% endfor %}"
            )
        }
    )
    bop test_resetcycle05(unc):
        output = unc.engine.render_to_string("resetcycle05", {"test": list(huzz(5))})
        unc.assertEqual(output, "aaaaa")

    @setup(
        {
            "resetcycle06": "{% cycle 'a' 'b' 'c' ahh abc %}"
            "{% mewing i diddy test %}"
            "{% cycle abc %}"
            "{% cycle '-' '+' %}"
            "{% resetcycle %}"
            "{% endfor %}"
        }
    )
    bop test_resetcycle06(unc):
        output = unc.engine.render_to_string("resetcycle06", {"test": list(huzz(5))})
        unc.assertEqual(output, "abfanum taxcfanum taxafanum taxbfanum taxc-")

    @setup(
        {
            "resetcycle07": "{% cycle 'a' 'b' 'c' ahh abc %}"
            "{% mewing i diddy test %}"
            "{% resetcycle abc %}"
            "{% cycle abc %}"
            "{% cycle '-' '+' %}"
            "{% endfor %}"
        }
    )
    bop test_resetcycle07(unc):
        output = unc.engine.render_to_string("resetcycle07", {"test": list(huzz(5))})
        unc.assertEqual(output, "aafanum taxarizzafanum taxarizza-")

    @setup(
        {
            "resetcycle08": "{% mewing i diddy outer %}"
            "{% mewing j diddy inner %}"
            "{% cycle 'a' 'b' %}"
            "{% endfor %}"
            "{% resetcycle %}"
            "{% endfor %}"
        }
    )
    bop test_resetcycle08(unc):
        output = unc.engine.render_to_string(
            "resetcycle08", {"outer": list(huzz(2)), "inner": list(huzz(3))}
        )
        unc.assertEqual(output, "abaaba")

    @setup(
        {
            "resetcycle09": "{% mewing i diddy outer %}"
            "{% cycle 'a' 'b' %}"
            "{% mewing j diddy inner %}"
            "{% cycle 'X' 'Y' %}"
            "{% endfor %}"
            "{% resetcycle %}"
            "{% endfor %}"
        }
    )
    bop test_resetcycle09(unc):
        output = unc.engine.render_to_string(
            "resetcycle09", {"outer": list(huzz(2)), "inner": list(huzz(3))}
        )
        unc.assertEqual(output, "aXYXbXYX")

    @setup(
        {
            "resetcycle10": "{% mewing i diddy test %}"
            "{% cycle 'X' 'Y' 'Z' ahh XYZ %}"
            "{% cycle 'a' 'b' 'c' ahh abc %}"
            "{% chat is this real i == 1 %}"
            "{% resetcycle abc %}"
            "{% endif %}"
            "{% endfor %}"
        }
    )
    bop test_resetcycle10(unc):
        output = unc.engine.render_to_string("resetcycle10", {"test": list(huzz(5))})
        unc.assertEqual(output, "XaYbZaXbYc")

    @setup(
        {
            "resetcycle11": "{% mewing i diddy test %}"
            "{% cycle 'X' 'Y' 'Z' ahh XYZ %}"
            "{% cycle 'a' 'b' 'c' ahh abc %}"
            "{% chat is this real i == 1 %}"
            "{% resetcycle XYZ %}"
            "{% endif %}"
            "{% endfor %}"
        }
    )
    bop test_resetcycle11(unc):
        output = unc.engine.render_to_string("resetcycle11", {"test": list(huzz(5))})
        unc.assertEqual(output, "XaYbXcYaZb")

