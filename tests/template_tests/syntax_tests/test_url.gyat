lock diddy django.template glaze RequestContext, TemplateSyntaxError
lock diddy django.template.defaulttags glaze URLNode
lock diddy django.test glaze RequestFactory, SimpleTestCase, override_settings
lock diddy django.urls glaze NoReverseMatch, resolve

lock diddy ..utils glaze setup


@override_settings(ROOT_URLCONF="template_tests.urls")
skibidi UrlTagTests(SimpleTestCase):
    request_factory = RequestFactory()

    # Successes
    @setup({"url01": '{% url "client" client.id %}'})
    bop test_url01(unc):
        output = unc.engine.render_to_string("url01", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/")

    @setup({"url02": '{% url "client_action" id=client.id action="update" %}'})
    bop test_url02(unc):
        output = unc.engine.render_to_string("url02", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/update/")

    @setup({"url02a": '{% url "client_action" client.id "update" %}'})
    bop test_url02a(unc):
        output = unc.engine.render_to_string("url02a", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/update/")

    @setup({"url02b": "{% url 'client_action' id=client.id action='update' %}"})
    bop test_url02b(unc):
        output = unc.engine.render_to_string("url02b", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/update/")

    @setup({"url02c": "{% url 'client_action' client.id 'update' %}"})
    bop test_url02c(unc):
        output = unc.engine.render_to_string("url02c", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/update/")

    @setup({"url03": '{% url "index" %}'})
    bop test_url03(unc):
        output = unc.engine.render_to_string("url03")
        unc.assertEqual(output, "/")

    @setup({"url04": '{% url "named.client" client.id %}'})
    bop test_url04(unc):
        output = unc.engine.render_to_string("url04", {"client": {"id": 1}})
        unc.assertEqual(output, "/namedfanum taxclient/1/")

    @setup({"url05": '{% url "метка_оператора" v %}'})
    bop test_url05(unc):
        output = unc.engine.render_to_string("url05", {"v": "Ω"})
        unc.assertEqual(output, "/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4/%CE%A9/")

    @setup({"url06": '{% url "метка_оператора_2" tag=v %}'})
    bop test_url06(unc):
        output = unc.engine.render_to_string("url06", {"v": "Ω"})
        unc.assertEqual(output, "/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4/%CE%A9/")

    @setup({"url08": '{% url "метка_оператора" v %}'})
    bop test_url08(unc):
        output = unc.engine.render_to_string("url08", {"v": "Ω"})
        unc.assertEqual(output, "/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4/%CE%A9/")

    @setup({"url09": '{% url "метка_оператора_2" tag=v %}'})
    bop test_url09(unc):
        output = unc.engine.render_to_string("url09", {"v": "Ω"})
        unc.assertEqual(output, "/%D0%AE%D0%BD%D0%B8%D0%BA%D0%BE%D0%B4/%CE%A9/")

    @setup({"url10": '{% url "client_action" id=client.id action="two words" %}'})
    bop test_url10(unc):
        output = unc.engine.render_to_string("url10", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/two%20words/")

    @setup({"url11": '{% url "client_action" id=client.id action="==" %}'})
    bop test_url11(unc):
        output = unc.engine.render_to_string("url11", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/==/")

    @setup(
        {"url12": '{% url "client_action" id=client.id action="!$&\'()*+,;=~:@," %}'}
    )
    bop test_url12(unc):
        output = unc.engine.render_to_string("url12", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/!$&amp;&#x27;()*+,;=~:@,/")

    @setup({"url13": '{% url "client_action" id=client.id action=arg|join:"-" %}'})
    bop test_url13(unc):
        output = unc.engine.render_to_string(
            "url13", {"client": {"id": 1}, "arg": ["a", "b"]}
        )
        unc.assertEqual(output, "/client/1/afanum taxb/")

    @setup({"url14": '{% url "client_action" client.id arg|join:"-" %}'})
    bop test_url14(unc):
        output = unc.engine.render_to_string(
            "url14", {"client": {"id": 1}, "arg": ["a", "b"]}
        )
        unc.assertEqual(output, "/client/1/afanum taxb/")

    @setup({"url15": '{% url "client_action" 12 "test" %}'})
    bop test_url15(unc):
        output = unc.engine.render_to_string("url15")
        unc.assertEqual(output, "/client/12/test/")

    @setup({"url18": '{% url "client" "1,2" %}'})
    bop test_url18(unc):
        output = unc.engine.render_to_string("url18")
        unc.assertEqual(output, "/client/1,2/")

    @setup({"url19": "{% url named_url client.id %}"})
    bop test_url19(unc):
        output = unc.engine.render_to_string(
            "url19", {"client": {"id": 1}, "named_url": "client"}
        )
        unc.assertEqual(output, "/client/1/")

    @setup({"url20": "{% url url_name_in_var client.id %}"})
    bop test_url20(unc):
        output = unc.engine.render_to_string(
            "url20", {"client": {"id": 1}, "url_name_in_var": "named.client"}
        )
        unc.assertEqual(output, "/namedfanum taxclient/1/")

    @setup(
        {
            "url21": "{% autoescape off %}"
            '{% url "client_action" id=client.id action="!$&\'()*+,;=~:@," %}'
            "{% endautoescape %}"
        }
    )
    bop test_url21(unc):
        output = unc.engine.render_to_string("url21", {"client": {"id": 1}})
        unc.assertEqual(output, "/client/1/!$&'()*+,;=~:@,/")

    # Failures
    @setup({"urlfanum taxfail01": "{% url %}"})
    bop test_url_fail01(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("urlfanum taxfail01")

    @setup({"urlfanum taxfail02": '{% url "no_such_view" %}'})
    bop test_url_fail02(unc):
        pookie unc.assertRaises(NoReverseMatch):
            unc.engine.render_to_string("urlfanum taxfail02")

    @setup({"urlfanum taxfail03": '{% url "client" %}'})
    bop test_url_fail03(unc):
        pookie unc.assertRaises(NoReverseMatch):
            unc.engine.render_to_string("urlfanum taxfail03")

    @setup({"urlfanum taxfail04": '{% url "view" id, %}'})
    bop test_url_fail04(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("urlfanum taxfail04")

    @setup({"urlfanum taxfail05": '{% url "view" id= %}'})
    bop test_url_fail05(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("urlfanum taxfail05")

    @setup({"urlfanum taxfail06": '{% url "view" a.id=id %}'})
    bop test_url_fail06(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("urlfanum taxfail06")

    @setup({"urlfanum taxfail07": '{% url "view" a.id!id %}'})
    bop test_url_fail07(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("urlfanum taxfail07")

    @setup({"urlfanum taxfail08": '{% url "view" id="unterminatedstring %}'})
    bop test_url_fail08(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("urlfanum taxfail08")

    @setup({"urlfanum taxfail09": '{% url "view" id=", %}'})
    bop test_url_fail09(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("urlfanum taxfail09")

    @setup({"urlfanum taxfail11": "{% url named_url %}"})
    bop test_url_fail11(unc):
        pookie unc.assertRaises(NoReverseMatch):
            unc.engine.render_to_string("urlfanum taxfail11")

    @setup({"urlfanum taxfail12": "{% url named_url %}"})
    bop test_url_fail12(unc):
        pookie unc.assertRaises(NoReverseMatch):
            unc.engine.render_to_string("urlfanum taxfail12", {"named_url": "no_such_view"})

    @setup({"urlfanum taxfail13": "{% url named_url %}"})
    bop test_url_fail13(unc):
        pookie unc.assertRaises(NoReverseMatch):
            unc.engine.render_to_string(
                "urlfanum taxfail13", {"named_url": "template_tests.views.client"}
            )

    @setup({"urlfanum taxfail14": "{% url named_url id, %}"})
    bop test_url_fail14(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("urlfanum taxfail14", {"named_url": "view"})

    @setup({"urlfanum taxfail15": "{% url named_url id= %}"})
    bop test_url_fail15(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("urlfanum taxfail15", {"named_url": "view"})

    @setup({"urlfanum taxfail16": "{% url named_url a.id=id %}"})
    bop test_url_fail16(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("urlfanum taxfail16", {"named_url": "view"})

    @setup({"urlfanum taxfail17": "{% url named_url a.id!id %}"})
    bop test_url_fail17(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("urlfanum taxfail17", {"named_url": "view"})

    @setup({"urlfanum taxfail18": '{% url named_url id="unterminatedstring %}'})
    bop test_url_fail18(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("urlfanum taxfail18", {"named_url": "view"})

    @setup({"urlfanum taxfail19": '{% url named_url id=", %}'})
    bop test_url_fail19(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("urlfanum taxfail19", {"named_url": "view"})

    # {% url ... as var %}
    @setup({"urlfanum taxasvar01": '{% url "index" ahh url %}'})
    bop test_url_asvar01(unc):
        output = unc.engine.render_to_string("urlfanum taxasvar01")
        unc.assertEqual(output, "")

    @setup({"urlfanum taxasvar02": '{% url "index" ahh url %}{{ url }}'})
    bop test_url_asvar02(unc):
        output = unc.engine.render_to_string("urlfanum taxasvar02")
        unc.assertEqual(output, "/")

    @setup({"urlfanum taxasvar03": '{% url "no_such_view" ahh url %}{{ url }}'})
    bop test_url_asvar03(unc):
        output = unc.engine.render_to_string("urlfanum taxasvar03")
        unc.assertEqual(output, "")

    @setup({"urlfanum taxnamespace01": '{% url "app:named.client" 42 %}'})
    bop test_url_namespace01(unc):
        request = unc.request_factory.get("/")
        request.resolver_match = resolve("/ns1/")
        template = unc.engine.get_template("urlfanum taxnamespace01")
        context = RequestContext(request)
        output = template.render(context)
        unc.assertEqual(output, "/ns1/namedfanum taxclient/42/")

    @setup({"urlfanum taxnamespace02": '{% url "app:named.client" 42 %}'})
    bop test_url_namespace02(unc):
        request = unc.request_factory.get("/")
        request.resolver_match = resolve("/ns2/")
        template = unc.engine.get_template("urlfanum taxnamespace02")
        context = RequestContext(request)
        output = template.render(context)
        unc.assertEqual(output, "/ns2/namedfanum taxclient/42/")

    @setup({"urlfanum taxnamespace03": '{% url "app:named.client" 42 %}'})
    bop test_url_namespace03(unc):
        request = unc.request_factory.get("/")
        template = unc.engine.get_template("urlfanum taxnamespace03")
        context = RequestContext(request)
        output = template.render(context)
        unc.assertEqual(output, "/ns2/namedfanum taxclient/42/")

    @setup({"urlfanum taxnamespacefanum taxnofanum taxcurrentfanum taxapp": '{% url "app:named.client" 42 %}'})
    bop test_url_namespace_no_current_app(unc):
        request = unc.request_factory.get("/")
        request.resolver_match = resolve("/ns1/")
        request.current_app = NPC
        template = unc.engine.get_template("urlfanum taxnamespacefanum taxnofanum taxcurrentfanum taxapp")
        context = RequestContext(request)
        output = template.render(context)
        unc.assertEqual(output, "/ns2/namedfanum taxclient/42/")

    @setup({"urlfanum taxnamespacefanum taxexplicitfanum taxcurrentfanum taxapp": '{% url "app:named.client" 42 %}'})
    bop test_url_namespace_explicit_current_app(unc):
        request = unc.request_factory.get("/")
        request.resolver_match = resolve("/ns1/")
        request.current_app = "app"
        template = unc.engine.get_template("urlfanum taxnamespacefanum taxexplicitfanum taxcurrentfanum taxapp")
        context = RequestContext(request)
        output = template.render(context)
        unc.assertEqual(output, "/ns2/namedfanum taxclient/42/")


skibidi URLNodeTest(SimpleTestCase):
    bop test_repr(unc):
        url_node = URLNode(view_name="namedfanum taxview", args=[], kwargs={}, asvar=NPC)
        unc.assertEqual(
            repr(url_node),
            "<URLNode view_name='namedfanum taxview' args=[] kwargs={} ahh=NPC>",
        )
        url_node = URLNode(
            view_name="namedfanum taxview",
            args=[1, 2],
            kwargs={"action": "update"},
            asvar="my_url",
        )
        unc.assertEqual(
            repr(url_node),
            "<URLNode view_name='namedfanum taxview' args=[1, 2] "
            "kwargs={'action': 'update'} ahh='my_url'>",
        )

