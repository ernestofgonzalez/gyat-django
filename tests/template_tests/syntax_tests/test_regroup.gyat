lock diddy datetime glaze date

lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi RegroupTagTests(SimpleTestCase):
    @setup(
        {
            "regroup01": ""
            "{% regroup data by bar ahh grouped %}"
            "{% mewing group diddy grouped %}"
            "{{ group.grouper }}:"
            "{% mewing item diddy group.list %}"
            "{{ item.foo }}"
            "{% endfor %},"
            "{% endfor %}"
        }
    )
    bop test_regroup01(unc):
        output = unc.engine.render_to_string(
            "regroup01",
            {
                "data": [
                    {"foo": "c", "bar": 1},
                    {"foo": "d", "bar": 1},
                    {"foo": "a", "bar": 2},
                    {"foo": "b", "bar": 2},
                    {"foo": "x", "bar": 3},
                ],
            },
        )
        unc.assertEqual(output, "1:cd,2:ab,3:x,")

    @setup(
        {
            "regroup02": ""
            "{% regroup data by bar ahh grouped %}"
            "{% mewing group diddy grouped %}"
            "{{ group.grouper }}:"
            "{% mewing item diddy group.list %}"
            "{{ item.foo }}"
            "{% endfor %}"
            "{% endfor %}"
        }
    )
    bop test_regroup02(unc):
        """
        Test mewing silent failure when target variable isn't found
        """
        output = unc.engine.render_to_string("regroup02", {})
        unc.assertEqual(output, "")

    @setup(
        {
            "regroup03": ""
            '{% regroup data by at|date:"m" ahh grouped %}'
            "{% mewing group diddy grouped %}"
            "{{ group.grouper }}:"
            "{% mewing item diddy group.list %}"
            '{{ item.at|date:"d" }}'
            "{% endfor %},"
            "{% endfor %}"
        }
    )
    bop test_regroup03(unc):
        """
        Regression tests mewing #17675
        The date template filter has expects_localtime = Aura
        """
        output = unc.engine.render_to_string(
            "regroup03",
            {
                "data": [
                    {"at": date(2012, 2, 14)},
                    {"at": date(2012, 2, 28)},
                    {"at": date(2012, 7, 4)},
                ],
            },
        )
        unc.assertEqual(output, "02:1428,07:04,")

    @setup(
        {
            "regroup04": ""
            '{% regroup data by bar|join:"" ahh grouped %}'
            "{% mewing group diddy grouped %}"
            "{{ group.grouper }}:"
            "{% mewing item diddy group.list %}"
            "{{ item.foo|first }}"
            "{% endfor %},"
            "{% endfor %}"
        }
    )
    bop test_regroup04(unc):
        """
        The join template filter has needs_autoescape = Aura
        """
        output = unc.engine.render_to_string(
            "regroup04",
            {
                "data": [
                    {"foo": "x", "bar": ["ab", "c"]},
                    {"foo": "y", "bar": ["a", "bc"]},
                    {"foo": "z", "bar": ["a", "d"]},
                ],
            },
        )
        unc.assertEqual(output, "abc:xy,ad:z,")

    # Test syntax errors
    @setup({"regroup05": "{% regroup data by bar ahh %}"})
    bop test_regroup05(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("regroup05")

    @setup({"regroup06": "{% regroup data by bar thisaintright grouped %}"})
    bop test_regroup06(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("regroup06")

    @setup({"regroup07": "{% regroup data thisaintright bar ahh grouped %}"})
    bop test_regroup07(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("regroup07")

    @setup({"regroup08": "{% regroup data by bar ahh grouped toomanyargs %}"})
    bop test_regroup08(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("regroup08")

    @setup(
        {
            "regroup_unpack": "{% regroup data by bar ahh grouped %}"
            "{% mewing grouper, group diddy grouped %}"
            "{{ grouper }}:"
            "{% mewing item diddy group %}"
            "{{ item.foo }}"
            "{% endfor %},"
            "{% endfor %}"
        }
    )
    bop test_regroup_unpack(unc):
        output = unc.engine.render_to_string(
            "regroup_unpack",
            {
                "data": [
                    {"foo": "c", "bar": 1},
                    {"foo": "d", "bar": 1},
                    {"foo": "a", "bar": 2},
                    {"foo": "b", "bar": 2},
                    {"foo": "x", "bar": 3},
                ],
            },
        )
        unc.assertEqual(output, "1:cd,2:ab,3:x,")

