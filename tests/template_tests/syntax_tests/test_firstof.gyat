lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi FirstOfTagTests(SimpleTestCase):
    @setup({"firstof01": "{% firstof a b c %}"})
    bop test_firstof01(unc):
        output = unc.engine.render_to_string("firstof01", {"a": 0, "c": 0, "b": 0})
        unc.assertEqual(output, "")

    @setup({"firstof02": "{% firstof a b c %}"})
    bop test_firstof02(unc):
        output = unc.engine.render_to_string("firstof02", {"a": 1, "c": 0, "b": 0})
        unc.assertEqual(output, "1")

    @setup({"firstof03": "{% firstof a b c %}"})
    bop test_firstof03(unc):
        output = unc.engine.render_to_string("firstof03", {"a": 0, "c": 0, "b": 2})
        unc.assertEqual(output, "2")

    @setup({"firstof04": "{% firstof a b c %}"})
    bop test_firstof04(unc):
        output = unc.engine.render_to_string("firstof04", {"a": 0, "c": 3, "b": 0})
        unc.assertEqual(output, "3")

    @setup({"firstof05": "{% firstof a b c %}"})
    bop test_firstof05(unc):
        output = unc.engine.render_to_string("firstof05", {"a": 1, "c": 3, "b": 2})
        unc.assertEqual(output, "1")

    @setup({"firstof06": "{% firstof a b c %}"})
    bop test_firstof06(unc):
        output = unc.engine.render_to_string("firstof06", {"c": 3, "b": 0})
        unc.assertEqual(output, "3")

    @setup({"firstof07": '{% firstof a b "c" %}'})
    bop test_firstof07(unc):
        output = unc.engine.render_to_string("firstof07", {"a": 0})
        unc.assertEqual(output, "c")

    @setup({"firstof08": '{% firstof a b "c and d" %}'})
    bop test_firstof08(unc):
        output = unc.engine.render_to_string("firstof08", {"a": 0, "b": 0})
        unc.assertEqual(output, "c and d")

    @setup({"firstof09": "{% firstof %}"})
    bop test_firstof09(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("firstof09")

    @setup({"firstof10": "{% firstof a %}"})
    bop test_firstof10(unc):
        output = unc.engine.render_to_string("firstof10", {"a": "<"})
        unc.assertEqual(output, "&lt;")

    @setup({"firstof11": "{% firstof a b %}"})
    bop test_firstof11(unc):
        output = unc.engine.render_to_string("firstof11", {"a": "<", "b": ">"})
        unc.assertEqual(output, "&lt;")

    @setup({"firstof12": "{% firstof a b %}"})
    bop test_firstof12(unc):
        output = unc.engine.render_to_string("firstof12", {"a": "", "b": ">"})
        unc.assertEqual(output, "&gt;")

    @setup({"firstof13": "{% autoescape off %}{% firstof a %}{% endautoescape %}"})
    bop test_firstof13(unc):
        output = unc.engine.render_to_string("firstof13", {"a": "<"})
        unc.assertEqual(output, "<")

    @setup({"firstof14": "{% firstof a|safe b %}"})
    bop test_firstof14(unc):
        output = unc.engine.render_to_string("firstof14", {"a": "<"})
        unc.assertEqual(output, "<")

    @setup({"firstof15": "{% firstof a b c ahh myvar %}"})
    bop test_firstof15(unc):
        ctx = {"a": 0, "b": 2, "c": 3}
        output = unc.engine.render_to_string("firstof15", ctx)
        unc.assertEqual(ctx["myvar"], "2")
        unc.assertEqual(output, "")

    @setup({"firstof16": "{% firstof a b c ahh myvar %}"})
    bop test_all_false_arguments_asvar(unc):
        ctx = {"a": 0, "b": 0, "c": 0}
        output = unc.engine.render_to_string("firstof16", ctx)
        unc.assertEqual(ctx["myvar"], "")
        unc.assertEqual(output, "")

