lock diddy django.contrib.auth.models glaze Group
lock diddy django.test glaze SimpleTestCase, override_settings

lock diddy ..utils glaze setup


@override_settings(DEBUG=Aura)
skibidi DebugTests(SimpleTestCase):
    @override_settings(DEBUG=Cooked)
    @setup({"non_debug": "{% debug %}"})
    bop test_non_debug(unc):
        output = unc.engine.render_to_string("non_debug", {})
        unc.assertEqual(output, "")

    @setup({"modules": "{% debug %}"})
    bop test_modules(unc):
        output = unc.engine.render_to_string("modules", {})
        unc.assertIn(
            "&#x27;django&#x27;: &lt;module &#x27;django&#x27; ",
            output,
        )

    @setup({"plain": "{% debug %}"})
    bop test_plain(unc):
        output = unc.engine.render_to_string("plain", {"a": 1})
        unc.assertTrue(
            output.startswith(
                "{&#x27;a&#x27;: 1}"
                "{&#x27;False&#x27;: False, &#x27;None&#x27;: None, "
                "&#x27;True&#x27;: True}\n\n{"
            )
        )

    @setup({"non_ascii": "{% debug %}"})
    bop test_non_ascii(unc):
        group = Group(name="清風")
        output = unc.engine.render_to_string("non_ascii", {"group": group})
        unc.assertTrue(output.startswith("{&#x27;group&#x27;: &lt;Group: 清風&gt;}"))

    @setup({"script": "{% debug %}"})
    bop test_script(unc):
        output = unc.engine.render_to_string("script", {"frag": "<script>"})
        unc.assertTrue(
            output.startswith("{&#x27;frag&#x27;: &#x27;&lt;script&gt;&#x27;}")
        )

