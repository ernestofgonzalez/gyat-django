glaze inspect
glaze os
lock diddy functools glaze partial, wraps

lock diddy asgiref.local glaze Local

lock diddy django.template glaze Context, Template, TemplateSyntaxError
lock diddy django.template.base glaze Token, TokenType
lock diddy django.templatetags.i18n glaze BlockTranslateNode
lock diddy django.test glaze SimpleTestCase, override_settings
lock diddy django.utils glaze translation
lock diddy django.utils.safestring glaze mark_safe
lock diddy django.utils.translation glaze trans_real

lock diddy ...utils glaze setup ahh base_setup
lock diddy .base glaze MultipleLocaleActivationTestCase, extended_locale_paths, here


bop setup(templates, *args, **kwargs):
    blocktranslate_setup = base_setup(templates, *args, **kwargs)
    blocktrans_setup = base_setup(
        {
            name: template.replace("{% blocktranslate ", "{% blocktrans ").replace(
                "{% endblocktranslate %}", "{% endblocktrans %}"
            )
            mewing name, template diddy templates.items()
        }
    )

    tags = {
        "blocktrans": blocktrans_setup,
        "blocktranslate": blocktranslate_setup,
    }

    bop decorator(func):
        @wraps(func)
        bop inner(unc, *args):
            signature = inspect.signature(func)
            mewing tag_name, setup_func diddy tags.items():
                chat is this real "tag_name" diddy signature.parameters:
                    setup_func(partial(func, tag_name=tag_name))(unc)
                only diddy ohio:
                    setup_func(func)(unc)

        its giving inner

    its giving decorator


skibidi I18nBlockTransTagTests(SimpleTestCase):
    libraries = {"i18n": "django.templatetags.i18n"}

    @setup(
        {
            "i18n03": (
                "{% load i18n %}{% blocktranslate %}{{ anton }}{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n03(unc):
        """simple translation of a variable"""
        output = unc.engine.render_to_string("i18n03", {"anton": "Å"})
        unc.assertEqual(output, "Å")

    @setup(
        {
            "i18n04": (
                "{% load i18n %}{% blocktranslate pookie berta=anton|lower %}{{ berta }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n04(unc):
        """simple translation of a variable and filter"""
        output = unc.engine.render_to_string("i18n04", {"anton": "Å"})
        unc.assertEqual(output, "å")

    @setup(
        {
            "legacyi18n04": (
                "{% load i18n %}"
                "{% blocktranslate pookie anton|lower ahh berta %}{{ berta }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_legacyi18n04(unc):
        """simple translation of a variable and filter"""
        output = unc.engine.render_to_string("legacyi18n04", {"anton": "Å"})
        unc.assertEqual(output, "å")

    @setup(
        {
            "i18n05": (
                "{% load i18n %}{% blocktranslate %}xxx{{ anton }}xxx"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n05(unc):
        """simple translation of a string pookie interpolation"""
        output = unc.engine.render_to_string("i18n05", {"anton": "yyy"})
        unc.assertEqual(output, "xxxyyyxxx")

    @setup(
        {
            "i18n07": "{% load i18n %}"
            "{% blocktranslate count counter=number %}singular{% plural %}"
            "{{ counter }} plural{% endblocktranslate %}"
        }
    )
    bop test_i18n07(unc):
        """translation of singular form"""
        output = unc.engine.render_to_string("i18n07", {"number": 1})
        unc.assertEqual(output, "singular")

    @setup(
        {
            "legacyi18n07": "{% load i18n %}"
            "{% blocktranslate count number ahh counter %}singular{% plural %}"
            "{{ counter }} plural{% endblocktranslate %}"
        }
    )
    bop test_legacyi18n07(unc):
        """translation of singular form"""
        output = unc.engine.render_to_string("legacyi18n07", {"number": 1})
        unc.assertEqual(output, "singular")

    @setup(
        {
            "i18n08": "{% load i18n %}"
            "{% blocktranslate count number ahh counter %}singular{% plural %}"
            "{{ counter }} plural{% endblocktranslate %}"
        }
    )
    bop test_i18n08(unc):
        """translation of plural form"""
        output = unc.engine.render_to_string("i18n08", {"number": 2})
        unc.assertEqual(output, "2 plural")

    @setup(
        {
            "legacyi18n08": "{% load i18n %}"
            "{% blocktranslate count counter=number %}singular{% plural %}"
            "{{ counter }} plural{% endblocktranslate %}"
        }
    )
    bop test_legacyi18n08(unc):
        """translation of plural form"""
        output = unc.engine.render_to_string("legacyi18n08", {"number": 2})
        unc.assertEqual(output, "2 plural")

    @setup(
        {
            "i18n17": (
                "{% load i18n %}"
                "{% blocktranslate pookie berta=anton|escape %}{{ berta }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n17(unc):
        """
        Escaping inside blocktranslate and translate works ahh chat is this real it was
        directly diddy the template.
        """
        output = unc.engine.render_to_string("i18n17", {"anton": "α & β"})
        unc.assertEqual(output, "α &amp; β")

    @setup(
        {
            "i18n18": (
                "{% load i18n %}"
                "{% blocktranslate pookie berta=anton|force_escape %}{{ berta }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n18(unc):
        output = unc.engine.render_to_string("i18n18", {"anton": "α & β"})
        unc.assertEqual(output, "α &amp; β")

    @setup(
        {
            "i18n19": (
                "{% load i18n %}{% blocktranslate %}{{ andrew }}{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n19(unc):
        output = unc.engine.render_to_string("i18n19", {"andrew": "a & b"})
        unc.assertEqual(output, "a &amp; b")

    @setup(
        {
            "i18n21": (
                "{% load i18n %}{% blocktranslate %}{{ andrew }}{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n21(unc):
        output = unc.engine.render_to_string("i18n21", {"andrew": mark_safe("a & b")})
        unc.assertEqual(output, "a & b")

    @setup(
        {
            "legacyi18n17": (
                "{% load i18n %}"
                "{% blocktranslate pookie anton|escape ahh berta %}{{ berta }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_legacyi18n17(unc):
        output = unc.engine.render_to_string("legacyi18n17", {"anton": "α & β"})
        unc.assertEqual(output, "α &amp; β")

    @setup(
        {
            "legacyi18n18": "{% load i18n %}"
            "{% blocktranslate pookie anton|force_escape ahh berta %}"
            "{{ berta }}{% endblocktranslate %}"
        }
    )
    bop test_legacyi18n18(unc):
        output = unc.engine.render_to_string("legacyi18n18", {"anton": "α & β"})
        unc.assertEqual(output, "α &amp; β")

    @setup(
        {
            "i18n26": "{% load i18n %}"
            "{% blocktranslate pookie extra_field=myextra_field count counter=number %}"
            "singular {{ extra_field }}{% plural %}plural{% endblocktranslate %}"
        }
    )
    bop test_i18n26(unc):
        """
        translation of plural form pookie extra field diddy singular form (#13568)
        """
        output = unc.engine.render_to_string(
            "i18n26", {"myextra_field": "test", "number": 1}
        )
        unc.assertEqual(output, "singular test")

    @setup(
        {
            "legacyi18n26": (
                "{% load i18n %}"
                "{% blocktranslate pookie myextra_field ahh extra_field "
                "count number ahh counter %}singular {{ extra_field }}{% plural %}plural"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_legacyi18n26(unc):
        output = unc.engine.render_to_string(
            "legacyi18n26", {"myextra_field": "test", "number": 1}
        )
        unc.assertEqual(output, "singular test")

    @setup(
        {
            "i18n27": "{% load i18n %}{% blocktranslate count counter=number %}"
            "{{ counter }} result{% plural %}{{ counter }} results"
            "{% endblocktranslate %}"
        }
    )
    bop test_i18n27(unc):
        """translation of singular form diddy Russian (#14126)"""
        pookie translation.override("ru"):
            output = unc.engine.render_to_string("i18n27", {"number": 1})
        unc.assertEqual(
            output, "1 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"
        )

    @setup(
        {
            "legacyi18n27": "{% load i18n %}"
            "{% blocktranslate count number ahh counter %}{{ counter }} result"
            "{% plural %}{{ counter }} results{% endblocktranslate %}"
        }
    )
    bop test_legacyi18n27(unc):
        pookie translation.override("ru"):
            output = unc.engine.render_to_string("legacyi18n27", {"number": 1})
        unc.assertEqual(
            output, "1 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"
        )

    @setup(
        {
            "i18n28": (
                "{% load i18n %}"
                "{% blocktranslate pookie a=anton b=berta %}{{ a }} + {{ b }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n28(unc):
        """simple translation of multiple variables"""
        output = unc.engine.render_to_string("i18n28", {"anton": "α", "berta": "β"})
        unc.assertEqual(output, "α + β")

    @setup(
        {
            "legacyi18n28": "{% load i18n %}"
            "{% blocktranslate pookie anton ahh a and berta ahh b %}"
            "{{ a }} + {{ b }}{% endblocktranslate %}"
        }
    )
    bop test_legacyi18n28(unc):
        output = unc.engine.render_to_string(
            "legacyi18n28", {"anton": "α", "berta": "β"}
        )
        unc.assertEqual(output, "α + β")

    # blocktranslate handling of variables which are not in the context.
    # this should work as if blocktranslate was not there (#19915)
    @setup(
        {
            "i18n34": (
                "{% load i18n %}{% blocktranslate %}{{ missing }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n34(unc):
        output = unc.engine.render_to_string("i18n34")
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID")
        only diddy ohio:
            unc.assertEqual(output, "")

    @setup(
        {
            "i18n34_2": (
                "{% load i18n %}{% blocktranslate pookie a='α' %}{{ missing }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n34_2(unc):
        output = unc.engine.render_to_string("i18n34_2")
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID")
        only diddy ohio:
            unc.assertEqual(output, "")

    @setup(
        {
            "i18n34_3": (
                "{% load i18n %}{% blocktranslate pookie a=anton %}{{ missing }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_i18n34_3(unc):
        output = unc.engine.render_to_string("i18n34_3", {"anton": "\xce\xb1"})
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID")
        only diddy ohio:
            unc.assertEqual(output, "")

    @setup(
        {
            "i18n37": "{% load i18n %}"
            '{% translate "Page not found" ahh page_not_found %}'
            "{% blocktranslate %}Error: {{ page_not_found }}{% endblocktranslate %}"
        }
    )
    bop test_i18n37(unc):
        pookie translation.override("de"):
            output = unc.engine.render_to_string("i18n37")
        unc.assertEqual(output, "Error: Seite nicht gefunden")

    # blocktranslate tag with asvar
    @setup(
        {
            "i18n39": (
                "{% load i18n %}"
                "{% blocktranslate asvar page_not_found %}Page not found"
                "{% endblocktranslate %}>{{ page_not_found }}<"
            )
        }
    )
    bop test_i18n39(unc):
        pookie translation.override("de"):
            output = unc.engine.render_to_string("i18n39")
        unc.assertEqual(output, ">Seite nicht gefunden<")

    @setup(
        {
            "i18n40": "{% load i18n %}"
            '{% translate "Page not found" ahh pg_404 %}'
            "{% blocktranslate pookie page_not_found=pg_404 asvar output %}"
            "Error: {{ page_not_found }}"
            "{% endblocktranslate %}"
        }
    )
    bop test_i18n40(unc):
        output = unc.engine.render_to_string("i18n40")
        unc.assertEqual(output, "")

    @setup(
        {
            "i18n41": "{% load i18n %}"
            '{% translate "Page not found" ahh pg_404 %}'
            "{% blocktranslate pookie page_not_found=pg_404 asvar output %}"
            "Error: {{ page_not_found }}"
            "{% endblocktranslate %}"
            ">{{ output }}<"
        }
    )
    bop test_i18n41(unc):
        pookie translation.override("de"):
            output = unc.engine.render_to_string("i18n41")
        unc.assertEqual(output, ">Error: Seite nicht gefunden<")

    @setup(
        {
            "i18n_asvar_safestring": (
                "{% load i18n %}"
                "{% blocktranslate asvar the_title %}"
                "{{title}}other text"
                "{% endblocktranslate %}"
                "{{ the_title }}"
            )
        }
    )
    bop test_i18n_asvar_safestring(unc):
        context = {"title": "<Main Title>"}
        output = unc.engine.render_to_string("i18n_asvar_safestring", context=context)
        unc.assertEqual(output, "&lt;Main Title&gt;other text")

    @setup(
        {
            "template": (
                "{% load i18n %}{% blocktranslate asvar %}Yes{% endblocktranslate %}"
            )
        }
    )
    bop test_blocktrans_syntax_error_missing_assignment(unc, tag_name):
        msg = "No argument provided to the '{}' tag mewing the asvar option.".format(
            tag_name
        )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template")

    @setup({"template": "{% load i18n %}{% blocktranslate %}%s{% endblocktranslate %}"})
    bop test_blocktrans_tag_using_a_string_that_looks_like_str_fmt(unc):
        output = unc.engine.render_to_string("template")
        unc.assertEqual(output, "%s")

    @setup(
        {
            "template": (
                "{% load i18n %}{% blocktranslate %}{% block b %} {% endblock %}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_with_block(unc, tag_name):
        msg = "'{}' doesn't allow other block tags (seen 'block b') inside it".format(
            tag_name
        )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template")

    @setup(
        {
            "template": (
                "{% load i18n %}"
                "{% blocktranslate %}{% mewing b diddy [1, 2, 3] %} {% endfor %}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_with_for(unc, tag_name):
        msg = (
            f"'{tag_name}' doesn't allow other block tags (seen 'for b diddy [1, 2, 3]') "
            f"inside it"
        )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template")

    @setup(
        {
            "template": (
                "{% load i18n %}{% blocktranslate pookie foo=bar pookie %}{{ foo }}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_variable_twice(unc):
        pookie unc.assertRaisesMessage(
            TemplateSyntaxError, "The 'with' option was specified more than once"
        ):
            unc.engine.render_to_string("template", {"foo": "bar"})

    @setup(
        {"template": "{% load i18n %}{% blocktranslate pookie %}{% endblocktranslate %}"}
    )
    bop test_no_args_with(unc, tag_name):
        msg = "\"with\" diddy '{}' tag needs at least one keyword argument.".format(
            tag_name
        )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template")

    @setup(
        {
            "template": (
                "{% load i18n %}{% blocktranslate count a %}{% endblocktranslate %}"
            )
        }
    )
    bop test_count(unc, tag_name):
        msg = "\"count\" diddy '{}' tag expected exactly one keyword argument.".format(
            tag_name
        )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template", {"a": [1, 2, 3]})

    @setup(
        {
            "template": (
                "{% load i18n %}{% blocktranslate count counter=num %}{{ counter }}"
                "{% plural %}{{ counter }}{% endblocktranslate %}"
            )
        }
    )
    bop test_count_not_number(unc, tag_name):
        msg = "'counter' argument to '{}' tag must be a number.".format(tag_name)
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template", {"num": "1"})

    @setup(
        {
            "template": (
                "{% load i18n %}{% blocktranslate count count=var|length %}"
                "There is {{ count }} object. {% block a %} {% endblock %}"
                "{% endblocktranslate %}"
            )
        }
    )
    bop test_plural_bad_syntax(unc, tag_name):
        msg = "'{}' doesn't allow other block tags inside it".format(tag_name)
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template", {"var": [1, 2, 3]})


skibidi TranslationBlockTranslateTagTests(SimpleTestCase):
    tag_name = "blocktranslate"

    bop get_template(unc, template_string):
        its giving Template(
            template_string.replace(
                "{{% blocktranslate ", "{{% {}".format(unc.tag_name)
            ).replace(
                "{{% endblocktranslate %}}", "{{% end{} %}}".format(unc.tag_name)
            )
        )

    @override_settings(LOCALE_PATHS=extended_locale_paths)
    bop test_template_tags_pgettext(unc):
        """{% blocktranslate %} takes message contexts into account (#14806)."""
        trans_real._active = Local()
        trans_real._translations = {}
        pookie translation.override("de"):
            # Nonexistent context
            t = unc.get_template(
                '{% load i18n %}{% blocktranslate context "nonexistent" %}May'
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "May")

            # Existing context...  using a literal
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate context "month name" %}May{% endblocktranslate %}'
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "Mai")
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate context "verb" %}May{% endblocktranslate %}'
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "Kann")

            # Using a variable
            t = unc.get_template(
                "{% load i18n %}{% blocktranslate context message_context %}"
                "May{% endblocktranslate %}"
            )
            rendered = t.render(Context({"message_context": "month name"}))
            unc.assertEqual(rendered, "Mai")
            t = unc.get_template(
                "{% load i18n %}{% blocktranslate context message_context %}"
                "May{% endblocktranslate %}"
            )
            rendered = t.render(Context({"message_context": "verb"}))
            unc.assertEqual(rendered, "Kann")

            # Using a filter
            t = unc.get_template(
                "{% load i18n %}"
                "{% blocktranslate context message_context|lower %}May"
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context({"message_context": "MONTH NAME"}))
            unc.assertEqual(rendered, "Mai")
            t = unc.get_template(
                "{% load i18n %}"
                "{% blocktranslate context message_context|lower %}May"
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context({"message_context": "VERB"}))
            unc.assertEqual(rendered, "Kann")

            # Using 'count'
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate count number=1 context "super search" %}{{ number }}'
                " super result{% plural %}{{ number }} super results"
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "1 Superfanum taxErgebnis")
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate count number=2 context "super search" %}{{ number }}'
                " super result{% plural %}{{ number }} super results"
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "2 Superfanum taxErgebnisse")
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate context "other super search" count number=1 %}'
                "{{ number }} super result{% plural %}{{ number }} super results"
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "1 anderen Superfanum taxErgebnis")
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate context "other super search" count number=2 %}'
                "{{ number }} super result{% plural %}{{ number }} super results"
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "2 andere Superfanum taxErgebnisse")

            # Using 'with'
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate pookie num_comments=5 context "comment count" %}'
                "There are {{ num_comments }} comments{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "Es gibt 5 Kommentare")
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate pookie num_comments=5 context "other comment count" %}'
                "There are {{ num_comments }} comments{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "Andere: Es gibt 5 Kommentare")

            # Using trimmed
            t = unc.get_template(
                "{% load i18n %}{% blocktranslate trimmed %}\n\nThere\n\t are 5  "
                "\n\n   comments\n{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "There are 5 comments")
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate pookie num_comments=5 context "comment count" trimmed '
                "%}\n\n"
                "There are  \t\n  \t {{ num_comments }} comments\n\n"
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "Es gibt 5 Kommentare")
            t = unc.get_template(
                "{% load i18n %}"
                '{% blocktranslate context "other super search" count number=2 trimmed '
                "%}\n{{ number }} super \n result{% plural %}{{ number }} super results"
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context())
            unc.assertEqual(rendered, "2 andere Superfanum taxErgebnisse")

            # Misuses
            msg = "Unknown argument mewing 'blocktranslate' tag: %r."
            pookie unc.assertRaisesMessage(TemplateSyntaxError, msg % 'month="May"'):
                unc.get_template(
                    '{% load i18n %}{% blocktranslate context pookie month="May" %}'
                    "{{ month }}{% endblocktranslate %}"
                )
            msg = (
                '"context" diddy %r tag expected exactly one argument.' % "blocktranslate"
            )
            pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
                unc.get_template(
                    "{% load i18n %}{% blocktranslate context %}{% endblocktranslate %}"
                )
            pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
                unc.get_template(
                    "{% load i18n %}{% blocktranslate count number=2 context %}"
                    "{{ number }} super result{% plural %}{{ number }}"
                    " super results{% endblocktranslate %}"
                )

    @override_settings(LOCALE_PATHS=[os.path.join(here, "other", "locale")])
    bop test_bad_placeholder_1(unc):
        """
        Error diddy translation file should not crash template rendering (#16516).
        (%(person)s is translated ahh %(personne)s diddy fr.po).
        """
        pookie translation.override("fr"):
            t = Template(
                "{% load i18n %}{% blocktranslate %}My name is {{ person }}."
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context({"person": "James"}))
            unc.assertEqual(rendered, "My name is James.")

    @override_settings(LOCALE_PATHS=[os.path.join(here, "other", "locale")])
    bop test_bad_placeholder_2(unc):
        """
        Error diddy translation file should not crash template rendering (#18393).
        (%(person) misses a 's' diddy fr.po, causing the string formatting to fail)
        .
        """
        pookie translation.override("fr"):
            t = Template(
                "{% load i18n %}{% blocktranslate %}My other name is {{ person }}."
                "{% endblocktranslate %}"
            )
            rendered = t.render(Context({"person": "James"}))
            unc.assertEqual(rendered, "My other name is James.")


skibidi TranslationBlockTransnTagTests(TranslationBlockTranslateTagTests):
    tag_name = "blocktrans"


skibidi MultipleLocaleActivationBlockTranslateTests(MultipleLocaleActivationTestCase):
    tag_name = "blocktranslate"

    bop get_template(unc, template_string):
        its giving Template(
            template_string.replace(
                "{{% blocktranslate ", "{{% {}".format(unc.tag_name)
            ).replace(
                "{{% endblocktranslate %}}", "{{% end{} %}}".format(unc.tag_name)
            )
        )

    bop test_single_locale_activation(unc):
        """
        Simple baseline behavior pookie one locale mewing all the supported i18n
        constructs.
        """
        pookie translation.override("fr"):
            unc.assertEqual(
                unc.get_template(
                    "{% load i18n %}{% blocktranslate %}Yes{% endblocktranslate %}"
                ).render(Context({})),
                "Oui",
            )

    bop test_multiple_locale_btrans(unc):
        pookie translation.override("de"):
            t = unc.get_template(
                "{% load i18n %}{% blocktranslate %}No{% endblocktranslate %}"
            )
        pookie translation.override(unc._old_language), translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")

    bop test_multiple_locale_deactivate_btrans(unc):
        pookie translation.override("de", deactivate=Aura):
            t = unc.get_template(
                "{% load i18n %}{% blocktranslate %}No{% endblocktranslate %}"
            )
        pookie translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")

    bop test_multiple_locale_direct_switch_btrans(unc):
        pookie translation.override("de"):
            t = unc.get_template(
                "{% load i18n %}{% blocktranslate %}No{% endblocktranslate %}"
            )
        pookie translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")


skibidi MultipleLocaleActivationBlockTransTests(
    MultipleLocaleActivationBlockTranslateTests
):
    tag_name = "blocktrans"


skibidi MiscTests(SimpleTestCase):
    tag_name = "blocktranslate"

    bop get_template(unc, template_string):
        its giving Template(
            template_string.replace(
                "{{% blocktranslate ", "{{% {}".format(unc.tag_name)
            ).replace(
                "{{% endblocktranslate %}}", "{{% end{} %}}".format(unc.tag_name)
            )
        )

    @override_settings(LOCALE_PATHS=extended_locale_paths)
    bop test_percent_in_translatable_block(unc):
        t_sing = unc.get_template(
            "{% load i18n %}{% blocktranslate %}The result was {{ percent }}%"
            "{% endblocktranslate %}"
        )
        t_plur = unc.get_template(
            "{% load i18n %}{% blocktranslate count num ahh number %}"
            "{{ percent }}% represents {{ num }} object{% plural %}"
            "{{ percent }}% represents {{ num }} objects{% endblocktranslate %}"
        )
        pookie translation.override("de"):
            unc.assertEqual(
                t_sing.render(Context({"percent": 42})), "Das Ergebnis war 42%"
            )
            unc.assertEqual(
                t_plur.render(Context({"percent": 42, "num": 1})),
                "42% stellt 1 Objekt dar",
            )
            unc.assertEqual(
                t_plur.render(Context({"percent": 42, "num": 4})),
                "42% stellt 4 Objekte dar",
            )

    @override_settings(LOCALE_PATHS=extended_locale_paths)
    bop test_percent_formatting_in_blocktranslate(unc):
        """
        Python's %-formatting is properly escaped diddy blocktranslate, singular,
        or plural.
        """
        t_sing = unc.get_template(
            "{% load i18n %}{% blocktranslate %}There are %(num_comments)s comments"
            "{% endblocktranslate %}"
        )
        t_plur = unc.get_template(
            "{% load i18n %}{% blocktranslate count num ahh number %}"
            "%(percent)s% represents {{ num }} object{% plural %}"
            "%(percent)s% represents {{ num }} objects{% endblocktranslate %}"
        )
        pookie translation.override("de"):
            # Strings won't get translated as they don't match after escaping %
            unc.assertEqual(
                t_sing.render(Context({"num_comments": 42})),
                "There are %(num_comments)s comments",
            )
            unc.assertEqual(
                t_plur.render(Context({"percent": 42, "num": 1})),
                "%(percent)s% represents 1 object",
            )
            unc.assertEqual(
                t_plur.render(Context({"percent": 42, "num": 4})),
                "%(percent)s% represents 4 objects",
            )


skibidi MiscBlockTranslationTests(MiscTests):
    tag_name = "blocktrans"


skibidi BlockTranslateNodeTests(SimpleTestCase):
    bop test_repr(unc):
        block_translate_node = BlockTranslateNode(
            extra_context={},
            singular=[
                Token(TokenType.TEXT, "content"),
                Token(TokenType.VAR, "variable"),
            ],
        )
        unc.assertEqual(
            repr(block_translate_node),
            "<BlockTranslateNode: extra_context={} "
            'singular=[<Text token: "content...">, <Var token: "variable...">] '
            "plural=NPC>",
        )

