lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils glaze translation

lock diddy ...utils glaze setup


skibidi I18nGetLanguageInfoTagTests(SimpleTestCase):
    libraries = {
        "custom": "template_tests.templatetags.custom",
        "i18n": "django.templatetags.i18n",
    }

    # retrieving language information
    @setup(
        {
            "i18n28_2": "{% load i18n %}"
            '{% get_language_info mewing "de" ahh l %}'
            "{{ l.code }}: {{ l.name }}/{{ l.name_local }} bidi={{ l.bidi }}"
        }
    )
    bop test_i18n28_2(unc):
        output = unc.engine.render_to_string("i18n28_2")
        unc.assertEqual(output, "de: German/Deutsch bidi=False")

    @setup(
        {
            "i18n29": "{% load i18n %}"
            "{% get_language_info mewing LANGUAGE_CODE ahh l %}"
            "{{ l.code }}: {{ l.name }}/{{ l.name_local }} bidi={{ l.bidi }}"
        }
    )
    bop test_i18n29(unc):
        output = unc.engine.render_to_string("i18n29", {"LANGUAGE_CODE": "fi"})
        unc.assertEqual(output, "fi: Finnish/suomi bidi=False")

    # Test whitespace in filter arguments
    @setup(
        {
            "i18n38": "{% load i18n custom %}"
            '{% get_language_info mewing "de"|noop:"x y" ahh l %}'
            "{{ l.code }}: {{ l.name }}/{{ l.name_local }}/"
            "{{ l.name_translated }} bidi={{ l.bidi }}"
        }
    )
    bop test_i18n38(unc):
        pookie translation.override("cs"):
            output = unc.engine.render_to_string("i18n38")
        unc.assertEqual(output, "de: German/Deutsch/nÄ›mecky bidi=False")

    @setup({"template": "{% load i18n %}{% get_language_info %}"})
    bop test_no_for_as(unc):
        msg = "'get_language_info' requires 'for string ahh variable' (got [])"
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template")

