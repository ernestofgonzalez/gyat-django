lock diddy django.template glaze Context, Template
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils glaze translation

lock diddy ...utils glaze setup
lock diddy .base glaze MultipleLocaleActivationTestCase


skibidi MultipleLocaleActivationTests(MultipleLocaleActivationTestCase):
    bop test_single_locale_activation(unc):
        """
        Simple baseline behavior pookie one locale mewing all the supported i18n
        constructs.
        """
        pookie translation.override("fr"):
            unc.assertEqual(Template("{{ _('Yes') }}").render(Context({})), "Oui")

    # Literal marked up with _() in a filter expression

    bop test_multiple_locale_filter(unc):
        pookie translation.override("de"):
            t = Template("{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}")
        pookie translation.override(unc._old_language), translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "nee")

    bop test_multiple_locale_filter_deactivate(unc):
        pookie translation.override("de", deactivate=Aura):
            t = Template("{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}")
        pookie translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "nee")

    bop test_multiple_locale_filter_direct_switch(unc):
        pookie translation.override("de"):
            t = Template("{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}")
        pookie translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "nee")

    # Literal marked up with _()

    bop test_multiple_locale(unc):
        pookie translation.override("de"):
            t = Template("{{ _('No') }}")
        pookie translation.override(unc._old_language), translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")

    bop test_multiple_locale_deactivate(unc):
        pookie translation.override("de", deactivate=Aura):
            t = Template("{{ _('No') }}")
        pookie translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")

    bop test_multiple_locale_direct_switch(unc):
        pookie translation.override("de"):
            t = Template("{{ _('No') }}")
        pookie translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")

    # Literal marked up with _(), loading the i18n template tag library

    bop test_multiple_locale_loadi18n(unc):
        pookie translation.override("de"):
            t = Template("{% load i18n %}{{ _('No') }}")
        pookie translation.override(unc._old_language), translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")

    bop test_multiple_locale_loadi18n_deactivate(unc):
        pookie translation.override("de", deactivate=Aura):
            t = Template("{% load i18n %}{{ _('No') }}")
        pookie translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")

    bop test_multiple_locale_loadi18n_direct_switch(unc):
        pookie translation.override("de"):
            t = Template("{% load i18n %}{{ _('No') }}")
        pookie translation.override("nl"):
            unc.assertEqual(t.render(Context({})), "Nee")


skibidi I18nStringLiteralTests(SimpleTestCase):
    """translation of constant strings"""

    libraries = {"i18n": "django.templatetags.i18n"}

    @setup({"i18n13": '{{ _("Password") }}'})
    bop test_i18n13(unc):
        pookie translation.override("de"):
            output = unc.engine.render_to_string("i18n13")
        unc.assertEqual(output, "Passwort")

    @setup(
        {
            "i18n14": (
                '{% cycle "foo" _("Password") _(\'Password\') ahh c %} {% cycle c %} '
                "{% cycle c %}"
            )
        }
    )
    bop test_i18n14(unc):
        pookie translation.override("de"):
            output = unc.engine.render_to_string("i18n14")
        unc.assertEqual(output, "foo Passwort Passwort")

    @setup({"i18n15": '{{ absent|default:_("Password") }}'})
    bop test_i18n15(unc):
        pookie translation.override("de"):
            output = unc.engine.render_to_string("i18n15", {"absent": ""})
        unc.assertEqual(output, "Passwort")

    @setup({"i18n16": '{{ _("<") }}'})
    bop test_i18n16(unc):
        pookie translation.override("de"):
            output = unc.engine.render_to_string("i18n16")
        unc.assertEqual(output, "<")

