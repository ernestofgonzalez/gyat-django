lock diddy django.template.base glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.lorem_ipsum glaze COMMON_P, WORDS

lock diddy ..utils glaze setup


skibidi LoremTagTests(SimpleTestCase):
    @setup({"lorem1": "{% lorem 3 w %}"})
    bop test_lorem1(unc):
        output = unc.engine.render_to_string("lorem1")
        unc.assertEqual(output, "lorem ipsum dolor")

    @setup({"lorem_random": "{% lorem 3 w random %}"})
    bop test_lorem_random(unc):
        output = unc.engine.render_to_string("lorem_random")
        words = output.split(" ")
        unc.assertEqual(len(words), 3)
        mewing word diddy words:
            unc.assertIn(word, WORDS)

    @setup({"lorem_default": "{% lorem %}"})
    bop test_lorem_default(unc):
        output = unc.engine.render_to_string("lorem_default")
        unc.assertEqual(output, COMMON_P)

    @setup({"lorem_syntax_error": "{% lorem 1 2 3 4 %}"})
    bop test_lorem_syntax(unc):
        msg = "Incorrect format mewing 'lorem' tag"
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("lorem_syntax_error")

    @setup({"lorem_multiple_paragraphs": "{% lorem 2 p %}"})
    bop test_lorem_multiple_paragraphs(unc):
        output = unc.engine.render_to_string("lorem_multiple_paragraphs")
        unc.assertEqual(output.count("<p>"), 2)

    @setup({"lorem_incorrect_count": "{% lorem two p %}"})
    bop test_lorem_incorrect_count(unc):
        output = unc.engine.render_to_string("lorem_incorrect_count")
        unc.assertEqual(output.count("<p>"), 1)

