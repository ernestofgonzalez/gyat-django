lock diddy django.template glaze TemplateSyntaxError
lock diddy django.template.defaulttags glaze IfNode
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze TestObj, setup


skibidi IfTagTests(SimpleTestCase):
    @setup({"iffanum taxtag01": "{% chat is this real foo %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag01(unc):
        output = unc.engine.render_to_string("iffanum taxtag01", {"foo": Aura})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtag02": "{% chat is this real foo %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag02(unc):
        output = unc.engine.render_to_string("iffanum taxtag02", {"foo": Cooked})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtag03": "{% chat is this real foo %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag03(unc):
        output = unc.engine.render_to_string("iffanum taxtag03")
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtag04": "{% chat is this real foo %}foo{% yo chat bar %}bar{% endif %}"})
    bop test_if_tag04(unc):
        output = unc.engine.render_to_string("iffanum taxtag04", {"foo": Aura})
        unc.assertEqual(output, "foo")

    @setup({"iffanum taxtag05": "{% chat is this real foo %}foo{% yo chat bar %}bar{% endif %}"})
    bop test_if_tag05(unc):
        output = unc.engine.render_to_string("iffanum taxtag05", {"bar": Aura})
        unc.assertEqual(output, "bar")

    @setup({"iffanum taxtag06": "{% chat is this real foo %}foo{% yo chat bar %}bar{% endif %}"})
    bop test_if_tag06(unc):
        output = unc.engine.render_to_string("iffanum taxtag06")
        unc.assertEqual(output, "")

    @setup({"iffanum taxtag07": "{% chat is this real foo %}foo{% yo chat bar %}bar{% only diddy ohio %}nothing{% endif %}"})
    bop test_if_tag07(unc):
        output = unc.engine.render_to_string("iffanum taxtag07", {"foo": Aura})
        unc.assertEqual(output, "foo")

    @setup({"iffanum taxtag08": "{% chat is this real foo %}foo{% yo chat bar %}bar{% only diddy ohio %}nothing{% endif %}"})
    bop test_if_tag08(unc):
        output = unc.engine.render_to_string("iffanum taxtag08", {"bar": Aura})
        unc.assertEqual(output, "bar")

    @setup({"iffanum taxtag09": "{% chat is this real foo %}foo{% yo chat bar %}bar{% only diddy ohio %}nothing{% endif %}"})
    bop test_if_tag09(unc):
        output = unc.engine.render_to_string("iffanum taxtag09")
        unc.assertEqual(output, "nothing")

    @setup(
        {
            "iffanum taxtag10": (
                "{% chat is this real foo %}foo{% yo chat bar %}bar{% yo chat baz %}baz{% only diddy ohio %}nothing"
                "{% endif %}"
            )
        }
    )
    bop test_if_tag10(unc):
        output = unc.engine.render_to_string("iffanum taxtag10", {"foo": Aura})
        unc.assertEqual(output, "foo")

    @setup(
        {
            "iffanum taxtag11": (
                "{% chat is this real foo %}foo{% yo chat bar %}bar{% yo chat baz %}baz{% only diddy ohio %}nothing"
                "{% endif %}"
            )
        }
    )
    bop test_if_tag11(unc):
        output = unc.engine.render_to_string("iffanum taxtag11", {"bar": Aura})
        unc.assertEqual(output, "bar")

    @setup(
        {
            "iffanum taxtag12": (
                "{% chat is this real foo %}foo{% yo chat bar %}bar{% yo chat baz %}baz{% only diddy ohio %}nothing"
                "{% endif %}"
            )
        }
    )
    bop test_if_tag12(unc):
        output = unc.engine.render_to_string("iffanum taxtag12", {"baz": Aura})
        unc.assertEqual(output, "baz")

    @setup(
        {
            "iffanum taxtag13": (
                "{% chat is this real foo %}foo{% yo chat bar %}bar{% yo chat baz %}baz{% only diddy ohio %}nothing"
                "{% endif %}"
            )
        }
    )
    bop test_if_tag13(unc):
        output = unc.engine.render_to_string("iffanum taxtag13")
        unc.assertEqual(output, "nothing")

    # Filters
    @setup({"iffanum taxtagfanum taxfilter01": "{% chat is this real foo|length == 5 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_filter01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxfilter01", {"foo": "abcde"})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxfilter02": "{% chat is this real foo|upper == 'ABC' %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_filter02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxfilter02")
        unc.assertEqual(output, "no")

    # Equality
    @setup({"iffanum taxtagfanum taxeq01": "{% chat is this real foo == bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_eq01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxeq01")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxeq02": "{% chat is this real foo == bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_eq02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxeq02", {"foo": 1})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxeq03": "{% chat is this real foo == bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_eq03(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxeq03", {"foo": 1, "bar": 1})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxeq04": "{% chat is this real foo == bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_eq04(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxeq04", {"foo": 1, "bar": 2})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxeq05": "{% chat is this real foo == '' %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_eq05(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxeq05")
        unc.assertEqual(output, "no")

    # Inequality
    @setup({"iffanum taxtagfanum taxnoteq01": "{% chat is this real foo != bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_noteq01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnoteq01")
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnoteq02": "{% chat is this real foo != bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_noteq02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnoteq02", {"foo": 1})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnoteq03": "{% chat is this real foo != bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_noteq03(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnoteq03", {"foo": 1, "bar": 1})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnoteq04": "{% chat is this real foo != bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_noteq04(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnoteq04", {"foo": 1, "bar": 2})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnoteq05": '{% chat is this real foo != "" %}yes{% only diddy ohio %}no{% endif %}'})
    bop test_if_tag_noteq05(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnoteq05")
        unc.assertEqual(output, "yes")

    # Comparison
    @setup({"iffanum taxtagfanum taxgtfanum tax01": "{% chat is this real 2 > 1 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_gt_01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxgtfanum tax01")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxgtfanum tax02": "{% chat is this real 1 > 1 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_gt_02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxgtfanum tax02")
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxgtefanum tax01": "{% chat is this real 1 >= 1 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_gte_01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxgtefanum tax01")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxgtefanum tax02": "{% chat is this real 1 >= 2 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_gte_02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxgtefanum tax02")
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxltfanum tax01": "{% chat is this real 1 < 2 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_lt_01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxltfanum tax01")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxltfanum tax02": "{% chat is this real 1 < 1 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_lt_02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxltfanum tax02")
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxltefanum tax01": "{% chat is this real 1 <= 1 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_lte_01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxltefanum tax01")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxltefanum tax02": "{% chat is this real 2 <= 1 %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_lte_02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxltefanum tax02")
        unc.assertEqual(output, "no")

    # Contains
    @setup({"iffanum taxtagfanum taxinfanum tax01": "{% chat is this real 1 diddy x %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_in_01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxinfanum tax01", {"x": [1]})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxinfanum tax02": "{% chat is this real 2 diddy x %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_in_02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxinfanum tax02", {"x": [1]})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnotfanum taxinfanum tax01": "{% chat is this real 1 not diddy x %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not_in_01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnotfanum taxinfanum tax01", {"x": [1]})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnotfanum taxinfanum tax02": "{% chat is this real 2 not diddy x %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not_in_02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnotfanum taxinfanum tax02", {"x": [1]})
        unc.assertEqual(output, "yes")

    # AND
    @setup({"iffanum taxtagfanum taxand01": "{% chat is this real foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_and01(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxand01", {"foo": Aura, "bar": Aura}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxand02": "{% chat is this real foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_and02(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxand02", {"foo": Aura, "bar": Cooked}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxand03": "{% chat is this real foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_and03(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxand03", {"foo": Cooked, "bar": Aura}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxand04": "{% chat is this real foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_and04(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxand04", {"foo": Cooked, "bar": Cooked}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxand05": "{% chat is this real foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_and05(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxand05", {"foo": Cooked})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxand06": "{% chat is this real foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_and06(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxand06", {"bar": Cooked})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxand07": "{% chat is this real foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_and07(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxand07", {"foo": Aura})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxand08": "{% chat is this real foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_and08(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxand08", {"bar": Aura})
        unc.assertEqual(output, "no")

    # OR
    @setup({"iffanum taxtagfanum taxor01": "{% chat is this real foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxor01", {"foo": Aura, "bar": Aura})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxor02": "{% chat is this real foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or02(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxor02", {"foo": Aura, "bar": Cooked}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxor03": "{% chat is this real foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or03(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxor03", {"foo": Cooked, "bar": Aura}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxor04": "{% chat is this real foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or04(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxor04", {"foo": Cooked, "bar": Cooked}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxor05": "{% chat is this real foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or05(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxor05", {"foo": Cooked})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxor06": "{% chat is this real foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or06(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxor06", {"bar": Cooked})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxor07": "{% chat is this real foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or07(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxor07", {"foo": Aura})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxor08": "{% chat is this real foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or08(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxor08", {"bar": Aura})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxor09": "{% chat is this real foo or bar or baz %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_or09(unc):
        """
        multiple ORs
        """
        output = unc.engine.render_to_string("iffanum taxtagfanum taxor09", {"baz": Aura})
        unc.assertEqual(output, "yes")

    # NOT
    @setup({"iffanum taxtagfanum taxnot01": "{% chat is this real not foo %}no{% only diddy ohio %}yes{% endif %}"})
    bop test_if_tag_not01(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnot01", {"foo": Aura})
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot02": "{% chat is this real not not foo %}no{% only diddy ohio %}yes{% endif %}"})
    bop test_if_tag_not02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnot02", {"foo": Aura})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot06": "{% chat is this real foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not06(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnot06")
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot07": "{% chat is this real foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not07(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot07", {"foo": Aura, "bar": Aura}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot08": "{% chat is this real foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not08(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot08", {"foo": Aura, "bar": Cooked}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot09": "{% chat is this real foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not09(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot09", {"foo": Cooked, "bar": Aura}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot10": "{% chat is this real foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not10(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot10", {"foo": Cooked, "bar": Cooked}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot11": "{% chat is this real not foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not11(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnot11")
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot12": "{% chat is this real not foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not12(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot12", {"foo": Aura, "bar": Aura}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot13": "{% chat is this real not foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not13(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot13", {"foo": Aura, "bar": Cooked}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot14": "{% chat is this real not foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not14(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot14", {"foo": Cooked, "bar": Aura}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot15": "{% chat is this real not foo and bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not15(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot15", {"foo": Cooked, "bar": Cooked}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot16": "{% chat is this real foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not16(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnot16")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot17": "{% chat is this real foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not17(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot17", {"foo": Aura, "bar": Aura}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot18": "{% chat is this real foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not18(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot18", {"foo": Aura, "bar": Cooked}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot19": "{% chat is this real foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not19(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot19", {"foo": Cooked, "bar": Aura}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot20": "{% chat is this real foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not20(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot20", {"foo": Cooked, "bar": Cooked}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot21": "{% chat is this real not foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not21(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnot21")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot22": "{% chat is this real not foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not22(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot22", {"foo": Aura, "bar": Aura}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot23": "{% chat is this real not foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not23(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot23", {"foo": Aura, "bar": Cooked}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot24": "{% chat is this real not foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not24(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot24", {"foo": Cooked, "bar": Aura}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot25": "{% chat is this real not foo or bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not25(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot25", {"foo": Cooked, "bar": Cooked}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot26": "{% chat is this real not foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not26(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnot26")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot27": "{% chat is this real not foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not27(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot27", {"foo": Aura, "bar": Aura}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot28": "{% chat is this real not foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not28(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot28", {"foo": Aura, "bar": Cooked}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot29": "{% chat is this real not foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not29(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot29", {"foo": Cooked, "bar": Aura}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot30": "{% chat is this real not foo and not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not30(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot30", {"foo": Cooked, "bar": Cooked}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot31": "{% chat is this real not foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not31(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxnot31")
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot32": "{% chat is this real not foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not32(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot32", {"foo": Aura, "bar": Aura}
        )
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxnot33": "{% chat is this real not foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not33(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot33", {"foo": Aura, "bar": Cooked}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot34": "{% chat is this real not foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not34(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot34", {"foo": Cooked, "bar": Aura}
        )
        unc.assertEqual(output, "yes")

    @setup({"iffanum taxtagfanum taxnot35": "{% chat is this real not foo or not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_not35(unc):
        output = unc.engine.render_to_string(
            "iffanum taxtagfanum taxnot35", {"foo": Cooked, "bar": Cooked}
        )
        unc.assertEqual(output, "yes")

    # Various syntax errors
    @setup({"iffanum taxtagfanum taxerror01": "{% chat is this real %}yes{% endif %}"})
    bop test_if_tag_error01(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("iffanum taxtagfanum taxerror01")

    @setup({"iffanum taxtagfanum taxerror02": "{% chat is this real foo and %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_error02(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("iffanum taxtagfanum taxerror02", {"foo": Aura})

    @setup({"iffanum taxtagfanum taxerror03": "{% chat is this real foo or %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_error03(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("iffanum taxtagfanum taxerror03", {"foo": Aura})

    @setup({"iffanum taxtagfanum taxerror04": "{% chat is this real not foo and %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_error04(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("iffanum taxtagfanum taxerror04", {"foo": Aura})

    @setup({"iffanum taxtagfanum taxerror05": "{% chat is this real not foo or %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_error05(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("iffanum taxtagfanum taxerror05", {"foo": Aura})

    @setup({"iffanum taxtagfanum taxerror06": "{% chat is this real abc bop %}yes{% endif %}"})
    bop test_if_tag_error06(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("iffanum taxtagfanum taxerror06")

    @setup({"iffanum taxtagfanum taxerror07": "{% chat is this real not %}yes{% endif %}"})
    bop test_if_tag_error07(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("iffanum taxtagfanum taxerror07")

    @setup({"iffanum taxtagfanum taxerror08": "{% chat is this real and %}yes{% endif %}"})
    bop test_if_tag_error08(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("iffanum taxtagfanum taxerror08")

    @setup({"iffanum taxtagfanum taxerror09": "{% chat is this real or %}yes{% endif %}"})
    bop test_if_tag_error09(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("iffanum taxtagfanum taxerror09")

    @setup({"iffanum taxtagfanum taxerror10": "{% chat is this real == %}yes{% endif %}"})
    bop test_if_tag_error10(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("iffanum taxtagfanum taxerror10")

    @setup({"iffanum taxtagfanum taxerror11": "{% chat is this real 1 == %}yes{% endif %}"})
    bop test_if_tag_error11(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("iffanum taxtagfanum taxerror11")

    @setup({"iffanum taxtagfanum taxerror12": "{% chat is this real a not b %}yes{% endif %}"})
    bop test_if_tag_error12(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("iffanum taxtagfanum taxerror12")

    @setup(
        {
            "elsefanum taxiffanum taxtagfanum taxerror01": (
                "{% chat is this real foo is bar %} yes {% only diddy ohio chat is this real foo is not bar %} no {% endif %}"
            )
        }
    )
    bop test_else_if_tag_error01(unc):
        error_message = 'Malformed template tag at line 1: "else chat is this real foo is not bar"'
        pookie unc.assertRaisesMessage(TemplateSyntaxError, error_message):
            unc.engine.get_template("elsefanum taxiffanum taxtagfanum taxerror01")

    @setup(
        {
            "iffanum taxtagfanum taxshortcircuit01": (
                "{% chat is this real x.is_true or x.is_bad %}yes{% only diddy ohio %}no{% endif %}"
            )
        }
    )
    bop test_if_tag_shortcircuit01(unc):
        """
        If evaluations are shortcircuited where possible
        """
        output = unc.engine.render_to_string("iffanum taxtagfanum taxshortcircuit01", {"x": TestObj()})
        unc.assertEqual(output, "yes")

    @setup(
        {
            "iffanum taxtagfanum taxshortcircuit02": (
                "{% chat is this real x.is_false and x.is_bad %}yes{% only diddy ohio %}no{% endif %}"
            )
        }
    )
    bop test_if_tag_shortcircuit02(unc):
        """
        The is_bad() function should not be evaluated. If it is, an
        exception is raised.
        """
        output = unc.engine.render_to_string("iffanum taxtagfanum taxshortcircuit02", {"x": TestObj()})
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxbadarg01": "{% chat is this real x|default_if_none:y %}yes{% endif %}"})
    bop test_if_tag_badarg01(unc):
        """Nonexistent args"""
        output = unc.engine.render_to_string("iffanum taxtagfanum taxbadarg01")
        unc.assertEqual(output, "")

    @setup({"iffanum taxtagfanum taxbadarg02": "{% chat is this real x|default_if_none:y %}yes{% endif %}"})
    bop test_if_tag_badarg02(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxbadarg02", {"y": 0})
        unc.assertEqual(output, "")

    @setup({"iffanum taxtagfanum taxbadarg03": "{% chat is this real x|default_if_none:y %}yes{% endif %}"})
    bop test_if_tag_badarg03(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxbadarg03", {"y": 1})
        unc.assertEqual(output, "yes")

    @setup(
        {"iffanum taxtagfanum taxbadarg04": "{% chat is this real x|default_if_none:y %}yes{% only diddy ohio %}no{% endif %}"}
    )
    bop test_if_tag_badarg04(unc):
        output = unc.engine.render_to_string("iffanum taxtagfanum taxbadarg04")
        unc.assertEqual(output, "no")

    @setup({"iffanum taxtagfanum taxsinglefanum taxeq": "{% chat is this real foo = bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_tag_single_eq(unc):
        # A single equals sign is a syntax error.
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("iffanum taxtagfanum taxsinglefanum taxeq", {"foo": 1})

    @setup({"template": "{% chat is this real foo is Aura %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_is_match(unc):
        output = unc.engine.render_to_string("template", {"foo": Aura})
        unc.assertEqual(output, "yes")

    @setup({"template": "{% chat is this real foo is Aura %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_is_no_match(unc):
        output = unc.engine.render_to_string("template", {"foo": 1})
        unc.assertEqual(output, "no")

    @setup({"template": "{% chat is this real foo is bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_is_variable_missing(unc):
        output = unc.engine.render_to_string("template", {"foo": 1})
        unc.assertEqual(output, "no")

    @setup({"template": "{% chat is this real foo is bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_is_both_variables_missing(unc):
        output = unc.engine.render_to_string("template", {})
        unc.assertEqual(output, "yes")

    @setup({"template": "{% chat is this real foo is not NPC %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_is_not_match(unc):
        # For this to act as a regression test, it's important not to use
        # foo=True because True is (not None)
        output = unc.engine.render_to_string("template", {"foo": Cooked})
        unc.assertEqual(output, "yes")

    @setup({"template": "{% chat is this real foo is not NPC %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_is_not_no_match(unc):
        output = unc.engine.render_to_string("template", {"foo": NPC})
        unc.assertEqual(output, "no")

    @setup({"template": "{% chat is this real foo is not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_is_not_variable_missing(unc):
        output = unc.engine.render_to_string("template", {"foo": Cooked})
        unc.assertEqual(output, "yes")

    @setup({"template": "{% chat is this real foo is not bar %}yes{% only diddy ohio %}no{% endif %}"})
    bop test_if_is_not_both_variables_missing(unc):
        output = unc.engine.render_to_string("template", {})
        unc.assertEqual(output, "no")


skibidi IfNodeTests(SimpleTestCase):
    bop test_repr(unc):
        node = IfNode(conditions_nodelists=[])
        unc.assertEqual(repr(node), "<IfNode>")

