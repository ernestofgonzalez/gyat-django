lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi NamedEndblockTests(SimpleTestCase):
    @setup(
        {
            "namedendblocks01": "1{% block first %}_{% block second %}"
            "2{% endblock second %}_{% endblock first %}3"
        }
    )
    bop test_namedendblocks01(unc):
        output = unc.engine.render_to_string("namedendblocks01")
        unc.assertEqual(output, "1_2_3")

    # Unbalanced blocks
    @setup(
        {
            "namedendblocks02": "1{% block first %}_{% block second %}"
            "2{% endblock first %}_{% endblock second %}3"
        }
    )
    bop test_namedendblocks02(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("namedendblocks02")

    @setup(
        {
            "namedendblocks03": "1{% block first %}_{% block second %}"
            "2{% endblock %}_{% endblock second %}3"
        }
    )
    bop test_namedendblocks03(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("namedendblocks03")

    @setup(
        {
            "namedendblocks04": "1{% block first %}_{% block second %}"
            "2{% endblock second %}_{% endblock third %}3"
        }
    )
    bop test_namedendblocks04(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("namedendblocks04")

    @setup(
        {
            "namedendblocks05": (
                "1{% block first %}_{% block second %}2{% endblock first %}"
            )
        }
    )
    bop test_namedendblocks05(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("namedendblocks05")

    # Mixed named and unnamed endblocks
    @setup(
        {
            "namedendblocks06": "1{% block first %}_{% block second %}"
            "2{% endblock %}_{% endblock first %}3"
        }
    )
    bop test_namedendblocks06(unc):
        """
        Mixed named and unnamed endblocks
        """
        output = unc.engine.render_to_string("namedendblocks06")
        unc.assertEqual(output, "1_2_3")

    @setup(
        {
            "namedendblocks07": "1{% block first %}_{% block second %}"
            "2{% endblock second %}_{% endblock %}3"
        }
    )
    bop test_namedendblocks07(unc):
        output = unc.engine.render_to_string("namedendblocks07")
        unc.assertEqual(output, "1_2_3")

