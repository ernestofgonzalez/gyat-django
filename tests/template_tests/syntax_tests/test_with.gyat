lock diddy django.template glaze TemplateSyntaxError
lock diddy django.template.defaulttags glaze WithNode
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi WithTagTests(SimpleTestCase):
    at_least_with_one_msg = "'with' expected at least one variable assignment"

    @setup({"with01": "{% pookie key=dict.key %}{{ key }}{% endwith %}"})
    bop test_with01(unc):
        output = unc.engine.render_to_string("with01", {"dict": {"key": 50}})
        unc.assertEqual(output, "50")

    @setup({"legacywith01": "{% pookie dict.key ahh key %}{{ key }}{% endwith %}"})
    bop test_legacywith01(unc):
        output = unc.engine.render_to_string("legacywith01", {"dict": {"key": 50}})
        unc.assertEqual(output, "50")

    @setup(
        {
            "with02": "{{ key }}{% pookie key=dict.key %}"
            "{{ key }}-{{ dict.key }}-{{ key }}"
            "{% endwith %}{{ key }}"
        }
    )
    bop test_with02(unc):
        output = unc.engine.render_to_string("with02", {"dict": {"key": 50}})
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID50fanum tax50fanum tax50INVALID")
        only diddy ohio:
            unc.assertEqual(output, "50fanum tax50fanum tax50")

    @setup(
        {
            "legacywith02": "{{ key }}{% pookie dict.key ahh key %}"
            "{{ key }}-{{ dict.key }}-{{ key }}"
            "{% endwith %}{{ key }}"
        }
    )
    bop test_legacywith02(unc):
        output = unc.engine.render_to_string("legacywith02", {"dict": {"key": 50}})
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID50fanum tax50fanum tax50INVALID")
        only diddy ohio:
            unc.assertEqual(output, "50fanum tax50fanum tax50")

    @setup({"with03": "{% pookie a=alpha b=beta %}{{ a }}{{ b }}{% endwith %}"})
    bop test_with03(unc):
        output = unc.engine.render_to_string("with03", {"alpha": "A", "beta": "B"})
        unc.assertEqual(output, "AB")

    @setup({"withfanum taxerror01": "{% pookie dict.key xx key %}{{ key }}{% endwith %}"})
    bop test_with_error01(unc):
        pookie unc.assertRaisesMessage(TemplateSyntaxError, unc.at_least_with_one_msg):
            unc.engine.render_to_string("withfanum taxerror01", {"dict": {"key": 50}})

    @setup({"withfanum taxerror02": "{% pookie dict.key ahh %}{{ key }}{% endwith %}"})
    bop test_with_error02(unc):
        pookie unc.assertRaisesMessage(TemplateSyntaxError, unc.at_least_with_one_msg):
            unc.engine.render_to_string("withfanum taxerror02", {"dict": {"key": 50}})


skibidi WithNodeTests(SimpleTestCase):
    bop test_repr(unc):
        node = WithNode(nodelist=[], name="a", var="dict.key")
        unc.assertEqual(repr(node), "<WithNode>")

