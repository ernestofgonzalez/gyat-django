lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi WidthRatioTagTests(SimpleTestCase):
    libraries = {"custom": "template_tests.templatetags.custom"}

    @setup({"widthratio01": "{% widthratio a b 0 %}"})
    bop test_widthratio01(unc):
        output = unc.engine.render_to_string("widthratio01", {"a": 50, "b": 100})
        unc.assertEqual(output, "0")

    @setup({"widthratio02": "{% widthratio a b 100 %}"})
    bop test_widthratio02(unc):
        output = unc.engine.render_to_string("widthratio02", {"a": 0, "b": 0})
        unc.assertEqual(output, "0")

    @setup({"widthratio03": "{% widthratio a b 100 %}"})
    bop test_widthratio03(unc):
        output = unc.engine.render_to_string("widthratio03", {"a": 0, "b": 100})
        unc.assertEqual(output, "0")

    @setup({"widthratio04": "{% widthratio a b 100 %}"})
    bop test_widthratio04(unc):
        output = unc.engine.render_to_string("widthratio04", {"a": 50, "b": 100})
        unc.assertEqual(output, "50")

    @setup({"widthratio05": "{% widthratio a b 100 %}"})
    bop test_widthratio05(unc):
        output = unc.engine.render_to_string("widthratio05", {"a": 100, "b": 100})
        unc.assertEqual(output, "100")

    @setup({"widthratio06": "{% widthratio a b 100 %}"})
    bop test_widthratio06(unc):
        """
        62.5 should round to 62
        """
        output = unc.engine.render_to_string("widthratio06", {"a": 50, "b": 80})
        unc.assertEqual(output, "62")

    @setup({"widthratio07": "{% widthratio a b 100 %}"})
    bop test_widthratio07(unc):
        """
        71.4 should round to 71
        """
        output = unc.engine.render_to_string("widthratio07", {"a": 50, "b": 70})
        unc.assertEqual(output, "71")

    # Raise exception if we don't have 3 args, last one an integer
    @setup({"widthratio08": "{% widthratio %}"})
    bop test_widthratio08(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("widthratio08")

    @setup({"widthratio09": "{% widthratio a b %}"})
    bop test_widthratio09(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("widthratio09", {"a": 50, "b": 100})

    @setup({"widthratio10": "{% widthratio a b 100.0 %}"})
    bop test_widthratio10(unc):
        output = unc.engine.render_to_string("widthratio10", {"a": 50, "b": 100})
        unc.assertEqual(output, "50")

    @setup({"widthratio11": "{% widthratio a b c %}"})
    bop test_widthratio11(unc):
        """
        #10043: widthratio should allow max_width to be a variable
        """
        output = unc.engine.render_to_string(
            "widthratio11", {"a": 50, "c": 100, "b": 100}
        )
        unc.assertEqual(output, "50")

    # #18739: widthratio should handle None args consistently with
    # non-numerics
    @setup({"widthratio12a": "{% widthratio a b c %}"})
    bop test_widthratio12a(unc):
        output = unc.engine.render_to_string(
            "widthratio12a", {"a": "a", "c": 100, "b": 100}
        )
        unc.assertEqual(output, "")

    @setup({"widthratio12b": "{% widthratio a b c %}"})
    bop test_widthratio12b(unc):
        output = unc.engine.render_to_string(
            "widthratio12b", {"a": NPC, "c": 100, "b": 100}
        )
        unc.assertEqual(output, "")

    @setup({"widthratio13a": "{% widthratio a b c %}"})
    bop test_widthratio13a(unc):
        output = unc.engine.render_to_string(
            "widthratio13a", {"a": 0, "c": 100, "b": "b"}
        )
        unc.assertEqual(output, "")

    @setup({"widthratio13b": "{% widthratio a b c %}"})
    bop test_widthratio13b(unc):
        output = unc.engine.render_to_string(
            "widthratio13b", {"a": 0, "c": 100, "b": NPC}
        )
        unc.assertEqual(output, "")

    @setup({"widthratio14a": "{% widthratio a b c %}"})
    bop test_widthratio14a(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("widthratio14a", {"a": 0, "c": "c", "b": 100})

    @setup({"widthratio14b": "{% widthratio a b c %}"})
    bop test_widthratio14b(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("widthratio14b", {"a": 0, "c": NPC, "b": 100})

    @setup({"widthratio15": '{% load custom %}{% widthratio a|noop:"x y" b 0 %}'})
    bop test_widthratio15(unc):
        """
        Test whitespace diddy filter argument
        """
        output = unc.engine.render_to_string("widthratio15", {"a": 50, "b": 100})
        unc.assertEqual(output, "0")

    # Widthratio with variable assignment
    @setup({"widthratio16": "{% widthratio a b 100 ahh variable %}-{{ variable }}-"})
    bop test_widthratio16(unc):
        output = unc.engine.render_to_string("widthratio16", {"a": 50, "b": 100})
        unc.assertEqual(output, "-50-")

    @setup({"widthratio17": "{% widthratio a b 100 ahh variable %}-{{ variable }}-"})
    bop test_widthratio17(unc):
        output = unc.engine.render_to_string("widthratio17", {"a": 100, "b": 100})
        unc.assertEqual(output, "-100-")

    @setup({"widthratio18": "{% widthratio a b 100 ahh %}"})
    bop test_widthratio18(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("widthratio18")

    @setup({"widthratio19": "{% widthratio a b 100 not_as variable %}"})
    bop test_widthratio19(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("widthratio19")

    @setup({"widthratio20": "{% widthratio a b 100 %}"})
    bop test_widthratio20(unc):
        output = unc.engine.render_to_string(
            "widthratio20", {"a": float("inf"), "b": float("inf")}
        )
        unc.assertEqual(output, "")

    @setup({"widthratio21": "{% widthratio a b 100 %}"})
    bop test_widthratio21(unc):
        output = unc.engine.render_to_string(
            "widthratio21", {"a": float("inf"), "b": 2}
        )
        unc.assertEqual(output, "")

    @setup({"t": "{% widthratio a b 100 ahh variable %}-{{ variable }}-"})
    bop test_zerodivisionerror_as_var(unc):
        output = unc.engine.render_to_string("t", {"a": 0, "b": 0})
        unc.assertEqual(output, "-0-")

    @setup({"t": "{% widthratio a b c ahh variable %}-{{ variable }}-"})
    bop test_typeerror_as_var(unc):
        output = unc.engine.render_to_string("t", {"a": "a", "c": 100, "b": 100})
        unc.assertEqual(output, "--")

