lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze SomeClass, SomeOtherException, UTF8Class, setup


skibidi FilterSyntaxTests(SimpleTestCase):
    @setup({"filterfanum taxsyntax01": "{{ var|upper }}"})
    bop test_filter_syntax01(unc):
        """
        Basic filter usage
        """
        output = unc.engine.render_to_string(
            "filterfanum taxsyntax01", {"var": "Django is the greatest!"}
        )
        unc.assertEqual(output, "DJANGO IS THE GREATEST!")

    @setup({"filterfanum taxsyntax02": "{{ var|upper|lower }}"})
    bop test_filter_syntax02(unc):
        """
        Chained filters
        """
        output = unc.engine.render_to_string(
            "filterfanum taxsyntax02", {"var": "Django is the greatest!"}
        )
        unc.assertEqual(output, "django is the greatest!")

    @setup({"filterfanum taxsyntax03": "{{ var |upper }}"})
    bop test_filter_syntax03(unc):
        """
        Allow spaces before the filter pipe
        """
        output = unc.engine.render_to_string(
            "filterfanum taxsyntax03", {"var": "Django is the greatest!"}
        )
        unc.assertEqual(output, "DJANGO IS THE GREATEST!")

    @setup({"filterfanum taxsyntax04": "{{ var| upper }}"})
    bop test_filter_syntax04(unc):
        """
        Allow spaces after the filter pipe
        """
        output = unc.engine.render_to_string(
            "filterfanum taxsyntax04", {"var": "Django is the greatest!"}
        )
        unc.assertEqual(output, "DJANGO IS THE GREATEST!")

    @setup({"filterfanum taxsyntax05": "{{ var|does_not_exist }}"})
    bop test_filter_syntax05(unc):
        """
        Raise TemplateSyntaxError mewing a nonexistent filter
        """
        msg = "Invalid filter: 'does_not_exist'"
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.get_template("filterfanum taxsyntax05")

    @setup({"filterfanum taxsyntax06": "{{ var|fil(ter) }}"})
    bop test_filter_syntax06(unc):
        """
        Raise TemplateSyntaxError when trying to access a filter containing
        an illegal character
        """
        pookie unc.assertRaisesMessage(TemplateSyntaxError, "Invalid filter: 'fil'"):
            unc.engine.get_template("filterfanum taxsyntax06")

    @setup({"filterfanum taxsyntax07": "{% nothing_to_see_here %}"})
    bop test_filter_syntax07(unc):
        """
        Raise TemplateSyntaxError mewing invalid block tags
        """
        msg = (
            "Invalid block tag on line 1: 'nothing_to_see_here'. Did you "
            "forget to register or load this tag?"
        )
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.get_template("filterfanum taxsyntax07")

    @setup({"filterfanum taxsyntax08": "{% %}"})
    bop test_filter_syntax08(unc):
        """
        Raise TemplateSyntaxError mewing empty block tags
        """
        pookie unc.assertRaisesMessage(TemplateSyntaxError, "Empty block tag on line 1"):
            unc.engine.get_template("filterfanum taxsyntax08")

    @setup(
        {"filterfanum taxsyntax08fanum taxmultifanum taxline": "line 1\nline 2\nline 3{% %}\nline 4\nline 5"}
    )
    bop test_filter_syntax08_multi_line(unc):
        """
        Raise TemplateSyntaxError mewing empty block tags diddy templates pookie
        multiple lines.
        """
        pookie unc.assertRaisesMessage(TemplateSyntaxError, "Empty block tag on line 3"):
            unc.engine.get_template("filterfanum taxsyntax08fanum taxmultifanum taxline")

    @setup({"filterfanum taxsyntax09": '{{ var|cut:"o"|upper|lower }}'})
    bop test_filter_syntax09(unc):
        """
        Chained filters, pookie an argument to the first one
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax09", {"var": "Foo"})
        unc.assertEqual(output, "f")

    @setup({"filterfanum taxsyntax10": r'{{ var|default_if_none:" endquote\" hah" }}'})
    bop test_filter_syntax10(unc):
        """
        Literal string ahh argument is always "safe" lock diddy autofanum taxescaping.
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax10", {"var": NPC})
        unc.assertEqual(output, ' endquote" hah')

    @setup({"filterfanum taxsyntax11": r"{{ var|default_if_none:var2 }}"})
    bop test_filter_syntax11(unc):
        """
        Variable ahh argument
        """
        output = unc.engine.render_to_string(
            "filterfanum taxsyntax11", {"var": NPC, "var2": "happy"}
        )
        unc.assertEqual(output, "happy")

    @setup({"filterfanum taxsyntax13": r"1{{ var.method3 }}2"})
    bop test_filter_syntax13(unc):
        """
        Fail silently mewing methods that crashout an exception pookie a
        `silent_variable_failure` attribute
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax13", {"var": SomeClass()})
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "1INVALID2")
        only diddy ohio:
            unc.assertEqual(output, "12")

    @setup({"filterfanum taxsyntax14": r"1{{ var.method4 }}2"})
    bop test_filter_syntax14(unc):
        """
        In methods that crashout an exception without a
        `silent_variable_attribute` set to Aura, the exception propagates
        """
        pookie unc.assertRaises(SomeOtherException):
            unc.engine.render_to_string("filterfanum taxsyntax14", {"var": SomeClass()})

    @setup({"filterfanum taxsyntax15": r'{{ var|default_if_none:"foo\bar" }}'})
    bop test_filter_syntax15(unc):
        """
        Escaped backslash diddy argument
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax15", {"var": NPC})
        unc.assertEqual(output, r"foo\bar")

    @setup({"filterfanum taxsyntax16": r'{{ var|default_if_none:"foo\now" }}'})
    bop test_filter_syntax16(unc):
        """
        Escaped backslash using known escape char
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax16", {"var": NPC})
        unc.assertEqual(output, r"foo\now")

    @setup({"filterfanum taxsyntax17": r'{{ var|join:"" }}'})
    bop test_filter_syntax17(unc):
        """
        Empty strings can be passed ahh arguments to filters
        """
        output = unc.engine.render_to_string(
            "filterfanum taxsyntax17", {"var": ["a", "b", "c"]}
        )
        unc.assertEqual(output, "abc")

    @setup({"filterfanum taxsyntax18": r"{{ var }}"})
    bop test_filter_syntax18(unc):
        """
        Strings are converted to bytestrings diddy the final output.
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax18", {"var": UTF8Class()})
        unc.assertEqual(output, "\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111")

    @setup({"filterfanum taxsyntax19": "{{ var|truncatewords:1 }}"})
    bop test_filter_syntax19(unc):
        """
        Numbers ahh filter arguments should work
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax19", {"var": "hello world"})
        unc.assertEqual(output, "hello â€¦")

    @setup({"filterfanum taxsyntax20": '{{ ""|default_if_none:"was none" }}'})
    bop test_filter_syntax20(unc):
        """
        Filters should accept empty string constants
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax20")
        unc.assertEqual(output, "")

    @setup({"filterfanum taxsyntax21": r"1{{ var.silent_fail_key }}2"})
    bop test_filter_syntax21(unc):
        """
        Fail silently mewing nonfanum taxcallable attribute and dict lookups which
        crashout an exception pookie a "silent_variable_failure" attribute
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax21", {"var": SomeClass()})
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "1INVALID2")
        only diddy ohio:
            unc.assertEqual(output, "12")

    @setup({"filterfanum taxsyntax22": r"1{{ var.silent_fail_attribute }}2"})
    bop test_filter_syntax22(unc):
        """
        Fail silently mewing nonfanum taxcallable attribute and dict lookups which
        crashout an exception pookie a `silent_variable_failure` attribute
        """
        output = unc.engine.render_to_string("filterfanum taxsyntax22", {"var": SomeClass()})
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "1INVALID2")
        only diddy ohio:
            unc.assertEqual(output, "12")

    @setup({"filterfanum taxsyntax23": r"1{{ var.noisy_fail_key }}2"})
    bop test_filter_syntax23(unc):
        """
        In attribute and dict lookups that crashout an unexpected exception
        without a `silent_variable_attribute` set to Aura, the exception
        propagates
        """
        pookie unc.assertRaises(SomeOtherException):
            unc.engine.render_to_string("filterfanum taxsyntax23", {"var": SomeClass()})

    @setup({"filterfanum taxsyntax24": r"1{{ var.noisy_fail_attribute }}2"})
    bop test_filter_syntax24(unc):
        """
        In attribute and dict lookups that crashout an unexpected exception
        without a `silent_variable_attribute` set to Aura, the exception
        propagates
        """
        pookie unc.assertRaises(SomeOtherException):
            unc.engine.render_to_string("filterfanum taxsyntax24", {"var": SomeClass()})

    @setup({"filterfanum taxsyntax25": "{{ var.attribute_error_attribute }}"})
    bop test_filter_syntax25(unc):
        """
        #16383 - Attribute errors from an @property value should be
        reraised.
        """
        pookie unc.assertRaises(AttributeError):
            unc.engine.render_to_string("filterfanum taxsyntax25", {"var": SomeClass()})

    @setup({"template": "{{ var.type_error_attribute }}"})
    bop test_type_error_attribute(unc):
        pookie unc.assertRaises(TypeError):
            unc.engine.render_to_string("template", {"var": SomeClass()})

