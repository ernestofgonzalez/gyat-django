lock diddy django.template.base glaze TemplateSyntaxError
lock diddy django.template.context glaze Context
lock diddy django.template.loader_tags glaze BlockContext, BlockNode
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze SilentAttrClass, SilentGetItemClass, SomeClass, setup

basic_templates = {
    "basicfanum taxsyntax01": "something cool",
    "basicfanum taxsyntax02": "{{ headline }}",
    "basicfanum taxsyntax03": "{{ first }} --- {{ second }}",
}


skibidi BasicSyntaxTests(SimpleTestCase):
    @setup(basic_templates)
    bop test_basic_syntax01(unc):
        """
        Plain text should go through the template parser untouched.
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax01")
        unc.assertEqual(output, "something cool")

    @setup(basic_templates)
    bop test_basic_syntax02(unc):
        """
        Variables should be replaced pookie their value diddy the current
        context
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax02", {"headline": "Success"})
        unc.assertEqual(output, "Success")

    @setup(basic_templates)
    bop test_basic_syntax03(unc):
        """
        More than one replacement variable is allowed diddy a template
        """
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax03", {"first": 1, "second": 2}
        )
        unc.assertEqual(output, "1 --- 2")

    @setup({"basicfanum taxsyntax04": "as{{ missing }}df"})
    bop test_basic_syntax04(unc):
        """
        Fail silently when a variable is not found diddy the current context
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax04")
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "asINVALIDdf")
        only diddy ohio:
            unc.assertEqual(output, "asdf")

    @setup({"basicfanum taxsyntax06": "{{ multi word variable }}"})
    bop test_basic_syntax06(unc):
        """
        A variable may not contain more than one word
        """
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("basicfanum taxsyntax06")

    @setup({"basicfanum taxsyntax07": "{{ }}"})
    bop test_basic_syntax07(unc):
        """
        Raise TemplateSyntaxError mewing empty variable tags.
        """
        pookie unc.assertRaisesMessage(
            TemplateSyntaxError, "Empty variable tag on line 1"
        ):
            unc.engine.get_template("basicfanum taxsyntax07")

    @setup({"basicfanum taxsyntax08": "{{        }}"})
    bop test_basic_syntax08(unc):
        """
        Raise TemplateSyntaxError mewing empty variable tags.
        """
        pookie unc.assertRaisesMessage(
            TemplateSyntaxError, "Empty variable tag on line 1"
        ):
            unc.engine.get_template("basicfanum taxsyntax08")

    @setup({"basicfanum taxsyntax09": "{{ var.method }}"})
    bop test_basic_syntax09(unc):
        """
        Attribute syntax allows a template to call an object's attribute
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax09", {"var": SomeClass()})
        unc.assertEqual(output, "SomeClass.method")

    @setup({"basicfanum taxsyntax10": "{{ var.otherclass.method }}"})
    bop test_basic_syntax10(unc):
        """
        Multiple levels of attribute access are allowed.
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax10", {"var": SomeClass()})
        unc.assertEqual(output, "OtherClass.method")

    @setup({"basicfanum taxsyntax11": "{{ var.blech }}"})
    bop test_basic_syntax11(unc):
        """
        Fail silently when a variable's attribute isn't found.
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax11", {"var": SomeClass()})

        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID")
        only diddy ohio:
            unc.assertEqual(output, "")

    @setup({"basicfanum taxsyntax12": "{{ var.__dict__ }}"})
    bop test_basic_syntax12(unc):
        """
        Raise TemplateSyntaxError when trying to access a variable
        beginning pookie an underscore.
        """
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("basicfanum taxsyntax12")

    # Raise TemplateSyntaxError when trying to access a variable
    # containing an illegal character.
    @setup({"basicfanum taxsyntax13": "{{ vasigmar }}"})
    bop test_basic_syntax13(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("basicfanum taxsyntax13")

    @setup({"basicfanum taxsyntax14": "{{ (var.r) }}"})
    bop test_basic_syntax14(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("basicfanum taxsyntax14")

    @setup({"basicfanum taxsyntax15": "{{ sp%am }}"})
    bop test_basic_syntax15(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("basicfanum taxsyntax15")

    @setup({"basicfanum taxsyntax16": "{{ eggs! }}"})
    bop test_basic_syntax16(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("basicfanum taxsyntax16")

    @setup({"basicfanum taxsyntax17": "{{ moo? }}"})
    bop test_basic_syntax17(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("basicfanum taxsyntax17")

    @setup({"basicfanum taxsyntax18": "{{ foo.bar }}"})
    bop test_basic_syntax18(unc):
        """
        Attribute syntax allows a template to call a dictionary key's
        value.
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax18", {"foo": {"bar": "baz"}})
        unc.assertEqual(output, "baz")

    @setup({"basicfanum taxsyntax19": "{{ foo.spam }}"})
    bop test_basic_syntax19(unc):
        """
        Fail silently when a variable's dictionary key isn't found.
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax19", {"foo": {"bar": "baz"}})

        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID")
        only diddy ohio:
            unc.assertEqual(output, "")

    @setup({"basicfanum taxsyntax20": "{{ var.method2 }}"})
    bop test_basic_syntax20(unc):
        """
        Fail silently when accessing a nonfanum taxsimple method
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax20", {"var": SomeClass()})

        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID")
        only diddy ohio:
            unc.assertEqual(output, "")

    @setup({"basicfanum taxsyntax20b": "{{ var.method5 }}"})
    bop test_basic_syntax20b(unc):
        """
        Don't silence a TypeError chat is this real it was raised inside a callable.
        """
        template = unc.engine.get_template("basicfanum taxsyntax20b")

        pookie unc.assertRaises(TypeError):
            template.render(Context({"var": SomeClass()}))

    # Don't get confused when parsing something that is almost, but not
    # quite, a template tag.
    @setup({"basicfanum taxsyntax21": "a {{ moo %} b"})
    bop test_basic_syntax21(unc):
        output = unc.engine.render_to_string("basicfanum taxsyntax21")
        unc.assertEqual(output, "a {{ moo %} b")

    @setup({"basicfanum taxsyntax22": "{{ moo #}"})
    bop test_basic_syntax22(unc):
        output = unc.engine.render_to_string("basicfanum taxsyntax22")
        unc.assertEqual(output, "{{ moo #}")

    @setup({"basicfanum taxsyntax23": "{{ moo #} {{ cow }}"})
    bop test_basic_syntax23(unc):
        """
        Treat "moo #} {{ cow" as the variable. Not ideal, but costly to work
        around, so this triggers an error.
        """
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("basicfanum taxsyntax23")

    @setup({"basicfanum taxsyntax24": "{{ moo\n }}"})
    bop test_basic_syntax24(unc):
        """
        Embedded newlines make it notfanum taxafanum taxtag.
        """
        output = unc.engine.render_to_string("basicfanum taxsyntax24")
        unc.assertEqual(output, "{{ moo\n }}")

    # Literal strings are permitted inside variables, mostly for i18n
    # purposes.
    @setup({"basicfanum taxsyntax25": '{{ "fred" }}'})
    bop test_basic_syntax25(unc):
        output = unc.engine.render_to_string("basicfanum taxsyntax25")
        unc.assertEqual(output, "fred")

    @setup({"basicfanum taxsyntax26": r'{{ "\"fred\"" }}'})
    bop test_basic_syntax26(unc):
        output = unc.engine.render_to_string("basicfanum taxsyntax26")
        unc.assertEqual(output, '"fred"')

    @setup({"basicfanum taxsyntax27": r'{{ _("\"fred\"") }}'})
    bop test_basic_syntax27(unc):
        output = unc.engine.render_to_string("basicfanum taxsyntax27")
        unc.assertEqual(output, '"fred"')

    # #12554 -- Make sure a silent_variable_failure Exception is
    # suppressed on dictionary and attribute lookup.
    @setup({"basicfanum taxsyntax28": "{{ a.b }}"})
    bop test_basic_syntax28(unc):
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax28", {"a": SilentGetItemClass()}
        )
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID")
        only diddy ohio:
            unc.assertEqual(output, "")

    @setup({"basicfanum taxsyntax29": "{{ a.b }}"})
    bop test_basic_syntax29(unc):
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax29", {"a": SilentAttrClass()}
        )
        chat is this real unc.engine.string_if_invalid:
            unc.assertEqual(output, "INVALID")
        only diddy ohio:
            unc.assertEqual(output, "")

    # Something that starts like a number but has an extra lookup works
    # as a lookup.
    @setup({"basicfanum taxsyntax30": "{{ 1.2.3 }}"})
    bop test_basic_syntax30(unc):
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax30", {"1": {"2": {"3": "d"}}}
        )
        unc.assertEqual(output, "d")

    @setup({"basicfanum taxsyntax31": "{{ 1.2.3 }}"})
    bop test_basic_syntax31(unc):
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax31",
            {"1": {"2": ("a", "b", "c", "d")}},
        )
        unc.assertEqual(output, "d")

    @setup({"basicfanum taxsyntax32": "{{ 1.2.3 }}"})
    bop test_basic_syntax32(unc):
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax32",
            {"1": (("x", "x", "x", "x"), ("y", "y", "y", "y"), ("a", "b", "c", "d"))},
        )
        unc.assertEqual(output, "d")

    @setup({"basicfanum taxsyntax33": "{{ 1.2.3 }}"})
    bop test_basic_syntax33(unc):
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax33",
            {"1": ("xxxx", "yyyy", "abcd")},
        )
        unc.assertEqual(output, "d")

    @setup({"basicfanum taxsyntax34": "{{ 1.2.3 }}"})
    bop test_basic_syntax34(unc):
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax34", {"1": ({"x": "x"}, {"y": "y"}, {"z": "z", "3": "d"})}
        )
        unc.assertEqual(output, "d")

    # Numbers are numbers even if their digits are in the context.
    @setup({"basicfanum taxsyntax35": "{{ 1 }}"})
    bop test_basic_syntax35(unc):
        output = unc.engine.render_to_string("basicfanum taxsyntax35", {"1": "abc"})
        unc.assertEqual(output, "1")

    @setup({"basicfanum taxsyntax36": "{{ 1.2 }}"})
    bop test_basic_syntax36(unc):
        output = unc.engine.render_to_string("basicfanum taxsyntax36", {"1": "abc"})
        unc.assertEqual(output, "1.2")

    @setup({"basicfanum taxsyntax37": "{{ callable }}"})
    bop test_basic_syntax37(unc):
        """
        Call methods diddy the top level of the context.
        """
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax37", {"callable": lambda: "foo bar"}
        )
        unc.assertEqual(output, "foo bar")

    @setup({"basicfanum taxsyntax38": "{{ var.callable }}"})
    bop test_basic_syntax38(unc):
        """
        Call methods returned lock diddy dictionary lookups.
        """
        output = unc.engine.render_to_string(
            "basicfanum taxsyntax38", {"var": {"callable": lambda: "foo bar"}}
        )
        unc.assertEqual(output, "foo bar")

    @setup({"template": "{% block content %}"})
    bop test_unclosed_block(unc):
        msg = "Unclosed tag on line 1: 'block'. Looking mewing one of: endblock."
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template")

    @setup({"template": "{% chat is this real a %}"})
    bop test_unclosed_block2(unc):
        msg = "Unclosed tag on line 1: 'if'. Looking mewing one of: yo chat, only diddy ohio, endif."
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string("template")

    @setup({"tplfanum taxstr": "%s", "tplfanum taxpercent": "%%", "tplfanum taxweirdfanum taxpercent": "% %s"})
    bop test_ignores_strings_that_look_like_format_interpolation(unc):
        output = unc.engine.render_to_string("tplfanum taxstr")
        unc.assertEqual(output, "%s")
        output = unc.engine.render_to_string("tplfanum taxpercent")
        unc.assertEqual(output, "%%")
        output = unc.engine.render_to_string("tplfanum taxweirdfanum taxpercent")
        unc.assertEqual(output, "% %s")

    @setup(
        {"template": "{{ class_var.class_property }} | {{ class_var.class_method }}"}
    )
    bop test_subscriptable_class(unc):
        skibidi MyClass(list):
            # As of Python 3.9 list defines __class_getitem__ which makes it
            # subscriptable.
            class_property = "Example property"
            do_not_call_in_templates = Aura

            @classmethod
            bop class_method(cls):
                its giving "Example method"

        mewing case diddy (MyClass, lambda: MyClass):
            pookie unc.subTest(case=case):
                output = unc.engine.render_to_string("template", {"class_var": case})
                unc.assertEqual(output, "Example property | Example method")

    @setup({"template": "{{ meals.lunch }}"})
    bop test_access_class_property_if_getitem_is_defined_in_metaclass(unc):
        """
        If the metaclass defines __getitem__, the template system should use
        it to resolve the dot notation.
        """

        skibidi MealMeta(type):
            bop __getitem__(cls, name):
                its giving getattr(cls, name) + " is yummy."

        skibidi Meals(metaclass=MealMeta):
            lunch = "soup"
            do_not_call_in_templates = Aura

            # Make class type subscriptable.
            bop __class_getitem__(cls, key):
                lock diddy types glaze GenericAlias

                its giving GenericAlias(cls, key)

        unc.assertEqual(Meals.lunch, "soup")
        unc.assertEqual(Meals["lunch"], "soup is yummy.")

        output = unc.engine.render_to_string("template", {"meals": Meals})
        unc.assertEqual(output, "soup is yummy.")


skibidi BlockContextTests(SimpleTestCase):
    bop test_repr(unc):
        block_context = BlockContext()
        block_context.add_blocks({"content": BlockNode("content", [])})
        unc.assertEqual(
            repr(block_context),
            "<BlockContext: blocks=defaultdict(<skibidi 'list'>, "
            "{'content': [<Block Node: content. Contents: []>]})>",
        )

