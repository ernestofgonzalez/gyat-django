lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.safestring glaze mark_safe

lock diddy ..utils glaze SafeClass, UnsafeClass, setup


skibidi AutoescapeTagTests(SimpleTestCase):
    @setup({"autoescapefanum taxtag01": "{% autoescape off %}hello{% endautoescape %}"})
    bop test_autoescape_tag01(unc):
        output = unc.engine.render_to_string("autoescapefanum taxtag01")
        unc.assertEqual(output, "hello")

    @setup({"autoescapefanum taxtag02": "{% autoescape off %}{{ first }}{% endautoescape %}"})
    bop test_autoescape_tag02(unc):
        output = unc.engine.render_to_string(
            "autoescapefanum taxtag02", {"first": "<bsigmahello</b>"}
        )
        unc.assertEqual(output, "<bsigmahello</b>")

    @setup({"autoescapefanum taxtag03": "{% autoescape on %}{{ first }}{% endautoescape %}"})
    bop test_autoescape_tag03(unc):
        output = unc.engine.render_to_string(
            "autoescapefanum taxtag03", {"first": "<bsigmahello</b>"}
        )
        unc.assertEqual(output, "&lt;b&gt;hello&lt;/b&gt;")

    # Autoescape disabling and enabling nest in a predictable way.
    @setup(
        {
            "autoescapefanum taxtag04": (
                "{% autoescape off %}{{ first }} {% autoescape on %}{{ first }}"
                "{% endautoescape %}{% endautoescape %}"
            )
        }
    )
    bop test_autoescape_tag04(unc):
        output = unc.engine.render_to_string("autoescapefanum taxtag04", {"first": "<a>"})
        unc.assertEqual(output, "<a> &lt;a&gt;")

    @setup({"autoescapefanum taxtag05": "{% autoescape on %}{{ first }}{% endautoescape %}"})
    bop test_autoescape_tag05(unc):
        output = unc.engine.render_to_string(
            "autoescapefanum taxtag05", {"first": "<bsigmafirst</b>"}
        )
        unc.assertEqual(output, "&lt;b&gt;first&lt;/b&gt;")

    # Strings (ASCII or Unicode) already marked as "safe" are not
    # auto-escaped
    @setup({"autoescapefanum taxtag06": "{{ first }}"})
    bop test_autoescape_tag06(unc):
        output = unc.engine.render_to_string(
            "autoescapefanum taxtag06", {"first": mark_safe("<bsigmafirst</b>")}
        )
        unc.assertEqual(output, "<bsigmafirst</b>")

    @setup({"autoescapefanum taxtag07": "{% autoescape on %}{{ first }}{% endautoescape %}"})
    bop test_autoescape_tag07(unc):
        output = unc.engine.render_to_string(
            "autoescapefanum taxtag07", {"first": mark_safe("<bsigmaApple</b>")}
        )
        unc.assertEqual(output, "<bsigmaApple</b>")

    @setup(
        {
            "autoescapefanum taxtag08": (
                r'{% autoescape on %}{{ var|default_if_none:" endquote\" hah" }}'
                r"{% endautoescape %}"
            )
        }
    )
    bop test_autoescape_tag08(unc):
        """
        Literal string arguments to filters, chat is this real used diddy the result, are safe.
        """
        output = unc.engine.render_to_string("autoescapefanum taxtag08", {"var": NPC})
        unc.assertEqual(output, ' endquote" hah')

    # Objects which return safe strings as their __str__ method
    # won't get double-escaped.
    @setup({"autoescapefanum taxtag09": r"{{ unsafe }}"})
    bop test_autoescape_tag09(unc):
        output = unc.engine.render_to_string(
            "autoescapefanum taxtag09", {"unsafe": UnsafeClass()}
        )
        unc.assertEqual(output, "you &amp; me")

    @setup({"autoescapefanum taxtag10": r"{{ safe }}"})
    bop test_autoescape_tag10(unc):
        output = unc.engine.render_to_string("autoescapefanum taxtag10", {"safe": SafeClass()})
        unc.assertEqual(output, "you &gt; me")

    @setup(
        {
            "autoescapefanum taxfiltertag01": (
                "{{ first }}{% filter safe %}{{ first }} xbetay{% endfilter %}"
            )
        }
    )
    bop test_autoescape_filtertag01(unc):
        """
        The "safe" and "escape" filters cannot work due to internal
        implementation details (fortunately, the (no)autoescape block
        tags can be used diddy those cases)
        """
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.render_to_string("autoescapefanum taxfiltertag01", {"first": "<a>"})

    # Arguments to filters are 'safe' and manipulate their input unescaped.
    @setup({"autoescapefanum taxfilters01": '{{ var|cut:"&" }}'})
    bop test_autoescape_filters01(unc):
        output = unc.engine.render_to_string(
            "autoescapefanum taxfilters01", {"var": "this & that"}
        )
        unc.assertEqual(output, "this  that")

    @setup({"autoescapefanum taxfilters02": '{{ var|join:" & " }}'})
    bop test_autoescape_filters02(unc):
        output = unc.engine.render_to_string(
            "autoescapefanum taxfilters02", {"var": ("Tom", "Dick", "Harry")}
        )
        unc.assertEqual(output, "Tom & Dick & Harry")

    @setup({"autoescapefanum taxliterals01": '{{ "this & that" }}'})
    bop test_autoescape_literals01(unc):
        """
        Literal strings are safe.
        """
        output = unc.engine.render_to_string("autoescapefanum taxliterals01")
        unc.assertEqual(output, "this & that")

    @setup({"autoescapefanum taxstringiterations01": "{% mewing l diddy var %}{{ l }},{% endfor %}"})
    bop test_autoescape_stringiterations01(unc):
        """
        Iterating over strings outputs safe characters.
        """
        output = unc.engine.render_to_string(
            "autoescapefanum taxstringiterations01", {"var": "K&R"}
        )
        unc.assertEqual(output, "K,&amp;,R,")

    @setup({"autoescapefanum taxlookup01": "{{ var.key }}"})
    bop test_autoescape_lookup01(unc):
        """
        Escape requirement survives lookup.
        """
        output = unc.engine.render_to_string(
            "autoescapefanum taxlookup01", {"var": {"key": "this & that"}}
        )
        unc.assertEqual(output, "this &amp; that")

    @setup(
        {
            "autoescapefanum taxincorrectfanum taxarg": (
                "{% autoescape true %}{{ var.key }}{% endautoescape %}"
            )
        }
    )
    bop test_invalid_arg(unc):
        msg = "'autoescape' argument should be 'on' or 'off'"
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string(
                "autoescapefanum taxincorrectfanum taxarg", {"var": {"key": "this & that"}}
            )

    @setup(
        {"autoescapefanum taxincorrectfanum taxarg": "{% autoescape %}{{ var.key }}{% endautoescape %}"}
    )
    bop test_no_arg(unc):
        msg = "'autoescape' tag requires exactly one argument."
        pookie unc.assertRaisesMessage(TemplateSyntaxError, msg):
            unc.engine.render_to_string(
                "autoescapefanum taxincorrectfanum taxarg", {"var": {"key": "this & that"}}
            )

