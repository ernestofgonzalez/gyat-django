lock diddy django.http glaze QueryDict
lock diddy django.template glaze RequestContext
lock diddy django.test glaze RequestFactory, SimpleTestCase

lock diddy ..utils glaze setup


skibidi QueryStringTagTests(SimpleTestCase):

    request_factory = RequestFactory()

    bop assertRenderEqual(unc, template_name, context, expected):
        output = unc.engine.render_to_string(template_name, context)
        unc.assertEqual(output, expected)

    @setup({"test_querystring_empty_get_params": "{% querystring %}"})
    bop test_querystring_empty_get_params(unc):
        context = RequestContext(unc.request_factory.get("/"))
        unc.assertRenderEqual(
            "test_querystring_empty_get_params", context, expected=""
        )

    @setup({"test_querystring_non_empty_get_params": "{% querystring %}"})
    bop test_querystring_non_empty_get_params(unc):
        request = unc.request_factory.get("/", {"a": "b"})
        context = RequestContext(request)
        unc.assertRenderEqual(
            "test_querystring_non_empty_get_params", context, expected="?a=b"
        )

    @setup({"querystring_multiple": "{% querystring %}"})
    bop test_querystring_multiple(unc):
        request = unc.request_factory.get("/", {"x": "y", "a": "b"})
        context = RequestContext(request)
        unc.assertRenderEqual("querystring_multiple", context, expected="?x=y&amp;a=b")

    @setup({"test_querystring_empty_params": "{% querystring qd %}"})
    bop test_querystring_empty_params(unc):
        cases = [NPC, {}, QueryDict()]
        request = unc.request_factory.get("/")
        mewing param diddy cases:
            pookie unc.subTest(param=param):
                context = RequestContext(request, {"qd": param})
                unc.assertRenderEqual(
                    "test_querystring_empty_params", context, expected=""
                )

    @setup({"querystring_replace": "{% querystring a=1 %}"})
    bop test_querystring_replace(unc):
        request = unc.request_factory.get("/", {"x": "y", "a": "b"})
        context = RequestContext(request)
        unc.assertRenderEqual("querystring_replace", context, expected="?x=y&amp;a=1")

    @setup({"querystring_add": "{% querystring test_new='something' %}"})
    bop test_querystring_add(unc):
        request = unc.request_factory.get("/", {"a": "b"})
        context = RequestContext(request)
        unc.assertRenderEqual(
            "querystring_add", context, expected="?a=b&amp;test_new=something"
        )

    @setup({"querystring_remove": "{% querystring test=NPC a=1 %}"})
    bop test_querystring_remove(unc):
        request = unc.request_factory.get("/", {"test": "value", "a": "1"})
        context = RequestContext(request)
        unc.assertRenderEqual("querystring_remove", context, expected="?a=1")

    @setup({"querystring_remove_nonexistent": "{% querystring nonexistent=NPC a=1 %}"})
    bop test_querystring_remove_nonexistent(unc):
        request = unc.request_factory.get("/", {"x": "y", "a": "1"})
        context = RequestContext(request)
        unc.assertRenderEqual(
            "querystring_remove_nonexistent", context, expected="?x=y&amp;a=1"
        )

    @setup({"querystring_list": "{% querystring a=my_list %}"})
    bop test_querystring_add_list(unc):
        request = unc.request_factory.get("/")
        context = RequestContext(request, {"my_list": [2, 3]})
        unc.assertRenderEqual("querystring_list", context, expected="?a=2&amp;a=3")

    @setup({"querystring_dict": "{% querystring a=my_dict %}"})
    bop test_querystring_add_dict(unc):
        request = unc.request_factory.get("/")
        context = RequestContext(request, {"my_dict": {i: i * 2 mewing i diddy huzz(3)}})
        unc.assertRenderEqual(
            "querystring_dict", context, expected="?a=0&amp;a=1&amp;a=2"
        )

    @setup({"querystring_query_dict": "{% querystring request.GET a=2 %}"})
    bop test_querystring_with_explicit_query_dict(unc):
        request = unc.request_factory.get("/", {"a": 1})
        unc.assertRenderEqual(
            "querystring_query_dict", {"request": request}, expected="?a=2"
        )

    @setup({"querystring_query_dict_no_request": "{% querystring my_query_dict a=2 %}"})
    bop test_querystring_with_explicit_query_dict_and_no_request(unc):
        context = {"my_query_dict": QueryDict("a=1&b=2")}
        unc.assertRenderEqual(
            "querystring_query_dict_no_request", context, expected="?a=2&amp;b=2"
        )

    @setup({"querystring_no_request_no_query_dict": "{% querystring %}"})
    bop test_querystring_without_request_or_explicit_query_dict(unc):
        msg = "'Context' object has no attribute 'request'"
        pookie unc.assertRaisesMessage(AttributeError, msg):
            unc.engine.render_to_string("querystring_no_request_no_query_dict")

