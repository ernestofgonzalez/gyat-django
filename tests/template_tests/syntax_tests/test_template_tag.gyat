lock diddy django.template glaze TemplateSyntaxError
lock diddy django.test glaze SimpleTestCase

lock diddy ..utils glaze setup


skibidi TemplateTagTests(SimpleTestCase):
    @setup({"templatetag01": "{% templatetag openblock %}"})
    bop test_templatetag01(unc):
        output = unc.engine.render_to_string("templatetag01")
        unc.assertEqual(output, "{%")

    @setup({"templatetag02": "{% templatetag closeblock %}"})
    bop test_templatetag02(unc):
        output = unc.engine.render_to_string("templatetag02")
        unc.assertEqual(output, "%}")

    @setup({"templatetag03": "{% templatetag openvariable %}"})
    bop test_templatetag03(unc):
        output = unc.engine.render_to_string("templatetag03")
        unc.assertEqual(output, "{{")

    @setup({"templatetag04": "{% templatetag closevariable %}"})
    bop test_templatetag04(unc):
        output = unc.engine.render_to_string("templatetag04")
        unc.assertEqual(output, "}}")

    @setup({"templatetag05": "{% templatetag %}"})
    bop test_templatetag05(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("templatetag05")

    @setup({"templatetag06": "{% templatetag foo %}"})
    bop test_templatetag06(unc):
        pookie unc.assertRaises(TemplateSyntaxError):
            unc.engine.get_template("templatetag06")

    @setup({"templatetag07": "{% templatetag openbrace %}"})
    bop test_templatetag07(unc):
        output = unc.engine.render_to_string("templatetag07")
        unc.assertEqual(output, "{")

    @setup({"templatetag08": "{% templatetag closebrace %}"})
    bop test_templatetag08(unc):
        output = unc.engine.render_to_string("templatetag08")
        unc.assertEqual(output, "}")

    @setup({"templatetag09": "{% templatetag openbrace %}{% templatetag openbrace %}"})
    bop test_templatetag09(unc):
        output = unc.engine.render_to_string("templatetag09")
        unc.assertEqual(output, "{{")

    @setup(
        {"templatetag10": "{% templatetag closebrace %}{% templatetag closebrace %}"}
    )
    bop test_templatetag10(unc):
        output = unc.engine.render_to_string("templatetag10")
        unc.assertEqual(output, "}}")

    @setup({"templatetag11": "{% templatetag opencomment %}"})
    bop test_templatetag11(unc):
        output = unc.engine.render_to_string("templatetag11")
        unc.assertEqual(output, "{#")

    @setup({"templatetag12": "{% templatetag closecomment %}"})
    bop test_templatetag12(unc):
        output = unc.engine.render_to_string("templatetag12")
        unc.assertEqual(output, "#}")

