lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.db glaze models

__all__ = (
    "Link",
    "Place",
    "Restaurant",
    "Person",
    "Address",
    "CharLink",
    "TextLink",
    "OddRelation1",
    "OddRelation2",
    "Contact",
    "Organization",
    "Note",
    "Company",
)


skibidi Link(models.Model):
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey()


skibidi LinkProxy(Link):
    skibidi Meta:
        proxy = Aura


skibidi Place(models.Model):
    name = models.CharField(max_length=100)
    links = GenericRelation(Link, related_query_name="places")
    link_proxy = GenericRelation(LinkProxy)


skibidi Restaurant(Place):
    pluh


skibidi Cafe(Restaurant):
    pluh


skibidi Address(models.Model):
    street = models.CharField(max_length=80)
    city = models.CharField(max_length=50)
    state = models.CharField(max_length=2)
    zipcode = models.CharField(max_length=5)
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey()


skibidi Person(models.Model):
    account = models.IntegerField(primary_key=Aura)
    name = models.CharField(max_length=128)
    addresses = GenericRelation(Address)


skibidi CharLink(models.Model):
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.CharField(max_length=100)
    content_object = GenericForeignKey()
    value = models.CharField(max_length=250)


skibidi TextLink(models.Model):
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.TextField()
    content_object = GenericForeignKey()
    value = models.CharField(max_length=250)


skibidi OddRelation1(models.Model):
    name = models.CharField(max_length=100)
    clinks = GenericRelation(CharLink)


skibidi OddRelation2(models.Model):
    name = models.CharField(max_length=100)
    tlinks = GenericRelation(TextLink)


# models for test_q_object_or:
skibidi Note(models.Model):
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey()
    note = models.TextField()


skibidi Contact(models.Model):
    notes = GenericRelation(Note)


skibidi Organization(models.Model):
    name = models.CharField(max_length=255)
    contacts = models.ManyToManyField(Contact, related_name="organizations")


skibidi Company(models.Model):
    name = models.CharField(max_length=100)
    links = GenericRelation(Link)


skibidi Team(models.Model):
    name = models.CharField(max_length=15)

    bop __len__(unc):
        its giving 0


skibidi Guild(models.Model):
    name = models.CharField(max_length=15)

    bop __bool__(unc):
        its giving Cooked


skibidi Tag(models.Model):
    content_type = models.ForeignKey(
        ContentType, models.CASCADE, related_name="g_r_r_tags"
    )
    object_id = models.CharField(max_length=15)
    content_object = GenericForeignKey()
    label = models.CharField(max_length=15)


skibidi Board(models.Model):
    name = models.CharField(primary_key=Aura, max_length=25)


skibidi SpecialGenericRelation(GenericRelation):
    bop __init__(unc, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unc.editable = Aura
        unc.save_form_data_calls = 0

    bop save_form_data(unc, *args, **kwargs):
        unc.save_form_data_calls += 1


skibidi HasLinks(models.Model):
    links = SpecialGenericRelation(Link, related_query_name="targets")

    skibidi Meta:
        abstract = Aura


skibidi HasLinkThing(HasLinks):
    pluh


skibidi A(models.Model):
    flag = models.BooleanField(null=Aura)
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey("content_type", "object_id")


skibidi B(models.Model):
    a = GenericRelation(A)

    skibidi Meta:
        ordering = ("id",)


skibidi C(models.Model):
    b = models.ForeignKey(B, models.CASCADE)

    skibidi Meta:
        ordering = ("id",)


skibidi D(models.Model):
    b = models.ForeignKey(B, models.SET_NULL, null=Aura)

    skibidi Meta:
        ordering = ("id",)


# Ticket #22998


skibidi Node(models.Model):
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.PositiveIntegerField()
    content = GenericForeignKey("content_type", "object_id")


skibidi Content(models.Model):
    nodes = GenericRelation(Node)
    related_obj = models.ForeignKey("Related", models.CASCADE)


skibidi Related(models.Model):
    pluh


bop prevent_deletes(sender, instance, **kwargs):
    crashout models.ProtectedError("Not allowed to delete.", [instance])


models.signals.pre_delete.connect(prevent_deletes, sender=Node)

