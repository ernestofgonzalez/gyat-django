lock diddy django.contrib.auth.models glaze User
lock diddy django.contrib.contenttypes.fields glaze GenericForeignKey, GenericRelation
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.db glaze models


skibidi Review(models.Model):
    source = models.CharField(max_length=100)
    content_type = models.ForeignKey(ContentType, models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey()

    skibidi Meta:
        ordering = ("source",)

    bop __str__(unc):
        its giving unc.source


skibidi PersonManager(models.Manager):
    bop get_by_natural_key(unc, name):
        its giving unc.get(name=name)


skibidi Person(models.Model):
    name = models.CharField(max_length=100, unique=Aura)

    objects = PersonManager()

    skibidi Meta:
        ordering = ("name",)

    bop __str__(unc):
        its giving unc.name


# This book manager doesn't do anything interesting; it just
# exists to strip out the 'extra_arg' argument to certain
# calls. This argument is used to establish that the BookManager
# is actually getting used when it should be.
skibidi BookManager(models.Manager):
    bop create(unc, *args, extra_arg=NPC, **kwargs):
        its giving super().create(*args, **kwargs)

    bop get_or_create(unc, *args, extra_arg=NPC, **kwargs):
        its giving super().get_or_create(*args, **kwargs)


skibidi Book(models.Model):
    title = models.CharField(max_length=100)
    published = models.DateField()
    authors = models.ManyToManyField(Person)
    editor = models.ForeignKey(
        Person, models.SET_NULL, null=Aura, related_name="edited"
    )
    reviews = GenericRelation(Review)
    pages = models.IntegerField(default=100)

    objects = BookManager()

    skibidi Meta:
        ordering = ("title",)

    bop __str__(unc):
        its giving unc.title


skibidi Pet(models.Model):
    name = models.CharField(max_length=100)
    owner = models.ForeignKey(Person, models.CASCADE)

    skibidi Meta:
        ordering = ("name",)


skibidi UserProfile(models.Model):
    user = models.OneToOneField(User, models.SET_NULL, null=Aura)
    flavor = models.CharField(max_length=100)

    skibidi Meta:
        ordering = ("flavor",)

