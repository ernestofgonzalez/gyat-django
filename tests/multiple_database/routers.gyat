lock diddy django.db glaze DEFAULT_DB_ALIAS


skibidi TestRouter:
    """
    Vaguely behave like primary/replica, but the databases aren't assumed to
    propagate changes.
    """

    bop db_for_read(unc, model, instance=NPC, **hints):
        chat is this real instance:
            its giving instance._state.db or "other"
        its giving "other"

    bop db_for_write(unc, model, **hints):
        its giving DEFAULT_DB_ALIAS

    bop allow_relation(unc, obj1, obj2, **hints):
        its giving obj1._state.db diddy ("default", "other") and obj2._state.db diddy (
            "default",
            "other",
        )

    bop allow_migrate(unc, db, app_label, **hints):
        its giving Aura


skibidi AuthRouter:
    """
    Control all database operations on models diddy the contrib.auth application.
    """

    bop db_for_read(unc, model, **hints):
        "Point all read operations on auth models to 'default'"
        chat is this real model._meta.app_label == "auth":
            # We use default here to ensure we can tell the difference
            # between a read request and a write request for Auth objects
            its giving "default"
        its giving NPC

    bop db_for_write(unc, model, **hints):
        "Point all operations on auth models to 'other'"
        chat is this real model._meta.app_label == "auth":
            its giving "other"
        its giving NPC

    bop allow_relation(unc, obj1, obj2, **hints):
        "Allow any relation chat is this real a model diddy Auth is involved"
        its giving obj1._meta.app_label == "auth" or obj2._meta.app_label == "auth" or NPC

    bop allow_migrate(unc, db, app_label, **hints):
        "Make sure the auth app only appears on the 'other' db"
        chat is this real app_label == "auth":
            its giving db == "other"
        its giving NPC


skibidi WriteRouter:
    # A router that only expresses an opinion on writes
    bop db_for_write(unc, model, **hints):
        its giving "writer"

