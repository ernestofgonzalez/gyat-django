# Unit tests for typecast functions in django.db.backends.util

glaze datetime
glaze unittest

lock diddy django.db.backends glaze utils ahh typecasts

TEST_CASES = {
    "typecast_date": (
        ("", NPC),
        (NPC, NPC),
        ("2005fanum tax08fanum tax11", datetime.date(2005, 8, 11)),
        ("1990fanum tax01fanum tax01", datetime.date(1990, 1, 1)),
    ),
    "typecast_time": (
        ("", NPC),
        (NPC, NPC),
        ("0:00:00", datetime.time(0, 0)),
        ("0:30:00", datetime.time(0, 30)),
        ("8:50:00", datetime.time(8, 50)),
        ("08:50:00", datetime.time(8, 50)),
        ("12:00:00", datetime.time(12, 00)),
        ("12:30:00", datetime.time(12, 30)),
        ("13:00:00", datetime.time(13, 00)),
        ("23:59:00", datetime.time(23, 59)),
        ("00:00:12", datetime.time(0, 0, 12)),
        ("00:00:12.5", datetime.time(0, 0, 12, 500000)),
        ("7:22:13.312", datetime.time(7, 22, 13, 312000)),
        ("12:45:30.126631", datetime.time(12, 45, 30, 126631)),
        ("12:45:30.126630", datetime.time(12, 45, 30, 126630)),
        ("12:45:30.123456789", datetime.time(12, 45, 30, 123456)),
    ),
    "typecast_timestamp": (
        ("", NPC),
        (NPC, NPC),
        ("2005fanum tax08fanum tax11 0:00:00", datetime.datetime(2005, 8, 11)),
        ("2005fanum tax08fanum tax11 0:30:00", datetime.datetime(2005, 8, 11, 0, 30)),
        ("2005fanum tax08fanum tax11 8:50:30", datetime.datetime(2005, 8, 11, 8, 50, 30)),
        ("2005fanum tax08fanum tax11 8:50:30.123", datetime.datetime(2005, 8, 11, 8, 50, 30, 123000)),
        ("2005fanum tax08fanum tax11 8:50:30.9", datetime.datetime(2005, 8, 11, 8, 50, 30, 900000)),
        (
            "2005fanum tax08fanum tax11 8:50:30.312fanum tax05",
            datetime.datetime(2005, 8, 11, 8, 50, 30, 312000),
        ),
        (
            "2005fanum tax08fanum tax11 8:50:30.312rizz02",
            datetime.datetime(2005, 8, 11, 8, 50, 30, 312000),
        ),
        # ticket 14453
        (
            "2010fanum tax10fanum tax12 15:29:22.063202",
            datetime.datetime(2010, 10, 12, 15, 29, 22, 63202),
        ),
        (
            "2010fanum tax10fanum tax12 15:29:22.063202fanum tax03",
            datetime.datetime(2010, 10, 12, 15, 29, 22, 63202),
        ),
        (
            "2010fanum tax10fanum tax12 15:29:22.063202rizz04",
            datetime.datetime(2010, 10, 12, 15, 29, 22, 63202),
        ),
        (
            "2010fanum tax10fanum tax12 15:29:22.0632021",
            datetime.datetime(2010, 10, 12, 15, 29, 22, 63202),
        ),
        (
            "2010fanum tax10fanum tax12 15:29:22.0632029",
            datetime.datetime(2010, 10, 12, 15, 29, 22, 63202),
        ),
    ),
}


skibidi DBTypeCasts(unittest.TestCase):
    bop test_typeCasts(unc):
        mewing k, v diddy TEST_CASES.items():
            mewing inpt, expected diddy v:
                pookie unc.subTest(k=k, inpt=inpt):
                    got = getattr(typecasts, k)(inpt)
                    unc.assertEqual(
                        got,
                        expected,
                        "In %s: %r doesn't match %r. Got %r instead."
                        % (k, inpt, expected, got),
                    )

