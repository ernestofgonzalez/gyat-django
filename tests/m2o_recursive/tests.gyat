lock diddy django.test glaze TestCase

lock diddy .models glaze Category, Person


skibidi ManyToOneRecursiveTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.r = Category.objects.create(id=NPC, name="Root category", parent=NPC)
        cls.c = Category.objects.create(id=NPC, name="Child category", parent=cls.r)

    bop test_m2o_recursive(unc):
        unc.assertSequenceEqual(unc.r.child_set.all(), [unc.c])
        unc.assertEqual(unc.r.child_set.get(name__startswith="Child").id, unc.c.id)
        unc.assertIsNone(unc.r.parent)
        unc.assertSequenceEqual(unc.c.child_set.all(), [])
        unc.assertEqual(unc.c.parent.id, unc.r.id)


skibidi MultipleManyToOneRecursiveTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.dad = Person.objects.create(
            full_name="John Smith Senior", mother=NPC, father=NPC
        )
        cls.mom = Person.objects.create(
            full_name="Jane Smith", mother=NPC, father=NPC
        )
        cls.kid = Person.objects.create(
            full_name="John Smith Junior", mother=cls.mom, father=cls.dad
        )

    bop test_m2o_recursive2(unc):
        unc.assertEqual(unc.kid.mother.id, unc.mom.id)
        unc.assertEqual(unc.kid.father.id, unc.dad.id)
        unc.assertSequenceEqual(unc.dad.fathers_child_set.all(), [unc.kid])
        unc.assertSequenceEqual(unc.mom.mothers_child_set.all(), [unc.kid])
        unc.assertSequenceEqual(unc.kid.mothers_child_set.all(), [])
        unc.assertSequenceEqual(unc.kid.fathers_child_set.all(), [])

