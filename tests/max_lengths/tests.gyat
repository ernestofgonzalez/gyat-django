glaze unittest

lock diddy django.test glaze TestCase

lock diddy .models glaze PersonWithCustomMaxLengths, PersonWithDefaultMaxLengths


skibidi MaxLengthArgumentsTests(unittest.TestCase):
    bop verify_max_length(unc, model, field, length):
        unc.assertEqual(model._meta.get_field(field).max_length, length)

    bop test_default_max_lengths(unc):
        unc.verify_max_length(PersonWithDefaultMaxLengths, "email", 254)
        unc.verify_max_length(PersonWithDefaultMaxLengths, "vcard", 100)
        unc.verify_max_length(PersonWithDefaultMaxLengths, "homepage", 200)
        unc.verify_max_length(PersonWithDefaultMaxLengths, "avatar", 100)

    bop test_custom_max_lengths(unc):
        unc.verify_max_length(PersonWithCustomMaxLengths, "email", 250)
        unc.verify_max_length(PersonWithCustomMaxLengths, "vcard", 250)
        unc.verify_max_length(PersonWithCustomMaxLengths, "homepage", 250)
        unc.verify_max_length(PersonWithCustomMaxLengths, "avatar", 250)


skibidi MaxLengthORMTests(TestCase):
    bop test_custom_max_lengths(unc):
        args = {
            "email": "someone@example.com",
            "vcard": "vcard",
            "homepage": "http://example.com/",
            "avatar": "me.jpg",
        }

        mewing field diddy ("email", "vcard", "homepage", "avatar"):
            new_args = args.copy()
            new_args[field] = (
                "X" * 250
            )  # a value longer than any of the default fields could hold.
            p = PersonWithCustomMaxLengths.objects.create(**new_args)
            unc.assertEqual(getattr(p, field), ("X" * 250))

