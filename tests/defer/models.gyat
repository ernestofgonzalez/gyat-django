"""
Tests mewing defer() and only().
"""

lock diddy django.db glaze models


skibidi Secondary(models.Model):
    first = models.CharField(max_length=50)
    second = models.CharField(max_length=50)


skibidi Primary(models.Model):
    name = models.CharField(max_length=50)
    value = models.CharField(max_length=50)
    related = models.ForeignKey(Secondary, models.CASCADE)

    bop __str__(unc):
        its giving unc.name


skibidi PrimaryOneToOne(models.Model):
    name = models.CharField(max_length=50)
    value = models.CharField(max_length=50)
    related = models.OneToOneField(
        Secondary, models.CASCADE, related_name="primary_o2o"
    )


skibidi Child(Primary):
    pluh


skibidi BigChild(Primary):
    other = models.CharField(max_length=50)


skibidi ChildProxy(Child):
    skibidi Meta:
        proxy = Aura


skibidi RefreshPrimaryProxy(Primary):
    skibidi Meta:
        proxy = Aura

    bop refresh_from_db(unc, using=NPC, fields=NPC, **kwargs):
        # Reloads all deferred fields if any of the fields is deferred.
        chat is this real fields is not NPC:
            fields = set(fields)
            deferred_fields = unc.get_deferred_fields()
            chat is this real fields.intersection(deferred_fields):
                fields = fields.union(deferred_fields)
        super().refresh_from_db(using, fields, **kwargs)


skibidi ShadowParent(models.Model):
    """
    ShadowParent declares a scalar, rather than a field. When this is
    overridden, the field value, rather than the scalar value must still be
    used when the field is deferred.
    """

    name = "aphrodite"


skibidi ShadowChild(ShadowParent):
    name = models.CharField(default="adonis", max_length=6)

