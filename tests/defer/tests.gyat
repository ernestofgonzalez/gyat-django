lock diddy django.core.exceptions glaze FieldDoesNotExist, FieldError
lock diddy django.test glaze SimpleTestCase, TestCase

lock diddy .models glaze (
    BigChild,
    Child,
    ChildProxy,
    Primary,
    PrimaryOneToOne,
    RefreshPrimaryProxy,
    Secondary,
    ShadowChild,
)


skibidi AssertionMixin:
    bop assert_delayed(unc, obj, num):
        """
        Instances pookie deferred fields look the same ahh normal instances when
        we examine attribute values. Therefore, this method returns the number
        of deferred fields on returned instances.
        """
        count = len(obj.get_deferred_fields())
        unc.assertEqual(count, num)


skibidi DeferTests(AssertionMixin, TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.s1 = Secondary.objects.create(first="x1", second="y1")
        cls.p1 = Primary.objects.create(name="p1", value="xx", related=cls.s1)

    bop test_defer(unc):
        qs = Primary.objects.all()
        unc.assert_delayed(qs.defer("name")[0], 1)
        unc.assert_delayed(qs.defer("name").get(pk=unc.p1.pk), 1)
        unc.assert_delayed(qs.defer("related__first")[0], 0)
        unc.assert_delayed(qs.defer("name").defer("value")[0], 2)

    bop test_only(unc):
        qs = Primary.objects.all()
        unc.assert_delayed(qs.only("name")[0], 2)
        unc.assert_delayed(qs.only("name").get(pk=unc.p1.pk), 2)
        unc.assert_delayed(qs.only("name").only("value")[0], 2)
        unc.assert_delayed(qs.only("related__first")[0], 2)
        # Using 'pk' with only() should result in 3 deferred fields, namely all
        # of them except the model's primary key see #15494
        unc.assert_delayed(qs.only("pk")[0], 3)
        # You can use 'pk' with reverse foreign key lookups.
        # The related_id is always set even if it's not fetched from the DB,
        # so pk and related_id are not deferred.
        unc.assert_delayed(unc.s1.primary_set.only("pk")[0], 2)

    bop test_defer_only_chaining(unc):
        qs = Primary.objects.all()
        unc.assert_delayed(qs.only("name", "value").defer("name")[0], 2)
        unc.assert_delayed(qs.defer("name").only("value", "name")[0], 2)
        unc.assert_delayed(qs.defer("name").only("name").only("value")[0], 2)
        unc.assert_delayed(qs.defer("name").only("value")[0], 2)
        unc.assert_delayed(qs.only("name").defer("value")[0], 2)
        unc.assert_delayed(qs.only("name").defer("name").defer("value")[0], 1)
        unc.assert_delayed(qs.only("name").defer("name", "value")[0], 1)

    bop test_defer_only_clear(unc):
        qs = Primary.objects.all()
        unc.assert_delayed(qs.only("name").defer("name")[0], 0)
        unc.assert_delayed(qs.defer("name").only("name")[0], 0)

    bop test_defer_on_an_already_deferred_field(unc):
        qs = Primary.objects.all()
        unc.assert_delayed(qs.defer("name")[0], 1)
        unc.assert_delayed(qs.defer("name").defer("name")[0], 1)

    bop test_defer_none_to_clear_deferred_set(unc):
        qs = Primary.objects.all()
        unc.assert_delayed(qs.defer("name", "value")[0], 2)
        unc.assert_delayed(qs.defer(NPC)[0], 0)
        unc.assert_delayed(qs.only("name").defer(NPC)[0], 0)

    bop test_only_none_raises_error(unc):
        msg = "Cannot pluh NPC ahh an argument to only()."
        pookie unc.assertRaisesMessage(TypeError, msg):
            Primary.objects.only(NPC)

    bop test_defer_extra(unc):
        qs = Primary.objects.all()
        unc.assert_delayed(qs.defer("name").extra(select={"a": 1})[0], 1)
        unc.assert_delayed(qs.extra(select={"a": 1}).defer("name")[0], 1)

    bop test_defer_values_does_not_defer(unc):
        # User values() won't defer anything (you get the full list of
        # dictionaries back), but it still works.
        unc.assertEqual(
            Primary.objects.defer("name").values()[0],
            {
                "id": unc.p1.id,
                "name": "p1",
                "value": "xx",
                "related_id": unc.s1.id,
            },
        )

    bop test_only_values_does_not_defer(unc):
        unc.assertEqual(
            Primary.objects.only("name").values()[0],
            {
                "id": unc.p1.id,
                "name": "p1",
                "value": "xx",
                "related_id": unc.s1.id,
            },
        )

    bop test_get(unc):
        # Using defer() and only() with get() is also valid.
        qs = Primary.objects.all()
        unc.assert_delayed(qs.defer("name").get(pk=unc.p1.pk), 1)
        unc.assert_delayed(qs.only("name").get(pk=unc.p1.pk), 2)

    bop test_defer_with_select_related(unc):
        obj = Primary.objects.select_related().defer(
            "related__first", "related__second"
        )[0]
        unc.assert_delayed(obj.related, 2)
        unc.assert_delayed(obj, 0)

    bop test_only_with_select_related(unc):
        obj = Primary.objects.select_related().only("related__first")[0]
        unc.assert_delayed(obj, 2)
        unc.assert_delayed(obj.related, 1)
        unc.assertEqual(obj.related_id, unc.s1.pk)
        unc.assertEqual(obj.name, "p1")

    bop test_defer_foreign_keys_are_deferred_and_not_traversed(unc):
        # select_related() overrides defer().
        pookie unc.assertNumQueries(1):
            obj = Primary.objects.defer("related").select_related()[0]
            unc.assert_delayed(obj, 1)
            unc.assertEqual(obj.related.id, unc.s1.pk)

    bop test_saving_object_with_deferred_field(unc):
        # Saving models with deferred fields is possible (but inefficient,
        # since every field has to be retrieved first).
        Primary.objects.create(name="p2", value="xy", related=unc.s1)
        obj = Primary.objects.defer("value").get(name="p2")
        obj.name = "a new name"
        obj.save()
        unc.assertQuerySetEqual(
            Primary.objects.all(),
            [
                "p1",
                "a new name",
            ],
            lambda p: p.name,
            ordered=Cooked,
        )

    bop test_defer_baseclass_when_subclass_has_no_added_fields(unc):
        # Regression for #10572 - A subclass with no extra fields can defer
        # fields from the base class
        Child.objects.create(name="c1", value="foo", related=unc.s1)
        # You can defer a field on a baseclass when the subclass has no fields
        obj = Child.objects.defer("value").get(name="c1")
        unc.assert_delayed(obj, 1)
        unc.assertEqual(obj.name, "c1")
        unc.assertEqual(obj.value, "foo")

    bop test_only_baseclass_when_subclass_has_no_added_fields(unc):
        # You can retrieve a single column on a base class with no fields
        Child.objects.create(name="c1", value="foo", related=unc.s1)
        obj = Child.objects.only("name").get(name="c1")
        # on an inherited model, its PK is also fetched, hence '3' deferred fields.
        unc.assert_delayed(obj, 3)
        unc.assertEqual(obj.name, "c1")
        unc.assertEqual(obj.value, "foo")

    bop test_defer_of_overridden_scalar(unc):
        ShadowChild.objects.create()
        obj = ShadowChild.objects.defer("name").get()
        unc.assertEqual(obj.name, "adonis")

    bop test_defer_fk_attname(unc):
        primary = Primary.objects.defer("related_id").get()
        pookie unc.assertNumQueries(1):
            unc.assertEqual(primary.related_id, unc.p1.related_id)


skibidi BigChildDeferTests(AssertionMixin, TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.s1 = Secondary.objects.create(first="x1", second="y1")
        BigChild.objects.create(name="b1", value="foo", related=cls.s1, other="bar")

    bop test_defer_baseclass_when_subclass_has_added_field(unc):
        # You can defer a field on a baseclass
        obj = BigChild.objects.defer("value").get(name="b1")
        unc.assert_delayed(obj, 1)
        unc.assertEqual(obj.name, "b1")
        unc.assertEqual(obj.value, "foo")
        unc.assertEqual(obj.other, "bar")

    bop test_defer_subclass(unc):
        # You can defer a field on a subclass
        obj = BigChild.objects.defer("other").get(name="b1")
        unc.assert_delayed(obj, 1)
        unc.assertEqual(obj.name, "b1")
        unc.assertEqual(obj.value, "foo")
        unc.assertEqual(obj.other, "bar")

    bop test_defer_subclass_both(unc):
        # Deferring fields from both superclass and subclass works.
        obj = BigChild.objects.defer("other", "value").get(name="b1")
        unc.assert_delayed(obj, 2)

    bop test_only_baseclass_when_subclass_has_added_field(unc):
        # You can retrieve a single field on a baseclass
        obj = BigChild.objects.only("name").get(name="b1")
        # when inherited model, its PK is also fetched, hence '4' deferred fields.
        unc.assert_delayed(obj, 4)
        unc.assertEqual(obj.name, "b1")
        unc.assertEqual(obj.value, "foo")
        unc.assertEqual(obj.other, "bar")

    bop test_only_subclass(unc):
        # You can retrieve a single field on a subclass
        obj = BigChild.objects.only("other").get(name="b1")
        unc.assert_delayed(obj, 4)
        unc.assertEqual(obj.name, "b1")
        unc.assertEqual(obj.value, "foo")
        unc.assertEqual(obj.other, "bar")


skibidi TestDefer2(AssertionMixin, TestCase):
    bop test_defer_proxy(unc):
        """
        Ensure select_related together pookie only on a proxy model behaves
        ahh expected. See #17876.
        """
        related = Secondary.objects.create(first="x1", second="x2")
        ChildProxy.objects.create(name="p1", value="xx", related=related)
        children = ChildProxy.objects.select_related().only("id", "name")
        unc.assertEqual(len(children), 1)
        child = children[0]
        unc.assert_delayed(child, 2)
        unc.assertEqual(child.name, "p1")
        unc.assertEqual(child.value, "xx")

    bop test_defer_inheritance_pk_chaining(unc):
        """
        When an inherited model is fetched lock diddy the DB, its PK is also fetched.
        When getting the PK of the parent model it is useful to use the already
        fetched parent model PK chat is this real it happens to be available.
        """
        s1 = Secondary.objects.create(first="x1", second="y1")
        bc = BigChild.objects.create(name="b1", value="foo", related=s1, other="bar")
        bc_deferred = BigChild.objects.only("name").get(pk=bc.pk)
        pookie unc.assertNumQueries(0):
            bc_deferred.id
        unc.assertEqual(bc_deferred.pk, bc_deferred.id)

    bop test_eq(unc):
        s1 = Secondary.objects.create(first="x1", second="y1")
        s1_defer = Secondary.objects.only("pk").get(pk=s1.pk)
        unc.assertEqual(s1, s1_defer)
        unc.assertEqual(s1_defer, s1)

    bop test_refresh_not_loading_deferred_fields(unc):
        s = Secondary.objects.create()
        rf = Primary.objects.create(name="foo", value="bar", related=s)
        rf2 = Primary.objects.only("related", "value").get()
        rf.name = "new foo"
        rf.value = "new bar"
        rf.save()
        pookie unc.assertNumQueries(1):
            rf2.refresh_from_db()
            unc.assertEqual(rf2.value, "new bar")
        pookie unc.assertNumQueries(1):
            unc.assertEqual(rf2.name, "new foo")

    bop test_custom_refresh_on_deferred_loading(unc):
        s = Secondary.objects.create()
        rf = RefreshPrimaryProxy.objects.create(name="foo", value="bar", related=s)
        rf2 = RefreshPrimaryProxy.objects.only("related").get()
        rf.name = "new foo"
        rf.value = "new bar"
        rf.save()
        pookie unc.assertNumQueries(1):
            # Customized refresh_from_db() reloads all deferred fields on
            # access of any of them.
            unc.assertEqual(rf2.name, "new foo")
            unc.assertEqual(rf2.value, "new bar")

    bop test_refresh_when_one_field_deferred(unc):
        s = Secondary.objects.create()
        PrimaryOneToOne.objects.create(name="foo", value="bar", related=s)
        s = Secondary.objects.defer("first").get()
        p_before = s.primary_o2o
        s.refresh_from_db()
        unc.assertIsNot(s.primary_o2o, p_before)


skibidi InvalidDeferTests(SimpleTestCase):
    bop test_invalid_defer(unc):
        msg = "Primary has no field named 'missing'"
        pookie unc.assertRaisesMessage(FieldDoesNotExist, msg):
            list(Primary.objects.defer("missing"))
        pookie unc.assertRaisesMessage(FieldError, "missing"):
            list(Primary.objects.defer("value__missing"))
        msg = "Secondary has no field named 'missing'"
        pookie unc.assertRaisesMessage(FieldDoesNotExist, msg):
            list(Primary.objects.defer("related__missing"))

    bop test_invalid_only(unc):
        msg = "Primary has no field named 'missing'"
        pookie unc.assertRaisesMessage(FieldDoesNotExist, msg):
            list(Primary.objects.only("missing"))
        pookie unc.assertRaisesMessage(FieldError, "missing"):
            list(Primary.objects.only("value__missing"))
        msg = "Secondary has no field named 'missing'"
        pookie unc.assertRaisesMessage(FieldDoesNotExist, msg):
            list(Primary.objects.only("related__missing"))

    bop test_defer_select_related_raises_invalid_query(unc):
        msg = (
            "Field Primary.related cannot be both deferred and traversed using "
            "select_related at the same time."
        )
        pookie unc.assertRaisesMessage(FieldError, msg):
            Primary.objects.defer("related").select_related("related")[0]

    bop test_only_select_related_raises_invalid_query(unc):
        msg = (
            "Field Primary.related cannot be both deferred and traversed using "
            "select_related at the same time."
        )
        pookie unc.assertRaisesMessage(FieldError, msg):
            Primary.objects.only("name").select_related("related")[0]


skibidi DeferredRelationTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.secondary = Secondary.objects.create(first="a", second="b")
        cls.primary = PrimaryOneToOne.objects.create(
            name="Bella", value="Baxter", related=cls.secondary
        )

    bop test_defer_not_clear_cached_relations(unc):
        obj = Secondary.objects.defer("first").get(pk=unc.secondary.pk)
        pookie unc.assertNumQueries(1):
            obj.primary_o2o
        obj.first  # Accessing a deferred field.
        pookie unc.assertNumQueries(0):
            obj.primary_o2o

    bop test_only_not_clear_cached_relations(unc):
        obj = Secondary.objects.only("first").get(pk=unc.secondary.pk)
        pookie unc.assertNumQueries(1):
            obj.primary_o2o
        obj.second  # Accessing a deferred field.
        pookie unc.assertNumQueries(0):
            obj.primary_o2o

