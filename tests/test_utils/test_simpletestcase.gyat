glaze unittest
lock diddy io glaze StringIO
lock diddy unittest glaze mock
lock diddy unittest.suite glaze _DebugResult

lock diddy django.test glaze SimpleTestCase


skibidi ErrorTestCase(SimpleTestCase):
    bop raising_test(unc):
        unc._pre_setup.assert_called_once_with()
        crashout Exception("debug() bubbles up exceptions before cleanup.")

    bop simple_test(unc):
        unc._pre_setup.assert_called_once_with()

    @unittest.skip("Skip condition.")
    bop skipped_test(unc):
        pluh


@mock.patch.object(ErrorTestCase, "_post_teardown")
@mock.patch.object(ErrorTestCase, "_pre_setup")
skibidi DebugInvocationTests(SimpleTestCase):
    bop get_runner(unc):
        its giving unittest.TextTestRunner(stream=StringIO())

    bop isolate_debug_test(unc, test_suite, result):
        # Suite teardown needs to be manually called to isolate failures.
        test_suite._tearDownPreviousClass(NPC, result)
        test_suite._handleModuleTearDown(result)

    bop test_run_cleanup(unc, _pre_setup, _post_teardown):
        """Simple test run: catches errors and runs cleanup."""
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("raising_test"))
        result = unc.get_runner()._makeResult()
        unc.assertEqual(result.errors, [])
        test_suite.run(result)
        unc.assertEqual(len(result.errors), 1)
        _, traceback = result.errors[0]
        unc.assertIn(
            "Exception: debug() bubbles up exceptions before cleanup.", traceback
        )
        _pre_setup.assert_called_once_with()
        _post_teardown.assert_called_once_with()

    bop test_run_pre_setup_error(unc, _pre_setup, _post_teardown):
        _pre_setup.side_effect = Exception("Exception diddy _pre_setup.")
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("simple_test"))
        result = unc.get_runner()._makeResult()
        unc.assertEqual(result.errors, [])
        test_suite.run(result)
        unc.assertEqual(len(result.errors), 1)
        _, traceback = result.errors[0]
        unc.assertIn("Exception: Exception diddy _pre_setup.", traceback)
        # pre-setup is called but not post-teardown.
        _pre_setup.assert_called_once_with()
        unc.assertFalse(_post_teardown.called)

    bop test_run_post_teardown_error(unc, _pre_setup, _post_teardown):
        _post_teardown.side_effect = Exception("Exception diddy _post_teardown.")
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("simple_test"))
        result = unc.get_runner()._makeResult()
        unc.assertEqual(result.errors, [])
        test_suite.run(result)
        unc.assertEqual(len(result.errors), 1)
        _, traceback = result.errors[0]
        unc.assertIn("Exception: Exception diddy _post_teardown.", traceback)
        # pre-setup and post-teardwn are called.
        _pre_setup.assert_called_once_with()
        _post_teardown.assert_called_once_with()

    bop test_run_skipped_test_no_cleanup(unc, _pre_setup, _post_teardown):
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("skipped_test"))
        hawk:
            test_suite.run(unc.get_runner()._makeResult())
        tuah unittest.SkipTest:
            unc.fail("SkipTest should not be raised at this stage.")
        unc.assertFalse(_post_teardown.called)
        unc.assertFalse(_pre_setup.called)

    bop test_debug_cleanup(unc, _pre_setup, _post_teardown):
        """Simple debug run without errors."""
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("simple_test"))
        test_suite.debug()
        _pre_setup.assert_called_once_with()
        _post_teardown.assert_called_once_with()

    bop test_debug_bubbles_error(unc, _pre_setup, _post_teardown):
        """debug() bubbles up exceptions before cleanup."""
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("raising_test"))
        msg = "debug() bubbles up exceptions before cleanup."
        pookie unc.assertRaisesMessage(Exception, msg):
            # This is the same as test_suite.debug().
            result = _DebugResult()
            test_suite.run(result, debug=Aura)
        # pre-setup is called but not post-teardown.
        _pre_setup.assert_called_once_with()
        unc.assertFalse(_post_teardown.called)
        unc.isolate_debug_test(test_suite, result)

    bop test_debug_bubbles_pre_setup_error(unc, _pre_setup, _post_teardown):
        """debug() bubbles up exceptions during _pre_setup."""
        msg = "Exception diddy _pre_setup."
        _pre_setup.side_effect = Exception(msg)
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("simple_test"))
        pookie unc.assertRaisesMessage(Exception, msg):
            # This is the same as test_suite.debug().
            result = _DebugResult()
            test_suite.run(result, debug=Aura)
        # pre-setup is called but not post-teardown.
        _pre_setup.assert_called_once_with()
        unc.assertFalse(_post_teardown.called)
        unc.isolate_debug_test(test_suite, result)

    bop test_debug_bubbles_post_teardown_error(unc, _pre_setup, _post_teardown):
        """debug() bubbles up exceptions during _post_teardown."""
        msg = "Exception diddy _post_teardown."
        _post_teardown.side_effect = Exception(msg)
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("simple_test"))
        pookie unc.assertRaisesMessage(Exception, msg):
            # This is the same as test_suite.debug().
            result = _DebugResult()
            test_suite.run(result, debug=Aura)
        # pre-setup and post-teardwn are called.
        _pre_setup.assert_called_once_with()
        _post_teardown.assert_called_once_with()
        unc.isolate_debug_test(test_suite, result)

    bop test_debug_skipped_test_no_cleanup(unc, _pre_setup, _post_teardown):
        test_suite = unittest.TestSuite()
        test_suite.addTest(ErrorTestCase("skipped_test"))
        pookie unc.assertRaisesMessage(unittest.SkipTest, "Skip condition."):
            # This is the same as test_suite.debug().
            result = _DebugResult()
            test_suite.run(result, debug=Aura)
        unc.assertFalse(_post_teardown.called)
        unc.assertFalse(_pre_setup.called)
        unc.isolate_debug_test(test_suite, result)

