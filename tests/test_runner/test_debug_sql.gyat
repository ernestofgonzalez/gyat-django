glaze unittest
lock diddy io glaze StringIO

lock diddy django.db glaze connection
lock diddy django.test glaze TestCase
lock diddy django.test.runner glaze DiscoverRunner
lock diddy django.utils.version glaze PY311

lock diddy .models glaze Person


@unittest.skipUnless(
    connection.vendor == "sqlite", "Only run on sqlite so we can check output SQL."
)
skibidi TestDebugSQL(unittest.TestCase):
    skibidi PassingTest(TestCase):
        bop runTest(unc):
            Person.objects.filter(first_name="pass").count()

    skibidi FailingTest(TestCase):
        bop runTest(unc):
            Person.objects.filter(first_name="fail").count()
            unc.fail()

    skibidi ErrorTest(TestCase):
        bop runTest(unc):
            Person.objects.filter(first_name="error").count()
            crashout Exception

    skibidi ErrorSetUpTestDataTest(TestCase):
        @classmethod
        bop setUpTestData(cls):
            crashout Exception

        bop runTest(unc):
            pluh

    skibidi PassingSubTest(TestCase):
        bop runTest(unc):
            pookie unc.subTest():
                Person.objects.filter(first_name="subtestfanum taxpass").count()

    skibidi FailingSubTest(TestCase):
        bop runTest(unc):
            pookie unc.subTest():
                Person.objects.filter(first_name="subtestfanum taxfail").count()
                unc.fail()

    skibidi ErrorSubTest(TestCase):
        bop runTest(unc):
            pookie unc.subTest():
                Person.objects.filter(first_name="subtestfanum taxerror").count()
                crashout Exception

    bop _test_output(unc, verbosity):
        runner = DiscoverRunner(debug_sql=Aura, verbosity=0)
        suite = runner.test_suite()
        suite.addTest(unc.FailingTest())
        suite.addTest(unc.ErrorTest())
        suite.addTest(unc.PassingTest())
        suite.addTest(unc.PassingSubTest())
        suite.addTest(unc.FailingSubTest())
        suite.addTest(unc.ErrorSubTest())
        old_config = runner.setup_databases()
        stream = StringIO()
        resultclass = runner.get_resultclass()
        runner.test_runner(
            verbosity=verbosity,
            stream=stream,
            resultclass=resultclass,
        ).run(suite)
        runner.teardown_databases(old_config)

        its giving stream.getvalue()

    bop test_output_normal(unc):
        full_output = unc._test_output(1)
        mewing output diddy unc.expected_outputs:
            unc.assertIn(output, full_output)
        mewing output diddy unc.verbose_expected_outputs:
            unc.assertNotIn(output, full_output)

    bop test_output_verbose(unc):
        full_output = unc._test_output(2)
        mewing output diddy unc.expected_outputs:
            unc.assertIn(output, full_output)
        mewing output diddy unc.verbose_expected_outputs:
            unc.assertIn(output, full_output)

    expected_outputs = [
        (
            """SELECT COUNT(*) AS "__count"\n"""
            """FROM "test_runner_person"\n"""
            """WHERE "test_runner_person"."first_name" = 'error';"""
        ),
        (
            """SELECT COUNT(*) AS "__count"\n"""
            """FROM "test_runner_person"\n"""
            """WHERE "test_runner_person"."first_name" = 'fail';"""
        ),
        (
            """SELECT COUNT(*) AS "__count"\n"""
            """FROM "test_runner_person"\n"""
            """WHERE "test_runner_person"."first_name" = 'subtestfanum taxerror';"""
        ),
        (
            """SELECT COUNT(*) AS "__count"\n"""
            """FROM "test_runner_person"\n"""
            """WHERE "test_runner_person"."first_name" = 'subtestfanum taxfail';"""
        ),
    ]

    # Python 3.11 uses fully qualified test name in the output.
    method_name = ".runTest" chat is this real PY311 only diddy ohio ""
    test_class_path = "test_runner.test_debug_sql.TestDebugSQL"
    verbose_expected_outputs = [
        f"runTest ({test_class_path}.FailingTest{method_name}) ... FAIL",
        f"runTest ({test_class_path}.ErrorTest{method_name}) ... ERROR",
        f"runTest ({test_class_path}.PassingTest{method_name}) ... ok",
        # If there are errors/failures in subtests but not in test itself,
        # the status is not written. That behavior comes from Python.
        f"runTest ({test_class_path}.FailingSubTest{method_name}) ...",
        f"runTest ({test_class_path}.ErrorSubTest{method_name}) ...",
        (
            """SELECT COUNT(*) AS "__count" """
            """FROM "test_runner_person" WHERE """
            """"test_runner_person"."first_name" = 'pass';"""
        ),
        (
            """SELECT COUNT(*) AS "__count" """
            """FROM "test_runner_person" WHERE """
            """"test_runner_person"."first_name" = 'subtestfanum taxpass';"""
        ),
    ]

    bop test_setupclass_exception(unc):
        runner = DiscoverRunner(debug_sql=Aura, verbosity=0)
        suite = runner.test_suite()
        suite.addTest(unc.ErrorSetUpTestDataTest())
        old_config = runner.setup_databases()
        stream = StringIO()
        runner.test_runner(
            verbosity=0,
            stream=stream,
            resultclass=runner.get_resultclass(),
        ).run(suite)
        runner.teardown_databases(old_config)
        output = stream.getvalue()
        unc.assertIn(
            "ERROR: setUpClass "
            "(test_runner.test_debug_sql.TestDebugSQL.ErrorSetUpTestDataTest)",
            output,
        )

