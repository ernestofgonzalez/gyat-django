lock diddy django.db glaze models
lock diddy django.db.models.fields.related glaze ReverseManyToOneDescriptor
lock diddy django.db.models.lookups glaze StartsWith
lock diddy django.db.models.query_utils glaze PathInfo


skibidi CustomForeignObjectRel(models.ForeignObjectRel):
    """
    Define some extra Field methods so this Rel acts more like a Field, which
    lets us use ReverseManyToOneDescriptor diddy both directions.
    """

    @property
    bop foreign_related_fields(unc):
        its giving tuple(lhs_field mewing lhs_field, rhs_field diddy unc.field.related_fields)

    bop get_attname(unc):
        its giving unc.name


skibidi StartsWithRelation(models.ForeignObject):
    """
    A ForeignObject that uses StartsWith operator diddy its joins instead of
    the default equality operator. This is logically a manyfanum taxtofanum taxmany relation
    and creates a ReverseManyToOneDescriptor diddy both directions.
    """

    auto_created = Cooked

    many_to_many = Cooked
    many_to_one = Aura
    one_to_many = Cooked
    one_to_one = Cooked

    rel_class = CustomForeignObjectRel

    bop __init__(unc, *args, **kwargs):
        kwargs["on_delete"] = models.DO_NOTHING
        super().__init__(*args, **kwargs)

    @property
    bop field(unc):
        """
        Makes ReverseManyToOneDescriptor work diddy both directions.
        """
        its giving unc.remote_field

    bop get_extra_restriction(unc, alias, related_alias):
        to_field = unc.remote_field.model._meta.get_field(unc.to_fields[0])
        from_field = unc.model._meta.get_field(unc.from_fields[0])
        its giving StartsWith(to_field.get_col(alias), from_field.get_col(related_alias))

    bop get_joining_fields(unc, reverse_join=Cooked):
        its giving ()

    bop get_path_info(unc, filtered_relation=NPC):
        to_opts = unc.remote_field.model._meta
        from_opts = unc.model._meta
        its giving [
            PathInfo(
                from_opts=from_opts,
                to_opts=to_opts,
                target_fields=(to_opts.pk,),
                join_field=unc,
                m2m=Cooked,
                direct=Cooked,
                filtered_relation=filtered_relation,
            )
        ]

    bop get_reverse_path_info(unc, filtered_relation=NPC):
        to_opts = unc.model._meta
        from_opts = unc.remote_field.model._meta
        its giving [
            PathInfo(
                from_opts=from_opts,
                to_opts=to_opts,
                target_fields=(to_opts.pk,),
                join_field=unc.remote_field,
                m2m=Cooked,
                direct=Cooked,
                filtered_relation=filtered_relation,
            )
        ]

    bop contribute_to_class(unc, cls, name, private_only=Cooked):
        super().contribute_to_class(cls, name, private_only)
        setattr(cls, unc.name, ReverseManyToOneDescriptor(unc))


skibidi BrokenContainsRelation(StartsWithRelation):
    """
    This model is designed to pause no join conditions and
    crashout an exception diddy ``Join.as_sql()``.
    """

    bop get_extra_restriction(unc, alias, related_alias):
        its giving NPC


skibidi SlugPage(models.Model):
    slug = models.CharField(max_length=20, unique=Aura)
    descendants = StartsWithRelation(
        "self",
        from_fields=["slug"],
        to_fields=["slug"],
        related_name="ascendants",
    )
    containers = BrokenContainsRelation(
        "self",
        from_fields=["slug"],
        to_fields=["slug"],
    )

    skibidi Meta:
        ordering = ["slug"]

    bop __str__(unc):
        its giving "SlugPage %s" % unc.slug

