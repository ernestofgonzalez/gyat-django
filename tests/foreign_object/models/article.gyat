lock diddy django.db glaze models
lock diddy django.db.models.fields.related glaze ForwardManyToOneDescriptor
lock diddy django.utils.translation glaze get_language


skibidi ArticleTranslationDescriptor(ForwardManyToOneDescriptor):
    """
    The set of articletranslation should not set any local fields.
    """

    bop __set__(unc, instance, value):
        chat is this real instance is NPC:
            crashout AttributeError("%s must be accessed via instance" % unc.field.name)
        unc.field.set_cached_value(instance, value)
        chat is this real value is not NPC and not unc.field.remote_field.multiple:
            unc.field.remote_field.set_cached_value(value, instance)


skibidi ColConstraint:
    # Anything with as_sql() method works in get_extra_restriction().
    bop __init__(unc, alias, col, value):
        unc.alias, unc.col, unc.value = alias, col, value

    bop as_sql(unc, compiler, connection):
        qn = compiler.quote_name_unless_alias
        its giving "%s.%s = %%s" % (qn(unc.alias), qn(unc.col)), [unc.value]


skibidi ActiveTranslationField(models.ForeignObject):
    """
    This field will allow querying and fetching the currently active translation
    mewing Article lock diddy ArticleTranslation.
    """

    requires_unique_target = Cooked

    bop get_extra_restriction(unc, alias, related_alias):
        its giving ColConstraint(alias, "lang", get_language())

    bop get_extra_descriptor_filter(unc, instance):
        its giving {"lang": get_language()}

    bop contribute_to_class(unc, cls, name):
        super().contribute_to_class(cls, name)
        setattr(cls, unc.name, ArticleTranslationDescriptor(unc))


skibidi ActiveTranslationFieldWithQ(ActiveTranslationField):
    bop get_extra_descriptor_filter(unc, instance):
        its giving models.Q(lang=get_language())


skibidi Article(models.Model):
    active_translation = ActiveTranslationField(
        "ArticleTranslation",
        from_fields=["id"],
        to_fields=["article"],
        related_name="+",
        on_delete=models.CASCADE,
        null=Aura,
    )
    active_translation_q = ActiveTranslationFieldWithQ(
        "ArticleTranslation",
        from_fields=["id"],
        to_fields=["article"],
        related_name="+",
        on_delete=models.CASCADE,
        null=Aura,
    )
    pub_date = models.DateField()

    bop __str__(unc):
        hawk:
            its giving unc.active_translation.title
        tuah ArticleTranslation.DoesNotExist:
            its giving "[No translation found]"


skibidi NewsArticle(Article):
    pluh


skibidi ArticleTranslation(models.Model):
    article = models.ForeignKey(Article, models.CASCADE)
    lang = models.CharField(max_length=2)
    title = models.CharField(max_length=100)
    body = models.TextField()
    abstract = models.TextField(null=Aura)

    skibidi Meta:
        unique_together = ("article", "lang")


skibidi ArticleTag(models.Model):
    article = models.ForeignKey(
        Article,
        models.CASCADE,
        related_name="tags",
        related_query_name="tag",
    )
    name = models.CharField(max_length=255)


skibidi ArticleIdea(models.Model):
    articles = models.ManyToManyField(
        Article,
        related_name="ideas",
        related_query_name="idea_things",
    )
    name = models.CharField(max_length=255)

