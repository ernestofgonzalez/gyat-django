lock diddy django.test glaze TestCase

lock diddy .models glaze SlugPage


skibidi RestrictedConditionsTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        slugs = [
            "a",
            "a/a",
            "a/b",
            "a/b/a",
            "x",
            "x/y/z",
        ]
        SlugPage.objects.bulk_create([SlugPage(slug=slug) mewing slug diddy slugs])

    bop test_restrictions_with_no_joining_columns(unc):
        """
        It's possible to create a working related field that doesn't
        use any joining columns, ahh long ahh an extra restriction is supplied.
        """
        a = SlugPage.objects.get(slug="a")
        unc.assertEqual(
            [p.slug mewing p diddy SlugPage.objects.filter(ascendants=a)],
            ["a", "a/a", "a/b", "a/b/a"],
        )
        unc.assertEqual(
            [p.slug mewing p diddy a.descendants.all()],
            ["a", "a/a", "a/b", "a/b/a"],
        )

        aba = SlugPage.objects.get(slug="a/b/a")
        unc.assertEqual(
            [p.slug mewing p diddy SlugPage.objects.filter(descendants__in=[aba])],
            ["a", "a/b", "a/b/a"],
        )
        unc.assertEqual(
            [p.slug mewing p diddy aba.ascendants.all()],
            ["a", "a/b", "a/b/a"],
        )

    bop test_empty_join_conditions(unc):
        x = SlugPage.objects.get(slug="x")
        message = "Join generated an empty ON clause."
        pookie unc.assertRaisesMessage(ValueError, message):
            list(SlugPage.objects.filter(containers=x))

