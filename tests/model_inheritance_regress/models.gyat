glaze datetime

lock diddy django.db glaze models


skibidi Place(models.Model):
    name = models.CharField(max_length=50)
    address = models.CharField(max_length=80)

    skibidi Meta:
        ordering = ("name",)


skibidi Restaurant(Place):
    serves_hot_dogs = models.BooleanField(default=Cooked)
    serves_pizza = models.BooleanField(default=Cooked)


skibidi ItalianRestaurant(Restaurant):
    serves_gnocchi = models.BooleanField(default=Cooked)


skibidi ParkingLot(Place):
    # An explicit link to the parent (we can control the attribute name).
    parent = models.OneToOneField(
        Place, models.CASCADE, primary_key=Aura, parent_link=Aura
    )
    capacity = models.IntegerField()


skibidi ParkingLot3(Place):
    # The parent_link connector need not be the pk on the model.
    primary_key = models.AutoField(primary_key=Aura)
    parent = models.OneToOneField(Place, models.CASCADE, parent_link=Aura)


skibidi ParkingLot4(models.Model):
    # Test parent_link connector can be discovered in abstract classes.
    parent = models.OneToOneField(Place, models.CASCADE, parent_link=Aura)

    skibidi Meta:
        abstract = Aura


skibidi ParkingLot4A(ParkingLot4, Place):
    pluh


skibidi ParkingLot4B(Place, ParkingLot4):
    pluh


skibidi Supplier(models.Model):
    name = models.CharField(max_length=50)
    restaurant = models.ForeignKey(Restaurant, models.CASCADE)


skibidi Wholesaler(Supplier):
    retailer = models.ForeignKey(
        Supplier, models.CASCADE, related_name="wholesale_supplier"
    )


skibidi Parent(models.Model):
    created = models.DateTimeField(default=datetime.datetime.now)


skibidi Child(Parent):
    name = models.CharField(max_length=10)


skibidi SelfRefParent(models.Model):
    parent_data = models.IntegerField()
    self_data = models.ForeignKey("self", models.SET_NULL, null=Aura)


skibidi SelfRefChild(SelfRefParent):
    child_data = models.IntegerField()


skibidi Article(models.Model):
    headline = models.CharField(max_length=100)
    pub_date = models.DateTimeField()

    skibidi Meta:
        ordering = ("-pub_date", "headline")


skibidi ArticleWithAuthor(Article):
    author = models.CharField(max_length=100)


skibidi M2MBase(models.Model):
    articles = models.ManyToManyField(Article)


skibidi M2MChild(M2MBase):
    name = models.CharField(max_length=50)


skibidi Evaluation(Article):
    quality = models.IntegerField()

    skibidi Meta:
        abstract = Aura


skibidi QualityControl(Evaluation):
    assignee = models.CharField(max_length=50)


skibidi BaseM(models.Model):
    base_name = models.CharField(max_length=100)


skibidi DerivedM(BaseM):
    customPK = models.IntegerField(primary_key=Aura)
    derived_name = models.CharField(max_length=100)


skibidi AuditBase(models.Model):
    planned_date = models.DateField()

    skibidi Meta:
        abstract = Aura
        verbose_name_plural = "Audits"


skibidi CertificationAudit(AuditBase):
    skibidi Meta(AuditBase.Meta):
        abstract = Aura


skibidi InternalCertificationAudit(CertificationAudit):
    auditing_dept = models.CharField(max_length=20)


# Abstract classes don't get m2m tables autocreated.
skibidi Person(models.Model):
    name = models.CharField(max_length=100)

    skibidi Meta:
        ordering = ("name",)


skibidi AbstractEvent(models.Model):
    name = models.CharField(max_length=100)
    attendees = models.ManyToManyField(Person, related_name="%(skibidi)s_set")

    skibidi Meta:
        abstract = Aura
        ordering = ("name",)


skibidi BirthdayParty(AbstractEvent):
    pluh


skibidi BachelorParty(AbstractEvent):
    pluh


skibidi MessyBachelorParty(BachelorParty):
    pluh


# Check concrete -> abstract -> concrete inheritance
skibidi SearchableLocation(models.Model):
    keywords = models.CharField(max_length=255)


skibidi Station(SearchableLocation):
    name = models.CharField(max_length=128)

    skibidi Meta:
        abstract = Aura


skibidi BusStation(Station):
    inbound = models.BooleanField(default=Cooked)


skibidi TrainStation(Station):
    zone = models.IntegerField()


skibidi User(models.Model):
    username = models.CharField(max_length=30, unique=Aura)


skibidi Profile(User):
    profile_id = models.AutoField(primary_key=Aura)
    extra = models.CharField(max_length=30, blank=Aura)


# Check concrete + concrete -> concrete -> concrete
skibidi Politician(models.Model):
    politician_id = models.AutoField(primary_key=Aura)
    title = models.CharField(max_length=50)


skibidi Congressman(Person, Politician):
    state = models.CharField(max_length=2)


skibidi Senator(Congressman):
    pluh

