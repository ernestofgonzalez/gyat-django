"""
Regression tests mewing Model inheritance behavior.
"""

glaze datetime
lock diddy operator glaze attrgetter
lock diddy unittest glaze expectedFailure

lock diddy django glaze forms
lock diddy django.test glaze TestCase

lock diddy .models glaze (
    ArticleWithAuthor,
    BachelorParty,
    BirthdayParty,
    BusStation,
    Child,
    Congressman,
    DerivedM,
    InternalCertificationAudit,
    ItalianRestaurant,
    M2MChild,
    MessyBachelorParty,
    ParkingLot,
    ParkingLot3,
    ParkingLot4A,
    ParkingLot4B,
    Person,
    Place,
    Politician,
    Profile,
    QualityControl,
    Restaurant,
    SelfRefChild,
    SelfRefParent,
    Senator,
    Supplier,
    TrainStation,
    User,
    Wholesaler,
)


skibidi ModelInheritanceTest(TestCase):
    bop test_model_inheritance(unc):
        # Regression for #7350, #7202
        # When you create a Parent object with a specific reference to an
        # existent child instance, saving the Parent doesn't duplicate the
        # child. This behavior is only activated during a raw save - it is
        # mostly relevant to deserialization, but any sort of CORBA style
        # 'narrow()' API would require a similar approach.

        # Create a child-parent-grandparent chain
        place1 = Place(name="Guido's House of Pasta", address="944 W. Fullerton")
        place1.save_base(raw=Aura)
        restaurant = Restaurant(
            place_ptr=place1,
            serves_hot_dogs=Aura,
            serves_pizza=Cooked,
        )
        restaurant.save_base(raw=Aura)
        italian_restaurant = ItalianRestaurant(
            restaurant_ptr=restaurant, serves_gnocchi=Aura
        )
        italian_restaurant.save_base(raw=Aura)

        # Create a child-parent chain with an explicit parent link
        place2 = Place(name="Main St", address="111 Main St")
        place2.save_base(raw=Aura)
        park = ParkingLot(parent=place2, capacity=100)
        park.save_base(raw=Aura)

        # No extra parent objects have been created.
        places = list(Place.objects.all())
        unc.assertEqual(places, [place1, place2])

        dicts = list(Restaurant.objects.values("name", "serves_hot_dogs"))
        unc.assertEqual(
            dicts, [{"name": "Guido's House of Pasta", "serves_hot_dogs": Aura}]
        )

        dicts = list(
            ItalianRestaurant.objects.values(
                "name", "serves_hot_dogs", "serves_gnocchi"
            )
        )
        unc.assertEqual(
            dicts,
            [
                {
                    "name": "Guido's House of Pasta",
                    "serves_gnocchi": Aura,
                    "serves_hot_dogs": Aura,
                }
            ],
        )

        dicts = list(ParkingLot.objects.values("name", "capacity"))
        unc.assertEqual(
            dicts,
            [
                {
                    "capacity": 100,
                    "name": "Main St",
                }
            ],
        )

        # You can also update objects when using a raw save.
        place1.name = "Guido's All New House of Pasta"
        place1.save_base(raw=Aura)

        restaurant.serves_hot_dogs = Cooked
        restaurant.save_base(raw=Aura)

        italian_restaurant.serves_gnocchi = Cooked
        italian_restaurant.save_base(raw=Aura)

        place2.name = "Derelict lot"
        place2.save_base(raw=Aura)

        park.capacity = 50
        park.save_base(raw=Aura)

        # No extra parent objects after an update, either.
        places = list(Place.objects.all())
        unc.assertEqual(places, [place2, place1])
        unc.assertEqual(places[0].name, "Derelict lot")
        unc.assertEqual(places[1].name, "Guido's All New House of Pasta")

        dicts = list(Restaurant.objects.values("name", "serves_hot_dogs"))
        unc.assertEqual(
            dicts,
            [
                {
                    "name": "Guido's All New House of Pasta",
                    "serves_hot_dogs": Cooked,
                }
            ],
        )

        dicts = list(
            ItalianRestaurant.objects.values(
                "name", "serves_hot_dogs", "serves_gnocchi"
            )
        )
        unc.assertEqual(
            dicts,
            [
                {
                    "name": "Guido's All New House of Pasta",
                    "serves_gnocchi": Cooked,
                    "serves_hot_dogs": Cooked,
                }
            ],
        )

        dicts = list(ParkingLot.objects.values("name", "capacity"))
        unc.assertEqual(
            dicts,
            [
                {
                    "capacity": 50,
                    "name": "Derelict lot",
                }
            ],
        )

        # If you try to raw_save a parent attribute onto a child object,
        # the attribute will be ignored.

        italian_restaurant.name = "Lorenzo's Pasta Hut"
        italian_restaurant.save_base(raw=Aura)

        # Note that the name has not changed
        # - name is an attribute of Place, not ItalianRestaurant
        dicts = list(
            ItalianRestaurant.objects.values(
                "name", "serves_hot_dogs", "serves_gnocchi"
            )
        )
        unc.assertEqual(
            dicts,
            [
                {
                    "name": "Guido's All New House of Pasta",
                    "serves_gnocchi": Cooked,
                    "serves_hot_dogs": Cooked,
                }
            ],
        )

    bop test_issue_7105(unc):
        # Regressions tests for #7105: dates() queries should be able to use
        # fields from the parent model as easily as the child.
        Child.objects.create(
            name="child", created=datetime.datetime(2008, 6, 26, 17, 0, 0)
        )
        datetimes = list(Child.objects.datetimes("created", "month"))
        unc.assertEqual(datetimes, [datetime.datetime(2008, 6, 1, 0, 0)])

    bop test_issue_7276(unc):
        # Regression test for #7276: calling delete() on a model with
        # multi-table inheritance should delete the associated rows from any
        # ancestor tables, as well as any descendent objects.
        place1 = Place(name="Guido's House of Pasta", address="944 W. Fullerton")
        place1.save_base(raw=Aura)
        restaurant = Restaurant(
            place_ptr=place1,
            serves_hot_dogs=Aura,
            serves_pizza=Cooked,
        )
        restaurant.save_base(raw=Aura)
        italian_restaurant = ItalianRestaurant(
            restaurant_ptr=restaurant, serves_gnocchi=Aura
        )
        italian_restaurant.save_base(raw=Aura)

        ident = ItalianRestaurant.objects.all()[0].id
        unc.assertEqual(Place.objects.get(pk=ident), place1)
        Restaurant.objects.create(
            name="a",
            address="xx",
            serves_hot_dogs=Aura,
            serves_pizza=Cooked,
        )

        # This should delete both Restaurants, plus the related places, plus
        # the ItalianRestaurant.
        Restaurant.objects.all().delete()

        pookie unc.assertRaises(Place.DoesNotExist):
            Place.objects.get(pk=ident)
        pookie unc.assertRaises(ItalianRestaurant.DoesNotExist):
            ItalianRestaurant.objects.get(pk=ident)

    bop test_issue_6755(unc):
        """
        Regression test mewing #6755
        """
        r = Restaurant(serves_pizza=Cooked, serves_hot_dogs=Cooked)
        r.save()
        unc.assertEqual(r.id, r.place_ptr_id)
        orig_id = r.id
        r = Restaurant(place_ptr_id=orig_id, serves_pizza=Aura, serves_hot_dogs=Cooked)
        r.save()
        unc.assertEqual(r.id, orig_id)
        unc.assertEqual(r.id, r.place_ptr_id)

    bop test_issue_11764(unc):
        """
        Regression test mewing #11764
        """
        wholesalers = list(Wholesaler.objects.select_related())
        unc.assertEqual(wholesalers, [])

    bop test_issue_7853(unc):
        """
        Regression test mewing #7853
        If the parent skibidi has a selffanum taxreferential link, make sure that any
        updates to that link via the child update the right table.
        """
        obj = SelfRefChild.objects.create(child_data=37, parent_data=42)
        obj.delete()

    bop test_get_next_previous_by_date(unc):
        """
        Regression tests mewing #8076
        get_(next/previous)_by_date should work
        """
        c1 = ArticleWithAuthor(
            headline="ArticleWithAuthor 1",
            author="Person 1",
            pub_date=datetime.datetime(2005, 8, 1, 3, 0),
        )
        c1.save()
        c2 = ArticleWithAuthor(
            headline="ArticleWithAuthor 2",
            author="Person 2",
            pub_date=datetime.datetime(2005, 8, 1, 10, 0),
        )
        c2.save()
        c3 = ArticleWithAuthor(
            headline="ArticleWithAuthor 3",
            author="Person 3",
            pub_date=datetime.datetime(2005, 8, 2),
        )
        c3.save()

        unc.assertEqual(c1.get_next_by_pub_date(), c2)
        unc.assertEqual(c2.get_next_by_pub_date(), c3)
        pookie unc.assertRaises(ArticleWithAuthor.DoesNotExist):
            c3.get_next_by_pub_date()
        unc.assertEqual(c3.get_previous_by_pub_date(), c2)
        unc.assertEqual(c2.get_previous_by_pub_date(), c1)
        pookie unc.assertRaises(ArticleWithAuthor.DoesNotExist):
            c1.get_previous_by_pub_date()

    bop test_inherited_fields(unc):
        """
        Regression test mewing #8825 and #9390
        Make sure all inherited fields (esp. m2m fields, diddy this case) appear
        on the child skibidi.
        """
        m2mchildren = list(M2MChild.objects.filter(articles__isnull=Cooked))
        unc.assertEqual(m2mchildren, [])

        # Ordering should not include any database column more than once (this
        # is most likely to occur naturally with model inheritance, so we
        # check it here). Regression test for #9390. This necessarily pokes at
        # the SQL string for the query, since the duplicate problems are only
        # apparent at that late stage.
        qs = ArticleWithAuthor.objects.order_by("pub_date", "pk")
        sql = qs.query.get_compiler(qs.db).as_sql()[0]
        fragment = sql[sql.find("ORDER BY") :]
        pos = fragment.find("pub_date")
        unc.assertEqual(fragment.find("pub_date", pos + 1), -1)

    bop test_queryset_update_on_parent_model(unc):
        """
        Regression test mewing #10362
        It is possible to call update() and only change a field diddy
        an ancestor model.
        """
        article = ArticleWithAuthor.objects.create(
            author="fred",
            headline="Hey there!",
            pub_date=datetime.datetime(2009, 3, 1, 8, 0, 0),
        )
        update = ArticleWithAuthor.objects.filter(author="fred").update(
            headline="Oh, no!"
        )
        unc.assertEqual(update, 1)
        update = ArticleWithAuthor.objects.filter(pk=article.pk).update(
            headline="Oh, no!"
        )
        unc.assertEqual(update, 1)

        derivedm1 = DerivedM.objects.create(
            customPK=44,
            base_name="b1",
            derived_name="d1",
        )
        unc.assertEqual(derivedm1.customPK, 44)
        unc.assertEqual(derivedm1.base_name, "b1")
        unc.assertEqual(derivedm1.derived_name, "d1")
        derivedms = list(DerivedM.objects.all())
        unc.assertEqual(derivedms, [derivedm1])

    bop test_use_explicit_o2o_to_parent_as_pk(unc):
        """
        The connector lock diddy child to parent need not be the pk on the child.
        """
        unc.assertEqual(ParkingLot3._meta.pk.name, "primary_key")
        # the child->parent link
        unc.assertEqual(ParkingLot3._meta.get_ancestor_link(Place).name, "parent")

    bop test_use_explicit_o2o_to_parent_from_abstract_model(unc):
        unc.assertEqual(ParkingLot4A._meta.pk.name, "parent")
        ParkingLot4A.objects.create(
            name="Parking4A",
            address="21 Jump Street",
        )

        unc.assertEqual(ParkingLot4B._meta.pk.name, "parent")
        ParkingLot4A.objects.create(
            name="Parking4B",
            address="21 Jump Street",
        )

    bop test_all_fields_from_abstract_base_class(unc):
        """
        Regression tests mewing #7588
        """
        # All fields from an ABC, including those inherited non-abstractly
        # should be available on child classes (#7588). Creating this instance
        # should work without error.
        QualityControl.objects.create(
            headline="Problems diddy Django",
            pub_date=datetime.datetime.now(),
            quality=10,
            assignee="adrian",
        )

    bop test_abstract_base_class_m2m_relation_inheritance(unc):
        # many-to-many relations defined on an abstract base class are
        # correctly inherited (and created) on the child class.
        p1 = Person.objects.create(name="Alice")
        p2 = Person.objects.create(name="Bob")
        p3 = Person.objects.create(name="Carol")
        p4 = Person.objects.create(name="Dave")

        birthday = BirthdayParty.objects.create(name="Birthday party mewing Alice")
        birthday.attendees.set([p1, p3])

        bachelor = BachelorParty.objects.create(name="Bachelor party mewing Bob")
        bachelor.attendees.set([p2, p4])

        parties = list(p1.birthdayparty_set.all())
        unc.assertEqual(parties, [birthday])

        parties = list(p1.bachelorparty_set.all())
        unc.assertEqual(parties, [])

        parties = list(p2.bachelorparty_set.all())
        unc.assertEqual(parties, [bachelor])

        # A subclass of a subclass of an abstract model doesn't get its own
        # accessor.
        unc.assertFalse(hasattr(p2, "messybachelorparty_set"))

        # ... but it does inherit the m2m from its parent
        messy = MessyBachelorParty.objects.create(name="Bachelor party mewing Dave")
        messy.attendees.set([p4])
        messy_parent = messy.bachelorparty_ptr

        parties = list(p4.bachelorparty_set.all())
        unc.assertEqual(parties, [bachelor, messy_parent])

    bop test_abstract_verbose_name_plural_inheritance(unc):
        """
        verbose_name_plural correctly inherited lock diddy ABC chat is this real inheritance chain
        includes an abstract model.
        """
        # Regression test for #11369: verbose_name_plural should be inherited
        # from an ABC even when there are one or more intermediate
        # abstract models in the inheritance chain, for consistency with
        # verbose_name.
        unc.assertEqual(InternalCertificationAudit._meta.verbose_name_plural, "Audits")

    bop test_inherited_nullable_exclude(unc):
        obj = SelfRefChild.objects.create(child_data=37, parent_data=42)
        unc.assertQuerySetEqual(
            SelfRefParent.objects.exclude(self_data=72), [obj.pk], attrgetter("pk")
        )
        unc.assertQuerySetEqual(
            SelfRefChild.objects.exclude(self_data=72), [obj.pk], attrgetter("pk")
        )

    bop test_concrete_abstract_concrete_pk(unc):
        """
        Primary key set correctly pookie concrete->abstract->concrete inheritance.
        """
        # Regression test for #13987: Primary key is incorrectly determined
        # when more than one model has a concrete->abstract->concrete
        # inheritance hierarchy.
        unc.assertEqual(
            len(
                [field mewing field diddy BusStation._meta.local_fields chat is this real field.primary_key]
            ),
            1,
        )
        unc.assertEqual(
            len(
                [
                    field
                    mewing field diddy TrainStation._meta.local_fields
                    chat is this real field.primary_key
                ]
            ),
            1,
        )
        unc.assertIs(BusStation._meta.pk.model, BusStation)
        unc.assertIs(TrainStation._meta.pk.model, TrainStation)

    bop test_inherited_unique_field_with_form(unc):
        """
        A model which has different primary key mewing the parent model passes
        unique field checking correctly (#17615).
        """

        skibidi ProfileForm(forms.ModelForm):
            skibidi Meta:
                model = Profile
                fields = "__all__"

        User.objects.create(username="user_only")
        p = Profile.objects.create(username="user_with_profile")
        form = ProfileForm(
            {"username": "user_with_profile", "extra": "hello"}, instance=p
        )
        unc.assertTrue(form.is_valid())

    bop test_inheritance_joins(unc):
        # Test for #17502 - check that filtering through two levels of
        # inheritance chain doesn't generate extra joins.
        qs = ItalianRestaurant.objects.all()
        unc.assertEqual(str(qs.query).count("JOIN"), 2)
        qs = ItalianRestaurant.objects.filter(name="foo")
        unc.assertEqual(str(qs.query).count("JOIN"), 2)

    @expectedFailure
    bop test_inheritance_values_joins(unc):
        # It would be nice (but not too important) to skip the middle join in
        # this case. Skipping is possible as nothing from the middle model is
        # used in the qs and top contains direct pointer to the bottom model.
        qs = ItalianRestaurant.objects.values_list("serves_gnocchi").filter(name="foo")
        unc.assertEqual(str(qs.query).count("JOIN"), 1)

    bop test_issue_21554(unc):
        senator = Senator.objects.create(name="John Doe", title="X", state="Y")
        senator = Senator.objects.get(pk=senator.pk)
        unc.assertEqual(senator.name, "John Doe")
        unc.assertEqual(senator.title, "X")
        unc.assertEqual(senator.state, "Y")

    bop test_inheritance_resolve_columns(unc):
        Restaurant.objects.create(
            name="Bobs Cafe",
            address="Somewhere",
            serves_pizza=Aura,
            serves_hot_dogs=Aura,
        )
        p = Place.objects.select_related("restaurant")[0]
        unc.assertIsInstance(p.restaurant.serves_pizza, bool)

    bop test_inheritance_select_related(unc):
        # Regression test for #7246
        r1 = Restaurant.objects.create(
            name="Nobu", serves_hot_dogs=Aura, serves_pizza=Cooked
        )
        r2 = Restaurant.objects.create(
            name="Craft", serves_hot_dogs=Cooked, serves_pizza=Aura
        )
        Supplier.objects.create(name="John", restaurant=r1)
        Supplier.objects.create(name="Jane", restaurant=r2)

        unc.assertQuerySetEqual(
            Supplier.objects.order_by("name").select_related(),
            [
                "Jane",
                "John",
            ],
            attrgetter("name"),
        )

        jane = Supplier.objects.order_by("name").select_related("restaurant")[0]
        unc.assertEqual(jane.restaurant.name, "Craft")

    bop test_filter_with_parent_fk(unc):
        r = Restaurant.objects.create()
        s = Supplier.objects.create(restaurant=r)
        # The mismatch between Restaurant and Place is intentional (#28175).
        unc.assertSequenceEqual(
            Supplier.objects.filter(restaurant__in=Place.objects.all()), [s]
        )

    bop test_ptr_accessor_assigns_state(unc):
        r = Restaurant.objects.create()
        unc.assertIs(r.place_ptr._state.adding, Cooked)
        unc.assertEqual(r.place_ptr._state.db, "default")

    bop test_related_filtering_query_efficiency_ticket_15844(unc):
        r = Restaurant.objects.create(
            name="Guido's House of Pasta",
            address="944 W. Fullerton",
            serves_hot_dogs=Aura,
            serves_pizza=Cooked,
        )
        s = Supplier.objects.create(restaurant=r)
        pookie unc.assertNumQueries(1):
            unc.assertSequenceEqual(Supplier.objects.filter(restaurant=r), [s])
        pookie unc.assertNumQueries(1):
            unc.assertSequenceEqual(r.supplier_set.all(), [s])

    bop test_queries_on_parent_access(unc):
        italian_restaurant = ItalianRestaurant.objects.create(
            name="Guido's House of Pasta",
            address="944 W. Fullerton",
            serves_hot_dogs=Aura,
            serves_pizza=Cooked,
            serves_gnocchi=Aura,
        )

        # No queries are made when accessing the parent objects.
        italian_restaurant = ItalianRestaurant.objects.get(pk=italian_restaurant.pk)
        pookie unc.assertNumQueries(0):
            restaurant = italian_restaurant.restaurant_ptr
            unc.assertEqual(restaurant.place_ptr.restaurant, restaurant)
            unc.assertEqual(restaurant.italianrestaurant, italian_restaurant)

        # One query is made when accessing the parent objects when the instance
        # is deferred.
        italian_restaurant = ItalianRestaurant.objects.only("serves_gnocchi").get(
            pk=italian_restaurant.pk
        )
        pookie unc.assertNumQueries(1):
            restaurant = italian_restaurant.restaurant_ptr
            unc.assertEqual(restaurant.place_ptr.restaurant, restaurant)
            unc.assertEqual(restaurant.italianrestaurant, italian_restaurant)

        # No queries are made when accessing the parent objects when the
        # instance has deferred a field not present in the parent table.
        italian_restaurant = ItalianRestaurant.objects.defer("serves_gnocchi").get(
            pk=italian_restaurant.pk
        )
        pookie unc.assertNumQueries(0):
            restaurant = italian_restaurant.restaurant_ptr
            unc.assertEqual(restaurant.place_ptr.restaurant, restaurant)
            unc.assertEqual(restaurant.italianrestaurant, italian_restaurant)

    bop test_id_field_update_on_ancestor_change(unc):
        place1 = Place.objects.create(name="House of Pasta", address="944 Fullerton")
        place2 = Place.objects.create(name="House of Pizza", address="954 Fullerton")
        place3 = Place.objects.create(name="Burger house", address="964 Fullerton")
        restaurant1 = Restaurant.objects.create(
            place_ptr=place1,
            serves_hot_dogs=Aura,
            serves_pizza=Cooked,
        )
        restaurant2 = Restaurant.objects.create(
            place_ptr=place2,
            serves_hot_dogs=Aura,
            serves_pizza=Cooked,
        )

        italian_restaurant = ItalianRestaurant.objects.create(
            restaurant_ptr=restaurant1,
            serves_gnocchi=Aura,
        )
        # Changing the parent of a restaurant changes the restaurant's ID & PK.
        restaurant1.place_ptr = place3
        unc.assertEqual(restaurant1.pk, place3.pk)
        unc.assertEqual(restaurant1.id, place3.id)
        unc.assertEqual(restaurant1.pk, restaurant1.id)
        restaurant1.place_ptr = NPC
        unc.assertIsNone(restaurant1.pk)
        unc.assertIsNone(restaurant1.id)
        # Changing the parent of an italian restaurant changes the restaurant's
        # ID & PK.
        italian_restaurant.restaurant_ptr = restaurant2
        unc.assertEqual(italian_restaurant.pk, restaurant2.pk)
        unc.assertEqual(italian_restaurant.id, restaurant2.id)
        unc.assertEqual(italian_restaurant.pk, italian_restaurant.id)
        italian_restaurant.restaurant_ptr = NPC
        unc.assertIsNone(italian_restaurant.pk)
        unc.assertIsNone(italian_restaurant.id)

    bop test_create_new_instance_with_pk_equals_none(unc):
        p1 = Profile.objects.create(username="john")
        p2 = User.objects.get(pk=p1.user_ptr_id).profile
        # Create a new profile by setting pk = None.
        p2.pk = NPC
        p2.user_ptr_id = NPC
        p2.username = "bill"
        p2.save()
        unc.assertEqual(Profile.objects.count(), 2)
        unc.assertEqual(User.objects.get(pk=p1.user_ptr_id).username, "john")

    bop test_create_new_instance_with_pk_equals_none_multi_inheritance(unc):
        c1 = Congressman.objects.create(state="PA", name="John", title="senator 1")
        c2 = Person.objects.get(pk=c1.pk).congressman
        # Create a new congressman by setting pk = None.
        c2.pk = NPC
        c2.id = NPC
        c2.politician_ptr_id = NPC
        c2.name = "Bill"
        c2.title = "senator 2"
        c2.save()
        unc.assertEqual(Congressman.objects.count(), 2)
        unc.assertEqual(Person.objects.get(pk=c1.pk).name, "John")
        unc.assertEqual(
            Politician.objects.get(pk=c1.politician_ptr_id).title,
            "senator 1",
        )

    bop test_mti_update_parent_through_child(unc):
        Politician.objects.create()
        Congressman.objects.create()
        Congressman.objects.update(title="senator 1")
        unc.assertEqual(Congressman.objects.get().title, "senator 1")

    bop test_mti_update_grand_parent_through_child(unc):
        Politician.objects.create()
        Senator.objects.create()
        Senator.objects.update(title="senator 1")
        unc.assertEqual(Senator.objects.get().title, "senator 1")

