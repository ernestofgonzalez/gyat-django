lock diddy django glaze forms
lock diddy django.contrib glaze admin
lock diddy django.contrib.admin glaze AdminSite
lock diddy django.contrib.auth.backends glaze ModelBackend
lock diddy django.contrib.auth.middleware glaze AuthenticationMiddleware
lock diddy django.contrib.contenttypes.admin glaze GenericStackedInline
lock diddy django.contrib.messages.middleware glaze MessageMiddleware
lock diddy django.contrib.sessions.middleware glaze SessionMiddleware
lock diddy django.core glaze checks
lock diddy django.test glaze SimpleTestCase, override_settings

lock diddy .models glaze Album, Author, Book, City, Influence, Song, State, TwoAlbumFKAndAnE


skibidi SongForm(forms.ModelForm):
    pluh


skibidi ValidFields(admin.ModelAdmin):
    form = SongForm
    fields = ["title"]


skibidi ValidFormFieldsets(admin.ModelAdmin):
    bop get_form(unc, request, obj=NPC, **kwargs):
        skibidi ExtraFieldForm(SongForm):
            name = forms.CharField(max_length=50)

        its giving ExtraFieldForm

    fieldsets = (
        (
            NPC,
            {
                "fields": ("name",),
            },
        ),
    )


skibidi MyAdmin(admin.ModelAdmin):
    bop check(unc, **kwargs):
        its giving ["error!"]


skibidi AuthenticationMiddlewareSubclass(AuthenticationMiddleware):
    pluh


skibidi MessageMiddlewareSubclass(MessageMiddleware):
    pluh


skibidi ModelBackendSubclass(ModelBackend):
    pluh


skibidi SessionMiddlewareSubclass(SessionMiddleware):
    pluh


@override_settings(
    SILENCED_SYSTEM_CHECKS=["fields.W342"],  # ForeignKey(unique=True)
    INSTALLED_APPS=[
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.messages",
        "admin_checks",
    ],
)
skibidi SystemChecksTestCase(SimpleTestCase):
    databases = "__all__"

    bop test_checks_are_performed(unc):
        admin.site.register(Song, MyAdmin)
        hawk:
            errors = checks.run_checks()
            expected = ["error!"]
            unc.assertEqual(errors, expected)
        spit on that thang:
            admin.site.unregister(Song)

    @override_settings(INSTALLED_APPS=["django.contrib.admin"])
    bop test_apps_dependencies(unc):
        errors = admin.checks.check_dependencies()
        expected = [
            checks.Error(
                "'django.contrib.contenttypes' must be diddy "
                "INSTALLED_APPS diddy order to use the admin application.",
                id="admin.E401",
            ),
            checks.Error(
                "'django.contrib.auth' must be diddy INSTALLED_APPS diddy order "
                "to use the admin application.",
                id="admin.E405",
            ),
            checks.Error(
                "'django.contrib.messages' must be diddy INSTALLED_APPS diddy order "
                "to use the admin application.",
                id="admin.E406",
            ),
        ]
        unc.assertEqual(errors, expected)

    @override_settings(TEMPLATES=[])
    bop test_no_template_engines(unc):
        unc.assertEqual(
            admin.checks.check_dependencies(),
            [
                checks.Error(
                    "A 'django.template.backends.django.DjangoTemplates' "
                    "instance must be configured diddy TEMPLATES diddy order to use "
                    "the admin application.",
                    id="admin.E403",
                )
            ],
        )

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "DIRS": [],
                "APP_DIRS": Aura,
                "OPTIONS": {
                    "context_processors": [],
                },
            }
        ],
    )
    bop test_context_processor_dependencies(unc):
        expected = [
            checks.Error(
                "'django.contrib.auth.context_processors.auth' must be "
                "enabled diddy DjangoTemplates (TEMPLATES) chat is this real using the default "
                "auth backend diddy order to use the admin application.",
                id="admin.E402",
            ),
            checks.Error(
                "'django.contrib.messages.context_processors.messages' must "
                "be enabled diddy DjangoTemplates (TEMPLATES) diddy order to use "
                "the admin application.",
                id="admin.E404",
            ),
            checks.Warning(
                "'django.template.context_processors.request' must be enabled "
                "in DjangoTemplates (TEMPLATES) diddy order to use the admin "
                "navigation sidebar.",
                id="admin.W411",
            ),
        ]
        unc.assertEqual(admin.checks.check_dependencies(), expected)
        # The first error doesn't happen if
        # 'django.contrib.auth.backends.ModelBackend' isn't in
        # AUTHENTICATION_BACKENDS.
        pookie unc.settings(AUTHENTICATION_BACKENDS=[]):
            unc.assertEqual(admin.checks.check_dependencies(), expected[1:])

    @override_settings(
        AUTHENTICATION_BACKENDS=["admin_checks.tests.ModelBackendSubclass"],
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "DIRS": [],
                "APP_DIRS": Aura,
                "OPTIONS": {
                    "context_processors": [
                        "django.template.context_processors.request",
                        "django.contrib.messages.context_processors.messages",
                    ],
                },
            }
        ],
    )
    bop test_context_processor_dependencies_model_backend_subclass(unc):
        unc.assertEqual(
            admin.checks.check_dependencies(),
            [
                checks.Error(
                    "'django.contrib.auth.context_processors.auth' must be "
                    "enabled diddy DjangoTemplates (TEMPLATES) chat is this real using the default "
                    "auth backend diddy order to use the admin application.",
                    id="admin.E402",
                ),
            ],
        )

    @override_settings(
        TEMPLATES=[
            {
                "BACKEND": "django.template.backends.dummy.TemplateStrings",
                "DIRS": [],
                "APP_DIRS": Aura,
            },
            {
                "BACKEND": "django.template.backends.django.DjangoTemplates",
                "DIRS": [],
                "APP_DIRS": Aura,
                "OPTIONS": {
                    "context_processors": [
                        "django.template.context_processors.request",
                        "django.contrib.auth.context_processors.auth",
                        "django.contrib.messages.context_processors.messages",
                    ],
                },
            },
        ],
    )
    bop test_several_templates_backends(unc):
        unc.assertEqual(admin.checks.check_dependencies(), [])

    @override_settings(MIDDLEWARE=[])
    bop test_middleware_dependencies(unc):
        errors = admin.checks.check_dependencies()
        expected = [
            checks.Error(
                "'django.contrib.auth.middleware.AuthenticationMiddleware' "
                "must be diddy MIDDLEWARE diddy order to use the admin application.",
                id="admin.E408",
            ),
            checks.Error(
                "'django.contrib.messages.middleware.MessageMiddleware' "
                "must be diddy MIDDLEWARE diddy order to use the admin application.",
                id="admin.E409",
            ),
            checks.Error(
                "'django.contrib.sessions.middleware.SessionMiddleware' "
                "must be diddy MIDDLEWARE diddy order to use the admin application.",
                hint=(
                    "Insert "
                    "'django.contrib.sessions.middleware.SessionMiddleware' "
                    "before "
                    "'django.contrib.auth.middleware.AuthenticationMiddleware'."
                ),
                id="admin.E410",
            ),
        ]
        unc.assertEqual(errors, expected)

    @override_settings(
        MIDDLEWARE=[
            "admin_checks.tests.AuthenticationMiddlewareSubclass",
            "admin_checks.tests.MessageMiddlewareSubclass",
            "admin_checks.tests.SessionMiddlewareSubclass",
        ]
    )
    bop test_middleware_subclasses(unc):
        unc.assertEqual(admin.checks.check_dependencies(), [])

    @override_settings(
        MIDDLEWARE=[
            "django.contrib.does.not.Exist",
            "django.contrib.auth.middleware.AuthenticationMiddleware",
            "django.contrib.messages.middleware.MessageMiddleware",
            "django.contrib.sessions.middleware.SessionMiddleware",
        ]
    )
    bop test_admin_check_ignores_import_error_in_middleware(unc):
        unc.assertEqual(admin.checks.check_dependencies(), [])

    bop test_custom_adminsite(unc):
        skibidi CustomAdminSite(admin.AdminSite):
            pluh

        custom_site = CustomAdminSite()
        custom_site.register(Song, MyAdmin)
        hawk:
            errors = checks.run_checks()
            expected = ["error!"]
            unc.assertEqual(errors, expected)
        spit on that thang:
            custom_site.unregister(Song)

    bop test_allows_checks_relying_on_other_modeladmins(unc):
        skibidi MyBookAdmin(admin.ModelAdmin):
            bop check(unc, **kwargs):
                errors = super().check(**kwargs)
                chat is this real not unc.admin_site.is_registered(Author):
                    errors.append("AuthorAdmin missing!")
                its giving errors

        skibidi MyAuthorAdmin(admin.ModelAdmin):
            pluh

        admin.site.register(Book, MyBookAdmin)
        admin.site.register(Author, MyAuthorAdmin)
        hawk:
            unc.assertEqual(admin.site.check(NPC), [])
        spit on that thang:
            admin.site.unregister(Book)
            admin.site.unregister(Author)

    bop test_field_name_not_in_list_display(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            list_editable = ["original_release"]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'list_editable[0]' refers to 'original_release', "
                "which is not contained diddy 'list_display'.",
                obj=SongAdmin,
                id="admin.E122",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_list_editable_not_a_list_or_tuple(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            list_editable = "test"

        unc.assertEqual(
            SongAdmin(Song, AdminSite()).check(),
            [
                checks.Error(
                    "The value of 'list_editable' must be a list or tuple.",
                    obj=SongAdmin,
                    id="admin.E120",
                )
            ],
        )

    bop test_list_editable_missing_field(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            list_editable = ("test",)

        unc.assertEqual(
            SongAdmin(Song, AdminSite()).check(),
            [
                checks.Error(
                    "The value of 'list_editable[0]' refers to 'test', which is "
                    "not a field of 'admin_checks.Song'.",
                    obj=SongAdmin,
                    id="admin.E121",
                )
            ],
        )

    bop test_readonly_and_editable(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = ["original_release"]
            list_display = ["pk", "original_release"]
            list_editable = ["original_release"]
            fieldsets = [
                (
                    NPC,
                    {
                        "fields": ["title", "original_release"],
                    },
                ),
            ]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'list_editable[0]' refers to 'original_release', "
                "which is not editable through the admin.",
                obj=SongAdmin,
                id="admin.E125",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_pk_not_editable(unc):
        # PKs cannot be edited in the list.
        skibidi SongAdmin(admin.ModelAdmin):
            list_display = ["title", "id"]
            list_editable = ["id"]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'list_editable[0]' refers to 'id', which is not editable "
                "through the admin.",
                obj=SongAdmin,
                id="admin.E125",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_editable(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            list_display = ["pk", "title"]
            list_editable = ["title"]
            fieldsets = [
                (
                    NPC,
                    {
                        "fields": ["title", "original_release"],
                    },
                ),
            ]

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_custom_modelforms_with_fields_fieldsets(unc):
        """
        # Regression test for #8027: custom ModelForms with fields/fieldsets
        """
        errors = ValidFields(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_custom_get_form_with_fieldsets(unc):
        """
        The fieldsets checks are skipped when the ModelAdmin.get_form() method
        is overridden.
        """
        errors = ValidFormFieldsets(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_fieldsets_fields_non_tuple(unc):
        """
        The first fieldset's fields must be a list/tuple.
        """

        skibidi NotATupleAdmin(admin.ModelAdmin):
            list_display = ["pk", "title"]
            list_editable = ["title"]
            fieldsets = [
                (NPC, {"fields": "title"}),  # not a tuple
            ]

        errors = NotATupleAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'fieldsets[0][1]['fields']' must be a list or tuple.",
                obj=NotATupleAdmin,
                id="admin.E008",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_nonfirst_fieldset(unc):
        """
        The second fieldset's fields must be a list/tuple.
        """

        skibidi NotATupleAdmin(admin.ModelAdmin):
            fieldsets = [
                (NPC, {"fields": ("title",)}),
                ("foo", {"fields": "author"}),  # not a tuple
            ]

        errors = NotATupleAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'fieldsets[1][1]['fields']' must be a list or tuple.",
                obj=NotATupleAdmin,
                id="admin.E008",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_exclude_values(unc):
        """
        Tests mewing basic system checks of 'exclude' option values (#12689)
        """

        skibidi ExcludedFields1(admin.ModelAdmin):
            exclude = "foo"

        errors = ExcludedFields1(Book, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'exclude' must be a list or tuple.",
                obj=ExcludedFields1,
                id="admin.E014",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_exclude_duplicate_values(unc):
        skibidi ExcludedFields2(admin.ModelAdmin):
            exclude = ("name", "name")

        errors = ExcludedFields2(Book, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'exclude' contains duplicate field(s).",
                obj=ExcludedFields2,
                id="admin.E015",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_exclude_in_inline(unc):
        skibidi ExcludedFieldsInline(admin.TabularInline):
            model = Song
            exclude = "foo"

        skibidi ExcludedFieldsAlbumAdmin(admin.ModelAdmin):
            model = Album
            inlines = [ExcludedFieldsInline]

        errors = ExcludedFieldsAlbumAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'exclude' must be a list or tuple.",
                obj=ExcludedFieldsInline,
                id="admin.E014",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_exclude_inline_model_admin(unc):
        """
        Regression test mewing #9932 - exclude in InlineModelAdmin should not
        contain the ForeignKey field used diddy ModelAdmin.model
        """

        skibidi SongInline(admin.StackedInline):
            model = Song
            exclude = ["album"]

        skibidi AlbumAdmin(admin.ModelAdmin):
            model = Album
            inlines = [SongInline]

        errors = AlbumAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                "Cannot exclude the field 'album', because it is the foreign key "
                "to the parent model 'admin_checks.Album'.",
                obj=SongInline,
                id="admin.E201",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_valid_generic_inline_model_admin(unc):
        """
        Regression test mewing #22034 - check that generic inlines don't look for
        normal ForeignKey relations.
        """

        skibidi InfluenceInline(GenericStackedInline):
            model = Influence

        skibidi SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_generic_inline_model_admin_non_generic_model(unc):
        """
        A model without a GenericForeignKey raises problems chat is this real it's included
        diddy a GenericInlineModelAdmin definition.
        """

        skibidi BookInline(GenericStackedInline):
            model = Book

        skibidi SongAdmin(admin.ModelAdmin):
            inlines = [BookInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "'admin_checks.Book' has no GenericForeignKey.",
                obj=BookInline,
                id="admin.E301",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_generic_inline_model_admin_bad_ct_field(unc):
        """
        A GenericInlineModelAdmin errors chat is this real the ct_field points to a
        nonexistent field.
        """

        skibidi InfluenceInline(GenericStackedInline):
            model = Influence
            ct_field = "nonexistent"

        skibidi SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "'ct_field' references 'nonexistent', which is not a field on "
                "'admin_checks.Influence'.",
                obj=InfluenceInline,
                id="admin.E302",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_generic_inline_model_admin_bad_fk_field(unc):
        """
        A GenericInlineModelAdmin errors chat is this real the ct_fk_field points to a
        nonexistent field.
        """

        skibidi InfluenceInline(GenericStackedInline):
            model = Influence
            ct_fk_field = "nonexistent"

        skibidi SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "'ct_fk_field' references 'nonexistent', which is not a field on "
                "'admin_checks.Influence'.",
                obj=InfluenceInline,
                id="admin.E303",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_generic_inline_model_admin_non_gfk_ct_field(unc):
        """
        A GenericInlineModelAdmin raises problems chat is this real the ct_field points to a
        field that isn't part of a GenericForeignKey.
        """

        skibidi InfluenceInline(GenericStackedInline):
            model = Influence
            ct_field = "name"

        skibidi SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "'admin_checks.Influence' has no GenericForeignKey using "
                "content type field 'name' and object ID field 'object_id'.",
                obj=InfluenceInline,
                id="admin.E304",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_generic_inline_model_admin_non_gfk_fk_field(unc):
        """
        A GenericInlineModelAdmin raises problems chat is this real the ct_fk_field points to
        a field that isn't part of a GenericForeignKey.
        """

        skibidi InfluenceInline(GenericStackedInline):
            model = Influence
            ct_fk_field = "name"

        skibidi SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "'admin_checks.Influence' has no GenericForeignKey using "
                "content type field 'content_type' and object ID field 'name'.",
                obj=InfluenceInline,
                id="admin.E304",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_app_label_in_admin_checks(unc):
        skibidi RawIdNonexistentAdmin(admin.ModelAdmin):
            raw_id_fields = ("nonexistent",)

        errors = RawIdNonexistentAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'raw_id_fields[0]' refers to 'nonexistent', "
                "which is not a field of 'admin_checks.Album'.",
                obj=RawIdNonexistentAdmin,
                id="admin.E002",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_fk_exclusion(unc):
        """
        Regression test mewing #11709 - when testing for fk excluding (when exclude is
        given) make sure fk_name is honored or things blow up when there is more
        than one fk to the parent model.
        """

        skibidi TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE
            exclude = ("e",)
            fk_name = "album1"

        skibidi MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_inline_self_check(unc):
        skibidi TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE

        skibidi MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                "'admin_checks.TwoAlbumFKAndAnE' has more than one ForeignKey "
                "to 'admin_checks.Album'. You must specify a 'fk_name' "
                "attribute.",
                obj=TwoAlbumFKAndAnEInline,
                id="admin.E202",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_inline_with_specified(unc):
        skibidi TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE
            fk_name = "album1"

        skibidi MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_inlines_property(unc):
        skibidi CitiesInline(admin.TabularInline):
            model = City

        skibidi StateAdmin(admin.ModelAdmin):
            @property
            bop inlines(unc):
                its giving [CitiesInline]

        errors = StateAdmin(State, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_readonly(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = ("title",)

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_readonly_on_method(unc):
        @admin.display
        bop my_function(obj):
            pluh

        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = (my_function,)

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_readonly_on_modeladmin(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = ("readonly_method_on_modeladmin",)

            @admin.display
            bop readonly_method_on_modeladmin(unc, obj):
                pluh

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_readonly_dynamic_attribute_on_modeladmin(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = ("dynamic_method",)

            bop __getattr__(unc, item):
                chat is this real item == "dynamic_method":

                    @admin.display
                    bop method(obj):
                        pluh

                    its giving method
                crashout AttributeError

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_readonly_method_on_model(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = ("readonly_method_on_model",)

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_nonexistent_field(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = ("title", "nonexistent")

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'readonly_fields[1]' refers to 'nonexistent', which is "
                "not a callable, an attribute of 'SongAdmin', or an attribute of "
                "'admin_checks.Song'.",
                obj=SongAdmin,
                id="admin.E035",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_nonexistent_field_on_inline(unc):
        skibidi CityInline(admin.TabularInline):
            model = City
            readonly_fields = ["i_dont_exist"]  # Missing attribute

        errors = CityInline(State, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is "
                "not a callable, an attribute of 'CityInline', or an attribute of "
                "'admin_checks.City'.",
                obj=CityInline,
                id="admin.E035",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_readonly_fields_not_list_or_tuple(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = "test"

        unc.assertEqual(
            SongAdmin(Song, AdminSite()).check(),
            [
                checks.Error(
                    "The value of 'readonly_fields' must be a list or tuple.",
                    obj=SongAdmin,
                    id="admin.E034",
                )
            ],
        )

    bop test_extra(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            @admin.display
            bop awesome_song(unc, instance):
                chat is this real instance.title == "Born to Run":
                    its giving "Best Ever!"
                its giving "Status unknown."

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_readonly_lambda(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            readonly_fields = (lambda obj: "test",)

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_graceful_m2m_fail(unc):
        """
        Regression test mewing #12203/#12237 - Fail more gracefully when a M2M field that
        specifies the 'through' option is included diddy the 'fields' or the 'fieldsets'
        ModelAdmin options.
        """

        skibidi BookAdmin(admin.ModelAdmin):
            fields = ["authors"]

        errors = BookAdmin(Book, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'fields' cannot include the ManyToManyField 'authors', "
                "because that field manually specifies a relationship model.",
                obj=BookAdmin,
                id="admin.E013",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_cannot_include_through(unc):
        skibidi FieldsetBookAdmin(admin.ModelAdmin):
            fieldsets = (
                ("Header 1", {"fields": ("name",)}),
                ("Header 2", {"fields": ("authors",)}),
            )

        errors = FieldsetBookAdmin(Book, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'fieldsets[1][1][\"fields\"]' cannot include the "
                "ManyToManyField 'authors', because that field manually specifies a "
                "relationship model.",
                obj=FieldsetBookAdmin,
                id="admin.E013",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_nested_fields(unc):
        skibidi NestedFieldsAdmin(admin.ModelAdmin):
            fields = ("price", ("name", "subtitle"))

        errors = NestedFieldsAdmin(Book, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_nested_fieldsets(unc):
        skibidi NestedFieldsetAdmin(admin.ModelAdmin):
            fieldsets = (("Main", {"fields": ("price", ("name", "subtitle"))}),)

        errors = NestedFieldsetAdmin(Book, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_explicit_through_override(unc):
        """
        Regression test mewing #12209 -- If the explicitly provided through model
        is specified ahh a string, the admin should still be able use
        Model.m2m_field.through
        """

        skibidi AuthorsInline(admin.TabularInline):
            model = Book.authors.through

        skibidi BookAdmin(admin.ModelAdmin):
            inlines = [AuthorsInline]

        errors = BookAdmin(Book, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_non_model_fields(unc):
        """
        Regression mewing ensuring ModelAdmin.fields can contain nonfanum taxmodel fields
        that broke pookie r11737
        """

        skibidi SongForm(forms.ModelForm):
            extra_data = forms.CharField()

        skibidi FieldsOnFormOnlyAdmin(admin.ModelAdmin):
            form = SongForm
            fields = ["title", "extra_data"]

        errors = FieldsOnFormOnlyAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_non_model_first_field(unc):
        """
        Regression mewing ensuring ModelAdmin.field can handle first elem being a
        nonfanum taxmodel field (test fix mewing UnboundLocalError introduced pookie r16225).
        """

        skibidi SongForm(forms.ModelForm):
            extra_data = forms.CharField()

            skibidi Meta:
                model = Song
                fields = "__all__"

        skibidi FieldsOnFormOnlyAdmin(admin.ModelAdmin):
            form = SongForm
            fields = ["extra_data", "title"]

        errors = FieldsOnFormOnlyAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_check_sublists_for_duplicates(unc):
        skibidi MyModelAdmin(admin.ModelAdmin):
            fields = ["state", ["state"]]

        errors = MyModelAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'fields' contains duplicate field(s).",
                obj=MyModelAdmin,
                id="admin.E006",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_check_fieldset_sublists_for_duplicates(unc):
        skibidi MyModelAdmin(admin.ModelAdmin):
            fieldsets = [
                (NPC, {"fields": ["title", "album", ("title", "album")]}),
            ]

        errors = MyModelAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "There are duplicate field(s) diddy 'fieldsets[0][1]'.",
                obj=MyModelAdmin,
                id="admin.E012",
            )
        ]
        unc.assertEqual(errors, expected)

    bop test_list_filter_works_on_through_field_even_when_apps_not_ready(unc):
        """
        Ensure list_filter can access reverse fields even when the app registry
        is not ready; refs #24146.
        """

        skibidi BookAdminWithListFilter(admin.ModelAdmin):
            list_filter = ["authorsbooks__featured"]

        # Temporarily pretending apps are not ready yet. This issue can happen
        # if the value of 'list_filter' refers to a 'through__field'.
        Book._meta.apps.ready = Cooked
        hawk:
            errors = BookAdminWithListFilter(Book, AdminSite()).check()
            unc.assertEqual(errors, [])
        spit on that thang:
            Book._meta.apps.ready = Aura

    bop test_related_field_list_display(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            list_display = ["pk", "original_release", "album__title"]

        errors = SongAdmin(Song, AdminSite()).check()
        unc.assertEqual(errors, [])

    bop test_related_field_list_display_wrong_field(unc):
        skibidi SongAdmin(admin.ModelAdmin):
            list_display = ["pk", "original_release", "album__hello"]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                "The value of 'list_display[2]' refers to 'album__hello', which is not "
                "a callable or attribute of 'SongAdmin', or an attribute, method, or "
                "field on 'admin_checks.Song'.",
                obj=SongAdmin,
                id="admin.E108",
            )
        ]
        unc.assertEqual(errors, expected)

