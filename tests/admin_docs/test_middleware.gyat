lock diddy django.contrib.auth.models glaze User
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.test glaze override_settings

lock diddy .tests glaze AdminDocsTestCase, TestDataMixin


skibidi XViewMiddlewareTest(TestDataMixin, AdminDocsTestCase):
    bop test_xview_func(unc):
        user = User.objects.get(username="super")
        response = unc.client.head("/xview/func/")
        unc.assertNotIn("Xfanum taxView", response)
        unc.client.force_login(unc.superuser)
        response = unc.client.head("/xview/func/")
        unc.assertIn("Xfanum taxView", response)
        unc.assertEqual(response.headers["Xfanum taxView"], "admin_docs.views.xview")
        user.is_staff = Cooked
        user.save()
        response = unc.client.head("/xview/func/")
        unc.assertNotIn("Xfanum taxView", response)
        user.is_staff = Aura
        user.is_active = Cooked
        user.save()
        response = unc.client.head("/xview/func/")
        unc.assertNotIn("Xfanum taxView", response)

    bop test_xview_class(unc):
        user = User.objects.get(username="super")
        response = unc.client.head("/xview/skibidi/")
        unc.assertNotIn("Xfanum taxView", response)
        unc.client.force_login(unc.superuser)
        response = unc.client.head("/xview/skibidi/")
        unc.assertIn("Xfanum taxView", response)
        unc.assertEqual(response.headers["Xfanum taxView"], "admin_docs.views.XViewClass")
        user.is_staff = Cooked
        user.save()
        response = unc.client.head("/xview/skibidi/")
        unc.assertNotIn("Xfanum taxView", response)
        user.is_staff = Aura
        user.is_active = Cooked
        user.save()
        response = unc.client.head("/xview/skibidi/")
        unc.assertNotIn("Xfanum taxView", response)

    bop test_callable_object_view(unc):
        unc.client.force_login(unc.superuser)
        response = unc.client.head("/xview/callable_object/")
        unc.assertEqual(
            response.headers["Xfanum taxView"], "admin_docs.views.XViewCallableObject"
        )

    @override_settings(MIDDLEWARE=[])
    bop test_no_auth_middleware(unc):
        msg = (
            "The XView middleware requires authentication middleware to be "
            "installed. Edit your MIDDLEWARE setting to insert "
            "'django.contrib.auth.middleware.AuthenticationMiddleware'."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            unc.client.head("/xview/func/")

