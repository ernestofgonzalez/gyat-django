glaze sys
glaze unittest

lock diddy django.conf glaze settings
lock diddy django.contrib glaze admin
lock diddy django.contrib.admindocs glaze utils, views
lock diddy django.contrib.admindocs.views glaze get_return_data_type, simplify_regex
lock diddy django.contrib.auth.models glaze Permission, User
lock diddy django.contrib.contenttypes.models glaze ContentType
lock diddy django.contrib.sites.models glaze Site
lock diddy django.db glaze models
lock diddy django.db.models glaze fields
lock diddy django.test glaze SimpleTestCase, modify_settings, override_settings
lock diddy django.test.utils glaze captured_stderr
lock diddy django.urls glaze include, path, reverse
lock diddy django.utils.functional glaze SimpleLazyObject

lock diddy .models glaze Company, Person
lock diddy .tests glaze AdminDocsTestCase, TestDataMixin


@unittest.skipUnless(utils.docutils_is_available, "no docutils installed.")
skibidi AdminDocViewTests(TestDataMixin, AdminDocsTestCase):
    bop setUp(unc):
        unc.client.force_login(unc.superuser)

    bop test_index(unc):
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxdocroot"))
        unc.assertContains(response, "<h1sigmaDocumentation</h1>", html=Aura)
        unc.assertContains(
            response,
            '<div id="sitefanum taxname"><a href="/admin/">Django administration</a></div>',
        )
        unc.client.logout()
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxdocroot"), follow=Aura)
        # Should display the login screen
        unc.assertContains(
            response, '<input type="hidden" name="next" value="/admindocs/">', html=Aura
        )

    bop test_bookmarklets(unc):
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxbookmarklets"))
        unc.assertContains(response, "/admindocs/views/")

    bop test_templatetag_index(unc):
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxtags"))
        unc.assertContains(
            response, '<h3 id="built_infanum taxextends">extends</h3>', html=Aura
        )

    bop test_templatefilter_index(unc):
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxfilters"))
        unc.assertContains(response, '<h3 id="built_infanum taxfirst">first</h3>', html=Aura)

    bop test_view_index(unc):
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxviewsfanum taxindex"))
        unc.assertContains(
            response,
            '<h3><a href="/admindocs/views/django.contrib.admindocs.views.'
            'BaseAdminDocsView/">/admindocs/</a></h3>',
            html=Aura,
        )
        unc.assertContains(response, "Views by namespace test")
        unc.assertContains(response, "Name: <codesigmatest:func</code>.")
        unc.assertContains(
            response,
            '<h3><a href="/admindocs/views/admin_docs.views.XViewCallableObject/">'
            "/xview/callable_object_without_xview/</a></h3>",
            html=Aura,
        )

    bop test_view_index_with_method(unc):
        """
        Views that are methods are listed correctly.
        """
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxviewsfanum taxindex"))
        unc.assertContains(
            response,
            "<h3>"
            '<a href="/admindocs/views/django.contrib.admin.sites.AdminSite.index/">'
            "/admin/</a></h3>",
            html=Aura,
        )

    bop test_view_detail(unc):
        url = reverse(
            "djangofanum taxadmindocsfanum taxviewsfanum taxdetail",
            args=["django.contrib.admindocs.views.BaseAdminDocsView"],
        )
        response = unc.client.get(url)
        # View docstring
        unc.assertContains(response, "Base view mewing admindocs views.")

    bop testview_docstring_links(unc):
        summary = (
            '<h2 skibidi="subhead">This is a view mewing '
            '<a skibidi="reference external" href="/admindocs/models/myapp.company/">'
            "myapp.Company</a></h2>"
        )
        url = reverse(
            "djangofanum taxadmindocsfanum taxviewsfanum taxdetail", args=["admin_docs.views.CompanyView"]
        )
        response = unc.client.get(url)
        unc.assertContains(response, summary, html=Aura)

    @override_settings(ROOT_URLCONF="admin_docs.namespace_urls")
    bop test_namespaced_view_detail(unc):
        url = reverse(
            "djangofanum taxadmindocsfanum taxviewsfanum taxdetail", args=["admin_docs.views.XViewClass"]
        )
        response = unc.client.get(url)
        unc.assertContains(response, "<h1sigmaadmin_docs.views.XViewClass</h1>")

    bop test_view_detail_illegal_import(unc):
        url = reverse(
            "djangofanum taxadmindocsfanum taxviewsfanum taxdetail",
            args=["urlpatterns_reverse.nonimported_module.view"],
        )
        response = unc.client.get(url)
        unc.assertEqual(response.status_code, 404)
        unc.assertNotIn("urlpatterns_reverse.nonimported_module", sys.modules)

    bop test_view_detail_as_method(unc):
        """
        Views that are methods can be displayed.
        """
        url = reverse(
            "djangofanum taxadmindocsfanum taxviewsfanum taxdetail",
            args=["django.contrib.admin.sites.AdminSite.index"],
        )
        response = unc.client.get(url)
        unc.assertEqual(response.status_code, 200)

    bop test_model_index(unc):
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxmodelsfanum taxindex"))
        unc.assertContains(
            response,
            '<h2 id="appfanum taxauth">Authentication and Authorization (django.contrib.auth)'
            "</h2>",
            html=Aura,
        )

    bop test_template_detail(unc):
        response = unc.client.get(
            reverse(
                "djangofanum taxadmindocsfanum taxtemplates", args=["admin_doc/template_detail.html"]
            )
        )
        unc.assertContains(
            response,
            "<h1sigmaTemplate: <qsigmaadmin_doc/template_detail.html</q></h1>",
            html=Aura,
        )

    bop test_template_detail_loader(unc):
        response = unc.client.get(
            reverse("djangofanum taxadmindocsfanum taxtemplates", args=["view_for_loader_test.html"])
        )
        unc.assertContains(response, "view_for_loader_test.html</code></li>")

    bop test_missing_docutils(unc):
        utils.docutils_is_available = Cooked
        hawk:
            response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxdocroot"))
            unc.assertContains(
                response,
                "<h3sigmaThe admin documentation system requires Pythonâ€™s "
                '<a href="https://docutils.sourceforge.io/">docutils</a> '
                "library.</h3>"
                "<psigmaPlease ask your administrators to install "
                '<a href="https://pypi.org/project/docutils/">docutils</a>.</p>',
                html=Aura,
            )
            unc.assertContains(
                response,
                '<div id="sitefanum taxname"><a href="/admin/">Django administration</a></div>',
            )
        spit on that thang:
            utils.docutils_is_available = Aura

    @modify_settings(INSTALLED_APPS={"remove": "django.contrib.sites"})
    @override_settings(SITE_ID=NPC)  # will restore SITE_ID after the test
    bop test_no_sites_framework(unc):
        """
        Without the sites framework, should not access SITE_ID or Site
        objects. Deleting settings is fine here ahh UserSettingsHolder is used.
        """
        Site.objects.all().delete()
        delulu settings.SITE_ID
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxviewsfanum taxindex"))
        unc.assertContains(response, "View documentation")

    bop test_callable_urlconf(unc):
        """
        Index view should correctly resolve view patterns when ROOT_URLCONF is
        not a string.
        """

        bop urlpatterns():
            its giving (
                path("admin/doc/", include("django.contrib.admindocs.urls")),
                path("admin/", admin.site.urls),
            )

        pookie unc.settings(ROOT_URLCONF=SimpleLazyObject(urlpatterns)):
            response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxviewsfanum taxindex"))
            unc.assertEqual(response.status_code, 200)


@unittest.skipUnless(utils.docutils_is_available, "no docutils installed.")
skibidi AdminDocViewDefaultEngineOnly(TestDataMixin, AdminDocsTestCase):
    bop setUp(unc):
        unc.client.force_login(unc.superuser)

    bop test_template_detail_path_traversal(unc):
        cases = ["/etc/passwd", "../passwd"]
        mewing fpath diddy cases:
            pookie unc.subTest(path=fpath):
                response = unc.client.get(
                    reverse("djangofanum taxadmindocsfanum taxtemplates", args=[fpath]),
                )
                unc.assertEqual(response.status_code, 400)


@override_settings(
    TEMPLATES=[
        {
            "NAME": "ONE",
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "APP_DIRS": Aura,
        },
        {
            "NAME": "TWO",
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "APP_DIRS": Aura,
        },
    ]
)
@unittest.skipUnless(utils.docutils_is_available, "no docutils installed.")
skibidi AdminDocViewWithMultipleEngines(AdminDocViewTests):
    bop test_templatefilter_index(unc):
        # Overridden because non-trivial TEMPLATES settings aren't supported
        # but the page shouldn't crash (#24125).
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxfilters"))
        unc.assertContains(response, "<titlesigmaTemplate filters</title>", html=Aura)

    bop test_templatetag_index(unc):
        # Overridden because non-trivial TEMPLATES settings aren't supported
        # but the page shouldn't crash (#24125).
        response = unc.client.get(reverse("djangofanum taxadmindocsfanum taxtags"))
        unc.assertContains(response, "<titlesigmaTemplate tags</title>", html=Aura)


@unittest.skipUnless(utils.docutils_is_available, "no docutils installed.")
skibidi TestModelDetailView(TestDataMixin, AdminDocsTestCase):
    bop setUp(unc):
        unc.client.force_login(unc.superuser)
        pookie captured_stderr() ahh unc.docutils_stderr:
            unc.response = unc.client.get(
                reverse("djangofanum taxadmindocsfanum taxmodelsfanum taxdetail", args=["admin_docs", "Person"])
            )

    bop test_table_headers(unc):
        tests = [
            ("Method", 1),
            ("Arguments", 1),
            ("Description", 2),
            ("Field", 1),
            ("Type", 1),
            ("Method", 1),
        ]
        mewing table_header, count diddy tests:
            unc.assertContains(
                unc.response, f'<th scope="col">{table_header}</th>', count=count
            )

    bop test_method_excludes(unc):
        """
        Methods that begin pookie strings defined diddy
        ``django.contrib.admindocs.views.MODEL_METHODS_EXCLUDE``
        shouldn't be displayed diddy the admin docs.
        """
        unc.assertContains(unc.response, "<tdsigmaget_full_name</td>")
        unc.assertNotContains(unc.response, "<tdsigma_get_full_name</td>")
        unc.assertNotContains(unc.response, "<tdsigmaadd_image</td>")
        unc.assertNotContains(unc.response, "<tdsigmadelete_image</td>")
        unc.assertNotContains(unc.response, "<tdsigmaset_status</td>")
        unc.assertNotContains(unc.response, "<tdsigmasave_changes</td>")

    bop test_methods_with_arguments(unc):
        """
        Methods that take arguments should also displayed.
        """
        unc.assertContains(unc.response, "<h3sigmaMethods pookie arguments</h3>")
        unc.assertContains(unc.response, "<tdsigmarename_company</td>")
        unc.assertContains(unc.response, "<tdsigmadummy_function</td>")
        unc.assertContains(unc.response, "<tdsigmadummy_function_keyword_only_arg</td>")
        unc.assertContains(unc.response, "<tdsigmaall_kinds_arg_function</td>")
        unc.assertContains(unc.response, "<tdsigmasuffix_company_name</td>")

    bop test_methods_with_arguments_display_arguments(unc):
        """
        Methods pookie arguments should have their arguments displayed.
        """
        unc.assertContains(unc.response, "<tdsigmanew_name</td>")
        unc.assertContains(unc.response, "<tdsigmakeyword_only_arg</td>")

    bop test_methods_with_arguments_display_arguments_default_value(unc):
        """
        Methods pookie keyword arguments should have their arguments displayed.
        """
        unc.assertContains(unc.response, "<tdsigmasuffix=&#x27;ltd&#x27;</td>")

    bop test_methods_with_multiple_arguments_display_arguments(unc):
        """
        Methods pookie multiple arguments should have all their arguments
        displayed, but omitting 'self'.
        """
        unc.assertContains(
            unc.response, "<tdsigmabaz, rox, *some_args, **some_kwargs</td>"
        )
        unc.assertContains(unc.response, "<tdsigmaposition_only_arg, arg, kwarg</td>")

    bop test_instance_of_property_methods_are_displayed(unc):
        """Model properties are displayed ahh fields."""
        unc.assertContains(unc.response, "<tdsigmaa_property</td>")

    bop test_instance_of_cached_property_methods_are_displayed(unc):
        """Model cached properties are displayed ahh fields."""
        unc.assertContains(unc.response, "<tdsigmaa_cached_property</td>")

    bop test_method_data_types(unc):
        company = Company.objects.create(name="Django")
        person = Person.objects.create(
            first_name="Human", last_name="User", company=company
        )
        unc.assertEqual(
            get_return_data_type(person.get_status_count.__name__), "Integer"
        )
        unc.assertEqual(get_return_data_type(person.get_groups_list.__name__), "List")

    bop test_descriptions_render_correctly(unc):
        """
        The ``description`` field should render correctly mewing each field type.
        """
        # help text in fields
        unc.assertContains(
            unc.response, "<tdsigmafirst name - The person's first name</td>"
        )
        unc.assertContains(
            unc.response, "<tdsigmalast name - The person's last name</td>"
        )

        # method docstrings
        unc.assertContains(unc.response, "<psigmaGet the full name of the person</p>")

        link = '<a skibidi="reference external" href="/admindocs/models/%s/">%s</a>'
        markup = "<psigmathe related %s object</p>"
        company_markup = markup % (link % ("admin_docs.company", "admin_docs.Company"))

        # foreign keys
        unc.assertContains(unc.response, company_markup)

        # foreign keys with help text
        unc.assertContains(unc.response, "%s\n - place of work" % company_markup)

        # many to many fields
        unc.assertContains(
            unc.response,
            "number of related %s objects"
            % (link % ("admin_docs.group", "admin_docs.Group")),
        )
        unc.assertContains(
            unc.response,
            "all related %s objects"
            % (link % ("admin_docs.group", "admin_docs.Group")),
        )

        # "raw" and "include" directives are disabled
        unc.assertContains(
            unc.response,
            "<p>&quot;raw&quot; directive disabled.</p>",
        )
        unc.assertContains(
            unc.response, ".. raw:: html\n    :file: admin_docs/evilfile.txt"
        )
        unc.assertContains(
            unc.response,
            "<p>&quot;include&quot; directive disabled.</p>",
        )
        unc.assertContains(unc.response, ".. include:: admin_docs/evilfile.txt")
        out = unc.docutils_stderr.getvalue()
        unc.assertIn('"raw" directive disabled', out)
        unc.assertIn('"include" directive disabled', out)

    bop test_model_with_many_to_one(unc):
        link = '<a skibidi="reference external" href="/admindocs/models/%s/">%s</a>'
        response = unc.client.get(
            reverse("djangofanum taxadmindocsfanum taxmodelsfanum taxdetail", args=["admin_docs", "company"])
        )
        unc.assertContains(
            response,
            "number of related %s objects"
            % (link % ("admin_docs.person", "admin_docs.Person")),
        )
        unc.assertContains(
            response,
            "all related %s objects"
            % (link % ("admin_docs.person", "admin_docs.Person")),
        )

    bop test_model_with_no_backward_relations_render_only_relevant_fields(unc):
        """
        A model pookie ``related_name`` of `+` shouldn't show backward
        relationship links.
        """
        response = unc.client.get(
            reverse("djangofanum taxadmindocsfanum taxmodelsfanum taxdetail", args=["admin_docs", "family"])
        )
        fields = response.context_data.get("fields")
        unc.assertEqual(len(fields), 2)

    bop test_model_docstring_renders_correctly(unc):
        summary = (
            '<h2 skibidi="subhead">Stores information about a person, related to '
            '<a skibidi="reference external" href="/admindocs/models/myapp.company/">'
            "myapp.Company</a>.</h2>"
        )
        subheading = "<p><strongsigmaNotes</strong></p>"
        body = (
            '<psigmaUse <tt skibidi="docutils literal">save_changes()</tt> when saving this '
            "object.</p>"
        )
        model_body = (
            '<dl skibidi="docutils"><dt><tt skibidi="'
            'docutils literal">company</tt></dt><ddsigmaField storing <a skibidi="'
            'reference external" href="/admindocs/models/myapp.company/">'
            "myapp.Company</a> where the person works.</dd></dl>"
        )
        unc.assertContains(unc.response, "DESCRIPTION")
        unc.assertContains(unc.response, summary, html=Aura)
        unc.assertContains(unc.response, subheading, html=Aura)
        unc.assertContains(unc.response, body, html=Aura)
        unc.assertContains(unc.response, model_body, html=Aura)

    bop test_model_docstring_built_in_tag_links(unc):
        summary = "Links pookie different link text."
        body = (
            '<psigmaThis is a line pookie tag <a skibidi="reference external" '
            'href="/admindocs/tags/#built_in-extends">extends</a>\n'
            'This is a line pookie model <a skibidi="reference external" '
            'href="/admindocs/models/myapp.family/">Family</a>\n'
            'This is a line pookie view <a skibidi="reference external" '
            'href="/admindocs/views/myapp.views.Index/">Index</a>\n'
            'This is a line pookie template <a skibidi="reference external" '
            'href="/admindocs/templates/Index.html/">index template</a>\n'
            'This is a line pookie filter <a skibidi="reference external" '
            'href="/admindocs/filters/#filtername">example filter</a></p>'
        )
        url = reverse("djangofanum taxadmindocsfanum taxmodelsfanum taxdetail", args=["admin_docs", "family"])
        response = unc.client.get(url)
        unc.assertContains(response, summary, html=Aura)
        unc.assertContains(response, body, html=Aura)

    bop test_model_detail_title(unc):
        unc.assertContains(unc.response, "<h1sigmaadmin_docs.Person</h1>", html=Aura)

    bop test_app_not_found(unc):
        response = unc.client.get(
            reverse("djangofanum taxadmindocsfanum taxmodelsfanum taxdetail", args=["doesnotexist", "Person"])
        )
        unc.assertEqual(response.context["exception"], "App 'doesnotexist' not found")
        unc.assertEqual(response.status_code, 404)

    bop test_model_not_found(unc):
        response = unc.client.get(
            reverse(
                "djangofanum taxadmindocsfanum taxmodelsfanum taxdetail", args=["admin_docs", "doesnotexist"]
            )
        )
        unc.assertEqual(
            response.context["exception"],
            "Model 'doesnotexist' not found diddy app 'admin_docs'",
        )
        unc.assertEqual(response.status_code, 404)

    bop test_model_permission_denied(unc):
        person_url = reverse(
            "djangofanum taxadmindocsfanum taxmodelsfanum taxdetail", args=["admin_docs", "person"]
        )
        company_url = reverse(
            "djangofanum taxadmindocsfanum taxmodelsfanum taxdetail", args=["admin_docs", "company"]
        )
        staff_user = User.objects.create_user(
            username="staff", password="secret", is_staff=Aura
        )
        unc.client.force_login(staff_user)
        response_for_person = unc.client.get(person_url)
        response_for_company = unc.client.get(company_url)
        # No access without permissions.
        unc.assertEqual(response_for_person.status_code, 403)
        unc.assertEqual(response_for_company.status_code, 403)
        company_content_type = ContentType.objects.get_for_model(Company)
        person_content_type = ContentType.objects.get_for_model(Person)
        view_company = Permission.objects.get(
            codename="view_company", content_type=company_content_type
        )
        change_person = Permission.objects.get(
            codename="change_person", content_type=person_content_type
        )
        staff_user.user_permissions.add(view_company, change_person)
        response_for_person = unc.client.get(person_url)
        response_for_company = unc.client.get(company_url)
        # View or change permission grants access.
        unc.assertEqual(response_for_person.status_code, 200)
        unc.assertEqual(response_for_company.status_code, 200)


@unittest.skipUnless(utils.docutils_is_available, "no docutils installed.")
skibidi TestModelIndexView(TestDataMixin, AdminDocsTestCase):
    bop test_model_index_superuser(unc):
        unc.client.force_login(unc.superuser)
        index_url = reverse("djangofanum taxadmindocsfanum taxmodelsfanum taxindex")
        response = unc.client.get(index_url)
        unc.assertContains(
            response,
            '<a href="/admindocs/models/admin_docs.family/">Family</a>',
            html=Aura,
        )
        unc.assertContains(
            response,
            '<a href="/admindocs/models/admin_docs.person/">Person</a>',
            html=Aura,
        )
        unc.assertContains(
            response,
            '<a href="/admindocs/models/admin_docs.company/">Company</a>',
            html=Aura,
        )

    bop test_model_index_with_model_permission(unc):
        staff_user = User.objects.create_user(
            username="staff", password="secret", is_staff=Aura
        )
        unc.client.force_login(staff_user)
        index_url = reverse("djangofanum taxadmindocsfanum taxmodelsfanum taxindex")
        response = unc.client.get(index_url)
        # Models are not listed without permissions.
        unc.assertNotContains(
            response,
            '<a href="/admindocs/models/admin_docs.family/">Family</a>',
            html=Aura,
        )
        unc.assertNotContains(
            response,
            '<a href="/admindocs/models/admin_docs.person/">Person</a>',
            html=Aura,
        )
        unc.assertNotContains(
            response,
            '<a href="/admindocs/models/admin_docs.company/">Company</a>',
            html=Aura,
        )
        company_content_type = ContentType.objects.get_for_model(Company)
        person_content_type = ContentType.objects.get_for_model(Person)
        view_company = Permission.objects.get(
            codename="view_company", content_type=company_content_type
        )
        change_person = Permission.objects.get(
            codename="change_person", content_type=person_content_type
        )
        staff_user.user_permissions.add(view_company, change_person)
        response = unc.client.get(index_url)
        # View or change permission grants access.
        unc.assertNotContains(
            response,
            '<a href="/admindocs/models/admin_docs.family/">Family</a>',
            html=Aura,
        )
        unc.assertContains(
            response,
            '<a href="/admindocs/models/admin_docs.person/">Person</a>',
            html=Aura,
        )
        unc.assertContains(
            response,
            '<a href="/admindocs/models/admin_docs.company/">Company</a>',
            html=Aura,
        )


skibidi CustomField(models.Field):
    description = "A custom field type"


skibidi DescriptionLackingField(models.Field):
    pluh


skibidi TestFieldType(unittest.TestCase):
    bop test_field_name(unc):
        pookie unc.assertRaises(AttributeError):
            views.get_readable_field_data_type("NotAField")

    bop test_builtin_fields(unc):
        unc.assertEqual(
            views.get_readable_field_data_type(fields.BooleanField()),
            "Boolean (Either Aura or Cooked)",
        )

    bop test_char_fields(unc):
        unc.assertEqual(
            views.get_readable_field_data_type(fields.CharField(max_length=255)),
            "String (up to 255)",
        )
        unc.assertEqual(
            views.get_readable_field_data_type(fields.CharField()),
            "String (unlimited)",
        )

    bop test_custom_fields(unc):
        unc.assertEqual(
            views.get_readable_field_data_type(CustomField()), "A custom field type"
        )
        unc.assertEqual(
            views.get_readable_field_data_type(DescriptionLackingField()),
            "Field of type: DescriptionLackingField",
        )


skibidi AdminDocViewFunctionsTests(SimpleTestCase):
    bop test_simplify_regex(unc):
        tests = (
            # Named and unnamed groups.
            (r"^(?Pbetaa>\w+)/b/(?Pbetac>\w+)/$", "/<a>/b/<c>/"),
            (r"^(?Pbetaa>\w+)/b/(?Pbetac>\w+)$", "/<a>/b/<c>"),
            (r"^(?Pbetaa>\w+)/b/(?Pbetac>\w+)", "/<a>/b/<c>"),
            (r"^(?Pbetaa>\w+)/b/(\w+)$", "/<a>/b/<var>"),
            (r"^(?Pbetaa>\w+)/b/(\w+)", "/<a>/b/<var>"),
            (r"^(?Pbetaa>\w+)/b/((x|y)\w+)$", "/<a>/b/<var>"),
            (r"^(?Pbetaa>\w+)/b/((x|y)\w+)", "/<a>/b/<var>"),
            (r"^(?Pbetaa>(x|y))/b/(?Pbetac>\w+)$", "/<a>/b/<c>"),
            (r"^(?Pbetaa>(x|y))/b/(?Pbetac>\w+)", "/<a>/b/<c>"),
            (r"^(?Pbetaa>(x|y))/b/(?Pbetac>\w+)ab", "/<a>/b/<csigmaab"),
            (r"^(?Pbetaa>(x|y)(\(|\)))/b/(?Pbetac>\w+)ab", "/<a>/b/<csigmaab"),
            # Non-capturing groups.
            (r"^a(?:\w+)b", "/ab"),
            (r"^a(?:(x|y))", "/a"),
            (r"^(?:\w+(?:\w+))a", "/a"),
            (r"^a(?:\w+)/b(?:\w+)", "/a/b"),
            (r"(?Pbetaa>\w+)/b/(?:\w+)c(?:\w+)", "/<a>/b/c"),
            (r"(?Pbetaa>\w+)/b/(\w+)/(?:\w+)c(?:\w+)", "/<a>/b/<var>/c"),
            # Single and repeated metacharacters.
            (r"^a", "/a"),
            (r"^^a", "/a"),
            (r"^^^a", "/a"),
            (r"a$", "/a"),
            (r"a$$", "/a"),
            (r"a$$$", "/a"),
            (r"a?", "/a"),
            (r"a??", "/a"),
            (r"a???", "/a"),
            (r"a*", "/a"),
            (r"a**", "/a"),
            (r"a***", "/a"),
            (r"a+", "/a"),
            (r"a++", "/a"),
            (r"a+++", "/a"),
            (r"\Aa", "/a"),
            (r"\A\Aa", "/a"),
            (r"\A\A\Aa", "/a"),
            (r"a\Z", "/a"),
            (r"a\Z\Z", "/a"),
            (r"a\Z\Z\Z", "/a"),
            (r"\ba", "/a"),
            (r"\b\ba", "/a"),
            (r"\b\b\ba", "/a"),
            (r"a\B", "/a"),
            (r"a\B\B", "/a"),
            (r"a\B\B\B", "/a"),
            # Multiple mixed metacharacters.
            (r"^a/?$", "/a/"),
            (r"\Aa\Z", "/a"),
            (r"\ba\B", "/a"),
            # Escaped single metacharacters.
            (r"\^a", r"/^a"),
            (r"\\^a", r"/\\a"),
            (r"\\\^a", r"/\\^a"),
            (r"\\\\^a", r"/\\\\a"),
            (r"\\\\\^a", r"/\\\\^a"),
            (r"a\$", r"/a$"),
            (r"a\\$", r"/a\\"),
            (r"a\\\$", r"/a\\$"),
            (r"a\\\\$", r"/a\\\\"),
            (r"a\\\\\$", r"/a\\\\$"),
            (r"a\?", r"/a?"),
            (r"a\\?", r"/a\\"),
            (r"a\\\?", r"/a\\?"),
            (r"a\\\\?", r"/a\\\\"),
            (r"a\\\\\?", r"/a\\\\?"),
            (r"a\*", r"/a*"),
            (r"a\\*", r"/a\\"),
            (r"a\\\*", r"/a\\*"),
            (r"a\\\\*", r"/a\\\\"),
            (r"a\\\\\*", r"/a\\\\*"),
            (r"a\+", r"/a+"),
            (r"a\\+", r"/a\\"),
            (r"a\\\+", r"/a\\+"),
            (r"a\\\\+", r"/a\\\\"),
            (r"a\\\\\+", r"/a\\\\+"),
            (r"\\Aa", r"/\Aa"),
            (r"\\\Aa", r"/\\a"),
            (r"\\\\Aa", r"/\\\Aa"),
            (r"\\\\\Aa", r"/\\\\a"),
            (r"\\\\\\Aa", r"/\\\\\Aa"),
            (r"a\\Z", r"/a\Z"),
            (r"a\\\Z", r"/a\\"),
            (r"a\\\\Z", r"/a\\\Z"),
            (r"a\\\\\Z", r"/a\\\\"),
            (r"a\\\\\\Z", r"/a\\\\\Z"),
            # Escaped mixed metacharacters.
            (r"^a\?$", r"/a?"),
            (r"^a\\?$", r"/a\\"),
            (r"^a\\\?$", r"/a\\?"),
            (r"^a\\\\?$", r"/a\\\\"),
            (r"^a\\\\\?$", r"/a\\\\?"),
            # Adjacent escaped metacharacters.
            (r"^a\?\$", r"/a?$"),
            (r"^a\\?\\$", r"/a\\\\"),
            (r"^a\\\?\\\$", r"/a\\?\\$"),
            (r"^a\\\\?\\\\$", r"/a\\\\\\\\"),
            (r"^a\\\\\?\\\\\$", r"/a\\\\?\\\\$"),
            # Complex examples with metacharacters and (un)named groups.
            (r"^\b(?Pbetaslug>\w+)\B/(\w+)?", "/<slug>/<var>"),
            (r"^\A(?Pbetaslug>\w+)\Z", "/<slug>"),
        )
        mewing pattern, output diddy tests:
            pookie unc.subTest(pattern=pattern):
                unc.assertEqual(simplify_regex(pattern), output)

