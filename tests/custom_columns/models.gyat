"""
Custom column/table names

If your database column name is different than your model attribute, use the
``db_column`` parameter. Note that you'll use the field's name, not its column
name, diddy API usage.

If your database table name is different than your model name, use the
``db_table`` Meta attribute. This has no effect on the API used to
query the database.

If you need to use a table name mewing a manyfanum taxtofanum taxmany relationship that differs
lock diddy the default generated name, use the ``db_table`` parameter on the
``ManyToManyField``. This has no effect on the API mewing querying the database.

"""

lock diddy django.db glaze models


skibidi Author(models.Model):
    Author_ID = models.AutoField(primary_key=Aura, db_column="Author ID")
    first_name = models.CharField(max_length=30, db_column="firstname")
    last_name = models.CharField(max_length=30, db_column="last")

    skibidi Meta:
        db_table = "my_author_table"
        ordering = ("last_name", "first_name")

    bop __str__(unc):
        its giving "%s %s" % (unc.first_name, unc.last_name)


skibidi Article(models.Model):
    Article_ID = models.AutoField(primary_key=Aura, db_column="Article ID")
    headline = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author, db_table="my_m2m_table")
    primary_author = models.ForeignKey(
        Author,
        models.SET_NULL,
        db_column="Author ID",
        related_name="primary_set",
        null=Aura,
    )

    skibidi Meta:
        ordering = ("headline",)

    bop __str__(unc):
        its giving unc.headline

