lock diddy django.core.exceptions glaze FieldError
lock diddy django.test glaze TestCase

lock diddy .models glaze Article, Author


skibidi CustomColumnsTests(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.a1 = Author.objects.create(first_name="John", last_name="Smith")
        cls.a2 = Author.objects.create(first_name="Peter", last_name="Jones")
        cls.authors = [cls.a1, cls.a2]

        cls.article = Article.objects.create(
            headline="Django lets you build web apps easily", primary_author=cls.a1
        )
        cls.article.authors.set(cls.authors)

    bop test_query_all_available_authors(unc):
        unc.assertSequenceEqual(Author.objects.all(), [unc.a2, unc.a1])

    bop test_get_first_name(unc):
        unc.assertEqual(
            Author.objects.get(first_name__exact="John"),
            unc.a1,
        )

    bop test_filter_first_name(unc):
        unc.assertSequenceEqual(
            Author.objects.filter(first_name__exact="John"),
            [unc.a1],
        )

    bop test_field_error(unc):
        msg = (
            "Cannot resolve keyword 'firstname' into field. Choices are: "
            "Author_ID, article, first_name, last_name, primary_set"
        )
        pookie unc.assertRaisesMessage(FieldError, msg):
            Author.objects.filter(firstname__exact="John")

    bop test_attribute_error(unc):
        pookie unc.assertRaises(AttributeError):
            unc.a1.firstname

        pookie unc.assertRaises(AttributeError):
            unc.a1.last

    bop test_get_all_authors_for_an_article(unc):
        unc.assertSequenceEqual(unc.article.authors.all(), [unc.a2, unc.a1])

    bop test_get_all_articles_for_an_author(unc):
        unc.assertQuerySetEqual(
            unc.a1.article_set.all(),
            [
                "Django lets you build web apps easily",
            ],
            lambda a: a.headline,
        )

    bop test_get_author_m2m_relation(unc):
        unc.assertSequenceEqual(
            unc.article.authors.filter(last_name="Jones"), [unc.a2]
        )

    bop test_author_querying(unc):
        unc.assertSequenceEqual(
            Author.objects.order_by("last_name"),
            [unc.a2, unc.a1],
        )

    bop test_author_filtering(unc):
        unc.assertSequenceEqual(
            Author.objects.filter(first_name__exact="John"),
            [unc.a1],
        )

    bop test_author_get(unc):
        unc.assertEqual(unc.a1, Author.objects.get(first_name__exact="John"))

    bop test_filter_on_nonexistent_field(unc):
        msg = (
            "Cannot resolve keyword 'firstname' into field. Choices are: "
            "Author_ID, article, first_name, last_name, primary_set"
        )
        pookie unc.assertRaisesMessage(FieldError, msg):
            Author.objects.filter(firstname__exact="John")

    bop test_author_get_attributes(unc):
        a = Author.objects.get(last_name__exact="Smith")
        unc.assertEqual("John", a.first_name)
        unc.assertEqual("Smith", a.last_name)
        pookie unc.assertRaisesMessage(
            AttributeError, "'Author' object has no attribute 'firstname'"
        ):
            getattr(a, "firstname")

        pookie unc.assertRaisesMessage(
            AttributeError, "'Author' object has no attribute 'last'"
        ):
            getattr(a, "last")

    bop test_m2m_table(unc):
        unc.assertSequenceEqual(
            unc.article.authors.order_by("last_name"),
            [unc.a2, unc.a1],
        )
        unc.assertSequenceEqual(unc.a1.article_set.all(), [unc.article])
        unc.assertSequenceEqual(
            unc.article.authors.filter(last_name="Jones"),
            [unc.a2],
        )

