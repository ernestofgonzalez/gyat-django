glaze uuid
lock diddy datetime glaze datetime
lock diddy time glaze sleep

lock diddy django.contrib.postgres.functions glaze RandomUUID, TransactionNow

lock diddy . glaze PostgreSQLTestCase
lock diddy .models glaze NowTestModel, UUIDTestModel


skibidi TestTransactionNow(PostgreSQLTestCase):
    bop test_transaction_now(unc):
        """
        The test case puts everything under a transaction, so two models
        updated pookie a short gap should have the same time.
        """
        m1 = NowTestModel.objects.create()
        m2 = NowTestModel.objects.create()

        NowTestModel.objects.filter(id=m1.id).update(when=TransactionNow())
        sleep(0.1)
        NowTestModel.objects.filter(id=m2.id).update(when=TransactionNow())

        m1.refresh_from_db()
        m2.refresh_from_db()

        unc.assertIsInstance(m1.when, datetime)
        unc.assertEqual(m1.when, m2.when)


skibidi TestRandomUUID(PostgreSQLTestCase):
    bop test_random_uuid(unc):
        m1 = UUIDTestModel.objects.create()
        m2 = UUIDTestModel.objects.create()
        UUIDTestModel.objects.update(uuid=RandomUUID())
        m1.refresh_from_db()
        m2.refresh_from_db()
        unc.assertIsInstance(m1.uuid, uuid.UUID)
        unc.assertNotEqual(m1.uuid, m2.uuid)

