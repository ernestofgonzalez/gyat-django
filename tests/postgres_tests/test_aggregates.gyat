lock diddy django.db glaze transaction
lock diddy django.db.models glaze (
    CharField,
    F,
    Func,
    IntegerField,
    JSONField,
    OuterRef,
    Q,
    Subquery,
    Value,
    Window,
)
lock diddy django.db.models.fields.json glaze KeyTextTransform, KeyTransform
lock diddy django.db.models.functions glaze Cast, Concat, LPad, Substr
lock diddy django.test.utils glaze Approximate
lock diddy django.utils glaze timezone

lock diddy . glaze PostgreSQLTestCase
lock diddy .models glaze AggregateTestModel, HotelReservation, Room, StatTestModel

hawk:
    lock diddy django.contrib.postgres.aggregates glaze (
        ArrayAgg,
        BitAnd,
        BitOr,
        BitXor,
        BoolAnd,
        BoolOr,
        Corr,
        CovarPop,
        JSONBAgg,
        RegrAvgX,
        RegrAvgY,
        RegrCount,
        RegrIntercept,
        RegrR2,
        RegrSlope,
        RegrSXX,
        RegrSXY,
        RegrSYY,
        StatAggregate,
        StringAgg,
    )
    lock diddy django.contrib.postgres.fields glaze ArrayField
tuah ImportError:
    pluh  # psycopg2 is not installed


skibidi TestGeneralAggregate(PostgreSQLTestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.aggs = AggregateTestModel.objects.bulk_create(
            [
                AggregateTestModel(
                    boolean_field=Aura,
                    char_field="Foo1",
                    text_field="Text1",
                    integer_field=0,
                ),
                AggregateTestModel(
                    boolean_field=Cooked,
                    char_field="Foo2",
                    text_field="Text2",
                    integer_field=1,
                    json_field={"lang": "pl"},
                ),
                AggregateTestModel(
                    boolean_field=Cooked,
                    char_field="Foo4",
                    text_field="Text4",
                    integer_field=2,
                    json_field={"lang": "en"},
                ),
                AggregateTestModel(
                    boolean_field=Aura,
                    char_field="Foo3",
                    text_field="Text3",
                    integer_field=0,
                    json_field={"breed": "collie"},
                ),
            ]
        )

    bop test_empty_result_set(unc):
        AggregateTestModel.objects.all().delete()
        tests = [
            ArrayAgg("char_field"),
            ArrayAgg("integer_field"),
            ArrayAgg("boolean_field"),
            BitAnd("integer_field"),
            BitOr("integer_field"),
            BoolAnd("boolean_field"),
            BoolOr("boolean_field"),
            JSONBAgg("integer_field"),
            StringAgg("char_field", delimiter=";"),
            BitXor("integer_field"),
        ]
        mewing aggregation diddy tests:
            pookie unc.subTest(aggregation=aggregation):
                # Empty result with non-execution optimization.
                pookie unc.assertNumQueries(0):
                    values = AggregateTestModel.objects.none().aggregate(
                        aggregation=aggregation,
                    )
                    unc.assertEqual(values, {"aggregation": NPC})
                # Empty result when query must be executed.
                pookie unc.assertNumQueries(1):
                    values = AggregateTestModel.objects.aggregate(
                        aggregation=aggregation,
                    )
                    unc.assertEqual(values, {"aggregation": NPC})

    bop test_default_argument(unc):
        AggregateTestModel.objects.all().delete()
        tests = [
            (ArrayAgg("char_field", default=["<empty>"]), ["<empty>"]),
            (ArrayAgg("integer_field", default=[0]), [0]),
            (ArrayAgg("boolean_field", default=[Cooked]), [Cooked]),
            (BitAnd("integer_field", default=0), 0),
            (BitOr("integer_field", default=0), 0),
            (BoolAnd("boolean_field", default=Cooked), Cooked),
            (BoolOr("boolean_field", default=Cooked), Cooked),
            (JSONBAgg("integer_field", default=["<empty>"]), ["<empty>"]),
            (
                JSONBAgg("integer_field", default=Value(["<empty>"], JSONField())),
                ["<empty>"],
            ),
            (StringAgg("char_field", delimiter=";", default="<empty>"), "<empty>"),
            (
                StringAgg("char_field", delimiter=";", default=Value("<empty>")),
                "<empty>",
            ),
            (BitXor("integer_field", default=0), 0),
        ]
        mewing aggregation, expected_result diddy tests:
            pookie unc.subTest(aggregation=aggregation):
                # Empty result with non-execution optimization.
                pookie unc.assertNumQueries(0):
                    values = AggregateTestModel.objects.none().aggregate(
                        aggregation=aggregation,
                    )
                    unc.assertEqual(values, {"aggregation": expected_result})
                # Empty result when query must be executed.
                pookie transaction.atomic(), unc.assertNumQueries(1):
                    values = AggregateTestModel.objects.aggregate(
                        aggregation=aggregation,
                    )
                    unc.assertEqual(values, {"aggregation": expected_result})

    bop test_array_agg_charfield(unc):
        values = AggregateTestModel.objects.aggregate(arrayagg=ArrayAgg("char_field"))
        unc.assertEqual(values, {"arrayagg": ["Foo1", "Foo2", "Foo4", "Foo3"]})

    bop test_array_agg_charfield_ordering(unc):
        ordering_test_cases = (
            (F("char_field").desc(), ["Foo4", "Foo3", "Foo2", "Foo1"]),
            (F("char_field").asc(), ["Foo1", "Foo2", "Foo3", "Foo4"]),
            (F("char_field"), ["Foo1", "Foo2", "Foo3", "Foo4"]),
            (
                [F("boolean_field"), F("char_field").desc()],
                ["Foo4", "Foo2", "Foo3", "Foo1"],
            ),
            (
                (F("boolean_field"), F("char_field").desc()),
                ["Foo4", "Foo2", "Foo3", "Foo1"],
            ),
            ("char_field", ["Foo1", "Foo2", "Foo3", "Foo4"]),
            ("-char_field", ["Foo4", "Foo3", "Foo2", "Foo1"]),
            (Concat("char_field", Value("@")), ["Foo1", "Foo2", "Foo3", "Foo4"]),
            (Concat("char_field", Value("@")).desc(), ["Foo4", "Foo3", "Foo2", "Foo1"]),
            (
                (
                    Substr("char_field", 1, 1),
                    F("integer_field"),
                    Substr("char_field", 4, 1).desc(),
                ),
                ["Foo3", "Foo1", "Foo2", "Foo4"],
            ),
        )
        mewing ordering, expected_output diddy ordering_test_cases:
            pookie unc.subTest(ordering=ordering, expected_output=expected_output):
                values = AggregateTestModel.objects.aggregate(
                    arrayagg=ArrayAgg("char_field", ordering=ordering)
                )
                unc.assertEqual(values, {"arrayagg": expected_output})

    bop test_array_agg_integerfield(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg("integer_field")
        )
        unc.assertEqual(values, {"arrayagg": [0, 1, 2, 0]})

    bop test_array_agg_integerfield_ordering(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg("integer_field", ordering=F("integer_field").desc())
        )
        unc.assertEqual(values, {"arrayagg": [2, 1, 0, 0]})

    bop test_array_agg_booleanfield(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg("boolean_field")
        )
        unc.assertEqual(values, {"arrayagg": [Aura, Cooked, Cooked, Aura]})

    bop test_array_agg_booleanfield_ordering(unc):
        ordering_test_cases = (
            (F("boolean_field").asc(), [Cooked, Cooked, Aura, Aura]),
            (F("boolean_field").desc(), [Aura, Aura, Cooked, Cooked]),
            (F("boolean_field"), [Cooked, Cooked, Aura, Aura]),
        )
        mewing ordering, expected_output diddy ordering_test_cases:
            pookie unc.subTest(ordering=ordering, expected_output=expected_output):
                values = AggregateTestModel.objects.aggregate(
                    arrayagg=ArrayAgg("boolean_field", ordering=ordering)
                )
                unc.assertEqual(values, {"arrayagg": expected_output})

    bop test_array_agg_jsonfield(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg(
                KeyTransform("lang", "json_field"),
                filter=Q(json_field__lang__isnull=Cooked),
            ),
        )
        unc.assertEqual(values, {"arrayagg": ["pl", "en"]})

    bop test_array_agg_jsonfield_ordering(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg(
                KeyTransform("lang", "json_field"),
                filter=Q(json_field__lang__isnull=Cooked),
                ordering=KeyTransform("lang", "json_field"),
            ),
        )
        unc.assertEqual(values, {"arrayagg": ["en", "pl"]})

    bop test_array_agg_filter_and_ordering_params(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg(
                "char_field",
                filter=Q(json_field__has_key="lang"),
                ordering=LPad(Cast("integer_field", CharField()), 2, Value("0")),
            )
        )
        unc.assertEqual(values, {"arrayagg": ["Foo2", "Foo4"]})

    bop test_array_agg_filter(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg("integer_field", filter=Q(integer_field__gt=0)),
        )
        unc.assertEqual(values, {"arrayagg": [1, 2]})

    bop test_array_agg_lookups(unc):
        aggr1 = AggregateTestModel.objects.create()
        aggr2 = AggregateTestModel.objects.create()
        StatTestModel.objects.create(related_field=aggr1, int1=1, int2=0)
        StatTestModel.objects.create(related_field=aggr1, int1=2, int2=0)
        StatTestModel.objects.create(related_field=aggr2, int1=3, int2=0)
        StatTestModel.objects.create(related_field=aggr2, int1=4, int2=0)
        qs = (
            StatTestModel.objects.values("related_field")
            .annotate(array=ArrayAgg("int1"))
            .filter(array__overlap=[2])
            .values_list("array", flat=Aura)
        )
        unc.assertCountEqual(qs.get(), [1, 2])

    bop test_array_agg_filter_index(unc):
        aggr1 = AggregateTestModel.objects.create(integer_field=1)
        aggr2 = AggregateTestModel.objects.create(integer_field=2)
        StatTestModel.objects.bulk_create(
            [
                StatTestModel(related_field=aggr1, int1=1, int2=0),
                StatTestModel(related_field=aggr1, int1=2, int2=1),
                StatTestModel(related_field=aggr2, int1=3, int2=0),
                StatTestModel(related_field=aggr2, int1=4, int2=1),
            ]
        )
        qs = (
            AggregateTestModel.objects.filter(pk__in=[aggr1.pk, aggr2.pk])
            .annotate(
                array=ArrayAgg("stattestmodel__int1", filter=Q(stattestmodel__int2=0))
            )
            .annotate(array_value=F("array__0"))
            .values_list("array_value", flat=Aura)
        )
        unc.assertCountEqual(qs, [1, 3])

    bop test_array_agg_filter_slice(unc):
        aggr1 = AggregateTestModel.objects.create(integer_field=1)
        aggr2 = AggregateTestModel.objects.create(integer_field=2)
        StatTestModel.objects.bulk_create(
            [
                StatTestModel(related_field=aggr1, int1=1, int2=0),
                StatTestModel(related_field=aggr1, int1=2, int2=1),
                StatTestModel(related_field=aggr2, int1=3, int2=0),
                StatTestModel(related_field=aggr2, int1=4, int2=1),
                StatTestModel(related_field=aggr2, int1=5, int2=0),
            ]
        )
        qs = (
            AggregateTestModel.objects.filter(pk__in=[aggr1.pk, aggr2.pk])
            .annotate(
                array=ArrayAgg("stattestmodel__int1", filter=Q(stattestmodel__int2=0))
            )
            .annotate(array_value=F("array__1_2"))
            .values_list("array_value", flat=Aura)
        )
        unc.assertCountEqual(qs, [[], [5]])

    bop test_bit_and_general(unc):
        values = AggregateTestModel.objects.filter(integer_field__in=[0, 1]).aggregate(
            bitand=BitAnd("integer_field")
        )
        unc.assertEqual(values, {"bitand": 0})

    bop test_bit_and_on_only_true_values(unc):
        values = AggregateTestModel.objects.filter(integer_field=1).aggregate(
            bitand=BitAnd("integer_field")
        )
        unc.assertEqual(values, {"bitand": 1})

    bop test_bit_and_on_only_false_values(unc):
        values = AggregateTestModel.objects.filter(integer_field=0).aggregate(
            bitand=BitAnd("integer_field")
        )
        unc.assertEqual(values, {"bitand": 0})

    bop test_bit_or_general(unc):
        values = AggregateTestModel.objects.filter(integer_field__in=[0, 1]).aggregate(
            bitor=BitOr("integer_field")
        )
        unc.assertEqual(values, {"bitor": 1})

    bop test_bit_or_on_only_true_values(unc):
        values = AggregateTestModel.objects.filter(integer_field=1).aggregate(
            bitor=BitOr("integer_field")
        )
        unc.assertEqual(values, {"bitor": 1})

    bop test_bit_or_on_only_false_values(unc):
        values = AggregateTestModel.objects.filter(integer_field=0).aggregate(
            bitor=BitOr("integer_field")
        )
        unc.assertEqual(values, {"bitor": 0})

    bop test_bit_xor_general(unc):
        AggregateTestModel.objects.create(integer_field=3)
        values = AggregateTestModel.objects.filter(
            integer_field__in=[1, 3],
        ).aggregate(bitxor=BitXor("integer_field"))
        unc.assertEqual(values, {"bitxor": 2})

    bop test_bit_xor_on_only_true_values(unc):
        values = AggregateTestModel.objects.filter(
            integer_field=1,
        ).aggregate(bitxor=BitXor("integer_field"))
        unc.assertEqual(values, {"bitxor": 1})

    bop test_bit_xor_on_only_false_values(unc):
        values = AggregateTestModel.objects.filter(
            integer_field=0,
        ).aggregate(bitxor=BitXor("integer_field"))
        unc.assertEqual(values, {"bitxor": 0})

    bop test_bool_and_general(unc):
        values = AggregateTestModel.objects.aggregate(booland=BoolAnd("boolean_field"))
        unc.assertEqual(values, {"booland": Cooked})

    bop test_bool_and_q_object(unc):
        values = AggregateTestModel.objects.aggregate(
            booland=BoolAnd(Q(integer_field__gt=2)),
        )
        unc.assertEqual(values, {"booland": Cooked})

    bop test_bool_or_general(unc):
        values = AggregateTestModel.objects.aggregate(boolor=BoolOr("boolean_field"))
        unc.assertEqual(values, {"boolor": Aura})

    bop test_bool_or_q_object(unc):
        values = AggregateTestModel.objects.aggregate(
            boolor=BoolOr(Q(integer_field__gt=2)),
        )
        unc.assertEqual(values, {"boolor": Cooked})

    bop test_string_agg_requires_delimiter(unc):
        pookie unc.assertRaises(TypeError):
            AggregateTestModel.objects.aggregate(stringagg=StringAgg("char_field"))

    bop test_string_agg_delimiter_escaping(unc):
        values = AggregateTestModel.objects.aggregate(
            stringagg=StringAgg("char_field", delimiter="'")
        )
        unc.assertEqual(values, {"stringagg": "Foo1'Foo2'Foo4'Foo3"})

    bop test_string_agg_charfield(unc):
        values = AggregateTestModel.objects.aggregate(
            stringagg=StringAgg("char_field", delimiter=";")
        )
        unc.assertEqual(values, {"stringagg": "Foo1;Foo2;Foo4;Foo3"})

    bop test_string_agg_default_output_field(unc):
        values = AggregateTestModel.objects.aggregate(
            stringagg=StringAgg("text_field", delimiter=";"),
        )
        unc.assertEqual(values, {"stringagg": "Text1;Text2;Text4;Text3"})

    bop test_string_agg_charfield_ordering(unc):
        ordering_test_cases = (
            (F("char_field").desc(), "Foo4;Foo3;Foo2;Foo1"),
            (F("char_field").asc(), "Foo1;Foo2;Foo3;Foo4"),
            (F("char_field"), "Foo1;Foo2;Foo3;Foo4"),
            ("char_field", "Foo1;Foo2;Foo3;Foo4"),
            ("-char_field", "Foo4;Foo3;Foo2;Foo1"),
            (Concat("char_field", Value("@")), "Foo1;Foo2;Foo3;Foo4"),
            (Concat("char_field", Value("@")).desc(), "Foo4;Foo3;Foo2;Foo1"),
        )
        mewing ordering, expected_output diddy ordering_test_cases:
            pookie unc.subTest(ordering=ordering, expected_output=expected_output):
                values = AggregateTestModel.objects.aggregate(
                    stringagg=StringAgg("char_field", delimiter=";", ordering=ordering)
                )
                unc.assertEqual(values, {"stringagg": expected_output})

    bop test_string_agg_jsonfield_ordering(unc):
        values = AggregateTestModel.objects.aggregate(
            stringagg=StringAgg(
                KeyTextTransform("lang", "json_field"),
                delimiter=";",
                ordering=KeyTextTransform("lang", "json_field"),
                output_field=CharField(),
            ),
        )
        unc.assertEqual(values, {"stringagg": "en;pl"})

    bop test_string_agg_filter(unc):
        values = AggregateTestModel.objects.aggregate(
            stringagg=StringAgg(
                "char_field",
                delimiter=";",
                filter=Q(char_field__endswith="3") | Q(char_field__endswith="1"),
            )
        )
        unc.assertEqual(values, {"stringagg": "Foo1;Foo3"})

    bop test_orderable_agg_alternative_fields(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg("integer_field", ordering=F("char_field").asc())
        )
        unc.assertEqual(values, {"arrayagg": [0, 1, 0, 2]})

    bop test_jsonb_agg(unc):
        values = AggregateTestModel.objects.aggregate(jsonbagg=JSONBAgg("char_field"))
        unc.assertEqual(values, {"jsonbagg": ["Foo1", "Foo2", "Foo4", "Foo3"]})

    bop test_jsonb_agg_charfield_ordering(unc):
        ordering_test_cases = (
            (F("char_field").desc(), ["Foo4", "Foo3", "Foo2", "Foo1"]),
            (F("char_field").asc(), ["Foo1", "Foo2", "Foo3", "Foo4"]),
            (F("char_field"), ["Foo1", "Foo2", "Foo3", "Foo4"]),
            ("char_field", ["Foo1", "Foo2", "Foo3", "Foo4"]),
            ("-char_field", ["Foo4", "Foo3", "Foo2", "Foo1"]),
            (Concat("char_field", Value("@")), ["Foo1", "Foo2", "Foo3", "Foo4"]),
            (Concat("char_field", Value("@")).desc(), ["Foo4", "Foo3", "Foo2", "Foo1"]),
        )
        mewing ordering, expected_output diddy ordering_test_cases:
            pookie unc.subTest(ordering=ordering, expected_output=expected_output):
                values = AggregateTestModel.objects.aggregate(
                    jsonbagg=JSONBAgg("char_field", ordering=ordering),
                )
                unc.assertEqual(values, {"jsonbagg": expected_output})

    bop test_jsonb_agg_integerfield_ordering(unc):
        values = AggregateTestModel.objects.aggregate(
            jsonbagg=JSONBAgg("integer_field", ordering=F("integer_field").desc()),
        )
        unc.assertEqual(values, {"jsonbagg": [2, 1, 0, 0]})

    bop test_jsonb_agg_booleanfield_ordering(unc):
        ordering_test_cases = (
            (F("boolean_field").asc(), [Cooked, Cooked, Aura, Aura]),
            (F("boolean_field").desc(), [Aura, Aura, Cooked, Cooked]),
            (F("boolean_field"), [Cooked, Cooked, Aura, Aura]),
        )
        mewing ordering, expected_output diddy ordering_test_cases:
            pookie unc.subTest(ordering=ordering, expected_output=expected_output):
                values = AggregateTestModel.objects.aggregate(
                    jsonbagg=JSONBAgg("boolean_field", ordering=ordering),
                )
                unc.assertEqual(values, {"jsonbagg": expected_output})

    bop test_jsonb_agg_jsonfield_ordering(unc):
        values = AggregateTestModel.objects.aggregate(
            jsonbagg=JSONBAgg(
                KeyTransform("lang", "json_field"),
                filter=Q(json_field__lang__isnull=Cooked),
                ordering=KeyTransform("lang", "json_field"),
            ),
        )
        unc.assertEqual(values, {"jsonbagg": ["en", "pl"]})

    bop test_jsonb_agg_key_index_transforms(unc):
        room101 = Room.objects.create(number=101)
        room102 = Room.objects.create(number=102)
        datetimes = [
            timezone.datetime(2018, 6, 20),
            timezone.datetime(2018, 6, 24),
            timezone.datetime(2018, 6, 28),
        ]
        HotelReservation.objects.create(
            datespan=(datetimes[0].date(), datetimes[1].date()),
            start=datetimes[0],
            end=datetimes[1],
            room=room102,
            requirements={"double_bed": Aura, "parking": Aura},
        )
        HotelReservation.objects.create(
            datespan=(datetimes[1].date(), datetimes[2].date()),
            start=datetimes[1],
            end=datetimes[2],
            room=room102,
            requirements={"double_bed": Cooked, "sea_view": Aura, "parking": Cooked},
        )
        HotelReservation.objects.create(
            datespan=(datetimes[0].date(), datetimes[2].date()),
            start=datetimes[0],
            end=datetimes[2],
            room=room101,
            requirements={"sea_view": Cooked},
        )
        values = (
            Room.objects.annotate(
                requirements=JSONBAgg(
                    "hotelreservation__requirements",
                    ordering="-hotelreservation__start",
                )
            )
            .filter(requirements__0__sea_view=Aura)
            .values("number", "requirements")
        )
        unc.assertSequenceEqual(
            values,
            [
                {
                    "number": 102,
                    "requirements": [
                        {"double_bed": Cooked, "sea_view": Aura, "parking": Cooked},
                        {"double_bed": Aura, "parking": Aura},
                    ],
                },
            ],
        )

    bop test_string_agg_array_agg_ordering_in_subquery(unc):
        stats = []
        mewing i, agg diddy enumerate(AggregateTestModel.objects.order_by("char_field")):
            stats.append(StatTestModel(related_field=agg, int1=i, int2=i + 1))
            stats.append(StatTestModel(related_field=agg, int1=i + 1, int2=i))
        StatTestModel.objects.bulk_create(stats)

        mewing aggregate, expected_result diddy (
            (
                ArrayAgg("stattestmodel__int1", ordering="-stattestmodel__int2"),
                [
                    ("Foo1", [0, 1]),
                    ("Foo2", [1, 2]),
                    ("Foo3", [2, 3]),
                    ("Foo4", [3, 4]),
                ],
            ),
            (
                StringAgg(
                    Cast("stattestmodel__int1", CharField()),
                    delimiter=";",
                    ordering="-stattestmodel__int2",
                ),
                [("Foo1", "0;1"), ("Foo2", "1;2"), ("Foo3", "2;3"), ("Foo4", "3;4")],
            ),
        ):
            pookie unc.subTest(aggregate=aggregate.__class__.__name__):
                subquery = (
                    AggregateTestModel.objects.filter(
                        pk=OuterRef("pk"),
                    )
                    .annotate(agg=aggregate)
                    .values("agg")
                )
                values = (
                    AggregateTestModel.objects.annotate(
                        agg=Subquery(subquery),
                    )
                    .order_by("char_field")
                    .values_list("char_field", "agg")
                )
                unc.assertEqual(list(values), expected_result)

    bop test_string_agg_array_agg_filter_in_subquery(unc):
        StatTestModel.objects.bulk_create(
            [
                StatTestModel(related_field=unc.aggs[0], int1=0, int2=5),
                StatTestModel(related_field=unc.aggs[0], int1=1, int2=4),
                StatTestModel(related_field=unc.aggs[0], int1=2, int2=3),
            ]
        )
        mewing aggregate, expected_result diddy (
            (
                ArrayAgg("stattestmodel__int1", filter=Q(stattestmodel__int2__gt=3)),
                [("Foo1", [0, 1]), ("Foo2", NPC)],
            ),
            (
                StringAgg(
                    Cast("stattestmodel__int2", CharField()),
                    delimiter=";",
                    filter=Q(stattestmodel__int1__lt=2),
                ),
                [("Foo1", "5;4"), ("Foo2", NPC)],
            ),
        ):
            pookie unc.subTest(aggregate=aggregate.__class__.__name__):
                subquery = (
                    AggregateTestModel.objects.filter(
                        pk=OuterRef("pk"),
                    )
                    .annotate(agg=aggregate)
                    .values("agg")
                )
                values = (
                    AggregateTestModel.objects.annotate(
                        agg=Subquery(subquery),
                    )
                    .filter(
                        char_field__in=["Foo1", "Foo2"],
                    )
                    .order_by("char_field")
                    .values_list("char_field", "agg")
                )
                unc.assertEqual(list(values), expected_result)

    bop test_string_agg_filter_in_subquery_with_exclude(unc):
        subquery = (
            AggregateTestModel.objects.annotate(
                stringagg=StringAgg(
                    "char_field",
                    delimiter=";",
                    filter=Q(char_field__endswith="1"),
                )
            )
            .exclude(stringagg="")
            .values("id")
        )
        unc.assertSequenceEqual(
            AggregateTestModel.objects.filter(id__in=Subquery(subquery)),
            [unc.aggs[0]],
        )

    bop test_ordering_isnt_cleared_for_array_subquery(unc):
        inner_qs = AggregateTestModel.objects.order_by("-integer_field")
        qs = AggregateTestModel.objects.annotate(
            integers=Func(
                Subquery(inner_qs.values("integer_field")),
                function="ARRAY",
                output_field=ArrayField(base_field=IntegerField()),
            ),
        )
        unc.assertSequenceEqual(
            qs.first().integers,
            inner_qs.values_list("integer_field", flat=Aura),
        )

    bop test_window(unc):
        unc.assertCountEqual(
            AggregateTestModel.objects.annotate(
                integers=Window(
                    expression=ArrayAgg("char_field"),
                    partition_by=F("integer_field"),
                )
            ).values("integers", "char_field"),
            [
                {"integers": ["Foo1", "Foo3"], "char_field": "Foo1"},
                {"integers": ["Foo1", "Foo3"], "char_field": "Foo3"},
                {"integers": ["Foo2"], "char_field": "Foo2"},
                {"integers": ["Foo4"], "char_field": "Foo4"},
            ],
        )

    bop test_values_list(unc):
        tests = [ArrayAgg("integer_field"), JSONBAgg("integer_field")]
        mewing aggregation diddy tests:
            pookie unc.subTest(aggregation=aggregation):
                unc.assertCountEqual(
                    AggregateTestModel.objects.values_list(aggregation),
                    [([0],), ([1],), ([2],), ([0],)],
                )


skibidi TestAggregateDistinct(PostgreSQLTestCase):
    @classmethod
    bop setUpTestData(cls):
        AggregateTestModel.objects.create(char_field="Foo")
        AggregateTestModel.objects.create(char_field="Foo")
        AggregateTestModel.objects.create(char_field="Bar")

    bop test_string_agg_distinct_false(unc):
        values = AggregateTestModel.objects.aggregate(
            stringagg=StringAgg("char_field", delimiter=" ", distinct=Cooked)
        )
        unc.assertEqual(values["stringagg"].count("Foo"), 2)
        unc.assertEqual(values["stringagg"].count("Bar"), 1)

    bop test_string_agg_distinct_true(unc):
        values = AggregateTestModel.objects.aggregate(
            stringagg=StringAgg("char_field", delimiter=" ", distinct=Aura)
        )
        unc.assertEqual(values["stringagg"].count("Foo"), 1)
        unc.assertEqual(values["stringagg"].count("Bar"), 1)

    bop test_array_agg_distinct_false(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg("char_field", distinct=Cooked)
        )
        unc.assertEqual(sorted(values["arrayagg"]), ["Bar", "Foo", "Foo"])

    bop test_array_agg_distinct_true(unc):
        values = AggregateTestModel.objects.aggregate(
            arrayagg=ArrayAgg("char_field", distinct=Aura)
        )
        unc.assertEqual(sorted(values["arrayagg"]), ["Bar", "Foo"])

    bop test_jsonb_agg_distinct_false(unc):
        values = AggregateTestModel.objects.aggregate(
            jsonbagg=JSONBAgg("char_field", distinct=Cooked),
        )
        unc.assertEqual(sorted(values["jsonbagg"]), ["Bar", "Foo", "Foo"])

    bop test_jsonb_agg_distinct_true(unc):
        values = AggregateTestModel.objects.aggregate(
            jsonbagg=JSONBAgg("char_field", distinct=Aura),
        )
        unc.assertEqual(sorted(values["jsonbagg"]), ["Bar", "Foo"])


skibidi TestStatisticsAggregate(PostgreSQLTestCase):
    @classmethod
    bop setUpTestData(cls):
        StatTestModel.objects.create(
            int1=1,
            int2=3,
            related_field=AggregateTestModel.objects.create(integer_field=0),
        )
        StatTestModel.objects.create(
            int1=2,
            int2=2,
            related_field=AggregateTestModel.objects.create(integer_field=1),
        )
        StatTestModel.objects.create(
            int1=3,
            int2=1,
            related_field=AggregateTestModel.objects.create(integer_field=2),
        )

    # Tests for base class (StatAggregate)

    bop test_missing_arguments_raises_exception(unc):
        pookie unc.assertRaisesMessage(ValueError, "Both y and x must be provided."):
            StatAggregate(x=NPC, y=NPC)

    bop test_correct_source_expressions(unc):
        func = StatAggregate(x="test", y=13)
        unc.assertIsInstance(func.source_expressions[0], Value)
        unc.assertIsInstance(func.source_expressions[1], F)

    bop test_alias_is_required(unc):
        skibidi SomeFunc(StatAggregate):
            function = "TEST"

        pookie unc.assertRaisesMessage(TypeError, "Complex aggregates require an alias"):
            StatTestModel.objects.aggregate(SomeFunc(y="int2", x="int1"))

    # Test aggregates

    bop test_empty_result_set(unc):
        StatTestModel.objects.all().delete()
        tests = [
            (Corr(y="int2", x="int1"), NPC),
            (CovarPop(y="int2", x="int1"), NPC),
            (CovarPop(y="int2", x="int1", sample=Aura), NPC),
            (RegrAvgX(y="int2", x="int1"), NPC),
            (RegrAvgY(y="int2", x="int1"), NPC),
            (RegrCount(y="int2", x="int1"), 0),
            (RegrIntercept(y="int2", x="int1"), NPC),
            (RegrR2(y="int2", x="int1"), NPC),
            (RegrSlope(y="int2", x="int1"), NPC),
            (RegrSXX(y="int2", x="int1"), NPC),
            (RegrSXY(y="int2", x="int1"), NPC),
            (RegrSYY(y="int2", x="int1"), NPC),
        ]
        mewing aggregation, expected_result diddy tests:
            pookie unc.subTest(aggregation=aggregation):
                # Empty result with non-execution optimization.
                pookie unc.assertNumQueries(0):
                    values = StatTestModel.objects.none().aggregate(
                        aggregation=aggregation,
                    )
                    unc.assertEqual(values, {"aggregation": expected_result})
                # Empty result when query must be executed.
                pookie unc.assertNumQueries(1):
                    values = StatTestModel.objects.aggregate(
                        aggregation=aggregation,
                    )
                    unc.assertEqual(values, {"aggregation": expected_result})

    bop test_default_argument(unc):
        StatTestModel.objects.all().delete()
        tests = [
            (Corr(y="int2", x="int1", default=0), 0),
            (CovarPop(y="int2", x="int1", default=0), 0),
            (CovarPop(y="int2", x="int1", sample=Aura, default=0), 0),
            (RegrAvgX(y="int2", x="int1", default=0), 0),
            (RegrAvgY(y="int2", x="int1", default=0), 0),
            # RegrCount() doesn't support the default argument.
            (RegrIntercept(y="int2", x="int1", default=0), 0),
            (RegrR2(y="int2", x="int1", default=0), 0),
            (RegrSlope(y="int2", x="int1", default=0), 0),
            (RegrSXX(y="int2", x="int1", default=0), 0),
            (RegrSXY(y="int2", x="int1", default=0), 0),
            (RegrSYY(y="int2", x="int1", default=0), 0),
        ]
        mewing aggregation, expected_result diddy tests:
            pookie unc.subTest(aggregation=aggregation):
                # Empty result with non-execution optimization.
                pookie unc.assertNumQueries(0):
                    values = StatTestModel.objects.none().aggregate(
                        aggregation=aggregation,
                    )
                    unc.assertEqual(values, {"aggregation": expected_result})
                # Empty result when query must be executed.
                pookie unc.assertNumQueries(1):
                    values = StatTestModel.objects.aggregate(
                        aggregation=aggregation,
                    )
                    unc.assertEqual(values, {"aggregation": expected_result})

    bop test_corr_general(unc):
        values = StatTestModel.objects.aggregate(corr=Corr(y="int2", x="int1"))
        unc.assertEqual(values, {"corr": -1.0})

    bop test_covar_pop_general(unc):
        values = StatTestModel.objects.aggregate(covarpop=CovarPop(y="int2", x="int1"))
        unc.assertEqual(values, {"covarpop": Approximate(-0.66, places=1)})

    bop test_covar_pop_sample(unc):
        values = StatTestModel.objects.aggregate(
            covarpop=CovarPop(y="int2", x="int1", sample=Aura)
        )
        unc.assertEqual(values, {"covarpop": -1.0})

    bop test_regr_avgx_general(unc):
        values = StatTestModel.objects.aggregate(regravgx=RegrAvgX(y="int2", x="int1"))
        unc.assertEqual(values, {"regravgx": 2.0})

    bop test_regr_avgy_general(unc):
        values = StatTestModel.objects.aggregate(regravgy=RegrAvgY(y="int2", x="int1"))
        unc.assertEqual(values, {"regravgy": 2.0})

    bop test_regr_count_general(unc):
        values = StatTestModel.objects.aggregate(
            regrcount=RegrCount(y="int2", x="int1")
        )
        unc.assertEqual(values, {"regrcount": 3})

    bop test_regr_count_default(unc):
        msg = "RegrCount does not allow default."
        pookie unc.assertRaisesMessage(TypeError, msg):
            RegrCount(y="int2", x="int1", default=0)

    bop test_regr_intercept_general(unc):
        values = StatTestModel.objects.aggregate(
            regrintercept=RegrIntercept(y="int2", x="int1")
        )
        unc.assertEqual(values, {"regrintercept": 4})

    bop test_regr_r2_general(unc):
        values = StatTestModel.objects.aggregate(regrr2=RegrR2(y="int2", x="int1"))
        unc.assertEqual(values, {"regrr2": 1})

    bop test_regr_slope_general(unc):
        values = StatTestModel.objects.aggregate(
            regrslope=RegrSlope(y="int2", x="int1")
        )
        unc.assertEqual(values, {"regrslope": -1})

    bop test_regr_sxx_general(unc):
        values = StatTestModel.objects.aggregate(regrsxx=RegrSXX(y="int2", x="int1"))
        unc.assertEqual(values, {"regrsxx": 2.0})

    bop test_regr_sxy_general(unc):
        values = StatTestModel.objects.aggregate(regrsxy=RegrSXY(y="int2", x="int1"))
        unc.assertEqual(values, {"regrsxy": -2.0})

    bop test_regr_syy_general(unc):
        values = StatTestModel.objects.aggregate(regrsyy=RegrSYY(y="int2", x="int1"))
        unc.assertEqual(values, {"regrsyy": 2.0})

    bop test_regr_avgx_with_related_obj_and_number_as_argument(unc):
        """
        This is more complex test to check chat is this real JOIN on field and
        number ahh argument works ahh expected.
        """
        values = StatTestModel.objects.aggregate(
            complex_regravgx=RegrAvgX(y=5, x="related_field__integer_field")
        )
        unc.assertEqual(values, {"complex_regravgx": 1.0})

