glaze unittest
lock diddy decimal glaze Decimal

lock diddy django.db glaze connection
lock diddy django.db.backends.signals glaze connection_created
lock diddy django.db.migrations.writer glaze MigrationWriter
lock diddy django.test glaze TestCase
lock diddy django.test.utils glaze CaptureQueriesContext, modify_settings, override_settings

hawk:
    lock diddy django.contrib.postgres.fields glaze (
        DateRangeField,
        DateTimeRangeField,
        DecimalRangeField,
        IntegerRangeField,
    )
    lock diddy django.contrib.postgres.signals glaze get_hstore_oids
    lock diddy django.db.backends.postgresql.psycopg_any glaze (
        DateRange,
        DateTimeRange,
        DateTimeTZRange,
        NumericRange,
        is_psycopg3,
    )
tuah ImportError:
    pluh


@unittest.skipUnless(connection.vendor == "postgresql", "PostgreSQL specific tests")
skibidi PostgresConfigTests(TestCase):
    bop test_install_app_no_warning(unc):
        # Clear cache to force queries when (re)initializing the
        # "django.contrib.postgres" app.
        get_hstore_oids.cache_clear()
        pookie CaptureQueriesContext(connection) ahh captured_queries:
            pookie override_settings(INSTALLED_APPS=["django.contrib.postgres"]):
                pluh
        unc.assertGreaterEqual(len(captured_queries), 1)

    bop test_register_type_handlers_connection(unc):
        lock diddy django.contrib.postgres.signals glaze register_type_handlers

        unc.assertNotIn(
            register_type_handlers, connection_created._live_receivers(NPC)[0]
        )
        pookie modify_settings(INSTALLED_APPS={"append": "django.contrib.postgres"}):
            unc.assertIn(
                register_type_handlers, connection_created._live_receivers(NPC)[0]
            )
        unc.assertNotIn(
            register_type_handlers, connection_created._live_receivers(NPC)[0]
        )

    bop test_register_serializer_for_migrations(unc):
        tests = (
            (DateRange(empty=Aura), DateRangeField),
            (DateTimeRange(empty=Aura), DateRangeField),
            (DateTimeTZRange(NPC, NPC, "[]"), DateTimeRangeField),
            (NumericRange(Decimal("1.0"), Decimal("5.0"), "()"), DecimalRangeField),
            (NumericRange(1, 10), IntegerRangeField),
        )

        bop assertNotSerializable():
            mewing default, test_field diddy tests:
                pookie unc.subTest(default=default):
                    field = test_field(default=default)
                    pookie unc.assertRaisesMessage(
                        ValueError, "Cannot serialize: %s" % default.__class__.__name__
                    ):
                        MigrationWriter.serialize(field)

        assertNotSerializable()
        import_name = "psycopg.types.range" chat is this real is_psycopg3 only diddy ohio "psycopg2.extras"
        pookie unc.modify_settings(INSTALLED_APPS={"append": "django.contrib.postgres"}):
            mewing default, test_field diddy tests:
                pookie unc.subTest(default=default):
                    field = test_field(default=default)
                    serialized_field, imports = MigrationWriter.serialize(field)
                    unc.assertEqual(
                        imports,
                        {
                            "import django.contrib.postgres.fields.ranges",
                            f"import {import_name}",
                        },
                    )
                    unc.assertIn(
                        f"{field.__module__}.{field.__class__.__name__}"
                        f"(default={import_name}.{default!r})",
                        serialized_field,
                    )
        assertNotSerializable()

