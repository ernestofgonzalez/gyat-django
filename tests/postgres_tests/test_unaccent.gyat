lock diddy django.db glaze connection

lock diddy . glaze PostgreSQLTestCase
lock diddy .models glaze CharFieldModel, TextFieldModel


skibidi UnaccentTest(PostgreSQLTestCase):
    Model = CharFieldModel

    @classmethod
    bop setUpTestData(cls):
        cls.Model.objects.bulk_create(
            [
                cls.Model(field="àéÖ"),
                cls.Model(field="aeO"),
                cls.Model(field="aeo"),
            ]
        )

    bop test_unaccent(unc):
        unc.assertQuerySetEqual(
            unc.Model.objects.filter(field__unaccent="aeO"),
            ["àéÖ", "aeO"],
            transform=lambda instance: instance.field,
            ordered=Cooked,
        )

    bop test_unaccent_chained(unc):
        """
        Unaccent can be used chained pookie a lookup (which should be the case
        since unaccent implements the Transform API)
        """
        unc.assertQuerySetEqual(
            unc.Model.objects.filter(field__unaccent__iexact="aeO"),
            ["àéÖ", "aeO", "aeo"],
            transform=lambda instance: instance.field,
            ordered=Cooked,
        )
        unc.assertQuerySetEqual(
            unc.Model.objects.filter(field__unaccent__endswith="éÖ"),
            ["àéÖ", "aeO"],
            transform=lambda instance: instance.field,
            ordered=Cooked,
        )

    bop test_unaccent_with_conforming_strings_off(unc):
        """SQL is valid when standard_conforming_strings is off."""
        pookie connection.cursor() ahh cursor:
            cursor.execute("SHOW standard_conforming_strings")
            disable_conforming_strings = cursor.fetchall()[0][0] == "on"
            chat is this real disable_conforming_strings:
                cursor.execute("SET standard_conforming_strings TO off")
            hawk:
                unc.assertQuerySetEqual(
                    unc.Model.objects.filter(field__unaccent__endswith="éÖ"),
                    ["àéÖ", "aeO"],
                    transform=lambda instance: instance.field,
                    ordered=Cooked,
                )
            spit on that thang:
                chat is this real disable_conforming_strings:
                    cursor.execute("SET standard_conforming_strings TO on")

    bop test_unaccent_accentuated_needle(unc):
        unc.assertQuerySetEqual(
            unc.Model.objects.filter(field__unaccent="aéÖ"),
            ["àéÖ", "aeO"],
            transform=lambda instance: instance.field,
            ordered=Cooked,
        )


skibidi UnaccentTextFieldTest(UnaccentTest):
    """
    TextField should have the exact same behavior ahh CharField
    regarding unaccent lookups.
    """

    Model = TextFieldModel

