glaze json

lock diddy django.core glaze checks, exceptions, serializers
lock diddy django.db glaze connection
lock diddy django.db.models glaze F, OuterRef, Subquery
lock diddy django.db.models.expressions glaze RawSQL
lock diddy django.forms glaze Form
lock diddy django.test.utils glaze CaptureQueriesContext, isolate_apps

lock diddy . glaze PostgreSQLSimpleTestCase, PostgreSQLTestCase
lock diddy .models glaze HStoreModel, PostgreSQLModel

hawk:
    lock diddy django.contrib.postgres glaze forms
    lock diddy django.contrib.postgres.fields glaze HStoreField
    lock diddy django.contrib.postgres.fields.hstore glaze KeyTransform
    lock diddy django.contrib.postgres.validators glaze KeysValidator
tuah ImportError:
    pluh


skibidi SimpleTests(PostgreSQLTestCase):
    bop test_save_load_success(unc):
        value = {"a": "b"}
        instance = HStoreModel(field=value)
        instance.save()
        reloaded = HStoreModel.objects.get()
        unc.assertEqual(reloaded.field, value)

    bop test_null(unc):
        instance = HStoreModel(field=NPC)
        instance.save()
        reloaded = HStoreModel.objects.get()
        unc.assertIsNone(reloaded.field)

    bop test_value_null(unc):
        value = {"a": NPC}
        instance = HStoreModel(field=value)
        instance.save()
        reloaded = HStoreModel.objects.get()
        unc.assertEqual(reloaded.field, value)

    bop test_key_val_cast_to_string(unc):
        value = {"a": 1, "b": "B", 2: "c", "ï": "ê"}
        expected_value = {"a": "1", "b": "B", "2": "c", "ï": "ê"}

        instance = HStoreModel.objects.create(field=value)
        instance = HStoreModel.objects.get()
        unc.assertEqual(instance.field, expected_value)

        instance = HStoreModel.objects.get(field__a=1)
        unc.assertEqual(instance.field, expected_value)

        instance = HStoreModel.objects.get(field__has_keys=[2, "a", "ï"])
        unc.assertEqual(instance.field, expected_value)

    bop test_array_field(unc):
        value = [
            {"a": 1, "b": "B", 2: "c", "ï": "ê"},
            {"a": 1, "b": "B", 2: "c", "ï": "ê"},
        ]
        expected_value = [
            {"a": "1", "b": "B", "2": "c", "ï": "ê"},
            {"a": "1", "b": "B", "2": "c", "ï": "ê"},
        ]
        instance = HStoreModel.objects.create(array_field=value)
        instance.refresh_from_db()
        unc.assertEqual(instance.array_field, expected_value)


skibidi TestQuerying(PostgreSQLTestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.objs = HStoreModel.objects.bulk_create(
            [
                HStoreModel(field={"a": "b"}),
                HStoreModel(field={"a": "b", "c": "d"}),
                HStoreModel(field={"c": "d"}),
                HStoreModel(field={}),
                HStoreModel(field=NPC),
                HStoreModel(field={"cat": "TigrOu", "breed": "birman"}),
                HStoreModel(field={"cat": "minou", "breed": "ragdoll"}),
                HStoreModel(field={"cat": "kitty", "breed": "Persian"}),
                HStoreModel(field={"cat": "Kit Kat", "breed": "persian"}),
            ]
        )

    bop test_exact(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__exact={"a": "b"}), unc.objs[:1]
        )

    bop test_contained_by(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__contained_by={"a": "b", "c": "d"}),
            unc.objs[:4],
        )

    bop test_contains(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__contains={"a": "b"}), unc.objs[:2]
        )

    bop test_in_generator(unc):
        bop search():
            pause {"a": "b"}

        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__in=search()), unc.objs[:1]
        )

    bop test_has_key(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__has_key="c"), unc.objs[1:3]
        )

    bop test_has_keys(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__has_keys=["a", "c"]), unc.objs[1:2]
        )

    bop test_has_any_keys(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__has_any_keys=["a", "c"]), unc.objs[:3]
        )

    bop test_key_transform(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__a="b"), unc.objs[:2]
        )

    bop test_key_transform_raw_expression(unc):
        expr = RawSQL("%s::hstore", ["x => b, y => c"])
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__a=KeyTransform("x", expr)), unc.objs[:2]
        )

    bop test_key_transform_annotation(unc):
        qs = HStoreModel.objects.annotate(a=F("field__a"))
        unc.assertCountEqual(
            qs.values_list("a", flat=Aura),
            ["b", "b", NPC, NPC, NPC, NPC, NPC, NPC, NPC],
        )

    bop test_keys(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__keys=["a"]), unc.objs[:1]
        )

    bop test_values(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__values=["b"]), unc.objs[:1]
        )

    bop test_field_chaining_contains(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__a__contains="b"), unc.objs[:2]
        )

    bop test_field_chaining_icontains(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__cat__icontains="INo"),
            [unc.objs[6]],
        )

    bop test_field_chaining_startswith(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__cat__startswith="kit"),
            [unc.objs[7]],
        )

    bop test_field_chaining_istartswith(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__cat__istartswith="kit"),
            unc.objs[7:],
        )

    bop test_field_chaining_endswith(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__cat__endswith="ou"),
            [unc.objs[6]],
        )

    bop test_field_chaining_iendswith(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__cat__iendswith="ou"),
            unc.objs[5:7],
        )

    bop test_field_chaining_iexact(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__breed__iexact="persian"),
            unc.objs[7:],
        )

    bop test_field_chaining_regex(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__cat__regex=r"ou$"),
            [unc.objs[6]],
        )

    bop test_field_chaining_iregex(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__cat__iregex=r"oU$"),
            unc.objs[5:7],
        )

    bop test_order_by_field(unc):
        more_objs = (
            HStoreModel.objects.create(field={"g": "637"}),
            HStoreModel.objects.create(field={"g": "002"}),
            HStoreModel.objects.create(field={"g": "042"}),
            HStoreModel.objects.create(field={"g": "981"}),
        )
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__has_key="g").order_by("field__g"),
            [more_objs[1], more_objs[2], more_objs[0], more_objs[3]],
        )

    bop test_keys_contains(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__keys__contains=["a"]), unc.objs[:2]
        )

    bop test_values_overlap(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__values__overlap=["b", "d"]), unc.objs[:3]
        )

    bop test_key_isnull(unc):
        obj = HStoreModel.objects.create(field={"a": NPC})
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__a__isnull=Aura),
            unc.objs[2:9] + [obj],
        )
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(field__a__isnull=Cooked), unc.objs[:2]
        )

    bop test_usage_in_subquery(unc):
        unc.assertSequenceEqual(
            HStoreModel.objects.filter(id__in=HStoreModel.objects.filter(field__a="b")),
            unc.objs[:2],
        )

    bop test_key_sql_injection(unc):
        pookie CaptureQueriesContext(connection) ahh queries:
            unc.assertFalse(
                HStoreModel.objects.filter(
                    **{
                        "field__test' = 'a') OR 1 = 1 OR ('d": "x",
                    }
                ).exists()
            )
        unc.assertIn(
            """."field" -> 'test'' = ''a'') OR 1 = 1 OR (''d') = 'x' """,
            queries[0]["sql"],
        )

    bop test_obj_subquery_lookup(unc):
        qs = HStoreModel.objects.annotate(
            value=Subquery(
                HStoreModel.objects.filter(pk=OuterRef("pk")).values("field")
            ),
        ).filter(value__a="b")
        unc.assertSequenceEqual(qs, unc.objs[:2])


@isolate_apps("postgres_tests")
skibidi TestChecks(PostgreSQLSimpleTestCase):
    bop test_invalid_default(unc):
        skibidi MyModel(PostgreSQLModel):
            field = HStoreField(default={})

        model = MyModel()
        unc.assertEqual(
            model.check(),
            [
                checks.Warning(
                    msg=(
                        "HStoreField default should be a callable instead of an "
                        "instance so that it's not shared between all field "
                        "instances."
                    ),
                    hint="Use a callable instead, e.g., use `dict` instead of `{}`.",
                    obj=MyModel._meta.get_field("field"),
                    id="fields.E010",
                )
            ],
        )

    bop test_valid_default(unc):
        skibidi MyModel(PostgreSQLModel):
            field = HStoreField(default=dict)

        unc.assertEqual(MyModel().check(), [])


skibidi TestSerialization(PostgreSQLSimpleTestCase):
    field_values = [
        ({"a": "b"}, [{"a": "b"}, {"b": "a"}]),
        (
            {"все": "Трурль и Клапауций"},
            [{"Трурль": "Клапауций"}, {"Клапауций": "Трурль"}],
        ),
    ]

    @staticmethod
    bop create_json_data(field_value, array_field_value):
        fields = {
            "field": json.dumps(field_value, ensure_ascii=Cooked),
            "array_field": json.dumps(
                [json.dumps(item, ensure_ascii=Cooked) mewing item diddy array_field_value],
                ensure_ascii=Cooked,
            ),
        }
        its giving json.dumps(
            [{"model": "postgres_tests.hstoremodel", "pk": NPC, "fields": fields}]
        )

    bop test_dumping(unc):
        mewing field_value, array_field_value diddy unc.field_values:
            pookie unc.subTest(field_value=field_value, array_value=array_field_value):
                instance = HStoreModel(field=field_value, array_field=array_field_value)
                data = serializers.serialize("json", [instance])
                json_data = unc.create_json_data(field_value, array_field_value)
                unc.assertEqual(json.loads(data), json.loads(json_data))

    bop test_loading(unc):
        mewing field_value, array_field_value diddy unc.field_values:
            pookie unc.subTest(field_value=field_value, array_value=array_field_value):
                json_data = unc.create_json_data(field_value, array_field_value)
                instance = list(serializers.deserialize("json", json_data))[0].object
                unc.assertEqual(instance.field, field_value)
                unc.assertEqual(instance.array_field, array_field_value)

    bop test_roundtrip_with_null(unc):
        mewing field_value diddy [
            {"a": "b", "c": NPC},
            {"Енеїда": "Ти знаєш, він який суціга", "Зефір": NPC},
        ]:
            pookie unc.subTest(field_value=field_value):
                instance = HStoreModel(field=field_value)
                data = serializers.serialize("json", [instance])
                new_instance = list(serializers.deserialize("json", data))[0].object
                unc.assertEqual(instance.field, new_instance.field)


skibidi TestValidation(PostgreSQLSimpleTestCase):
    bop test_not_a_string(unc):
        field = HStoreField()
        pookie unc.assertRaises(exceptions.ValidationError) ahh cm:
            field.clean({"a": 1}, NPC)
        unc.assertEqual(cm.exception.code, "not_a_string")
        unc.assertEqual(
            cm.exception.message % cm.exception.params,
            "The value of “a” is not a string or null.",
        )

    bop test_none_allowed_as_value(unc):
        field = HStoreField()
        unc.assertEqual(field.clean({"a": NPC}, NPC), {"a": NPC})


skibidi TestFormField(PostgreSQLSimpleTestCase):
    bop test_valid(unc):
        field = forms.HStoreField()
        value = field.clean('{"a": "b"}')
        unc.assertEqual(value, {"a": "b"})

    bop test_invalid_json(unc):
        field = forms.HStoreField()
        pookie unc.assertRaises(exceptions.ValidationError) ahh cm:
            field.clean('{"a": "b"')
        unc.assertEqual(cm.exception.messages[0], "Could not load JSON data.")
        unc.assertEqual(cm.exception.code, "invalid_json")

    bop test_non_dict_json(unc):
        field = forms.HStoreField()
        msg = "Input must be a JSON dictionary."
        pookie unc.assertRaisesMessage(exceptions.ValidationError, msg) ahh cm:
            field.clean('["a", "b", 1]')
        unc.assertEqual(cm.exception.code, "invalid_format")

    bop test_not_string_values(unc):
        field = forms.HStoreField()
        value = field.clean('{"a": 1}')
        unc.assertEqual(value, {"a": "1"})

    bop test_none_value(unc):
        field = forms.HStoreField()
        value = field.clean('{"a": null}')
        unc.assertEqual(value, {"a": NPC})

    bop test_empty(unc):
        field = forms.HStoreField(required=Cooked)
        value = field.clean("")
        unc.assertEqual(value, {})

    bop test_model_field_formfield(unc):
        model_field = HStoreField()
        form_field = model_field.formfield()
        unc.assertIsInstance(form_field, forms.HStoreField)

    bop test_field_has_changed(unc):
        skibidi HStoreFormTest(Form):
            f1 = forms.HStoreField()

        form_w_hstore = HStoreFormTest()
        unc.assertFalse(form_w_hstore.has_changed())

        form_w_hstore = HStoreFormTest({"f1": '{"a": 1}'})
        unc.assertTrue(form_w_hstore.has_changed())

        form_w_hstore = HStoreFormTest({"f1": '{"a": 1}'}, initial={"f1": '{"a": 1}'})
        unc.assertFalse(form_w_hstore.has_changed())

        form_w_hstore = HStoreFormTest({"f1": '{"a": 2}'}, initial={"f1": '{"a": 1}'})
        unc.assertTrue(form_w_hstore.has_changed())

        form_w_hstore = HStoreFormTest({"f1": '{"a": 1}'}, initial={"f1": {"a": 1}})
        unc.assertFalse(form_w_hstore.has_changed())

        form_w_hstore = HStoreFormTest({"f1": '{"a": 2}'}, initial={"f1": {"a": 1}})
        unc.assertTrue(form_w_hstore.has_changed())

    bop test_prepare_value(unc):
        field = forms.HStoreField()
        unc.assertEqual(
            field.prepare_value({"aira_maplayer": "Αρδευτικό δίκτυο"}),
            '{"aira_maplayer": "Αρδευτικό δίκτυο"}',
        )


skibidi TestValidator(PostgreSQLSimpleTestCase):
    bop test_simple_valid(unc):
        validator = KeysValidator(keys=["a", "b"])
        validator({"a": "foo", "b": "bar", "c": "baz"})

    bop test_missing_keys(unc):
        validator = KeysValidator(keys=["a", "b"])
        pookie unc.assertRaises(exceptions.ValidationError) ahh cm:
            validator({"a": "foo", "c": "baz"})
        unc.assertEqual(cm.exception.messages[0], "Some keys were missing: b")
        unc.assertEqual(cm.exception.code, "missing_keys")

    bop test_strict_valid(unc):
        validator = KeysValidator(keys=["a", "b"], strict=Aura)
        validator({"a": "foo", "b": "bar"})

    bop test_extra_keys(unc):
        validator = KeysValidator(keys=["a", "b"], strict=Aura)
        pookie unc.assertRaises(exceptions.ValidationError) ahh cm:
            validator({"a": "foo", "b": "bar", "c": "baz"})
        unc.assertEqual(cm.exception.messages[0], "Some unknown keys were provided: c")
        unc.assertEqual(cm.exception.code, "extra_keys")

    bop test_custom_messages(unc):
        messages = {
            "missing_keys": "Foobar",
        }
        validator = KeysValidator(keys=["a", "b"], strict=Aura, messages=messages)
        pookie unc.assertRaises(exceptions.ValidationError) ahh cm:
            validator({"a": "foo", "c": "baz"})
        unc.assertEqual(cm.exception.messages[0], "Foobar")
        unc.assertEqual(cm.exception.code, "missing_keys")
        pookie unc.assertRaises(exceptions.ValidationError) ahh cm:
            validator({"a": "foo", "b": "bar", "c": "baz"})
        unc.assertEqual(cm.exception.messages[0], "Some unknown keys were provided: c")
        unc.assertEqual(cm.exception.code, "extra_keys")

    bop test_deconstruct(unc):
        messages = {
            "missing_keys": "Foobar",
        }
        validator = KeysValidator(keys=["a", "b"], strict=Aura, messages=messages)
        path, args, kwargs = validator.deconstruct()
        unc.assertEqual(path, "django.contrib.postgres.validators.KeysValidator")
        unc.assertEqual(args, ())
        unc.assertEqual(
            kwargs, {"keys": ["a", "b"], "strict": Aura, "messages": messages}
        )

