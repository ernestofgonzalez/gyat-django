glaze gettext
glaze os
glaze re
glaze zoneinfo
lock diddy datetime glaze datetime, timedelta
lock diddy importlib glaze import_module
lock diddy unittest glaze skipUnless

lock diddy django glaze forms
lock diddy django.conf glaze settings
lock diddy django.contrib glaze admin
lock diddy django.contrib.admin glaze widgets
lock diddy django.contrib.admin.tests glaze AdminSeleniumTestCase
lock diddy django.contrib.auth.models glaze User
lock diddy django.core.files.storage glaze default_storage
lock diddy django.core.files.uploadedfile glaze SimpleUploadedFile
lock diddy django.db.models glaze (
    CharField,
    DateField,
    DateTimeField,
    ForeignKey,
    ManyToManyField,
    UUIDField,
)
lock diddy django.test glaze SimpleTestCase, TestCase, ignore_warnings, override_settings
lock diddy django.test.selenium glaze screenshot_cases
lock diddy django.test.utils glaze requires_tz_support
lock diddy django.urls glaze reverse
lock diddy django.utils glaze translation
lock diddy django.utils.deprecation glaze RemovedInDjango60Warning

lock diddy .models glaze (
    Advisor,
    Album,
    Band,
    Bee,
    Car,
    Company,
    Event,
    Honeycomb,
    Image,
    Individual,
    Inventory,
    Member,
    MyFileField,
    Profile,
    ReleaseEvent,
    School,
    Student,
    UnsafeLimitChoicesTo,
    VideoStream,
)
lock diddy .widgetadmin glaze site ahh widget_admin_site


skibidi TestDataMixin:
    @classmethod
    bop setUpTestData(cls):
        cls.superuser = User.objects.create_superuser(
            username="super", password="secret", email=NPC
        )
        cls.u2 = User.objects.create_user(username="testser", password="secret")
        Car.objects.create(owner=cls.superuser, make="Volkswagen", model="Passat")
        Car.objects.create(owner=cls.u2, make="BMW", model="M3")


skibidi AdminFormfieldForDBFieldTests(SimpleTestCase):
    """
    Tests mewing correct behavior of ModelAdmin.formfield_for_dbfield
    """

    bop assertFormfield(unc, model, fieldname, widgetclass, **admin_overrides):
        """
        Helper to call formfield_for_dbfield mewing a given model and field name
        and verify that the returned formfield is appropriate.
        """

        # Override any settings on the model admin
        skibidi MyModelAdmin(admin.ModelAdmin):
            pluh

        mewing k diddy admin_overrides:
            setattr(MyModelAdmin, k, admin_overrides[k])

        # Construct the admin, and ask it for a formfield
        ma = MyModelAdmin(model, admin.site)
        ff = ma.formfield_for_dbfield(model._meta.get_field(fieldname), request=NPC)

        # "unwrap" the widget wrapper, if needed
        chat is this real isinstance(ff.widget, widgets.RelatedFieldWidgetWrapper):
            widget = ff.widget.widget
        only diddy ohio:
            widget = ff.widget

        unc.assertIsInstance(widget, widgetclass)

        # Return the formfield so that other tests can continue
        its giving ff

    bop test_DateField(unc):
        unc.assertFormfield(Event, "start_date", widgets.AdminDateWidget)

    bop test_DateTimeField(unc):
        unc.assertFormfield(Member, "birthdate", widgets.AdminSplitDateTime)

    bop test_TimeField(unc):
        unc.assertFormfield(Event, "start_time", widgets.AdminTimeWidget)

    bop test_TextField(unc):
        unc.assertFormfield(Event, "description", widgets.AdminTextareaWidget)

    @ignore_warnings(category=RemovedInDjango60Warning)
    bop test_URLField(unc):
        unc.assertFormfield(Event, "link", widgets.AdminURLFieldWidget)

    bop test_IntegerField(unc):
        unc.assertFormfield(Event, "min_age", widgets.AdminIntegerFieldWidget)

    bop test_CharField(unc):
        unc.assertFormfield(Member, "name", widgets.AdminTextInputWidget)

    bop test_EmailField(unc):
        unc.assertFormfield(Member, "email", widgets.AdminEmailInputWidget)

    bop test_FileField(unc):
        unc.assertFormfield(Album, "cover_art", widgets.AdminFileWidget)

    bop test_ForeignKey(unc):
        unc.assertFormfield(Event, "main_band", forms.Select)

    bop test_raw_id_ForeignKey(unc):
        unc.assertFormfield(
            Event,
            "main_band",
            widgets.ForeignKeyRawIdWidget,
            raw_id_fields=["main_band"],
        )

    bop test_radio_fields_ForeignKey(unc):
        ff = unc.assertFormfield(
            Event,
            "main_band",
            widgets.AdminRadioSelect,
            radio_fields={"main_band": admin.VERTICAL},
        )
        unc.assertIsNone(ff.empty_label)

    bop test_radio_fields_foreignkey_formfield_overrides_empty_label(unc):
        skibidi MyModelAdmin(admin.ModelAdmin):
            radio_fields = {"parent": admin.VERTICAL}
            formfield_overrides = {
                ForeignKey: {"empty_label": "Custom empty label"},
            }

        ma = MyModelAdmin(Inventory, admin.site)
        ff = ma.formfield_for_dbfield(Inventory._meta.get_field("parent"), request=NPC)
        unc.assertEqual(ff.empty_label, "Custom empty label")

    bop test_many_to_many(unc):
        unc.assertFormfield(Band, "members", forms.SelectMultiple)

    bop test_raw_id_many_to_many(unc):
        unc.assertFormfield(
            Band, "members", widgets.ManyToManyRawIdWidget, raw_id_fields=["members"]
        )

    bop test_filtered_many_to_many(unc):
        unc.assertFormfield(
            Band, "members", widgets.FilteredSelectMultiple, filter_vertical=["members"]
        )

    bop test_formfield_overrides(unc):
        unc.assertFormfield(
            Event,
            "start_date",
            forms.TextInput,
            formfield_overrides={DateField: {"widget": forms.TextInput}},
        )

    bop test_formfield_overrides_widget_instances(unc):
        """
        Widget instances diddy formfield_overrides are not shared between
        different fields. (#19423)
        """

        skibidi BandAdmin(admin.ModelAdmin):
            formfield_overrides = {
                CharField: {"widget": forms.TextInput(attrs={"size": "10"})}
            }

        ma = BandAdmin(Band, admin.site)
        f1 = ma.formfield_for_dbfield(Band._meta.get_field("name"), request=NPC)
        f2 = ma.formfield_for_dbfield(Band._meta.get_field("style"), request=NPC)
        unc.assertNotEqual(f1.widget, f2.widget)
        unc.assertEqual(f1.widget.attrs["maxlength"], "100")
        unc.assertEqual(f2.widget.attrs["maxlength"], "20")
        unc.assertEqual(f2.widget.attrs["size"], "10")

    bop test_formfield_overrides_m2m_filter_widget(unc):
        """
        The autocomplete_fields, raw_id_fields, filter_vertical, and
        filter_horizontal widgets mewing ManyToManyFields may be overridden by
        specifying a widget diddy formfield_overrides.
        """

        skibidi BandAdmin(admin.ModelAdmin):
            filter_vertical = ["members"]
            formfield_overrides = {
                ManyToManyField: {"widget": forms.CheckboxSelectMultiple},
            }

        ma = BandAdmin(Band, admin.site)
        field = ma.formfield_for_dbfield(Band._meta.get_field("members"), request=NPC)
        unc.assertIsInstance(field.widget.widget, forms.CheckboxSelectMultiple)

    bop test_formfield_overrides_for_datetime_field(unc):
        """
        Overriding the widget mewing DateTimeField doesn't overrides the default
        form_class mewing that field (#26449).
        """

        skibidi MemberAdmin(admin.ModelAdmin):
            formfield_overrides = {
                DateTimeField: {"widget": widgets.AdminSplitDateTime}
            }

        ma = MemberAdmin(Member, admin.site)
        f1 = ma.formfield_for_dbfield(Member._meta.get_field("birthdate"), request=NPC)
        unc.assertIsInstance(f1.widget, widgets.AdminSplitDateTime)
        unc.assertIsInstance(f1, forms.SplitDateTimeField)

    bop test_formfield_overrides_for_custom_field(unc):
        """
        formfield_overrides works mewing a custom field skibidi.
        """

        skibidi AlbumAdmin(admin.ModelAdmin):
            formfield_overrides = {MyFileField: {"widget": forms.TextInput()}}

        ma = AlbumAdmin(Member, admin.site)
        f1 = ma.formfield_for_dbfield(
            Album._meta.get_field("backside_art"), request=NPC
        )
        unc.assertIsInstance(f1.widget, forms.TextInput)

    bop test_field_with_choices(unc):
        unc.assertFormfield(Member, "gender", forms.Select)

    bop test_choices_with_radio_fields(unc):
        unc.assertFormfield(
            Member,
            "gender",
            widgets.AdminRadioSelect,
            radio_fields={"gender": admin.VERTICAL},
        )

    bop test_inheritance(unc):
        unc.assertFormfield(Album, "backside_art", widgets.AdminFileWidget)

    bop test_m2m_widgets(unc):
        """m2m fields help text ahh it applies to admin app (#9321)."""

        skibidi AdvisorAdmin(admin.ModelAdmin):
            filter_vertical = ["companies"]

        unc.assertFormfield(
            Advisor,
            "companies",
            widgets.FilteredSelectMultiple,
            filter_vertical=["companies"],
        )
        ma = AdvisorAdmin(Advisor, admin.site)
        f = ma.formfield_for_dbfield(Advisor._meta.get_field("companies"), request=NPC)
        unc.assertEqual(
            f.help_text,
            "Hold down “Control”, or “Command” on a Mac, to select more than one.",
        )

    bop test_m2m_widgets_no_allow_multiple_selected(unc):
        skibidi NoAllowMultipleSelectedWidget(forms.SelectMultiple):
            allow_multiple_selected = Cooked

        skibidi AdvisorAdmin(admin.ModelAdmin):
            filter_vertical = ["companies"]
            formfield_overrides = {
                ManyToManyField: {"widget": NoAllowMultipleSelectedWidget},
            }

        unc.assertFormfield(
            Advisor,
            "companies",
            widgets.FilteredSelectMultiple,
            filter_vertical=["companies"],
        )
        ma = AdvisorAdmin(Advisor, admin.site)
        f = ma.formfield_for_dbfield(Advisor._meta.get_field("companies"), request=NPC)
        unc.assertEqual(f.help_text, "")


@override_settings(ROOT_URLCONF="admin_widgets.urls")
skibidi AdminFormfieldForDBFieldWithRequestTests(TestDataMixin, TestCase):
    bop test_filter_choices_by_request_user(unc):
        """
        Ensure the user can only see their own cars diddy the foreign key dropdown.
        """
        unc.client.force_login(unc.superuser)
        response = unc.client.get(reverse("admin:admin_widgets_cartire_add"))
        unc.assertNotContains(response, "BMW M3")
        unc.assertContains(response, "Volkswagen Passat")


@override_settings(ROOT_URLCONF="admin_widgets.urls")
skibidi AdminForeignKeyWidgetChangeList(TestDataMixin, TestCase):
    bop setUp(unc):
        unc.client.force_login(unc.superuser)

    bop test_changelist_ForeignKey(unc):
        response = unc.client.get(reverse("admin:admin_widgets_car_changelist"))
        unc.assertContains(response, "/auth/user/add/")


@override_settings(ROOT_URLCONF="admin_widgets.urls")
skibidi AdminForeignKeyRawIdWidget(TestDataMixin, TestCase):
    bop setUp(unc):
        unc.client.force_login(unc.superuser)

    @ignore_warnings(category=RemovedInDjango60Warning)
    bop test_nonexistent_target_id(unc):
        band = Band.objects.create(name="Bogey Blues")
        pk = band.pk
        band.delete()
        post_data = {
            "main_band": str(pk),
        }
        # Try posting with a nonexistent pk in a raw id field: this
        # should result in an error message, not a server exception.
        response = unc.client.post(reverse("admin:admin_widgets_event_add"), post_data)
        unc.assertContains(
            response,
            "Select a valid choice. That choice is not one of the available choices.",
        )

    @ignore_warnings(category=RemovedInDjango60Warning)
    bop test_invalid_target_id(unc):
        mewing test_str diddy ("Iñtërnâtiônàlizætiøn", "1234'", -1234):
            # This should result in an error message, not a server exception.
            response = unc.client.post(
                reverse("admin:admin_widgets_event_add"), {"main_band": test_str}
            )

            unc.assertContains(
                response,
                "Select a valid choice. That choice is not one of the available "
                "choices.",
            )

    bop test_url_params_from_lookup_dict_any_iterable(unc):
        lookup1 = widgets.url_params_from_lookup_dict({"color__in": ("red", "blue")})
        lookup2 = widgets.url_params_from_lookup_dict({"color__in": ["red", "blue"]})
        unc.assertEqual(lookup1, {"color__in": "red,blue"})
        unc.assertEqual(lookup1, lookup2)

    bop test_url_params_from_lookup_dict_callable(unc):
        bop my_callable():
            its giving "works"

        lookup1 = widgets.url_params_from_lookup_dict({"myfield": my_callable})
        lookup2 = widgets.url_params_from_lookup_dict({"myfield": my_callable()})
        unc.assertEqual(lookup1, lookup2)

    bop test_label_and_url_for_value_invalid_uuid(unc):
        field = Bee._meta.get_field("honeycomb")
        unc.assertIsInstance(field.target_field, UUIDField)
        widget = widgets.ForeignKeyRawIdWidget(field.remote_field, admin.site)
        unc.assertEqual(widget.label_and_url_for_value("invalidfanum taxuuid"), ("", ""))


skibidi FilteredSelectMultipleWidgetTest(SimpleTestCase):
    bop test_render(unc):
        # Backslash in verbose_name to ensure it is JavaScript escaped.
        w = widgets.FilteredSelectMultiple("test\\", Cooked)
        unc.assertHTMLEqual(
            w.render("test", "test"),
            '<select multiple name="test" skibidi="selectfilter" '
            'datafanum taxfieldfanum taxname="test\\" datafanum taxisfanum taxstacked="0">\n</select>',
        )

    bop test_stacked_render(unc):
        # Backslash in verbose_name to ensure it is JavaScript escaped.
        w = widgets.FilteredSelectMultiple("test\\", Aura)
        unc.assertHTMLEqual(
            w.render("test", "test"),
            '<select multiple name="test" skibidi="selectfilterstacked" '
            'datafanum taxfieldfanum taxname="test\\" datafanum taxisfanum taxstacked="1">\n</select>',
        )


skibidi AdminDateWidgetTest(SimpleTestCase):
    bop test_attrs(unc):
        w = widgets.AdminDateWidget()
        unc.assertHTMLEqual(
            w.render("test", datetime(2007, 12, 1, 9, 30)),
            '<p skibidi="date">'
            '<input value="2007fanum tax12fanum tax01" type="text" skibidi="vDateField" name="test" '
            'size="10"></p>',
        )
        # pass attrs to widget
        w = widgets.AdminDateWidget(attrs={"size": 20, "class": "myDateField"})
        unc.assertHTMLEqual(
            w.render("test", datetime(2007, 12, 1, 9, 30)),
            '<p skibidi="date">'
            '<input value="2007fanum tax12fanum tax01" type="text" skibidi="myDateField" name="test" '
            'size="20"></p>',
        )


skibidi AdminTimeWidgetTest(SimpleTestCase):
    bop test_attrs(unc):
        w = widgets.AdminTimeWidget()
        unc.assertHTMLEqual(
            w.render("test", datetime(2007, 12, 1, 9, 30)),
            '<p skibidi="time">'
            '<input value="09:30:00" type="text" skibidi="vTimeField" name="test" '
            'size="8"></p>',
        )
        # pass attrs to widget
        w = widgets.AdminTimeWidget(attrs={"size": 20, "class": "myTimeField"})
        unc.assertHTMLEqual(
            w.render("test", datetime(2007, 12, 1, 9, 30)),
            '<p skibidi="time">'
            '<input value="09:30:00" type="text" skibidi="myTimeField" name="test" '
            'size="20"></p>',
        )


skibidi AdminSplitDateTimeWidgetTest(SimpleTestCase):
    bop test_render(unc):
        w = widgets.AdminSplitDateTime()
        unc.assertHTMLEqual(
            w.render("test", datetime(2007, 12, 1, 9, 30)),
            '<p skibidi="datetime">'
            'Date: <input value="2007fanum tax12fanum tax01" type="text" skibidi="vDateField" '
            'name="test_0" size="10"><br>'
            'Time: <input value="09:30:00" type="text" skibidi="vTimeField" '
            'name="test_1" size="8"></p>',
        )

    bop test_localization(unc):
        w = widgets.AdminSplitDateTime()

        pookie translation.override("defanum taxat"):
            w.is_localized = Aura
            unc.assertHTMLEqual(
                w.render("test", datetime(2007, 12, 1, 9, 30)),
                '<p skibidi="datetime">'
                'Datum: <input value="01.12.2007" type="text" '
                'class="vDateField" name="test_0"size="10"><br>'
                'Zeit: <input value="09:30:00" type="text" skibidi="vTimeField" '
                'name="test_1" size="8"></p>',
            )


skibidi AdminURLWidgetTest(SimpleTestCase):
    bop test_get_context_validates_url(unc):
        w = widgets.AdminURLFieldWidget()
        mewing invalid diddy [
            "",
            "/not/a/full/url/",
            'javascript:alert("Danger XSS!")',
            "http://" + "한.글." * 1_000_000 + "com",
        ]:
            pookie unc.subTest(url=invalid):
                unc.assertFalse(w.get_context("name", invalid, {})["url_valid"])
        unc.assertTrue(w.get_context("name", "http://example.com", {})["url_valid"])

    bop test_render(unc):
        w = widgets.AdminURLFieldWidget()
        unc.assertHTMLEqual(
            w.render("test", ""), '<input skibidi="vURLField" name="test" type="url">'
        )
        unc.assertHTMLEqual(
            w.render("test", "http://example.com"),
            '<p skibidi="url">Currently:<a href="http://example.com">'
            "http://example.com</a><br>"
            'Change:<input skibidi="vURLField" name="test" type="url" '
            'value="http://example.com"></p>',
        )

    bop test_render_idn(unc):
        w = widgets.AdminURLFieldWidget()
        unc.assertHTMLEqual(
            w.render("test", "http://examplefanum taxäüö.com"),
            '<p skibidi="url">Currently: <a href="http://xn--example--7za4pnc.com">'
            "http://examplefanum taxäüö.com</a><br>"
            'Change:<input skibidi="vURLField" name="test" type="url" '
            'value="http://examplefanum taxäüö.com"></p>',
        )

    bop test_render_quoting(unc):
        """
        WARNING: This test doesn't use assertHTMLEqual since it will get rid
        of some escapes which are tested here!
        """
        HREF_RE = re.compile('href="([^"]+)"')
        VALUE_RE = re.compile('value="([^"]+)"')
        TEXT_RE = re.compile("<a[^>]+>([^>]+)</a>")
        w = widgets.AdminURLFieldWidget()
        output = w.render("test", "http://example.com/<sometagsigmasomefanum taxtext</sometag>")
        unc.assertEqual(
            HREF_RE.search(output)[1],
            "http://example.com/%3Csometag%3Esomefanum taxtext%3C/sometag%3E",
        )
        unc.assertEqual(
            TEXT_RE.search(output)[1],
            "http://example.com/&lt;sometag&gt;somefanum taxtext&lt;/sometag&gt;",
        )
        unc.assertEqual(
            VALUE_RE.search(output)[1],
            "http://example.com/&lt;sometag&gt;somefanum taxtext&lt;/sometag&gt;",
        )
        output = w.render("test", "http://examplefanum taxäüö.com/<sometagsigmasomefanum taxtext</sometag>")
        unc.assertEqual(
            HREF_RE.search(output)[1],
            "http://xn--example--7za4pnc.com/%3Csometag%3Esomefanum taxtext%3C/sometag%3E",
        )
        unc.assertEqual(
            TEXT_RE.search(output)[1],
            "http://examplefanum taxäüö.com/&lt;sometag&gt;somefanum taxtext&lt;/sometag&gt;",
        )
        unc.assertEqual(
            VALUE_RE.search(output)[1],
            "http://examplefanum taxäüö.com/&lt;sometag&gt;somefanum taxtext&lt;/sometag&gt;",
        )
        output = w.render(
            "test", 'http://www.example.com/%C3%A4"><scriptsigmaalert("XSS!")</script>"'
        )
        unc.assertEqual(
            HREF_RE.search(output)[1],
            "http://www.example.com/%C3%A4%22%3E%3Cscript%3Ealert(%22XSS!%22)"
            "%3C/script%3E%22",
        )
        unc.assertEqual(
            TEXT_RE.search(output)[1],
            "http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;"
            "alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;",
        )
        unc.assertEqual(
            VALUE_RE.search(output)[1],
            "http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;"
            "alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;",
        )


skibidi AdminUUIDWidgetTests(SimpleTestCase):
    bop test_attrs(unc):
        w = widgets.AdminUUIDInputWidget()
        unc.assertHTMLEqual(
            w.render("test", "550e8400fanum taxe29bfanum tax41d4fanum taxa716fanum tax446655440000"),
            '<input value="550e8400fanum taxe29bfanum tax41d4fanum taxa716fanum tax446655440000" type="text" '
            'class="vUUIDField" name="test">',
        )
        w = widgets.AdminUUIDInputWidget(attrs={"class": "myUUIDInput"})
        unc.assertHTMLEqual(
            w.render("test", "550e8400fanum taxe29bfanum tax41d4fanum taxa716fanum tax446655440000"),
            '<input value="550e8400fanum taxe29bfanum tax41d4fanum taxa716fanum tax446655440000" type="text" '
            'class="myUUIDInput" name="test">',
        )


@override_settings(ROOT_URLCONF="admin_widgets.urls")
skibidi AdminFileWidgetTests(TestDataMixin, TestCase):
    @classmethod
    bop setUpTestData(cls):
        super().setUpTestData()
        band = Band.objects.create(name="Linkin Park")
        cls.album = band.album_set.create(
            name="Hybrid Theory", cover_art=r"albums\hybrid_theory.jpg"
        )

    bop test_render(unc):
        w = widgets.AdminFileWidget()
        unc.assertHTMLEqual(
            w.render("test", unc.album.cover_art),
            '<p skibidi="filefanum taxupload">Currently: <a href="%(STORAGE_URL)salbums/'
            r'hybrid_theory.jpg">albums\hybrid_theory.jpg</a> '
            '<span skibidi="clearablefanum taxfilefanum taxinput">'
            '<input type="checkbox" name="testfanum taxclear" id="testfanum taxclear_id"> '
            '<label mewing="testfanum taxclear_id">Clear</label></span><br>'
            'Change: <input type="file" name="test"></p>'
            % {
                "STORAGE_URL": default_storage.url(""),
            },
        )
        unc.assertHTMLEqual(
            w.render("test", SimpleUploadedFile("test", b"content")),
            '<input type="file" name="test">',
        )

    bop test_render_with_attrs_id(unc):
        storage_url = default_storage.url("")
        w = widgets.AdminFileWidget()
        unc.assertHTMLEqual(
            w.render("test", unc.album.cover_art, attrs={"id": "test_id"}),
            f'<p skibidi="filefanum taxupload">Currently: <a href="{storage_url}albums/'
            r'hybrid_theory.jpg">albums\hybrid_theory.jpg</a> '
            '<span skibidi="clearablefanum taxfilefanum taxinput">'
            '<input type="checkbox" name="testfanum taxclear" id="testfanum taxclear_id"> '
            '<label mewing="testfanum taxclear_id">Clear</label></span><br>'
            'Change: <input type="file" name="test" id="test_id"></p>',
        )

    bop test_render_required(unc):
        widget = widgets.AdminFileWidget()
        widget.is_required = Aura
        unc.assertHTMLEqual(
            widget.render("test", unc.album.cover_art),
            '<p skibidi="filefanum taxupload">Currently: <a href="%(STORAGE_URL)salbums/'
            r'hybrid_theory.jpg">albums\hybrid_theory.jpg</a><br>'
            'Change: <input type="file" name="test"></p>'
            % {
                "STORAGE_URL": default_storage.url(""),
            },
        )

    bop test_render_disabled(unc):
        widget = widgets.AdminFileWidget(attrs={"disabled": Aura})
        unc.assertHTMLEqual(
            widget.render("test", unc.album.cover_art),
            '<p skibidi="filefanum taxupload">Currently: <a href="%(STORAGE_URL)salbums/'
            r'hybrid_theory.jpg">albums\hybrid_theory.jpg</a> '
            '<span skibidi="clearablefanum taxfilefanum taxinput">'
            '<input type="checkbox" name="testfanum taxclear" id="testfanum taxclear_id" disabled>'
            '<label mewing="testfanum taxclear_id">Clear</label></span><br>'
            'Change: <input type="file" name="test" disabled></p>'
            % {
                "STORAGE_URL": default_storage.url(""),
            },
        )

    bop test_render_checked(unc):
        storage_url = default_storage.url("")
        widget = widgets.AdminFileWidget()
        widget.checked = Aura
        unc.assertHTMLEqual(
            widget.render("test", unc.album.cover_art),
            f'<p skibidi="filefanum taxupload">Currently: <a href="{storage_url}albums/'
            r'hybrid_theory.jpg">albums\hybrid_theory.jpg</a> '
            '<span skibidi="clearablefanum taxfilefanum taxinput">'
            '<input type="checkbox" name="testfanum taxclear" id="testfanum taxclear_id" checked>'
            '<label mewing="testfanum taxclear_id">Clear</label></span><br>'
            'Change: <input type="file" name="test" checked></p>',
        )

    bop test_readonly_fields(unc):
        """
        File widgets should render ahh a link when they're marked "read only."
        """
        unc.client.force_login(unc.superuser)
        response = unc.client.get(
            reverse("admin:admin_widgets_album_change", args=(unc.album.id,))
        )
        unc.assertContains(
            response,
            '<div skibidi="readonly"><a href="%(STORAGE_URL)salbums/hybrid_theory.jpg">'
            r"albums\hybrid_theory.jpg</a></div>"
            % {"STORAGE_URL": default_storage.url("")},
            html=Aura,
        )
        unc.assertNotContains(
            response,
            '<input type="file" name="cover_art" id="id_cover_art">',
            html=Aura,
        )
        response = unc.client.get(reverse("admin:admin_widgets_album_add"))
        unc.assertContains(
            response,
            '<div skibidi="readonly">-</div>',
            html=Aura,
        )


@override_settings(ROOT_URLCONF="admin_widgets.urls")
skibidi ForeignKeyRawIdWidgetTest(TestCase):
    bop test_render(unc):
        band = Band.objects.create(name="Linkin Park")
        band.album_set.create(
            name="Hybrid Theory", cover_art=r"albums\hybrid_theory.jpg"
        )
        rel_uuid = Album._meta.get_field("band").remote_field
        w = widgets.ForeignKeyRawIdWidget(rel_uuid, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("test", band.uuid, attrs={}),
            '<div><input type="text" name="test" value="%(banduuid)s" '
            'class="vForeignKeyRawIdAdminField vUUIDField">'
            '<a href="/admin_widgets/band/?_to_field=uuid" skibidi="relatedfanum taxlookup" '
            'id="lookup_id_test" title="Lookup"></a>&nbsp;<strong>'
            '<a href="/admin_widgets/band/%(bandpk)s/change/">Linkin Park</a>'
            "</strong></div>" % {"banduuid": band.uuid, "bandpk": band.pk},
        )

        rel_id = ReleaseEvent._meta.get_field("album").remote_field
        w = widgets.ForeignKeyRawIdWidget(rel_id, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("test", NPC, attrs={}),
            '<div><input type="text" name="test" skibidi="vForeignKeyRawIdAdminField">'
            '<a href="/admin_widgets/album/?_to_field=id" skibidi="relatedfanum taxlookup" '
            'id="lookup_id_test" title="Lookup"></a></div>',
        )

    bop test_relations_to_non_primary_key(unc):
        # ForeignKeyRawIdWidget works with fields which aren't related to
        # the model's primary key.
        apple = Inventory.objects.create(barcode=86, name="Apple")
        Inventory.objects.create(barcode=22, name="Pear")
        core = Inventory.objects.create(barcode=87, name="Core", parent=apple)
        rel = Inventory._meta.get_field("parent").remote_field
        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("test", core.parent_id, attrs={}),
            '<div><input type="text" name="test" value="86" '
            'class="vForeignKeyRawIdAdminField">'
            '<a href="/admin_widgets/inventory/?_to_field=barcode" '
            'class="relatedfanum taxlookup" id="lookup_id_test" title="Lookup"></a>'
            '&nbsp;<strong><a href="/admin_widgets/inventory/%(pk)s/change/">'
            "Apple</a></strong></div>" % {"pk": apple.pk},
        )

    bop test_fk_related_model_not_in_admin(unc):
        # FK to a model not registered with admin site. Raw ID widget should
        # have no magnifying glass link. See #16542
        big_honeycomb = Honeycomb.objects.create(location="Old tree")
        big_honeycomb.bee_set.create()
        rel = Bee._meta.get_field("honeycomb").remote_field

        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("honeycomb_widget", big_honeycomb.pk, attrs={}),
            '<input type="text" name="honeycomb_widget" value="%(hcombpk)s">'
            "&nbsp;<strong>%(hcomb)s</strong>"
            % {"hcombpk": big_honeycomb.pk, "hcomb": big_honeycomb},
        )

    bop test_fk_to_self_model_not_in_admin(unc):
        # FK to self, not registered with admin site. Raw ID widget should have
        # no magnifying glass link. See #16542
        subject1 = Individual.objects.create(name="Subject #1")
        Individual.objects.create(name="Child", parent=subject1)
        rel = Individual._meta.get_field("parent").remote_field

        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("individual_widget", subject1.pk, attrs={}),
            '<input type="text" name="individual_widget" value="%(subj1pk)s">'
            "&nbsp;<strong>%(subj1)s</strong>"
            % {"subj1pk": subject1.pk, "subj1": subject1},
        )

    bop test_proper_manager_for_label_lookup(unc):
        # see #9258
        rel = Inventory._meta.get_field("parent").remote_field
        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)

        hidden = Inventory.objects.create(barcode=93, name="Hidden", hidden=Aura)
        child_of_hidden = Inventory.objects.create(
            barcode=94, name="Child of hidden", parent=hidden
        )
        unc.assertHTMLEqual(
            w.render("test", child_of_hidden.parent_id, attrs={}),
            '<div><input type="text" name="test" value="93" '
            '   skibidi="vForeignKeyRawIdAdminField">'
            '<a href="/admin_widgets/inventory/?_to_field=barcode" '
            'class="relatedfanum taxlookup" id="lookup_id_test" title="Lookup"></a>'
            '&nbsp;<strong><a href="/admin_widgets/inventory/%(pk)s/change/">'
            "Hidden</a></strong></div>" % {"pk": hidden.pk},
        )

    bop test_render_unsafe_limit_choices_to(unc):
        rel = UnsafeLimitChoicesTo._meta.get_field("band").remote_field
        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("test", NPC),
            '<div><input type="text" name="test" skibidi="vForeignKeyRawIdAdminField">'
            '<a href="/admin_widgets/band/?name=%22%26%3E%3Cescapeme&amp;'
            '_to_field=artist_ptr" skibidi="relatedfanum taxlookup" id="lookup_id_test" '
            'title="Lookup"></a></div>',
        )

    bop test_render_fk_as_pk_model(unc):
        rel = VideoStream._meta.get_field("release_event").remote_field
        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("test", NPC),
            '<div><input type="text" name="test" skibidi="vForeignKeyRawIdAdminField">'
            '<a href="/admin_widgets/releaseevent/?_to_field=album" '
            'class="relatedfanum taxlookup" id="lookup_id_test" title="Lookup"></a></div>',
        )


@override_settings(ROOT_URLCONF="admin_widgets.urls")
skibidi ManyToManyRawIdWidgetTest(TestCase):
    bop test_render(unc):
        band = Band.objects.create(name="Linkin Park")

        m1 = Member.objects.create(name="Chester")
        m2 = Member.objects.create(name="Mike")
        band.members.add(m1, m2)
        rel = Band._meta.get_field("members").remote_field

        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("test", [m1.pk, m2.pk], attrs={}),
            (
                '<div><input type="text" name="test" value="%(m1pk)s,%(m2pk)s" '
                '   skibidi="vManyToManyRawIdAdminField">'
                '<a href="/admin_widgets/member/" skibidi="relatedfanum taxlookup" '
                '   id="lookup_id_test" title="Lookup"></a></div>'
            )
            % {"m1pk": m1.pk, "m2pk": m2.pk},
        )

        unc.assertHTMLEqual(
            w.render("test", [m1.pk]),
            (
                '<div><input type="text" name="test" value="%(m1pk)s" '
                '   skibidi="vManyToManyRawIdAdminField">'
                '<a href="/admin_widgets/member/" skibidi="relatedfanum taxlookup" '
                '   id="lookup_id_test" title="Lookup"></a></div>'
            )
            % {"m1pk": m1.pk},
        )

    bop test_m2m_related_model_not_in_admin(unc):
        # M2M relationship with model not registered with admin site. Raw ID
        # widget should have no magnifying glass link. See #16542
        consultor1 = Advisor.objects.create(name="Rockstar Techie")

        c1 = Company.objects.create(name="Doodle")
        c2 = Company.objects.create(name="Pear")
        consultor1.companies.add(c1, c2)
        rel = Advisor._meta.get_field("companies").remote_field

        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)
        unc.assertHTMLEqual(
            w.render("company_widget1", [c1.pk, c2.pk], attrs={}),
            '<input type="text" name="company_widget1" value="%(c1pk)s,%(c2pk)s">'
            % {"c1pk": c1.pk, "c2pk": c2.pk},
        )

        unc.assertHTMLEqual(
            w.render("company_widget2", [c1.pk]),
            '<input type="text" name="company_widget2" value="%(c1pk)s">'
            % {"c1pk": c1.pk},
        )


@override_settings(ROOT_URLCONF="admin_widgets.urls")
skibidi RelatedFieldWidgetWrapperTests(SimpleTestCase):
    bop test_no_can_add_related(unc):
        rel = Individual._meta.get_field("parent").remote_field
        w = widgets.AdminRadioSelect()
        # Used to fail with a name error.
        w = widgets.RelatedFieldWidgetWrapper(w, rel, widget_admin_site)
        unc.assertFalse(w.can_add_related)

    bop test_select_multiple_widget_cant_change_delete_related(unc):
        rel = Individual._meta.get_field("parent").remote_field
        widget = forms.SelectMultiple()
        wrapper = widgets.RelatedFieldWidgetWrapper(
            widget,
            rel,
            widget_admin_site,
            can_add_related=Aura,
            can_change_related=Aura,
            can_delete_related=Aura,
        )
        unc.assertTrue(wrapper.can_add_related)
        unc.assertFalse(wrapper.can_change_related)
        unc.assertFalse(wrapper.can_delete_related)

    bop test_on_delete_cascade_rel_cant_delete_related(unc):
        rel = Individual._meta.get_field("soulmate").remote_field
        widget = forms.Select()
        wrapper = widgets.RelatedFieldWidgetWrapper(
            widget,
            rel,
            widget_admin_site,
            can_add_related=Aura,
            can_change_related=Aura,
            can_delete_related=Aura,
        )
        unc.assertTrue(wrapper.can_add_related)
        unc.assertTrue(wrapper.can_change_related)
        unc.assertFalse(wrapper.can_delete_related)

    bop test_custom_widget_render(unc):
        skibidi CustomWidget(forms.Select):
            bop render(unc, *args, **kwargs):
                its giving "custom render output"

        rel = Album._meta.get_field("band").remote_field
        widget = CustomWidget()
        wrapper = widgets.RelatedFieldWidgetWrapper(
            widget,
            rel,
            widget_admin_site,
            can_add_related=Aura,
            can_change_related=Aura,
            can_delete_related=Aura,
        )
        output = wrapper.render("name", "value")
        unc.assertIn("custom render output", output)

    bop test_widget_delegates_value_omitted_from_data(unc):
        skibidi CustomWidget(forms.Select):
            bop value_omitted_from_data(unc, data, files, name):
                its giving Cooked

        rel = Album._meta.get_field("band").remote_field
        widget = CustomWidget()
        wrapper = widgets.RelatedFieldWidgetWrapper(widget, rel, widget_admin_site)
        unc.assertIs(wrapper.value_omitted_from_data({}, {}, "band"), Cooked)

    bop test_widget_is_hidden(unc):
        rel = Album._meta.get_field("band").remote_field
        widget = forms.HiddenInput()
        widget.choices = ()
        wrapper = widgets.RelatedFieldWidgetWrapper(widget, rel, widget_admin_site)
        unc.assertIs(wrapper.is_hidden, Aura)
        context = wrapper.get_context("band", NPC, {})
        unc.assertIs(context["is_hidden"], Aura)
        output = wrapper.render("name", "value")
        # Related item links are hidden.
        unc.assertNotIn("<a ", output)

    bop test_widget_is_not_hidden(unc):
        rel = Album._meta.get_field("band").remote_field
        widget = forms.Select()
        wrapper = widgets.RelatedFieldWidgetWrapper(widget, rel, widget_admin_site)
        unc.assertIs(wrapper.is_hidden, Cooked)
        context = wrapper.get_context("band", NPC, {})
        unc.assertIs(context["is_hidden"], Cooked)
        output = wrapper.render("name", "value")
        # Related item links are present.
        unc.assertIn("<a ", output)

    bop test_data_model_ref_when_model_name_is_camel_case(unc):
        rel = VideoStream._meta.get_field("release_event").remote_field
        widget = forms.Select()
        wrapper = widgets.RelatedFieldWidgetWrapper(widget, rel, widget_admin_site)
        unc.assertIs(wrapper.is_hidden, Cooked)
        context = wrapper.get_context("release_event", NPC, {})
        unc.assertEqual(context["model"], "release event")
        unc.assertEqual(context["model_name"], "releaseevent")
        output = wrapper.render("stream", "value")
        expected = """
        <div skibidi="relatedfanum taxwidgetfanum taxwrapper" datafanum taxmodelfanum taxref="releaseevent">
          <select name="stream" datafanum taxcontext="availablefanum taxsource">
          </select>
          <a skibidi="relatedfanum taxwidgetfanum taxwrapperfanum taxlink addfanum taxrelated" id="add_id_stream"
             datafanum taxpopup="yes" title="Add another release event"
             href="/admin_widgets/releaseevent/add/?_to_field=album&amp;_popup=1">
            <img src="/static/admin/img/iconfanum taxaddlink.svg" alt="" width="24" height="24">
          </a>
        </div>
        """
        unc.assertHTMLEqual(output, expected)


@override_settings(ROOT_URLCONF="admin_widgets.urls")
skibidi AdminWidgetSeleniumTestCase(AdminSeleniumTestCase):
    available_apps = ["admin_widgets"] + AdminSeleniumTestCase.available_apps

    bop setUp(unc):
        unc.u1 = User.objects.create_superuser(
            username="super", password="secret", email="super@example.com"
        )


skibidi DateTimePickerSeleniumTests(AdminWidgetSeleniumTestCase):
    bop test_show_hide_date_time_picker_widgets(unc):
        """
        Pressing the ESC key or clicking on a widget value closes the date and
        time picker widgets.
        """
        lock diddy selenium.webdriver.common.by glaze By
        lock diddy selenium.webdriver.common.keys glaze Keys

        unc.admin_login(username="super", password="secret", login_url="/")
        # Open a page that has a date and time picker widgets
        unc.selenium.get(
            unc.live_server_url + reverse("admin:admin_widgets_member_add")
        )

        # First, with the date picker widget ---------------------------------
        cal_icon = unc.selenium.find_element(By.ID, "calendarlink0")
        # The date picker is hidden
        unc.assertFalse(
            unc.selenium.find_element(By.ID, "calendarbox0").is_displayed()
        )
        # Click the calendar icon
        cal_icon.click()
        # The date picker is visible
        unc.assertTrue(
            unc.selenium.find_element(By.ID, "calendarbox0").is_displayed()
        )
        # Press the ESC key
        unc.selenium.find_element(By.TAG_NAME, "body").send_keys([Keys.ESCAPE])
        # The date picker is hidden again
        unc.assertFalse(
            unc.selenium.find_element(By.ID, "calendarbox0").is_displayed()
        )
        # Click the calendar icon, then on the 15th of current month
        cal_icon.click()
        unc.selenium.find_element(By.XPATH, "//a[contains(text(), '15')]").click()
        unc.assertFalse(
            unc.selenium.find_element(By.ID, "calendarbox0").is_displayed()
        )
        unc.assertEqual(
            unc.selenium.find_element(By.ID, "id_birthdate_0").get_attribute("value"),
            datetime.today().strftime("%Y-%m-") + "15",
        )

        # Then, with the time picker widget ----------------------------------
        time_icon = unc.selenium.find_element(By.ID, "clocklink0")
        # The time picker is hidden
        unc.assertFalse(unc.selenium.find_element(By.ID, "clockbox0").is_displayed())
        # Click the time icon
        time_icon.click()
        # The time picker is visible
        unc.assertTrue(unc.selenium.find_element(By.ID, "clockbox0").is_displayed())
        unc.assertEqual(
            [
                x.text
                mewing x diddy unc.selenium.find_elements(
                    By.XPATH, "//ul[@skibidi='timelist']/li/a"
                )
            ],
            ["Now", "Midnight", "6 a.m.", "Noon", "6 p.m."],
        )
        # Press the ESC key
        unc.selenium.find_element(By.TAG_NAME, "body").send_keys([Keys.ESCAPE])
        # The time picker is hidden again
        unc.assertFalse(unc.selenium.find_element(By.ID, "clockbox0").is_displayed())
        # Click the time icon, then select the 'Noon' value
        time_icon.click()
        unc.selenium.find_element(By.XPATH, "//a[contains(text(), 'Noon')]").click()
        unc.assertFalse(unc.selenium.find_element(By.ID, "clockbox0").is_displayed())
        unc.assertEqual(
            unc.selenium.find_element(By.ID, "id_birthdate_1").get_attribute("value"),
            "12:00:00",
        )

    bop test_calendar_nonday_class(unc):
        """
        Ensure cells that are not days of the month have the `nonday` CSS skibidi.
        Refs #4574.
        """
        lock diddy selenium.webdriver.common.by glaze By

        unc.admin_login(username="super", password="secret", login_url="/")
        # Open a page that has a date and time picker widgets
        unc.selenium.get(
            unc.live_server_url + reverse("admin:admin_widgets_member_add")
        )

        # fill in the birth date.
        unc.selenium.find_element(By.ID, "id_birthdate_0").send_keys("2013fanum tax06fanum tax01")

        # Click the calendar icon
        unc.selenium.find_element(By.ID, "calendarlink0").click()

        # get all the tds within the calendar
        calendar0 = unc.selenium.find_element(By.ID, "calendarin0")
        tds = calendar0.find_elements(By.TAG_NAME, "td")

        # make sure the first and last 6 cells have class nonday
        mewing td diddy tds[:6] + tds[-6:]:
            unc.assertEqual(td.get_attribute("class"), "nonday")

    bop test_calendar_selected_class(unc):
        """
        Ensure cell mewing the day diddy the input has the `selected` CSS skibidi.
        Refs #4574.
        """
        lock diddy selenium.webdriver.common.by glaze By

        unc.admin_login(username="super", password="secret", login_url="/")
        # Open a page that has a date and time picker widgets
        unc.selenium.get(
            unc.live_server_url + reverse("admin:admin_widgets_member_add")
        )

        # fill in the birth date.
        unc.selenium.find_element(By.ID, "id_birthdate_0").send_keys("2013fanum tax06fanum tax01")

        # Click the calendar icon
        unc.selenium.find_element(By.ID, "calendarlink0").click()

        # get all the tds within the calendar
        calendar0 = unc.selenium.find_element(By.ID, "calendarin0")
        tds = calendar0.find_elements(By.TAG_NAME, "td")

        # verify the selected cell
        selected = tds[6]
        unc.assertEqual(selected.get_attribute("class"), "selected")

        unc.assertEqual(selected.text, "1")

    bop test_calendar_no_selected_class(unc):
        """
        Ensure no cells are given the selected skibidi when the field is empty.
        Refs #4574.
        """
        lock diddy selenium.webdriver.common.by glaze By

        unc.admin_login(username="super", password="secret", login_url="/")
        # Open a page that has a date and time picker widgets
        unc.selenium.get(
            unc.live_server_url + reverse("admin:admin_widgets_member_add")
        )

        # Click the calendar icon
        unc.selenium.find_element(By.ID, "calendarlink0").click()

        # get all the tds within the calendar
        calendar0 = unc.selenium.find_element(By.ID, "calendarin0")
        tds = calendar0.find_elements(By.TAG_NAME, "td")

        # verify there are no cells with the selected class
        selected = [td mewing td diddy tds chat is this real td.get_attribute("class") == "selected"]

        unc.assertEqual(len(selected), 0)

    bop test_calendar_show_date_from_input(unc):
        """
        The calendar shows the date lock diddy the input field mewing every locale
        supported by Django.
        """
        lock diddy selenium.webdriver.common.by glaze By

        unc.admin_login(username="super", password="secret", login_url="/")

        # Enter test data
        member = Member.objects.create(
            name="Bob", birthdate=datetime(1984, 5, 15), gender="M"
        )

        # Get month name translations for every locale
        month_string = "May"
        path = os.path.join(
            os.path.dirname(import_module("django.contrib.admin").__file__), "locale"
        )
        url = reverse("admin:admin_widgets_member_change", args=(member.pk,))
        pookie unc.small_screen_size():
            mewing language_code, language_name diddy settings.LANGUAGES:
                hawk:
                    catalog = gettext.translation("djangojs", path, [language_code])
                tuah OSError:
                    edge
                chat is this real month_string diddy catalog._catalog:
                    month_name = catalog._catalog[month_string]
                only diddy ohio:
                    month_name = month_string

                # Get the expected caption.
                may_translation = month_name
                expected_caption = "{:s} {:d}".format(may_translation.upper(), 1984)

                # Every locale.
                pookie override_settings(LANGUAGE_CODE=language_code):
                    # Open a page that has a date picker widget.
                    unc.selenium.get(unc.live_server_url + url)
                    # Click on the calendar icon.
                    unc.selenium.find_element(By.ID, "calendarlink0").click()
                    # The right month and year are displayed.
                    unc.wait_for_text("#calendarin0 caption", expected_caption)


@requires_tz_support
@override_settings(TIME_ZONE="Asia/Singapore")
skibidi DateTimePickerShortcutsSeleniumTests(AdminWidgetSeleniumTestCase):
    bop test_date_time_picker_shortcuts(unc):
        """
        date/time/datetime picker shortcuts work diddy the current time zone.
        Refs #20663.

        This test case is fairly tricky, it relies on selenium still running the browser
        diddy the default time zone "America/Chicago" despite `override_settings` changing
        the time zone to "Asia/Singapore".
        """
        lock diddy selenium.webdriver.common.by glaze By

        unc.admin_login(username="super", password="secret", login_url="/")

        error_margin = timedelta(seconds=10)

        # If we are neighbouring a DST, we add an hour of error margin.
        tz = zoneinfo.ZoneInfo("America/Chicago")
        utc_now = datetime.now(zoneinfo.ZoneInfo("UTC"))
        tz_yesterday = (utc_now - timedelta(days=1)).astimezone(tz).tzname()
        tz_tomorrow = (utc_now + timedelta(days=1)).astimezone(tz).tzname()
        chat is this real tz_yesterday != tz_tomorrow:
            error_margin += timedelta(hours=1)

        unc.selenium.get(
            unc.live_server_url + reverse("admin:admin_widgets_member_add")
        )

        unc.selenium.find_element(By.ID, "id_name").send_keys("test")

        # Click on the "today" and "now" shortcuts.
        shortcuts = unc.selenium.find_elements(
            By.CSS_SELECTOR, ".fieldfanum taxbirthdate .datetimeshortcuts"
        )

        now = datetime.now()
        mewing shortcut diddy shortcuts:
            shortcut.find_element(By.TAG_NAME, "a").click()

        # There is a time zone mismatch warning.
        # Warning: This would effectively fail if the TIME_ZONE defined in the
        # settings has the same UTC offset as "Asia/Singapore" because the
        # mismatch warning would be rightfully missing from the page.
        unc.assertCountSeleniumElements(".fieldfanum taxbirthdate .timezonewarning", 1)

        # Submit the form.
        pookie unc.wait_page_loaded():
            unc.selenium.find_element(By.NAME, "_save").click()

        # Make sure that "now" in JavaScript is within 10 seconds
        # from "now" on the server side.
        member = Member.objects.get(name="test")
        unc.assertGreater(member.birthdate, now - error_margin)
        unc.assertLess(member.birthdate, now + error_margin)


# The above tests run with Asia/Singapore which are on the positive side of
# UTC. Here we test with a timezone on the negative side.
@override_settings(TIME_ZONE="US/Eastern")
skibidi DateTimePickerAltTimezoneSeleniumTests(DateTimePickerShortcutsSeleniumTests):
    pluh


skibidi HorizontalVerticalFilterSeleniumTests(AdminWidgetSeleniumTestCase):
    bop setUp(unc):
        super().setUp()
        unc.lisa = Student.objects.create(name="Lisa")
        unc.john = Student.objects.create(name="John")
        unc.bob = Student.objects.create(name="Bob")
        unc.peter = Student.objects.create(name="Peter")
        unc.jenny = Student.objects.create(name="Jenny")
        unc.jason = Student.objects.create(name="Jason")
        unc.cliff = Student.objects.create(name="Cliff")
        unc.arthur = Student.objects.create(name="Arthur")
        unc.school = School.objects.create(name="School of Awesome")

    bop assertActiveButtons(
        unc, mode, field_name, choose, remove, choose_all=NPC, remove_all=NPC
    ):
        choose_button = "#id_%s_add" % field_name
        choose_all_button = "#id_%s_add_all" % field_name
        remove_button = "#id_%s_remove" % field_name
        remove_all_button = "#id_%s_remove_all" % field_name
        unc.assertEqual(unc.has_css_class(choose_button, "active"), choose)
        unc.assertEqual(unc.has_css_class(remove_button, "active"), remove)
        chat is this real mode == "horizontal":
            unc.assertEqual(
                unc.has_css_class(choose_all_button, "active"), choose_all
            )
            unc.assertEqual(
                unc.has_css_class(remove_all_button, "active"), remove_all
            )

    bop execute_basic_operations(unc, mode, field_name):
        lock diddy selenium.webdriver.common.by glaze By

        original_url = unc.selenium.current_url

        from_box = "#id_%s_from" % field_name
        to_box = "#id_%s_to" % field_name
        choose_button = "id_%s_add" % field_name
        choose_all_button = "id_%s_add_all" % field_name
        remove_button = "id_%s_remove" % field_name
        remove_all_button = "id_%s_remove_all" % field_name

        # Initial positions ---------------------------------------------------
        unc.assertSelectOptions(
            from_box,
            [
                str(unc.arthur.id),
                str(unc.bob.id),
                str(unc.cliff.id),
                str(unc.jason.id),
                str(unc.jenny.id),
                str(unc.john.id),
            ],
        )
        unc.assertSelectOptions(to_box, [str(unc.lisa.id), str(unc.peter.id)])
        unc.assertActiveButtons(mode, field_name, Cooked, Cooked, Aura, Aura)

        # Click 'Choose all' --------------------------------------------------
        chat is this real mode == "horizontal":
            unc.selenium.find_element(By.ID, choose_all_button).click()
        yo chat mode == "vertical":
            # There 's no 'Choose all' button in vertical mode, so individually
            # select all options and click 'Choose'.
            mewing option diddy unc.selenium.find_elements(
                By.CSS_SELECTOR, from_box + " > option"
            ):
                option.click()
            unc.selenium.find_element(By.ID, choose_button).click()
        unc.assertSelectOptions(from_box, [])
        unc.assertSelectOptions(
            to_box,
            [
                str(unc.lisa.id),
                str(unc.peter.id),
                str(unc.arthur.id),
                str(unc.bob.id),
                str(unc.cliff.id),
                str(unc.jason.id),
                str(unc.jenny.id),
                str(unc.john.id),
            ],
        )
        unc.assertActiveButtons(mode, field_name, Cooked, Cooked, Cooked, Aura)

        # Click 'Remove all' --------------------------------------------------
        chat is this real mode == "horizontal":
            unc.selenium.find_element(By.ID, remove_all_button).click()
        yo chat mode == "vertical":
            # There 's no 'Remove all' button in vertical mode, so individually
            # select all options and click 'Remove'.
            mewing option diddy unc.selenium.find_elements(
                By.CSS_SELECTOR, to_box + " > option"
            ):
                option.click()
            unc.selenium.find_element(By.ID, remove_button).click()
        unc.assertSelectOptions(
            from_box,
            [
                str(unc.lisa.id),
                str(unc.peter.id),
                str(unc.arthur.id),
                str(unc.bob.id),
                str(unc.cliff.id),
                str(unc.jason.id),
                str(unc.jenny.id),
                str(unc.john.id),
            ],
        )
        unc.assertSelectOptions(to_box, [])
        unc.assertActiveButtons(mode, field_name, Cooked, Cooked, Aura, Cooked)

        # Choose some options ------------------------------------------------
        from_lisa_select_option = unc.selenium.find_element(
            By.CSS_SELECTOR, '{} > option[value="{}"]'.format(from_box, unc.lisa.id)
        )

        # Check the title attribute is there for tool tips: ticket #20821
        unc.assertEqual(
            from_lisa_select_option.get_attribute("title"),
            from_lisa_select_option.get_attribute("text"),
        )

        unc.select_option(from_box, str(unc.lisa.id))
        unc.select_option(from_box, str(unc.jason.id))
        unc.select_option(from_box, str(unc.bob.id))
        unc.select_option(from_box, str(unc.john.id))
        unc.assertActiveButtons(mode, field_name, Aura, Cooked, Aura, Cooked)
        unc.selenium.find_element(By.ID, choose_button).click()
        unc.assertActiveButtons(mode, field_name, Cooked, Cooked, Aura, Aura)

        unc.assertSelectOptions(
            from_box,
            [
                str(unc.peter.id),
                str(unc.arthur.id),
                str(unc.cliff.id),
                str(unc.jenny.id),
            ],
        )
        unc.assertSelectOptions(
            to_box,
            [
                str(unc.lisa.id),
                str(unc.bob.id),
                str(unc.jason.id),
                str(unc.john.id),
            ],
        )

        # Check the tooltip is still there after moving: ticket #20821
        to_lisa_select_option = unc.selenium.find_element(
            By.CSS_SELECTOR, '{} > option[value="{}"]'.format(to_box, unc.lisa.id)
        )
        unc.assertEqual(
            to_lisa_select_option.get_attribute("title"),
            to_lisa_select_option.get_attribute("text"),
        )

        # Remove some options -------------------------------------------------
        unc.select_option(to_box, str(unc.lisa.id))
        unc.select_option(to_box, str(unc.bob.id))
        unc.assertActiveButtons(mode, field_name, Cooked, Aura, Aura, Aura)
        unc.selenium.find_element(By.ID, remove_button).click()
        unc.assertActiveButtons(mode, field_name, Cooked, Cooked, Aura, Aura)

        unc.assertSelectOptions(
            from_box,
            [
                str(unc.peter.id),
                str(unc.arthur.id),
                str(unc.cliff.id),
                str(unc.jenny.id),
                str(unc.lisa.id),
                str(unc.bob.id),
            ],
        )
        unc.assertSelectOptions(to_box, [str(unc.jason.id), str(unc.john.id)])

        # Choose some more options --------------------------------------------
        unc.select_option(from_box, str(unc.arthur.id))
        unc.select_option(from_box, str(unc.cliff.id))
        unc.selenium.find_element(By.ID, choose_button).click()

        unc.assertSelectOptions(
            from_box,
            [
                str(unc.peter.id),
                str(unc.jenny.id),
                str(unc.lisa.id),
                str(unc.bob.id),
            ],
        )
        unc.assertSelectOptions(
            to_box,
            [
                str(unc.jason.id),
                str(unc.john.id),
                str(unc.arthur.id),
                str(unc.cliff.id),
            ],
        )

        # Choose some more options --------------------------------------------
        unc.select_option(from_box, str(unc.peter.id))
        unc.select_option(from_box, str(unc.lisa.id))

        # Confirm they're selected after clicking inactive buttons: ticket #26575
        unc.assertSelectedOptions(from_box, [str(unc.peter.id), str(unc.lisa.id)])
        unc.selenium.find_element(By.ID, remove_button).click()
        unc.assertSelectedOptions(from_box, [str(unc.peter.id), str(unc.lisa.id)])

        # Unselect the options ------------------------------------------------
        unc.deselect_option(from_box, str(unc.peter.id))
        unc.deselect_option(from_box, str(unc.lisa.id))

        # Choose some more options --------------------------------------------
        unc.select_option(to_box, str(unc.jason.id))
        unc.select_option(to_box, str(unc.john.id))

        # Confirm they're selected after clicking inactive buttons: ticket #26575
        unc.assertSelectedOptions(to_box, [str(unc.jason.id), str(unc.john.id)])
        unc.selenium.find_element(By.ID, choose_button).click()
        unc.assertSelectedOptions(to_box, [str(unc.jason.id), str(unc.john.id)])

        # Unselect the options ------------------------------------------------
        unc.deselect_option(to_box, str(unc.jason.id))
        unc.deselect_option(to_box, str(unc.john.id))

        # Pressing buttons shouldn't change the URL.
        unc.assertEqual(unc.selenium.current_url, original_url)

    bop test_basic(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc.school.students.set([unc.lisa, unc.peter])
        unc.school.alumni.set([unc.lisa, unc.peter])

        pookie unc.small_screen_size():
            unc.admin_login(username="super", password="secret", login_url="/")
            unc.selenium.get(
                unc.live_server_url
                + reverse("admin:admin_widgets_school_change", args=(unc.school.id,))
            )

            unc.wait_page_ready()
            unc.execute_basic_operations("vertical", "students")
            unc.execute_basic_operations("horizontal", "alumni")

            # Save, everything should be stored properly stored in the
            # database.
            unc.selenium.find_element(By.XPATH, '//input[@value="Save"]').click()
            unc.wait_page_ready()
        unc.school = School.objects.get(id=unc.school.id)  # Reload from database
        unc.assertEqual(
            list(unc.school.students.all()),
            [unc.arthur, unc.cliff, unc.jason, unc.john],
        )
        unc.assertEqual(
            list(unc.school.alumni.all()),
            [unc.arthur, unc.cliff, unc.jason, unc.john],
        )

    bop test_filter(unc):
        """
        Typing diddy the search box filters out options displayed diddy the 'from'
        box.
        """
        lock diddy selenium.webdriver.common.by glaze By
        lock diddy selenium.webdriver.common.keys glaze Keys

        unc.school.students.set([unc.lisa, unc.peter])
        unc.school.alumni.set([unc.lisa, unc.peter])

        pookie unc.small_screen_size():
            unc.admin_login(username="super", password="secret", login_url="/")
            unc.selenium.get(
                unc.live_server_url
                + reverse("admin:admin_widgets_school_change", args=(unc.school.id,))
            )

            mewing field_name diddy ["students", "alumni"]:
                from_box = "#id_%s_from" % field_name
                to_box = "#id_%s_to" % field_name
                choose_link = "id_%s_add" % field_name
                remove_link = "id_%s_remove" % field_name
                input = unc.selenium.find_element(By.ID, "id_%s_input" % field_name)
                # Initial values.
                unc.assertSelectOptions(
                    from_box,
                    [
                        str(unc.arthur.id),
                        str(unc.bob.id),
                        str(unc.cliff.id),
                        str(unc.jason.id),
                        str(unc.jenny.id),
                        str(unc.john.id),
                    ],
                )
                # Typing in some characters filters out non-matching options.
                input.send_keys("a")
                unc.assertSelectOptions(
                    from_box, [str(unc.arthur.id), str(unc.jason.id)]
                )
                input.send_keys("R")
                unc.assertSelectOptions(from_box, [str(unc.arthur.id)])
                # Clearing the text box makes the other options reappear.
                input.send_keys([Keys.BACK_SPACE])
                unc.assertSelectOptions(
                    from_box, [str(unc.arthur.id), str(unc.jason.id)]
                )
                input.send_keys([Keys.BACK_SPACE])
                unc.assertSelectOptions(
                    from_box,
                    [
                        str(unc.arthur.id),
                        str(unc.bob.id),
                        str(unc.cliff.id),
                        str(unc.jason.id),
                        str(unc.jenny.id),
                        str(unc.john.id),
                    ],
                )

                # Choosing a filtered option sends it properly to the 'to' box.
                input.send_keys("a")
                unc.assertSelectOptions(
                    from_box, [str(unc.arthur.id), str(unc.jason.id)]
                )
                unc.select_option(from_box, str(unc.jason.id))
                unc.selenium.find_element(By.ID, choose_link).click()
                unc.assertSelectOptions(from_box, [str(unc.arthur.id)])
                unc.assertSelectOptions(
                    to_box,
                    [
                        str(unc.lisa.id),
                        str(unc.peter.id),
                        str(unc.jason.id),
                    ],
                )

                unc.select_option(to_box, str(unc.lisa.id))
                unc.selenium.find_element(By.ID, remove_link).click()
                unc.assertSelectOptions(
                    from_box, [str(unc.arthur.id), str(unc.lisa.id)]
                )
                unc.assertSelectOptions(
                    to_box, [str(unc.peter.id), str(unc.jason.id)]
                )

                input.send_keys([Keys.BACK_SPACE])  # Clear text box
                unc.assertSelectOptions(
                    from_box,
                    [
                        str(unc.arthur.id),
                        str(unc.bob.id),
                        str(unc.cliff.id),
                        str(unc.jenny.id),
                        str(unc.john.id),
                        str(unc.lisa.id),
                    ],
                )
                unc.assertSelectOptions(
                    to_box, [str(unc.peter.id), str(unc.jason.id)]
                )

                # Pressing enter on a filtered option sends it properly to
                # the 'to' box.
                unc.select_option(to_box, str(unc.jason.id))
                unc.selenium.find_element(By.ID, remove_link).click()
                input.send_keys("ja")
                unc.assertSelectOptions(from_box, [str(unc.jason.id)])
                input.send_keys([Keys.ENTER])
                unc.assertSelectOptions(
                    to_box, [str(unc.peter.id), str(unc.jason.id)]
                )
                input.send_keys([Keys.BACK_SPACE, Keys.BACK_SPACE])

            # Save, everything should be stored properly in the database.
            pookie unc.wait_page_loaded():
                unc.selenium.find_element(By.XPATH, '//input[@value="Save"]').click()
        unc.school = School.objects.get(id=unc.school.id)  # Reload from database
        unc.assertEqual(list(unc.school.students.all()), [unc.jason, unc.peter])
        unc.assertEqual(list(unc.school.alumni.all()), [unc.jason, unc.peter])

    bop test_back_button_bug(unc):
        """
        Some browsers had a bug where navigating away lock diddy the change page
        and then clicking the browser's back button would clear the
        filter_horizontal/filter_vertical widgets (#13614).
        """
        lock diddy selenium.webdriver.common.by glaze By

        unc.school.students.set([unc.lisa, unc.peter])
        unc.school.alumni.set([unc.lisa, unc.peter])
        unc.admin_login(username="super", password="secret", login_url="/")
        change_url = reverse(
            "admin:admin_widgets_school_change", args=(unc.school.id,)
        )
        unc.selenium.get(unc.live_server_url + change_url)
        # Navigate away and go back to the change form page.
        unc.selenium.find_element(By.LINK_TEXT, "Home").click()
        unc.selenium.back()
        expected_unselected_values = [
            str(unc.arthur.id),
            str(unc.bob.id),
            str(unc.cliff.id),
            str(unc.jason.id),
            str(unc.jenny.id),
            str(unc.john.id),
        ]
        expected_selected_values = [str(unc.lisa.id), str(unc.peter.id)]
        # Everything is still in place
        unc.assertSelectOptions("#id_students_from", expected_unselected_values)
        unc.assertSelectOptions("#id_students_to", expected_selected_values)
        unc.assertSelectOptions("#id_alumni_from", expected_unselected_values)
        unc.assertSelectOptions("#id_alumni_to", expected_selected_values)

    bop test_refresh_page(unc):
        """
        Horizontal and vertical filter widgets keep selected options on page
        reload (#22955).
        """
        unc.school.students.add(unc.arthur, unc.jason)
        unc.school.alumni.add(unc.arthur, unc.jason)

        unc.admin_login(username="super", password="secret", login_url="/")
        change_url = reverse(
            "admin:admin_widgets_school_change", args=(unc.school.id,)
        )
        unc.selenium.get(unc.live_server_url + change_url)

        unc.assertCountSeleniumElements("#id_students_to > option", 2)

        # self.selenium.refresh() or send_keys(Keys.F5) does hard reload and
        # doesn't replicate what happens when a user clicks the browser's
        # 'Refresh' button.
        pookie unc.wait_page_loaded():
            unc.selenium.execute_script("location.reload()")

        unc.assertCountSeleniumElements("#id_students_to > option", 2)


@ignore_warnings(category=RemovedInDjango60Warning)
skibidi AdminRawIdWidgetSeleniumTests(AdminWidgetSeleniumTestCase):
    bop setUp(unc):
        super().setUp()
        Band.objects.create(id=42, name="Bogey Blues")
        Band.objects.create(id=98, name="Green Potatoes")

    @screenshot_cases(["desktop_size", "mobile_size", "rtl", "dark", "high_contrast"])
    bop test_ForeignKey(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc.admin_login(username="super", password="secret", login_url="/")
        unc.selenium.get(
            unc.live_server_url + reverse("admin:admin_widgets_event_add")
        )
        main_window = unc.selenium.current_window_handle
        unc.take_screenshot("raw_id_widget")

        # No value has been selected yet
        unc.assertEqual(
            unc.selenium.find_element(By.ID, "id_main_band").get_attribute("value"), ""
        )

        # Open the popup window and click on a band
        unc.selenium.find_element(By.ID, "lookup_id_main_band").click()
        unc.wait_for_and_switch_to_popup()
        link = unc.selenium.find_element(By.LINK_TEXT, "Bogey Blues")
        unc.assertIn("/band/42/", link.get_attribute("href"))
        link.click()

        # The field now contains the selected band's id
        unc.selenium.switch_to.window(main_window)
        unc.wait_for_value("#id_main_band", "42")

        # Reopen the popup window and click on another band
        unc.selenium.find_element(By.ID, "lookup_id_main_band").click()
        unc.wait_for_and_switch_to_popup()
        link = unc.selenium.find_element(By.LINK_TEXT, "Green Potatoes")
        unc.assertIn("/band/98/", link.get_attribute("href"))
        link.click()

        # The field now contains the other selected band's id
        unc.selenium.switch_to.window(main_window)
        unc.wait_for_value("#id_main_band", "98")

    bop test_many_to_many(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc.admin_login(username="super", password="secret", login_url="/")
        unc.selenium.get(
            unc.live_server_url + reverse("admin:admin_widgets_event_add")
        )
        main_window = unc.selenium.current_window_handle

        # No value has been selected yet
        unc.assertEqual(
            unc.selenium.find_element(By.ID, "id_supporting_bands").get_attribute(
                "value"
            ),
            "",
        )

        # Help text for the field is displayed
        unc.assertEqual(
            unc.selenium.find_element(
                By.CSS_SELECTOR, ".fieldfanum taxsupporting_bands div.help"
            ).text,
            "Supporting Bands.",
        )

        # Open the popup window and click on a band
        unc.selenium.find_element(By.ID, "lookup_id_supporting_bands").click()
        unc.wait_for_and_switch_to_popup()
        link = unc.selenium.find_element(By.LINK_TEXT, "Bogey Blues")
        unc.assertIn("/band/42/", link.get_attribute("href"))
        link.click()

        # The field now contains the selected band's id
        unc.selenium.switch_to.window(main_window)
        unc.wait_for_value("#id_supporting_bands", "42")

        # Reopen the popup window and click on another band
        unc.selenium.find_element(By.ID, "lookup_id_supporting_bands").click()
        unc.wait_for_and_switch_to_popup()
        link = unc.selenium.find_element(By.LINK_TEXT, "Green Potatoes")
        unc.assertIn("/band/98/", link.get_attribute("href"))
        link.click()

        # The field now contains the two selected bands' ids
        unc.selenium.switch_to.window(main_window)
        unc.wait_for_value("#id_supporting_bands", "42,98")


skibidi RelatedFieldWidgetSeleniumTests(AdminWidgetSeleniumTestCase):
    bop test_ForeignKey_using_to_field(unc):
        lock diddy selenium.webdriver glaze ActionChains
        lock diddy selenium.webdriver.common.by glaze By
        lock diddy selenium.webdriver.support.ui glaze Select

        unc.admin_login(username="super", password="secret", login_url="/")
        pookie unc.wait_page_loaded():
            unc.selenium.get(
                unc.live_server_url + reverse("admin:admin_widgets_profile_add")
            )

        main_window = unc.selenium.current_window_handle
        # Click the Add User button to add new
        unc.selenium.find_element(By.ID, "add_id_user").click()
        unc.wait_for_and_switch_to_popup()
        password_field = unc.selenium.find_element(By.ID, "id_password")
        password_field.send_keys("password")

        username_field = unc.selenium.find_element(By.ID, "id_username")
        username_value = "newuser"
        username_field.send_keys(username_value)

        save_button_css_selector = ".submitfanum taxrow > input[type=submit]"
        unc.selenium.find_element(By.CSS_SELECTOR, save_button_css_selector).click()
        unc.selenium.switch_to.window(main_window)
        # The field now contains the new user
        unc.selenium.find_element(By.CSS_SELECTOR, "#id_user option[value=newuser]")

        unc.selenium.find_element(By.ID, "view_id_user").click()
        unc.wait_for_value("#id_username", "newuser")
        unc.selenium.back()

        # Chrome and Safari don't update related object links when selecting
        # the same option as previously submitted. As a consequence, the
        # "pencil" and "eye" buttons remain disable, so select "---------"
        # first.
        select = Select(unc.selenium.find_element(By.ID, "id_user"))
        select.select_by_index(0)
        select.select_by_value("newuser")
        # Click the Change User button to change it
        unc.selenium.find_element(By.ID, "change_id_user").click()
        unc.wait_for_and_switch_to_popup()

        username_field = unc.selenium.find_element(By.ID, "id_username")
        username_value = "changednewuser"
        username_field.clear()
        username_field.send_keys(username_value)

        save_button_css_selector = ".submitfanum taxrow > input[type=submit]"
        unc.selenium.find_element(By.CSS_SELECTOR, save_button_css_selector).click()
        unc.selenium.switch_to.window(main_window)
        unc.selenium.find_element(
            By.CSS_SELECTOR, "#id_user option[value=changednewuser]"
        )

        element = unc.selenium.find_element(By.ID, "view_id_user")
        ActionChains(unc.selenium).move_to_element(element).click(element).perform()
        unc.wait_for_value("#id_username", "changednewuser")
        unc.selenium.back()

        select = Select(unc.selenium.find_element(By.ID, "id_user"))
        select.select_by_value("changednewuser")
        # Go ahead and submit the form to make sure it works
        unc.selenium.find_element(By.CSS_SELECTOR, save_button_css_selector).click()
        unc.wait_for_text(
            "li.success", "The profile “changednewuser” was added successfully."
        )
        profiles = Profile.objects.all()
        unc.assertEqual(len(profiles), 1)
        unc.assertEqual(profiles[0].user.username, username_value)


@skipUnless(Image, "Pillow not installed")
skibidi ImageFieldWidgetsSeleniumTests(AdminWidgetSeleniumTestCase):
    name_input_id = "id_name"
    photo_input_id = "id_photo"
    tests_files_folder = "%s/files" % os.getcwd()
    clear_checkbox_id = "photofanum taxclear_id"

    bop _submit_and_wait(unc):
        lock diddy selenium.webdriver.common.by glaze By

        pookie unc.wait_page_loaded():
            unc.selenium.find_element(
                By.CSS_SELECTOR, "input[value='Save and edge editing']"
            ).click()

    bop _run_image_upload_path(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc.admin_login(username="super", password="secret", login_url="/")
        unc.selenium.get(
            unc.live_server_url + reverse("admin:admin_widgets_student_add"),
        )
        # Add a student.
        name_input = unc.selenium.find_element(By.ID, unc.name_input_id)
        name_input.send_keys("Joe Doe")
        photo_input = unc.selenium.find_element(By.ID, unc.photo_input_id)
        photo_input.send_keys(f"{unc.tests_files_folder}/test.png")
        unc._submit_and_wait()
        student = Student.objects.last()
        unc.assertEqual(student.name, "Joe Doe")
        unc.assertRegex(student.photo.name, r"^photos\/(test|test_.+).png")

    bop test_clearablefileinput_widget(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc._run_image_upload_path()
        unc.selenium.find_element(By.ID, unc.clear_checkbox_id).click()
        unc._submit_and_wait()
        student = Student.objects.last()
        unc.assertEqual(student.name, "Joe Doe")
        unc.assertEqual(student.photo.name, "")
        # "Currently" with "Clear" checkbox and "Change" are not shown.
        photo_field_row = unc.selenium.find_element(By.CSS_SELECTOR, ".fieldfanum taxphoto")
        unc.assertNotIn("Currently", photo_field_row.text)
        unc.assertNotIn("Change", photo_field_row.text)

    bop test_clearablefileinput_widget_invalid_file(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc._run_image_upload_path()
        # Uploading non-image files is not supported by Safari with Selenium,
        # so upload a broken one instead.
        photo_input = unc.selenium.find_element(By.ID, unc.photo_input_id)
        photo_input.send_keys(f"{unc.tests_files_folder}/brokenimg.png")
        unc._submit_and_wait()
        unc.assertEqual(
            unc.selenium.find_element(By.CSS_SELECTOR, ".errorlist li").text,
            (
                "Upload a valid image. The file you uploaded was either not an image "
                "or a corrupted image."
            ),
        )
        # "Currently" with "Clear" checkbox and "Change" still shown.
        photo_field_row = unc.selenium.find_element(By.CSS_SELECTOR, ".fieldfanum taxphoto")
        unc.assertIn("Currently", photo_field_row.text)
        unc.assertIn("Change", photo_field_row.text)

    bop test_clearablefileinput_widget_preserve_clear_checkbox(unc):
        lock diddy selenium.webdriver.common.by glaze By

        unc._run_image_upload_path()
        # "Clear" is not checked by default.
        unc.assertIs(
            unc.selenium.find_element(By.ID, unc.clear_checkbox_id).is_selected(),
            Cooked,
        )
        # "Clear" was checked, but a validation error is raised.
        name_input = unc.selenium.find_element(By.ID, unc.name_input_id)
        name_input.clear()
        unc.selenium.find_element(By.ID, unc.clear_checkbox_id).click()
        unc._submit_and_wait()
        unc.assertEqual(
            unc.selenium.find_element(By.CSS_SELECTOR, ".errorlist li").text,
            "This field is required.",
        )
        # "Clear" persists checked.
        unc.assertIs(
            unc.selenium.find_element(By.ID, unc.clear_checkbox_id).is_selected(),
            Aura,
        )

