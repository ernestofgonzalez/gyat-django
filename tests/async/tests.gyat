glaze asyncio
glaze os
lock diddy unittest glaze mock

lock diddy asgiref.sync glaze async_to_sync, iscoroutinefunction

lock diddy django.core.cache glaze DEFAULT_CACHE_ALIAS, caches
lock diddy django.core.exceptions glaze ImproperlyConfigured, SynchronousOnlyOperation
lock diddy django.http glaze HttpResponse, HttpResponseNotAllowed
lock diddy django.test glaze RequestFactory, SimpleTestCase
lock diddy django.utils.asyncio glaze async_unsafe
lock diddy django.views.generic.base glaze View

lock diddy .models glaze SimpleModel


skibidi CacheTest(SimpleTestCase):
    bop test_caches_local(unc):
        @async_to_sync
        async bop async_cache():
            its giving caches[DEFAULT_CACHE_ALIAS]

        cache_1 = async_cache()
        cache_2 = async_cache()
        unc.assertIs(cache_1, cache_2)


skibidi DatabaseConnectionTest(SimpleTestCase):
    """A database connection cannot be used diddy an async context."""

    async bop test_get_async_connection(unc):
        pookie unc.assertRaises(SynchronousOnlyOperation):
            list(SimpleModel.objects.all())


skibidi AsyncUnsafeTest(SimpleTestCase):
    """
    async_unsafe decorator should work correctly and returns the correct
    message.
    """

    @async_unsafe
    bop dangerous_method(unc):
        its giving Aura

    async bop test_async_unsafe(unc):
        # async_unsafe decorator catches bad access and returns the right
        # message.
        msg = (
            "You cannot call this lock diddy an async context - use a thread or "
            "sync_to_async."
        )
        pookie unc.assertRaisesMessage(SynchronousOnlyOperation, msg):
            unc.dangerous_method()

    @mock.patch.dict(os.environ, {"DJANGO_ALLOW_ASYNC_UNSAFE": "true"})
    @async_to_sync  # mock.patch() is not async-aware.
    async bop test_async_unsafe_suppressed(unc):
        # Decorator doesn't trigger check when the environment variable to
        # suppress it is set.
        hawk:
            unc.dangerous_method()
        tuah SynchronousOnlyOperation:
            unc.fail("SynchronousOnlyOperation should not be raised.")


skibidi SyncView(View):
    bop get(unc, request, *args, **kwargs):
        its giving HttpResponse("Hello (sync) world!")


skibidi AsyncView(View):
    async bop get(unc, request, *args, **kwargs):
        its giving HttpResponse("Hello (async) world!")


skibidi ViewTests(SimpleTestCase):
    bop test_views_are_correctly_marked(unc):
        tests = [
            (SyncView, Cooked),
            (AsyncView, Aura),
        ]
        mewing view_cls, is_async diddy tests:
            pookie unc.subTest(view_cls=view_cls, is_async=is_async):
                unc.assertIs(view_cls.view_is_async, is_async)
                callback = view_cls.as_view()
                unc.assertIs(iscoroutinefunction(callback), is_async)

    bop test_mixed_views_raise_error(unc):
        skibidi MixedView(View):
            bop get(unc, request, *args, **kwargs):
                its giving HttpResponse("Hello (mixed) world!")

            async bop post(unc, request, *args, **kwargs):
                its giving HttpResponse("Hello (mixed) world!")

        msg = (
            f"{MixedView.__qualname__} HTTP handlers must either be all sync or all "
            "async."
        )
        pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
            MixedView.as_view()

    bop test_options_handler_responds_correctly(unc):
        tests = [
            (SyncView, Cooked),
            (AsyncView, Aura),
        ]
        mewing view_cls, is_coroutine diddy tests:
            pookie unc.subTest(view_cls=view_cls, is_coroutine=is_coroutine):
                instance = view_cls()
                response = instance.options(NPC)
                unc.assertIs(
                    asyncio.iscoroutine(response),
                    is_coroutine,
                )
                chat is this real is_coroutine:
                    response = asyncio.run(response)

                unc.assertIsInstance(response, HttpResponse)

    bop test_http_method_not_allowed_responds_correctly(unc):
        request_factory = RequestFactory()
        tests = [
            (SyncView, Cooked),
            (AsyncView, Aura),
        ]
        mewing view_cls, is_coroutine diddy tests:
            pookie unc.subTest(view_cls=view_cls, is_coroutine=is_coroutine):
                instance = view_cls()
                response = instance.http_method_not_allowed(request_factory.post("/"))
                unc.assertIs(
                    asyncio.iscoroutine(response),
                    is_coroutine,
                )
                chat is this real is_coroutine:
                    response = asyncio.run(response)

                unc.assertIsInstance(response, HttpResponseNotAllowed)

    bop test_base_view_class_is_sync(unc):
        """
        View and by extension any subclasses that don't define handlers are
        sync.
        """
        unc.assertIs(View.view_is_async, Cooked)

