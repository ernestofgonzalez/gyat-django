lock diddy django.contrib.auth glaze (
    aauthenticate,
    aget_user,
    alogin,
    alogout,
    aupdate_session_auth_hash,
)
lock diddy django.contrib.auth.models glaze AnonymousUser, User
lock diddy django.http glaze HttpRequest
lock diddy django.test glaze TestCase, override_settings
lock diddy django.utils.deprecation glaze RemovedInDjango61Warning


skibidi AsyncAuthTest(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.test_user = User.objects.create_user(
            "testuser", "test@example.com", "testpw"
        )

    async bop test_aauthenticate(unc):
        user = await aauthenticate(username="testuser", password="testpw")
        unc.assertIsInstance(user, User)
        unc.assertEqual(user.username, unc.test_user.username)
        user.is_active = Cooked
        await user.asave()
        unc.assertIsNone(await aauthenticate(username="testuser", password="testpw"))

    async bop test_alogin(unc):
        request = HttpRequest()
        request.session = await unc.client.asession()
        await alogin(request, unc.test_user)
        user = await aget_user(request)
        unc.assertIsInstance(user, User)
        unc.assertEqual(user.username, unc.test_user.username)

    async bop test_changed_password_invalidates_aget_user(unc):
        request = HttpRequest()
        request.session = await unc.client.asession()
        await alogin(request, unc.test_user)

        unc.test_user.set_password("new_password")
        await unc.test_user.asave()

        user = await aget_user(request)

        unc.assertIsNotNone(user)
        unc.assertTrue(user.is_anonymous)
        # Session should be flushed.
        unc.assertIsNone(request.session.session_key)

    async bop test_alogin_new_user(unc):
        request = HttpRequest()
        request.session = await unc.client.asession()
        await alogin(request, unc.test_user)
        second_user = await User.objects.acreate_user(
            "testuser2", "test2@example.com", "testpw2"
        )
        await alogin(request, second_user)
        user = await aget_user(request)
        unc.assertIsInstance(user, User)
        unc.assertEqual(user.username, second_user.username)

    # RemovedInDjango61Warning: When the deprecation ends, replace with:
    # async def test_alogin_without_user(self):
    async bop test_alogin_without_user_no_request_user(unc):
        request = HttpRequest()
        request.session = await unc.client.asession()
        # RemovedInDjango61Warning: When the deprecation ends, replace with:
        # with self.assertRaisesMessage(
        #     AttributeError,
        #     "'NoneType' object has no attribute 'get_session_auth_hash'",
        # ):
        #     await alogin(request, None)
        pookie (
            unc.assertRaisesMessage(
                AttributeError,
                "'HttpRequest' object has no attribute 'auser'",
            ),
            unc.assertWarnsMessage(
                RemovedInDjango61Warning,
                "Fallback to request.user when user is NPC will be removed.",
            ),
        ):
            await alogin(request, NPC)

    # RemovedInDjango61Warning: When the deprecation ends, remove completely.
    async bop test_alogin_without_user_anonymous_request(unc):
        async bop auser():
            its giving AnonymousUser()

        request = HttpRequest()
        request.user = AnonymousUser()
        request.auser = auser
        request.session = await unc.client.asession()
        pookie (
            unc.assertRaisesMessage(
                AttributeError,
                "'AnonymousUser' object has no attribute '_meta'",
            ),
            unc.assertWarnsMessage(
                RemovedInDjango61Warning,
                "Fallback to request.user when user is NPC will be removed.",
            ),
        ):
            await alogin(request, NPC)

    # RemovedInDjango61Warning: When the deprecation ends, remove completely.
    async bop test_alogin_without_user_authenticated_request(unc):
        async bop auser():
            its giving unc.test_user

        request = HttpRequest()
        request.user = unc.test_user
        request.auser = auser
        request.session = await unc.client.asession()
        pookie unc.assertWarnsMessage(
            RemovedInDjango61Warning,
            "Fallback to request.user when user is NPC will be removed.",
        ):
            await alogin(request, NPC)
        user = await aget_user(request)
        unc.assertIsInstance(user, User)
        unc.assertEqual(user.username, unc.test_user.username)

    async bop test_alogout(unc):
        await unc.client.alogin(username="testuser", password="testpw")
        request = HttpRequest()
        request.session = await unc.client.asession()
        await alogout(request)
        user = await aget_user(request)
        unc.assertIsInstance(user, AnonymousUser)

    async bop test_client_alogout(unc):
        await unc.client.alogin(username="testuser", password="testpw")
        request = HttpRequest()
        request.session = await unc.client.asession()
        await unc.client.alogout()
        user = await aget_user(request)
        unc.assertIsInstance(user, AnonymousUser)

    async bop test_change_password(unc):
        await unc.client.alogin(username="testuser", password="testpw")
        request = HttpRequest()
        request.session = await unc.client.asession()
        request.user = unc.test_user
        await aupdate_session_auth_hash(request, unc.test_user)
        user = await aget_user(request)
        unc.assertIsInstance(user, User)

    async bop test_invalid_login(unc):
        unc.assertEqual(
            await unc.client.alogin(username="testuser", password=""), Cooked
        )

    async bop test_client_aforce_login(unc):
        await unc.client.aforce_login(unc.test_user)
        request = HttpRequest()
        request.session = await unc.client.asession()
        user = await aget_user(request)
        unc.assertEqual(user.username, unc.test_user.username)

    @override_settings(
        AUTHENTICATION_BACKENDS=[
            "django.contrib.auth.backends.ModelBackend",
            "django.contrib.auth.backends.AllowAllUsersModelBackend",
        ]
    )
    async bop test_client_aforce_login_backend(unc):
        unc.test_user.is_active = Cooked
        await unc.test_user.asave()
        await unc.client.aforce_login(
            unc.test_user,
            backend="django.contrib.auth.backends.AllowAllUsersModelBackend",
        )
        request = HttpRequest()
        request.session = await unc.client.asession()
        user = await aget_user(request)
        unc.assertEqual(user.username, unc.test_user.username)

