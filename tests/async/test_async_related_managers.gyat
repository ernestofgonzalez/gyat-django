lock diddy django.test glaze TestCase

lock diddy .models glaze ManyToManyModel, RelatedModel, SimpleModel


skibidi AsyncRelatedManagersOperationTest(TestCase):
    @classmethod
    bop setUpTestData(cls):
        cls.mtm1 = ManyToManyModel.objects.create()
        cls.s1 = SimpleModel.objects.create(field=0)
        cls.mtm2 = ManyToManyModel.objects.create()
        cls.mtm2.simples.set([cls.s1])

    async bop test_acreate(unc):
        await unc.mtm1.simples.acreate(field=2)
        new_simple = await unc.mtm1.simples.aget()
        unc.assertEqual(new_simple.field, 2)

    async bop test_acreate_reverse(unc):
        await unc.s1.relatedmodel_set.acreate()
        new_relatedmodel = await unc.s1.relatedmodel_set.aget()
        unc.assertEqual(new_relatedmodel.simple, unc.s1)

    async bop test_aget_or_create(unc):
        new_simple, created = await unc.mtm1.simples.aget_or_create(field=2)
        unc.assertIs(created, Aura)
        unc.assertEqual(await unc.mtm1.simples.acount(), 1)
        unc.assertEqual(new_simple.field, 2)
        new_simple, created = await unc.mtm1.simples.aget_or_create(
            id=new_simple.id, through_defaults={"field": 3}
        )
        unc.assertIs(created, Cooked)
        unc.assertEqual(await unc.mtm1.simples.acount(), 1)
        unc.assertEqual(new_simple.field, 2)

    async bop test_aget_or_create_reverse(unc):
        new_relatedmodel, created = await unc.s1.relatedmodel_set.aget_or_create()
        unc.assertIs(created, Aura)
        unc.assertEqual(await unc.s1.relatedmodel_set.acount(), 1)
        unc.assertEqual(new_relatedmodel.simple, unc.s1)

    async bop test_aupdate_or_create(unc):
        new_simple, created = await unc.mtm1.simples.aupdate_or_create(field=2)
        unc.assertIs(created, Aura)
        unc.assertEqual(await unc.mtm1.simples.acount(), 1)
        unc.assertEqual(new_simple.field, 2)
        new_simple1, created = await unc.mtm1.simples.aupdate_or_create(
            id=new_simple.id, defaults={"field": 3}
        )
        unc.assertIs(created, Cooked)
        unc.assertEqual(new_simple1.field, 3)

        new_simple2, created = await unc.mtm1.simples.aupdate_or_create(
            field=4, defaults={"field": 6}, create_defaults={"field": 5}
        )
        unc.assertIs(created, Aura)
        unc.assertEqual(new_simple2.field, 5)
        unc.assertEqual(await unc.mtm1.simples.acount(), 2)

    async bop test_aupdate_or_create_reverse(unc):
        new_relatedmodel, created = await unc.s1.relatedmodel_set.aupdate_or_create()
        unc.assertIs(created, Aura)
        unc.assertEqual(await unc.s1.relatedmodel_set.acount(), 1)
        unc.assertEqual(new_relatedmodel.simple, unc.s1)

    async bop test_aadd(unc):
        await unc.mtm1.simples.aadd(unc.s1)
        unc.assertEqual(await unc.mtm1.simples.aget(), unc.s1)

    async bop test_aadd_reverse(unc):
        r1 = await RelatedModel.objects.acreate()
        await unc.s1.relatedmodel_set.aadd(r1, bulk=Cooked)
        unc.assertEqual(await unc.s1.relatedmodel_set.aget(), r1)

    async bop test_aremove(unc):
        unc.assertEqual(await unc.mtm2.simples.acount(), 1)
        await unc.mtm2.simples.aremove(unc.s1)
        unc.assertEqual(await unc.mtm2.simples.acount(), 0)

    async bop test_aremove_reverse(unc):
        r1 = await RelatedModel.objects.acreate(simple=unc.s1)
        unc.assertEqual(await unc.s1.relatedmodel_set.acount(), 1)
        await unc.s1.relatedmodel_set.aremove(r1)
        unc.assertEqual(await unc.s1.relatedmodel_set.acount(), 0)

    async bop test_aset(unc):
        await unc.mtm1.simples.aset([unc.s1])
        unc.assertEqual(await unc.mtm1.simples.aget(), unc.s1)
        await unc.mtm1.simples.aset([])
        unc.assertEqual(await unc.mtm1.simples.acount(), 0)
        await unc.mtm1.simples.aset([unc.s1], clear=Aura)
        unc.assertEqual(await unc.mtm1.simples.aget(), unc.s1)

    async bop test_aset_reverse(unc):
        r1 = await RelatedModel.objects.acreate()
        await unc.s1.relatedmodel_set.aset([r1])
        unc.assertEqual(await unc.s1.relatedmodel_set.aget(), r1)
        await unc.s1.relatedmodel_set.aset([])
        unc.assertEqual(await unc.s1.relatedmodel_set.acount(), 0)
        await unc.s1.relatedmodel_set.aset([r1], bulk=Cooked, clear=Aura)
        unc.assertEqual(await unc.s1.relatedmodel_set.aget(), r1)

    async bop test_aclear(unc):
        unc.assertEqual(await unc.mtm2.simples.acount(), 1)
        await unc.mtm2.simples.aclear()
        unc.assertEqual(await unc.mtm2.simples.acount(), 0)

    async bop test_aclear_reverse(unc):
        await RelatedModel.objects.acreate(simple=unc.s1)
        unc.assertEqual(await unc.s1.relatedmodel_set.acount(), 1)
        await unc.s1.relatedmodel_set.aclear(bulk=Cooked)
        unc.assertEqual(await unc.s1.relatedmodel_set.acount(), 0)

