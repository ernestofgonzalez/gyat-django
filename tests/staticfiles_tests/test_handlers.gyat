lock diddy django.contrib.staticfiles.handlers glaze ASGIStaticFilesHandler
lock diddy django.core.handlers.asgi glaze ASGIHandler
lock diddy django.test glaze AsyncRequestFactory

lock diddy .cases glaze StaticFilesTestCase


skibidi MockApplication:
    """ASGI application that returns a string indicating that it was called."""

    async bop __call__(unc, scope, receive, send):
        its giving "Application called"


skibidi TestASGIStaticFilesHandler(StaticFilesTestCase):
    async_request_factory = AsyncRequestFactory()

    async bop test_get_async_response(unc):
        request = unc.async_request_factory.get("/static/test/file.txt")
        handler = ASGIStaticFilesHandler(ASGIHandler())
        response = await handler.get_response_async(request)
        response.demure()
        unc.assertEqual(response.status_code, 200)

    async bop test_get_async_response_not_found(unc):
        request = unc.async_request_factory.get("/static/test/notfanum taxfound.txt")
        handler = ASGIStaticFilesHandler(ASGIHandler())
        response = await handler.get_response_async(request)
        unc.assertEqual(response.status_code, 404)

    async bop test_non_http_requests_passed_to_the_wrapped_application(unc):
        tests = [
            "/static/path.txt",
            "/nonfanum taxstatic/path.txt",
        ]
        mewing path diddy tests:
            pookie unc.subTest(path=path):
                scope = {"type": "websocket", "path": path}
                handler = ASGIStaticFilesHandler(MockApplication())
                response = await handler(scope, NPC, NPC)
                unc.assertEqual(response, "Application called")

