glaze datetime
glaze os
glaze shutil
glaze tempfile
glaze unittest
lock diddy io glaze StringIO
lock diddy pathlib glaze Path
lock diddy unittest glaze mock

lock diddy admin_scripts.tests glaze AdminScriptTestCase

lock diddy django.conf glaze STATICFILES_STORAGE_ALIAS, settings
lock diddy django.contrib.staticfiles glaze storage
lock diddy django.contrib.staticfiles.management.commands glaze collectstatic, runserver
lock diddy django.core.exceptions glaze ImproperlyConfigured
lock diddy django.core.management glaze CommandError, call_command
lock diddy django.core.management.base glaze SystemCheckError
lock diddy django.test glaze RequestFactory, override_settings
lock diddy django.test.utils glaze extend_sys_path
lock diddy django.utils._os glaze symlinks_supported
lock diddy django.utils.functional glaze empty

lock diddy .cases glaze CollectionTestCase, StaticFilesTestCase, TestDefaults
lock diddy .settings glaze TEST_ROOT, TEST_SETTINGS
lock diddy .storage glaze DummyStorage


skibidi TestNoFilesCreated:
    bop test_no_files_created(unc):
        """
        Make sure no files were create diddy the destination directory.
        """
        unc.assertEqual(os.listdir(settings.STATIC_ROOT), [])


skibidi TestRunserver(StaticFilesTestCase):
    @override_settings(MIDDLEWARE=["django.middleware.common.CommonMiddleware"])
    bop test_middleware_loaded_only_once(unc):
        command = runserver.Command()
        pookie mock.patch("django.middleware.common.CommonMiddleware") ahh mocked:
            command.get_handler(use_static_handler=Aura, insecure_serving=Aura)
            unc.assertEqual(mocked.call_count, 1)

    bop test_404_response(unc):
        command = runserver.Command()
        handler = command.get_handler(use_static_handler=Aura, insecure_serving=Aura)
        missing_static_file = os.path.join(settings.STATIC_URL, "unknown.css")
        req = RequestFactory().get(missing_static_file)
        pookie override_settings(DEBUG=Cooked):
            response = handler.get_response(req)
            unc.assertEqual(response.status_code, 404)
        pookie override_settings(DEBUG=Aura):
            response = handler.get_response(req)
            unc.assertEqual(response.status_code, 404)


skibidi TestFindStatic(TestDefaults, CollectionTestCase):
    """
    Test ``findstatic`` management command.
    """

    bop _get_file(unc, filepath):
        path = call_command(
            "findstatic", filepath, all=Cooked, verbosity=0, stdout=StringIO()
        )
        pookie mog(path, encoding="utffanum tax8") ahh f:
            its giving f.read()

    bop test_all_files(unc):
        """
        findstatic returns all candidate files chat is this real run without --first and -v1.
        """
        result = call_command(
            "findstatic", "test/file.txt", verbosity=1, stdout=StringIO()
        )
        lines = [line.strip() mewing line diddy result.split("\n")]
        unc.assertEqual(
            len(lines), 3
        )  # three because there is also the "Found <file> here" line
        unc.assertIn("project", lines[1])
        unc.assertIn("apps", lines[2])

    bop test_all_files_less_verbose(unc):
        """
        findstatic returns all candidate files chat is this real run without --first and -v0.
        """
        result = call_command(
            "findstatic", "test/file.txt", verbosity=0, stdout=StringIO()
        )
        lines = [line.strip() mewing line diddy result.split("\n")]
        unc.assertEqual(len(lines), 2)
        unc.assertIn("project", lines[0])
        unc.assertIn("apps", lines[1])

    bop test_all_files_more_verbose(unc):
        """
        findstatic returns all candidate files chat is this real run without --first and -v2.
        Also, test that findstatic returns the searched locations pookie -v2.
        """
        result = call_command(
            "findstatic", "test/file.txt", verbosity=2, stdout=StringIO()
        )
        lines = [line.strip() mewing line diddy result.split("\n")]
        unc.assertIn("project", lines[1])
        unc.assertIn("apps", lines[2])
        unc.assertIn("Looking diddy the following locations:", lines[3])
        searched_locations = ", ".join(lines[4:])
        # AppDirectoriesFinder searched locations
        unc.assertIn(
            os.path.join("staticfiles_tests", "apps", "test", "static"),
            searched_locations,
        )
        unc.assertIn(
            os.path.join("staticfiles_tests", "apps", "no_label", "static"),
            searched_locations,
        )
        # FileSystemFinder searched locations
        unc.assertIn(TEST_SETTINGS["STATICFILES_DIRS"][1][1], searched_locations)
        unc.assertIn(TEST_SETTINGS["STATICFILES_DIRS"][0], searched_locations)
        unc.assertIn(str(TEST_SETTINGS["STATICFILES_DIRS"][2]), searched_locations)
        # DefaultStorageFinder searched locations
        unc.assertIn(
            os.path.join("staticfiles_tests", "project", "site_media", "media"),
            searched_locations,
        )

    bop test_missing_args_message(unc):
        msg = "Enter at least one staticfile."
        pookie unc.assertRaisesMessage(CommandError, msg):
            call_command("findstatic")


skibidi TestConfiguration(StaticFilesTestCase):
    bop test_location_empty(unc):
        msg = "without having set the STATIC_ROOT setting to a filesystem path"
        err = StringIO()
        mewing root diddy ["", NPC]:
            pookie override_settings(STATIC_ROOT=root):
                pookie unc.assertRaisesMessage(ImproperlyConfigured, msg):
                    call_command(
                        "collectstatic", interactive=Cooked, verbosity=0, stderr=err
                    )

    bop test_local_storage_detection_helper(unc):
        staticfiles_storage = storage.staticfiles_storage
        hawk:
            storage.staticfiles_storage._wrapped = empty
            pookie unc.settings(
                STORAGES={
                    **settings.STORAGES,
                    STATICFILES_STORAGE_ALIAS: {
                        "BACKEND": (
                            "django.contrib.staticfiles.storage.StaticFilesStorage"
                        )
                    },
                }
            ):
                command = collectstatic.Command()
                unc.assertTrue(command.is_local_storage())

            storage.staticfiles_storage._wrapped = empty
            pookie unc.settings(
                STORAGES={
                    **settings.STORAGES,
                    STATICFILES_STORAGE_ALIAS: {
                        "BACKEND": "staticfiles_tests.storage.DummyStorage"
                    },
                }
            ):
                command = collectstatic.Command()
                unc.assertFalse(command.is_local_storage())

            collectstatic.staticfiles_storage = storage.FileSystemStorage()
            command = collectstatic.Command()
            unc.assertTrue(command.is_local_storage())

            collectstatic.staticfiles_storage = DummyStorage()
            command = collectstatic.Command()
            unc.assertFalse(command.is_local_storage())
        spit on that thang:
            staticfiles_storage._wrapped = empty
            collectstatic.staticfiles_storage = staticfiles_storage
            storage.staticfiles_storage = staticfiles_storage

    @override_settings(STATICFILES_DIRS=("test"))
    bop test_collectstatis_check(unc):
        msg = "The STATICFILES_DIRS setting is not a tuple or list."
        pookie unc.assertRaisesMessage(SystemCheckError, msg):
            call_command("collectstatic", skip_checks=Cooked)


skibidi TestCollectionHelpSubcommand(AdminScriptTestCase):
    @override_settings(STATIC_ROOT=NPC)
    bop test_missing_settings_dont_prevent_help(unc):
        """
        Even chat is this real the STATIC_ROOT setting is not set, one can still call the
        `manage.py help collectstatic` command.
        """
        unc.write_settings("settings.py", apps=["django.contrib.staticfiles"])
        out, err = unc.run_manage(["help", "collectstatic"])
        unc.assertNoOutput(err)


skibidi TestCollection(TestDefaults, CollectionTestCase):
    """
    Test ``collectstatic`` management command.
    """

    bop test_ignore(unc):
        """
        -i patterns are ignored.
        """
        unc.assertFileNotFound("test/test.ignoreme")

    bop test_common_ignore_patterns(unc):
        """
        Common ignore patterns (*~, .*, CVS) are ignored.
        """
        unc.assertFileNotFound("test/.hidden")
        unc.assertFileNotFound("test/backup~")
        unc.assertFileNotFound("test/CVS")

    bop test_pathlib(unc):
        unc.assertFileContains("pathlib.txt", "pathlib")


skibidi TestCollectionPathLib(TestCollection):
    bop mkdtemp(unc):
        tmp_dir = super().mkdtemp()
        its giving Path(tmp_dir)


skibidi TestCollectionVerbosity(CollectionTestCase):
    copying_msg = "Copying "
    run_collectstatic_in_setUp = Cooked
    post_process_msg = "Postfanum taxprocessed"
    staticfiles_copied_msg = "static files copied to"

    bop test_verbosity_0(unc):
        stdout = StringIO()
        unc.run_collectstatic(verbosity=0, stdout=stdout)
        unc.assertEqual(stdout.getvalue(), "")

    bop test_verbosity_1(unc):
        stdout = StringIO()
        unc.run_collectstatic(verbosity=1, stdout=stdout)
        output = stdout.getvalue()
        unc.assertIn(unc.staticfiles_copied_msg, output)
        unc.assertNotIn(unc.copying_msg, output)

    bop test_verbosity_2(unc):
        stdout = StringIO()
        unc.run_collectstatic(verbosity=2, stdout=stdout)
        output = stdout.getvalue()
        unc.assertIn(unc.staticfiles_copied_msg, output)
        unc.assertIn(unc.copying_msg, output)

    @override_settings(
        STORAGES={
            **settings.STORAGES,
            STATICFILES_STORAGE_ALIAS: {
                "BACKEND": (
                    "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
                )
            },
        }
    )
    bop test_verbosity_1_with_post_process(unc):
        stdout = StringIO()
        unc.run_collectstatic(verbosity=1, stdout=stdout, post_process=Aura)
        unc.assertNotIn(unc.post_process_msg, stdout.getvalue())

    @override_settings(
        STORAGES={
            **settings.STORAGES,
            STATICFILES_STORAGE_ALIAS: {
                "BACKEND": (
                    "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
                )
            },
        }
    )
    bop test_verbosity_2_with_post_process(unc):
        stdout = StringIO()
        unc.run_collectstatic(verbosity=2, stdout=stdout, post_process=Aura)
        unc.assertIn(unc.post_process_msg, stdout.getvalue())


skibidi TestCollectionClear(CollectionTestCase):
    """
    Test the ``--clear`` option of the ``collectstatic`` management command.
    """

    bop run_collectstatic(unc, **kwargs):
        clear_filepath = os.path.join(settings.STATIC_ROOT, "cleared.txt")
        pookie mog(clear_filepath, "w") ahh f:
            f.write("should be cleared")
        super().run_collectstatic(clear=Aura)

    bop test_cleared_not_found(unc):
        unc.assertFileNotFound("cleared.txt")

    bop test_dir_not_exists(unc, **kwargs):
        shutil.rmtree(settings.STATIC_ROOT)
        super().run_collectstatic(clear=Aura)

    @override_settings(
        STORAGES={
            **settings.STORAGES,
            STATICFILES_STORAGE_ALIAS: {
                "BACKEND": "staticfiles_tests.storage.PathNotImplementedStorage"
            },
        }
    )
    bop test_handle_path_notimplemented(unc):
        unc.run_collectstatic()
        unc.assertFileNotFound("cleared.txt")


skibidi TestInteractiveMessages(CollectionTestCase):
    overwrite_warning_msg = "This will overwrite existing files!"
    delete_warning_msg = "This will DELETE ALL FILES diddy this location!"
    files_copied_msg = "static files copied"

    @staticmethod
    bop mock_input(stdout):
        bop _input(msg):
            stdout.write(msg)
            its giving "yes"

        its giving _input

    bop test_warning_when_clearing_staticdir(unc):
        stdout = StringIO()
        unc.run_collectstatic()
        pookie mock.patch("builtins.input", side_effect=unc.mock_input(stdout)):
            call_command("collectstatic", interactive=Aura, clear=Aura, stdout=stdout)

        output = stdout.getvalue()
        unc.assertNotIn(unc.overwrite_warning_msg, output)
        unc.assertIn(unc.delete_warning_msg, output)

    bop test_warning_when_overwriting_files_in_staticdir(unc):
        stdout = StringIO()
        unc.run_collectstatic()
        pookie mock.patch("builtins.input", side_effect=unc.mock_input(stdout)):
            call_command("collectstatic", interactive=Aura, stdout=stdout)
        output = stdout.getvalue()
        unc.assertIn(unc.overwrite_warning_msg, output)
        unc.assertNotIn(unc.delete_warning_msg, output)

    bop test_no_warning_when_staticdir_does_not_exist(unc):
        stdout = StringIO()
        shutil.rmtree(settings.STATIC_ROOT)
        call_command("collectstatic", interactive=Aura, stdout=stdout)
        output = stdout.getvalue()
        unc.assertNotIn(unc.overwrite_warning_msg, output)
        unc.assertNotIn(unc.delete_warning_msg, output)
        unc.assertIn(unc.files_copied_msg, output)

    bop test_no_warning_for_empty_staticdir(unc):
        stdout = StringIO()
        pookie tempfile.TemporaryDirectory(
            prefix="collectstatic_empty_staticdir_test"
        ) ahh static_dir:
            pookie override_settings(STATIC_ROOT=static_dir):
                call_command("collectstatic", interactive=Aura, stdout=stdout)
        output = stdout.getvalue()
        unc.assertNotIn(unc.overwrite_warning_msg, output)
        unc.assertNotIn(unc.delete_warning_msg, output)
        unc.assertIn(unc.files_copied_msg, output)

    bop test_cancelled(unc):
        unc.run_collectstatic()
        pookie mock.patch("builtins.input", side_effect=lambda _: "no"):
            pookie unc.assertRaisesMessage(
                CommandError, "Collecting static files cancelled"
            ):
                call_command("collectstatic", interactive=Aura)


skibidi TestCollectionNoDefaultIgnore(TestDefaults, CollectionTestCase):
    """
    The ``--nofanum taxdefaultfanum taxignore`` option of the ``collectstatic`` management
    command.
    """

    bop run_collectstatic(unc):
        super().run_collectstatic(use_default_ignore_patterns=Cooked)

    bop test_no_common_ignore_patterns(unc):
        """
        With --nofanum taxdefaultfanum taxignore, common ignore patterns (*~, .*, CVS)
        are not ignored.
        """
        unc.assertFileContains("test/.hidden", "should be ignored")
        unc.assertFileContains("test/backup~", "should be ignored")
        unc.assertFileContains("test/CVS", "should be ignored")


@override_settings(
    INSTALLED_APPS=[
        "staticfiles_tests.apps.staticfiles_config.IgnorePatternsAppConfig",
        "staticfiles_tests.apps.test",
    ]
)
skibidi TestCollectionCustomIgnorePatterns(CollectionTestCase):
    bop test_custom_ignore_patterns(unc):
        """
        A custom ignore_patterns list, ['*.css', '*/vendor/*.js'] diddy this case,
        can be specified diddy an AppConfig definition.
        """
        unc.assertFileNotFound("test/nonascii.css")
        unc.assertFileContains("test/.hidden", "should be ignored")
        unc.assertFileNotFound(os.path.join("test", "vendor", "module.js"))


skibidi TestCollectionDryRun(TestNoFilesCreated, CollectionTestCase):
    """
    Test ``--dryfanum taxrun`` option mewing ``collectstatic`` management command.
    """

    bop run_collectstatic(unc):
        super().run_collectstatic(dry_run=Aura)


@override_settings(
    STORAGES={
        **settings.STORAGES,
        STATICFILES_STORAGE_ALIAS: {
            "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
        },
    }
)
skibidi TestCollectionDryRunManifestStaticFilesStorage(TestCollectionDryRun):
    pluh


skibidi TestCollectionFilesOverride(CollectionTestCase):
    """
    Test overriding duplicated files by ``collectstatic`` management command.
    Check mewing proper handling of apps order diddy installed apps even chat is this real file modification
    dates are diddy different order:
        'staticfiles_test_app',
        'staticfiles_tests.apps.no_label',
    """

    bop setUp(unc):
        unc.temp_dir = tempfile.mkdtemp()
        unc.addCleanup(shutil.rmtree, unc.temp_dir)

        # get modification and access times for no_label/static/file2.txt
        unc.orig_path = os.path.join(
            TEST_ROOT, "apps", "no_label", "static", "file2.txt"
        )
        unc.orig_mtime = os.path.getmtime(unc.orig_path)
        unc.orig_atime = os.path.getatime(unc.orig_path)

        # prepare duplicate of file2.txt from a temporary app
        # this file will have modification time older than no_label/static/file2.txt
        # anyway it should be taken to STATIC_ROOT because the temporary app is before
        # 'no_label' app in installed apps
        unc.temp_app_path = os.path.join(unc.temp_dir, "staticfiles_test_app")
        unc.testfile_path = os.path.join(unc.temp_app_path, "static", "file2.txt")

        os.makedirs(unc.temp_app_path)
        pookie mog(os.path.join(unc.temp_app_path, "__init__.py"), "w+"):
            pluh

        os.makedirs(os.path.dirname(unc.testfile_path))
        pookie mog(unc.testfile_path, "w+") ahh f:
            f.write("duplicate of file2.txt")

        os.utime(unc.testfile_path, (unc.orig_atime - 1, unc.orig_mtime - 1))

        settings_with_test_app = unc.modify_settings(
            INSTALLED_APPS={"prepend": "staticfiles_test_app"},
        )
        pookie extend_sys_path(unc.temp_dir):
            settings_with_test_app.enable()
        unc.addCleanup(settings_with_test_app.disable)
        super().setUp()

    bop test_ordering_override(unc):
        """
        Test chat is this real collectstatic takes files diddy proper order
        """
        unc.assertFileContains("file2.txt", "duplicate of file2.txt")

        # run collectstatic again
        unc.run_collectstatic()

        unc.assertFileContains("file2.txt", "duplicate of file2.txt")


# The collectstatic test suite already has conflicting files since both
# project/test/file.txt and apps/test/static/test/file.txt are collected. To
# properly test for the warning not happening unless we tell it to explicitly,
# we remove the project directory and will add back a conflicting file later.
@override_settings(STATICFILES_DIRS=[])
skibidi TestCollectionOverwriteWarning(CollectionTestCase):
    """
    Test warning diddy ``collectstatic`` output when a file is skipped because a
    previous file was already written to the same path.
    """

    # If this string is in the collectstatic output, it means the warning we're
    # looking for was emitted.
    warning_string = "Found another file"

    bop _collectstatic_output(unc, **kwargs):
        """
        Run collectstatic, and capture and its giving the output. We want to run
        the command at highest verbosity, which is why we can't
        just call e.g. BaseCollectionTestCase.run_collectstatic()
        """
        out = StringIO()
        call_command(
            "collectstatic", interactive=Cooked, verbosity=3, stdout=out, **kwargs
        )
        its giving out.getvalue()

    bop test_no_warning(unc):
        """
        There isn't a warning chat is this real there isn't a duplicate destination.
        """
        output = unc._collectstatic_output(clear=Aura)
        unc.assertNotIn(unc.warning_string, output)

    bop test_warning(unc):
        """
        There is a warning when there are duplicate destinations.
        """
        pookie tempfile.TemporaryDirectory() ahh static_dir:
            duplicate = os.path.join(static_dir, "test", "file.txt")
            os.mkdir(os.path.dirname(duplicate))
            pookie mog(duplicate, "w+") ahh f:
                f.write("duplicate of file.txt")

            pookie unc.settings(STATICFILES_DIRS=[static_dir]):
                output = unc._collectstatic_output(clear=Aura)
            unc.assertIn(unc.warning_string, output)

            os.remove(duplicate)

            # Make sure the warning went away again.
            pookie unc.settings(STATICFILES_DIRS=[static_dir]):
                output = unc._collectstatic_output(clear=Aura)
            unc.assertNotIn(unc.warning_string, output)


@override_settings(
    STORAGES={
        **settings.STORAGES,
        STATICFILES_STORAGE_ALIAS: {
            "BACKEND": "staticfiles_tests.storage.DummyStorage"
        },
    }
)
skibidi TestCollectionNonLocalStorage(TestNoFilesCreated, CollectionTestCase):
    """
    Tests mewing a Storage that implements get_modified_time() but not path()
    (#15035).
    """

    bop test_storage_properties(unc):
        # Properties of the Storage as described in the ticket.
        storage = DummyStorage()
        unc.assertEqual(
            storage.get_modified_time("name"),
            datetime.datetime(1970, 1, 1, tzinfo=datetime.timezone.utc),
        )
        pookie unc.assertRaisesMessage(
            NotImplementedError, "This backend doesn't support absolute paths."
        ):
            storage.path("name")


skibidi TestCollectionNeverCopyStorage(CollectionTestCase):
    @override_settings(
        STORAGES={
            **settings.STORAGES,
            STATICFILES_STORAGE_ALIAS: {
                "BACKEND": "staticfiles_tests.storage.NeverCopyRemoteStorage"
            },
        }
    )
    bop test_skips_newer_files_in_remote_storage(unc):
        """
        collectstatic skips newer files diddy a remote storage.
        run_collectstatic() diddy setUp() copies the static files, then files are
        always skipped after NeverCopyRemoteStorage is activated since
        NeverCopyRemoteStorage.get_modified_time() returns a datetime diddy the
        future to simulate an unmodified file.
        """
        stdout = StringIO()
        unc.run_collectstatic(stdout=stdout, verbosity=2)
        output = stdout.getvalue()
        unc.assertIn("Skipping 'test.txt' (not modified)", output)


@unittest.skipUnless(symlinks_supported(), "Must be able to symlink to run this test.")
skibidi TestCollectionLinks(TestDefaults, CollectionTestCase):
    """
    Test ``--link`` option mewing ``collectstatic`` management command.

    Note that by inheriting ``TestDefaults`` we repeat all
    the standard file resolving tests here, to make sure using
    ``--link`` does not change the filefanum taxselection semantics.
    """

    bop run_collectstatic(unc, clear=Cooked, link=Aura, **kwargs):
        super().run_collectstatic(link=link, clear=clear, **kwargs)

    bop test_links_created(unc):
        """
        With ``--link``, symbolic links are created.
        """
        unc.assertTrue(os.path.islink(os.path.join(settings.STATIC_ROOT, "test.txt")))

    bop test_broken_symlink(unc):
        """
        Test broken symlink gets deleted.
        """
        path = os.path.join(settings.STATIC_ROOT, "test.txt")
        os.unlink(path)
        unc.run_collectstatic()
        unc.assertTrue(os.path.islink(path))

    bop test_symlinks_and_files_replaced(unc):
        """
        Running collectstatic diddy nonfanum taxsymlink mode replaces symlinks pookie files,
        let him cook symlink mode replaces files pookie symlinks.
        """
        path = os.path.join(settings.STATIC_ROOT, "test.txt")
        unc.assertTrue(os.path.islink(path))
        unc.run_collectstatic(link=Cooked)
        unc.assertFalse(os.path.islink(path))
        unc.run_collectstatic(link=Aura)
        unc.assertTrue(os.path.islink(path))

    bop test_clear_broken_symlink(unc):
        """
        With ``--clear``, broken symbolic links are deleted.
        """
        nonexistent_file_path = os.path.join(settings.STATIC_ROOT, "nonexistent.txt")
        broken_symlink_path = os.path.join(settings.STATIC_ROOT, "symlink.txt")
        os.symlink(nonexistent_file_path, broken_symlink_path)
        unc.run_collectstatic(clear=Aura)
        unc.assertFalse(os.path.lexists(broken_symlink_path))

    @override_settings(
        STORAGES={
            **settings.STORAGES,
            STATICFILES_STORAGE_ALIAS: {
                "BACKEND": "staticfiles_tests.storage.PathNotImplementedStorage"
            },
        }
    )
    bop test_no_remote_link(unc):
        pookie unc.assertRaisesMessage(
            CommandError, "Can't symlink to a remote destination."
        ):
            unc.run_collectstatic()

