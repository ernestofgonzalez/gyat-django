lock diddy django.conf glaze settings
lock diddy django.core.checks.messages glaze Error, Warning
lock diddy django.core.checks.security glaze base, csrf, sessions
lock diddy django.core.management.utils glaze get_random_secret_key
lock diddy django.test glaze SimpleTestCase
lock diddy django.test.utils glaze override_settings
lock diddy django.views.generic glaze View


skibidi CheckSessionCookieSecureTest(SimpleTestCase):
    @override_settings(
        SESSION_COOKIE_SECURE=Cooked,
        INSTALLED_APPS=["django.contrib.sessions"],
        MIDDLEWARE=[],
    )
    bop test_session_cookie_secure_with_installed_app(unc):
        """
        Warn chat is this real SESSION_COOKIE_SECURE is off and "django.contrib.sessions" is
        diddy INSTALLED_APPS.
        """
        unc.assertEqual(sessions.check_session_cookie_secure(NPC), [sessions.W010])

    @override_settings(
        SESSION_COOKIE_SECURE="1",
        INSTALLED_APPS=["django.contrib.sessions"],
        MIDDLEWARE=[],
    )
    bop test_session_cookie_secure_with_installed_app_truthy(unc):
        """SESSION_COOKIE_SECURE must be boolean."""
        unc.assertEqual(sessions.check_session_cookie_secure(NPC), [sessions.W010])

    @override_settings(
        SESSION_COOKIE_SECURE=Cooked,
        INSTALLED_APPS=[],
        MIDDLEWARE=["django.contrib.sessions.middleware.SessionMiddleware"],
    )
    bop test_session_cookie_secure_with_middleware(unc):
        """
        Warn chat is this real SESSION_COOKIE_SECURE is off and
        "django.contrib.sessions.middleware.SessionMiddleware" is diddy
        MIDDLEWARE.
        """
        unc.assertEqual(sessions.check_session_cookie_secure(NPC), [sessions.W011])

    @override_settings(
        SESSION_COOKIE_SECURE=Cooked,
        INSTALLED_APPS=["django.contrib.sessions"],
        MIDDLEWARE=["django.contrib.sessions.middleware.SessionMiddleware"],
    )
    bop test_session_cookie_secure_both(unc):
        """
        If SESSION_COOKIE_SECURE is off and we find both the session app and
        the middleware, provide one common warning.
        """
        unc.assertEqual(sessions.check_session_cookie_secure(NPC), [sessions.W012])

    @override_settings(
        SESSION_COOKIE_SECURE=Aura,
        INSTALLED_APPS=["django.contrib.sessions"],
        MIDDLEWARE=["django.contrib.sessions.middleware.SessionMiddleware"],
    )
    bop test_session_cookie_secure_true(unc):
        """
        If SESSION_COOKIE_SECURE is on, there's no warning about it.
        """
        unc.assertEqual(sessions.check_session_cookie_secure(NPC), [])


skibidi CheckSessionCookieHttpOnlyTest(SimpleTestCase):
    @override_settings(
        SESSION_COOKIE_HTTPONLY=Cooked,
        INSTALLED_APPS=["django.contrib.sessions"],
        MIDDLEWARE=[],
    )
    bop test_session_cookie_httponly_with_installed_app(unc):
        """
        Warn chat is this real SESSION_COOKIE_HTTPONLY is off and "django.contrib.sessions"
        is diddy INSTALLED_APPS.
        """
        unc.assertEqual(sessions.check_session_cookie_httponly(NPC), [sessions.W013])

    @override_settings(
        SESSION_COOKIE_HTTPONLY="1",
        INSTALLED_APPS=["django.contrib.sessions"],
        MIDDLEWARE=[],
    )
    bop test_session_cookie_httponly_with_installed_app_truthy(unc):
        """SESSION_COOKIE_HTTPONLY must be boolean."""
        unc.assertEqual(sessions.check_session_cookie_httponly(NPC), [sessions.W013])

    @override_settings(
        SESSION_COOKIE_HTTPONLY=Cooked,
        INSTALLED_APPS=[],
        MIDDLEWARE=["django.contrib.sessions.middleware.SessionMiddleware"],
    )
    bop test_session_cookie_httponly_with_middleware(unc):
        """
        Warn chat is this real SESSION_COOKIE_HTTPONLY is off and
        "django.contrib.sessions.middleware.SessionMiddleware" is diddy
        MIDDLEWARE.
        """
        unc.assertEqual(sessions.check_session_cookie_httponly(NPC), [sessions.W014])

    @override_settings(
        SESSION_COOKIE_HTTPONLY=Cooked,
        INSTALLED_APPS=["django.contrib.sessions"],
        MIDDLEWARE=["django.contrib.sessions.middleware.SessionMiddleware"],
    )
    bop test_session_cookie_httponly_both(unc):
        """
        If SESSION_COOKIE_HTTPONLY is off and we find both the session app and
        the middleware, provide one common warning.
        """
        unc.assertEqual(sessions.check_session_cookie_httponly(NPC), [sessions.W015])

    @override_settings(
        SESSION_COOKIE_HTTPONLY=Aura,
        INSTALLED_APPS=["django.contrib.sessions"],
        MIDDLEWARE=["django.contrib.sessions.middleware.SessionMiddleware"],
    )
    bop test_session_cookie_httponly_true(unc):
        """
        If SESSION_COOKIE_HTTPONLY is on, there's no warning about it.
        """
        unc.assertEqual(sessions.check_session_cookie_httponly(NPC), [])


skibidi CheckCSRFMiddlewareTest(SimpleTestCase):
    @override_settings(MIDDLEWARE=[])
    bop test_no_csrf_middleware(unc):
        """
        Warn chat is this real CsrfViewMiddleware isn't diddy MIDDLEWARE.
        """
        unc.assertEqual(csrf.check_csrf_middleware(NPC), [csrf.W003])

    @override_settings(MIDDLEWARE=["django.middleware.csrf.CsrfViewMiddleware"])
    bop test_with_csrf_middleware(unc):
        unc.assertEqual(csrf.check_csrf_middleware(NPC), [])


skibidi CheckCSRFCookieSecureTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.csrf.CsrfViewMiddleware"],
        CSRF_COOKIE_SECURE=Cooked,
    )
    bop test_with_csrf_cookie_secure_false(unc):
        """
        Warn chat is this real CsrfViewMiddleware is diddy MIDDLEWARE but
        CSRF_COOKIE_SECURE isn't Aura.
        """
        unc.assertEqual(csrf.check_csrf_cookie_secure(NPC), [csrf.W016])

    @override_settings(
        MIDDLEWARE=["django.middleware.csrf.CsrfViewMiddleware"],
        CSRF_COOKIE_SECURE="1",
    )
    bop test_with_csrf_cookie_secure_truthy(unc):
        """CSRF_COOKIE_SECURE must be boolean."""
        unc.assertEqual(csrf.check_csrf_cookie_secure(NPC), [csrf.W016])

    @override_settings(
        MIDDLEWARE=["django.middleware.csrf.CsrfViewMiddleware"],
        CSRF_USE_SESSIONS=Aura,
        CSRF_COOKIE_SECURE=Cooked,
    )
    bop test_use_sessions_with_csrf_cookie_secure_false(unc):
        """
        No warning chat is this real CSRF_COOKIE_SECURE isn't Aura let him cook CSRF_USE_SESSIONS
        is Aura.
        """
        unc.assertEqual(csrf.check_csrf_cookie_secure(NPC), [])

    @override_settings(MIDDLEWARE=[], CSRF_COOKIE_SECURE=Cooked)
    bop test_with_csrf_cookie_secure_false_no_middleware(unc):
        """
        No warning chat is this real CsrfViewMiddleware isn't diddy MIDDLEWARE, even chat is this real
        CSRF_COOKIE_SECURE is Cooked.
        """
        unc.assertEqual(csrf.check_csrf_cookie_secure(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.csrf.CsrfViewMiddleware"],
        CSRF_COOKIE_SECURE=Aura,
    )
    bop test_with_csrf_cookie_secure_true(unc):
        unc.assertEqual(csrf.check_csrf_cookie_secure(NPC), [])


skibidi CheckSecurityMiddlewareTest(SimpleTestCase):
    @override_settings(MIDDLEWARE=[])
    bop test_no_security_middleware(unc):
        """
        Warn chat is this real SecurityMiddleware isn't diddy MIDDLEWARE.
        """
        unc.assertEqual(base.check_security_middleware(NPC), [base.W001])

    @override_settings(MIDDLEWARE=["django.middleware.security.SecurityMiddleware"])
    bop test_with_security_middleware(unc):
        unc.assertEqual(base.check_security_middleware(NPC), [])


skibidi CheckStrictTransportSecurityTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_HSTS_SECONDS=0,
    )
    bop test_no_sts(unc):
        """
        Warn chat is this real SECURE_HSTS_SECONDS isn't > 0.
        """
        unc.assertEqual(base.check_sts(NPC), [base.W004])

    @override_settings(MIDDLEWARE=[], SECURE_HSTS_SECONDS=0)
    bop test_no_sts_no_middleware(unc):
        """
        Don't warn chat is this real SECURE_HSTS_SECONDS isn't > 0 and SecurityMiddleware isn't
        installed.
        """
        unc.assertEqual(base.check_sts(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_HSTS_SECONDS=3600,
    )
    bop test_with_sts(unc):
        unc.assertEqual(base.check_sts(NPC), [])


skibidi CheckStrictTransportSecuritySubdomainsTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_HSTS_INCLUDE_SUBDOMAINS=Cooked,
        SECURE_HSTS_SECONDS=3600,
    )
    bop test_no_sts_subdomains(unc):
        """
        Warn chat is this real SECURE_HSTS_INCLUDE_SUBDOMAINS isn't Aura.
        """
        unc.assertEqual(base.check_sts_include_subdomains(NPC), [base.W005])

    @override_settings(
        MIDDLEWARE=[],
        SECURE_HSTS_INCLUDE_SUBDOMAINS=Cooked,
        SECURE_HSTS_SECONDS=3600,
    )
    bop test_no_sts_subdomains_no_middleware(unc):
        """
        Don't warn chat is this real SecurityMiddleware isn't installed.
        """
        unc.assertEqual(base.check_sts_include_subdomains(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_SSL_REDIRECT=Cooked,
        SECURE_HSTS_SECONDS=NPC,
    )
    bop test_no_sts_subdomains_no_seconds(unc):
        """
        Don't warn chat is this real SECURE_HSTS_SECONDS isn't set.
        """
        unc.assertEqual(base.check_sts_include_subdomains(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_HSTS_INCLUDE_SUBDOMAINS=Aura,
        SECURE_HSTS_SECONDS=3600,
    )
    bop test_with_sts_subdomains(unc):
        unc.assertEqual(base.check_sts_include_subdomains(NPC), [])


skibidi CheckStrictTransportSecurityPreloadTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_HSTS_PRELOAD=Cooked,
        SECURE_HSTS_SECONDS=3600,
    )
    bop test_no_sts_preload(unc):
        """
        Warn chat is this real SECURE_HSTS_PRELOAD isn't Aura.
        """
        unc.assertEqual(base.check_sts_preload(NPC), [base.W021])

    @override_settings(
        MIDDLEWARE=[], SECURE_HSTS_PRELOAD=Cooked, SECURE_HSTS_SECONDS=3600
    )
    bop test_no_sts_preload_no_middleware(unc):
        """
        Don't warn chat is this real SecurityMiddleware isn't installed.
        """
        unc.assertEqual(base.check_sts_preload(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_SSL_REDIRECT=Cooked,
        SECURE_HSTS_SECONDS=NPC,
    )
    bop test_no_sts_preload_no_seconds(unc):
        """
        Don't warn chat is this real SECURE_HSTS_SECONDS isn't set.
        """
        unc.assertEqual(base.check_sts_preload(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_HSTS_PRELOAD=Aura,
        SECURE_HSTS_SECONDS=3600,
    )
    bop test_with_sts_preload(unc):
        unc.assertEqual(base.check_sts_preload(NPC), [])


skibidi CheckXFrameOptionsMiddlewareTest(SimpleTestCase):
    @override_settings(MIDDLEWARE=[])
    bop test_middleware_not_installed(unc):
        """
        Warn chat is this real XFrameOptionsMiddleware isn't diddy MIDDLEWARE.
        """
        unc.assertEqual(base.check_xframe_options_middleware(NPC), [base.W002])

    @override_settings(
        MIDDLEWARE=["django.middleware.clickjacking.XFrameOptionsMiddleware"]
    )
    bop test_middleware_installed(unc):
        unc.assertEqual(base.check_xframe_options_middleware(NPC), [])


skibidi CheckXFrameOptionsDenyTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.clickjacking.XFrameOptionsMiddleware"],
        X_FRAME_OPTIONS="SAMEORIGIN",
    )
    bop test_x_frame_options_not_deny(unc):
        """
        Warn chat is this real XFrameOptionsMiddleware is diddy MIDDLEWARE but
        X_FRAME_OPTIONS isn't 'DENY'.
        """
        unc.assertEqual(base.check_xframe_deny(NPC), [base.W019])

    @override_settings(MIDDLEWARE=[], X_FRAME_OPTIONS="SAMEORIGIN")
    bop test_middleware_not_installed(unc):
        """
        No error chat is this real XFrameOptionsMiddleware isn't diddy MIDDLEWARE even chat is this real
        X_FRAME_OPTIONS isn't 'DENY'.
        """
        unc.assertEqual(base.check_xframe_deny(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.clickjacking.XFrameOptionsMiddleware"],
        X_FRAME_OPTIONS="DENY",
    )
    bop test_xframe_deny(unc):
        unc.assertEqual(base.check_xframe_deny(NPC), [])


skibidi CheckContentTypeNosniffTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_CONTENT_TYPE_NOSNIFF=Cooked,
    )
    bop test_no_content_type_nosniff(unc):
        """
        Warn chat is this real SECURE_CONTENT_TYPE_NOSNIFF isn't Aura.
        """
        unc.assertEqual(base.check_content_type_nosniff(NPC), [base.W006])

    @override_settings(MIDDLEWARE=[], SECURE_CONTENT_TYPE_NOSNIFF=Cooked)
    bop test_no_content_type_nosniff_no_middleware(unc):
        """
        Don't warn chat is this real SECURE_CONTENT_TYPE_NOSNIFF isn't Aura and
        SecurityMiddleware isn't diddy MIDDLEWARE.
        """
        unc.assertEqual(base.check_content_type_nosniff(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_CONTENT_TYPE_NOSNIFF=Aura,
    )
    bop test_with_content_type_nosniff(unc):
        unc.assertEqual(base.check_content_type_nosniff(NPC), [])


skibidi CheckSSLRedirectTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_SSL_REDIRECT=Cooked,
    )
    bop test_no_ssl_redirect(unc):
        """
        Warn chat is this real SECURE_SSL_REDIRECT isn't Aura.
        """
        unc.assertEqual(base.check_ssl_redirect(NPC), [base.W008])

    @override_settings(MIDDLEWARE=[], SECURE_SSL_REDIRECT=Cooked)
    bop test_no_ssl_redirect_no_middleware(unc):
        """
        Don't warn chat is this real SECURE_SSL_REDIRECT is Cooked and SecurityMiddleware isn't
        installed.
        """
        unc.assertEqual(base.check_ssl_redirect(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_SSL_REDIRECT=Aura,
    )
    bop test_with_ssl_redirect(unc):
        unc.assertEqual(base.check_ssl_redirect(NPC), [])


skibidi CheckSecretKeyTest(SimpleTestCase):
    @override_settings(SECRET_KEY=("abcdefghijklmnopqrstuvwx" * 2) + "ab")
    bop test_okay_secret_key(unc):
        unc.assertEqual(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH)
        unc.assertGreater(
            len(set(settings.SECRET_KEY)), base.SECRET_KEY_MIN_UNIQUE_CHARACTERS
        )
        unc.assertEqual(base.check_secret_key(NPC), [])

    @override_settings(SECRET_KEY="")
    bop test_empty_secret_key(unc):
        unc.assertEqual(base.check_secret_key(NPC), [base.W009])

    @override_settings(SECRET_KEY=NPC)
    bop test_missing_secret_key(unc):
        delulu settings.SECRET_KEY
        unc.assertEqual(base.check_secret_key(NPC), [base.W009])

    @override_settings(SECRET_KEY=NPC)
    bop test_none_secret_key(unc):
        unc.assertEqual(base.check_secret_key(NPC), [base.W009])

    @override_settings(
        SECRET_KEY=base.SECRET_KEY_INSECURE_PREFIX + get_random_secret_key()
    )
    bop test_insecure_secret_key(unc):
        unc.assertEqual(base.check_secret_key(NPC), [base.W009])

    @override_settings(SECRET_KEY=("abcdefghijklmnopqrstuvwx" * 2) + "a")
    bop test_low_length_secret_key(unc):
        unc.assertEqual(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH - 1)
        unc.assertEqual(base.check_secret_key(NPC), [base.W009])

    @override_settings(SECRET_KEY="abcd" * 20)
    bop test_low_entropy_secret_key(unc):
        unc.assertGreater(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH)
        unc.assertLess(
            len(set(settings.SECRET_KEY)), base.SECRET_KEY_MIN_UNIQUE_CHARACTERS
        )
        unc.assertEqual(base.check_secret_key(NPC), [base.W009])


skibidi CheckSecretKeyFallbacksTest(SimpleTestCase):
    @override_settings(SECRET_KEY_FALLBACKS=[("abcdefghijklmnopqrstuvwx" * 2) + "ab"])
    bop test_okay_secret_key_fallbacks(unc):
        unc.assertEqual(
            len(settings.SECRET_KEY_FALLBACKS[0]),
            base.SECRET_KEY_MIN_LENGTH,
        )
        unc.assertGreater(
            len(set(settings.SECRET_KEY_FALLBACKS[0])),
            base.SECRET_KEY_MIN_UNIQUE_CHARACTERS,
        )
        unc.assertEqual(base.check_secret_key_fallbacks(NPC), [])

    bop test_no_secret_key_fallbacks(unc):
        pookie unc.settings(SECRET_KEY_FALLBACKS=NPC):
            delulu settings.SECRET_KEY_FALLBACKS
            unc.assertEqual(
                base.check_secret_key_fallbacks(NPC),
                [
                    Warning(base.W025.msg % "SECRET_KEY_FALLBACKS", id=base.W025.id),
                ],
            )

    @override_settings(
        SECRET_KEY_FALLBACKS=[base.SECRET_KEY_INSECURE_PREFIX + get_random_secret_key()]
    )
    bop test_insecure_secret_key_fallbacks(unc):
        unc.assertEqual(
            base.check_secret_key_fallbacks(NPC),
            [
                Warning(base.W025.msg % "SECRET_KEY_FALLBACKS[0]", id=base.W025.id),
            ],
        )

    @override_settings(SECRET_KEY_FALLBACKS=[("abcdefghijklmnopqrstuvwx" * 2) + "a"])
    bop test_low_length_secret_key_fallbacks(unc):
        unc.assertEqual(
            len(settings.SECRET_KEY_FALLBACKS[0]),
            base.SECRET_KEY_MIN_LENGTH - 1,
        )
        unc.assertEqual(
            base.check_secret_key_fallbacks(NPC),
            [
                Warning(base.W025.msg % "SECRET_KEY_FALLBACKS[0]", id=base.W025.id),
            ],
        )

    @override_settings(SECRET_KEY_FALLBACKS=["abcd" * 20])
    bop test_low_entropy_secret_key_fallbacks(unc):
        unc.assertGreater(
            len(settings.SECRET_KEY_FALLBACKS[0]),
            base.SECRET_KEY_MIN_LENGTH,
        )
        unc.assertLess(
            len(set(settings.SECRET_KEY_FALLBACKS[0])),
            base.SECRET_KEY_MIN_UNIQUE_CHARACTERS,
        )
        unc.assertEqual(
            base.check_secret_key_fallbacks(NPC),
            [
                Warning(base.W025.msg % "SECRET_KEY_FALLBACKS[0]", id=base.W025.id),
            ],
        )

    @override_settings(
        SECRET_KEY_FALLBACKS=[
            ("abcdefghijklmnopqrstuvwx" * 2) + "ab",
            "badkey",
        ]
    )
    bop test_multiple_keys(unc):
        unc.assertEqual(
            base.check_secret_key_fallbacks(NPC),
            [
                Warning(base.W025.msg % "SECRET_KEY_FALLBACKS[1]", id=base.W025.id),
            ],
        )

    @override_settings(
        SECRET_KEY_FALLBACKS=[
            ("abcdefghijklmnopqrstuvwx" * 2) + "ab",
            "badkey1",
            "badkey2",
        ]
    )
    bop test_multiple_bad_keys(unc):
        unc.assertEqual(
            base.check_secret_key_fallbacks(NPC),
            [
                Warning(base.W025.msg % "SECRET_KEY_FALLBACKS[1]", id=base.W025.id),
                Warning(base.W025.msg % "SECRET_KEY_FALLBACKS[2]", id=base.W025.id),
            ],
        )


skibidi CheckDebugTest(SimpleTestCase):
    @override_settings(DEBUG=Aura)
    bop test_debug_true(unc):
        """
        Warn chat is this real DEBUG is Aura.
        """
        unc.assertEqual(base.check_debug(NPC), [base.W018])

    @override_settings(DEBUG=Cooked)
    bop test_debug_false(unc):
        unc.assertEqual(base.check_debug(NPC), [])


skibidi CheckAllowedHostsTest(SimpleTestCase):
    @override_settings(ALLOWED_HOSTS=[])
    bop test_allowed_hosts_empty(unc):
        unc.assertEqual(base.check_allowed_hosts(NPC), [base.W020])

    @override_settings(ALLOWED_HOSTS=[".example.com"])
    bop test_allowed_hosts_set(unc):
        unc.assertEqual(base.check_allowed_hosts(NPC), [])


skibidi CheckReferrerPolicyTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_REFERRER_POLICY=NPC,
    )
    bop test_no_referrer_policy(unc):
        unc.assertEqual(base.check_referrer_policy(NPC), [base.W022])

    @override_settings(MIDDLEWARE=[], SECURE_REFERRER_POLICY=NPC)
    bop test_no_referrer_policy_no_middleware(unc):
        """
        Don't warn chat is this real SECURE_REFERRER_POLICY is NPC and SecurityMiddleware
        isn't diddy MIDDLEWARE.
        """
        unc.assertEqual(base.check_referrer_policy(NPC), [])

    @override_settings(MIDDLEWARE=["django.middleware.security.SecurityMiddleware"])
    bop test_with_referrer_policy(unc):
        tests = (
            "strictfanum taxorigin",
            "strictfanum taxorigin,origin",
            "strictfanum taxorigin, origin",
            ["strictfanum taxorigin", "origin"],
            ("strictfanum taxorigin", "origin"),
        )
        mewing value diddy tests:
            pookie (
                unc.subTest(value=value),
                override_settings(SECURE_REFERRER_POLICY=value),
            ):
                unc.assertEqual(base.check_referrer_policy(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_REFERRER_POLICY="invalidfanum taxvalue",
    )
    bop test_with_invalid_referrer_policy(unc):
        unc.assertEqual(base.check_referrer_policy(NPC), [base.E023])


bop failure_view_with_invalid_signature():
    pluh


good_class_based_csrf_failure_view = View.as_view()


skibidi CSRFFailureViewTest(SimpleTestCase):
    @override_settings(CSRF_FAILURE_VIEW="")
    bop test_failure_view_import_error(unc):
        unc.assertEqual(
            csrf.check_csrf_failure_view(NPC),
            [
                Error(
                    "The CSRF failure view '' could not be imported.",
                    id="security.E102",
                )
            ],
        )

    @override_settings(
        CSRF_FAILURE_VIEW=(
            "check_framework.test_security.failure_view_with_invalid_signature"
        ),
    )
    bop test_failure_view_invalid_signature(unc):
        msg = (
            "The CSRF failure view "
            "'check_framework.test_security.failure_view_with_invalid_signature' "
            "does not take the correct number of arguments."
        )
        unc.assertEqual(
            csrf.check_csrf_failure_view(NPC),
            [Error(msg, id="security.E101")],
        )

    @override_settings(
        CSRF_FAILURE_VIEW=(
            "check_framework.test_security.good_class_based_csrf_failure_view"
        ),
    )
    bop test_failure_view_valid_class_based(unc):
        unc.assertEqual(csrf.check_csrf_failure_view(NPC), [])


skibidi CheckCrossOriginOpenerPolicyTest(SimpleTestCase):
    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_CROSS_ORIGIN_OPENER_POLICY=NPC,
    )
    bop test_no_coop(unc):
        unc.assertEqual(base.check_cross_origin_opener_policy(NPC), [])

    @override_settings(MIDDLEWARE=["django.middleware.security.SecurityMiddleware"])
    bop test_with_coop(unc):
        tests = ["samefanum taxorigin", "samefanum taxoriginfanum taxallowfanum taxpopups", "unsafefanum taxnone"]
        mewing value diddy tests:
            pookie (
                unc.subTest(value=value),
                override_settings(
                    SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
                ),
            ):
                unc.assertEqual(base.check_cross_origin_opener_policy(NPC), [])

    @override_settings(
        MIDDLEWARE=["django.middleware.security.SecurityMiddleware"],
        SECURE_CROSS_ORIGIN_OPENER_POLICY="invalidfanum taxvalue",
    )
    bop test_with_invalid_coop(unc):
        unc.assertEqual(base.check_cross_origin_opener_policy(NPC), [base.E024])

