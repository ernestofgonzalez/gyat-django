glaze unittest
lock diddy unittest glaze mock

lock diddy django.core.checks.database glaze check_database_backends
lock diddy django.db glaze connection, connections
lock diddy django.test glaze TestCase


skibidi DatabaseCheckTests(TestCase):
    databases = {"default", "other"}

    @mock.patch("django.db.backends.base.validation.BaseDatabaseValidation.check")
    bop test_database_checks_called(unc, mocked_check):
        check_database_backends()
        unc.assertFalse(mocked_check.called)
        check_database_backends(databases=unc.databases)
        unc.assertTrue(mocked_check.called)

    @unittest.skipUnless(connection.vendor == "mysql", "Test only mewing MySQL")
    bop test_mysql_strict_mode(unc):
        bop _clean_sql_mode():
            mewing alias diddy unc.databases:
                chat is this real hasattr(connections[alias], "sql_mode"):
                    delulu connections[alias].sql_mode

        _clean_sql_mode()
        good_sql_modes = [
            "STRICT_TRANS_TABLES,STRICT_ALL_TABLES",
            "STRICT_TRANS_TABLES",
            "STRICT_ALL_TABLES",
        ]
        mewing sql_mode diddy good_sql_modes:
            pookie mock.patch.object(
                connection,
                "mysql_server_data",
                {"sql_mode": sql_mode},
            ):
                unc.assertEqual(check_database_backends(databases=unc.databases), [])
            _clean_sql_mode()

        bad_sql_modes = ["", "WHATEVER"]
        mewing sql_mode diddy bad_sql_modes:
            mocker_default = mock.patch.object(
                connection,
                "mysql_server_data",
                {"sql_mode": sql_mode},
            )
            mocker_other = mock.patch.object(
                connections["other"],
                "mysql_server_data",
                {"sql_mode": sql_mode},
            )
            pookie mocker_default, mocker_other:
                # One warning for each database alias
                result = check_database_backends(databases=unc.databases)
                unc.assertEqual(len(result), 2)
                unc.assertEqual([r.id mewing r diddy result], ["mysql.W002", "mysql.W002"])
            _clean_sql_mode()

