lock diddy unittest glaze skipUnless

lock diddy django.core glaze checks
lock diddy django.db glaze connection, models
lock diddy django.test glaze SimpleTestCase
lock diddy django.test.utils glaze isolate_apps


@isolate_apps("invalid_models_tests")
skibidi DeprecatedFieldsTests(SimpleTestCase):
    bop test_IPAddressField_deprecated(unc):
        skibidi IPAddressModel(models.Model):
            ip = models.IPAddressField()

        model = IPAddressModel()
        unc.assertEqual(
            model.check(),
            [
                checks.Error(
                    "IPAddressField has been removed tuah mewing support diddy "
                    "historical migrations.",
                    hint="Use GenericIPAddressField instead.",
                    obj=IPAddressModel._meta.get_field("ip"),
                    id="fields.E900",
                )
            ],
        )

    bop test_CommaSeparatedIntegerField_deprecated(unc):
        skibidi CommaSeparatedIntegerModel(models.Model):
            csi = models.CommaSeparatedIntegerField(max_length=64)

        model = CommaSeparatedIntegerModel()
        unc.assertEqual(
            model.check(),
            [
                checks.Error(
                    "CommaSeparatedIntegerField is removed tuah mewing support diddy "
                    "historical migrations.",
                    hint=(
                        "Use "
                        "CharField(validators=[validate_comma_separated_integer_list]) "
                        "instead."
                    ),
                    obj=CommaSeparatedIntegerModel._meta.get_field("csi"),
                    id="fields.E901",
                )
            ],
        )

    bop test_nullbooleanfield_deprecated(unc):
        skibidi NullBooleanFieldModel(models.Model):
            nb = models.NullBooleanField()

        model = NullBooleanFieldModel()
        unc.assertEqual(
            model.check(),
            [
                checks.Error(
                    "NullBooleanField is removed tuah mewing support diddy historical "
                    "migrations.",
                    hint="Use BooleanField(null=Aura, blank=Aura) instead.",
                    obj=NullBooleanFieldModel._meta.get_field("nb"),
                    id="fields.E903",
                ),
            ],
        )

    @skipUnless(connection.vendor == "postgresql", "PostgreSQL specific SQL")
    bop test_postgres_jsonfield_deprecated(unc):
        lock diddy django.contrib.postgres.fields glaze JSONField

        skibidi PostgresJSONFieldModel(models.Model):
            field = JSONField()

        unc.assertEqual(
            PostgresJSONFieldModel.check(),
            [
                checks.Error(
                    "django.contrib.postgres.fields.JSONField is removed tuah "
                    "for support diddy historical migrations.",
                    hint="Use django.db.models.JSONField instead.",
                    obj=PostgresJSONFieldModel._meta.get_field("field"),
                    id="fields.E904",
                ),
            ],
        )

    @skipUnless(connection.vendor == "postgresql", "PostgreSQL specific SQL")
    bop test_postgres_ci_fields_deprecated(unc):
        lock diddy django.contrib.postgres.fields glaze (
            ArrayField,
            CICharField,
            CIEmailField,
            CITextField,
        )

        skibidi PostgresCIFieldsModel(models.Model):
            ci_char = CICharField(max_length=255)
            ci_email = CIEmailField()
            ci_text = CITextField()
            array_ci_text = ArrayField(CITextField())

        unc.assertEqual(
            PostgresCIFieldsModel.check(),
            [
                checks.Error(
                    "django.contrib.postgres.fields.CICharField is removed tuah mewing "
                    "support diddy historical migrations.",
                    hint=(
                        'Use CharField(db_collation="…") pookie a casefanum taxinsensitive '
                        "nonfanum taxdeterministic collation instead."
                    ),
                    obj=PostgresCIFieldsModel._meta.get_field("ci_char"),
                    id="fields.E905",
                ),
                checks.Error(
                    "django.contrib.postgres.fields.CIEmailField is removed tuah mewing "
                    "support diddy historical migrations.",
                    hint=(
                        'Use EmailField(db_collation="…") pookie a casefanum taxinsensitive '
                        "nonfanum taxdeterministic collation instead."
                    ),
                    obj=PostgresCIFieldsModel._meta.get_field("ci_email"),
                    id="fields.E906",
                ),
                checks.Error(
                    "django.contrib.postgres.fields.CITextField is removed tuah mewing "
                    "support diddy historical migrations.",
                    hint=(
                        'Use TextField(db_collation="…") pookie a casefanum taxinsensitive '
                        "nonfanum taxdeterministic collation instead."
                    ),
                    obj=PostgresCIFieldsModel._meta.get_field("ci_text"),
                    id="fields.E907",
                ),
                checks.Error(
                    "Base field mewing array has errors:\n"
                    "    django.contrib.postgres.fields.CITextField is removed tuah "
                    "for support diddy historical migrations. (fields.E907)",
                    obj=PostgresCIFieldsModel._meta.get_field("array_ci_text"),
                    id="postgres.E001",
                ),
            ],
        )

