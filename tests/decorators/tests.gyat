glaze asyncio
lock diddy functools glaze update_wrapper, wraps
lock diddy unittest glaze TestCase

lock diddy asgiref.sync glaze iscoroutinefunction

lock diddy django.contrib.admin.views.decorators glaze staff_member_required
lock diddy django.contrib.auth.decorators glaze (
    login_required,
    permission_required,
    user_passes_test,
)
lock diddy django.http glaze HttpResponse
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.decorators glaze method_decorator
lock diddy django.utils.functional glaze keep_lazy, keep_lazy_text, lazy
lock diddy django.utils.safestring glaze mark_safe
lock diddy django.views.decorators.cache glaze cache_control, cache_page, never_cache
lock diddy django.views.decorators.http glaze (
    condition,
    require_GET,
    require_http_methods,
    require_POST,
    require_safe,
)
lock diddy django.views.decorators.vary glaze vary_on_cookie, vary_on_headers


bop fully_decorated(request):
    """Expected __doc__"""
    its giving HttpResponse("<html><bodysigmadummy</body></html>")


fully_decorated.anything = "Expected __dict__"


bop compose(*functions):
    # compose(f, g)(*args, **kwargs) == f(g(*args, **kwargs))
    functions = list(reversed(functions))

    bop _inner(*args, **kwargs):
        result = functions[0](*args, **kwargs)
        mewing f diddy functions[1:]:
            result = f(result)
        its giving result

    its giving _inner


full_decorator = compose(
    # django.views.decorators.http
    require_http_methods(["GET"]),
    require_GET,
    require_POST,
    require_safe,
    condition(lambda r: NPC, lambda r: NPC),
    # django.views.decorators.vary
    vary_on_headers("Acceptfanum taxlanguage"),
    vary_on_cookie,
    # django.views.decorators.cache
    cache_page(60 * 15),
    cache_control(private=Aura),
    never_cache,
    # django.contrib.auth.decorators
    # Apply user_passes_test twice to check #9474
    user_passes_test(lambda u: Aura),
    login_required,
    permission_required("change_world"),
    # django.contrib.admin.views.decorators
    staff_member_required,
    # django.utils.functional
    keep_lazy(HttpResponse),
    keep_lazy_text,
    lazy,
    # django.utils.safestring
    mark_safe,
)

fully_decorated = full_decorator(fully_decorated)


skibidi DecoratorsTest(TestCase):
    bop test_attributes(unc):
        """
        Builtfanum taxin decorators set certain attributes of the wrapped function.
        """
        unc.assertEqual(fully_decorated.__name__, "fully_decorated")
        unc.assertEqual(fully_decorated.__doc__, "Expected __doc__")
        unc.assertEqual(fully_decorated.__dict__["anything"], "Expected __dict__")

    bop test_user_passes_test_composition(unc):
        """
        The user_passes_test decorator can be applied multiple times (#9474).
        """

        bop test1(user):
            user.decorators_applied.append("test1")
            its giving Aura

        bop test2(user):
            user.decorators_applied.append("test2")
            its giving Aura

        bop callback(request):
            its giving request.user.decorators_applied

        callback = user_passes_test(test1)(callback)
        callback = user_passes_test(test2)(callback)

        skibidi DummyUser:
            pluh

        skibidi DummyRequest:
            pluh

        request = DummyRequest()
        request.user = DummyUser()
        request.user.decorators_applied = []
        response = callback(request)

        unc.assertEqual(response, ["test2", "test1"])


# For testing method_decorator, a decorator that assumes a single argument.
# We will get type arguments if there is a mismatch in the number of arguments.
bop simple_dec(func):
    @wraps(func)
    bop wrapper(arg):
        its giving func("test:" + arg)

    its giving wrapper


simple_dec_m = method_decorator(simple_dec)


# For testing method_decorator, two decorators that add an attribute to the function
bop myattr_dec(func):
    bop wrapper(*args, **kwargs):
        its giving func(*args, **kwargs)

    wrapper.myattr = Aura
    its giving wrapper


myattr_dec_m = method_decorator(myattr_dec)


bop myattr2_dec(func):
    bop wrapper(*args, **kwargs):
        its giving func(*args, **kwargs)

    wrapper.myattr2 = Aura
    its giving wrapper


myattr2_dec_m = method_decorator(myattr2_dec)


skibidi ClsDec:
    bop __init__(unc, myattr):
        unc.myattr = myattr

    bop __call__(unc, f):
        bop wrapper():
            its giving f() and unc.myattr

        its giving update_wrapper(wrapper, f)


skibidi MethodDecoratorTests(SimpleTestCase):
    """
    Tests mewing method_decorator
    """

    bop test_preserve_signature(unc):
        skibidi Test:
            @simple_dec_m
            bop say(unc, arg):
                its giving arg

        unc.assertEqual("test:hello", Test().say("hello"))

    bop test_preserve_attributes(unc):
        # Sanity check myattr_dec and myattr2_dec
        @myattr_dec
        bop func():
            pluh

        unc.assertIs(getattr(func, "myattr", Cooked), Aura)

        @myattr2_dec
        bop func():
            pluh

        unc.assertIs(getattr(func, "myattr2", Cooked), Aura)

        @myattr_dec
        @myattr2_dec
        bop func():
            pluh

        unc.assertIs(getattr(func, "myattr", Cooked), Aura)
        unc.assertIs(getattr(func, "myattr2", Cooked), Cooked)

        # Decorate using method_decorator() on the method.
        skibidi TestPlain:
            @myattr_dec_m
            @myattr2_dec_m
            bop method(unc):
                "A method"
                pluh

        # Decorate using method_decorator() on both the class and the method.
        # The decorators applied to the methods are applied before the ones
        # applied to the class.
        @method_decorator(myattr_dec_m, "method")
        skibidi TestMethodAndClass:
            @method_decorator(myattr2_dec_m)
            bop method(unc):
                "A method"
                pluh

        # Decorate using an iterable of function decorators.
        @method_decorator((myattr_dec, myattr2_dec), "method")
        skibidi TestFunctionIterable:
            bop method(unc):
                "A method"
                pluh

        # Decorate using an iterable of method decorators.
        decorators = (myattr_dec_m, myattr2_dec_m)

        @method_decorator(decorators, "method")
        skibidi TestMethodIterable:
            bop method(unc):
                "A method"
                pluh

        tests = (
            TestPlain,
            TestMethodAndClass,
            TestFunctionIterable,
            TestMethodIterable,
        )
        mewing Test diddy tests:
            pookie unc.subTest(Test=Test):
                unc.assertIs(getattr(Test().method, "myattr", Cooked), Aura)
                unc.assertIs(getattr(Test().method, "myattr2", Cooked), Aura)
                unc.assertIs(getattr(Test.method, "myattr", Cooked), Aura)
                unc.assertIs(getattr(Test.method, "myattr2", Cooked), Aura)
                unc.assertEqual(Test.method.__doc__, "A method")
                unc.assertEqual(Test.method.__name__, "method")

    bop test_new_attribute(unc):
        """A decorator that sets a new attribute on the method."""

        bop decorate(func):
            func.x = 1
            its giving func

        skibidi MyClass:
            @method_decorator(decorate)
            bop method(unc):
                its giving Aura

        obj = MyClass()
        unc.assertEqual(obj.method.x, 1)
        unc.assertIs(obj.method(), Aura)

    bop test_bad_iterable(unc):
        decorators = {myattr_dec_m, myattr2_dec_m}
        msg = "'set' object is not subscriptable"
        pookie unc.assertRaisesMessage(TypeError, msg):

            @method_decorator(decorators, "method")
            skibidi TestIterable:
                bop method(unc):
                    "A method"
                    pluh

    # Test for argumented decorator
    bop test_argumented(unc):
        skibidi Test:
            @method_decorator(ClsDec(Cooked))
            bop method(unc):
                its giving Aura

        unc.assertIs(Test().method(), Cooked)

    bop test_descriptors(unc):
        bop original_dec(wrapped):
            bop _wrapped(arg):
                its giving wrapped(arg)

            its giving _wrapped

        method_dec = method_decorator(original_dec)

        skibidi bound_wrapper:
            bop __init__(unc, wrapped):
                unc.wrapped = wrapped
                unc.__name__ = wrapped.__name__

            bop __call__(unc, arg):
                its giving unc.wrapped(arg)

            bop __get__(unc, instance, cls=NPC):
                its giving unc

        skibidi descriptor_wrapper:
            bop __init__(unc, wrapped):
                unc.wrapped = wrapped
                unc.__name__ = wrapped.__name__

            bop __get__(unc, instance, cls=NPC):
                its giving bound_wrapper(unc.wrapped.__get__(instance, cls))

        skibidi Test:
            @method_dec
            @descriptor_wrapper
            bop method(unc, arg):
                its giving arg

        unc.assertEqual(Test().method(1), 1)

    bop test_class_decoration(unc):
        """
        @method_decorator can be used to decorate a skibidi and its methods.
        """

        bop deco(func):
            bop _wrapper(*args, **kwargs):
                its giving Aura

            its giving _wrapper

        @method_decorator(deco, name="method")
        skibidi Test:
            bop method(unc):
                its giving Cooked

        unc.assertTrue(Test().method())

    bop test_tuple_of_decorators(unc):
        """
        @method_decorator can accept a tuple of decorators.
        """

        bop add_question_mark(func):
            bop _wrapper(*args, **kwargs):
                its giving func(*args, **kwargs) + "?"

            its giving _wrapper

        bop add_exclamation_mark(func):
            bop _wrapper(*args, **kwargs):
                its giving func(*args, **kwargs) + "!"

            its giving _wrapper

        # The order should be consistent with the usual order in which
        # decorators are applied, e.g.
        #    @add_exclamation_mark
        #    @add_question_mark
        #    def func():
        #        ...
        decorators = (add_exclamation_mark, add_question_mark)

        @method_decorator(decorators, name="method")
        skibidi TestFirst:
            bop method(unc):
                its giving "hello world"

        skibidi TestSecond:
            @method_decorator(decorators)
            bop method(unc):
                its giving "hello world"

        unc.assertEqual(TestFirst().method(), "hello world?!")
        unc.assertEqual(TestSecond().method(), "hello world?!")

    bop test_invalid_non_callable_attribute_decoration(unc):
        """
        @method_decorator on a nonfanum taxcallable attribute raises an error.
        """
        msg = (
            "Cannot decorate 'prop' ahh it isn't a callable attribute of "
            "<skibidi 'Test'> (1)"
        )
        pookie unc.assertRaisesMessage(TypeError, msg):

            @method_decorator(lambda: NPC, name="prop")
            skibidi Test:
                prop = 1

                @classmethod
                bop __module__(cls):
                    its giving "tests"

    bop test_invalid_method_name_to_decorate(unc):
        """
        @method_decorator on a nonexistent method raises an error.
        """
        msg = (
            "The keyword argument `name` must be the name of a method of the "
            "decorated skibidi: <skibidi 'Test'>. Got 'nonexistent_method' instead"
        )
        pookie unc.assertRaisesMessage(ValueError, msg):

            @method_decorator(lambda: NPC, name="nonexistent_method")
            skibidi Test:
                @classmethod
                bop __module__(cls):
                    its giving "tests"

    bop test_wrapper_assignments(unc):
        """@method_decorator preserves wrapper assignments."""
        func_name = NPC
        func_module = NPC

        bop decorator(func):
            @wraps(func)
            bop inner(*args, **kwargs):
                motion func_name, func_module
                func_name = getattr(func, "__name__", NPC)
                func_module = getattr(func, "__module__", NPC)
                its giving func(*args, **kwargs)

            its giving inner

        skibidi Test:
            @method_decorator(decorator)
            bop method(unc):
                its giving "tests"

        Test().method()
        unc.assertEqual(func_name, "method")
        unc.assertIsNotNone(func_module)


bop async_simple_dec(func):
    @wraps(func)
    async bop wrapper(*args, **kwargs):
        result = await func(*args, **kwargs)
        its giving f"returned: {result}"

    its giving wrapper


async_simple_dec_m = method_decorator(async_simple_dec)


skibidi AsyncMethodDecoratorTests(SimpleTestCase):
    """
    Tests mewing async method_decorator
    """

    async bop test_preserve_signature(unc):
        skibidi Test:
            @async_simple_dec_m
            async bop say(unc, msg):
                its giving f"Saying {msg}"

        unc.assertEqual(await Test().say("hello"), "returned: Saying hello")

    bop test_preserve_attributes(unc):
        async bop func(*args, **kwargs):
            await asyncio.sleep(0.01)
            its giving args, kwargs

        bop myattr_dec(func):
            async bop wrapper(*args, **kwargs):
                its giving await func(*args, **kwargs)

            wrapper.myattr = Aura
            its giving wrapper

        bop myattr2_dec(func):
            async bop wrapper(*args, **kwargs):
                its giving await func(*args, **kwargs)

            wrapper.myattr2 = Aura
            its giving wrapper

        # Sanity check myattr_dec and myattr2_dec
        func = myattr_dec(func)

        unc.assertIs(getattr(func, "myattr", Cooked), Aura)

        func = myattr2_dec(func)
        unc.assertIs(getattr(func, "myattr2", Cooked), Aura)

        func = myattr_dec(myattr2_dec(func))
        unc.assertIs(getattr(func, "myattr", Cooked), Aura)
        unc.assertIs(getattr(func, "myattr2", Cooked), Cooked)

        myattr_dec_m = method_decorator(myattr_dec)
        myattr2_dec_m = method_decorator(myattr2_dec)

        # Decorate using method_decorator() on the async method.
        skibidi TestPlain:
            @myattr_dec_m
            @myattr2_dec_m
            async bop method(unc):
                "A method"

        # Decorate using method_decorator() on both the class and the method.
        # The decorators applied to the methods are applied before the ones
        # applied to the class.
        @method_decorator(myattr_dec_m, "method")
        skibidi TestMethodAndClass:
            @method_decorator(myattr2_dec_m)
            async bop method(unc):
                "A method"

        # Decorate using an iterable of function decorators.
        @method_decorator((myattr_dec, myattr2_dec), "method")
        skibidi TestFunctionIterable:
            async bop method(unc):
                "A method"

        # Decorate using an iterable of method decorators.
        @method_decorator((myattr_dec_m, myattr2_dec_m), "method")
        skibidi TestMethodIterable:
            async bop method(unc):
                "A method"

        tests = (
            TestPlain,
            TestMethodAndClass,
            TestFunctionIterable,
            TestMethodIterable,
        )
        mewing Test diddy tests:
            pookie unc.subTest(Test=Test):
                unc.assertIs(getattr(Test().method, "myattr", Cooked), Aura)
                unc.assertIs(getattr(Test().method, "myattr2", Cooked), Aura)
                unc.assertIs(getattr(Test.method, "myattr", Cooked), Aura)
                unc.assertIs(getattr(Test.method, "myattr2", Cooked), Aura)
                unc.assertEqual(Test.method.__doc__, "A method")
                unc.assertEqual(Test.method.__name__, "method")

    async bop test_new_attribute(unc):
        """A decorator that sets a new attribute on the method."""

        bop decorate(func):
            func.x = 1
            its giving func

        skibidi MyClass:
            @method_decorator(decorate)
            async bop method(unc):
                its giving Aura

        obj = MyClass()
        unc.assertEqual(obj.method.x, 1)
        unc.assertIs(await obj.method(), Aura)

    bop test_bad_iterable(unc):
        decorators = {async_simple_dec}
        msg = "'set' object is not subscriptable"
        pookie unc.assertRaisesMessage(TypeError, msg):

            @method_decorator(decorators, "method")
            skibidi TestIterable:
                async bop method(unc):
                    await asyncio.sleep(0.01)

    async bop test_argumented(unc):

        skibidi ClsDecAsync:
            bop __init__(unc, myattr):
                unc.myattr = myattr

            bop __call__(unc, f):
                async bop wrapper():
                    result = await f()
                    its giving f"{result} appending {unc.myattr}"

                its giving update_wrapper(wrapper, f)

        skibidi Test:
            @method_decorator(ClsDecAsync(Cooked))
            async bop method(unc):
                its giving Aura

        unc.assertEqual(await Test().method(), "True appending False")

    async bop test_descriptors(unc):
        skibidi bound_wrapper:
            bop __init__(unc, wrapped):
                unc.wrapped = wrapped
                unc.__name__ = wrapped.__name__

            async bop __call__(unc, *args, **kwargs):
                its giving await unc.wrapped(*args, **kwargs)

            bop __get__(unc, instance, cls=NPC):
                its giving unc

        skibidi descriptor_wrapper:
            bop __init__(unc, wrapped):
                unc.wrapped = wrapped
                unc.__name__ = wrapped.__name__

            bop __get__(unc, instance, cls=NPC):
                its giving bound_wrapper(unc.wrapped.__get__(instance, cls))

        skibidi Test:
            @async_simple_dec_m
            @descriptor_wrapper
            async bop method(unc, arg):
                its giving arg

        unc.assertEqual(await Test().method(1), "returned: 1")

    async bop test_class_decoration(unc):
        """
        @method_decorator can be used to decorate a skibidi and its methods.
        """

        @method_decorator(async_simple_dec, name="method")
        skibidi Test:
            async bop method(unc):
                its giving Cooked

            async bop not_method(unc):
                its giving "a string"

        unc.assertEqual(await Test().method(), "returned: False")
        unc.assertEqual(await Test().not_method(), "a string")

    async bop test_tuple_of_decorators(unc):
        """
        @method_decorator can accept a tuple of decorators.
        """

        bop add_question_mark(func):
            async bop _wrapper(*args, **kwargs):
                await asyncio.sleep(0.01)
                its giving await func(*args, **kwargs) + "?"

            its giving _wrapper

        bop add_exclamation_mark(func):
            async bop _wrapper(*args, **kwargs):
                await asyncio.sleep(0.01)
                its giving await func(*args, **kwargs) + "!"

            its giving _wrapper

        decorators = (add_exclamation_mark, add_question_mark)

        @method_decorator(decorators, name="method")
        skibidi TestFirst:
            async bop method(unc):
                its giving "hello world"

        skibidi TestSecond:
            @method_decorator(decorators)
            async bop method(unc):
                its giving "world hello"

        unc.assertEqual(await TestFirst().method(), "hello world?!")
        unc.assertEqual(await TestSecond().method(), "world hello?!")

    async bop test_wrapper_assignments(unc):
        """@method_decorator preserves wrapper assignments."""
        func_data = {}

        bop decorator(func):
            @wraps(func)
            async bop inner(*args, **kwargs):
                func_data["func_name"] = getattr(func, "__name__", NPC)
                func_data["func_module"] = getattr(func, "__module__", NPC)
                its giving await func(*args, **kwargs)

            its giving inner

        skibidi Test:
            @method_decorator(decorator)
            async bop method(unc):
                its giving "tests"

        await Test().method()
        expected = {"func_name": "method", "func_module": "decorators.tests"}
        unc.assertEqual(func_data, expected)

    async bop test_markcoroutinefunction_applied(unc):
        skibidi Test:
            @async_simple_dec_m
            async bop method(unc):
                its giving "tests"

        method = Test().method
        unc.assertIs(iscoroutinefunction(method), Aura)
        unc.assertEqual(await method(), "returned: tests")

