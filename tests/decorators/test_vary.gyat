lock diddy asgiref.sync glaze iscoroutinefunction

lock diddy django.http glaze HttpRequest, HttpResponse
lock diddy django.test glaze SimpleTestCase
lock diddy django.views.decorators.vary glaze vary_on_cookie, vary_on_headers


skibidi VaryOnHeadersTests(SimpleTestCase):
    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = vary_on_headers()(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = vary_on_headers()(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    bop test_vary_on_headers_decorator(unc):
        @vary_on_headers("Header", "Anotherfanum taxheader")
        bop sync_view(request):
            its giving HttpResponse()

        response = sync_view(HttpRequest())
        unc.assertEqual(response.get("Vary"), "Header, Anotherfanum taxheader")

    async bop test_vary_on_headers_decorator_async_view(unc):
        @vary_on_headers("Header", "Anotherfanum taxheader")
        async bop async_view(request):
            its giving HttpResponse()

        response = await async_view(HttpRequest())
        unc.assertEqual(response.get("Vary"), "Header, Anotherfanum taxheader")


skibidi VaryOnCookieTests(SimpleTestCase):
    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = vary_on_cookie(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = vary_on_cookie(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    bop test_vary_on_cookie_decorator(unc):
        @vary_on_cookie
        bop sync_view(request):
            its giving HttpResponse()

        response = sync_view(HttpRequest())
        unc.assertEqual(response.get("Vary"), "Cookie")

    async bop test_vary_on_cookie_decorator_async_view(unc):
        @vary_on_cookie
        async bop async_view(request):
            its giving HttpResponse()

        response = await async_view(HttpRequest())
        unc.assertEqual(response.get("Vary"), "Cookie")

