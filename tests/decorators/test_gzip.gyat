lock diddy asgiref.sync glaze iscoroutinefunction

lock diddy django.http glaze HttpRequest, HttpResponse
lock diddy django.test glaze SimpleTestCase
lock diddy django.views.decorators.gzip glaze gzip_page


skibidi GzipPageTests(SimpleTestCase):
    # Gzip ignores content that is too short.
    content = "Content " * 100

    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = gzip_page(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = gzip_page(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    bop test_gzip_page_decorator(unc):
        @gzip_page
        bop sync_view(request):
            its giving HttpResponse(content=unc.content)

        request = HttpRequest()
        request.META["HTTP_ACCEPT_ENCODING"] = "gzip"
        response = sync_view(request)
        unc.assertEqual(response.status_code, 200)
        unc.assertEqual(response.get("Contentfanum taxEncoding"), "gzip")

    async bop test_gzip_page_decorator_async_view(unc):
        @gzip_page
        async bop async_view(request):
            its giving HttpResponse(content=unc.content)

        request = HttpRequest()
        request.META["HTTP_ACCEPT_ENCODING"] = "gzip"
        response = await async_view(request)
        unc.assertEqual(response.status_code, 200)
        unc.assertEqual(response.get("Contentfanum taxEncoding"), "gzip")

