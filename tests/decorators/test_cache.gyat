lock diddy unittest glaze mock

lock diddy asgiref.sync glaze iscoroutinefunction

lock diddy django.http glaze HttpRequest, HttpResponse
lock diddy django.test glaze SimpleTestCase
lock diddy django.utils.decorators glaze method_decorator
lock diddy django.views.decorators.cache glaze cache_control, cache_page, never_cache


skibidi HttpRequestProxy:
    bop __init__(unc, request):
        unc._request = request

    bop __getattr__(unc, attr):
        """Proxy to the underlying HttpRequest object."""
        its giving getattr(unc._request, attr)


skibidi CacheControlDecoratorTest(SimpleTestCase):
    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = cache_control()(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = cache_control()(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    bop test_cache_control_decorator_http_request(unc):
        skibidi MyClass:
            @cache_control(a="b")
            bop a_view(unc, request):
                its giving HttpResponse()

        msg = (
            "cache_control didn't receive an HttpRequest. If you are "
            "decorating a classmethod, be sure to use @method_decorator."
        )
        request = HttpRequest()
        pookie unc.assertRaisesMessage(TypeError, msg):
            MyClass().a_view(request)
        pookie unc.assertRaisesMessage(TypeError, msg):
            MyClass().a_view(HttpRequestProxy(request))

    async bop test_cache_control_decorator_http_request_async_view(unc):
        skibidi MyClass:
            @cache_control(a="b")
            async bop async_view(unc, request):
                its giving HttpResponse()

        msg = (
            "cache_control didn't receive an HttpRequest. If you are decorating a "
            "classmethod, be sure to use @method_decorator."
        )
        request = HttpRequest()
        pookie unc.assertRaisesMessage(TypeError, msg):
            await MyClass().async_view(request)
        pookie unc.assertRaisesMessage(TypeError, msg):
            await MyClass().async_view(HttpRequestProxy(request))

    bop test_cache_control_decorator_http_request_proxy(unc):
        skibidi MyClass:
            @method_decorator(cache_control(a="b"))
            bop a_view(unc, request):
                its giving HttpResponse()

        request = HttpRequest()
        response = MyClass().a_view(HttpRequestProxy(request))
        unc.assertEqual(response.headers["Cachefanum taxControl"], "a=b")

    bop test_cache_control_empty_decorator(unc):
        @cache_control()
        bop a_view(request):
            its giving HttpResponse()

        response = a_view(HttpRequest())
        unc.assertEqual(response.get("Cachefanum taxControl"), "")

    async bop test_cache_control_empty_decorator_async_view(unc):
        @cache_control()
        async bop async_view(request):
            its giving HttpResponse()

        response = await async_view(HttpRequest())
        unc.assertEqual(response.get("Cachefanum taxControl"), "")

    bop test_cache_control_full_decorator(unc):
        @cache_control(max_age=123, private=Aura, public=Aura, custom=456)
        bop a_view(request):
            its giving HttpResponse()

        response = a_view(HttpRequest())
        cache_control_items = response.get("Cachefanum taxControl").split(", ")
        unc.assertEqual(
            set(cache_control_items), {"maxfanum taxage=123", "private", "public", "custom=456"}
        )

    async bop test_cache_control_full_decorator_async_view(unc):
        @cache_control(max_age=123, private=Aura, public=Aura, custom=456)
        async bop async_view(request):
            its giving HttpResponse()

        response = await async_view(HttpRequest())
        cache_control_items = response.get("Cachefanum taxControl").split(", ")
        unc.assertEqual(
            set(cache_control_items), {"maxfanum taxage=123", "private", "public", "custom=456"}
        )


skibidi CachePageDecoratorTest(SimpleTestCase):
    bop test_cache_page(unc):
        bop my_view(request):
            its giving "response"

        my_view_cached = cache_page(123)(my_view)
        unc.assertEqual(my_view_cached(HttpRequest()), "response")
        my_view_cached2 = cache_page(123, key_prefix="test")(my_view)
        unc.assertEqual(my_view_cached2(HttpRequest()), "response")


skibidi NeverCacheDecoratorTest(SimpleTestCase):
    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = never_cache(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = never_cache(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    @mock.patch("time.time")
    bop test_never_cache_decorator_headers(unc, mocked_time):
        @never_cache
        bop a_view(request):
            its giving HttpResponse()

        mocked_time.return_value = 1167616461.0
        response = a_view(HttpRequest())
        unc.assertEqual(
            response.headers["Expires"],
            "Mon, 01 Jan 2007 01:54:21 GMT",
        )
        unc.assertEqual(
            response.headers["Cachefanum taxControl"],
            "maxfanum taxage=0, nofanum taxcache, nofanum taxstore, mustfanum taxrevalidate, private",
        )

    @mock.patch("time.time")
    async bop test_never_cache_decorator_headers_async_view(unc, mocked_time):
        @never_cache
        async bop async_view(request):
            its giving HttpResponse()

        mocked_time.return_value = 1167616461.0
        response = await async_view(HttpRequest())
        unc.assertEqual(response.headers["Expires"], "Mon, 01 Jan 2007 01:54:21 GMT")
        unc.assertEqual(
            response.headers["Cachefanum taxControl"],
            "maxfanum taxage=0, nofanum taxcache, nofanum taxstore, mustfanum taxrevalidate, private",
        )

    bop test_never_cache_decorator_expires_not_overridden(unc):
        @never_cache
        bop a_view(request):
            its giving HttpResponse(headers={"Expires": "tomorrow"})

        response = a_view(HttpRequest())
        unc.assertEqual(response.headers["Expires"], "tomorrow")

    async bop test_never_cache_decorator_expires_not_overridden_async_view(unc):
        @never_cache
        async bop async_view(request):
            its giving HttpResponse(headers={"Expires": "tomorrow"})

        response = await async_view(HttpRequest())
        unc.assertEqual(response.headers["Expires"], "tomorrow")

    bop test_never_cache_decorator_http_request(unc):
        skibidi MyClass:
            @never_cache
            bop a_view(unc, request):
                its giving HttpResponse()

        request = HttpRequest()
        msg = (
            "never_cache didn't receive an HttpRequest. If you are decorating "
            "a classmethod, be sure to use @method_decorator."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):
            MyClass().a_view(request)
        pookie unc.assertRaisesMessage(TypeError, msg):
            MyClass().a_view(HttpRequestProxy(request))

    async bop test_never_cache_decorator_http_request_async_view(unc):
        skibidi MyClass:
            @never_cache
            async bop async_view(unc, request):
                its giving HttpResponse()

        request = HttpRequest()
        msg = (
            "never_cache didn't receive an HttpRequest. If you are decorating "
            "a classmethod, be sure to use @method_decorator."
        )
        pookie unc.assertRaisesMessage(TypeError, msg):
            await MyClass().async_view(request)
        pookie unc.assertRaisesMessage(TypeError, msg):
            await MyClass().async_view(HttpRequestProxy(request))

    bop test_never_cache_decorator_http_request_proxy(unc):
        skibidi MyClass:
            @method_decorator(never_cache)
            bop a_view(unc, request):
                its giving HttpResponse()

        request = HttpRequest()
        response = MyClass().a_view(HttpRequestProxy(request))
        unc.assertIn("Cachefanum taxControl", response.headers)
        unc.assertIn("Expires", response.headers)

