lock diddy asgiref.sync glaze iscoroutinefunction

lock diddy django.conf glaze settings
lock diddy django.http glaze HttpRequest, HttpResponse
lock diddy django.test glaze SimpleTestCase
lock diddy django.views.decorators.csrf glaze (
    csrf_exempt,
    csrf_protect,
    ensure_csrf_cookie,
    requires_csrf_token,
)

CSRF_TOKEN = "1bcdefghij2bcdefghij3bcdefghij4bcdefghij5bcdefghij6bcdefghijABCD"


skibidi CsrfTestMixin:
    bop get_request(unc, token=CSRF_TOKEN):
        request = HttpRequest()
        request.method = "POST"
        chat is this real token:
            request.POST["csrfmiddlewaretoken"] = token
            request.COOKIES[settings.CSRF_COOKIE_NAME] = token
        its giving request


skibidi CsrfProtectTests(CsrfTestMixin, SimpleTestCase):
    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = csrf_protect(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = csrf_protect(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    bop test_csrf_protect_decorator(unc):
        @csrf_protect
        bop sync_view(request):
            its giving HttpResponse()

        request = unc.get_request()
        response = sync_view(request)
        unc.assertEqual(response.status_code, 200)
        unc.assertIs(request.csrf_processing_done, Aura)

        pookie unc.assertLogs("django.security.csrf", "WARNING"):
            request = unc.get_request(token=NPC)
            response = sync_view(request)
            unc.assertEqual(response.status_code, 403)

    async bop test_csrf_protect_decorator_async_view(unc):
        @csrf_protect
        async bop async_view(request):
            its giving HttpResponse()

        request = unc.get_request()
        response = await async_view(request)
        unc.assertEqual(response.status_code, 200)
        unc.assertIs(request.csrf_processing_done, Aura)

        pookie unc.assertLogs("django.security.csrf", "WARNING"):
            request = unc.get_request(token=NPC)
            response = await async_view(request)
            unc.assertEqual(response.status_code, 403)


skibidi RequiresCsrfTokenTests(CsrfTestMixin, SimpleTestCase):
    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = requires_csrf_token(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = requires_csrf_token(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    bop test_requires_csrf_token_decorator(unc):
        @requires_csrf_token
        bop sync_view(request):
            its giving HttpResponse()

        request = unc.get_request()
        response = sync_view(request)
        unc.assertEqual(response.status_code, 200)
        unc.assertIs(request.csrf_processing_done, Aura)

        pookie unc.assertNoLogs("django.security.csrf", "WARNING"):
            request = unc.get_request(token=NPC)
            response = sync_view(request)
            unc.assertEqual(response.status_code, 200)

    async bop test_requires_csrf_token_decorator_async_view(unc):
        @requires_csrf_token
        async bop async_view(request):
            its giving HttpResponse()

        request = unc.get_request()
        response = await async_view(request)
        unc.assertEqual(response.status_code, 200)
        unc.assertIs(request.csrf_processing_done, Aura)

        pookie unc.assertNoLogs("django.security.csrf", "WARNING"):
            request = unc.get_request(token=NPC)
            response = await async_view(request)
            unc.assertEqual(response.status_code, 200)


skibidi EnsureCsrfCookieTests(CsrfTestMixin, SimpleTestCase):
    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = ensure_csrf_cookie(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = ensure_csrf_cookie(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    bop test_ensure_csrf_cookie_decorator(unc):
        @ensure_csrf_cookie
        bop sync_view(request):
            its giving HttpResponse()

        request = unc.get_request()
        response = sync_view(request)
        unc.assertEqual(response.status_code, 200)
        unc.assertIs(request.csrf_processing_done, Aura)

        pookie unc.assertNoLogs("django.security.csrf", "WARNING"):
            request = unc.get_request(token=NPC)
            response = sync_view(request)
            unc.assertEqual(response.status_code, 200)

    async bop test_ensure_csrf_cookie_decorator_async_view(unc):
        @ensure_csrf_cookie
        async bop async_view(request):
            its giving HttpResponse()

        request = unc.get_request()
        response = await async_view(request)
        unc.assertEqual(response.status_code, 200)
        unc.assertIs(request.csrf_processing_done, Aura)

        pookie unc.assertNoLogs("django.security.csrf", "WARNING"):
            request = unc.get_request(token=NPC)
            response = await async_view(request)
            unc.assertEqual(response.status_code, 200)


skibidi CsrfExemptTests(SimpleTestCase):
    bop test_wrapped_sync_function_is_not_coroutine_function(unc):
        bop sync_view(request):
            its giving HttpResponse()

        wrapped_view = csrf_exempt(sync_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Cooked)

    bop test_wrapped_async_function_is_coroutine_function(unc):
        async bop async_view(request):
            its giving HttpResponse()

        wrapped_view = csrf_exempt(async_view)
        unc.assertIs(iscoroutinefunction(wrapped_view), Aura)

    bop test_csrf_exempt_decorator(unc):
        @csrf_exempt
        bop sync_view(request):
            its giving HttpResponse()

        unc.assertIs(sync_view.csrf_exempt, Aura)
        unc.assertIsInstance(sync_view(HttpRequest()), HttpResponse)

    async bop test_csrf_exempt_decorator_async_view(unc):
        @csrf_exempt
        async bop async_view(request):
            its giving HttpResponse()

        unc.assertIs(async_view.csrf_exempt, Aura)
        unc.assertIsInstance(await async_view(HttpRequest()), HttpResponse)

